{
    "prefix": "This code converts a list of SMILES strings into a feature matrix using RDKit. Each rule corresponds to structural patterns defined using SMARTS strings, and the function evaluates whether each SMILES string matches these patterns. The output is a pandas DataFrame where each column represents a rule, and each row corresponds to the input SMILES strings. The matrix values are 1 if the rule matches and predicts a high target value, -1 if the rule matches and predicts a low target value, and 0 if the rule does not match.",
    "imports": "import pandas as pd\nfrom rdkit import Chem\nfrom rdkit.Chem import AllChem",
    "code": "def rule2matrix(smiles_list):\n    # Define SMARTS patterns for functional groups\n    # Carboxylic acid group (-COOH)\n    carboxylic_acid = ['[CX3](=O)[OX2H1]', '[CX3](=O)[O-]']\n    \n    # Primary aliphatic amine group (-NH2)\n    primary_aliph_amine = ['[NX3H2][CX4H2]', '[NX3H2][CH2]']\n    \n    # Thiol group (-SH)\n    thiol = ['[SX2H]']\n    \n    # Ether linkage (-O-)\n    ether_linkage = ['[OD2]([#6])[#6]']\n    \n    # Pyridine ring connected via flexible linker\n    pyridine_linker = ['[#6]-[#6]-[#6]-[#6]-c1ccncc1', '[#6]-[#6]-c1ccncc1']\n    \n    # Aromatic carboxylic acid\n    aromatic_carboxylic_acid = ['c1ccccc1C(=O)[OX2H1]', 'c1ccccc1C(=O)[O-]']\n    \n    # Electron-withdrawing groups on aromatic ring (para position)\n    ewg_para = ['c1ccc([NX3+](=O)[O-])cc1C(=O)[OX2H1]', 'c1ccc(Br)cc1C(=O)[OX2H1]']\n    \n    # Electron-donating groups on aromatic ring (para position)\n    edg_para = ['c1ccc([NX3H2])cc1C(=O)[OX2H1]', 'c1ccc(C)cc1C(=O)[OX2H1]', 'c1ccc(O)cc1C(=O)[OX2H1]']\n    \n    # Multiple hydroxyl groups on aliphatic chain\n    multiple_hydroxyl = ['[OX2H][CX4H]([OX2H])[CX4H]([OX2H])[CX4H]']\n    \n    # Single terminal hydroxyl group on aliphatic chain\n    terminal_hydroxyl = ['[CX4H2][OX2H]']\n    \n    # Amino acids with aromatic side chains\n    aromatic_amino_acid = ['[NX3H2][CX4H]([CX3](=O)[OX2H1])[c]']\n    \n    # Amino acids with electron-rich aromatic side chains (e.g., indole)\n    electron_rich_aromatic_amino_acid = ['[NX3H2][CX4H]([CX3](=O)[OX2H1])[c]n']\n    \n    # Heterocyclic nitrogen connected via flexible linker\n    heterocyclic_nitrogen_linker = ['[#6]-[#6]-[#6]-[#6]-c1ccncc1C(=O)[OX2H1]', '[#6]-[#6]-c1ccncc1C(=O)[OX2H1]']\n    \n    # Heterocyclic nitrogen directly attached\n    heterocyclic_nitrogen_direct = ['c1ccncc1C(=O)[OX2H1]', 'c1c[nH]ccc1C(=O)[OX2H1]', 'c1cnc[nH]c1C(=O)[OX2H1]']\n    \n    # Fluorinated alkyl chains or trifluoromethyl groups\n    fluorinated_alkyl = ['[CX4](F)(F)F', '[CX4][CX4](F)(F)F']\n    \n    # Aldehyde groups adjacent to aromatic rings\n    aromatic_aldehyde = ['c1ccccc1C=O']\n    \n    # Conjugated ketone groups linked to aromatic rings via flexible linkers\n    conjugated_ketone_linker = ['c1ccccc1-[#6]-[#6]-C(=O)-[#6]']\n    \n    # Non-conjugated ketone groups\n    non_conjugated_ketone = ['[CX3](=O)[CX4]']\n    \n    # Modifiers with multiple electron-donating groups on aromatic rings\n    multiple_edg_aromatic = ['c1cc([OX2H])cc([OX2H])c1', 'c1cc([OX2H])ccc1[OX2H]', 'c1cc([OX2][CH3])cc([OX2][CH3])c1']\n    \n    # Ether linkages with terminal hydroxyl groups\n    ether_terminal_hydroxyl = ['[OD2]([#6])[#6][OD2]([#6])[#6][OD2H]']\n    \n    # Acetamido groups with additional amino groups\n    acetamido_with_amino = ['[NX3][CX3](=O)[NX3H2]']\n    \n    # Indole functional groups\n    indole_group = ['c1cc2ccccc2[nH]1']\n    \n    # Compile SMARTS patterns\n    smarts_patterns = {\n        'carboxylic_acid': carboxylic_acid,\n        'primary_aliph_amine': primary_aliph_amine,\n        'thiol': thiol,\n        'ether_linkage': ether_linkage,\n        'pyridine_linker': pyridine_linker,\n        'aromatic_carboxylic_acid': aromatic_carboxylic_acid,\n        'ewg_para': ewg_para,\n        'edg_para': edg_para,\n        'multiple_hydroxyl': multiple_hydroxyl,\n        'terminal_hydroxyl': terminal_hydroxyl,\n        'aromatic_amino_acid': aromatic_amino_acid,\n        'electron_rich_aromatic_amino_acid': electron_rich_aromatic_amino_acid,\n        'heterocyclic_nitrogen_linker': heterocyclic_nitrogen_linker,\n        'heterocyclic_nitrogen_direct': heterocyclic_nitrogen_direct,\n        'fluorinated_alkyl': fluorinated_alkyl,\n        'aromatic_aldehyde': aromatic_aldehyde,\n        'conjugated_ketone_linker': conjugated_ketone_linker,\n        'non_conjugated_ketone': non_conjugated_ketone,\n        'multiple_edg_aromatic': multiple_edg_aromatic,\n        'ether_terminal_hydroxyl': ether_terminal_hydroxyl,\n        'acetamido_with_amino': acetamido_with_amino,\n        'indole_group': indole_group,\n    }\n    \n    compiled_patterns = {key: [Chem.MolFromSmarts(pat) for pat in patterns] for key, patterns in smarts_patterns.items()}\n    \n    # Define the rules with their associated patterns and predictions\n    rules = [\n        {\n            'number': 1,\n            'description': 'Aliphatic Carboxylic Acids with Terminal Primary Amino Groups Lead to High Fe/Hf Values (True)',\n            'patterns': [compiled_patterns['primary_aliph_amine'], compiled_patterns['carboxylic_acid']],\n            'exclude_patterns': [compiled_patterns['aromatic_aldehyde'], compiled_patterns['indole_group']],\n            'prediction': 1\n        },\n        {\n            'number': 2,\n            'description': 'Aromatic Carboxylic Acids with Electron-Withdrawing Para Substituents Lead to High Fe/Hf Values (True)',\n            'patterns': [compiled_patterns['aromatic_carboxylic_acid'], compiled_patterns['ewg_para']],\n            'prediction': 1\n        },\n        {\n            'number': 3,\n            'description': 'Modifiers Containing Thiol Groups (-SH) Along with Carboxylic Acid Groups Lead to High Fe/Hf Values (True)',\n            'patterns': [compiled_patterns['thiol'], compiled_patterns['carboxylic_acid']],\n            'prediction': 1\n        },\n        {\n            'number': 4,\n            'description': 'Simple Aliphatic Carboxylic Acids Without Additional Coordinating Functional Groups Lead to Low Fe/Hf Values (False)',\n            'patterns': [compiled_patterns['carboxylic_acid']],\n            'exclude_patterns': [compiled_patterns['primary_aliph_amine'], compiled_patterns['thiol'], compiled_patterns['ether_linkage'], compiled_patterns['aromatic_carboxylic_acid']],\n            'prediction': -1\n        },\n        {\n            'number': 5,\n            'description': 'Modifiers with Multiple Hydroxyl Groups on an Aliphatic Chain Lead to Low Fe/Hf Values (False); Modifiers with a Single Terminal Hydroxyl Group May Lead to High Fe/Hf Values (True)',\n            'patterns': [compiled_patterns['multiple_hydroxyl'], compiled_patterns['carboxylic_acid']],\n            'prediction': -1\n        },\n        {\n            'number': 6,\n            'description': 'Modifiers with Ether Linkages and Terminal Amino Groups Lead to High Fe/Hf Values (True)',\n            'patterns': [compiled_patterns['ether_linkage'], compiled_patterns['primary_aliph_amine']],\n            'prediction': 1\n        },\n        {\n            'number': 7,\n            'description': 'Amino Acids with Aromatic Side Chains Lead to High Fe/Hf Values (True); Those with Highly Electron-Rich Aromatic Side Chains Lead to Low Fe/Hf Values (False)',\n            'patterns': [compiled_patterns['aromatic_amino_acid']],\n            'exclude_patterns': [compiled_patterns['electron_rich_aromatic_amino_acid']],\n            'prediction': 1\n        },\n        {\n            'number': 8,\n            'description': 'Modifiers with Heterocyclic Nitrogen Atoms Connected via Flexible Linkers Lead to High Fe/Hf Values (True); Those Directly Attached Without Flexibility Lead to Low Fe/Hf Values (False)',\n            'patterns': [compiled_patterns['heterocyclic_nitrogen_linker'], compiled_patterns['carboxylic_acid']],\n            'exclude_patterns': [compiled_patterns['heterocyclic_nitrogen_direct']],\n            'prediction': 1\n        },\n        {\n            'number': 9,\n            'description': 'Modifiers with Fluorinated Alkyl Chains or Trifluoromethyl Groups Lead to Low Fe/Hf Values (False)',\n            'patterns': [compiled_patterns['fluorinated_alkyl']],\n            'prediction': -1\n        },\n        {\n            'number': 10,\n            'description': 'Modifiers with Aldehyde Groups Adjacent to Aromatic Rings Lead to Low Fe/Hf Values (False)',\n            'patterns': [compiled_patterns['aromatic_aldehyde'], compiled_patterns['carboxylic_acid']],\n            'prediction': -1\n        },\n        {\n            'number': 11,\n            'description': 'Modifiers with Conjugated Ketone Groups Linked to Aromatic Rings via Flexible Linkers Lead to High Fe/Hf Values (True)',\n            'patterns': [compiled_patterns['conjugated_ketone_linker'], compiled_patterns['carboxylic_acid']],\n            'exclude_patterns': [compiled_patterns['non_conjugated_ketone']],\n            'prediction': 1\n        },\n        {\n            'number': 12,\n            'description': 'Modifiers with Multiple Electron-Donating Groups on Aromatic Rings Lead to Low Fe/Hf Values (False)',\n            'patterns': [compiled_patterns['multiple_edg_aromatic'], compiled_patterns['carboxylic_acid']],\n            'prediction': -1\n        },\n        {\n            'number': 13,\n            'description': 'Modifiers with Ether Linkages and Terminal Hydroxyl Groups Lead to High Fe/Hf Values (True)',\n            'patterns': [compiled_patterns['ether_terminal_hydroxyl'], compiled_patterns['carboxylic_acid']],\n            'prediction': 1\n        },\n        {\n            'number': 14,\n            'description': 'Modifiers with Aliphatic Chains Containing Acetamido Groups and Additional Amino Groups Lead to High Fe/Hf Values (True)',\n            'patterns': [compiled_patterns['acetamido_with_amino'], compiled_patterns['carboxylic_acid']],\n            'prediction': 1\n        },\n        {\n            'number': 15,\n            'description': 'Modifiers with Indole Functional Groups Lead to Low Fe/Hf Values (False)',\n            'patterns': [compiled_patterns['indole_group']],\n            'prediction': -1\n        }\n    ]\n    \n    # Initialize results list\n    results = []\n    \n    # Process each SMILES string\n    for smi in smiles_list:\n        mol = Chem.MolFromSmiles(smi)\n        if mol is None:\n            # If the molecule cannot be parsed, append a row of zeros\n            results.append([0]*len(rules))\n            continue\n        row = []\n        for rule in rules:\n            try:\n                match = True\n                # Check exclude patterns if any\n                if 'exclude_patterns' in rule:\n                    for pat_list in rule['exclude_patterns']:\n                        for pat in pat_list:\n                            if mol.HasSubstructMatch(pat):\n                                match = False\n                                break\n                        if not match:\n                            break\n                    if not match:\n                        row.append(0)\n                        continue\n                # Check required patterns\n                for pat_list in rule['patterns']:\n                    group_match = False\n                    for pat in pat_list:\n                        if mol.HasSubstructMatch(pat):\n                            group_match = True\n                            break\n                    if not group_match:\n                        match = False\n                        break\n                if match:\n                    row.append(rule['prediction'])\n                else:\n                    row.append(0)\n            except Exception:\n                # In case of any error, append 0\n                row.append(0)\n        results.append(row)\n    # Create DataFrame with results\n    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])\n    return df\n"
}