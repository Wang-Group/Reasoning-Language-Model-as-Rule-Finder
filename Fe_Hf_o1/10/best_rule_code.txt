def rule2matrix(smiles_list):
    # Define the rules with their associated patterns and predictions
    # Incorporate corrections and suggestions to ensure accurate matching

    # Rule definitions
    rules = [
        # Rule 1
        {
            'name': 'Rule 1',
            'description': 'Modifiers containing a primary amino group (-NH2) on an aliphatic chain result in a high Fe/Hf value (+1). If the amino group is directly attached to an aromatic ring, the Fe/Hf value is low (-1).',
            'positive_patterns': ['[NX3;H2][C;!R;!a]'],
            'negative_patterns': ['[NX3;H2][c]'],
            'prediction_positive': 1,
            'prediction_negative': -1
        },
        # Rule 2
        {
            'name': 'Rule 2',
            'description': 'Thiol group (-SH) results in high Fe/Hf value (+1).',
            'patterns': ['[SX2H]'],
            'prediction': 1
        },
        # Rule 3
        {
            'name': 'Rule 3',
            'description': 'Electron-withdrawing groups (e.g., nitro, halogens, pyridyl rings) attached to aromatic rings result in high Fe/Hf value (+1).',
            'patterns': ['[c][F,Cl,Br,I]', '[c][N+](=O)[O-]', '[nH0][a][a][a][a][a]'],
            'prediction': 1
        },
        # Rule 4
        {
            'name': 'Rule 4',
            'description': 'Electron-donating groups (e.g., methyl, methoxy, hydroxyl) directly attached to aromatic rings result in low Fe/Hf value (-1).',
            'patterns': ['[c][CH3]', '[c][OX2H]', '[c][OX2][CH3]'],
            'prediction': -1
        },
        # Rule 5
        {
            'name': 'Rule 5',
            'description': 'Modifiers containing multiple ether linkages (-O-) result in high Fe/Hf value (+1).',
            'patterns': ['[#6][OX2][#6]'],
            'count_threshold': 2,
            'prediction': 1
        },
        # Rule 6
        {
            'name': 'Rule 6',
            'description': 'Simple aliphatic carboxylic acids without additional coordinating functional groups result in low Fe/Hf value (-1).',
            'patterns': ['[CX3](=O)[OX1H0-,OX2H1]'],
            'exclude_patterns': ['[NX3]', '[SX2H]', '[OX2H]', '[F,Cl,Br,I]', '[a]'],
            'prediction': -1
        },
        # Rule 7
        {
            'name': 'Rule 7',
            'description': 'Modifiers containing additional coordinating groups (e.g., hydroxyl, amino) on long aliphatic chains result in high Fe/Hf value (+1).',
            'patterns': ['[C;!R;!a]{5,}', '[OX2H,NX3;H2,H1]'],
            'attached_to_chain': True,
            'prediction': 1
        },
        # Rule 8
        {
            'name': 'Rule 8',
            'description': 'Modifiers with aromatic rings bearing aldehyde groups (-CHO) without additional coordinating groups result in low Fe/Hf value (-1).',
            'patterns': ['[c][CX3H](=O)'],
            'exclude_patterns': ['[NX3]', '[OX2H]', '[SX2H]'],
            'prediction': -1
        },
        # Rule 9
        {
            'name': 'Rule 9',
            'description': 'Modifiers containing nitrogen heterocycles directly attached to carboxylic acids result in low Fe/Hf value (-1), unless additional coordinating groups are present.',
            'patterns': ['[n][CX3](=O)[OX1H0-,OX2H1]'],
            'exclude_patterns': ['[NX3]', '[OX2H]', '[SX2H]'],
            'prediction': -1
        },
        # Rule 10
        {
            'name': 'Rule 10',
            'description': 'Modifiers containing aromatic carboxylic acids with electron-withdrawing groups and conjugated carbonyl systems result in high Fe/Hf value (+1).',
            'patterns': ['[c][CX3](=O)[OX1H0-,OX2H1]', '[c]=[CX3](=O)[c]'],
            'ewg_patterns': ['[c][F,Cl,Br,I]', '[c][N+](=O)[O-]'],
            'prediction': 1
        },
        # Rule 11
        {
            'name': 'Rule 11',
            'description': 'Modifiers containing bulky, electron-rich aromatic side chains result in low Fe/Hf value (-1).',
            'patterns': ['c1ccc2c(c1)[nH]c3c2cccc3'],  # Indole ring
            'prediction': -1
        },
        # Rule 12
        {
            'name': 'Rule 12',
            'description': 'Modifiers containing multiple coordinating functional groups (e.g., amino, hydroxyl, acetamido) on aliphatic chains result in high Fe/Hf value (+1).',
            'patterns': ['[NX3;H2,H1]', '[OX2H]', '[CX3](=O)[NX3;H2,H1]'],
            'count_threshold': 2,
            'prediction': 1
        }
    ]

    # Compile SMARTS patterns for each rule
    for rule in rules:
        rule['compiled_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule.get('patterns', [])]
        if 'positive_patterns' in rule:
            rule['compiled_positive_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule['positive_patterns']]
        if 'negative_patterns' in rule:
            rule['compiled_negative_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule['negative_patterns']]
        if 'exclude_patterns' in rule:
            rule['compiled_exclude_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule['exclude_patterns']]
        if 'ewg_patterns' in rule:
            rule['compiled_ewg_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule['ewg_patterns']]

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = False  # Default to no match
                # Handle Rule 1 separately due to positive and negative patterns
                if rule['name'] == 'Rule 1':
                    # Check for negative pattern first
                    negative_match = any(mol.HasSubstructMatch(pat) for pat in rule['compiled_negative_patterns'])
                    positive_match = any(mol.HasSubstructMatch(pat) for pat in rule['compiled_positive_patterns'])
                    if negative_match:
                        match = True
                        row.append(rule['prediction_negative'])
                    elif positive_match:
                        match = True
                        row.append(rule['prediction_positive'])
                    else:
                        row.append(0)
                    continue
                # Exclude patterns
                if 'exclude_patterns' in rule:
                    if any(mol.HasSubstructMatch(pat) for pat in rule['compiled_exclude_patterns']):
                        # If any exclude pattern matches, set match to False
                        match = False
                    else:
                        match = True
                else:
                    match = True
                if not match:
                    row.append(0)
                    continue
                # Check patterns
                if 'attached_to_chain' in rule and rule['attached_to_chain']:
                    # Special handling for Rule 7
                    # Check that coordinating group is attached to long aliphatic chain
                    chain_pattern = rule['compiled_patterns'][0]
                    coord_groups_patterns = [Chem.MolFromSmarts(pat) for pat in rule['patterns'][1:]]
                    chain_matches = mol.GetSubstructMatches(chain_pattern)
                    if chain_matches:
                        # For each chain match, check if coordinating group is attached
                        chain_atom_indices = [atom_idx for match in chain_matches for atom_idx in match]
                        coord_match = False
                        for atom_idx in chain_atom_indices:
                            atom = mol.GetAtomWithIdx(atom_idx)
                            neighbors = atom.GetNeighbors()
                            for neighbor in neighbors:
                                for coord_pat in coord_groups_patterns:
                                    if neighbor.HasSubstructMatch(coord_pat):
                                        coord_match = True
                                        break
                                if coord_match:
                                    break
                            if coord_match:
                                break
                        if coord_match:
                            row.append(rule['prediction'])
                        else:
                            row.append(0)
                    else:
                        row.append(0)
                    continue
                if 'count_threshold' in rule:
                    # Rules that require counting occurrences
                    total_matches = 0
                    for pat in rule['compiled_patterns']:
                        matches = mol.GetSubstructMatches(pat, uniquify=True)
                        total_matches += len(matches)
                    if total_matches >= rule['count_threshold']:
                        row.append(rule['prediction'])
                    else:
                        row.append(0)
                elif 'ewg_patterns' in rule:
                    # For Rule 10, need to check presence of EWG
                    pattern_match = all(mol.HasSubstructMatch(pat) for pat in rule['compiled_patterns'])
                    ewg_match = any(mol.HasSubstructMatch(pat) for pat in rule['compiled_ewg_patterns'])
                    if pattern_match and ewg_match:
                        row.append(rule['prediction'])
                    else:
                        row.append(0)
                else:
                    # For rules where any pattern match is sufficient
                    if any(mol.HasSubstructMatch(pat) for pat in rule['compiled_patterns']):
                        row.append(rule['prediction'])
                    else:
                        row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[rule['name'] for rule in rules])
    return df
