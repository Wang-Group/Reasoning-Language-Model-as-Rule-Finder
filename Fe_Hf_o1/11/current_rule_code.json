{
    "prefix": "This code takes a list of SMILES strings as input and generates a feature matrix based on the specified rules using RDKit. Each rule corresponds to specific substructure patterns within the molecules, predicting high or low Fe/Hf values based on their chemical features. The output is a DataFrame where each column corresponds to one rule, and each row corresponds to one SMILES string from the list. A value of 1 indicates the rule matches and predicts a high Fe/Hf value, -1 indicates the rule matches and predicts a low Fe/Hf value, and 0 indicates the rule does not match.",
    "imports": "import pandas as pd\nfrom rdkit import Chem\nfrom rdkit.Chem import AllChem",
    "code": "def rule2matrix(smiles_list):\n    # Define SMARTS patterns for functional groups\n    # Primary aliphatic amine group (-NH2)\n    primary_aliphatic_amine = '[NX3H2][CX4]'\n    \n    # Carboxylic acid group (-COOH)\n    carboxylic_acid = '[CX3](=O)[OX2H1]'\n    \n    # Aromatic carboxylic acid group\n    aromatic_carboxylic_acid = '[c][CX3](=O)[OX1H]'\n    \n    # Electron-withdrawing groups (EWGs)\n    nitro_group = '[NX3](=O)=O'\n    halogen = '[F,Cl,Br,I]'\n    bromomethyl = '[CH2Br]'\n    pyridyl = 'n'\n    \n    # Sulfur-containing groups\n    thiol = '[SX2H]'\n    thioether = '[#16X2][#6]'\n    \n    # Ether linkage (-O-)\n    ether_linkage = '[#6][OX2][#6]'\n    \n    # Long aliphatic chain (6 or more carbons)\n    long_aliphatic_chain = '[CH2][CH2][CH2][CH2][CH2][CH2,CH1]'\n    \n    # Hydroxyl group (-OH)\n    hydroxyl_group = '[OX2H]'\n    \n    # Electron-donating groups (EDGs) on aromatic ring\n    aromatic_hydroxyl = '[c][OX2H]'\n    aromatic_amino = '[c][NX3H2]'\n    aromatic_methyl = '[c][CH3]'\n    \n    # Multiple hydroxyl groups (polyols)\n    polyol = '[OX2H]'\n    \n    # Perfluorinated carboxylic acid\n    perfluorinated_chain = '[CF2][CF2][CF2]'\n    \n    # Heterocyclic aromatic carboxylic acids with delocalized lone pair\n    pyridine_carboxylic_acid = '[n][c][c][c][c][c](=O)[OX1H]'\n    pyrazole_carboxylic_acid = '[n]1[n][c][c][c]1(=O)[OX1H]'\n    indole_carboxylic_acid = 'c1c(N)ccc2c1cc(=O)[nH]2'\n    \n    # Carbonyl groups adjacent to carboxyl groups\n    aldehyde_adjacent_carboxylic_acid = '[CX3H1](=O)[CX3](=O)[OX1H]'\n    ketone_adjacent_carboxylic_acid = '[CX3](=O)[CX3](=O)[OX1H]'\n    \n    # Acylated amino groups\n    acetamido_group = '[NX3][CX3](=O)[#6]'\n    \n    # Trifluoroacetyl group\n    trifluoroacetyl = '[CX3](=O)[CF3]'\n    \n    # Benzofuranone moiety\n    benzofuranone = 'O=C1Oc2ccccc2C1=O'\n    \n    # Define the rules with their associated patterns and predictions\n    rules = [\n        {\n            'number': 1,\n            'description': 'Aliphatic amino acids with a straight-chain aliphatic backbone containing a primary amino group (\u2013NH\u2082) and a carboxyl group (\u2013COOH) at opposite ends tend to have a high Fe/Hf value (True).',\n            'patterns': [\n                [primary_aliphatic_amine],\n                [carboxylic_acid]\n            ],\n            'exclude_patterns': [\n                ['[a]']  # Exclude aromatic rings\n            ],\n            'include_conditions': [\n                'is_acyclic'\n            ],\n            'prediction': 1\n        },\n        {\n            'number': 2,\n            'description': 'Aromatic carboxylic acids with electron-withdrawing groups (EWGs) at the para position tend to have a high Fe/Hf value (True).',\n            'patterns': [\n                [aromatic_carboxylic_acid],\n                [nitro_group, halogen, bromomethyl, pyridyl]\n            ],\n            'prediction': 1\n        },\n        {\n            'number': 3,\n            'description': 'Modifiers containing sulfur functional groups, such as thiol (\u2013SH) or thioether (\u2013S\u2013) groups, in combination with amino or carboxyl groups, tend to have a high Fe/Hf value (True).',\n            'patterns': [\n                [thiol, thioether],\n                [carboxylic_acid, primary_aliphatic_amine]\n            ],\n            'prediction': 1\n        },\n        {\n            'number': 4,\n            'description': 'Modifiers with long aliphatic chains (6 carbons or more) terminating with a carboxyl group (\u2013COOH) and containing additional terminal hydroxyl (\u2013OH) or amino (\u2013NH\u2082) groups tend to have a high Fe/Hf value (True).',\n            'patterns': [\n                [long_aliphatic_chain],\n                [carboxylic_acid],\n                [hydroxyl_group, primary_aliphatic_amine]\n            ],\n            'prediction': 1\n        },\n        {\n            'number': 5,\n            'description': 'Polyether carboxylic acids with multiple ether linkages (\u2013O\u2013) in the backbone terminating with a carboxyl group (\u2013COOH) tend to have a high Fe/Hf value (True).',\n            'patterns': [\n                [ether_linkage],\n                [carboxylic_acid]\n            ],\n            'prediction': 1\n        },\n        {\n            'number': 6,\n            'description': 'Aromatic carboxylic acids with electron-donating groups (EDGs) at the para position, such as amino (\u2013NH\u2082), hydroxy (\u2013OH), or methyl (\u2013CH\u2083) groups, tend to have a low Fe/Hf value (False).',\n            'patterns': [\n                [aromatic_carboxylic_acid],\n                [aromatic_amino, aromatic_hydroxyl, aromatic_methyl]\n            ],\n            'prediction': -1\n        },\n        {\n            'number': 7,\n            'description': 'Modifiers with multiple hydroxyl groups (polyols), especially on aliphatic chains, tend to have a low Fe/Hf value (False).',\n            'patterns': [\n                [polyol],\n                [carboxylic_acid]\n            ],\n            'count_threshold': {polyol: 2},\n            'prediction': -1\n        },\n        {\n            'number': 8,\n            'description': 'Perfluorinated carboxylic acids with multiple fluorine atoms tend to have a low Fe/Hf value (False).',\n            'patterns': [\n                [perfluorinated_chain],\n                [carboxylic_acid]\n            ],\n            'prediction': -1\n        },\n        {\n            'number': 9,\n            'description': \"Heterocyclic aromatic carboxylic acids where the heteroatom's lone pair is delocalized into the aromatic system tend to have a low Fe/Hf value (False).\",\n            'patterns': [\n                [pyridine_carboxylic_acid, pyrazole_carboxylic_acid, indole_carboxylic_acid]\n            ],\n            'prediction': -1\n        },\n        {\n            'number': 10,\n            'description': 'Modifiers with carbonyl groups adjacent to carboxyl groups tend to have a low Fe/Hf value (False).',\n            'patterns': [\n                [aldehyde_adjacent_carboxylic_acid, ketone_adjacent_carboxylic_acid]\n            ],\n            'prediction': -1\n        },\n        {\n            'number': 11,\n            'description': 'Modifiers that are amino acids with aromatic side chains tend to have a low Fe/Hf value (False).',\n            'patterns': [\n                [aromatic_amino_acid := '[NX3][CX4][CX3](=O)[OX1H][c]']\n            ],\n            'prediction': -1\n        },\n        {\n            'number': 12,\n            'description': 'Modifiers containing a combination of ether linkages and terminal amino groups tend to have a high Fe/Hf value (True).',\n            'patterns': [\n                [ether_linkage],\n                [primary_aliphatic_amine]\n            ],\n            'prediction': 1\n        },\n        {\n            'number': 13,\n            'description': 'Compounds with benzofuranone moieties containing multiple carbonyl groups tend to have a high Fe/Hf value (True).',\n            'patterns': [\n                [benzofuranone]\n            ],\n            'prediction': 1\n        },\n        {\n            'number': 14,\n            'description': 'Modifiers with acylated amino groups, such as acetamido groups, in addition to free amino groups, tend to have a high Fe/Hf value (True).',\n            'patterns': [\n                [acetamido_group],\n                [primary_aliphatic_amine]\n            ],\n            'prediction': 1\n        },\n        {\n            'number': 15,\n            'description': 'Modifiers with electron-withdrawing groups on aliphatic chains, such as trifluoroacetyl (\u2013COCF\u2083) groups, tend to have a low Fe/Hf value (False).',\n            'patterns': [\n                [trifluoroacetyl]\n            ],\n            'prediction': -1\n        }\n    ]\n    \n    # Compile SMARTS patterns\n    for rule in rules:\n        compiled_patterns = []\n        for group in rule.get('patterns', []):\n            compiled_group = [Chem.MolFromSmarts(p) for p in group]\n            compiled_patterns.append(compiled_group)\n        rule['compiled_patterns'] = compiled_patterns\n        # Compile exclude patterns if any\n        if 'exclude_patterns' in rule:\n            compiled_excludes = []\n            for group in rule['exclude_patterns']:\n                compiled_group = [Chem.MolFromSmarts(p) for p in group]\n                compiled_excludes.append(compiled_group)\n            rule['compiled_exclude_patterns'] = compiled_excludes\n    \n    # Initialize results list\n    results = []\n    \n    # Process each SMILES string\n    for smi in smiles_list:\n        mol = Chem.MolFromSmiles(smi)\n        if mol is None:\n            # If the molecule cannot be parsed, append a row of zeros\n            results.append([0]*len(rules))\n            continue\n        row = []\n        for rule in rules:\n            try:\n                match = True\n                # Check exclude patterns if any\n                if 'exclude_patterns' in rule:\n                    for group in rule['compiled_exclude_patterns']:\n                        for pat in group:\n                            if mol.HasSubstructMatch(pat):\n                                match = False\n                                break\n                        if not match:\n                            break\n                    if not match:\n                        row.append(0)\n                        continue\n                # Check include conditions if any\n                if 'include_conditions' in rule:\n                    for condition in rule['include_conditions']:\n                        if condition == 'is_acyclic' and mol.GetRingInfo().NumRings() != 0:\n                            match = False\n                            break\n                    if not match:\n                        row.append(0)\n                        continue\n                # Check required patterns\n                for compiled_group in rule['compiled_patterns']:\n                    group_match = False\n                    for pat in compiled_group:\n                        matches = mol.GetSubstructMatches(pat)\n                        if matches:\n                            # If a count threshold is specified for this pattern\n                            if 'count_threshold' in rule and pat in rule['count_threshold']:\n                                threshold = rule['count_threshold'][pat]\n                                if len(matches) >= threshold:\n                                    group_match = True\n                                    break\n                            else:\n                                group_match = True\n                                break\n                    if not group_match:\n                        match = False\n                        break\n                if match:\n                    row.append(rule['prediction'])\n                else:\n                    row.append(0)\n            except Exception as e:\n                # In case of any error, append 0\n                row.append(0)\n        results.append(row)\n    \n    # Create DataFrame with results\n    df = pd.DataFrame(results, columns=[f'Rule {rule[\"number\"]}' for rule in rules])\n    return df\n"
}