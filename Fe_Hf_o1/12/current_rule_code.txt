def rule2matrix(smiles_list):
    from rdkit import Chem
    from rdkit.Chem import rdchem

    # Helper function to check for para-substituted groups in aromatic carboxylic acids
    def check_para_substitution(mol, substituent_patterns):
        """
        Checks if an aromatic carboxylic acid has a substituent at the para position matching any of the patterns.
        """
        matches = mol.GetSubstructMatches(Chem.MolFromSmarts('[c][CX3](=O)[O;H1,-1]'))  # Aromatic carboxylic acid
        for match in matches:
            aromatic_carbon_idx = match[0]
            carboxyl_carbon_idx = match[1]
            # Get aromatic ring the carboxylic acid is attached to
            rings = mol.GetRingInfo().AtomRings()
            aromatic_ring = None
            for ring in rings:
                if aromatic_carbon_idx in ring:
                    aromatic_ring = ring
                    break
            if aromatic_ring:
                # Find the atom opposite to the carboxylic acid in the ring (para position)
                idx_in_ring = aromatic_ring.index(aromatic_carbon_idx)
                para_idx = aromatic_ring[(idx_in_ring + 3) % len(aromatic_ring)]
                para_atom = mol.GetAtomWithIdx(para_idx)
                # Check if para atom has a substituent matching any of the patterns
                for neighbor in para_atom.GetNeighbors():
                    if neighbor.GetIdx() not in aromatic_ring:
                        neighbor_idx = neighbor.GetIdx()
                        neighbor_fragment = Chem.MolFragmentToSmiles(mol, atomsToUse=[neighbor_idx], isomericSmiles=True)
                        neighbor_mol = Chem.MolFromSmiles(neighbor_fragment)
                        for pattern in substituent_patterns:
                            if neighbor_mol and neighbor_mol.HasSubstructMatch(pattern):
                                return True
        return False

    # --- Define functional groups ---

    # Carboxylic acid group (-COOH)
    carboxylic_acid_smarts = '[CX3](=O)[O;H1,-1]'
    carboxylic_acid = Chem.MolFromSmarts(carboxylic_acid_smarts)

    # Aromatic carboxylic acid group
    aromatic_carboxylic_acid_smarts = '[c][CX3](=O)[O;H1,-1]'
    aromatic_carboxylic_acid = Chem.MolFromSmarts(aromatic_carboxylic_acid_smarts)

    # Electron-withdrawing groups (EWGs)
    nitro_group = Chem.MolFromSmarts('[N+](=O)[O-]')
    halomethyl_group = Chem.MolFromSmarts('[CH2][F,Cl,Br,I]')
    halogen = Chem.MolFromSmarts('[F,Cl,Br,I]')
    cf3_group = Chem.MolFromSmarts('[CX4]([F])([F])[F]')
    ewg_list = [nitro_group, halomethyl_group, halogen, cf3_group]

    # Electron-donating groups (EDGs)
    amino_group = Chem.MolFromSmarts('[NX3;H2,H1][#6]')
    hydroxyl_group = Chem.MolFromSmarts('[OX2H]')
    methoxy_group = Chem.MolFromSmarts('[OX2][CH3]')
    methyl_group = Chem.MolFromSmarts('[CH3]')
    edg_list = [amino_group, hydroxyl_group, methoxy_group, methyl_group]

    # Sulfur functional groups
    thiol_group = Chem.MolFromSmarts('[SX2H]')
    thioether_group = Chem.MolFromSmarts('[SX2][#6]')
    sulfur_groups = [thiol_group, thioether_group]

    # Terminal amino group (primary aliphatic amine)
    terminal_amino_group = Chem.MolFromSmarts('[NX3;H2][CX4][CX4]')

    # Pyridine ring with carboxylic acid at position 4
    pyridine_4_carboxylic_acid = Chem.MolFromSmarts('n1cccc([CX3](=O)[O;H1,-1])c1')

    # Multiple hydroxyl groups adjacent to carboxylic acid
    multiple_adjacent_hydroxyls = Chem.MolFromSmarts('[CX4H]([OX2H])[CX4H]([OX2H])[CX4][CX3](=O)[O;H1,-1]')

    # Bulky side chains or rigid structures
    indole_group = Chem.MolFromSmarts('c1cc2ccccc2[nH]1')
    pyrazole_group = Chem.MolFromSmarts('c1ccn[nH]1')
    bulky_groups = [indole_group, pyrazole_group]

    # Aldehyde groups adjacent to aromatic ring
    aromatic_aldehyde = Chem.MolFromSmarts('[c][CX3H1]=O')

    # Ether linkage
    ether_linkage = Chem.MolFromSmarts('[#6][OX2][#6]')

    # Amino groups
    amino_group_any = Chem.MolFromSmarts('[NX3;H2,H1,H0][#6]')

    # Additional carbonyl groups
    ketone_group = Chem.MolFromSmarts('[#6][CX3](=O)[#6]')
    lactone_group = Chem.MolFromSmarts('[#6]1[#6][#6][#6][#6][O]1')

    # Highly fluorinated alkyl chains
    fluorinated_alkyl_chain = Chem.MolFromSmarts('C(F)(F)F')

    # Initialize results list
    results = []

    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*12)
            continue
        row = []

        # Rule 1
        try:
            match_rule1 = 0
            matches = mol.GetSubstructMatches(aromatic_carboxylic_acid)
            if matches:
                if check_para_substitution(mol, ewg_list):
                    match_rule1 = 1
            row.append(match_rule1)
        except Exception:
            row.append(0)

        # Rule 2
        try:
            match_rule2 = 0
            matches = mol.GetSubstructMatches(aromatic_carboxylic_acid)
            if matches:
                if check_para_substitution(mol, edg_list):
                    match_rule2 = -1
            row.append(match_rule2)
        except Exception:
            row.append(0)

        # Rule 3
        try:
            if mol.HasSubstructMatch(carboxylic_acid) and any(mol.HasSubstructMatch(sg) for sg in sulfur_groups):
                row.append(1)
            else:
                row.append(0)
        except Exception:
            row.append(0)

        # Rule 4
        try:
            match_rule4 = 0
            amino_matches = mol.GetSubstructMatches(terminal_amino_group)
            acid_matches = mol.GetSubstructMatches(carboxylic_acid)
            if amino_matches and acid_matches:
                for a_match in amino_matches:
                    for c_match in acid_matches:
                        path = Chem.rdmolops.GetShortestPath(mol, a_match[0], c_match[0])
                        if len(path) >= 5:  # Medium to long chain
                            match_rule4 = 1
                            break
                    if match_rule4 == 1:
                        break
            row.append(match_rule4)
        except Exception:
            row.append(0)

        # Rule 5
        try:
            if mol.HasSubstructMatch(pyridine_4_carboxylic_acid):
                row.append(1)
            else:
                row.append(0)
        except Exception:
            row.append(0)

        # Rule 6
        try:
            if mol.HasSubstructMatch(multiple_adjacent_hydroxyls):
                row.append(-1)
            else:
                row.append(0)
        except Exception:
            row.append(0)

        # Rule 7
        try:
            if mol.HasSubstructMatch(carboxylic_acid):
                exclude_patterns = [
                    amino_group_any,
                    hydroxyl_group,
                    sulfur_groups[0],
                    sulfur_groups[1],
                    ether_linkage,
                    Chem.MolFromSmarts('[a]')  # Aromatic atoms
                ]
                if not any(mol.HasSubstructMatch(pat) for pat in exclude_patterns):
                    row.append(-1)
                else:
                    row.append(0)
            else:
                row.append(0)
        except Exception:
            row.append(0)

        # Rule 8
        try:
            if mol.HasSubstructMatch(carboxylic_acid) and any(mol.HasSubstructMatch(bg) for bg in bulky_groups):
                row.append(-1)
            else:
                row.append(0)
        except Exception:
            row.append(0)

        # Rule 9
        try:
            if mol.HasSubstructMatch(aromatic_aldehyde):
                row.append(-1)
            else:
                row.append(0)
        except Exception:
            row.append(0)

        # Rule 10
        try:
            if mol.HasSubstructMatch(carboxylic_acid) and mol.HasSubstructMatch(ether_linkage) and mol.HasSubstructMatch(amino_group_any):
                row.append(1)
            else:
                row.append(0)
        except Exception:
            row.append(0)

        # Rule 11
        try:
            if mol.HasSubstructMatch(carboxylic_acid) and (mol.HasSubstructMatch(ketone_group) or mol.HasSubstructMatch(lactone_group)):
                row.append(1)
            else:
                row.append(0)
        except Exception:
            row.append(0)

        # Rule 12
        try:
            if mol.HasSubstructMatch(carboxylic_acid) and mol.HasSubstructMatch(fluorinated_alkyl_chain):
                row.append(-1)
            else:
                row.append(0)
        except Exception:
            row.append(0)

        # Append row to results
        results.append(row)

    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {i+1}' for i in range(12)])
    return df
