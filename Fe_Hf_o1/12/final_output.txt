
    Target Name: Fe/Hf
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: **Modifiers that contain a thiol group (–SH) and a carboxylic acid group predict a high Fe/Hf value due to sulfur's strong coordination ability with iron.**

  *Examples:*
  - *3-sulfanylpropanoic acid* (True)
  - *4-sulfanylbenzoic acid* (True)
  - *2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid* (True)

- **Rule 2**: **Modifiers that are aliphatic amino acids with a primary amine (–NH₂) and a single carboxylic acid group on a carbon chain of five or more carbons predict a high Fe/Hf value, provided there are no additional carboxylic acid groups.**

  *Examples:*
  - *5-aminopentanoic acid* (True)
  - *7-aminoheptanoic acid* (True)
  - *8-aminooctanoic acid* (True)
  - *Counter-example:* *(2S)-2-aminopentanedioic acid* (False) – contains two carboxylic acid groups.

- **Rule 3**: **Modifiers with aromatic rings substituted at the para position with electron-withdrawing groups (e.g., nitro, halomethyl) and a carboxylic acid group predict a high Fe/Hf value.**

  *Examples:*
  - *4-nitrobenzoic acid* (True)
  - *4-(bromomethyl)benzoic acid* (True)
  - *Counter-examples:*
    - *4-formylbenzoic acid* (False) – aldehyde group may hinder coordination.
    - *4-methylbenzoic acid* (False) – methyl is electron-donating.

- **Rule 4**: **Modifiers containing a pyridine ring with the nitrogen atom positioned to coordinate with iron, especially when linked via para substitution to a carboxylic acid group, predict a high Fe/Hf value.**

  *Examples:*
  - *4-pyridin-4-ylbenzoic acid* (True)
  - *4-pyridin-4-ylbutanoic acid* (True)
  - *Counter-example:* *Pyridine-3-carboxylic acid* (False) – nitrogen position less favorable for coordination.

- **Rule 5**: **Modifiers that are aliphatic carboxylic acids lacking additional strong coordinating functional groups (e.g., amino, thiol) predict a low Fe/Hf value.**

  *Examples:*
  - *Octanoic acid* (False)
  - *4-oxoheptanedioic acid* (False)
  - *(2S)-2-aminopentanedioic acid* (False) – additional carboxylic acid group reduces coordination efficiency.

- **Rule 6**: **Modifiers with multiple hydroxyl groups near the carboxylic acid group predict a low Fe/Hf value due to intramolecular hydrogen bonding hindering coordination with Fe ions.**

  *Examples:*
  - *(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid* (False)
  - *2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]propanoic acid* (False)

- **Rule 7**: **Modifiers containing electron-donating groups (e.g., amino, hydroxy, methoxy) on aromatic rings at the para position, along with a carboxylic acid group, predict a low Fe/Hf value due to decreased ability to coordinate with Fe ions.**

  *Examples:*
  - *4-aminobenzoic acid* (False)
  - *5-(4-hydroxyphenyl)pentanoic acid* (False)
  - *4-hydroxybenzoic acid derivatives* (False)

- **Rule 8**: **Modifiers that are amino acids with bulky aromatic side chains predict a low Fe/Hf value due to steric hindrance limiting coordination with Fe ions.**

  *Examples:*
  - *(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid* (False)
  - *(2S)-2-amino-3-phenylpropanoic acid* (True) – exception due to smaller aromatic side chain.

- **Rule 9**: **Modifiers containing carbonyl groups adjacent to aromatic rings (e.g., keto groups, lactones) predict a high Fe/Hf value due to potential chelation with Fe ions.**

  *Examples:*
  - *1,3-dioxo-2-benzofuran-5-carboxylic acid* (True)
  - *4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid* (True)

- **Rule 10**: **Modifiers with long aliphatic chains containing terminal hydroxy groups predict a high Fe/Hf value due to additional coordination sites provided by the hydroxy groups.**

  *Example:*
  - *7-hydroxyheptanoic acid* (True)

- **Rule 11**: **Modifiers containing ether linkages in aliphatic chains along with an amino group predict a high Fe/Hf value due to increased flexibility and additional oxygen atoms enhancing coordination with Fe ions.**

  *Example:*
  - *3-[2-(2-aminoethoxy)ethoxy]propanoic acid* (True)

- **Rule 12**: **Modifiers with fluorinated alkyl chains predict a low Fe/Hf value due to the strong electron-withdrawing effect reducing electron density on coordinating atoms.**

  *Example:*
  - *2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid* (False)

- **Rule 13**: **Modifiers containing aldehyde groups on aromatic rings predict a low Fe/Hf value, possibly due to the aldehyde group's potential to engage in side reactions or hinder coordination with Fe ions.**

  *Examples:*
  - *4-formylbenzoic acid* (False)
  - *5-formyl-2-hydroxybenzoic acid* (False)

- **Rule 14**: **Modifiers that are amino acids with sulfur-containing side chains predict a high Fe/Hf value due to sulfur's strong affinity for coordination with Fe ions.**

  *Example:*
  - *2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid* (True)

- **Rule 15**: **Modifiers with aliphatic chains containing both amino and acetamido groups predict a high Fe/Hf value due to multiple coordination sites enhancing binding with Fe ions.**

  *Example:*
  - *(2S)-6-acetamido-2-aminohexanoic acid* (True)

**End of Rules**

**Explanation and Analysis:**

- **Rule Refinement:** The rules have been refined to ensure clarity and to avoid redundancy. Some rules were merged or adjusted for better coverage.

- **Coverage Balance:** The rules aim to balance simplicity and complexity, covering a broad range of modifiers while highlighting key functional groups that influence Fe/Hf values.

- **Chemical Insights:**
  - **Coordination Sites:** Functional groups like thiols, amines, and pyridine nitrogens have lone pairs that can coordinate with Fe ions, increasing the Fe/Hf value.
  - **Steric Factors:** Bulky substituents near coordination sites can hinder binding to Fe ions, resulting in a low Fe/Hf value.
  - **Electronic Effects:** Electron-withdrawing groups enhance coordination by stabilizing the Fe-ligand bond, while electron-donating groups can decrease coordination efficiency.
  - **Intramolecular Interactions:** Intramolecular hydrogen bonding or resonance can reduce the availability of coordinating atoms, lowering the Fe/Hf value.

- **Applicability:** These rules can be applied to predict the Fe/Hf value (high or low) of other modifiers based on their structural features, aiding in the selection of modifiers to optimize the catalytic performance.

**Note:** The rules are based on observed trends in the provided dataset and general principles of coordination chemistry. Exceptions may occur, and experimental validation is recommended for new modifiers.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,-1,0,1,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,1,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,1,0,0,0,0,0
0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,1,0,0,0,0,0,0
0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,-1,0,1,0,0,0,0,0,0
0,0,0,1,0,0,-1,0,1,0,0,0,0,0,0
0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,1,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,1,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,-1,0,1,0,0,0,-1,0,0
0,0,0,0,0,0,-1,0,1,0,0,0,-1,0,0
0,0,1,0,0,0,-1,0,1,0,0,0,0,0,0
0,0,0,1,0,0,0,0,1,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,1
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,1,0,0,0,0,0,0
0,0,0,0,0,-1,-1,0,1,0,0,0,0,0,0
0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,-1,-1,0,0,0,1,0,0,0,0,0
0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,1
0,0,0,0,0,0,0,0,0,1,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.8571428571428571; Test Accuracy: 1.0
    Train Support: 0.1523809523809524; Test Support: 0.0
    Train Confidence: 0.7242063492063492; Test Confidence: 0.5
    Train Lift: 1.430646332607117; Test Lift: NONE
    Train Leverage: 0.029931972789115652; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and structural features
    
    # Common SMARTS patterns
    carboxylic_acid = '[CX3](=O)[OX2H1]'  # Carboxylic acid group
    carboxylate_anion = '[CX3](=O)[O-]'    # Carboxylate anion
    primary_amine = '[NX3H2]'               # Primary amine group
    thiol = '[SX2H]'                        # Thiol group
    aliphatic_chain_5 = '[CH2][CH2][CH2][CH2][CH2]'  # Aliphatic chain of 5 carbons
    amino_acid_backbone = '[NX3H2][CX4][CX3](=O)[OX2H1]'  # Simplified amino acid backbone
    
    # Electron-withdrawing groups (EWGs)
    nitro = '[NX3+](=O)[O-]'
    halomethyl = '[CH2][F,Cl,Br,I]'
    ewg = [nitro, halomethyl]
    
    # Electron-donating groups (EDGs)
    amino_edg = '[NX3;H2,H1][!#1]'
    hydroxy_edg = '[OX2H]'
    methoxy_edg = '[OX2][CH3]'
    edg = [amino_edg, hydroxy_edg, methoxy_edg]
    
    # Aromatic ring patterns
    benzene_ring = '[c]1[c][c][c][c][c]1'
    pyridine_ring = 'n1ccccc1'
    aromatic_ring = '[a]1[a][a][a][a][a]1'
    
    # Carbonyl group adjacent to aromatic ring
    carbonyl_adjacent_aromatic = '[c][CX3](=O)[!#1]'
    
    # Fluorinated alkyl chain
    fluorinated_alkyl_chain = '[CX4]([F,Cl,Br,I])[F,Cl,Br,I]'
    
    # Bulky aromatic side chain (e.g., phenylalanine)
    bulky_aromatic_side_chain = '[CX3](=[OX1])[CX4][#6][c]1[c][c][c][c][c]1'  # Simplified pattern
    
    # Ether linkage
    ether_linkage = '[#6][OX2][#6]'
    
    # Acetamido group
    acetamido_group = '[NX3][CX3](=O)[#6]'
    
    # Aldehyde group on aromatic ring
    aldehyde_on_aromatic = '[c][CX3H](=O)'
    
    # Initialize list of rules with SMARTS patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that contain a thiol group (-SH) and a carboxylic acid group predict a high Fe/Hf value.',
            'patterns': [thiol, carboxylic_acid],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers that are aliphatic amino acids with a primary amine and a single carboxylic acid group on a carbon chain of five or more carbons, with no additional carboxylic acid groups.',
            'patterns': [primary_amine, carboxylic_acid, aliphatic_chain_5],
            'exclude_patterns': [carboxylic_acid],  # Exclude if more than one carboxylic acid group
            'max_count': {carboxylic_acid: 1},
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers with aromatic rings substituted at the para position with electron-withdrawing groups (e.g., nitro, halomethyl) and a carboxylic acid group predict a high Fe/Hf value.',
            'patterns': [benzene_ring, carboxylic_acid],
            'sub_patterns': ewg,
            'sub_position': 'para',
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers containing a pyridine ring with the nitrogen atom positioned to coordinate with iron, linked via para substitution to a carboxylic acid group.',
            'patterns': [pyridine_ring, carboxylic_acid],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers that are aliphatic carboxylic acids lacking additional strong coordinating functional groups predict a low Fe/Hf value.',
            'patterns': [carboxylic_acid],
            'exclude_patterns': [primary_amine, thiol, ether_linkage, '[F,Cl,Br,I]', aromatic_ring],
            'prediction': -1
        },
        {
            'number': 6,
            'description': 'Modifiers with multiple hydroxyl groups near the carboxylic acid group predict a low Fe/Hf value.',
            'patterns': [carboxylic_acid],
            'count_patterns': {hydroxy_edg: 2},
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Modifiers containing electron-donating groups (e.g., amino, hydroxy, methoxy) on aromatic rings at the para position, along with a carboxylic acid group, predict a low Fe/Hf value.',
            'patterns': [benzene_ring, carboxylic_acid],
            'sub_patterns': edg,
            'sub_position': 'para',
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Modifiers that are amino acids with bulky aromatic side chains predict a low Fe/Hf value due to steric hindrance.',
            'patterns': [amino_acid_backbone, bulky_aromatic_side_chain],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers containing carbonyl groups adjacent to aromatic rings predict a high Fe/Hf value due to potential chelation.',
            'patterns': [carbonyl_adjacent_aromatic],
            'prediction': 1
        },
        {
            'number': 10,
            'description': 'Modifiers with long aliphatic chains containing terminal hydroxy groups predict a high Fe/Hf value.',
            'patterns': [aliphatic_chain_5, hydroxy_edg],
            'prediction': 1
        },
        {
            'number': 11,
            'description': 'Modifiers containing ether linkages in aliphatic chains along with an amino group predict a high Fe/Hf value.',
            'patterns': [ether_linkage, primary_amine],
            'prediction': 1
        },
        {
            'number': 12,
            'description': 'Modifiers with fluorinated alkyl chains predict a low Fe/Hf value.',
            'patterns': [fluorinated_alkyl_chain],
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Modifiers containing aldehyde groups on aromatic rings predict a low Fe/Hf value.',
            'patterns': [aldehyde_on_aromatic],
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'Modifiers that are amino acids with sulfur-containing side chains predict a high Fe/Hf value.',
            'patterns': [amino_acid_backbone, thiol],
            'prediction': 1
        },
        {
            'number': 15,
            'description': 'Modifiers with aliphatic chains containing both amino and acetamido groups predict a high Fe/Hf value.',
            'patterns': [primary_amine, acetamido_group],
            'prediction': 1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        rule['compiled_patterns'] = [Chem.MolFromSmarts(p) for p in rule.get('patterns', [])]
        if 'exclude_patterns' in rule:
            rule['compiled_exclude'] = [Chem.MolFromSmarts(p) for p in rule.get('exclude_patterns', [])]
        if 'sub_patterns' in rule:
            rule['compiled_sub_patterns'] = [Chem.MolFromSmarts(p) for p in rule.get('sub_patterns', [])]
        if 'count_patterns' in rule:
            rule['compiled_count_patterns'] = {Chem.MolFromSmarts(p): count for p, count in rule['count_patterns'].items()}
        if 'max_count' in rule:
            rule['compiled_max_count'] = {Chem.MolFromSmarts(p): count for p, count in rule['max_count'].items()}
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'compiled_exclude' in rule:
                    for pat in rule['compiled_exclude']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for pat in rule['compiled_patterns']:
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Check sub-patterns at specific positions (e.g., para substitution)
                if 'compiled_sub_patterns' in rule and 'sub_position' in rule:
                    # This is a simplified example; in practice, you'd need to map atom indices
                    sub_match = False
                    for sp in rule['compiled_sub_patterns']:
                        if mol.HasSubstructMatch(sp):
                            sub_match = True
                            break
                    if not sub_match:
                        match = False
                if not match:
                    row.append(0)
                    continue
                # Check count patterns
                if 'compiled_count_patterns' in rule:
                    for pat, count in rule['compiled_count_patterns'].items():
                        matches = mol.GetSubstructMatches(pat)
                        if len(matches) < count:
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check max count patterns
                if 'compiled_max_count' in rule:
                    for pat, max_count in rule['compiled_max_count'].items():
                        matches = mol.GetSubstructMatches(pat)
                        if len(matches) > max_count:
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # If all checks passed
                row.append(rule['prediction'])
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: Fe/Hf
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: **Modifiers that are aliphatic amino acids with a primary or secondary amino group (–NH₂ or –NH–) and a single carboxylic acid group (–COOH), where the carbon chain is five carbons or longer, predict a high Fe/Hf value. The extended chain length enhances the ability to coordinate with Fe ions through the amino and carboxylate groups.**

  *Examples:*
  - *5-aminopentanoic acid* (High Fe/Hf)
  - *7-aminoheptanoic acid* (High Fe/Hf)
  - *8-aminooctanoic acid* (High Fe/Hf)
  - *(2S)-6-acetamido-2-aminohexanoic acid* (High Fe/Hf)
  
  *Counter-example:*
  - *(2S)-2-aminopentanedioic acid* (Low Fe/Hf) – Contains two carboxylic acid groups, which may chelate differently, reducing Fe coordination.

- **Rule 2**: **Modifiers containing sulfur atoms, such as thiol groups (–SH) or thioether groups (–S–), in combination with a carboxylic acid group, predict a high Fe/Hf value due to sulfur's strong affinity for coordinating with Fe ions.**

  *Examples:*
  - *3-sulfanylpropanoic acid* (High Fe/Hf)
  - *4-sulfanylbenzoic acid* (High Fe/Hf)
  - *2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid* (High Fe/Hf)

- **Rule 3**: **Modifiers that are aromatic carboxylic acids with electron-withdrawing groups (e.g., nitro (–NO₂), halomethyl (–CH₂Br)) at the para position predict a high Fe/Hf value. Electron-withdrawing groups increase the acidity and coordinating ability of the carboxylate group toward Fe ions.**

  *Examples:*
  - *4-nitrobenzoic acid* (High Fe/Hf)
  - *4-(bromomethyl)benzoic acid* (High Fe/Hf)
  
  *Counter-examples:*
  - *4-methylbenzoic acid* (Low Fe/Hf) – Methyl group is electron-donating.
  - *4-aminobenzoic acid* (Low Fe/Hf) – Amino group is electron-donating.

- **Rule 4**: **Modifiers featuring a pyridine ring with the nitrogen atom available for coordination, especially when connected via a linker to a carboxylic acid group, predict a high Fe/Hf value due to bidentate or multidentate chelation with Fe ions.**

  *Examples:*
  - *4-pyridin-4-ylbenzoic acid* (High Fe/Hf)
  - *4-pyridin-4-ylbutanoic acid* (High Fe/Hf)
  
  *Counter-example:*
  - *Pyridine-3-carboxylic acid* (Low Fe/Hf) – Steric hindrance or less favorable nitrogen position reduces coordination efficiency.

- **Rule 5**: **Modifiers that are simple aliphatic carboxylic acids without additional strong coordinating functional groups predict a low Fe/Hf value. The lack of donor atoms reduces their ability to interact effectively with Fe ions.**

  *Examples:*
  - *Octanoic acid* (Low Fe/Hf)
  - *4-oxoheptanedioic acid* (Low Fe/Hf)
  - *2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid* (Low Fe/Hf) – Fluorination withdraws electron density, further reducing coordination.

- **Rule 6**: **Modifiers with multiple hydroxyl groups (–OH) near the carboxylic acid group predict a low Fe/Hf value. Intramolecular hydrogen bonding competes with coordination, diminishing their interaction with Fe ions.**

  *Examples:*
  - *(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid* (Low Fe/Hf)
  - *2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]propanoic acid* (Low Fe/Hf)

- **Rule 7**: **Modifiers with aromatic rings substituted with electron-donating groups (e.g., amino (–NH₂), hydroxy (–OH), methoxy (–OCH₃)) at the para position and a carboxylic acid group predict a low Fe/Hf value. Electron-donating groups decrease the acidity and coordinating ability of the carboxylate group.**

  *Examples:*
  - *4-aminobenzoic acid* (Low Fe/Hf)
  - *5-(4-hydroxyphenyl)pentanoic acid* (Low Fe/Hf)
  - *3-(4-hydroxyphenyl)propanoic acid* (Low Fe/Hf)

- **Rule 8**: **Modifiers containing aldehyde groups (–CHO) adjacent to or conjugated with the carboxylic acid group predict a low Fe/Hf value due to potential side reactions and reduced coordination efficiency with Fe ions.**

  *Examples:*
  - *4-formylbenzoic acid* (Low Fe/Hf)
  - *5-formyl-2-hydroxybenzoic acid* (Low Fe/Hf)

- **Rule 9**: **Modifiers that contain carbonyl groups (e.g., ketones, lactones) adjacent to aromatic rings and a carboxylic acid group predict a high Fe/Hf value. The carbonyl and carboxylate groups can act synergistically to chelate Fe ions.**

  *Examples:*
  - *1,3-dioxo-2-benzofuran-5-carboxylic acid* (High Fe/Hf)
  - *4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid* (High Fe/Hf)

- **Rule 10**: **Modifiers that are dicarboxylic acids (containing two carboxylic acid groups) predict a low Fe/Hf value due to the possibility of forming stronger chelates with Hf ions, thereby reducing Fe incorporation into the material.**

  *Examples:*
  - *(2S)-2-aminopentanedioic acid* (Low Fe/Hf)
  - *4-oxoheptanedioic acid* (Low Fe/Hf)
  
  *Counter-example:*
  - *(2S)-2-aminobutanedioic acid* (High Fe/Hf) – Suggests that other factors like chain length or molecular conformation may influence coordination.

- **Rule 11**: **Modifiers with bulky aromatic or heteroaromatic side chains near coordinating groups predict a low Fe/Hf value due to steric hindrance impeding effective interaction with Fe ions.**

  *Examples:*
  - *(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid* (Low Fe/Hf)
  - *1H-pyrazole-4-carboxylic acid* (Low Fe/Hf)

- **Rule 12**: **Modifiers containing ether linkages (–O–) in aliphatic chains combined with amino groups predict a high Fe/Hf value. The ether oxygen and amino nitrogen provide multiple coordination sites, enhancing interaction with Fe ions.**

  *Example:*
  - *3-[2-(2-aminoethoxy)ethoxy]propanoic acid* (High Fe/Hf)

- **Rule 13**: **Modifiers with highly fluorinated alkyl chains predict a low Fe/Hf value. The strong electron-withdrawing effect of fluorine atoms reduces electron density on coordinating groups, weakening interactions with Fe ions.**

  *Example:*
  - *2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid* (Low Fe/Hf)

- **Rule 14**: **Modifiers containing acetamido (–NHCOCH₃) or secondary amide groups predict a high Fe/Hf value due to additional coordination sites provided by the carbonyl oxygen and nitrogen atoms, facilitating stronger binding with Fe ions.**

  *Examples:*
  - *(2S)-6-acetamido-2-aminohexanoic acid* (High Fe/Hf)
  - *2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid* (High Fe/Hf)

- **Rule 15**: **Modifiers possessing strong chelating ligands like β-diketones or aromatic diketones in conjunction with a carboxylic acid group predict a high Fe/Hf value. These structures can form stable chelate complexes with Fe ions.**

  *Example:*
  - *1,3-dioxo-2-benzofuran-5-carboxylic acid* (High Fe/Hf)

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,1,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,1,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6857142857142857; Test Accuracy: 0.0
    Train Support: 0.07857142857142857; Test Support: 0.0
    Train Confidence: 0.9583333333333334; Test Confidence: 0.5
    Train Lift: 1.9492102396514164; Test Lift: NONE
    Train Leverage: 0.03571428571428571; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and structural features
    
    # Common functional groups
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    carboxylate = '[CX3](=O)[O-]'
    primary_amine = '[NX3H2,NX4H3]'  # Primary amine
    secondary_amine = '[NX3H1][#6]'   # Secondary amine
    amine_groups = [primary_amine, secondary_amine]
    
    thiol_group = '[SX2H]'  # Thiol group (-SH)
    thioether_group = '[#6][SX2][#6]'  # Thioether group (-S-)
    sulfur_groups = [thiol_group, thioether_group]
    
    aromatic_ring = 'c1ccccc1'  # Benzene ring
    nitro_group = '[NX3](=O)=O'  # Nitro group
    halogens = '[F,Cl,Br,I]'
    halogen_on_aromatic = '[c]' + halogens  # Halogen attached to aromatic carbon
    nitro_on_aromatic = '[c]' + nitro_group
    ewg_on_aromatic = [halogen_on_aromatic, nitro_on_aromatic]
    
    pyridine_ring = 'n1ccccc1'  # Pyridine ring
    
    hydroxyl_group = '[OX2H]'  # Hydroxyl group (-OH)
    multi_hydroxyl = hydroxyl_group
    
    amino_on_aromatic = '[c][NX3H2,NX3H1]'  # Amino group on aromatic ring
    hydroxyl_on_aromatic = '[c][OX2H]'  # Hydroxyl group on aromatic ring
    methoxy_on_aromatic = '[c][OX2][CH3]'  # Methoxy group on aromatic ring
    edg_on_aromatic = [amino_on_aromatic, hydroxyl_on_aromatic, methoxy_on_aromatic]
    
    aldehyde_adjacent_to_carboxylic_acid = '[CX3H1](=O)[CX3](=O)[OX2H1]'  # Aldehyde next to carboxylic acid
    
    ketone_adjacent_to_aromatic = '[c][CX3](=O)[#6]'  # Ketone next to aromatic ring
    
    dicarboxylic_acid = '[#6][CX3](=O)[OX1H0][#6][CX3](=O)[OX1H0]'  # Two carboxylic acids
    
    bulky_aromatic_side_chain = '[CX3](=O)[NX3][C][c]1[c][c][c][c][c]1'  # Amide linked to aromatic ring
    
    ether_linkage_with_amino = '[#6][OX2][#6][OX2][#6][NX3H2,NX3H1]'  # Ether linkage with amino group
    
    fluorinated_alkyl_chain = '[#6][#6]([F])[F][F]'  # Highly fluorinated alkyl chain
    
    acetamido_group = '[NX3][CX3](=O)[#6]'  # Acetamido group
    
    beta_diketone = '[#6][CX3](=O)[#6][CX3](=O)[#6]'  # Beta-diketone
    
    long_aliphatic_chain = '[CH2][CH2][CH2][CH2][CH2]'  # Chain of five carbons
    
    # Define the rules with associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are aliphatic amino acids with a primary or secondary amino group (-NH₂ or -NH-) and a single carboxylic acid group (-COOH), where the carbon chain is five carbons or longer, predict a high Fe/Hf value.',
            'patterns': [
                [long_aliphatic_chain],
                amine_groups,
                [carboxylic_acid, carboxylate]
            ],
            'exclude_patterns': [
                [dicarboxylic_acid]  # Exclude dicarboxylic acids
            ],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers containing sulfur atoms, such as thiol groups (-SH) or thioether groups (-S-), in combination with a carboxylic acid group, predict a high Fe/Hf value.',
            'patterns': [
                sulfur_groups,
                [carboxylic_acid, carboxylate]
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers that are aromatic carboxylic acids with electron-withdrawing groups (e.g., nitro (-NO₂), halomethyl (-CH₂Br)) at the para position predict a high Fe/Hf value.',
            'patterns': [
                ewg_on_aromatic,
                [aromatic_ring],
                [carboxylic_acid, carboxylate]
            ],
            'exclude_patterns': [
                edg_on_aromatic  # Exclude electron-donating groups
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers featuring a pyridine ring with the nitrogen atom available for coordination, especially when connected via a linker to a carboxylic acid group, predict a high Fe/Hf value.',
            'patterns': [
                [pyridine_ring],
                [carboxylic_acid, carboxylate]
            ],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers that are simple aliphatic carboxylic acids without additional strong coordinating functional groups predict a low Fe/Hf value.',
            'patterns': [
                [carboxylic_acid, carboxylate]
            ],
            'exclude_patterns': [
                amine_groups,
                sulfur_groups,
                ['[a]'],  # Exclude aromatic atoms
                [hydroxyl_group],
                [halogens],
                [pyridine_ring]
            ],
            'prediction': -1
        },
        {
            'number': 6,
            'description': 'Modifiers with multiple hydroxyl groups (-OH) near the carboxylic acid group predict a low Fe/Hf value.',
            'patterns': [
                [carboxylic_acid, carboxylate],
                [hydroxyl_group]
            ],
            'count_threshold': {
                hydroxyl_group: 2  # At least 2 hydroxyl groups
            },
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Modifiers with aromatic rings substituted with electron-donating groups (e.g., amino (-NH₂), hydroxy (-OH), methoxy (-OCH₃)) at the para position and a carboxylic acid group predict a low Fe/Hf value.',
            'patterns': [
                edg_on_aromatic,
                [aromatic_ring],
                [carboxylic_acid, carboxylate]
            ],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Modifiers containing aldehyde groups (-CHO) adjacent to or conjugated with the carboxylic acid group predict a low Fe/Hf value.',
            'patterns': [
                [aldehyde_adjacent_to_carboxylic_acid],
                [carboxylic_acid, carboxylate]
            ],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers that contain carbonyl groups (e.g., ketones, lactones) adjacent to aromatic rings and a carboxylic acid group predict a high Fe/Hf value.',
            'patterns': [
                [ketone_adjacent_to_aromatic],
                [carboxylic_acid, carboxylate]
            ],
            'prediction': 1
        },
        {
            'number': 10,
            'description': 'Modifiers that are dicarboxylic acids (containing two carboxylic acid groups) predict a low Fe/Hf value.',
            'patterns': [
                [dicarboxylic_acid]
            ],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Modifiers with bulky aromatic or heteroaromatic side chains near coordinating groups predict a low Fe/Hf value due to steric hindrance impeding effective interaction with Fe ions.',
            'patterns': [
                [bulky_aromatic_side_chain],
                [carboxylic_acid, carboxylate]
            ],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'Modifiers containing ether linkages (-O-) in aliphatic chains combined with amino groups predict a high Fe/Hf value.',
            'patterns': [
                [ether_linkage_with_amino],
                [carboxylic_acid, carboxylate]
            ],
            'prediction': 1
        },
        {
            'number': 13,
            'description': 'Modifiers with highly fluorinated alkyl chains predict a low Fe/Hf value.',
            'patterns': [
                [fluorinated_alkyl_chain],
                [carboxylic_acid, carboxylate]
            ],
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'Modifiers containing acetamido (-NHCOCH₃) or secondary amide groups predict a high Fe/Hf value.',
            'patterns': [
                [acetamido_group],
                [carboxylic_acid, carboxylate]
            ],
            'prediction': 1
        },
        {
            'number': 15,
            'description': 'Modifiers possessing strong chelating ligands like β-diketones or aromatic diketones in conjunction with a carboxylic acid group predict a high Fe/Hf value.',
            'patterns': [
                [beta_diketone],
                [carboxylic_acid, carboxylate]
            ],
            'prediction': 1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule['patterns']:
            compiled_group = [Chem.MolFromSmarts(p) for p in group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for group in rule['exclude_patterns']:
                compiled_group = [Chem.MolFromSmarts(p) for p in group]
                compiled_excludes.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_excludes
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        matches = mol.GetSubstructMatches(pat)
                        if matches:
                            # If a count threshold is specified for this pattern
                            if 'count_threshold' in rule and pat.GetSmarts() in rule['count_threshold']:
                                threshold = rule['count_threshold'][pat.GetSmarts()]
                                if len(matches) >= threshold:
                                    group_match = True
                                    break
                            else:
                                group_match = True
                                break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: Fe/Hf
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: **Modifiers that are aliphatic amino acids with a linear carbon chain of five or more carbons, containing a primary or secondary amino group (–NH₂ or –NH–) and a single carboxylic acid group (–COOH), predict a high Fe/Hf value. The extended chain length enhances coordination with Fe ions through the amino and carboxylate groups.**

  *Examples:*
  - *5-aminopentanoic acid* (High Fe/Hf)
  - *7-aminoheptanoic acid* (High Fe/Hf)
  - *8-aminooctanoic acid* (High Fe/Hf)
  - *(2S)-6-acetamido-2-aminohexanoic acid* (High Fe/Hf)
  
  *Counter-example:*
  - *(2S)-2-aminopentanedioic acid* (Low Fe/Hf) – Contains two carboxylic acid groups, which may chelate differently and reduce Fe coordination.

- **Rule 2**: **Modifiers containing sulfur-functional groups, such as thiol (–SH) or thioether (–S–) groups, along with a carboxylic acid group, predict a high Fe/Hf value due to sulfur's strong affinity for Fe ions, enhancing coordination.**

  *Examples:*
  - *3-sulfanylpropanoic acid* (High Fe/Hf)
  - *4-sulfanylbenzoic acid* (High Fe/Hf)
  - *2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid* (High Fe/Hf)

- **Rule 3**: **Modifiers that are aromatic carboxylic acids with strong electron-withdrawing groups at the para position (e.g., nitro (–NO₂), bromomethyl (–CH₂Br)) predict a high Fe/Hf value. Electron-withdrawing groups increase the acidity and coordinating ability of the carboxylate group toward Fe ions.**

  *Examples:*
  - *4-nitrobenzoic acid* (High Fe/Hf)
  - *4-(bromomethyl)benzoic acid* (High Fe/Hf)
  
  *Counter-examples:*
  - *4-methylbenzoic acid* (Low Fe/Hf) – Methyl group is electron-donating.
  - *4-aminobenzoic acid* (Low Fe/Hf) – Amino group is electron-donating.

- **Rule 4**: **Modifiers featuring a pyridine ring connected to a carboxylic acid group, where the nitrogen atom in the pyridine ring is available for coordination, predict a high Fe/Hf value due to the potential for bidentate chelation with Fe ions.**

  *Examples:*
  - *4-pyridin-4-ylbenzoic acid* (High Fe/Hf)
  - *4-pyridin-4-ylbutanoic acid* (High Fe/Hf)
  
  *Counter-example:*
  - *Pyridine-3-carboxylic acid* (Low Fe/Hf) – The positioning of the nitrogen may be less favorable for effective coordination.

- **Rule 5**: **Modifiers that are simple aliphatic carboxylic acids without additional strong coordinating functional groups predict a low Fe/Hf value. The lack of donor atoms reduces their ability to interact effectively with Fe ions.**

  *Examples:*
  - *Octanoic acid* (Low Fe/Hf)
  - *4-oxoheptanedioic acid* (Low Fe/Hf)

- **Rule 6**: **Modifiers with multiple hydroxyl groups (–OH) in close proximity to the carboxylic acid group predict a low Fe/Hf value. Intramolecular hydrogen bonding competes with coordination to Fe ions, diminishing their interaction.**

  *Examples:*
  - *(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid* (Low Fe/Hf)
  - *2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]propanoic acid* (Low Fe/Hf)

- **Rule 7**: **Modifiers that are aromatic carboxylic acids with electron-donating groups (e.g., amino (–NH₂), hydroxy (–OH)) at the para position predict a low Fe/Hf value. Electron-donating groups decrease the acidity and coordinating ability of the carboxylate group toward Fe ions.**

  *Examples:*
  - *4-aminobenzoic acid* (Low Fe/Hf)
  - *3-(4-hydroxyphenyl)propanoic acid* (Low Fe/Hf)
  - *5-(4-hydroxyphenyl)pentanoic acid* (Low Fe/Hf)

- **Rule 8**: **Modifiers containing aldehyde groups (–CHO) adjacent to or conjugated with the carboxylic acid group predict a low Fe/Hf value. The aldehyde group may undergo side reactions or reduce coordination efficiency with Fe ions.**

  *Examples:*
  - *4-formylbenzoic acid* (Low Fe/Hf)
  - *5-formyl-2-hydroxybenzoic acid* (Low Fe/Hf)

- **Rule 9**: **Modifiers containing additional carbonyl groups (e.g., ketones, lactones) adjacent to aromatic rings along with a carboxylic acid group predict a high Fe/Hf value. The presence of multiple carbonyl groups can enhance chelation with Fe ions.**

  *Examples:*
  - *1,3-dioxo-2-benzofuran-5-carboxylic acid* (High Fe/Hf)
  - *4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid* (High Fe/Hf)

- **Rule 10**: **Modifiers that are dicarboxylic acids (containing two carboxylic acid groups) predict a low Fe/Hf value due to potential chelation with Hf ions, which may inhibit Fe incorporation.**

  *Examples:*
  - *(2S)-2-aminopentanedioic acid* (Low Fe/Hf)
  - *4-oxoheptanedioic acid* (Low Fe/Hf)
  
  *Counter-example:*
  - *(2S)-2-aminobutanedioic acid* (High Fe/Hf) – Indicates that chain length or molecular conformation may influence coordination differently.

- **Rule 11**: **Modifiers with highly fluorinated carbon chains predict a low Fe/Hf value. The strong electron-withdrawing effect of fluorine atoms reduces electron density on coordinating groups, weakening interactions with Fe ions.**

  *Example:*
  - *2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid* (Low Fe/Hf)

- **Rule 12**: **Modifiers containing ether linkages (–O–) and amino groups within the same molecule predict a high Fe/Hf value. The presence of multiple heteroatoms provides additional coordination sites for Fe ions.**

  *Example:*
  - *3-[2-(2-aminoethoxy)ethoxy]propanoic acid* (High Fe/Hf)

- **Rule 13**: **Modifiers with bulky aromatic or heteroaromatic side chains near coordinating groups predict a low Fe/Hf value due to steric hindrance impeding effective interaction with Fe ions.**

  *Examples:*
  - *(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid* (Low Fe/Hf)
  - *1H-pyrazole-4-carboxylic acid* (Low Fe/Hf)

- **Rule 14**: **Modifiers containing acetamido (–NHCOCH₃) or secondary amide groups along with amino groups predict a high Fe/Hf value. The additional carbonyl and nitrogen atoms in amide groups enhance coordination with Fe ions.**

  *Examples:*
  - *(2S)-6-acetamido-2-aminohexanoic acid* (High Fe/Hf)
  - *2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid* (High Fe/Hf)

- **Rule 15**: **Modifiers that are hydroxyalkanoic acids (aliphatic carboxylic acids with hydroxy groups distant from the carboxylic acid) predict a high Fe/Hf value. The distant hydroxy group can act as an additional coordination site without interfering through intramolecular hydrogen bonding.**

  *Example:*
  - *7-hydroxyheptanoic acid* (High Fe/Hf)

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,1,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,1,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6; Test Accuracy: 1.0
    Train Support: 0.2857142857142857; Test Support: 0.0
    Train Confidence: 0.625; Test Confidence: 0.5
    Train Lift: 1.215277777777778; Test Lift: NONE
    Train Leverage: 0.05061224489795921; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    from rdkit.Chem import rdchem
    from collections import deque
    # Function to calculate the length of the longest linear aliphatic carbon chain
    def get_longest_aliphatic_chain_length(mol):
        max_length = 0
        aliphatic_carbons = [atom.GetIdx() for atom in mol.GetAtoms()
                             if atom.GetAtomicNum() == 6 and not atom.GetIsAromatic() and not atom.IsInRing()]
        for atom_idx in aliphatic_carbons:
            visited = set()
            queue = deque()
            queue.append((atom_idx, 1))
            while queue:
                current_idx, length = queue.popleft()
                if current_idx in visited:
                    continue
                visited.add(current_idx)
                max_length = max(max_length, length)
                current_atom = mol.GetAtomWithIdx(current_idx)
                for neighbor in current_atom.GetNeighbors():
                    neighbor_idx = neighbor.GetIdx()
                    neighbor_atom = mol.GetAtomWithIdx(neighbor_idx)
                    if neighbor_idx not in visited:
                        if neighbor_atom.GetAtomicNum() == 6 and not neighbor_atom.GetIsAromatic() and not neighbor_atom.IsInRing():
                            queue.append((neighbor_idx, length + 1))
        return max_length

    # Define SMARTS patterns
    patterns = {
        # Carboxylic acid group (-COOH) or carboxylate anion (-COO-)
        'carboxylic_acid': [Chem.MolFromSmarts('[CX3](=O)[OX2H1]'), Chem.MolFromSmarts('[CX3](=O)[O-]')],
        # Primary amine (-NH2)
        'primary_amine': Chem.MolFromSmarts('[NX3H2;!$(N-C=[O,N,S])]'),
        # Secondary amine (-NH-)
        'secondary_amine': Chem.MolFromSmarts('[NX3H1]([#6])[#6]'),
        # Thiol group (-SH)
        'thiol': Chem.MolFromSmarts('[SX2H]'),
        # Thioether group (-S-)
        'thioether': Chem.MolFromSmarts('[#16X2][#6]'),
        # Ether linkage (-O-)
        'ether_linkage': Chem.MolFromSmarts('[#6][OX2][#6]'),
        # Halogens attached to aromatic rings
        'halogen_on_aromatic': Chem.MolFromSmarts('c[F,Cl,Br,I]'),
        # Nitro group (-NO2)
        'nitro_group': Chem.MolFromSmarts('[NX3+](=O)[O-]'),
        # Hydroxyl group (-OH)
        'hydroxyl_group': Chem.MolFromSmarts('[OX2H]'),
        # Ketone group (>C=O)
        'ketone_group': Chem.MolFromSmarts('[#6][CX3](=O)[#6]'),
        # Pyridine ring
        'pyridine_ring': Chem.MolFromSmarts('n1ccccc1'),
        # Carboxylic acid connected to aromatic ring
        'aromatic_carboxylic_acid': Chem.MolFromSmarts('c[CX3](=O)[O;H1,-]'),
        # Aromatic electron-withdrawing groups at para position
        'aromatic_electron_withdrawing_para': Chem.MolFromSmarts('c1cc([F,Cl,Br,I,N+](=O)[O-],CBr,CH2Br)ccc1C(=O)[O;H1,-]'),
        # Aromatic electron-donating groups at para position
        'aromatic_electron_donating_para': Chem.MolFromSmarts('c1cc([OX2H,NH2])ccc1C(=O)[O;H1,-]'),
        # Aldehyde group adjacent to carboxylic acid
        'aldehyde_adjacent': Chem.MolFromSmarts('[CX3H1](=O)-[CX3](=O)[O;H1,-]'),
        # Additional carbonyl groups adjacent to aromatic rings and carboxylic acid
        'aromatic_ketone_carboxylic_acid': Chem.MolFromSmarts('c[CX3](=O)[#6][CX3](=O)[O;H1,-]'),
        # Dicarboxylic acid (two -COOH groups)
        'dicarboxylic_acid': Chem.MolFromSmarts('[CX3](=O)[O;H1,-][#6][#6][CX3](=O)[O;H1,-]'),
        # Fluorinated carbon chains
        'fluorinated_chain': Chem.MolFromSmarts('[#6][#6][#6][#6][F,Cl,Br,I]'),
        # Bulky aromatic or heteroaromatic side chains
        'bulky_aromatic': Chem.MolFromSmarts('[#6][cR]'),
        # Acetamido group (-NHCOCH3)
        'acetamido_group': Chem.MolFromSmarts('[NX3][CX3](=O)[CH3]'),
        # Hydroxyalkanoic acids
        'hydroxy_distant': Chem.MolFromSmarts('[CX3](=O)[O;H1,-][CH2][CH2][OX2H]'),
    }

    # Define the rules
    rules = [
        {
            'number': 1,
            'description': 'High Fe/Hf Value: Aliphatic amino acids with a linear carbon chain of five or more carbons, containing a primary or secondary amino group and a single carboxylic acid group, no aromatic rings.',
            'patterns': patterns['carboxylic_acid'],
            'additional_checks': {
                'amine': [patterns['primary_amine'], patterns['secondary_amine']],
                'chain_length': 5,
                'max_carboxylic_acids': 1,
                'no_aromatic': True
            },
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'High Fe/Hf Value: Modifiers containing sulfur-functional groups (thiol or thioether), along with a carboxylic acid group.',
            'patterns': patterns['carboxylic_acid'],
            'additional_checks': {
                'sulfur_group': [patterns['thiol'], patterns['thioether']]
            },
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'High Fe/Hf Value: Aromatic carboxylic acids with strong electron-withdrawing groups at the para position.',
            'patterns': [patterns['aromatic_electron_withdrawing_para']],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'High Fe/Hf Value: Modifiers featuring a pyridine ring connected to a carboxylic acid group.',
            'patterns': [patterns['pyridine_ring'], patterns['carboxylic_acid']],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Low Fe/Hf Value: Simple aliphatic carboxylic acids without additional strong coordinating functional groups.',
            'patterns': patterns['carboxylic_acid'],
            'additional_checks': {
                'exclude_groups': [patterns['primary_amine'], patterns['secondary_amine'], patterns['thiol'],
                                   patterns['thioether'], patterns['ether_linkage'], patterns['halogen_on_aromatic'],
                                   patterns['nitro_group'], patterns['hydroxyl_group'], patterns['ketone_group']]
            },
            'prediction': -1
        },
        {
            'number': 6,
            'description': 'Low Fe/Hf Value: Modifiers with multiple hydroxyl groups in close proximity to the carboxylic acid group.',
            'patterns': patterns['carboxylic_acid'],
            'additional_checks': {
                'close_hydroxyl_groups': True
            },
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Low Fe/Hf Value: Aromatic carboxylic acids with electron-donating groups at the para position.',
            'patterns': [patterns['aromatic_electron_donating_para']],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Low Fe/Hf Value: Modifiers containing aldehyde groups adjacent to or conjugated with the carboxylic acid group.',
            'patterns': [patterns['aldehyde_adjacent']],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'High Fe/Hf Value: Modifiers containing additional carbonyl groups adjacent to aromatic rings along with a carboxylic acid group.',
            'patterns': [patterns['aromatic_ketone_carboxylic_acid']],
            'prediction': 1
        },
        {
            'number': 10,
            'description': 'Low Fe/Hf Value: Modifiers that are dicarboxylic acids.',
            'patterns': [patterns['dicarboxylic_acid']],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Low Fe/Hf Value: Modifiers with highly fluorinated carbon chains.',
            'patterns': [patterns['carboxylic_acid'], patterns['fluorinated_chain']],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'High Fe/Hf Value: Modifiers containing ether linkages and amino groups within the same molecule.',
            'patterns': [patterns['carboxylic_acid'], patterns['ether_linkage'],
                         patterns['primary_amine'], patterns['secondary_amine']],
            'additional_checks': {
                'ether_amino_connected': True
            },
            'prediction': 1
        },
        {
            'number': 13,
            'description': 'Low Fe/Hf Value: Modifiers with bulky aromatic or heteroaromatic side chains near coordinating groups.',
            'patterns': [patterns['carboxylic_acid']],
            'additional_checks': {
                'bulky_aromatic_near_coordinating_group': True
            },
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'High Fe/Hf Value: Modifiers containing acetamido or secondary amide groups along with amino groups.',
            'patterns': [patterns['acetamido_group'], patterns['primary_amine'], patterns['carboxylic_acid']],
            'prediction': 1
        },
        {
            'number': 15,
            'description': 'High Fe/Hf Value: Hydroxyalkanoic acids with hydroxy groups distant from the carboxylic acid.',
            'patterns': [patterns['hydroxy_distant']],
            'prediction': 1
        }
    ]

    # Initialize results list
    results = []

    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Exclude groups
                if 'exclude_groups' in rule.get('additional_checks', {}):
                    for exclude_pattern in rule['additional_checks']['exclude_groups']:
                        if mol.HasSubstructMatch(exclude_pattern):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for pattern in rule.get('patterns', []):
                    if isinstance(pattern, list):
                        pattern_match = any([mol.HasSubstructMatch(pat) for pat in pattern])
                    else:
                        pattern_match = mol.HasSubstructMatch(pattern)
                    if not pattern_match:
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Additional checks
                additional_checks = rule.get('additional_checks', {})
                # Amine check for Rule 1
                if 'amine' in additional_checks:
                    amine_match = False
                    for amine_pattern in additional_checks['amine']:
                        if mol.HasSubstructMatch(amine_pattern):
                            amine_match = True
                            break
                    if not amine_match:
                        match = False
                # Chain length check for Rule 1
                if 'chain_length' in additional_checks:
                    longest_chain = get_longest_aliphatic_chain_length(mol)
                    if longest_chain < additional_checks['chain_length']:
                        match = False
                # Max carboxylic acids check for Rule 1
                if 'max_carboxylic_acids' in additional_checks:
                    count = sum([len(mol.GetSubstructMatches(pat)) for pat in patterns['carboxylic_acid']])
                    if count != additional_checks['max_carboxylic_acids']:
                        match = False
                # No aromatic rings check for Rule 1
                if additional_checks.get('no_aromatic', False):
                    if mol.HasSubstructMatch(Chem.MolFromSmarts('[a]')):
                        match = False
                # Sulfur group check for Rule 2
                if 'sulfur_group' in additional_checks:
                    sulfur_match = False
                    for sulfur_pattern in additional_checks['sulfur_group']:
                        if mol.HasSubstructMatch(sulfur_pattern):
                            sulfur_match = True
                            break
                    if not sulfur_match:
                        match = False
                # Close hydroxyl groups check for Rule 6
                if additional_checks.get('close_hydroxyl_groups', False):
                    hydroxyl_atoms = [atom.GetIdx() for atom in mol.GetAtoms() if atom.GetAtomicNum() == 8 and atom.GetTotalDegree() == 1]
                    ca_matches = mol.GetSubstructMatches(patterns['carboxylic_acid'][0]) + mol.GetSubstructMatches(patterns['carboxylic_acid'][1])
                    close_hydroxyl_count = 0
                    for ca_match in ca_matches:
                        ca_idx = ca_match[0]
                        for oh_idx in hydroxyl_atoms:
                            path = Chem.rdmolops.GetShortestPath(mol, ca_idx, oh_idx)
                            if 1 < len(path) <= 3:  # Adjust the distance as needed
                                close_hydroxyl_count += 1
                    if close_hydroxyl_count < 2:
                        match = False
                # Ether and amino group connected check for Rule 12
                if additional_checks.get('ether_amino_connected', False):
                    ether_matches = mol.GetSubstructMatches(patterns['ether_linkage'])
                    amine_patterns = [patterns['primary_amine'], patterns['secondary_amine']]
                    amine_matches = []
                    for amine_pattern in amine_patterns:
                        amine_matches.extend(mol.GetSubstructMatches(amine_pattern))
                    connected = False
                    for e_match in ether_matches:
                        e_atom_idx = e_match[0]
                        for a_match in amine_matches:
                            a_atom_idx = a_match[0]
                            try:
                                path_length = len(Chem.rdmolops.GetShortestPath(mol, e_atom_idx, a_atom_idx))
                                if path_length <= 4:  # Adjust the threshold as needed
                                    connected = True
                                    break
                            except:
                                continue
                        if connected:
                            break
                    if not connected:
                        match = False
                # Bulky aromatic near coordinating group check for Rule 13
                if additional_checks.get('bulky_aromatic_near_coordinating_group', False):
                    coordinating_groups = patterns['carboxylic_acid'] + [patterns['primary_amine'], patterns['secondary_amine']]
                    bulky_matches = mol.GetSubstructMatches(patterns['bulky_aromatic'])
                    if bulky_matches:
                        bulky_atom_idxs = [match[0] for match in bulky_matches]
                        close_to_coord_group = False
                        for coord_pattern in coordinating_groups:
                            if isinstance(coord_pattern, list):
                                coord_matches = []
                                for pat in coord_pattern:
                                    coord_matches.extend(mol.GetSubstructMatches(pat))
                            else:
                                coord_matches = mol.GetSubstructMatches(coord_pattern)
                            for coord_match in coord_matches:
                                coord_atom_idx = coord_match[0]
                                for bulky_atom_idx in bulky_atom_idxs:
                                    path_length = len(Chem.rdmolops.GetShortestPath(mol, coord_atom_idx, bulky_atom_idx))
                                    if path_length <= 3:
                                        close_to_coord_group = True
                                        break
                                if close_to_coord_group:
                                    break
                            if close_to_coord_group:
                                break
                        if not close_to_coord_group:
                            match = False
                    else:
                        match = False
                # If match, append prediction
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: Fe/Hf
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: **Modifiers that are aliphatic amino acids with a linear carbon chain of four or more carbons, containing a primary amino group (–NH₂) and a single carboxylic acid group (–COOH), predict a high Fe/Hf value. The extended chain allows effective coordination with Fe ions through the amino and carboxylate groups.**

  *Examples:*
  - *5-aminopentanoic acid* (High Fe/Hf)
  - *7-aminoheptanoic acid* (High Fe/Hf)
  - *8-aminooctanoic acid* (High Fe/Hf)
  - *(2S)-6-acetamido-2-aminohexanoic acid* (High Fe/Hf)
  - *3-[2-(2-aminoethoxy)ethoxy]propanoic acid* (High Fe/Hf)
  
  *Counter-examples:*
  - *(2S)-2-aminopentanedioic acid* (Low Fe/Hf) – Contains two carboxylic acid groups, which may chelate differently.
  - *(2S)-2-aminobutanedioic acid* (High Fe/Hf) – Shorter chain but still shows high Fe/Hf, indicating chain length is a contributing factor.

- **Rule 2**: **Modifiers containing sulfur functional groups, such as thiol (–SH) or thioether (–S–), along with a carboxylic acid group, predict a high Fe/Hf value. Sulfur's affinity for Fe enhances coordination.**

  *Examples:*
  - *3-sulfanylpropanoic acid* (High Fe/Hf)
  - *4-sulfanylbenzoic acid* (High Fe/Hf)
  - *2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid* (High Fe/Hf)

- **Rule 3**: **Modifiers that are aromatic carboxylic acids with strong electron-withdrawing groups at the para position (e.g., nitro (–NO₂), bromomethyl (–CH₂Br)) predict a high Fe/Hf value. Electron-withdrawing groups increase the acidity and coordinating ability of the carboxylate group toward Fe ions.**

  *Examples:*
  - *4-nitrobenzoic acid* (High Fe/Hf)
  - *4-(bromomethyl)benzoic acid* (High Fe/Hf)
  
  *Counter-examples:*
  - *4-methylbenzoic acid* (Low Fe/Hf) – Methyl group is electron-donating.
  - *4-aminobenzoic acid* (Low Fe/Hf) – Amino group is electron-donating.

- **Rule 4**: **Modifiers containing a pyridine ring connected to a carboxylic acid group, with the nitrogen atom positioned for coordination, predict a high Fe/Hf value due to potential bidentate chelation.**

  *Examples:*
  - *4-pyridin-4-ylbenzoic acid* (High Fe/Hf)
  - *4-pyridin-4-ylbutanoic acid* (High Fe/Hf)
  
  *Counter-example:*
  - *Pyridine-3-carboxylic acid* (Low Fe/Hf) – Position of nitrogen may not favor effective coordination.

- **Rule 5**: **Modifiers that are simple aliphatic carboxylic acids without additional strong coordinating functional groups predict a low Fe/Hf value. Lack of donor atoms reduces interaction with Fe ions.**

  *Examples:*
  - *Octanoic acid* (Low Fe/Hf)
  - *4-oxoheptanedioic acid* (Low Fe/Hf)
  - *2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid* (Low Fe/Hf) – Fluorination reduces coordinating ability.

- **Rule 6**: **Modifiers with multiple hydroxyl groups (–OH) near the carboxylic acid group predict a low Fe/Hf value. Intramolecular hydrogen bonding competes with coordination to Fe ions, diminishing interaction.**

  *Examples:*
  - *(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid* (Low Fe/Hf)
  - *2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]propanoic acid* (Low Fe/Hf)

- **Rule 7**: **Modifiers that are aromatic carboxylic acids with electron-donating groups (e.g., amino (–NH₂), hydroxy (–OH)) at the para position predict a low Fe/Hf value. These groups decrease the acidity and coordinating ability of the carboxylate group.**

  *Examples:*
  - *4-aminobenzoic acid* (Low Fe/Hf)
  - *3-(4-hydroxyphenyl)propanoic acid* (Low Fe/Hf)
  - *5-(4-hydroxyphenyl)pentanoic acid* (Low Fe/Hf)

- **Rule 8**: **Modifiers containing aldehyde groups (–CHO) adjacent to an aromatic ring predict a low Fe/Hf value. Aldehyde groups may undergo side reactions or reduce coordination efficiency.**

  *Examples:*
  - *4-formylbenzoic acid* (Low Fe/Hf)
  - *5-formyl-2-hydroxybenzoic acid* (Low Fe/Hf)

- **Rule 9**: **Modifiers with bulky aromatic or heteroaromatic side chains near coordinating groups may predict a low Fe/Hf value due to steric hindrance affecting effective interaction with Fe ions.**

  *Examples:*
  - *(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid* (Low Fe/Hf)
  - *1H-pyrazole-4-carboxylic acid* (Low Fe/Hf)
  
  *Counter-example:*
  - *(2S)-2-amino-3-phenylpropanoic acid* (High Fe/Hf) – Smaller aromatic group allows better coordination.

- **Rule 10**: **Modifiers containing additional carbonyl groups (e.g., ketones, lactones) adjacent to the carboxylic acid or within aromatic systems predict a high Fe/Hf value. Multiple carbonyl groups enhance chelation with Fe ions.**

  *Examples:*
  - *1,3-dioxo-2-benzofuran-5-carboxylic acid* (High Fe/Hf)
  - *4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid* (High Fe/Hf)

- **Rule 11**: **Modifiers containing ether linkages (–O–) and amino groups within the same molecule predict a high Fe/Hf value. Multiple heteroatoms provide additional coordination sites for Fe ions.**

  *Example:*
  - *3-[2-(2-aminoethoxy)ethoxy]propanoic acid* (High Fe/Hf)

- **Rule 12**: **Modifiers that are dicarboxylic acids (containing two carboxylic acid groups) predict a low Fe/Hf value. They may preferentially chelate with Hf ions, inhibiting Fe incorporation.**

  *Examples:*
  - *(2S)-2-aminopentanedioic acid* (Low Fe/Hf)
  - *4-oxoheptanedioic acid* (Low Fe/Hf)

- **Rule 13**: **Modifiers with hydroxyl groups distant from the carboxylic acid group predict a high Fe/Hf value. The distant hydroxy group can serve as an additional coordination site without intramolecular interference.**

  *Example:*
  - *7-hydroxyheptanoic acid* (High Fe/Hf)

- **Rule 14**: **Modifiers with acetamido (–NHCOCH₃) or secondary amide groups alongside amino groups predict a high Fe/Hf value. Amide functionalities enhance coordination with Fe ions through additional donor atoms.**

  *Examples:*
  - *(2S)-6-acetamido-2-aminohexanoic acid* (High Fe/Hf)
  - *2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid* (High Fe/Hf)

- **Rule 15**: **Modifiers with highly fluorinated carbon chains predict a low Fe/Hf value. The strong electron-withdrawing effect of fluorine atoms reduces electron density on coordinating groups, weakening interactions with Fe ions.**

  *Example:*
  - *2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid* (Low Fe/Hf)

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,1,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,-1,0,0,0,0,0,0,1,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,1,0,0
0,0,0,0,-1,-1,0,0,0,1,0,0,1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1
0,0,0,0,-1,0,0,0,0,0,0,0,1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,1,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.8285714285714286; Test Accuracy: 1.0
    Train Support: 0.07346938775510205; Test Support: 0.0
    Train Confidence: 0.8107142857142857; Test Confidence: 0.5
    Train Lift: 1.6111111111111112; Test Lift: NONE
    Train Leverage: 0.01842565597667639; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    import pandas as pd
    from rdkit import Chem
    from rdkit.Chem import AllChem
    
    # Define unique keys for pattern groups
    carboxylic_acid_key = 'carboxylic_acid_group'
    hydroxyl_group_key = 'hydroxyl_group'
    
    # Define SMARTS patterns for functional groups
    carboxylic_acid_smarts = ['[CX3](=O)[OX2H1]', '[CX3](=O)[O-]']
    carboxylic_acid_patterns = [Chem.MolFromSmarts(pat) for pat in carboxylic_acid_smarts]
    
    primary_amino_smarts = '[NX3;H2;!$([N][!C]);!$([N][a])]'  # Non-aromatic primary amine
    primary_amino_pattern = Chem.MolFromSmarts(primary_amino_smarts)
    
    thiol_smarts = '[SX2H]'
    thiol_pattern = Chem.MolFromSmarts(thiol_smarts)
    thioether_smarts = '[#6][SX2][#6]'
    thioether_pattern = Chem.MolFromSmarts(thioether_smarts)
    
    ether_linkage_smarts = '[#6][OX2][#6]'
    ether_linkage_pattern = Chem.MolFromSmarts(ether_linkage_smarts)
    
    pyridine_ring_smarts = 'n1ccccc1'
    pyridine_ring_pattern = Chem.MolFromSmarts(pyridine_ring_smarts)
    
    # Electron-withdrawing groups (EWGs) at para position
    ewg_on_aromatic_smarts = [
        'c1cc([F,Cl,Br,I])ccc1C(=O)[OH]',  # Halogen at para position
        'c1cc([N+](=O)[O-])ccc1C(=O)[OH]'  # Nitro group at para position
    ]
    ewg_on_aromatic_patterns = [Chem.MolFromSmarts(pat) for pat in ewg_on_aromatic_smarts]
    
    # Electron-donating groups (EDGs) at para position
    edg_on_aromatic_smarts = [
        'c1cc([OX2H])ccc1C(=O)[OH]',  # Hydroxy group at para position
        'c1cc([NH2])ccc1C(=O)[OH]'  # Amino group at para position
    ]
    edg_on_aromatic_patterns = [Chem.MolFromSmarts(pat) for pat in edg_on_aromatic_smarts]
    
    hydroxyl_group_smarts = '[OX2H]'
    hydroxyl_group_pattern = Chem.MolFromSmarts(hydroxyl_group_smarts)
    
    aldehyde_adjacent_to_aromatic_smarts = '[c][CH]=O'
    aldehyde_adjacent_to_aromatic_pattern = Chem.MolFromSmarts(aldehyde_adjacent_to_aromatic_smarts)
    
    ketone_group_smarts = '[#6][CX3](=O)[#6]'
    ketone_group_pattern = Chem.MolFromSmarts(ketone_group_smarts)
    
    acetamido_group_smarts = '[NX3][CX3](=O)[#6]'
    acetamido_group_pattern = Chem.MolFromSmarts(acetamido_group_smarts)
    
    fluorinated_chain_smarts = '[CX4]([F])([F])[F]'
    fluorinated_chain_pattern = Chem.MolFromSmarts(fluorinated_chain_smarts)
    
    # Exclude patterns for Rule 5
    exclude_patterns_rule5 = [
        Chem.MolFromSmarts('[NX3;!$([N][a])]'),  # Exclude aliphatic amines
        Chem.MolFromSmarts('[SX2H]'),  # Exclude thiols
        Chem.MolFromSmarts('[#6][SX2][#6]'),  # Exclude thioethers
        Chem.MolFromSmarts('[OX2;!H1][#6]'),  # Exclude ethers
        Chem.MolFromSmarts('[F,Cl,Br,I]'),  # Exclude halogens
        Chem.MolFromSmarts('[a]')  # Exclude aromatic atoms
    ]
    
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are aliphatic amino acids with a linear carbon chain of four or more carbons, containing a primary amino group and a single carboxylic acid group.',
            'patterns': [
                [primary_amino_pattern],
                carboxylic_acid_patterns
            ],
            'count_threshold': {carboxylic_acid_key: 1},
            'extra_checks': 'chain_length',
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers containing sulfur functional groups, such as thiol (–SH) or thioether (–S–), along with a carboxylic acid group.',
            'patterns': [
                [thiol_pattern, thioether_pattern],
                carboxylic_acid_patterns
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers that are aromatic carboxylic acids with strong electron-withdrawing groups at the para position.',
            'patterns': [
                ewg_on_aromatic_patterns
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers containing a pyridine ring connected to a carboxylic acid group.',
            'patterns': [
                [pyridine_ring_pattern],
                carboxylic_acid_patterns
            ],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers that are simple aliphatic carboxylic acids without additional strong coordinating functional groups predict a low Fe/Hf value.',
            'patterns': [
                carboxylic_acid_patterns
            ],
            'exclude_patterns': [exclude_patterns_rule5],
            'prediction': -1
        },
        {
            'number': 6,
            'description': 'Modifiers with multiple hydroxyl groups (–OH) near the carboxylic acid group predict a low Fe/Hf value.',
            'patterns': [
                carboxylic_acid_patterns,
                [hydroxyl_group_pattern]
            ],
            'extra_checks': 'proximal_hydroxyl',
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Modifiers that are aromatic carboxylic acids with electron-donating groups (e.g., amino (–NH₂), hydroxy (–OH)) at the para position.',
            'patterns': [
                edg_on_aromatic_patterns
            ],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Modifiers containing aldehyde groups (–CHO) adjacent to an aromatic ring.',
            'patterns': [
                [aldehyde_adjacent_to_aromatic_pattern]
            ],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers with bulky aromatic or heteroaromatic side chains near coordinating groups.',
            'patterns': [
                [Chem.MolFromSmarts('[a][CX3](=O)[OX2H1,OX1-]')],
                [Chem.MolFromSmarts('[a][NX3;H2]')]
            ],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers containing additional carbonyl groups (e.g., ketones, lactones) adjacent to the carboxylic acid.',
            'patterns': [
                [ketone_group_pattern],
                carboxylic_acid_patterns
            ],
            'prediction': 1
        },
        {
            'number': 11,
            'description': 'Modifiers containing ether linkages (–O–) and amino groups within the same molecule.',
            'patterns': [
                [ether_linkage_pattern],
                [primary_amino_pattern, Chem.MolFromSmarts('[NX3;H1;!$([N][a])]')]
            ],
            'prediction': 1
        },
        {
            'number': 12,
            'description': 'Modifiers that are dicarboxylic acids (containing two carboxylic acid groups).',
            'patterns': [
                carboxylic_acid_patterns
            ],
            'count_threshold': {carboxylic_acid_key: 2},
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Modifiers with hydroxyl groups distant from the carboxylic acid group.',
            'patterns': [
                carboxylic_acid_patterns,
                [hydroxyl_group_pattern]
            ],
            'extra_checks': 'distant_hydroxyl',
            'prediction': 1
        },
        {
            'number': 14,
            'description': 'Modifiers with acetamido (–NHCOCH₃) or secondary amide groups alongside amino groups.',
            'patterns': [
                [acetamido_group_pattern],
                [primary_amino_pattern]
            ],
            'prediction': 1
        },
        {
            'number': 15,
            'description': 'Modifiers with highly fluorinated carbon chains.',
            'patterns': [
                [fluorinated_chain_pattern]
            ],
            'prediction': -1
        }
    ]
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    exclude_match = False
                    for group in rule['exclude_patterns']:
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                exclude_match = True
                                break
                        if exclude_match:
                            break
                    if exclude_match:
                        row.append(0)
                        continue
                # Check required patterns
                count_dict = {}
                for idx, compiled_group in enumerate(rule['patterns']):
                    group_match = False
                    total_matches = 0
                    for pat in compiled_group:
                        matches = mol.GetSubstructMatches(pat)
                        total_matches += len(matches)
                        if matches:
                            group_match = True
                    # Assign counts for counting thresholds
                    if rule.get('count_threshold'):
                        for key in rule['count_threshold'].keys():
                            if key == carboxylic_acid_key and idx == 1:
                                count_dict[key] = total_matches
                            elif key == hydroxyl_group_key and idx == 1:
                                count_dict[key] = total_matches
                    if not group_match:
                        match = False
                        break
                # Check count thresholds
                if match and rule.get('count_threshold'):
                    for key, threshold in rule['count_threshold'].items():
                        if count_dict.get(key, 0) != threshold:
                            match = False
                            break
                if not match:
                    row.append(0)
                    continue
                # Extra checks
                if 'extra_checks' in rule:
                    if rule['extra_checks'] == 'chain_length':
                        # Check for aliphatic chain of 4 or more carbons between amino and acid groups
                        amino_atoms = [match[0] for match in mol.GetSubstructMatches(primary_amino_pattern)]
                        acid_atoms = []
                        for pat in carboxylic_acid_patterns:
                            acid_atoms.extend([match[0] for match in mol.GetSubstructMatches(pat)])
                        found_chain = False
                        for a_atom in amino_atoms:
                            for c_atom in acid_atoms:
                                paths = Chem.GetShortestPath(mol, a_atom, c_atom)
                                # Check if path is linear (no rings) and all carbons
                                path_atoms = [mol.GetAtomWithIdx(idx) for idx in paths]
                                if all(atom.GetAtomicNum() == 6 and not atom.IsInRing() for atom in path_atoms[1:-1]):
                                    carbon_count = len(path_atoms) - 2  # Exclude start and end atoms
                                    if carbon_count >= 4:
                                        found_chain = True
                                        break
                            if found_chain:
                                break
                        if not found_chain:
                            row.append(0)
                            continue
                    elif rule['extra_checks'] == 'proximal_hydroxyl':
                        # Identify hydroxyl groups near carboxylic acid group (within 3 bonds)
                        hydroxyl_atoms = [match[0] for match in mol.GetSubstructMatches(hydroxyl_group_pattern)]
                        acid_atoms = []
                        for pat in carboxylic_acid_patterns:
                            acid_atoms.extend([match[0] for match in mol.GetSubstructMatches(pat)])
                        proximal_hydroxyls = set()
                        for h_idx in hydroxyl_atoms:
                            for a_idx in acid_atoms:
                                distance = Chem.GetShortestPath(mol, h_idx, a_idx)
                                if len(distance) - 1 <= 3:  # Within 3 bonds
                                    proximal_hydroxyls.add(h_idx)
                        if len(proximal_hydroxyls) >= 2:
                            pass  # Satisfies the condition
                        else:
                            row.append(0)
                            continue
                    elif rule['extra_checks'] == 'distant_hydroxyl':
                        # Ensure hydroxyl groups are distant from carboxylic acid (path length > 4)
                        hydroxyl_atoms = [match[0] for match in mol.GetSubstructMatches(hydroxyl_group_pattern)]
                        acid_atoms = []
                        for pat in carboxylic_acid_patterns:
                            acid_atoms.extend([match[0] for match in mol.GetSubstructMatches(pat)])
                        distant = False
                        for h_idx in hydroxyl_atoms:
                            for a_idx in acid_atoms:
                                distance = Chem.GetShortestPath(mol, h_idx, a_idx)
                                if len(distance) - 1 > 4:
                                    distant = True
                                    break
                            if distant:
                                break
                        if not distant:
                            row.append(0)
                            continue
                # If passed all checks
                row.append(rule['prediction'])
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    
    # Create DataFrame
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df
--------------------------------------------------
    Target Name: Fe/Hf
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: **Modifiers that are aliphatic amino acids or amino acid analogues with a terminal amino group (–NH₂) and a terminal carboxylic acid group (–COOH), separated by an aliphatic chain of at least three carbon atoms, predict a high Fe/Hf value. The flexible chain allows effective chelation with Fe ions through both functional groups.**

  *Examples:*
  - *5-aminopentanoic acid* (High Fe/Hf)
  - *7-aminoheptanoic acid* (High Fe/Hf)
  - *8-aminooctanoic acid* (High Fe/Hf)
  - *(2S)-6-acetamido-2-aminohexanoic acid* (High Fe/Hf)

  *Counter-examples:*
  - *(2S)-2-aminopentanedioic acid* (Low Fe/Hf) – Contains two carboxylic acid groups, leading to different chelation behavior.

- **Rule 2**: **Modifiers containing both amino groups and sulfur-containing functional groups (e.g., thiol (–SH) or thioether (–S–)), along with a carboxylic acid, predict a high Fe/Hf value. Multiple strong coordination sites enhance binding affinity with Fe ions.**

  *Examples:*
  - *2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid* (High Fe/Hf)
  - *3-sulfanylpropanoic acid* (High Fe/Hf)

- **Rule 3**: **Modifiers that are aromatic carboxylic acids with strong electron-withdrawing groups (EWGs) at the para position, such as nitro (–NO₂) or halomethyl (–CH₂Hal), predict a high Fe/Hf value. EWGs increase the acidity of the carboxylic acid, enhancing its ability to coordinate with Fe ions.**

  *Examples:*
  - *4-nitrobenzoic acid* (High Fe/Hf)
  - *4-(bromomethyl)benzoic acid* (High Fe/Hf)

  *Counter-examples:*
  - *4-methylbenzoic acid* (Low Fe/Hf) – Methyl group is electron-donating.
  - *4-aminobenzoic acid* (Low Fe/Hf) – Amino group is electron-donating.

- **Rule 4**: **Modifiers containing pyridine rings where the nitrogen atom is positioned to coordinate effectively (e.g., in 4-pyridyl carboxylic acids) predict a high Fe/Hf value due to potential bidentate chelation through the nitrogen and carboxylate oxygen atoms.**

  *Examples:*
  - *4-pyridin-4-ylbenzoic acid* (High Fe/Hf)
  - *4-pyridin-4-ylbutanoic acid* (High Fe/Hf)

  *Counter-example:*
  - *Pyridine-3-carboxylic acid* (Low Fe/Hf) – Nitrogen position is less favorable for coordination.

- **Rule 5**: **Modifiers that are aromatic carboxylic acids with electron-donating groups (EDGs) at the para position, such as amino (–NH₂), hydroxy (–OH), or methoxy (–OCH₃), predict a low Fe/Hf value. EDGs decrease the acidity and coordinating ability of the carboxylate group toward Fe ions.**

  *Examples:*
  - *4-aminobenzoic acid* (Low Fe/Hf)
  - *3-(4-hydroxyphenyl)propanoic acid* (Low Fe/Hf)
  - *5-(4-hydroxyphenyl)pentanoic acid* (Low Fe/Hf)
  - *2-[(4-hydroxybenzoyl)amino]acetic acid* (Low Fe/Hf)

- **Rule 6**: **Modifiers with multiple hydroxyl groups (–OH) adjacent to the carboxylic acid group predict a low Fe/Hf value. Intramolecular hydrogen bonding competes with Fe coordination sites, diminishing their ability to bind Fe ions effectively.**

  *Examples:*
  - *(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid* (Low Fe/Hf)
  - *2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]propanoic acid* (Low Fe/Hf)

- **Rule 7**: **Modifiers containing sulfur functional groups, such as thiol (–SH) or sulfide (–S–), along with a carboxylic acid group, predict a high Fe/Hf value. Sulfur’s strong affinity for Fe enhances coordination stability through Fe–S interactions.**

  *Examples:*
  - *3-sulfanylpropanoic acid* (High Fe/Hf)
  - *4-sulfanylbenzoic acid* (High Fe/Hf)

- **Rule 8**: **Modifiers that are simple aliphatic carboxylic acids without additional strong coordinating functional groups predict a low Fe/Hf value. The lack of donor atoms or groups reduces their interaction and coordination capacity with Fe ions.**

  *Examples:*
  - *Octanoic acid* (Low Fe/Hf)
  - *4-oxoheptanedioic acid* (Low Fe/Hf)
  - *2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid* (Low Fe/Hf)

- **Rule 9**: **Modifiers with bulky side chains or rigid structures near the coordinating groups predict a low Fe/Hf value due to steric hindrance that affects effective interaction with Fe ions. Sterically encumbered ligands are less able to coordinate tightly.**

  *Examples:*
  - *(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid* (Low Fe/Hf)
  - *1H-pyrazole-4-carboxylic acid* (Low Fe/Hf)

  *Counter-example:*
  - *(2S)-2-amino-3-phenylpropanoic acid* (High Fe/Hf) – Smaller aromatic group allows better coordination.

- **Rule 10**: **Modifiers containing additional carbonyl groups (e.g., ketones, lactones) adjacent to the carboxylic acid or within aromatic systems can enhance coordination with Fe ions, predicting a high Fe/Hf value. Multiple carbonyl groups increase the chelation potential via coordination through oxygen atoms.**

  *Examples:*
  - *1,3-dioxo-2-benzofuran-5-carboxylic acid* (High Fe/Hf)
  - *4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid* (High Fe/Hf)

- **Rule 11**: **Modifiers containing ether linkages (–O–) and amino groups within the same molecule predict a high Fe/Hf value. Multiple heteroatoms provide additional coordination sites, enhancing binding affinity with Fe ions.**

  *Example:*
  - *3-[2-(2-aminoethoxy)ethoxy]propanoic acid* (High Fe/Hf)

- **Rule 12**: **Modifiers with aldehyde groups (–CHO) adjacent to an aromatic ring predict a low Fe/Hf value. Aldehyde groups may interfere with coordination or undergo side reactions, reducing Fe incorporation efficiency.**

  *Examples:*
  - *4-formylbenzoic acid* (Low Fe/Hf)
  - *5-formyl-2-hydroxybenzoic acid* (Low Fe/Hf)

- **Rule 13**: **Modifiers with highly fluorinated alkyl chains predict a low Fe/Hf value. The strong electron-withdrawing effect of fluorine atoms reduces electron density on coordinating groups, weakening interactions with Fe ions and diminishing coordination strength.**

  *Example:*
  - *2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid* (Low Fe/Hf)

**End of Rules**

---

These rules have been generated by thoroughly analyzing the dataset and considering the underlying physico-chemical properties that influence Fe coordination. By focusing on combinations of functional groups and their effects on coordination ability, the rules aim to provide clear predictions for whether a modifier will result in a high or low Fe/Hf value. The rules cover a broad range of the dataset, balancing simplicity and complexity to effectively guide future modifier selection.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13
0,0,0,0,0,-1,0,0,0,1,0,0,0
1,0,0,0,0,-1,0,0,0,1,0,0,0
0,0,0,0,0,-1,0,0,0,1,0,0,0
0,0,0,0,0,-1,0,0,0,1,0,0,0
1,0,0,0,0,-1,0,0,0,1,0,0,0
0,0,0,0,-1,-1,0,0,0,1,0,0,0
0,0,0,0,0,-1,0,0,0,1,0,0,0
0,0,0,0,0,-1,0,0,0,1,0,0,0
0,0,0,0,-1,-1,0,0,0,1,0,0,0
0,0,0,1,0,-1,0,0,0,1,0,0,0
0,0,0,0,0,-1,0,0,0,1,0,0,0
0,0,0,0,0,-1,1,0,0,1,0,0,0
0,0,0,1,0,-1,0,0,0,1,0,0,0
0,0,0,0,0,-1,0,0,0,1,0,0,0
0,0,0,0,0,-1,0,0,0,1,0,0,-1
0,0,0,0,0,-1,0,0,0,1,0,0,0
0,0,0,0,0,-1,0,0,0,1,0,0,0
0,0,0,0,0,-1,0,0,0,1,0,0,0
0,0,0,0,0,-1,1,0,0,1,0,0,0
0,0,0,0,-1,-1,0,0,0,1,0,-1,0
0,0,0,0,0,-1,0,0,0,1,0,-1,0
0,0,0,0,0,-1,0,0,0,1,0,0,0
0,0,0,1,0,-1,0,0,0,1,0,0,0
0,0,0,0,0,-1,0,0,0,1,0,0,0
0,1,0,0,0,-1,1,0,0,1,0,0,0
0,0,0,1,0,-1,0,0,0,1,0,0,0
0,0,0,0,0,-1,0,0,0,1,0,0,0
0,0,0,0,-1,-1,0,0,0,1,0,0,0
0,0,0,0,0,-1,0,0,0,1,0,0,0
0,0,0,0,0,-1,0,0,0,1,0,0,-1
0,0,0,0,0,-1,0,0,0,1,0,0,0
0,0,0,0,-1,-1,0,0,0,1,0,0,0
1,0,0,0,0,-1,0,0,0,1,0,0,0
0,0,0,0,0,-1,0,0,0,1,1,0,0
0,0,0,0,0,-1,0,0,0,1,0,0,0
1,0,0,0,0,-1,0,0,0,1,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.7142857142857143; Test Accuracy: 1.0
    Train Support: 0.08571428571428572; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 1.9730392156862746; Test Lift: NONE
    Train Leverage: 0.04224489795918367; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Import necessary modules
    import pandas as pd
    from rdkit import Chem
    from rdkit.Chem import AllChem

    # Define function for Rule 1
    def rule1(mol):
        # Rule 1: Modifiers that are aliphatic amino acids or amino acid analogues with a terminal amino group (–NH₂) and a terminal carboxylic acid group (–COOH), separated by an aliphatic chain of at least three carbon atoms.
        try:
            # Find all primary amine nitrogens
            amine_atoms = [atom.GetIdx() for atom in mol.GetAtoms() if atom.GetAtomicNum() == 7 and atom.GetDegree() == 1 and atom.GetTotalNumHs() == 2]
            # Find all carboxylic acid carbons
            acid_patt = Chem.MolFromSmarts('[CX3](=O)[OX2H1]')
            acid_matches = mol.GetSubstructMatches(acid_patt)
            acid_atoms = [match[0] for match in acid_matches]
            if not amine_atoms or not acid_atoms:
                return 0
            # For each pair, find shortest path
            for n_idx in amine_atoms:
                for c_idx in acid_atoms:
                    path = Chem.rdmolops.GetShortestPath(mol, n_idx, c_idx)
                    # Count number of carbons in the path (excluding the amine N and acid C)
                    num_carbons = 0
                    for idx in path[1:-1]:  # Exclude N and C
                        atom = mol.GetAtomWithIdx(idx)
                        if atom.GetAtomicNum() == 6 and not atom.GetIsAromatic():
                            num_carbons += 1
                        else:
                            num_carbons = 0 # Reset if non-carbon or aromatic atom found
                            break
                    if num_carbons >= 3:
                        return 1  # Rule matches
            return 0  # No matching paths found
        except Exception as e:
            # print(f'Error in rule1: {e}')
            return 0

    # Define SMARTS patterns for functional groups
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    primary_amine = '[NX3;H2]'
    secondary_amine = '[NX3;H1][CX4]'
    thiol = '[SX2H]'
    thioether = '[#6][SX2][#6]'
    ether_linkage = '[#6][OX2][#6]'
    pyridine_ring = 'n1ccccc1'
    nitro_group = '[NX3](=O)=O'
    halogen = '[F,Cl,Br,I]'
    hydroxyl = '[OX2H]'
    methoxy = '[OX2][CH3]'
    ketone = '[CX3](=O)[#6]'
    aldehyde = '[CX3H1](=O)'
    fluorinated_chain = '[CX4]([F])[F]'
    indole = 'c1ccc2c(c1)[nH]c3c2cccc3'
    # Define rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are aliphatic amino acids with a terminal amino group and a terminal carboxylic acid group, separated by an aliphatic chain of at least three carbon atoms.',
            'function': 'rule1',
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers containing both amino groups and sulfur-containing functional groups (e.g., thiol or thioether), along with a carboxylic acid.',
            'patterns': [
                [carboxylic_acid],
                [thiol, thioether],
                [primary_amine, secondary_amine]
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers that are aromatic carboxylic acids with strong electron-withdrawing groups at the para position.',
            'patterns': [
                [carboxylic_acid],
                [nitro_group, halogen],
                ['c1cc([F,Cl,Br,I,NX3](=O)=O)ccc1']
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers containing pyridine rings where the nitrogen atom is positioned to coordinate effectively.',
            'patterns': [
                [carboxylic_acid],
                [pyridine_ring]
            ],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers that are aromatic carboxylic acids with electron-donating groups at the para position, such as amino, hydroxy, or methoxy.',
            'patterns': [
                [carboxylic_acid],
                [hydroxyl, methoxy, primary_amine],
                ['c1cc([OH,NH2,OCH3])ccc1']
            ],
            'prediction': -1
        },
        {
            'number': 6,
            'description': 'Modifiers with multiple hydroxyl groups (–OH) adjacent to the carboxylic acid group.',
            'patterns': [
                [carboxylic_acid],
                [hydroxyl],
            ],
            'count_threshold': {hydroxyl: 2},  # At least 2 hydroxyl groups
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Modifiers containing sulfur functional groups, such as thiol or thioether, along with a carboxylic acid group.',
            'patterns': [
                [carboxylic_acid],
                [thiol, thioether],
            ],
            'prediction': 1
        },
        {
            'number': 8,
            'description': 'Modifiers that are simple aliphatic carboxylic acids without additional strong coordinating functional groups.',
            'patterns': [
                [carboxylic_acid]
            ],
            'exclude_patterns': [
                [thiol, thioether, primary_amine, secondary_amine, hydroxyl, methoxy, halogen, nitro_group]
            ],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers with bulky side chains or rigid structures near the coordinating groups.',
            'patterns': [
                [indole]
            ],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers containing additional carbonyl groups adjacent to the carboxylic acid or within aromatic systems.',
            'patterns': [
                [carboxylic_acid],
                [ketone]
            ],
            'prediction': 1
        },
        {
            'number': 11,
            'description': 'Modifiers containing ether linkages and amino groups within the same molecule.',
            'patterns': [
                [carboxylic_acid],
                [ether_linkage],
                [primary_amine, secondary_amine]
            ],
            'prediction': 1
        },
        {
            'number': 12,
            'description': 'Modifiers with aldehyde groups adjacent to an aromatic ring.',
            'patterns': [
                [carboxylic_acid],
                [aldehyde],
                ['[c][CX3H1](=O)']
            ],
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Modifiers with highly fluorinated alkyl chains.',
            'patterns': [
                [carboxylic_acid],
                [fluorinated_chain]
            ],
            'prediction': -1
        }
    ]

    # Create a dictionary of rule functions
    rule_functions = {
        'rule1': rule1
    }

    # Compile SMARTS patterns
    for rule in rules:
        if 'patterns' in rule:
            compiled_patterns = []
            for group in rule['patterns']:
                compiled_group = [Chem.MolFromSmarts(p) for p in group]
                compiled_patterns.append(compiled_group)
            rule['compiled_patterns'] = compiled_patterns
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for group in rule['exclude_patterns']:
                compiled_group = [Chem.MolFromSmarts(p) for p in group]
                compiled_excludes.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_excludes

    # Initialize results list
    results = []

    # Total number of rules
    number_of_rules = len(rules)

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*number_of_rules)
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # If the rule uses a function
                if 'function' in rule:
                    func = rule_functions.get(rule['function'])
                    if func:
                        res = func(mol)
                        row.append(res)
                    else:
                        row.append(0)
                    continue
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        matches = mol.GetSubstructMatches(pat)
                        if matches:
                            # If a count threshold is specified for this pattern
                            if 'count_threshold' in rule and pat in rule['count_threshold']:
                                threshold = rule['count_threshold'][pat]
                                if len(matches) >= threshold:
                                    group_match = True
                                    break
                            else:
                                group_match = True
                                break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0 and optionally log the error
                # print(f"Error processing rule {rule['number']} for SMILES {smi}: {e}")
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: Fe/Hf
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: **Modifiers that are aromatic carboxylic acids with strong electron-withdrawing groups (EWGs) at the para position, such as nitro (–NO₂) or halomethyl (–CH₂Hal), predict a high Fe/Hf value. EWGs increase the acidity and coordinating ability of the carboxylate group toward Fe ions.**

  *Examples:*
  - *4-nitrobenzoic acid* (High Fe/Hf)
  - *4-(bromomethyl)benzoic acid* (High Fe/Hf)

  *Counter-examples:*
  - *4-methylbenzoic acid* (Low Fe/Hf) – Methyl group is electron-donating.
  - *4-aminobenzoic acid* (Low Fe/Hf) – Amino group is electron-donating.

- **Rule 2**: **Modifiers that are aromatic carboxylic acids with electron-donating groups (EDGs) at the para position, such as amino (–NH₂), hydroxy (–OH), or methyl (–CH₃), predict a low Fe/Hf value. EDGs decrease the acidity and coordinating ability of the carboxylate group toward Fe ions.**

  *Examples:*
  - *4-aminobenzoic acid* (Low Fe/Hf)
  - *4-methylbenzoic acid* (Low Fe/Hf)
  - *3-(4-hydroxyphenyl)propanoic acid* (Low Fe/Hf)
  - *5-(4-hydroxyphenyl)pentanoic acid* (Low Fe/Hf)

- **Rule 3**: **Modifiers containing sulfur functional groups, such as thiol (–SH) or thioether (–S–), along with a carboxylic acid group, predict a high Fe/Hf value. Sulfur’s strong affinity for Fe enhances coordination stability through Fe–S interactions.**

  *Examples:*
  - *3-sulfanylpropanoic acid* (High Fe/Hf)
  - *4-sulfanylbenzoic acid* (High Fe/Hf)
  - *2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid* (High Fe/Hf)

- **Rule 4**: **Modifiers containing pyridine rings where the nitrogen atom is positioned to coordinate effectively (e.g., in 4-pyridyl carboxylic acids) predict a high Fe/Hf value due to potential bidentate chelation through the nitrogen and carboxylate oxygen atoms.**

  *Examples:*
  - *4-pyridin-4-ylbenzoic acid* (High Fe/Hf)
  - *4-pyridin-4-ylbutanoic acid* (High Fe/Hf)

  *Counter-example:*
  - *Pyridine-3-carboxylic acid* (Low Fe/Hf) – Nitrogen position is less favorable for coordination.

- **Rule 5**: **Modifiers that are aliphatic amino acids with a terminal amino group (–NH₂) and a terminal carboxylic acid group (–COOH), predict a high Fe/Hf value. The presence of both functional groups allows effective chelation with Fe ions.**

  *Examples:*
  - *5-aminopentanoic acid* (High Fe/Hf)
  - *7-aminoheptanoic acid* (High Fe/Hf)
  - *8-aminooctanoic acid* (High Fe/Hf)
  - *(2S)-6-acetamido-2-aminohexanoic acid* (High Fe/Hf)

  *Counter-example:*
  - *(2S)-2-aminopentanedioic acid* (Low Fe/Hf) – Additional carboxyl group may interfere with coordination.

- **Rule 6**: **Modifiers that are simple aliphatic carboxylic acids without additional strong coordinating functional groups predict a low Fe/Hf value. The lack of donor atoms or groups reduces their interaction and coordination capacity with Fe ions.**

  *Examples:*
  - *Octanoic acid* (Low Fe/Hf)
  - *4-oxoheptanedioic acid* (Low Fe/Hf)
  - *2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid* (Low Fe/Hf)

- **Rule 7**: **Modifiers with multiple hydroxyl groups (–OH) adjacent to the carboxylic acid group predict a low Fe/Hf value. Intramolecular hydrogen bonding competes with Fe coordination sites, diminishing their ability to bind Fe ions effectively.**

  *Examples:*
  - *(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid* (Low Fe/Hf)
  - *2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]propanoic acid* (Low Fe/Hf)

- **Rule 8**: **Modifiers with bulky side chains or rigid structures near the coordinating groups predict a low Fe/Hf value due to steric hindrance that affects effective interaction with Fe ions. Sterically encumbered ligands are less able to coordinate tightly.**

  *Examples:*
  - *(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid* (Low Fe/Hf)
  - *1H-pyrazole-4-carboxylic acid* (Low Fe/Hf)

  *Counter-example:*
  - *(2S)-2-amino-3-phenylpropanoic acid* (High Fe/Hf) – Smaller aromatic group allows better coordination.

- **Rule 9**: **Modifiers with aldehyde groups (–CHO) adjacent to an aromatic ring predict a low Fe/Hf value. Aldehyde groups may interfere with coordination or undergo side reactions, reducing Fe incorporation efficiency.**

  *Examples:*
  - *4-formylbenzoic acid* (Low Fe/Hf)
  - *5-formyl-2-hydroxybenzoic acid* (Low Fe/Hf)

- **Rule 10**: **Modifiers containing ether linkages (–O–) and amino groups within the same molecule predict a high Fe/Hf value. Multiple heteroatoms provide additional coordination sites, enhancing binding affinity with Fe ions.**

  *Example:*
  - *3-[2-(2-aminoethoxy)ethoxy]propanoic acid* (High Fe/Hf)

- **Rule 11**: **Modifiers with additional carbonyl groups (e.g., ketones, lactones) adjacent to the carboxylic acid or within aromatic systems can enhance coordination with Fe ions, predicting a high Fe/Hf value. Multiple carbonyl groups increase the chelation potential via coordination through oxygen atoms.**

  *Examples:*
  - *1,3-dioxo-2-benzofuran-5-carboxylic acid* (High Fe/Hf)
  - *4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid* (High Fe/Hf)

- **Rule 12**: **Modifiers with highly fluorinated alkyl chains predict a low Fe/Hf value. The strong electron-withdrawing effect of fluorine atoms reduces electron density on coordinating groups, weakening interactions with Fe ions and diminishing coordination strength.**

  *Example:*
  - *2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid* (Low Fe/Hf)

**End of Rules**

---

These rules have been carefully revised to better align with the dataset and underlying physico-chemical principles. By focusing on the combination of functional groups and their effects on Fe coordination, the rules aim to provide clear and accurate predictions for whether a modifier will result in a high or low Fe/Hf value. The rules cover a broad range of the dataset, balancing simplicity and complexity to effectively guide future modifier selection.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12
0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,-1
0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,-1
0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.7428571428571429; Test Accuracy: 0.0
    Train Support: 0.08; Test Support: 0.0
    Train Confidence: 0.9428571428571428; Test Confidence: 0.4
    Train Lift: 1.8562091503267975; Test Lift: NONE
    Train Leverage: 0.03346938775510204; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns with corrections and suggestions
    
    # Carboxylic acid group (-COOH) and carboxylate anion (-COO-)
    carboxylic_acid = ['[CX3](=O)[OX2H1]', '[CX3](=O)[O-]']
    
    # Aromatic carboxylic acid (benzoic acid derivatives)
    # Corrected SMARTS pattern to represent a full aromatic ring with a carboxylic acid attached
    aromatic_carboxylic_acid = 'c1ccccc1C(=O)[O;H,-]'
    
    # Electron-withdrawing groups (EWGs) at para position on aromatic ring
    # Include positional information to specify para substitution relative to carboxylic acid
    # EWG patterns: nitro group and halomethyl group
    nitro_group = '[N+](=O)[O-]'
    halomethyl_group = '[CH2][F,Cl,Br,I]'
    
    # Create patterns for aromatic carboxylic acid with EWG at para position
    aromatic_EWG_para_patterns = [
        'c1cc(' + nitro_group + ')cc(c1)C(=O)[O;H,-]',   # Nitro group at para position
        'c1cc(' + halomethyl_group + ')cc(c1)C(=O)[O;H,-]'  # Halomethyl group at para position
    ]
    
    # Electron-donating groups (EDGs) at para position on aromatic ring
    # EDG patterns: amino group, hydroxy group, methyl group
    amino_group = '[NH2]'
    hydroxy_group = '[OH]'
    methyl_group = '[CH3]'
    
    # Create patterns for aromatic carboxylic acid with EDG at para position
    aromatic_EDG_para_patterns = [
        'c1cc(' + amino_group + ')cc(c1)C(=O)[O;H,-]',   # Amino group at para position
        'c1cc(' + hydroxy_group + ')cc(c1)C(=O)[O;H,-]', # Hydroxy group at para position
        'c1cc(' + methyl_group + ')cc(c1)C(=O)[O;H,-]'   # Methyl group at para position
    ]
    
    # Sulfur-containing groups - thiol (-SH) and thioether (-S-)
    thiol = '[SX2H]'
    thioether = '[#16X2]-[#6]'
    sulfur_groups = [thiol, thioether]
    
    # Pyridine ring where nitrogen is positioned effectively for coordination
    # Refined pattern to ensure nitrogen is at correct position
    pyridine_ring = 'c1ccncc1'  # Pyridine ring with nitrogen at position 4
    
    # Aliphatic amino acids with terminal amino and carboxylic acid groups
    aliphatic_amino_acid = '[NX3H2][CX4][CX2H2]*[CX3](=O)[O;H,-]'  # Generalized pattern
    
    # Simple aliphatic carboxylic acid without strong coordinating groups
    simple_aliphatic_carboxylic_acid = '[#6;A]-C(=O)[O;H,-]'  # Aliphatic carbon connected to carboxylic acid
    
    # Exclude patterns for Rule 6
    exclude_patterns_R6 = [
        '[#7]',  # Exclude molecules containing nitrogen (amines)
        '[#16]',  # Exclude molecules containing sulfur
        '[#8][#6][#8]',  # Exclude ethers
        '[F,Cl,Br,I]',  # Exclude halogens
    ]
    
    # Modifiers with multiple hydroxyl groups adjacent to the carboxylic acid group (polyhydroxy compounds)
    multiple_hydroxyls_adjacent = '[CX3](=O)[O;H,-][CX4][OX2H][CX4][OX2H]'  # Carboxylic acid connected to two adjacent carbons bearing hydroxyls
    
    # Bulky side chains or rigid structures near coordinating groups (e.g., indole, pyrazole)
    indole_group = 'c1cc2ccccc2[nH]1'  # Indole group
    pyrazole_group = 'c1cn[nH]c1'  # Pyrazole group
    
    # Aldehyde group adjacent to aromatic ring
    aldehyde_aromatic = 'c1ccc([CX3H]=O)cc1'  # Aromatic ring with aldehyde substituent
    
    # Ether linkages and amino groups within the same molecule
    ether_linkage_amino = '[OX2][CX2][OX2][CX2][NX3]'  # Simplified pattern for ether and amino groups
    
    # Additional carbonyl groups adjacent to carboxylic acid or within aromatic systems
    additional_carbonyls = '[CX3](=O)[CX3](=O)'  # Adjacent carbonyl groups
    
    # Highly fluorinated alkyl chains
    highly_fluorinated_alkyl_chain = '[CX4]([F,Cl,Br,I])([F,Cl,Br,I])[F,Cl,Br,I]'  # Carbon with three halogens attached
    
    # Define rules
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are aromatic carboxylic acids with strong EWGs at the para position, such as nitro (–NO₂) or halomethyl (–CH₂Hal), predict a high Fe/Hf value.',
            'patterns': [aromatic_EWG_para_patterns],  # List of patterns
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers that are aromatic carboxylic acids with EDGs at the para position, such as amino (–NH₂), hydroxy (–OH), or methyl (–CH₃), predict a low Fe/Hf value.',
            'patterns': [aromatic_EDG_para_patterns],  # List of patterns
            'prediction': -1
        },
        {
            'number': 3,
            'description': 'Modifiers containing sulfur functional groups, such as thiol (–SH) or thioether (–S–), along with a carboxylic acid group, predict a high Fe/Hf value.',
            'patterns': [sulfur_groups, carboxylic_acid],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers containing pyridine rings where the nitrogen atom is positioned to coordinate effectively predict a high Fe/Hf value.',
            'patterns': [[pyridine_ring], carboxylic_acid],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers that are aliphatic amino acids with a terminal amino group (–NH₂) and a terminal carboxylic acid group (–COOH), predict a high Fe/Hf value.',
            'patterns': [[aliphatic_amino_acid]],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers that are simple aliphatic carboxylic acids without additional strong coordinating functional groups predict a low Fe/Hf value.',
            'patterns': [[simple_aliphatic_carboxylic_acid]],
            'exclude_patterns': [exclude_patterns_R6],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Modifiers with multiple hydroxyl groups (–OH) adjacent to the carboxylic acid group predict a low Fe/Hf value.',
            'patterns': [[multiple_hydroxyls_adjacent]],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Modifiers with bulky side chains or rigid structures near the coordinating groups predict a low Fe/Hf value due to steric hindrance.',
            'patterns': [[indole_group, pyrazole_group], carboxylic_acid],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers with aldehyde groups (–CHO) adjacent to an aromatic ring predict a low Fe/Hf value.',
            'patterns': [[aldehyde_aromatic], carboxylic_acid],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers containing ether linkages (–O–) and amino groups within the same molecule predict a high Fe/Hf value.',
            'patterns': [[ether_linkage_amino], carboxylic_acid],
            'prediction': 1
        },
        {
            'number': 11,
            'description': 'Modifiers with additional carbonyl groups adjacent to the carboxylic acid or within aromatic systems can enhance coordination with Fe ions, predicting a high Fe/Hf value.',
            'patterns': [[additional_carbonyls], carboxylic_acid],
            'prediction': 1
        },
        {
            'number': 12,
            'description': 'Modifiers with highly fluorinated alkyl chains predict a low Fe/Hf value.',
            'patterns': [[highly_fluorinated_alkyl_chain], carboxylic_acid],
            'prediction': -1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = []
            for pat in group:
                compiled_group.append(Chem.MolFromSmarts(pat))
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_exclude_patterns = []
            for group in rule['exclude_patterns']:
                compiled_group = []
                for pat in group:
                    compiled_group.append(Chem.MolFromSmarts(pat))
                compiled_exclude_patterns.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_exclude_patterns
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for compiled_group in rule['compiled_exclude_patterns']:
                        for pat in compiled_group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        if mol.HasSubstructMatch(pat):
                            group_match = True
                            break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df
--------------------------------------------------
    Target Name: Fe/Hf
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: **Modifiers that are aromatic carboxylic acids with strong electron-withdrawing groups (EWGs) at the para position, such as nitro (–NO₂) or halomethyl (–CH₂Hal), predict a high Fe/Hf value. EWGs increase the acidity and coordinating ability of the carboxylate group toward Fe ions.**

  *Examples:*
  - *4-nitrobenzoic acid* (High Fe/Hf)
  - *4-(bromomethyl)benzoic acid* (High Fe/Hf)

  *Counter-examples:*
  - *4-methylbenzoic acid* (Low Fe/Hf) – Methyl group is electron-donating.
  - *4-aminobenzoic acid* (Low Fe/Hf) – Amino group is electron-donating.

- **Rule 2**: **Modifiers that are aromatic carboxylic acids with electron-donating groups (EDGs) at the para position, such as amino (–NH₂), hydroxy (–OH), or methyl (–CH₃), predict a low Fe/Hf value. EDGs decrease the acidity and coordinating ability of the carboxylate group toward Fe ions.**

  *Examples:*
  - *4-aminobenzoic acid* (Low Fe/Hf)
  - *4-methylbenzoic acid* (Low Fe/Hf)
  - *3-(4-hydroxyphenyl)propanoic acid* (Low Fe/Hf)
  - *5-(4-hydroxyphenyl)pentanoic acid* (Low Fe/Hf)

- **Rule 3**: **Modifiers containing sulfur functional groups, such as thiol (–SH) or thioether (–S–), along with a carboxylic acid group, predict a high Fe/Hf value. Sulfur’s strong affinity for Fe enhances coordination stability through Fe–S interactions.**

  *Examples:*
  - *3-sulfanylpropanoic acid* (High Fe/Hf)
  - *4-sulfanylbenzoic acid* (High Fe/Hf)
  - *2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid* (High Fe/Hf)

- **Rule 4**: **Modifiers that are aliphatic amino acids with a terminal amino group (–NH₂) and a terminal carboxylic acid group (–COOH), especially with medium to long carbon chains, predict a high Fe/Hf value. The presence of both functional groups allows effective chelation with Fe ions.**

  *Examples:*
  - *5-aminopentanoic acid* (High Fe/Hf)
  - *7-aminoheptanoic acid* (High Fe/Hf)
  - *8-aminooctanoic acid* (High Fe/Hf)
  - *(2S)-6-acetamido-2-aminohexanoic acid* (High Fe/Hf)

  *Counter-example:*
  - *(2S)-2-aminopentanedioic acid* (Low Fe/Hf) – Additional carboxyl group may interfere with coordination.

- **Rule 5**: **Modifiers containing pyridine rings where the nitrogen atom is positioned to coordinate effectively (e.g., in 4-pyridyl carboxylic acids) predict a high Fe/Hf value due to potential bidentate chelation through the nitrogen and carboxylate oxygen atoms.**

  *Examples:*
  - *4-pyridin-4-ylbenzoic acid* (High Fe/Hf)
  - *4-pyridin-4-ylbutanoic acid* (High Fe/Hf)

  *Counter-example:*
  - *Pyridine-3-carboxylic acid* (Low Fe/Hf) – Nitrogen position is less favorable for coordination.

- **Rule 6**: **Modifiers with multiple hydroxyl groups (–OH) adjacent to the carboxylic acid group predict a low Fe/Hf value. Intramolecular hydrogen bonding competes with Fe coordination sites, diminishing their ability to bind Fe ions effectively.**

  *Examples:*
  - *(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid* (Low Fe/Hf)
  - *2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]propanoic acid* (Low Fe/Hf)

- **Rule 7**: **Modifiers that are simple aliphatic carboxylic acids without additional strong coordinating functional groups predict a low Fe/Hf value. The lack of donor atoms or groups reduces their interaction and coordination capacity with Fe ions.**

  *Examples:*
  - *Octanoic acid* (Low Fe/Hf)
  - *4-oxoheptanedioic acid* (Low Fe/Hf)
  - *2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid* (Low Fe/Hf)

- **Rule 8**: **Modifiers with bulky side chains or rigid structures near the coordinating groups predict a low Fe/Hf value due to steric hindrance that affects effective interaction with Fe ions. Sterically encumbered ligands are less able to coordinate tightly.**

  *Examples:*
  - *(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid* (Low Fe/Hf)
  - *1H-pyrazole-4-carboxylic acid* (Low Fe/Hf)

  *Counter-example:*
  - *(2S)-2-amino-3-phenylpropanoic acid* (High Fe/Hf) – Smaller aromatic group allows better coordination.

- **Rule 9**: **Modifiers with aldehyde groups (–CHO) adjacent to an aromatic ring predict a low Fe/Hf value. Aldehyde groups may interfere with coordination or undergo side reactions, reducing Fe incorporation efficiency.**

  *Examples:*
  - *4-formylbenzoic acid* (Low Fe/Hf)
  - *5-formyl-2-hydroxybenzoic acid* (Low Fe/Hf)

- **Rule 10**: **Modifiers containing ether linkages (–O–) and amino groups within the same molecule predict a high Fe/Hf value. Multiple heteroatoms provide additional coordination sites, enhancing binding affinity with Fe ions.**

  *Example:*
  - *3-[2-(2-aminoethoxy)ethoxy]propanoic acid* (High Fe/Hf)

- **Rule 11**: **Modifiers with additional carbonyl groups (e.g., ketones, lactones) adjacent to the carboxylic acid or within aromatic systems can enhance coordination with Fe ions, predicting a high Fe/Hf value. Multiple carbonyl groups increase the chelation potential via coordination through oxygen atoms.**

  *Examples:*
  - *1,3-dioxo-2-benzofuran-5-carboxylic acid* (High Fe/Hf)
  - *4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid* (High Fe/Hf)

- **Rule 12**: **Modifiers with highly fluorinated alkyl chains predict a low Fe/Hf value. The strong electron-withdrawing effect of fluorine atoms reduces electron density on coordinating groups, weakening interactions with Fe ions and diminishing coordination strength.**

  *Example:*
  - *2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid* (Low Fe/Hf)

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,-1
0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,1,1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,1,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,1,0
0,0,0,0,0,0,0,0,0,0,0,-1
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,1,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6857142857142857; Test Accuracy: 0.0
    Train Support: 0.11428571428571428; Test Support: 0.0
    Train Confidence: 0.9166666666666667; Test Confidence: 0.5
    Train Lift: 1.8872549019607845; Test Lift: NONE
    Train Leverage: 0.05183673469387755; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    from rdkit import Chem
    from rdkit.Chem import rdchem

    # Helper function to check for para-substituted groups in aromatic carboxylic acids
    def check_para_substitution(mol, substituent_patterns):
        """
        Checks if an aromatic carboxylic acid has a substituent at the para position matching any of the patterns.
        """
        matches = mol.GetSubstructMatches(Chem.MolFromSmarts('[c][CX3](=O)[O;H1,-1]'))  # Aromatic carboxylic acid
        for match in matches:
            aromatic_carbon_idx = match[0]
            carboxyl_carbon_idx = match[1]
            # Get aromatic ring the carboxylic acid is attached to
            rings = mol.GetRingInfo().AtomRings()
            aromatic_ring = None
            for ring in rings:
                if aromatic_carbon_idx in ring:
                    aromatic_ring = ring
                    break
            if aromatic_ring:
                # Find the atom opposite to the carboxylic acid in the ring (para position)
                idx_in_ring = aromatic_ring.index(aromatic_carbon_idx)
                para_idx = aromatic_ring[(idx_in_ring + 3) % len(aromatic_ring)]
                para_atom = mol.GetAtomWithIdx(para_idx)
                # Check if para atom has a substituent matching any of the patterns
                for neighbor in para_atom.GetNeighbors():
                    if neighbor.GetIdx() not in aromatic_ring:
                        neighbor_idx = neighbor.GetIdx()
                        neighbor_fragment = Chem.MolFragmentToSmiles(mol, atomsToUse=[neighbor_idx], isomericSmiles=True)
                        neighbor_mol = Chem.MolFromSmiles(neighbor_fragment)
                        for pattern in substituent_patterns:
                            if neighbor_mol and neighbor_mol.HasSubstructMatch(pattern):
                                return True
        return False

    # --- Define functional groups ---

    # Carboxylic acid group (-COOH)
    carboxylic_acid_smarts = '[CX3](=O)[O;H1,-1]'
    carboxylic_acid = Chem.MolFromSmarts(carboxylic_acid_smarts)

    # Aromatic carboxylic acid group
    aromatic_carboxylic_acid_smarts = '[c][CX3](=O)[O;H1,-1]'
    aromatic_carboxylic_acid = Chem.MolFromSmarts(aromatic_carboxylic_acid_smarts)

    # Electron-withdrawing groups (EWGs)
    nitro_group = Chem.MolFromSmarts('[N+](=O)[O-]')
    halomethyl_group = Chem.MolFromSmarts('[CH2][F,Cl,Br,I]')
    halogen = Chem.MolFromSmarts('[F,Cl,Br,I]')
    cf3_group = Chem.MolFromSmarts('[CX4]([F])([F])[F]')
    ewg_list = [nitro_group, halomethyl_group, halogen, cf3_group]

    # Electron-donating groups (EDGs)
    amino_group = Chem.MolFromSmarts('[NX3;H2,H1][#6]')
    hydroxyl_group = Chem.MolFromSmarts('[OX2H]')
    methoxy_group = Chem.MolFromSmarts('[OX2][CH3]')
    methyl_group = Chem.MolFromSmarts('[CH3]')
    edg_list = [amino_group, hydroxyl_group, methoxy_group, methyl_group]

    # Sulfur functional groups
    thiol_group = Chem.MolFromSmarts('[SX2H]')
    thioether_group = Chem.MolFromSmarts('[SX2][#6]')
    sulfur_groups = [thiol_group, thioether_group]

    # Terminal amino group (primary aliphatic amine)
    terminal_amino_group = Chem.MolFromSmarts('[NX3;H2][CX4][CX4]')

    # Pyridine ring with carboxylic acid at position 4
    pyridine_4_carboxylic_acid = Chem.MolFromSmarts('n1cccc([CX3](=O)[O;H1,-1])c1')

    # Multiple hydroxyl groups adjacent to carboxylic acid
    multiple_adjacent_hydroxyls = Chem.MolFromSmarts('[CX4H]([OX2H])[CX4H]([OX2H])[CX4][CX3](=O)[O;H1,-1]')

    # Bulky side chains or rigid structures
    indole_group = Chem.MolFromSmarts('c1cc2ccccc2[nH]1')
    pyrazole_group = Chem.MolFromSmarts('c1ccn[nH]1')
    bulky_groups = [indole_group, pyrazole_group]

    # Aldehyde groups adjacent to aromatic ring
    aromatic_aldehyde = Chem.MolFromSmarts('[c][CX3H1]=O')

    # Ether linkage
    ether_linkage = Chem.MolFromSmarts('[#6][OX2][#6]')

    # Amino groups
    amino_group_any = Chem.MolFromSmarts('[NX3;H2,H1,H0][#6]')

    # Additional carbonyl groups
    ketone_group = Chem.MolFromSmarts('[#6][CX3](=O)[#6]')
    lactone_group = Chem.MolFromSmarts('[#6]1[#6][#6][#6][#6][O]1')

    # Highly fluorinated alkyl chains
    fluorinated_alkyl_chain = Chem.MolFromSmarts('C(F)(F)F')

    # Initialize results list
    results = []

    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*12)
            continue
        row = []

        # Rule 1
        try:
            match_rule1 = 0
            matches = mol.GetSubstructMatches(aromatic_carboxylic_acid)
            if matches:
                if check_para_substitution(mol, ewg_list):
                    match_rule1 = 1
            row.append(match_rule1)
        except Exception:
            row.append(0)

        # Rule 2
        try:
            match_rule2 = 0
            matches = mol.GetSubstructMatches(aromatic_carboxylic_acid)
            if matches:
                if check_para_substitution(mol, edg_list):
                    match_rule2 = -1
            row.append(match_rule2)
        except Exception:
            row.append(0)

        # Rule 3
        try:
            if mol.HasSubstructMatch(carboxylic_acid) and any(mol.HasSubstructMatch(sg) for sg in sulfur_groups):
                row.append(1)
            else:
                row.append(0)
        except Exception:
            row.append(0)

        # Rule 4
        try:
            match_rule4 = 0
            amino_matches = mol.GetSubstructMatches(terminal_amino_group)
            acid_matches = mol.GetSubstructMatches(carboxylic_acid)
            if amino_matches and acid_matches:
                for a_match in amino_matches:
                    for c_match in acid_matches:
                        path = Chem.rdmolops.GetShortestPath(mol, a_match[0], c_match[0])
                        if len(path) >= 5:  # Medium to long chain
                            match_rule4 = 1
                            break
                    if match_rule4 == 1:
                        break
            row.append(match_rule4)
        except Exception:
            row.append(0)

        # Rule 5
        try:
            if mol.HasSubstructMatch(pyridine_4_carboxylic_acid):
                row.append(1)
            else:
                row.append(0)
        except Exception:
            row.append(0)

        # Rule 6
        try:
            if mol.HasSubstructMatch(multiple_adjacent_hydroxyls):
                row.append(-1)
            else:
                row.append(0)
        except Exception:
            row.append(0)

        # Rule 7
        try:
            if mol.HasSubstructMatch(carboxylic_acid):
                exclude_patterns = [
                    amino_group_any,
                    hydroxyl_group,
                    sulfur_groups[0],
                    sulfur_groups[1],
                    ether_linkage,
                    Chem.MolFromSmarts('[a]')  # Aromatic atoms
                ]
                if not any(mol.HasSubstructMatch(pat) for pat in exclude_patterns):
                    row.append(-1)
                else:
                    row.append(0)
            else:
                row.append(0)
        except Exception:
            row.append(0)

        # Rule 8
        try:
            if mol.HasSubstructMatch(carboxylic_acid) and any(mol.HasSubstructMatch(bg) for bg in bulky_groups):
                row.append(-1)
            else:
                row.append(0)
        except Exception:
            row.append(0)

        # Rule 9
        try:
            if mol.HasSubstructMatch(aromatic_aldehyde):
                row.append(-1)
            else:
                row.append(0)
        except Exception:
            row.append(0)

        # Rule 10
        try:
            if mol.HasSubstructMatch(carboxylic_acid) and mol.HasSubstructMatch(ether_linkage) and mol.HasSubstructMatch(amino_group_any):
                row.append(1)
            else:
                row.append(0)
        except Exception:
            row.append(0)

        # Rule 11
        try:
            if mol.HasSubstructMatch(carboxylic_acid) and (mol.HasSubstructMatch(ketone_group) or mol.HasSubstructMatch(lactone_group)):
                row.append(1)
            else:
                row.append(0)
        except Exception:
            row.append(0)

        # Rule 12
        try:
            if mol.HasSubstructMatch(carboxylic_acid) and mol.HasSubstructMatch(fluorinated_alkyl_chain):
                row.append(-1)
            else:
                row.append(0)
        except Exception:
            row.append(0)

        # Append row to results
        results.append(row)

    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {i+1}' for i in range(12)])
    return df

--------------------------------------------------