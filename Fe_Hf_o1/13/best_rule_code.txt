def rule2matrix(smiles_list):
    # Define the rules
    rules = [
        {
            'number': 1,
            'description': 'Modifiers containing terminal primary amino groups on aliphatic chains of four or more carbons',
            'smarts': '[NX3H2]',  # Primary amino group
            'prediction': 1,
            'check_chain_length': {'min_length': 4, 'attached_atom': 'N'},
        },
        {
            'number': 2,
            'description': 'Modifiers with sulfur-containing functional groups (thiol or thioether), especially when combined with carboxylic acids',
            'smarts': ['[SX2H]', '[#16X2]'],  # Thiol or thioether
            'prediction': 1,
            'optional_patterns': ['[CX3](=O)[OX2H1]'],  # Optional carboxylic acid
        },
        {
            'number': 3,
            'description': 'Benzoic acid derivatives with strong electron-withdrawing groups at the para position',
            'smarts': ['c1cc([N+](=O)[O-])ccc1C(=O)O', 'c1cc([F,Cl,Br,I])ccc1C(=O)O'],
            'prediction': 1,
        },
        {
            'number': 4,
            'description': 'Modifiers containing multiple ether linkages (polyethers) without multiple hydroxyl groups',
            'smarts': '[#6][OX2][#6]',  # Ether linkage
            'prediction': 1,
            'count_threshold': {'pattern': '[#6][OX2][#6]', 'min_count': 2},
            'exclude_patterns': ['[OX2H]'],
        },
        {
            'number': 5,
            'description': 'Aromatic amino acids with an accessible amino group',
            'smarts': '[NX3H2][CX4][CX3](=O)[OX1H][CX4][c]',  # Simplified amino acid with aromatic side chain
            'prediction': 1,
        },
        {
            'number': 6,
            'description': 'Modifiers containing aromatic nitrogen heterocycles with accessible nitrogen lone pairs',
            'smarts': 'n1ccccc1',  # Pyridine-like ring
            'exclude_patterns': ['[nH]'],  # Exclude pyrrole-like nitrogen
            'prediction': 1,
        },
        {
            'number': 7,
            'description': 'Modifiers with terminal hydroxyl groups on aliphatic chains of six or more carbons',
            'smarts': '[CX4][OX2H]',  # Terminal hydroxyl group
            'prediction': 1,
            'check_chain_length': {'min_length': 6, 'attached_atom': 'O'},
        },
        {
            'number': 8,
            'description': 'Modifiers with multiple hydroxyl groups (polyols)',
            'smarts': '[OX2H]',  # Hydroxyl group
            'prediction': -1,
            'count_threshold': {'pattern': '[OX2H]', 'min_count': 2},
        },
        {
            'number': 9,
            'description': 'Long-chain aliphatic carboxylic acids without additional coordinating functional groups',
            'smarts': '[CX3](=O)[OX2H1]',  # Carboxylic acid group
            'prediction': -1,
            'exclude_patterns': ['[NX3]', '[OX2H]', '[SX2H]', '[#6][OX2][#6]', '[a]'],
            'check_chain_length': {'min_length': 6, 'attached_atom': 'C'},
        },
        {
            'number': 10,
            'description': 'Benzoic acid derivatives with electron-donating groups at the para position',
            'smarts': ['c1cc([NH2,OCH3,CH3])ccc1C(=O)O'],
            'prediction': -1,
        },
        {
            'number': 11,
            'description': 'Modifiers with aldehyde groups (-CHO)',
            'smarts': '[CX3H1](=O)[#6]',  # Aldehyde group
            'prediction': -1,
        },
        {
            'number': 12,
            'description': 'Modifiers containing fluorinated alkyl chains',
            'smarts': '[CX4][CF3]',  # Trifluoromethyl group
            'prediction': -1,
        },
        {
            'number': 13,
            'description': "Modifiers with nitrogen heterocycles where the nitrogen's lone pair is delocalized or less accessible",
            'smarts': '[nH]',  # Pyrrole-like nitrogen
            'prediction': -1,
        },
        {
            'number': 14,
            'description': 'Modifiers featuring fused aromatic rings with oxygen heteroatoms',
            'smarts': 'o1cccc2ccccc12',  # Benzofuran
            'prediction': 1,
        },
        {
            'number': 15,
            'description': 'Modifiers combining both carboxylic acid groups and additional chelating groups (amino, hydroxyl) adjacent to the carboxylate',
            'smarts': ['[NX3][CX4][CX3](=O)[OX2H1]', '[OX2H][CX4][CX3](=O)[OX2H1]'],
            'prediction': 1,
        },
    ]

    # Compile SMARTS patterns
    for rule in rules:
        try:
            if isinstance(rule['smarts'], list):
                rule['compiled_smarts'] = [Chem.MolFromSmarts(s) for s in rule['smarts']]
            else:
                rule['compiled_smarts'] = [Chem.MolFromSmarts(rule['smarts'])]
            if 'optional_patterns' in rule:
                rule['compiled_optional'] = [Chem.MolFromSmarts(s) for s in rule['optional_patterns']]
            if 'exclude_patterns' in rule:
                rule['compiled_exclude'] = [Chem.MolFromSmarts(s) for s in rule['exclude_patterns']]
        except:
            rule['compiled_smarts'] = []

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for patt in rule['compiled_exclude']:
                        if mol.HasSubstructMatch(patt):
                            match = False
                            break
                if not match:
                    row.append(0)
                    continue
                # Check required patterns
                for patt in rule['compiled_smarts']:
                    if not mol.HasSubstructMatch(patt):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Check count threshold if any
                if 'count_threshold' in rule:
                    count_patt = Chem.MolFromSmarts(rule['count_threshold']['pattern'])
                    count = len(mol.GetSubstructMatches(count_patt))
                    if count < rule['count_threshold']['min_count']:
                        match = False
                # Check chain length if necessary
                if 'check_chain_length' in rule and match:
                    min_length = rule['check_chain_length']['min_length']
                    attached_atom = rule['check_chain_length']['attached_atom']
                    # For each atom matching the pattern
                    for match_atoms in mol.GetSubstructMatches(rule['compiled_smarts'][0]):
                        atom_idx = match_atoms[0]  # Assuming pattern matches a single atom
                        atom = mol.GetAtomWithIdx(atom_idx)
                        # Use a BFS to find the longest chain of aliphatic carbons
                        paths = Chem.FindAllPathsOfLengthN(mol, min_length+1, useBonds=False)
                        found_chain = False
                        for path in paths:
                            if atom_idx in path:
                                # Check that all atoms in path are aliphatic carbons
                                if all(mol.GetAtomWithIdx(i).GetSymbol() == 'C' and not mol.GetAtomWithIdx(i).GetIsAromatic() for i in path):
                                    found_chain = True
                                    break
                        if found_chain:
                            break
                    else:
                        match = False
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df
