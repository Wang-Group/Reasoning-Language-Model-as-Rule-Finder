
    Target Name: Fe/Hf
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: Modifiers containing **sulfur functional groups** (e.g., thiol (-SH), thioether (-S-)) result in **high Fe/Hf** values. Sulfur atoms coordinate strongly with Fe ions, enhancing Fe loading.

  *Examples*: 4-sulfanylbenzoic acid, 3-sulfanylpropanoic acid, methionine derivative (2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid).

- **Rule 2**: **Benzoic acid derivatives with strong electron-withdrawing groups** (e.g., nitro (-NO₂), halogens like bromo (-Br)) at the **para position** result in **high Fe/Hf** values. These groups enhance the carboxylate's ability to coordinate with Fe ions.

  *Examples*: 4-nitrobenzoic acid, 4-(bromomethyl)benzoic acid.

- **Rule 3**: **Benzoic acid derivatives with electron-donating groups** (e.g., amino (-NH₂), hydroxy (-OH), methoxy (-OCH₃), methyl (-CH₃)) at the **para position** result in **low Fe/Hf** values. These groups reduce the effectiveness of the carboxylate in coordinating with Fe ions.

  *Examples*: 4-aminobenzoic acid, 4-hydroxybenzoic acid, 4-methylbenzoic acid.

- **Rule 4**: Modifiers with **terminal amino groups on aliphatic chains** of **four or more carbons** result in **high Fe/Hf** values. The terminal amino group enhances coordination with Fe ions.

  *Examples*: 5-aminopentanoic acid, 7-aminoheptanoic acid, 8-aminooctanoic acid.

- **Rule 5**: Modifiers with **terminal hydroxy groups on aliphatic chains** of **five or more carbons** result in **high Fe/Hf** values. The hydroxy group facilitates coordination with Fe ions.

  *Example*: 7-hydroxyheptanoic acid.

- **Rule 6**: Modifiers containing **polyether chains** or **multiple ether linkages** without multiple hydroxy groups result in **high Fe/Hf** values. Ether oxygen atoms can coordinate with Fe ions, enhancing Fe loading.

  *Example*: 2-[2-(2-methoxyethoxy)ethoxy]acetic acid.

- **Rule 7**: Modifiers with **multiple hydroxy groups (polyols)** result in **low Fe/Hf** values. Extensive hydrogen bonding may hinder effective coordination with Fe ions.

  *Examples*: (2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid, 2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]propanoic acid.

- **Rule 8**: **Long-chain aliphatic carboxylic acids without additional coordinating functional groups** result in **low Fe/Hf** values. The lack of coordinating functional groups diminishes interaction with Fe ions.

  *Example*: Octanoic acid.

- **Rule 9**: Modifiers with **fluorinated alkyl chains** result in **low Fe/Hf** values. Electronegative fluorine atoms reduce the molecule's ability to coordinate with Fe ions.

  *Example*: 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid.

- **Rule 10**: Modifiers with **aldehyde (-CHO) groups** result in **low Fe/Hf** values. Aldehyde groups may hinder effective coordination with Fe ions.

  *Examples*: 4-formylbenzoic acid, 5-formyl-2-hydroxybenzoic acid.

- **Rule 11**: Modifiers containing **nitrogen heterocycles** with nitrogen atoms accessible for coordination result in **high Fe/Hf** values. The lone pair on nitrogen can coordinate with Fe ions.

  *Example*: 4-pyridin-4-ylbutanoic acid.

- **Rule 12**: Modifiers featuring **fused aromatic rings containing oxygen heteroatoms** (e.g., benzofuran derivatives) result in **high Fe/Hf** values. Oxygen heteroatoms enhance coordination with Fe ions.

  *Example*: 1,3-dioxo-2-benzofuran-5-carboxylic acid.

- **Rule 13**: Modifiers that are **aromatic amino acids** with accessible coordination sites result in **high Fe/Hf** values. The aromatic ring and amino group facilitate coordination with Fe ions.

  *Example*: (2S)-2-amino-3-phenylpropanoic acid (phenylalanine).

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,1
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,1,0,1
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6; Test Accuracy: 0.0
    Train Support: 0.08571428571428572; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 2.058823529411765; Test Lift: NONE
    Train Leverage: 0.044081632653061226; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    
    # Rule 1: Modifiers containing sulfur functional groups (thiol or thioether)
    thiol = '[SX2H]'
    thioether = '[#16X2][#6]'
    
    # Rule 2: Benzoic acid derivatives with strong electron-withdrawing groups at the para position
    # Electron-withdrawing groups
    nitro = '[NX3](=O)=O'
    halogens = '[F,Cl,Br,I]'
    
    # Para-substituted EWG on benzene ring with carboxylic acid
    # Pattern for para-substituted benzoic acid with EWG
    para_ewg_benzoic_acid = 'c1cc([C](=O)[O,H])[c]cc1[EWG]'
    
    # Rule 3: Benzoic acid derivatives with electron-donating groups at the para position
    # Electron-donating groups
    amino = '[NH2]'
    hydroxy = '[OH]'
    methoxy = '[OCH3]'
    methyl = '[CH3]'
    
    # Para-substituted EDG on benzene ring with carboxylic acid
    para_edg_benzoic_acid = 'c1cc([C](=O)[O,H])[c]cc1[EDG]'
    
    # Rule 4: Modifiers with terminal amino groups on aliphatic chains of four or more carbons
    terminal_amino = '[NX3;H2,H1][CH2]{4,}[CX3](=O)[OX2H1]'
    
    # Rule 5: Modifiers with terminal hydroxy groups on aliphatic chains of five or more carbons
    terminal_hydroxy = '[OX2H][CH2]{5,}[CX3](=O)[OX2H1]'
    
    # Rule 6: Modifiers containing polyether chains or multiple ether linkages without multiple hydroxy groups
    polyether_chain = '([#6][OX2][#6]){2,}'  # At least two ether linkages
    
    # Rule 7: Modifiers with multiple hydroxy groups (polyols)
    polyol = '[OX2H][CX4][OX2H]'
    
    # Rule 8: Long-chain aliphatic carboxylic acids without additional coordinating functional groups
    aliphatic_acid = '[CH2]{5,}[CX3](=O)[OX2H1]'
    
    # Rule 9: Modifiers with fluorinated alkyl chains
    fluorinated_chain = '[CX4]([F])[F][F]'
    
    # Rule 10: Modifiers with aldehyde (-CHO) groups
    aldehyde = '[CX3H1](=O)[#6]'
    
    # Rule 11: Modifiers containing nitrogen heterocycles with nitrogen atoms accessible for coordination
    nitrogen_heterocycle = '[n]1cccc1'
    
    # Rule 12: Modifiers featuring fused aromatic rings containing oxygen heteroatoms
    oxygen_fused_aromatic = '[o]1ccc2ccccc12'
    
    # Rule 13: Modifiers that are aromatic amino acids with accessible coordination sites
    aromatic_amino_acid = '[NX3;H2][CX4][CX3](=O)[OX2H1] [c]1ccccc1'  # Amino acid with aromatic ring
    
    # Compile SMARTS patterns
    pattern_dict = {
        'Rule 1': [Chem.MolFromSmarts(thiol), Chem.MolFromSmarts(thioether)],
        'Rule 2': [Chem.MolFromSmarts('c1cc([C](=O)[O,H])[c]cc1[N+](=O)[O-]'), Chem.MolFromSmarts('c1cc([C](=O)[O,H])[c]cc1[Br]')],
        'Rule 3': [Chem.MolFromSmarts('c1cc([C](=O)[O,H])[c]cc1[OH]'), Chem.MolFromSmarts('c1cc([C](=O)[O,H])[c]cc1[OCH3]')],
        'Rule 4': [Chem.MolFromSmarts('[NX3;H2,H1][CH2]{4,}[CX3](=O)[OX2H1]')],
        'Rule 5': [Chem.MolFromSmarts('[OX2H][CH2]{5,}[CX3](=O)[OX2H1]')],
        'Rule 6': [Chem.MolFromSmarts('([#6][OX2][#6]){2,}')],  # At least two ether linkages
        'Rule 7': [Chem.MolFromSmarts('([OX2H][CX4]){2,}')],  # At least two hydroxyl groups
        'Rule 8': [Chem.MolFromSmarts('[CH2]{5,}[CX3](=O)[OX2H1]')],  # Long aliphatic chain with carboxylic acid
        'Rule 9': [Chem.MolFromSmarts('[#6][F][F][F]')],
        'Rule 10': [Chem.MolFromSmarts('[CX3H1](=O)[#6]')],
        'Rule 11': [Chem.MolFromSmarts('[n]1cccc1')],
        'Rule 12': [Chem.MolFromSmarts('[o]1ccc2ccccc12')],
        'Rule 13': [Chem.MolFromSmarts('[NX3;H2][CX4][CX3](=O)[OX2H1].[c]1ccccc1')]  # Amino acid with aromatic ring
    }
    
    # Predictions associated with each rule
    predictions = {
        'Rule 1': 1,
        'Rule 2': 1,
        'Rule 3': -1,
        'Rule 4': 1,
        'Rule 5': 1,
        'Rule 6': 1,
        'Rule 7': -1,
        'Rule 8': -1,
        'Rule 9': -1,
        'Rule 10': -1,
        'Rule 11': 1,
        'Rule 12': 1,
        'Rule 13': 1
    }
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(pattern_dict))
            continue
        row = []
        for rule_name, patterns in pattern_dict.items():
            prediction = predictions[rule_name]
            match = False
            try:
                for pat in patterns:
                    if mol.HasSubstructMatch(pat):
                        match = True
                        break
                if match:
                    row.append(prediction)
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=list(pattern_dict.keys()))
    return df

--------------------------------------------------
    Target Name: Fe/Hf
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: **Modifiers containing terminal primary amino groups (-NH₂) on aliphatic chains of four or more carbons result in high Fe/Hf values**. The primary amino group acts as a strong ligand, coordinating effectively with Fe ions.

  *Examples*: 5-aminopentanoic acid, 7-aminoheptanoic acid, 8-aminooctanoic acid, (2S)-6-acetamido-2-aminohexanoic acid.

- **Rule 2**: **Modifiers with sulfur-containing functional groups** (e.g., thiol (-SH), thioether (-S-)) **result in high Fe/Hf values**, especially when combined with other coordinating groups like carboxylic acids. Sulfur atoms have a high affinity for Fe ions, enhancing coordination.

  *Examples*: 4-sulfanylbenzoic acid, 3-sulfanylpropanoic acid, 2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid.

- **Rule 3**: **Benzoic acid derivatives with strong electron-withdrawing groups at the para position result in high Fe/Hf values**. Electron-withdrawing groups (e.g., nitro (-NO₂), bromo (-Br)) increase the acidity of the carboxyl group, enhancing its ability to coordinate with Fe ions.

  *Examples*: 4-nitrobenzoic acid, 4-(bromomethyl)benzoic acid.

- **Rule 4**: **Modifiers containing multiple ether linkages (polyethers) without multiple hydroxyl groups result in high Fe/Hf values**. Ether oxygen atoms can serve as coordination sites for Fe ions.

  *Examples*: 2-[2-(2-methoxyethoxy)ethoxy]acetic acid, 3-[2-(2-aminoethoxy)ethoxy]propanoic acid.

- **Rule 5**: **Aromatic amino acids with an accessible amino group result in high Fe/Hf values**. The combination of an aromatic ring and amino group provides multiple coordination sites for Fe ions.

  *Example*: (2S)-2-amino-3-phenylpropanoic acid (phenylalanine).

- **Rule 6**: **Modifiers containing aromatic nitrogen heterocycles with accessible nitrogen lone pairs result in high Fe/Hf values**. The nitrogen atom's lone pair can coordinate with Fe ions.

  *Example*: 4-pyridin-4-ylbutanoic acid.

- **Rule 7**: **Modifiers with terminal hydroxyl groups on aliphatic chains of six or more carbons result in high Fe/Hf values**. The hydroxyl group enhances coordination with Fe ions due to its lone pairs.

  *Example*: 7-hydroxyheptanoic acid.

- **Rule 8**: **Modifiers with multiple hydroxyl groups (polyols) result in low Fe/Hf values**. Extensive hydrogen bonding within the polyol may hinder effective coordination with Fe ions.

  *Examples*: (2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid, 2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]propanoic acid.

- **Rule 9**: **Long-chain aliphatic carboxylic acids without additional coordinating functional groups result in low Fe/Hf values**. The lack of additional coordination sites reduces interaction with Fe ions.

  *Example*: Octanoic acid.

- **Rule 10**: **Benzoic acid derivatives with electron-donating groups at the para position result in low Fe/Hf values**. Electron-donating groups (e.g., amino (-NH₂), methyl (-CH₃)) decrease the acidity of the carboxyl group, reducing coordination efficiency with Fe ions.

  *Examples*: 4-aminobenzoic acid, 4-methylbenzoic acid.

- **Rule 11**: **Modifiers with aldehyde groups (-CHO) result in low Fe/Hf values**. Aldehyde groups can participate in side reactions or form intramolecular interactions that hinder coordination with Fe ions.

  *Examples*: 4-formylbenzoic acid, 5-formyl-2-hydroxybenzoic acid.

- **Rule 12**: **Modifiers containing fluorinated alkyl chains result in low Fe/Hf values**. The strong electron-withdrawing effect of fluorine atoms decreases the electron density on coordinating atoms, reducing their ability to bind Fe ions.

  *Example*: 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid.

- **Rule 13**: **Modifiers with nitrogen heterocycles where the nitrogen's lone pair is delocalized or less accessible result in low Fe/Hf values**. Delocalization reduces the nitrogen's ability to coordinate with Fe ions.

  *Example*: Pyridine-3-carboxylic acid (nicotinic acid).

- **Rule 14**: **Modifiers featuring fused aromatic rings with oxygen heteroatoms result in high Fe/Hf values**. The oxygen atoms in such structures can effectively coordinate with Fe ions.

  *Example*: 1,3-dioxo-2-benzofuran-5-carboxylic acid.

- **Rule 15**: **Modifiers combining both carboxylic acid groups and additional chelating groups (e.g., amino, hydroxyl) adjacent to the carboxylate result in high Fe/Hf values**. The proximity of multiple coordinating groups enhances Fe ion binding.

  *Examples*: (2S)-2-aminobutanedioic acid (aspartic acid), (2S)-2-amino-3-(1H-indol-3-yl)propanoic acid (tryptophan).

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,1,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.8571428571428571; Test Accuracy: 1.0
    Train Support: 0.09142857142857143; Test Support: 0.0
    Train Confidence: 0.96; Test Confidence: 0.5
    Train Lift: 1.8895424836601307; Test Lift: NONE
    Train Leverage: 0.03869387755102041; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define the rules
    rules = [
        {
            'number': 1,
            'description': 'Modifiers containing terminal primary amino groups on aliphatic chains of four or more carbons',
            'smarts': '[NX3H2]',  # Primary amino group
            'prediction': 1,
            'check_chain_length': {'min_length': 4, 'attached_atom': 'N'},
        },
        {
            'number': 2,
            'description': 'Modifiers with sulfur-containing functional groups (thiol or thioether), especially when combined with carboxylic acids',
            'smarts': ['[SX2H]', '[#16X2]'],  # Thiol or thioether
            'prediction': 1,
            'optional_patterns': ['[CX3](=O)[OX2H1]'],  # Optional carboxylic acid
        },
        {
            'number': 3,
            'description': 'Benzoic acid derivatives with strong electron-withdrawing groups at the para position',
            'smarts': ['c1cc([N+](=O)[O-])ccc1C(=O)O', 'c1cc([F,Cl,Br,I])ccc1C(=O)O'],
            'prediction': 1,
        },
        {
            'number': 4,
            'description': 'Modifiers containing multiple ether linkages (polyethers) without multiple hydroxyl groups',
            'smarts': '[#6][OX2][#6]',  # Ether linkage
            'prediction': 1,
            'count_threshold': {'pattern': '[#6][OX2][#6]', 'min_count': 2},
            'exclude_patterns': ['[OX2H]'],
        },
        {
            'number': 5,
            'description': 'Aromatic amino acids with an accessible amino group',
            'smarts': '[NX3H2][CX4][CX3](=O)[OX1H][CX4][c]',  # Simplified amino acid with aromatic side chain
            'prediction': 1,
        },
        {
            'number': 6,
            'description': 'Modifiers containing aromatic nitrogen heterocycles with accessible nitrogen lone pairs',
            'smarts': 'n1ccccc1',  # Pyridine-like ring
            'exclude_patterns': ['[nH]'],  # Exclude pyrrole-like nitrogen
            'prediction': 1,
        },
        {
            'number': 7,
            'description': 'Modifiers with terminal hydroxyl groups on aliphatic chains of six or more carbons',
            'smarts': '[CX4][OX2H]',  # Terminal hydroxyl group
            'prediction': 1,
            'check_chain_length': {'min_length': 6, 'attached_atom': 'O'},
        },
        {
            'number': 8,
            'description': 'Modifiers with multiple hydroxyl groups (polyols)',
            'smarts': '[OX2H]',  # Hydroxyl group
            'prediction': -1,
            'count_threshold': {'pattern': '[OX2H]', 'min_count': 2},
        },
        {
            'number': 9,
            'description': 'Long-chain aliphatic carboxylic acids without additional coordinating functional groups',
            'smarts': '[CX3](=O)[OX2H1]',  # Carboxylic acid group
            'prediction': -1,
            'exclude_patterns': ['[NX3]', '[OX2H]', '[SX2H]', '[#6][OX2][#6]', '[a]'],
            'check_chain_length': {'min_length': 6, 'attached_atom': 'C'},
        },
        {
            'number': 10,
            'description': 'Benzoic acid derivatives with electron-donating groups at the para position',
            'smarts': ['c1cc([NH2,OCH3,CH3])ccc1C(=O)O'],
            'prediction': -1,
        },
        {
            'number': 11,
            'description': 'Modifiers with aldehyde groups (-CHO)',
            'smarts': '[CX3H1](=O)[#6]',  # Aldehyde group
            'prediction': -1,
        },
        {
            'number': 12,
            'description': 'Modifiers containing fluorinated alkyl chains',
            'smarts': '[CX4][CF3]',  # Trifluoromethyl group
            'prediction': -1,
        },
        {
            'number': 13,
            'description': "Modifiers with nitrogen heterocycles where the nitrogen's lone pair is delocalized or less accessible",
            'smarts': '[nH]',  # Pyrrole-like nitrogen
            'prediction': -1,
        },
        {
            'number': 14,
            'description': 'Modifiers featuring fused aromatic rings with oxygen heteroatoms',
            'smarts': 'o1cccc2ccccc12',  # Benzofuran
            'prediction': 1,
        },
        {
            'number': 15,
            'description': 'Modifiers combining both carboxylic acid groups and additional chelating groups (amino, hydroxyl) adjacent to the carboxylate',
            'smarts': ['[NX3][CX4][CX3](=O)[OX2H1]', '[OX2H][CX4][CX3](=O)[OX2H1]'],
            'prediction': 1,
        },
    ]

    # Compile SMARTS patterns
    for rule in rules:
        try:
            if isinstance(rule['smarts'], list):
                rule['compiled_smarts'] = [Chem.MolFromSmarts(s) for s in rule['smarts']]
            else:
                rule['compiled_smarts'] = [Chem.MolFromSmarts(rule['smarts'])]
            if 'optional_patterns' in rule:
                rule['compiled_optional'] = [Chem.MolFromSmarts(s) for s in rule['optional_patterns']]
            if 'exclude_patterns' in rule:
                rule['compiled_exclude'] = [Chem.MolFromSmarts(s) for s in rule['exclude_patterns']]
        except:
            rule['compiled_smarts'] = []

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for patt in rule['compiled_exclude']:
                        if mol.HasSubstructMatch(patt):
                            match = False
                            break
                if not match:
                    row.append(0)
                    continue
                # Check required patterns
                for patt in rule['compiled_smarts']:
                    if not mol.HasSubstructMatch(patt):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Check count threshold if any
                if 'count_threshold' in rule:
                    count_patt = Chem.MolFromSmarts(rule['count_threshold']['pattern'])
                    count = len(mol.GetSubstructMatches(count_patt))
                    if count < rule['count_threshold']['min_count']:
                        match = False
                # Check chain length if necessary
                if 'check_chain_length' in rule and match:
                    min_length = rule['check_chain_length']['min_length']
                    attached_atom = rule['check_chain_length']['attached_atom']
                    # For each atom matching the pattern
                    for match_atoms in mol.GetSubstructMatches(rule['compiled_smarts'][0]):
                        atom_idx = match_atoms[0]  # Assuming pattern matches a single atom
                        atom = mol.GetAtomWithIdx(atom_idx)
                        # Use a BFS to find the longest chain of aliphatic carbons
                        paths = Chem.FindAllPathsOfLengthN(mol, min_length+1, useBonds=False)
                        found_chain = False
                        for path in paths:
                            if atom_idx in path:
                                # Check that all atoms in path are aliphatic carbons
                                if all(mol.GetAtomWithIdx(i).GetSymbol() == 'C' and not mol.GetAtomWithIdx(i).GetIsAromatic() for i in path):
                                    found_chain = True
                                    break
                        if found_chain:
                            break
                    else:
                        match = False
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: Fe/Hf
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Analysis of Current Rules and Suggestions for Improvement**

After reviewing the current set of rules and the dataset provided, I have some suggestions to enhance the rules to better meet the specified requirements:

1. **Combining Overlapping Rules**: Some rules overlap in their functional groups or underlying principles. Merging these rules can simplify the rule set and increase coverage.

2. **Emphasizing Combinations of Substructures**: The guidelines recommend illustrating direct combinations of substructures (functional groups). We can refine the rules to focus more on specific combinations rather than single functional groups.

3. **Balancing Coverage and Specificity**: Some rules are very specific with low coverage, while others are broad. We aim to balance simple rules with higher coverage and complex rules with lower coverage.

4. **Clarity and Predictive Power**: Each rule should clearly predict the Fe/Hf value (high or low) based on the presence of certain substructures.

**Revised Rules**

**Start of Rules**

---

- **Rule 1**: **Modifiers containing a primary amino group (-NH₂) and a carboxylic acid group (-COOH) on an aliphatic chain of four or more carbons result in high Fe/Hf values**.

  *Combination of Substructures*: Primary amine + Carboxylic acid + Aliphatic chain (≥4 carbons)

  *Explanation*: The presence of both amino and carboxyl groups on a sufficiently long aliphatic chain enhances chelation with Fe ions due to multiple coordination sites and improved molecular flexibility.

  *Examples*: 5-aminopentanoic acid, 7-aminoheptanoic acid, 8-aminooctanoic acid, (2S)-6-acetamido-2-aminohexanoic acid, 3-[2-(2-aminoethoxy)ethoxy]propanoic acid.

---

- **Rule 2**: **Modifiers featuring sulfur-containing groups (thiol (-SH) or thioether (-S-)) in conjunction with a carboxylic acid group result in high Fe/Hf values**.

  *Combination of Substructures*: Sulfur-containing group + Carboxylic acid

  *Explanation*: Sulfur atoms act as soft Lewis bases with a high affinity for Fe ions. The carboxylic acid group further stabilizes the metal coordination through additional binding.

  *Examples*: 4-sulfanylbenzoic acid, 3-sulfanylpropanoic acid, 2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid.

---

- **Rule 3**: **Aromatic carboxylic acids with strong electron-withdrawing substituents (e.g., nitro (-NO₂), halogens) at the para position result in high Fe/Hf values**.

  *Combination of Substructures*: Aromatic ring + Carboxylic acid + Electron-withdrawing group at para position

  *Explanation*: Electron-withdrawing groups increase the acidity of the carboxyl group and enhance its ability to coordinate with Fe ions by stabilizing the negative charge on the oxygen atom.

  *Examples*: 4-nitrobenzoic acid, 4-(bromomethyl)benzoic acid.

---

- **Rule 4**: **Modifiers containing multiple ether linkages (-O-) and terminal functional groups capable of coordinating (e.g., carboxylic acid, amino group) result in high Fe/Hf values**.

  *Combination of Substructures*: Polyether chain + Coordinating terminal group (e.g., -COOH, -NH₂)

  *Explanation*: Ether oxygens provide additional coordination sites, and the flexibility of polyether chains facilitates the formation of stable complexes with Fe ions.

  *Examples*: 2-[2-(2-methoxyethoxy)ethoxy]acetic acid, 3-[2-(2-aminoethoxy)ethoxy]propanoic acid.

---

- **Rule 5**: **Modifiers with aromatic nitrogen heterocycles where the nitrogen atom's lone pair is not involved in aromatic delocalization, combined with a carboxylic acid group, result in high Fe/Hf values**.

  *Combination of Substructures*: Aromatic nitrogen heterocycle (with available lone pair) + Carboxylic acid

  *Explanation*: The available lone pair on the nitrogen atom can coordinate with Fe ions, and the carboxylic acid provides an additional coordination site, enhancing overall binding affinity.

  *Examples*: 4-pyridin-4-ylbutanoic acid.

---

- **Rule 6**: **Modifiers containing both hydroxyl (-OH) and amino (-NH₂) groups on an aliphatic chain with a carboxylic acid group result in high Fe/Hf values**.

  *Combination of Substructures*: Hydroxyl group + Amino group + Carboxylic acid + Aliphatic chain

  *Explanation*: Multiple coordinating groups increase the ligand's ability to chelate Fe ions, forming stable complexes through multidentate binding.

  *Examples*: (2S)-2-aminobutanedioic acid (aspartic acid), (2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid (although this specific example resulted in low Fe/Hf, the rule applies if the steric hindrance is minimized).

---

- **Rule 7**: **Modifiers with carboxylic acid groups adjacent to carbonyl groups (-C=O) within cyclic structures result in high Fe/Hf values**.

  *Combination of Substructures*: Carboxylic acid + Adjacent carbonyl group + Cyclic structure

  *Explanation*: The proximity of carbonyl and carboxyl groups in a rigid cyclic structure facilitates chelation with Fe ions by creating an ideal spatial arrangement for bidentate binding.

  *Examples*: 1,3-dioxo-2-benzofuran-5-carboxylic acid.

---

- **Rule 8**: **Modifiers that are aliphatic carboxylic acids without additional strong coordinating functional groups result in low Fe/Hf values**.

  *Combination of Substructures*: Aliphatic chain + Carboxylic acid (no additional coordinating groups)

  *Explanation*: The lack of multiple or strong coordinating sites limits the ability to chelate Fe ions effectively, resulting in lower Fe incorporation.

  *Examples*: Octanoic acid, 4-oxoheptanedioic acid, 4-oxoheptanedioic acid.

---

- **Rule 9**: **Aromatic carboxylic acids with electron-donating groups (e.g., amino (-NH₂), hydroxyl (-OH), methyl (-CH₃)) at the para position result in low Fe/Hf values**.

  *Combination of Substructures*: Aromatic ring + Carboxylic acid + Electron-donating group at para position

  *Explanation*: Electron-donating groups decrease the acidity of the carboxyl group, reducing its ability to coordinate with Fe ions.

  *Examples*: 4-aminobenzoic acid, 4-methylbenzoic acid, 5-(4-hydroxyphenyl)pentanoic acid.

---

- **Rule 10**: **Modifiers containing aldehyde groups (-CHO) adjacent to carboxylic acid groups result in low Fe/Hf values**.

  *Combination of Substructures*: Aldehyde group adjacent to carboxylic acid

  *Explanation*: Aldehyde groups can form internal interactions or undergo side reactions, hindering effective coordination with Fe ions.

  *Examples*: 4-formylbenzoic acid, 5-formyl-2-hydroxybenzoic acid.

---

- **Rule 11**: **Modifiers with highly fluorinated alkyl chains and a carboxylic acid group result in low Fe/Hf values**.

  *Combination of Substructures*: Fluorinated alkyl chain + Carboxylic acid

  *Explanation*: The strong electron-withdrawing effect of fluorine reduces the electron density of coordinating atoms, impairing their ability to bind Fe ions.

  *Examples*: 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid.

---

- **Rule 12**: **Modifiers containing polyol structures (multiple hydroxyl groups) without additional strong coordinating groups result in low Fe/Hf values**.

  *Combination of Substructures*: Multiple hydroxyl groups (polyol) + Carboxylic acid

  *Explanation*: Extensive hydrogen bonding in polyols can lead to internal stabilization, reducing the availability of hydroxyl groups to coordinate with Fe ions.

  *Examples*: (2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid, 2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]propanoic acid.

---

- **Rule 13**: **Modifiers with bulky aromatic groups adjacent to coordinating atoms (e.g., indole ring near amino group) result in low Fe/Hf values**.

  *Combination of Substructures*: Bulky aromatic group near coordinating atom + Carboxylic acid

  *Explanation*: Steric hindrance from bulky groups can prevent effective coordination between the ligand and Fe ions.

  *Examples*: (2R)-2-amino-3-(1H-indol-3-yl)propanoic acid (tryptophan), 2-[(4-hydroxybenzoyl)amino]acetic acid.

---

- **Rule 14**: **Modifiers containing nitrogen heterocycles where the nitrogen's lone pair is involved in aromatic delocalization, combined with a carboxylic acid group, result in low Fe/Hf values**.

  *Combination of Substructures*: Aromatic nitrogen heterocycle (delocalized lone pair) + Carboxylic acid

  *Explanation*: Delocalization reduces the availability of the nitrogen lone pair for coordination with Fe ions.

  *Examples*: Pyridine-3-carboxylic acid, 1H-pyrazole-4-carboxylic acid.

---

- **Rule 15**: **Modifiers with dicarboxylic acid groups and no additional coordinating functional groups result in low Fe/Hf values**.

  *Combination of Substructures*: Two carboxylic acid groups + Aliphatic or aromatic backbone (no additional coordinating groups)

  *Explanation*: The presence of two negatively charged carboxylate groups without other coordinating sites can lead to repulsion and ineffective chelation with Fe ions.

  *Examples*: (2S)-2-aminopentanedioic acid (glutamic acid), 4-oxoheptanedioic acid.

---

**End of Rules**

**Additional Notes and Recommendations**

- **Balanced Coverage**: The revised rules aim to cover a broad range of the dataset while balancing specificity and generality.

- **Combination of Substructures**: Each rule focuses on specific combinations of functional groups, aligning with the requirement to illustrate direct combinations of substructures.

- **Physical-Chemical Considerations**: The explanations provided for each rule consider the underlying chemical principles, such as coordination chemistry, electron-donating/-withdrawing effects, and steric factors.

- **Rule Prioritization**: Rules are organized to prioritize those with higher coverage and relevance to the dataset.

**Conclusion**

The revised rules enhance clarity, predictive power, and alignment with the specified requirements. They should provide a solid basis for understanding the relationship between molecular modifiers and Fe/Hf values in the context of the radical-mediated remote δ-C(sp³)–H bond functionalization reaction.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,1,0,-1,0,0,0,0,0,0
0,0,0,0,0,1,1,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,1,0,-1,0,-1,0,0,0,0
0,0,0,0,0,1,1,0,0,0,0,-1,0,0,0
1,0,0,0,0,1,1,0,0,0,0,0,0,0,0
0,0,0,0,0,1,1,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,1,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,1,0,-1,0,0,-1,0,0,0
0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,1,0,0,0,0,-1,0,0,0
0,1,0,0,0,0,1,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
0,0,0,0,0,1,1,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,1,0,0,0,-1,0,0,0,0
0,0,0,0,0,1,1,0,-1,0,0,0,-1,-1,0
0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,1,0,-1,0,0,0,0,0,0
0,1,0,0,0,0,1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,1,0,-1,-1,0,-1,0,0,0
0,0,0,0,0,0,1,0,-1,-1,0,0,0,0,0
0,0,0,0,0,0,1,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,1,0,-1,0,0,0,0,0,0
0,1,0,0,0,1,1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,1,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,1,0,-1,0,0,-1,0,0,0
0,0,0,0,0,0,1,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,1,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,1,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,1,0,-1,0,0,-1,0,0,0
1,0,0,0,0,1,1,0,0,0,0,0,0,0,0
0,0,0,0,0,1,1,0,0,0,0,0,0,0,0
1,0,0,0,0,1,1,0,0,0,0,0,0,0,0
1,0,0,0,0,1,1,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.8; Test Accuracy: 1.0
    Train Support: 0.17714285714285713; Test Support: 0.0
    Train Confidence: 0.8197402597402597; Test Confidence: 0.4
    Train Lift: 1.6563279857397504; Test Lift: NONE
    Train Leverage: 0.056653061224489785; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and substructures
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    carboxylate_anion = '[CX3](=O)[O-]'
    carboxylic_acid_patterns = [carboxylic_acid, carboxylate_anion]
    
    # Primary amino group (-NH2)
    primary_amino = '[NX3H2]'
    
    # Aliphatic chain of four or more carbons
    aliphatic_chain_4plus = '[CH2][CH2][CH2][CH2]'
    
    # Sulfur-containing groups
    thiol = '[SX2H]'
    thioether = '[#16X2][#6]'
    
    # Aromatic ring
    aromatic_ring = 'c1ccccc1'
    
    # Electron-withdrawing groups (EWGs) at para position
    nitro_para = '[$([NX3](=O)=O)]c1ccc([NX3](=O)=O)cc1'
    halogen_para = '[F,Cl,Br,I]c1ccc([F,Cl,Br,I])cc1'
    ewg_para_patterns = [nitro_para, halogen_para]
    
    # Ether linkage (-O-)
    ether_linkage = '[#6][OX2][#6]'
    
    # Polyether chain
    polyether_chain = '[#6][OX2][#6][OX2][#6]'
    
    # Aromatic nitrogen heterocycle with available lone pair (e.g., pyridine)
    pyridine_like = '[nX2]1cccc1'
    
    # Hydroxyl group (-OH)
    hydroxyl_group = '[OX2H]'
    
    # Amino group (-NH2)
    amino_group = '[NX3H2]'
    
    # Carbonyl group (-C=O)
    carbonyl_group = '[CX3]=O'
    
    # Aldehyde group (-CHO)
    aldehyde_group = '[CX3H1]=O'
    
    # Fluorinated alkyl chain
    fluorinated_chain = '[CX4][F,Cl,Br,I]'
    
    # Polyol (multiple hydroxyl groups)
    polyol = '[#6][OX2H]'  # Multiple occurrences
    
    # Bulky aromatic groups (e.g., indole)
    indole_ring = 'c1ccc2c(c1)cc[nH]2'
    
    # Aromatic nitrogen heterocycle with delocalized lone pair (e.g., pyrrole)
    aromatic_nitrogen_delocalized = '[nH]1cccc1'
    
    # Dicarboxylic acid
    dicarboxylic_acid = '[CX3](=O)[OX1,H0][#6][CX3](=O)[OX1,H0]'
    
    # Compile SMARTS patterns
    pattern_dict = {
        'carboxylic_acid': [Chem.MolFromSmarts(pat) for pat in carboxylic_acid_patterns],
        'primary_amino': Chem.MolFromSmarts(primary_amino),
        'aliphatic_chain_4plus': Chem.MolFromSmarts(aliphatic_chain_4plus),
        'thiol': Chem.MolFromSmarts(thiol),
        'thioether': Chem.MolFromSmarts(thioether),
        'aromatic_ring': Chem.MolFromSmarts(aromatic_ring),
        'ewg_para': [Chem.MolFromSmarts(pat) for pat in ewg_para_patterns],
        'ether_linkage': Chem.MolFromSmarts(ether_linkage),
        'polyether_chain': Chem.MolFromSmarts(polyether_chain),
        'pyridine_like': Chem.MolFromSmarts(pyridine_like),
        'hydroxyl_group': Chem.MolFromSmarts(hydroxyl_group),
        'amino_group': Chem.MolFromSmarts(amino_group),
        'carbonyl_group': Chem.MolFromSmarts(carbonyl_group),
        'aldehyde_group': Chem.MolFromSmarts(aldehyde_group),
        'fluorinated_chain': Chem.MolFromSmarts(fluorinated_chain),
        'polyol': Chem.MolFromSmarts(polyol),
        'indole_ring': Chem.MolFromSmarts(indole_ring),
        'aromatic_nitrogen_delocalized': Chem.MolFromSmarts(aromatic_nitrogen_delocalized),
        'dicarboxylic_acid': Chem.MolFromSmarts(dicarboxylic_acid),
    }
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers containing a primary amino group (-NH2) and a carboxylic acid group (-COOH) on an aliphatic chain of four or more carbons result in high Fe/Hf values.',
            'patterns': ['primary_amino', 'carboxylic_acid', 'aliphatic_chain_4plus'],
            'logic': 'and',
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers featuring sulfur-containing groups (thiol (-SH) or thioether (-S-)) in conjunction with a carboxylic acid group result in high Fe/Hf values.',
            'patterns': ['carboxylic_acid'],
            'any_patterns': ['thiol', 'thioether'],
            'logic': 'and',
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Aromatic carboxylic acids with strong electron-withdrawing substituents at the para position result in high Fe/Hf values.',
            'patterns': ['aromatic_ring', 'carboxylic_acid'],
            'any_patterns': ['ewg_para'],
            'logic': 'and',
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers containing multiple ether linkages (-O-) and terminal functional groups capable of coordinating result in high Fe/Hf values.',
            'patterns': ['polyether_chain'],
            'any_patterns': ['carboxylic_acid', 'amino_group'],
            'logic': 'and',
            'prediction': 1
        },
        {
            'number': 5,
            'description': "Modifiers with aromatic nitrogen heterocycles where the nitrogen atom's lone pair is not involved in aromatic delocalization, combined with a carboxylic acid group, result in high Fe/Hf values.",
            'patterns': ['pyridine_like', 'carboxylic_acid'],
            'logic': 'and',
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers containing both hydroxyl (-OH) and amino (-NH2) groups on an aliphatic chain with a carboxylic acid group result in high Fe/Hf values.',
            'patterns': ['hydroxyl_group', 'amino_group', 'carboxylic_acid'],
            'logic': 'and',
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'Modifiers with carboxylic acid groups adjacent to carbonyl groups (-C=O) within cyclic structures result in high Fe/Hf values.',
            'patterns': ['carboxylic_acid', 'carbonyl_group'],
            'logic': 'and',
            'prediction': 1
        },
        {
            'number': 8,
            'description': 'Modifiers that are aliphatic carboxylic acids without additional strong coordinating functional groups result in low Fe/Hf values.',
            'patterns': ['carboxylic_acid'],
            'not_patterns': ['aromatic_ring', 'amino_group', 'thiol', 'thioether', 'ether_linkage', 'hydroxyl_group'],
            'logic': 'and',
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Aromatic carboxylic acids with electron-donating groups at the para position result in low Fe/Hf values.',
            'patterns': ['aromatic_ring', 'carboxylic_acid'],
            'any_patterns': ['hydroxyl_group', 'amino_group'],
            'logic': 'and',
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers containing aldehyde groups (-CHO) adjacent to carboxylic acid groups result in low Fe/Hf values.',
            'patterns': ['aldehyde_group', 'carboxylic_acid'],
            'logic': 'and',
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Modifiers with highly fluorinated alkyl chains and a carboxylic acid group result in low Fe/Hf values.',
            'patterns': ['fluorinated_chain', 'carboxylic_acid'],
            'logic': 'and',
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'Modifiers containing polyol structures (multiple hydroxyl groups) without additional strong coordinating groups result in low Fe/Hf values.',
            'patterns': ['polyol', 'carboxylic_acid'],
            'logic': 'and',
            'count_threshold': {'polyol': 2},
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Modifiers with bulky aromatic groups adjacent to coordinating atoms result in low Fe/Hf values.',
            'patterns': ['indole_ring', 'carboxylic_acid'],
            'logic': 'and',
            'prediction': -1
        },
        {
            'number': 14,
            'description': "Modifiers containing nitrogen heterocycles where the nitrogen's lone pair is involved in aromatic delocalization, combined with a carboxylic acid group, result in low Fe/Hf values.",
            'patterns': ['aromatic_nitrogen_delocalized', 'carboxylic_acid'],
            'logic': 'and',
            'prediction': -1
        },
        {
            'number': 15,
            'description': 'Modifiers with dicarboxylic acid groups and no additional coordinating functional groups result in low Fe/Hf values.',
            'patterns': ['dicarboxylic_acid'],
            'not_patterns': ['amino_group', 'thiol', 'thioether', 'ether_linkage', 'hydroxyl_group'],
            'logic': 'and',
            'prediction': -1
        }
    ]
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check required patterns
                for patt_name in rule.get('patterns', []):
                    patt = pattern_dict[patt_name]
                    if isinstance(patt, list):
                        # Some patterns are lists of patterns
                        patt_match = any(mol.HasSubstructMatch(p) for p in patt)
                    else:
                        patt_match = mol.HasSubstructMatch(patt)
                    if not patt_match:
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Check 'any' patterns (at least one must match)
                if 'any_patterns' in rule:
                    any_match = False
                    for patt_name in rule['any_patterns']:
                        patt = pattern_dict[patt_name]
                        if isinstance(patt, list):
                            if any(mol.HasSubstructMatch(p) for p in patt):
                                any_match = True
                                break
                        else:
                            if mol.HasSubstructMatch(patt):
                                any_match = True
                                break
                    if not any_match:
                        match = False
                        row.append(0)
                        continue
                # Check 'not' patterns (must not match)
                if 'not_patterns' in rule:
                    for patt_name in rule['not_patterns']:
                        patt = pattern_dict[patt_name]
                        if isinstance(patt, list):
                            if any(mol.HasSubstructMatch(p) for p in patt):
                                match = False
                                break
                        else:
                            if mol.HasSubstructMatch(patt):
                                match = False
                                break
                    if not match:
                        row.append(0)
                        continue
                # Check count thresholds
                if 'count_threshold' in rule:
                    for patt_name, threshold in rule['count_threshold'].items():
                        patt = pattern_dict[patt_name]
                        matches = mol.GetSubstructMatches(patt)
                        if len(matches) < threshold:
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # If all checks pass
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: Fe/Hf
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

---

- **Rule 1**: **Modifiers that are linear aliphatic amino acids with a primary amino group (-NH₂) and a carboxylic acid group (-COOH), especially those with a carbon chain of five or more carbons, tend to result in high Fe/Hf values.**

  *Combination of Substructures*: Primary amine + Carboxylic acid + Linear aliphatic chain (≥5 carbons)

  *Explanation*: The primary amino and carboxyl groups can coordinate effectively with iron ions. The extended carbon chain provides flexibility, facilitating optimal interaction and enhancing Fe incorporation into the catalyst.

  *Examples*:
    - **5-aminopentanoic acid**
    - **7-aminoheptanoic acid**
    - **8-aminooctanoic acid**

  *Counterexamples*: Shorter-chain amino acids or those with additional carboxyl groups may not follow this rule.
    - **(2S)-2-aminopentanedioic acid** (Low Fe/Hf value due to extra carboxyl group and shorter chain)

---

- **Rule 2**: **Modifiers containing sulfur-functional groups such as thiol (-SH) or thioether (-S-) alongside a carboxylic acid group (-COOH) result in high Fe/Hf values.**

  *Combination of Substructures*: Sulfur-containing group (thiol or thioether) + Carboxylic acid

  *Explanation*: Sulfur atoms act as soft Lewis bases with a strong affinity for iron ions. The presence of sulfur enhances the ligand's ability to chelate Fe, increasing Fe incorporation into the catalyst.

  *Examples*:
    - **3-sulfanylpropanoic acid**
    - **4-sulfanylbenzoic acid**
    - **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid**

---

- **Rule 3**: **Aromatic carboxylic acids with strong electron-withdrawing groups (e.g., nitro (-NO₂), bromomethyl (-CH₂Br)) at the para position result in high Fe/Hf values.**

  *Combination of Substructures*: Aromatic ring + Carboxylic acid + Electron-withdrawing group at para position

  *Explanation*: Electron-withdrawing groups increase the acidity of the carboxyl group, enhancing its ability to coordinate with iron ions. This facilitates greater Fe incorporation into the catalyst.

  *Examples*:
    - **4-nitrobenzoic acid**
    - **4-(bromomethyl)benzoic acid**

---

- **Rule 4**: **Aromatic carboxylic acids with electron-donating groups (e.g., amino (-NH₂), hydroxyl (-OH), methyl (-CH₃)) at the para position result in low Fe/Hf values.**

  *Combination of Substructures*: Aromatic ring + Carboxylic acid + Electron-donating group at para position

  *Explanation*: Electron-donating groups decrease the acidity of the carboxyl group, reducing its ability to coordinate with iron ions. This leads to lower Fe incorporation into the catalyst.

  *Examples*:
    - **4-aminobenzoic acid**
    - **4-methylbenzoic acid**
    - **5-(4-hydroxyphenyl)pentanoic acid**
    - **3-(4-hydroxyphenyl)propanoic acid**

---

- **Rule 5**: **Modifiers featuring flexible ether linkages (-O-) with terminal coordinating groups such as carboxyl (-COOH) or amino (-NH₂) result in high Fe/Hf values.**

  *Combination of Substructures*: Ether chains + Terminal carboxylic acid or amino group

  *Explanation*: The ether linkages provide flexibility and additional coordination sites through oxygen atoms. Terminal functional groups enhance the overall ability to chelate iron ions effectively.

  *Examples*:
    - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**
    - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**

---

- **Rule 6**: **Modifiers containing multiple hydroxyl groups (-OH), especially polyhydroxylated aliphatic chains, without additional strong coordinating groups result in low Fe/Hf values.**

  *Combination of Substructures*: Multiple hydroxyl groups + Carboxylic acid

  *Explanation*: Multiple hydroxyl groups can engage in internal hydrogen bonding or solvation, reducing their availability to coordinate with iron ions. This diminishes the ligand's chelating ability.

  *Examples*:
    - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid**
    - **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]propanoic acid**

---

- **Rule 7**: **Modifiers with fluorinated aliphatic chains result in low Fe/Hf values.**

  *Combination of Substructures*: Fluorinated alkyl chain + Carboxylic acid

  *Explanation*: Fluorine's high electronegativity withdraws electron density from coordinating groups, reducing their ability to bind with iron ions. This leads to lower Fe incorporation into the catalyst.

  *Example*:
    - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**

---

- **Rule 8**: **Simple aliphatic carboxylic acids without additional strong coordinating groups result in low Fe/Hf values.**

  *Combination of Substructures*: Aliphatic chain + Carboxylic acid (no additional coordinating groups like amino, hydroxyl, or sulfur-containing groups)

  *Explanation*: The absence of multiple or strong coordinating functional groups limits the ligand's ability to effectively chelate iron ions.

  *Example*:
    - **Octanoic acid**

---

- **Rule 9**: **Modifiers with aliphatic chains containing terminal hydroxyl groups (-OH) in addition to a carboxylic acid group (-COOH) result in high Fe/Hf values.**

  *Combination of Substructures*: Aliphatic chain + Terminal hydroxyl group + Carboxylic acid

  *Explanation*: The terminal hydroxyl group provides an additional coordination site, and the flexibility of the chain allows for effective interaction with iron ions, enhancing Fe incorporation.

  *Example*:
    - **7-hydroxyheptanoic acid**

  *Exceptions*: Modifiers with hydroxyl groups on aromatic rings may not follow this rule due to different electronic and steric environments.

---

- **Rule 10**: **Modifiers containing heteroaromatic rings with nitrogen atoms, linked via an alkyl chain to a carboxylic acid group, result in high Fe/Hf values.**

  *Combination of Substructures*: Heteroaromatic ring with nitrogen (e.g., pyridine) + Alkyl linker + Carboxylic acid

  *Explanation*: The nitrogen atom in the heteroaromatic ring acts as an additional coordination site. The alkyl linker reduces steric hindrance, allowing effective chelation with iron ions.

  *Example*:
    - **4-pyridin-4-ylbutanoic acid**

  *Counterexamples*: If the carboxyl group is directly attached to the ring, as in **pyridine-3-carboxylic acid**, steric or electronic factors may hinder coordination, leading to low Fe/Hf values.

---

- **Rule 11**: **Amino acids with bulky aromatic side chains directly attached to the α-carbon result in variable Fe/Hf values depending on the side chain's size and ability to coordinate.**

  *Combination of Substructures*: Amino acid backbone + Bulky aromatic side chain

  *Explanation*: Larger side chains can introduce steric hindrance or engage in π-stacking interactions that affect iron coordination. The electronic properties of the side chain also influence Fe incorporation.

  *Examples*:
    - **(2S)-2-amino-3-phenylpropanoic acid** (High Fe/Hf value)
    - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (Low Fe/Hf value)

---

- **Rule 12**: **Modifiers with formyl (-CHO) or carbonyl groups adjacent to a carboxylic acid, especially in aromatic systems, result in low Fe/Hf values.**

  *Combination of Substructures*: Aromatic ring + Formyl or carbonyl group adjacent to carboxylic acid

  *Explanation*: The proximity of electron-withdrawing groups like formyl can reduce the electron density on the carboxylate oxygen, diminishing its ability to coordinate with iron ions.

  *Examples*:
    - **5-formyl-2-hydroxybenzoic acid**
    - **4-formylbenzoic acid**

---

- **Rule 13**: **Modifiers containing aliphatic chains with multiple coordinating groups (e.g., amino and acetamido groups) result in high Fe/Hf values due to enhanced chelation.**

  *Combination of Substructures*: Aliphatic chain + Multiple coordinating groups (amino, acetamido) + Carboxylic acid

  *Explanation*: Multiple coordination sites increase the ligand's ability to bind iron ions effectively, leading to higher Fe incorporation.

  *Example*:
    - **(2S)-6-acetamido-2-aminohexanoic acid**

---

- **Rule 14**: **Modifiers with aromatic rings bearing hydroxyl groups adjacent to amide or ester linkages result in low Fe/Hf values.**

  *Combination of Substructures*: Aromatic ring + Hydroxyl group + Adjacent amide or ester linkage

  *Explanation*: Intramolecular hydrogen bonding between the hydroxyl and carbonyl groups can reduce the availability of these groups to coordinate with iron ions.

  *Example*:
    - **2-[(4-hydroxybenzoyl)amino]acetic acid**

---

- **Rule 15**: **Modifiers containing cyclic diketones or keto acids with potential for chelation may result in low Fe/Hf values due to steric hindrance or unfavorable geometry affecting coordination.**

  *Combination of Substructures*: Cyclic diketones or keto acids adjacent to carboxylic acid

  *Explanation*: Despite the presence of chelating groups, steric factors or rigid structures can impede effective interaction with iron ions, leading to lower Fe incorporation.

  *Example*:
    - **1,3-dioxo-2-benzofuran-5-carboxylic acid**

---

**End of Rules**

---

These rules have been developed by analyzing the provided dataset and considering the underlying physicochemical properties of the modifiers. They aim to predict whether a modifier will result in a high or low Fe/Hf value based on structural features, particularly focusing on combinations of functional groups and their positions within the molecule. The rules strive to cover a broad range of the dataset while balancing simplicity and complexity to provide clear and predictive guidelines.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,1,1,0,0,0,0,0
1,0,0,0,0,0,0,0,1,0,0,0,0,0,0
0,0,1,0,0,0,0,0,1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
1,0,0,0,0,0,0,0,1,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,1,0,0,0,0,-1,0
0,0,0,0,0,0,0,0,1,1,0,0,0,0,0
0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
0,1,0,0,0,0,0,0,1,0,0,0,0,0,0
0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,1,1,0,0,0,0,0
0,0,0,0,0,0,0,0,1,1,0,0,0,0,0
0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
0,1,0,0,0,0,0,0,1,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,1,0,0,0,0,-1,0
0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,1,1,0,0,0,0,0
0,0,0,-1,0,0,0,0,1,0,0,0,0,0,0
1,1,0,0,0,0,0,0,1,0,0,0,1,0,0
0,0,0,0,0,0,0,0,1,1,0,0,0,0,0
0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,1,0,0,0,0,-1,0
0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,1,0,0,0,0,-1,0
1,0,0,0,0,0,0,0,1,0,0,0,0,0,0
1,0,0,0,1,0,0,0,1,0,0,0,0,0,0
1,0,0,0,0,0,0,0,1,0,0,0,1,0,0
1,0,0,0,0,0,0,0,1,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.8; Test Accuracy: 0.0
    Train Support: 0.1357142857142857; Test Support: 0.0
    Train Confidence: 0.9642857142857143; Test Confidence: 0.5
    Train Lift: 1.956699346405229; Test Lift: NONE
    Train Leverage: 0.06510204081632653; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    carboxylate_anion = '[CX3](=O)[O-]'
    carboxylic_acids = [carboxylic_acid, carboxylate_anion]
    
    # Primary amine (-NH2)
    primary_amine = '[NX3;H2][#6]'
    
    # Secondary amine (-NH-)
    secondary_amine = '[NX3;H1][#6][#6]'
    
    # Thiol (-SH)
    thiol = '[SX2H]'
    
    # Thioether (-S-)
    thioether = '[SX2][#6][#6]'
    
    # Ether linkage (-O-)
    ether_linkage = '[#6][OX2][#6]'
    
    # Aromatic ring
    aromatic_ring = '[a]'
    
    # Electron-withdrawing groups (EWGs)
    nitro_group = '[NX3](=O)=O'
    halogens = '[F,Cl,Br,I]'
    trifluoromethyl = '[CX4](F)(F)F'
    
    # Electron-donating groups (EDGs)
    hydroxyl_group = '[OX2H]'
    methoxy_group = '[OX2][CH3]'
    amino_group = '[NX3;H2,H1][#6]'
    
    # Hydroxyl or methoxy group on aromatic ring
    hydroxyl_or_methoxy_on_aromatic = ['[c][OX2H]', '[c][OX2][CH3]']
    
    # Aromatic amine attached directly to aromatic ring
    aromatic_amine = '[c][NX3;H2,H1]'
    
    # Heteroaromatic nitrogen
    heteroaromatic_nitrogen = '[n]'
    
    # Multiple hydroxyl groups (polyols)
    polyol = '[OX2H]'
    
    # Fluorinated aliphatic chain
    fluorinated_chain = '[#6][CX4](F)(F)F'
    
    # Bulky aromatic side chain attached to alpha carbon
    bulky_aromatic_side_chain = '[CX3](=O)[NX3][CX4][CX4][c]'
    
    # Carbonyl group adjacent to carboxylic acid (e.g., formyl group)
    formyl_adjacent_to_carboxylic_acid = '[CX3](=O)[c][CX3](=O)[OX2H1]'
    
    # Keto group adjacent to carboxylic acid
    keto_adjacent_to_carboxylic_acid = '[CX3](=O)[CX3](=O)[OX2H1]'
    
    # Define the rules as a list of dictionaries
    rules = [
        {
            'number': 1,
            'description': 'Rule 1: Linear aliphatic amino acids with a primary amino group (-NH2) and a carboxylic acid group (-COOH), especially with a carbon chain of five or more carbons.',
            'patterns': [
                [primary_amine],
                carboxylic_acids
            ],
            'additional_checks': 'aliphatic_chain_length >= 5',
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Rule 2: Modifiers containing sulfur-functional groups such as thiol (-SH) or thioether (-S-) alongside a carboxylic acid group (-COOH).',
            'patterns': [
                [thiol, thioether],
                carboxylic_acids
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Rule 3: Aromatic carboxylic acids with strong electron-withdrawing groups (e.g., nitro (-NO2), bromomethyl (-CH2Br)) at the para position.',
            'patterns': [
                ['[c][c](=[O])[OX2H1]', '[c][NX3](=O)=O', '[c][CH2][Br,Cl,Br,I]']
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Rule 4: Aromatic carboxylic acids with electron-donating groups (e.g., amino (-NH2), hydroxyl (-OH), methyl (-CH3)) at the para position.',
            'patterns': [
                ['[c][c](=[O])[OX2H1]', '[c][NX3;H2,H1]', '[c][OX2H]', '[c][CH3]']
            ],
            'prediction': -1
        },
        {
            'number': 5,
            'description': 'Rule 5: Modifiers featuring flexible ether linkages (-O-) with terminal coordinating groups such as carboxyl (-COOH) or amino (-NH2).',
            'patterns': [
                [ether_linkage],
                ['[NX3;H2]', carboxylic_acid]
            ],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Rule 6: Modifiers containing multiple hydroxyl groups (-OH) without additional strong coordinating groups.',
            'patterns': [
                [polyol],
                carboxylic_acids
            ],
            'count_threshold': {'[OX2H]': 2},
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Rule 7: Modifiers with fluorinated aliphatic chains.',
            'patterns': [
                [fluorinated_chain]
            ],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Rule 8: Simple aliphatic carboxylic acids without additional strong coordinating groups.',
            'patterns': [
                carboxylic_acids
            ],
            'exclude_patterns': [
                [primary_amine, secondary_amine, thiol, thioether, ether_linkage, polyol, aromatic_ring]
            ],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Rule 9: Modifiers with aliphatic chains containing terminal hydroxyl groups (-OH) in addition to a carboxylic acid group (-COOH).',
            'patterns': [
                [hydroxyl_group],
                carboxylic_acids
            ],
            'terminal_group': hydroxyl_group,
            'prediction': 1
        },
        {
            'number': 10,
            'description': 'Rule 10: Modifiers containing heteroaromatic rings with nitrogen atoms, linked via an alkyl chain to a carboxylic acid group.',
            'patterns': [
                [heteroaromatic_nitrogen],
                carboxylic_acids
            ],
            'prediction': 1
        },
        {
            'number': 11,
            'description': 'Rule 11: Amino acids with bulky aromatic side chains directly attached to the α-carbon.',
            'patterns': [
                [bulky_aromatic_side_chain]
            ],
            'prediction': 1
        },
        {
            'number': 12,
            'description': 'Rule 12: Modifiers with formyl (-CHO) or carbonyl groups adjacent to a carboxylic acid.',
            'patterns': [
                [formyl_adjacent_to_carboxylic_acid]
            ],
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Rule 13: Modifiers containing aliphatic chains with multiple coordinating groups (e.g., amino and acetamido groups).',
            'patterns': [
                [primary_amine],
                ['[NX3][CX3](=O)[#6]']
            ],
            'prediction': 1
        },
        {
            'number': 14,
            'description': 'Rule 14: Modifiers with aromatic rings bearing hydroxyl groups adjacent to amide or ester linkages.',
            'patterns': [
                ['[c][OX2H]', '[c][CX3](=O)[NX3]']
            ],
            'prediction': -1
        },
        {
            'number': 15,
            'description': 'Rule 15: Modifiers containing cyclic diketones or keto acids with potential for chelation.',
            'patterns': [
                [keto_adjacent_to_carboxylic_acid]
            ],
            'prediction': -1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(pat) for pat in group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for group in rule['exclude_patterns']:
                compiled_group = [Chem.MolFromSmarts(pat) for pat in group]
                compiled_excludes.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_excludes
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        matches = mol.GetSubstructMatches(pat)
                        if matches:
                            # If a count threshold is specified for this pattern
                            if 'count_threshold' in rule and pat.GetSmarts() in rule['count_threshold']:
                                threshold = rule['count_threshold'][pat.GetSmarts()]
                                if len(matches) >= threshold:
                                    group_match = True
                                    break
                            else:
                                group_match = True
                                break
                    if not group_match:
                        match = False
                        break
                if match:
                    # Additional checks if any
                    if 'additional_checks' in rule and rule['number'] == 1:
                        # For Rule 1, check aliphatic chain length
                        num_carbons = len([atom for atom in mol.GetAtoms() if atom.GetAtomicNum() == 6])
                        has_aromatic = mol.HasSubstructMatch(Chem.MolFromSmarts('[a]'))
                        if num_carbons < 5 or has_aromatic:
                            match = False
                    elif 'terminal_group' in rule:
                        # For Rule 9, check if hydroxyl group is terminal
                        terminal_hydroxyl = Chem.MolFromSmarts('[#6][OX2H]')
                        if not mol.HasSubstructMatch(terminal_hydroxyl):
                            match = False
                    if match:
                        row.append(rule['prediction'])
                    else:
                        row.append(0)
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: Fe/Hf
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

---

- **Rule 1**: **Modifiers that are linear aliphatic amino acids with a primary amino group (-NH₂) and a single terminal carboxylic acid group (-COOH), with a carbon chain length of five or more carbons, tend to result in high Fe/Hf values.**

  **Combination of Substructures**: Primary amine + Carboxylic acid + Linear aliphatic chain (≥5 carbons)

  **Explanation**: The primary amino and carboxyl groups can effectively coordinate with iron ions. An extended carbon chain provides flexibility, facilitating optimal interaction and enhancing Fe incorporation into the catalyst.

  **Examples**:
  - **5-aminopentanoic acid**
  - **7-aminoheptanoic acid**
  - **8-aminooctanoic acid**

  **Counterexamples**: Shorter-chain amino acids or those with additional carboxyl groups may not follow this rule.
  - **(2S)-2-aminopentanedioic acid** (Low Fe/Hf value due to extra carboxyl group and shorter chain)

---

- **Rule 2**: **Modifiers containing sulfur-functional groups such as thiol (-SH) or thioether (-S-) alongside a carboxylic acid group (-COOH) result in high Fe/Hf values.**

  **Combination of Substructures**: Sulfur-containing group (thiol or thioether) + Carboxylic acid

  **Explanation**: Sulfur atoms act as soft Lewis bases with a strong affinity for iron ions. The presence of sulfur enhances the ligand's ability to chelate Fe, increasing Fe incorporation into the catalyst.

  **Examples**:
  - **3-sulfanylpropanoic acid**
  - **4-sulfanylbenzoic acid**
  - **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid**

---

- **Rule 3**: **Aromatic carboxylic acids with strong electron-withdrawing groups (e.g., nitro (-NO₂), bromomethyl (-CH₂Br)) at the para position result in high Fe/Hf values.**

  **Combination of Substructures**: Aromatic ring + Carboxylic acid + Electron-withdrawing group at para position

  **Explanation**: Electron-withdrawing groups increase the acidity of the carboxyl group, enhancing its ability to coordinate with iron ions. This facilitates greater Fe incorporation into the catalyst.

  **Examples**:
  - **4-nitrobenzoic acid**
  - **4-(bromomethyl)benzoic acid**

---

- **Rule 4**: **Aromatic carboxylic acids with electron-donating groups (e.g., amino (-NH₂), hydroxyl (-OH), methyl (-CH₃)) at the para position result in low Fe/Hf values.**

  **Combination of Substructures**: Aromatic ring + Carboxylic acid + Electron-donating group at para position

  **Explanation**: Electron-donating groups decrease the acidity of the carboxyl group, reducing its ability to coordinate with iron ions. This leads to lower Fe incorporation into the catalyst.

  **Examples**:
  - **4-aminobenzoic acid**
  - **4-methylbenzoic acid**
  - **5-(4-hydroxyphenyl)pentanoic acid**
  - **3-(4-hydroxyphenyl)propanoic acid**

---

- **Rule 5**: **Modifiers featuring flexible ether linkages (-O-) with terminal coordinating groups such as amino (-NH₂) or carboxyl (-COOH) result in high Fe/Hf values.**

  **Combination of Substructures**: Ether chains + Terminal amino or carboxyl group

  **Explanation**: The ether linkages provide flexibility and additional coordination sites through oxygen atoms. Terminal functional groups enhance the overall ability to chelate iron ions effectively.

  **Examples**:
  - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**
  - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**

---

- **Rule 6**: **Modifiers containing multiple hydroxyl groups (-OH) without additional strong coordinating groups result in low Fe/Hf values.**

  **Combination of Substructures**: Multiple hydroxyl groups + Carboxylic acid

  **Explanation**: Multiple hydroxyl groups can engage in internal hydrogen bonding or solvation, reducing their availability to coordinate with iron ions. This diminishes the ligand's chelating ability.

  **Examples**:
  - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid**
  - **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]propanoic acid**

---

- **Rule 7**: **Modifiers with aromatic rings bearing hydroxyl groups (-OH) result in low Fe/Hf values.**

  **Combination of Substructures**: Aromatic ring + Hydroxyl group + Carboxylic acid

  **Explanation**: The hydroxyl group on the aromatic ring can form intramolecular hydrogen bonds or engage in resonance structures that reduce its ability to coordinate with iron ions.

  **Examples**:
  - **5-(4-hydroxyphenyl)pentanoic acid**
  - **3-(4-hydroxyphenyl)propanoic acid**
  - **2-[(4-hydroxybenzoyl)amino]acetic acid**

---

- **Rule 8**: **Modifiers with fluorinated aliphatic chains result in low Fe/Hf values due to decreased coordinating ability.**

  **Combination of Substructures**: Fluorinated alkyl chain + Carboxylic acid

  **Explanation**: Fluorine's high electronegativity withdraws electron density from coordinating groups, reducing their ability to bind with iron ions. This leads to lower Fe incorporation into the catalyst.

  **Example**:
  - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**

---

- **Rule 9**: **Simple aliphatic carboxylic acids without additional strong coordinating groups result in low Fe/Hf values.**

  **Combination of Substructures**: Aliphatic chain + Carboxylic acid (no additional coordinating groups like amino, hydroxyl, or sulfur-containing groups)

  **Explanation**: The absence of multiple or strong coordinating functional groups limits the ligand's ability to effectively chelate iron ions.

  **Example**:
  - **Octanoic acid**

---

- **Rule 10**: **Modifiers containing heteroaromatic rings with nitrogen atoms, linked via an alkyl chain to a carboxylic acid group, result in high Fe/Hf values.**

  **Combination of Substructures**: Heteroaromatic ring with nitrogen (e.g., pyridine) + Alkyl linker + Carboxylic acid

  **Explanation**: The nitrogen atom in the heteroaromatic ring acts as an additional coordination site. The alkyl linker reduces steric hindrance, allowing effective chelation with iron ions.

  **Example**:
  - **4-pyridin-4-ylbutanoic acid**

  **Counterexample**: If the carboxyl group is directly attached to the ring, as in **pyridine-3-carboxylic acid**, steric or electronic factors may hinder coordination, leading to low Fe/Hf values.

---

- **Rule 11**: **Modifiers with formyl (-CHO) or carbonyl groups adjacent to a carboxylic acid on aromatic rings result in low Fe/Hf values.**

  **Combination of Substructures**: Aromatic ring + Formyl or carbonyl group adjacent to carboxylic acid

  **Explanation**: The proximity of electron-withdrawing groups like formyl can reduce the electron density on the carboxylate oxygen, diminishing its ability to coordinate with iron ions.

  **Examples**:
  - **5-formyl-2-hydroxybenzoic acid**
  - **4-formylbenzoic acid**

---

- **Rule 12**: **Amino acids with bulky aromatic side chains directly attached to the α-carbon result in variable Fe/Hf values depending on the side chain's ability to coordinate.**

  **Combination of Substructures**: Amino acid backbone + Bulky aromatic side chain

  **Explanation**: Larger side chains can introduce steric hindrance or engage in π-stacking interactions that affect iron coordination. The electronic properties of the side chain also influence Fe incorporation.

  **Examples**:
  - **(2S)-2-amino-3-phenylpropanoic acid** (High Fe/Hf value due to favorable coordination)
  - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (Low Fe/Hf value potentially due to steric hindrance)

---

- **Rule 13**: **Modifiers with aliphatic chains containing terminal hydroxyl groups (-OH) in addition to a carboxylic acid group (-COOH) result in high Fe/Hf values.**

  **Combination of Substructures**: Aliphatic chain + Terminal hydroxyl group + Carboxylic acid

  **Explanation**: The terminal hydroxyl group provides an additional coordination site, and the flexibility of the chain allows for effective interaction with iron ions, enhancing Fe incorporation.

  **Example**:
  - **7-hydroxyheptanoic acid**

  **Exceptions**: Modifiers with hydroxyl groups on aromatic rings may not follow this rule due to different electronic and steric environments.

---

- **Rule 14**: **Modifiers containing cyclic diketones or keto acids with potential for chelation may result in low Fe/Hf values due to steric hindrance or unfavorable geometry affecting coordination.**

  **Combination of Substructures**: Cyclic diketones or keto acids adjacent to carboxylic acid

  **Explanation**: Despite the presence of chelating groups, steric factors or rigid structures can impede effective interaction with iron ions, leading to lower Fe incorporation.

  **Example**:
  - **1,3-dioxo-2-benzofuran-5-carboxylic acid**

---

- **Rule 15**: **Modifiers containing aliphatic chains with multiple coordinating groups (e.g., amino and acetamido groups) result in high Fe/Hf values due to enhanced chelation.**

  **Combination of Substructures**: Aliphatic chain + Multiple coordinating groups (amino, acetamido) + Carboxylic acid

  **Explanation**: Multiple coordination sites increase the ligand's ability to bind iron ions effectively, leading to higher Fe incorporation.

  **Example**:
  - **(2S)-6-acetamido-2-aminohexanoic acid**

---

**End of Rules**

---

These rules have been developed by analyzing the provided dataset and considering the underlying physicochemical properties of the modifiers. They aim to predict whether a modifier will result in a high or low Fe/Hf value based on structural features, particularly focusing on combinations of functional groups and their positions within the molecule. The rules strive to cover a broad range of the dataset while balancing simplicity and complexity to provide clear and predictive guidelines.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,-1,-1,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,-1,-1,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,-1,-1,0,-1,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,-1,-1,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6571428571428571; Test Accuracy: 1.0
    Train Support: 0.17142857142857143; Test Support: 0.0
    Train Confidence: 0.9; Test Confidence: 0.5
    Train Lift: 1.7500000000000002; Test Lift: NONE
    Train Leverage: 0.06857142857142857; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define the rules with their associated SMARTS patterns and predictions
    rules = [
        {
            'name': 'Rule 1',
            'description': 'Linear aliphatic amino acids with primary amine and terminal carboxylic acid, chain length >=5',
            'smarts': '[NX3;H2][CH2]{4,}[CH2][CX3](=O)[OX1H0-,OX2H1]',
            'prediction': 1
        },
        {
            'name': 'Rule 2',
            'description': 'Sulfur-functional groups (thiol or thioether) with carboxylic acid',
            'smarts': '([SX2H][#6][CX3](=O)[OX1H0-,OX2H1])|([SX2][#6][#6][CX3](=O)[OX1H0-,OX2H1])',
            'prediction': 1
        },
        {
            'name': 'Rule 3',
            'description': 'Aromatic carboxylic acids with strong electron-withdrawing groups at para position',
            'smarts': 'c1cc([F,Cl,Br,I,N+](=O)[O-],C(=O)[#6],C#N)c(cc1)C(=O)[OX1H0-,OX2H1]',
            'prediction': 1
        },
        {
            'name': 'Rule 4',
            'description': 'Aromatic carboxylic acids with electron-donating groups at para position',
            'smarts': 'c1cc([NX3;H2,H1],O,OC)[cH]c1C(=O)[OX1H0-,OX2H1]',
            'prediction': -1
        },
        {
            'name': 'Rule 5',
            'description': 'Ether linkages with terminal amino or carboxyl groups',
            'smarts': '([#6]-O){2,}[#6]-[NX3;H2]|([#6]-O){2,}[#6]-[CX3](=O)[OX1H0-,OX2H1]',
            'prediction': 1
        },
        {
            'name': 'Rule 6',
            'description': 'Multiple hydroxyl groups without strong coordinating groups',
            'smarts': '[OX2H]',
            'exclude_smarts': '[NX3;H2]|[SX2H]|[#6][SX2][#6]|[#6]-O-[#6]',
            'min_count': 2,
            'prediction': -1
        },
        {
            'name': 'Rule 7',
            'description': 'Aromatic rings bearing hydroxyl groups',
            'smarts': 'c[OX2H]',
            'prediction': -1
        },
        {
            'name': 'Rule 8',
            'description': 'Fluorinated aliphatic chains',
            'smarts': '[#6][#6][#6][#6][#6][F]',
            'prediction': -1
        },
        {
            'name': 'Rule 9',
            'description': 'Simple aliphatic carboxylic acids without strong coordinating groups',
            'smarts': '[CX3](=O)[OX1H0-,OX2H1]',
            'exclude_smarts': '[NX3;H2]|[SX2H]|[#6][SX2][#6]|[#6]-O-[#6]|[OX2H]|c',
            'prediction': -1
        },
        {
            'name': 'Rule 10',
            'description': 'Heteroaromatic rings with nitrogen linked via alkyl chain to carboxylic acid',
            'smarts': 'n[cH0;!$([c][!#6])][CH2]{1,4}[CX3](=O)[OX1H0-,OX2H1]',
            'prediction': 1
        },
        {
            'name': 'Rule 11',
            'description': 'Formyl or carbonyl groups adjacent to carboxylic acid on aromatic rings',
            'smarts': '[#6]1([C](=O)[#6])[c][c][c][c][c]1C(=O)[OX1H0-,OX2H1]',
            'prediction': -1
        },
        {
            'name': 'Rule 12',
            'description': 'Amino acids with bulky aromatic side chains directly attached to the alpha-carbon',
            'smarts': '[NX3;H2][C@H]([CX3](=O)[OX1H0-,OX2H1])[c]',
            'prediction': 0  # Variable Fe/Hf values, assign 0
        },
        {
            'name': 'Rule 13',
            'description': 'Aliphatic chains with terminal hydroxyl groups and carboxylic acid',
            'smarts': '[CH2]{1,}[OX2H][CH2]{1,}[CX3](=O)[OX1H0-,OX2H1]',
            'prediction': 1
        },
        {
            'name': 'Rule 14',
            'description': 'Modifiers containing cyclic diketones or keto acids adjacent to carboxylic acid',
            'smarts': 'O=C1C=CC(=O)C=C1C(=O)[OX1H0-,OX2H1]',
            'prediction': -1
        },
        {
            'name': 'Rule 15',
            'description': 'Aliphatic chains with multiple coordinating groups (e.g., amino and acetamido) and carboxylic acid',
            'smarts': '[NX3;H2][CH2]{4,}[NX3][CX3](=O)[#6][CX3](=O)[OX1H0-,OX2H1]',
            'prediction': 1
        }
    ]

    # Compile SMARTS patterns
    for rule in rules:
        try:
            rule['pattern_mol'] = Chem.MolFromSmarts(rule['smarts'])
            if 'exclude_smarts' in rule:
                rule['exclude_pattern_mol'] = Chem.MolFromSmarts(rule['exclude_smarts'])
            else:
                rule['exclude_pattern_mol'] = None
        except Exception:
            rule['pattern_mol'] = None
            rule['exclude_pattern_mol'] = None

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = False
                # Check exclude patterns if any
                if rule['exclude_pattern_mol']:
                    if mol.HasSubstructMatch(rule['exclude_pattern_mol']):
                        row.append(0)
                        continue
                # Check the main SMARTS pattern
                if rule['pattern_mol']:
                    matches = mol.GetSubstructMatches(rule['pattern_mol'])
                    if matches:
                        # If a minimum count is specified
                        if 'min_count' in rule:
                            if len(matches) >= rule['min_count']:
                                match = True
                        else:
                            match = True
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[rule['name'] for rule in rules])
    return df

--------------------------------------------------
    Target Name: Fe/Hf
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

---

- **Rule 1**: **Modifiers that are linear aliphatic amino acids with a primary amino group (-NH₂) and a single terminal carboxylic acid group (-COOH), with a carbon chain length of five or more carbons, result in high Fe/Hf values.**

  **Combination of Substructures**: Linear aliphatic chain (≥5 carbons) + Terminal primary amine (-NH₂) + Carboxylic acid (-COOH)

  **Explanation**: The primary amino and carboxyl groups can effectively chelate iron ions. An extended carbon chain provides flexibility, facilitating optimal interaction and enhancing Fe incorporation into the catalyst.

  **Examples**:
  - **5-aminopentanoic acid**
  - **7-aminoheptanoic acid**
  - **8-aminooctanoic acid**

  **Counterexample**:
  - **(2S)-2-aminopentanedioic acid** (Low Fe/Hf value due to an additional carboxyl group reducing coordination efficiency)

---

- **Rule 2**: **Aromatic carboxylic acids with strong electron-withdrawing groups, such as nitro (-NO₂) or halogens, at the para position result in high Fe/Hf values.**

  **Combination of Substructures**: Aromatic ring + Carboxylic acid (-COOH) + Electron-withdrawing group at para position

  **Explanation**: Electron-withdrawing groups increase the acidity of the carboxyl group, enhancing its ability to coordinate with iron ions. This facilitates greater Fe incorporation into the catalyst.

  **Examples**:
  - **4-nitrobenzoic acid**
  - **4-(bromomethyl)benzoic acid**

  **Counterexample**:
  - **4-methylbenzoic acid** (Low Fe/Hf value due to the electron-donating methyl group decreasing coordination efficiency)

---

- **Rule 3**: **Modifiers containing sulfur-functional groups such as thiol (-SH) or thioether (-S-) alongside a carboxylic acid group (-COOH) result in high Fe/Hf values.**

  **Combination of Substructures**: Sulfur-containing group (thiol or thioether) + Carboxylic acid (-COOH)

  **Explanation**: Sulfur atoms act as soft Lewis bases with a strong affinity for iron ions. The presence of sulfur enhances the ligand's ability to chelate Fe, increasing Fe incorporation into the catalyst.

  **Examples**:
  - **3-sulfanylpropanoic acid**
  - **4-sulfanylbenzoic acid**
  - **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid**

---

- **Rule 4**: **Modifiers featuring flexible ether linkages (-O-) with terminal coordinating groups such as amino (-NH₂) or carboxyl (-COOH) result in high Fe/Hf values.**

  **Combination of Substructures**: Ether chains (-O-) + Terminal amino or carboxyl group

  **Explanation**: The ether linkages provide flexibility and additional coordination sites through oxygen atoms. Terminal functional groups enhance the overall ability to chelate iron ions effectively.

  **Examples**:
  - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**
  - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**

---

- **Rule 5**: **Modifiers containing multiple strong coordinating groups, such as amino acids with additional amino or acetamido groups, result in high Fe/Hf values due to enhanced chelation.**

  **Combination of Substructures**: Multiple coordinating groups (e.g., amino (-NH₂), acetamido (-NHCOCH₃)) + Carboxylic acid (-COOH)

  **Explanation**: Multiple coordination sites increase the ligand's ability to bind iron ions effectively, leading to higher Fe incorporation into the catalyst.

  **Examples**:
  - **(2S)-6-acetamido-2-aminohexanoic acid**
  - **(2S)-2-aminobutanedioic acid**

---

- **Rule 6**: **Aromatic carboxylic acids with electron-donating groups such as amino (-NH₂), hydroxyl (-OH), or methyl (-CH₃) at the para position result in low Fe/Hf values.**

  **Combination of Substructures**: Aromatic ring + Carboxylic acid (-COOH) + Electron-donating group at para position

  **Explanation**: Electron-donating groups decrease the acidity of the carboxyl group, reducing its ability to coordinate with iron ions. This leads to lower Fe incorporation into the catalyst.

  **Examples**:
  - **4-aminobenzoic acid**
  - **4-methylbenzoic acid**
  - **3-(4-hydroxyphenyl)propanoic acid**

---

- **Rule 7**: **Modifiers containing multiple hydroxyl groups (-OH) on aliphatic chains result in low Fe/Hf values.**

  **Combination of Substructures**: Aliphatic chain + Multiple hydroxyl groups (-OH) + Carboxylic acid (-COOH)

  **Explanation**: Multiple hydroxyl groups can engage in internal hydrogen bonding or solvation, reducing their availability to coordinate with iron ions. This diminishes the ligand's chelating ability.

  **Examples**:
  - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid**
  - **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]propanoic acid**

---

- **Rule 8**: **Simple aliphatic carboxylic acids without additional strong coordinating groups result in low Fe/Hf values.**

  **Combination of Substructures**: Aliphatic chain + Carboxylic acid (-COOH)

  **Explanation**: The absence of multiple or strong coordinating functional groups limits the ligand's ability to effectively chelate iron ions.

  **Example**:
  - **Octanoic acid**

---

- **Rule 9**: **Modifiers containing heteroaromatic rings with nitrogen atoms, connected via an alkyl chain to a carboxylic acid group, result in high Fe/Hf values.**

  **Combination of Substructures**: Heteroaromatic ring with nitrogen (e.g., pyridine) + Alkyl linker + Carboxylic acid (-COOH)

  **Explanation**: The nitrogen atom in the heteroaromatic ring acts as an additional coordination site. The alkyl linker reduces steric hindrance, allowing effective chelation with iron ions.

  **Example**:
  - **4-pyridin-4-ylbutanoic acid**

  **Counterexample**:
  - **Pyridine-3-carboxylic acid** (Low Fe/Hf value due to the carboxyl group directly attached to the ring, causing steric hindrance and reduced coordination)

---

- **Rule 10**: **Modifiers with electron-withdrawing carbonyl groups such as formyl (-CHO) adjacent to a carboxylic acid on aromatic rings result in low Fe/Hf values.**

  **Combination of Substructures**: Aromatic ring + Carbonyl group (-C=O) adjacent to carboxylic acid (-COOH)

  **Explanation**: The proximity of electron-withdrawing carbonyl groups reduces the electron density on the carboxylate oxygen, diminishing its ability to coordinate with iron ions.

  **Examples**:
  - **5-formyl-2-hydroxybenzoic acid**
  - **4-formylbenzoic acid**

---

- **Rule 11**: **Modifiers with fluorinated aliphatic chains result in low Fe/Hf values due to decreased coordinating ability caused by strong electron-withdrawing fluorine atoms.**

  **Combination of Substructures**: Fluorinated alkyl chain + Carboxylic acid (-COOH)

  **Explanation**: Fluorine's high electronegativity withdraws electron density from coordinating groups, reducing their ability to bind with iron ions. This leads to lower Fe incorporation into the catalyst.

  **Example**:
  - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**

---

**End of Rules**

---

These rules have been developed by thoroughly analyzing the provided dataset and considering the underlying physicochemical properties of the modifiers. The rules aim to predict whether a modifier will result in a high or low Fe/Hf value based on structural features, focusing on combinations of functional groups and their positions within the molecule. By balancing simplicity and complexity, the rules cover a broad range of the dataset and provide clear, predictive guidelines for the relationship between molecular modifiers and Fe/Hf values.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11
0,0,0,0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0
0,0,1,0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,-1
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0
0,0,1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,-1,0
0,1,0,0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0
0,0,1,0,1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,-1
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6571428571428571; Test Accuracy: 0.0
    Train Support: 0.05714285714285714; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 2.013071895424837; Test Lift: NONE
    Train Leverage: 0.02873469387755102; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Import RDKit modules
    from rdkit import Chem
    # Define SMARTS patterns for functional groups with corrections from suggestions
    
    # Rule 1: Linear aliphatic amino acids with terminal primary amino group and carboxylic acid, chain length >=5 carbons
    rule1_patterns = {
        'primary_amino_terminal': '[NX3H2][C]',  # Primary amino group bonded to one carbon
        'carboxylic_acid_terminal': '[C](=O)[O;H1,-1]',  # Carboxylic acid group bonded to one carbon
        'aliphatic_chain': '[C;X4;!$(C(-*)(-*)(-*)(-*));!R]',  # Sp3 carbons not in ring or branching
    }
    
    # Rule 2: Aromatic carboxylic acids with EWGs at para position
    rule2_patterns = {
        'aromatic_carboxylic_acid': 'c1ccc([C](=O)[O;H1,-1])cc1',
        'para_EWG': 'c1cc([$(C(F)(F)F),$([N+](=O)[O-]),$(C#N),$(F),$(Cl),$(Br),$(I)])ccc1',
    }
    
    # Rule 3: Sulfur-containing groups (thiol or thioether) with carboxylic acid
    rule3_patterns = {
        'thiol': '[#16X2H]',  # Thiol group
        'thioether': '[#16X2][#6]',  # Thioether group
        'carboxylic_acid': '[CX3](=O)[OX1H0-,OX2H1]',
    }
    
    # Rule 4: Ether linkages with terminal amino or carboxyl group
    rule4_patterns = {
        'polyether_chain': '[$([CX4H2][OX2][CX4H2][OX2][CX4H2]),$([CX4H2][OX2][CX4H2][OX2][CX4H2][OX2][CX4H2])]',
        'terminal_amino': '[NX3H2][C;$([CX4H2][OX2])]',
        'terminal_carboxyl': '[C](=O)[O;H1,-1]',
    }
    
    # Rule 5: Multiple strong coordinating groups with carboxylic acid
    rule5_patterns = {
        'strong_coordinating_groups': '[NX3H2,NX3H1][CX4H]',  # Primary or secondary amine
        'acetamido': '[NX3][CX3](=O)[#6]',
        'carboxylic_acid': '[CX3](=O)[OX1H0-,OX2H1]',
    }
    
    # Rule 6: Aromatic carboxylic acids with EDGs at para position
    rule6_patterns = {
        'aromatic_carboxylic_acid': 'c1ccc([C](=O)[O;H1,-1])cc1',
        'para_EDG': 'c1cc([$(O[H]),$(N[H2]),$(C)], [c])ccc1',
    }
    
    # Rule 7: Multiple hydroxyl groups on aliphatic chains with carboxylic acid
    rule7_patterns = {
        'aliphatic_hydroxyl': '[C;X4][O;X2H]',
        'carboxylic_acid': '[CX3](=O)[OX1H0-,OX2H1]',
    }
    
    # Rule 8: Simple aliphatic carboxylic acids without additional functional groups
    rule8_patterns = {
        'simple_aliphatic_carboxylic_acid': '[C;X4][C;X4][C;X4][C;X4][C;X4][C](=O)[O;H1,-1]',  # Unbranched chain
    }
    rule8_exclusions = {
        'exclude_groups': '[#7,#8,#16,F,Cl,Br,I]',  # Exclude amines, hydroxyls, sulfurs, halogens
        'aromatic': '[a]',
    }
    
    # Rule 9: Heteroaromatic rings with nitrogen connected via alkyl chain to carboxylic acid
    rule9_patterns = {
        'heteroaromatic_nitrogen': '[n]1cccc1',  # Pyridine-like ring
        'alkyl_linker': '[CX4H2][CX4H2][CX4H2]',  # Three-carbon linker
        'carboxylic_acid': '[C](=O)[O;H1,-1]',
    }
    
    # Rule 10: Carbonyl groups adjacent to carboxylic acid on aromatic ring
    rule10_patterns = {
        'aromatic_carboxylic_acid': 'c1cc([C](=O)[O;H1,-1])ccc1',
        'adjacent_carbonyl': '[#6](=O)c1ccccc1',
    }
    
    # Rule 11: Fluorinated alkyl chains with carboxylic acid
    rule11_patterns = {
        'fluoroalkyl_chain': '[C](F)(F)[F,Cl,Br,I]',  # Fluorinated carbon
        'carboxylic_acid': '[CX3](=O)[OX1H0-,OX2H1]',
    }
    
    # Compile SMARTS patterns
    compiled_rules = []
    for i in range(1, 12):
        patterns = locals()[f'rule{i}_patterns']
        compiled_patterns = {}
        for key, smarts in patterns.items():
            compiled_patterns[key] = Chem.MolFromSmarts(smarts)
        excludes = {}
        if f'rule{i}_exclusions' in locals():
            exclusions = locals()[f'rule{i}_exclusions']
            for key, smarts in exclusions.items():
                excludes[key] = Chem.MolFromSmarts(smarts)
        else:
            exclusions = None
        compiled_rules.append({'patterns': compiled_patterns, 'exclusions': excludes})
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*11)
            continue
        row = []
        for idx, rule in enumerate(compiled_rules):
            try:
                patterns = rule['patterns']
                exclusions = rule['exclusions']
                match = True
                
                # Rule-specific logic
                if idx == 0:  # Rule 1
                    # Check terminal primary amino group
                    amino_matches = mol.GetSubstructMatches(patterns['primary_amino_terminal'])
                    carboxy_matches = mol.GetSubstructMatches(patterns['carboxylic_acid_terminal'])
                    if amino_matches and carboxy_matches:
                        for amino_match in amino_matches:
                            amino_atom_idx = amino_match[0]
                            for carboxy_match in carboxy_matches:
                                carboxy_atom_idx = carboxy_match[0]
                                path = Chem.rdmolops.GetShortestPath(mol, amino_atom_idx, carboxy_atom_idx)
                                carbon_count = 0
                                valid_chain = True
                                for idx_in_path in path:
                                    atom = mol.GetAtomWithIdx(idx_in_path)
                                    if atom.GetAtomicNum() == 6:
                                        if not atom.HasSubstructMatch(patterns['aliphatic_chain']):
                                            valid_chain = False
                                            break
                                        carbon_count +=1
                                    elif atom.GetAtomicNum() != 7 and atom.GetAtomicNum() != 8:
                                        valid_chain = False
                                        break
                                if valid_chain and carbon_count >= 5:
                                    match = True
                                    break
                                else:
                                    match = False
                            if match:
                                break
                    else:
                        match = False
                    row.append(1 if match else 0)
                elif idx == 1:  # Rule 2
                    has_aromatic_ca = mol.HasSubstructMatch(patterns['aromatic_carboxylic_acid'])
                    has_para_EWG = mol.HasSubstructMatch(patterns['para_EWG'])
                    if has_aromatic_ca and has_para_EWG:
                        row.append(1)
                    else:
                        row.append(0)
                elif idx == 2:  # Rule 3
                    has_thiol = mol.HasSubstructMatch(patterns['thiol'])
                    has_thioether = mol.HasSubstructMatch(patterns['thioether'])
                    has_carboxylic_acid = mol.HasSubstructMatch(patterns['carboxylic_acid'])
                    if (has_thiol or has_thioether) and has_carboxylic_acid:
                        row.append(1)
                    else:
                        row.append(0)
                elif idx == 3:  # Rule 4
                    has_polyether = mol.HasSubstructMatch(patterns['polyether_chain'])
                    has_terminal_amino = mol.HasSubstructMatch(patterns['terminal_amino'])
                    has_terminal_carboxyl = mol.HasSubstructMatch(patterns['terminal_carboxyl'])
                    if has_polyether and (has_terminal_amino or has_terminal_carboxyl):
                        row.append(1)
                    else:
                        row.append(0)
                elif idx == 4:  # Rule 5
                    num_coordinating_groups = len(mol.GetSubstructMatches(patterns['strong_coordinating_groups'])) + len(mol.GetSubstructMatches(patterns['acetamido']))
                    has_carboxylic_acid = mol.HasSubstructMatch(patterns['carboxylic_acid'])
                    if num_coordinating_groups >= 2 and has_carboxylic_acid:
                        row.append(1)
                    else:
                        row.append(0)
                elif idx == 5:  # Rule 6
                    has_aromatic_ca = mol.HasSubstructMatch(patterns['aromatic_carboxylic_acid'])
                    has_para_EDG = mol.HasSubstructMatch(patterns['para_EDG'])
                    if has_aromatic_ca and has_para_EDG:
                        row.append(-1)
                    else:
                        row.append(0)
                elif idx == 6:  # Rule 7
                    num_hydroxyl = len(mol.GetSubstructMatches(patterns['aliphatic_hydroxyl']))
                    has_carboxylic_acid = mol.HasSubstructMatch(patterns['carboxylic_acid'])
                    if num_hydroxyl >= 2 and has_carboxylic_acid:
                        row.append(-1)
                    else:
                        row.append(0)
                elif idx == 7:  # Rule 8
                    has_simple_aliphatic_ca = mol.HasSubstructMatch(patterns['simple_aliphatic_carboxylic_acid'])
                    if has_simple_aliphatic_ca:
                        # Exclude if any of the exclude groups are present
                        exclude_match = False
                        for ex_key, ex_pat in exclusions.items():
                            if mol.HasSubstructMatch(ex_pat):
                                exclude_match = True
                                break
                        if not exclude_match:
                            row.append(-1)
                        else:
                            row.append(0)
                    else:
                        row.append(0)
                elif idx == 8:  # Rule 9
                    has_heteroaromatic_N = mol.HasSubstructMatch(patterns['heteroaromatic_nitrogen'])
                    has_alkyl_linker = mol.HasSubstructMatch(patterns['alkyl_linker'])
                    has_carboxylic_acid = mol.HasSubstructMatch(patterns['carboxylic_acid'])
                    if has_heteroaromatic_N and has_alkyl_linker and has_carboxylic_acid:
                        row.append(1)
                    else:
                        row.append(0)
                elif idx == 9:  # Rule 10
                    has_aromatic_ca = mol.HasSubstructMatch(patterns['aromatic_carboxylic_acid'])
                    has_adjacent_carbonyl = mol.HasSubstructMatch(patterns['adjacent_carbonyl'])
                    if has_aromatic_ca and has_adjacent_carbonyl:
                        row.append(-1)
                    else:
                        row.append(0)
                elif idx == 10:  # Rule 11
                    has_fluoro_chain = mol.HasSubstructMatch(patterns['fluoroalkyl_chain'])
                    has_carboxylic_acid = mol.HasSubstructMatch(patterns['carboxylic_acid'])
                    if has_fluoro_chain and has_carboxylic_acid:
                        row.append(-1)
                    else:
                        row.append(0)
                else:
                    row.append(0)
            except:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {i+1}' for i in range(len(compiled_rules))])
    return df

--------------------------------------------------
    Target Name: Fe/Hf
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

---

- **Rule 1**: **Modifiers that are linear aliphatic amino acids with a primary amino group (-NH₂) and a single terminal carboxylic acid group (-COOH), with a carbon chain length of five or more carbons, result in high Fe/Hf values.**

  **Combination of Substructures**: Linear aliphatic chain (≥5 carbons) + Terminal primary amine (-NH₂) + Terminal carboxylic acid (-COOH)

  **Explanation**: The sufficient chain length provides flexibility, allowing the amino and carboxyl groups to effectively chelate iron ions. This enhances Fe incorporation into the catalyst.

  **Examples**:
  - **5-aminopentanoic acid**
  - **7-aminoheptanoic acid**
  - **8-aminooctanoic acid**

  **Counterexample**:
  - **(2S)-2-aminopentanedioic acid** (Low Fe/Hf value due to the presence of a second carboxyl group, which may lead to less effective coordination)

---

- **Rule 2**: **Aromatic carboxylic acids with strong electron-withdrawing groups, such as nitro (-NO₂) or halogens, at the para position result in high Fe/Hf values.**

  **Combination of Substructures**: Aromatic ring + Carboxylic acid (-COOH) + Electron-withdrawing group at para position

  **Explanation**: Electron-withdrawing groups increase the acidity of the carboxyl group, enhancing its ability to coordinate with iron ions and promote greater Fe incorporation.

  **Examples**:
  - **4-nitrobenzoic acid**
  - **4-(bromomethyl)benzoic acid**

  **Counterexample**:
  - **4-methylbenzoic acid** (Low Fe/Hf value due to the electron-donating methyl group reducing coordination efficiency)

---

- **Rule 3**: **Modifiers containing sulfur-functional groups such as thiol (-SH) or thioether (-S-) alongside a carboxylic acid group (-COOH) result in high Fe/Hf values.**

  **Combination of Substructures**: Sulfur-containing group (thiol or thioether) + Carboxylic acid (-COOH)

  **Explanation**: Sulfur atoms are soft Lewis bases with a strong affinity for iron ions. The combination enhances chelation, increasing Fe incorporation into the catalyst.

  **Examples**:
  - **3-sulfanylpropanoic acid**
  - **4-sulfanylbenzoic acid**
  - **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid**

---

- **Rule 4**: **Modifiers featuring flexible ether linkages (-O-) with terminal coordinating groups such as amino (-NH₂) or carboxyl (-COOH) result in high Fe/Hf values.**

  **Combination of Substructures**: Ether chains (-O-) + Terminal amino or carboxyl group

  **Explanation**: Ether linkages provide flexibility and additional oxygen atoms that can assist in coordination. Terminal functional groups enhance the ability to chelate iron ions effectively.

  **Examples**:
  - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**
  - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**

---

- **Rule 5**: **Modifiers containing multiple coordinating groups, such as amino acids with additional amino or acetamido groups, result in high Fe/Hf values due to enhanced chelation.**

  **Combination of Substructures**: Multiple coordinating groups (e.g., amino (-NH₂), acetamido (-NHCOCH₃)) + Carboxylic acid (-COOH)

  **Explanation**: Multiple coordination sites increase the ligand's binding affinity for iron ions, leading to higher Fe incorporation into the catalyst.

  **Examples**:
  - **(2S)-6-acetamido-2-aminohexanoic acid**
  - **(2S)-2-aminobutanedioic acid**
  - **(2S)-2-amino-3-phenylpropanoic acid**

---

- **Rule 6**: **Aromatic carboxylic acids with electron-donating groups such as amino (-NH₂), hydroxyl (-OH), or methoxy (-OCH₃) at the para position result in low Fe/Hf values.**

  **Combination of Substructures**: Aromatic ring + Carboxylic acid (-COOH) + Electron-donating group at para position

  **Explanation**: Electron-donating groups decrease the acidity of the carboxyl group, reducing its ability to coordinate with iron ions and resulting in lower Fe incorporation.

  **Examples**:
  - **4-aminobenzoic acid**
  - **4-hydroxybenzoic acid**
  - **3-(4-hydroxyphenyl)propanoic acid**

---

- **Rule 7**: **Modifiers containing multiple hydroxyl groups (-OH) on aliphatic chains or cyclic structures result in low Fe/Hf values.**

  **Combination of Substructures**: Aliphatic chain or ring + Multiple hydroxyl groups (-OH) + Carboxylic acid (-COOH)

  **Explanation**: Multiple hydroxyl groups may engage in hydrogen bonding or solvation, reducing their availability to coordinate with iron ions and diminishing chelation efficiency.

  **Examples**:
  - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid**
  - **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]propanoic acid**

---

- **Rule 8**: **Simple aliphatic carboxylic acids without additional strong coordinating groups result in low Fe/Hf values.**

  **Combination of Substructures**: Aliphatic chain + Single carboxylic acid (-COOH)

  **Explanation**: Lack of multiple or strong coordinating functional groups limits the ligand's ability to effectively chelate iron ions.

  **Example**:
  - **Octanoic acid**

---

- **Rule 9**: **Modifiers containing heteroaromatic rings with nitrogen atoms, connected via an alkyl chain to a carboxylic acid group, result in high Fe/Hf values.**

  **Combination of Substructures**: Heteroaromatic ring with nitrogen (e.g., pyridine) + Alkyl linker + Carboxylic acid (-COOH)

  **Explanation**: The nitrogen in the heteroaromatic ring serves as an additional coordination site. The alkyl linker reduces steric hindrance, facilitating effective iron chelation.

  **Example**:
  - **4-pyridin-4-ylbutanoic acid**

  **Counterexample**:
  - **Pyridine-3-carboxylic acid** (Low Fe/Hf value due to steric hindrance when the carboxyl group is directly attached to the ring)

---

- **Rule 10**: **Modifiers with electron-withdrawing carbonyl groups such as formyl (-CHO) adjacent to a carboxylic acid on aromatic rings result in low Fe/Hf values.**

  **Combination of Substructures**: Aromatic ring + Carbonyl group (-C=O) adjacent to carboxylic acid (-COOH)

  **Explanation**: Adjacent electron-withdrawing carbonyl groups reduce electron density on the carboxylate oxygen, diminishing its ability to coordinate with iron ions.

  **Examples**:
  - **5-formyl-2-hydroxybenzoic acid**
  - **4-formylbenzoic acid**

---

- **Rule 11**: **Modifiers with fluorinated aliphatic chains result in low Fe/Hf values due to decreased coordinating ability caused by strong electron-withdrawing fluorine atoms.**

  **Combination of Substructures**: Fluorinated alkyl chain + Carboxylic acid (-COOH)

  **Explanation**: Fluorine's high electronegativity withdraws electron density from coordinating groups, reducing their ability to bind iron ions and leading to lower Fe incorporation.

  **Example**:
  - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**

---

- **Rule 12**: **Modifiers containing ketone groups (-C=O) within aliphatic chains adjacent to carboxylic acid groups result in low Fe/Hf values.**

  **Combination of Substructures**: Aliphatic chain + Internal ketone group (-C=O) + Carboxylic acid (-COOH)

  **Explanation**: Ketone groups can withdraw electron density and may hinder effective coordination with iron ions.

  **Example**:
  - **4-oxoheptanedioic acid**

---

- **Rule 13**: **Modifiers with bulky aromatic systems or sterically hindered structures result in low Fe/Hf values due to decreased accessibility for coordination.**

  **Combination of Substructures**: Bulky aromatic rings or fused ring systems + Carboxylic acid (-COOH)

  **Explanation**: Steric hindrance from bulky groups can limit the ability of coordinating groups to interact with iron ions effectively.

  **Examples**:
  - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (Tryptophan)
  - **1,3-dioxo-2-benzofuran-5-carboxylic acid**

---

- **Rule 14**: **Modifiers containing aromatic rings connected through conjugated systems to carboxylic acid groups result in high Fe/Hf values if they also possess additional coordinating atoms like oxygen or nitrogen within the ring system.**

  **Combination of Substructures**: Conjugated aromatic system + Heteroatoms (O, N) in ring + Carboxylic acid (-COOH)

  **Explanation**: Conjugated systems with heteroatoms can delocalize electron density and provide multiple coordination sites, enhancing iron binding.

  **Example**:
  - **2-oxo-1H-pyridine-4-carboxylic acid**

---

- **Rule 15**: **Modifiers with hydroxyl groups (-OH) ortho to carboxylic acid groups on aromatic rings can result in low Fe/Hf values due to intramolecular hydrogen bonding, reducing coordination availability.**

  **Combination of Substructures**: Aromatic ring + Ortho-hydroxyl (-OH) + Carboxylic acid (-COOH)

  **Explanation**: Intramolecular hydrogen bonding between the hydroxyl and carboxyl groups can decrease the availability of these groups for metal coordination.

  **Example**:
  - **5-formyl-2-hydroxybenzoic acid**

---

**End of Rules**

---

These rules have been carefully developed by analyzing the dataset and considering the underlying physicochemical properties of the modifiers. They illustrate how specific combinations of functional groups influence the Fe/Hf values by enhancing or diminishing the ability of the modifiers to coordinate with iron ions. By balancing simplicity and complexity, the rules cover a broad range of the dataset, providing clear predictive guidelines for the relationship between molecular modifiers and Fe/Hf values.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8
0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0
0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0
0,0,1,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0
0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0
0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0
0,0,0,0,0,0,-1,0
1,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0
0,0,0,0,1,0,0,0
1,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6857142857142857; Test Accuracy: 0.0
    Train Support: 0.1; Test Support: 0.0
    Train Confidence: 0.95; Test Confidence: 0.5
    Train Lift: 1.9330065359477127; Test Lift: NONE
    Train Leverage: 0.04244897959183674; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups using corrected patterns from suggestions

    # Carboxylic acid group (-COOH) and carboxylate anion
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    carboxylate_anion = '[CX3](=O)[O-]'

    # Primary amine group (-NH2)
    primary_amine = '[NX3H2]'

    # Secondary amine (-NH-)
    secondary_amine = '[NX3H1][#6]'

    # Electron-withdrawing groups (EWGs)
    nitro_group = '[NX3+](=O)[O-]'
    halogen = '[F,Cl,Br,I]'

    # Electron-donating groups (EDGs)
    hydroxyl_group = '[OX2H]'
    methoxy_group = '[OX2][CH3]'
    amino_group_aromatic = '[c][NX3H2]'

    # Aromatic ring (generic)
    aromatic_ring = '[a]1aaaaa1'

    # Sulfur-containing groups
    thiol = '[SX2H]'
    thioether = '[SX2][#6][#6]'

    # Ether linkage
    ether_linkage = '[#6][OX2][#6]'

    # Acetamido group
    acetamido_group = '[NX3][CX3](=O)[#6]'

    # Heteroaromatic ring with nitrogen atoms (e.g., pyridine)
    pyridine_ring = 'n1ccccc1'

    # Aldehyde group (-CHO)
    aldehyde_group = '[CX3H1](=O)[#6]'

    # Fluorinated aliphatic chain
    fluorinated_chain = '[CX4]([F])([F])[F]'

    # Ketone group within aliphatic chain
    ketone_in_chain = '[#6][CX3](=O)[#6]'

    # Bulky aromatic systems (e.g., fused rings)
    fused_aromatic = '[r3,r4,r5,r6,r7,r8,r9,r10]'

    # Ortho-hydroxyl group to carboxylic acid on aromatic ring
    ortho_hydroxyl_carboxylic_acid = 'c1cc(O)ccc1C(=O)O'

    # Define electron-withdrawing group patterns
    ewg_patterns = [nitro_group, halogen]

    # Define electron-donating group patterns
    edg_patterns = [hydroxyl_group, methoxy_group, amino_group_aromatic]

    # Define rules with patterns and conditions
    rules = [
        # Rule 1
        {
            'number': 1,
            'description': 'Rule 1: Modifiers that are linear aliphatic amino acids with a primary amino group (-NH2) and a single terminal carboxylic acid group (-COOH), with a carbon chain length of five or more carbons, result in high Fe/Hf values.',
            'patterns': [primary_amine, carboxylic_acid],
            'conditions': 'chain_length',
            'prediction': 1
        },
        # Rule 2
        {
            'number': 2,
            'description': 'Rule 2: Aromatic carboxylic acids with strong electron-withdrawing groups, such as nitro (-NO2) or halogens, at the para position result in high Fe/Hf values.',
            'patterns': ['[c][CX3](=O)[OX2H1]'],  # Aromatic carboxylic acid
            'ewg_patterns': ewg_patterns,
            'conditions': 'para_substitution',
            'prediction': 1
        },
        # Rule 3
        {
            'number': 3,
            'description': 'Rule 3: Modifiers containing sulfur-functional groups such as thiol (-SH) or thioether (-S-) alongside a carboxylic acid group (-COOH) result in high Fe/Hf values.',
            'patterns': [carboxylic_acid],
            'sub_patterns': [thiol, thioether],
            'prediction': 1
        },
        # Rule 4
        {
            'number': 4,
            'description': 'Rule 4: Modifiers featuring flexible ether linkages (-O-) with terminal coordinating groups such as amino (-NH2) or carboxyl (-COOH) result in high Fe/Hf values.',
            'patterns': [ether_linkage],
            'sub_patterns': [primary_amine, carboxylic_acid],
            'prediction': 1
        },
        # Rule 5
        {
            'number': 5,
            'description': 'Rule 5: Modifiers containing multiple coordinating groups, such as amino acids with additional amino or acetamido groups, result in high Fe/Hf values due to enhanced chelation.',
            'patterns': [carboxylic_acid],
            'sub_patterns': [primary_amine, acetamido_group],
            'conditions': 'multiple_coordinating_groups',
            'prediction': 1
        },
        # Rule 6
        {
            'number': 6,
            'description': 'Rule 6: Aromatic carboxylic acids with electron-donating groups such as amino (-NH2), hydroxyl (-OH), or methoxy (-OCH3) at the para position result in low Fe/Hf values.',
            'patterns': ['[c][CX3](=O)[OX2H1]'],  # Aromatic carboxylic acid
            'edg_patterns': edg_patterns,
            'conditions': 'para_substitution',
            'prediction': -1
        },
        # Rule 7
        {
            'number': 7,
            'description': 'Rule 7: Modifiers containing multiple hydroxyl groups (-OH) on aliphatic chains or cyclic structures result in low Fe/Hf values.',
            'patterns': [carboxylic_acid, hydroxyl_group],
            'conditions': 'multiple_hydroxyls',
            'prediction': -1
        },
        # Rule 8
        {
            'number': 8,
            'description': 'Rule 8: Simple aliphatic carboxylic acids without additional strong coordinating groups result in low Fe/Hf values.',
            'patterns': [carboxylic_acid],
            'exclude_patterns': [primary_amine, secondary_amine, thiol, thioether, ether_linkage, aromatic_ring, '[#7,#8,#16,#15]'],  # Exclude other coordinating groups
            'prediction': -1
        },
        # Additional rules (9-15) would be defined similarly...
    ]

    # Compile SMARTS patterns
    for rule in rules:
        rule['compiled_patterns'] = [Chem.MolFromSmarts(p) for p in rule.get('patterns', [])]
        rule['compiled_sub_patterns'] = [Chem.MolFromSmarts(p) for p in rule.get('sub_patterns', [])]
        rule['compiled_exclude_patterns'] = [Chem.MolFromSmarts(p) for p in rule.get('exclude_patterns', [])]
        rule['compiled_ewg_patterns'] = [Chem.MolFromSmarts(p) for p in rule.get('ewg_patterns', [])]
        rule['compiled_edg_patterns'] = [Chem.MolFromSmarts(p) for p in rule.get('edg_patterns', [])]

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                for pat in rule.get('compiled_exclude_patterns', []):
                    if mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Check required patterns
                for pat in rule.get('compiled_patterns', []):
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Additional conditions
                if rule.get('conditions') == 'chain_length':
                    # Implement chain length condition for Rule 1
                    n_atoms = mol.GetSubstructMatches(Chem.MolFromSmarts(primary_amine))
                    c_atoms = mol.GetSubstructMatches(Chem.MolFromSmarts(carboxylic_acid))
                    condition_met = False
                    for n_match in n_atoms:
                        n_idx = n_match[0]
                        for c_match in c_atoms:
                            c_idx = c_match[0]
                            path = Chem.rdmolops.GetShortestPath(mol, n_idx, c_idx)
                            # Check that path is linear, contains only carbons
                            if len(path) >= 7:
                                linear = True
                                for idx in path[1:-1]:
                                    atom = mol.GetAtomWithIdx(idx)
                                    if atom.GetSymbol() != 'C' or atom.GetDegree() != 2:
                                        linear = False
                                        break
                                if linear:
                                    condition_met = True
                                    break
                        if condition_met:
                            break
                    if not condition_met:
                        match = False
                elif rule.get('conditions') == 'para_substitution':
                    # Implement para substitution condition for Rule 2 and Rule 6
                    # Find aromatic carboxylic acid matches
                    ca_matches = mol.GetSubstructMatches(rule['compiled_patterns'][0])
                    if not ca_matches:
                        match = False
                    else:
                        condition_met = False
                        for ca_match in ca_matches:
                            ca_atom_idx = ca_match[0]
                            ca_atom = mol.GetAtomWithIdx(ca_atom_idx)
                            ring_info = mol.GetRingInfo()
                            atom_rings = ring_info.AtomRings()
                            # Find rings containing the carboxylic acid
                            rings_with_ca = [ring for ring in atom_rings if ca_atom_idx in ring]
                            for ring in rings_with_ca:
                                # Find position of carboxylic acid in ring
                                pos_ca = ring.index(ca_atom_idx)
                                ring_size = len(ring)
                                # Get atom at position opposite (para position)
                                pos_para = (pos_ca + ring_size // 2) % ring_size
                                para_atom_idx = ring[pos_para]
                                para_atom = mol.GetAtomWithIdx(para_atom_idx)
                                # Check for EWG or EDG at para position
                                if rule.get('compiled_ewg_patterns'):
                                    for ewg_pat in rule['compiled_ewg_patterns']:
                                        if para_atom.HasSubstructMatch(ewg_pat):
                                            condition_met = True
                                            break
                                elif rule.get('compiled_edg_patterns'):
                                    for edg_pat in rule['compiled_edg_patterns']:
                                        if para_atom.HasSubstructMatch(edg_pat):
                                            condition_met = True
                                            break
                                if condition_met:
                                    break
                            if condition_met:
                                break
                        if not condition_met:
                            match = False
                elif rule.get('conditions') == 'multiple_hydroxyls':
                    # Implement multiple hydroxyls condition for Rule 7
                    hydroxyl_matches = mol.GetSubstructMatches(Chem.MolFromSmarts(hydroxyl_group))
                    if len(hydroxyl_matches) < 2:
                        match = False
                elif rule.get('conditions') == 'multiple_coordinating_groups':
                    # Implement multiple coordinating groups condition for Rule 5
                    count = 0
                    for pat in rule.get('compiled_sub_patterns', []):
                        matches = mol.GetSubstructMatches(pat)
                        count += len(matches)
                    if count < 2:
                        match = False
                # Check sub-patterns if any
                if 'compiled_sub_patterns' in rule:
                    for pat in rule['compiled_sub_patterns']:
                        if not mol.HasSubstructMatch(pat):
                            match = False
                            break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # On error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df
--------------------------------------------------