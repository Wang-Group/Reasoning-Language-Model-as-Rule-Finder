{
    "prefix": "This code converts a list of SMILES strings into a feature matrix using RDKit. It applies predefined rules based on structural patterns to predict high or low Fe/Hf values.",
    "imports": "import pandas as pd\nfrom rdkit import Chem\nfrom rdkit.Chem import AllChem",
    "code": "def rule2matrix(smiles_list):\n    # Define SMARTS patterns for functional groups and substructures used in the rules\n    \n    # Carboxylic acid group (-COOH)\n    carboxylic_acid = '[CX3](=O)[OX2H1]'\n    \n    # Terminal primary aliphatic amine group (-NH2 at \u03c9-position)\n    terminal_primary_amine = '[NX3;H2][CX4H2][CX4H2][CX4H2][CX3](=O)[OX2H1]'\n    \n    # Aromatic carboxylic acid\n    aromatic_carboxylic_acid = 'c[C](=O)[OX2H1]'\n    \n    # Electron-withdrawing groups on aromatic ring\n    nitro_group = '[$([NX3](=O)=O)]'\n    halogen = '[F,Cl,Br,I]'\n    ewg_on_aromatic = 'c[$(nitro_group),$(halogen)]'\n    \n    # Electron-donating groups on aromatic ring\n    hydroxyl_on_aromatic = 'c[OX2H]'\n    amino_on_aromatic = 'c[NX3;H2,H1]'\n    methoxy_on_aromatic = 'c[OX2][CH3]'\n    edg_on_aromatic = '[$(hydroxyl_on_aromatic),$(amino_on_aromatic),$(methoxy_on_aromatic)]'\n    \n    # Sulfur-containing groups\n    thiol = '[SX2H]'  # Thiol group\n    thioether = '[#16X2][#6]'  # Thioether group\n    \n    # Ether linkage in aliphatic chain\n    ether_linkage = '[#6][OX2][#6]'\n    \n    # Heteroaromatic ring connected via flexible linker to carboxylic acid\n    heteroaromatic_ring = '[n,o,s]1cccc1'\n    aliphatic_linker = '[#6X4]'\n    \n    # Multiple adjacent hydroxyl groups (polyols)\n    polyol = '[#6][OX2H][#6][OX2H]'\n    \n    # Bulky groups near coordinating sites\n    bulky_group = '[#6][c]'\n    \n    # Conjugated systems with electron-withdrawing groups\n    conjugated_electronegative = '[#6]=[#6]-[#6]=[CX3](=O)[OX2H1]'\n    \n    # Dicarboxylic acids\n    dicarboxylic_acid = '[CX3](=O)[OX2H1][CX4][CX3](=O)[OX2H1]'\n    \n    # Initialize the rules list\n    rules = []\n    \n    # Define the rules\n    \n    # Rule 1\n    rules.append({\n        'number': 1,\n        'description': 'Modifiers that are aliphatic carboxylic acids with a terminal primary amino group (-NH2) at the \u03c9-position tend to lead to high Fe/Hf values.',\n        'patterns': [\n            carboxylic_acid,\n            terminal_primary_amine,\n        ],\n        'exclude_patterns': ['[a]'],  # Exclude aromatic rings\n        'prediction': 1,\n    })\n    \n    # Rule 2\n    rules.append({\n        'number': 2,\n        'description': 'Modifiers that are aromatic carboxylic acids with electron-withdrawing substituents (e.g., nitro, halogens) at the para position tend to lead to high Fe/Hf values; those with electron-donating groups tend to lead to low Fe/Hf values.',\n        'patterns': [\n            aromatic_carboxylic_acid,\n            'c1cc([F,Cl,Br,I,N+](=O)[O-])ccc1',\n        ],\n        'prediction': 1,\n    })\n    \n    # Rule 3\n    rules.append({\n        'number': 3,\n        'description': 'Modifiers containing sulfur-containing groups such as thiol (-SH) or thioether (-S-) functionalities tend to lead to high Fe/Hf values.',\n        'patterns': [\n            thiol,\n            thioether,\n        ],\n        'prediction': 1,\n    })\n    \n    # Rule 4\n    rules.append({\n        'number': 4,\n        'description': 'Modifiers that are aliphatic carboxylic acids with flexible ether chains ending with coordinating groups (e.g., amino, hydroxyl) tend to lead to high Fe/Hf values.',\n        'patterns': [\n            carboxylic_acid,\n            ether_linkage,\n            '[NX3;H2,H1]',\n            '[OX2H]',\n        ],\n        'prediction': 1,\n    })\n    \n    # Rule 5\n    rules.append({\n        'number': 5,\n        'description': 'Modifiers with heteroaromatic rings connected via flexible aliphatic linkers to the carboxylic acid group tend to lead to high Fe/Hf values.',\n        'patterns': [\n            carboxylic_acid,\n            heteroaromatic_ring,\n            aliphatic_linker,\n        ],\n        'exclude_patterns': [\n            'c[C](=O)[OX2H1]',  # Exclude direct attachment\n        ],\n        'prediction': 1,\n    })\n    \n    # Rule 6\n    rules.append({\n        'number': 6,\n        'description': 'Modifiers that are amino acids or peptides with additional coordinating groups tend to lead to high Fe/Hf values.',\n        'patterns': [\n            carboxylic_acid,\n            '[NX3][CX3](=O)[NX3]',  # Amide linkage\n        ],\n        'prediction': 1,\n    })\n    \n    # Rule 7\n    rules.append({\n        'number': 7,\n        'description': 'Modifiers that are aliphatic carboxylic acids with terminal hydroxyl groups (-OH) at the \u03c9-position tend to lead to high Fe/Hf values.',\n        'patterns': [\n            carboxylic_acid,\n            '[OX2H][CX4H2][CX4H2][CX4H2][CX3](=O)[OX2H1]',  # Terminal hydroxyl group at \u03c9-position\n        ],\n        'exclude_patterns': ['[a]'],  # Exclude aromatic rings\n        'prediction': 1,\n    })\n    \n    # Rule 8\n    rules.append({\n        'number': 8,\n        'description': 'Modifiers with bulky or sterically hindered groups near the coordinating sites tend to lead to low Fe/Hf values.',\n        'patterns': [\n            carboxylic_acid,\n            bulky_group,\n        ],\n        'prediction': -1,\n    })\n    \n    # Rule 9\n    rules.append({\n        'number': 9,\n        'description': 'Modifiers containing electron-withdrawing groups within conjugated systems tend to lead to high Fe/Hf values.',\n        'patterns': [\n            conjugated_electronegative,\n        ],\n        'prediction': 1,\n    })\n    \n    # Rule 10\n    rules.append({\n        'number': 10,\n        'description': 'Modifiers that are simple aliphatic carboxylic acids without additional coordinating functional groups tend to lead to low Fe/Hf values.',\n        'patterns': [\n            carboxylic_acid,\n        ],\n        'exclude_patterns': [\n            '[#7,#8,#16]',  # Exclude N, O, S\n            '[a]',  # Exclude aromatic rings\n        ],\n        'prediction': -1,\n    })\n    \n    # Rule 11\n    rules.append({\n        'number': 11,\n        'description': 'Modifiers with multiple adjacent hydroxyl groups tend to lead to low Fe/Hf values due to steric hindrance and intramolecular hydrogen bonding.',\n        'patterns': [\n            polyol,\n        ],\n        'prediction': -1,\n    })\n    \n    # Rule 12\n    rules.append({\n        'number': 12,\n        'description': 'Modifiers containing aldehyde or ketone groups adjacent to or within the carboxylic acid moiety tend to lead to low Fe/Hf values.',\n        'patterns': [\n            '[CX3H1](=O)[CX3](=O)[OX2H1]',  # Aldehyde adjacent to carboxylic acid\n            '[CX3](=O)[CX3](=O)[OX2H1]',    # Ketone adjacent to carboxylic acid\n        ],\n        'prediction': -1,\n    })\n    \n    # Rule 13\n    rules.append({\n        'number': 13,\n        'description': 'Modifiers with electron-rich heterocycles directly attached to the carboxyl group without additional coordinating groups tend to lead to low Fe/Hf values.',\n        'patterns': [\n            '[n,o,s][C](=O)[OX2H1]',\n        ],\n        'exclude_patterns': [\n            aliphatic_linker,  # Exclude flexible aliphatic linkers\n        ],\n        'prediction': -1,\n    })\n    \n    # Rule 14\n    rules.append({\n        'number': 14,\n        'description': 'Modifiers that are dicarboxylic acids without additional coordinating functional groups tend to lead to low Fe/Hf values.',\n        'patterns': [\n            dicarboxylic_acid,\n        ],\n        'exclude_patterns': [\n            '[#7,#8,#16]',  # Exclude N, O, S\n        ],\n        'prediction': -1,\n    })\n    \n    # Rule 15\n    rules.append({\n        'number': 15,\n        'description': 'Modifiers with flexible aliphatic chains that position coordinating groups favorably tend to lead to high Fe/Hf values.',\n        'patterns': [\n            carboxylic_acid,\n            '[#6][#6][#6][NX3;H2,H1]',  # Aliphatic chain positioning amino group\n            ether_linkage,\n        ],\n        'prediction': 1,\n    })\n    \n    # Compile SMARTS patterns\n    for rule in rules:\n        rule['compiled_patterns'] = [Chem.MolFromSmarts(p) for p in rule.get('patterns', [])]\n        rule['compiled_exclude_patterns'] = [Chem.MolFromSmarts(p) for p in rule.get('exclude_patterns', [])]\n    \n    # Initialize results list\n    results = []\n    \n    # Process each SMILES string\n    for smi in smiles_list:\n        mol = Chem.MolFromSmiles(smi)\n        if mol is None:\n            # If the molecule cannot be parsed, append a row of zeros\n            results.append([0]*len(rules))\n            continue\n        row = []\n        for rule in rules:\n            try:\n                match = True\n                # Check exclude patterns\n                for epat in rule['compiled_exclude_patterns']:\n                    if mol.HasSubstructMatch(epat):\n                        match = False\n                        break\n                if not match:\n                    row.append(0)\n                    continue\n                # Check required patterns\n                for pat in rule['compiled_patterns']:\n                    if not mol.HasSubstructMatch(pat):\n                        match = False\n                        break\n                if match:\n                    row.append(rule['prediction'])\n                else:\n                    row.append(0)\n            except Exception as e:\n                # In case of any error, append 0\n                row.append(0)\n        results.append(row)\n    # Create DataFrame with results\n    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])\n    return df\n"
}