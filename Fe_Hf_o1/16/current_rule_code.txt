def rule2matrix(smiles_list):
    # Import necessary modules
    from rdkit import Chem
    import pandas as pd

    # Define rules
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are linear aliphatic carboxylic acids with a terminal primary amino group (omega-amino acids) increase Fe/Hf.',
            'patterns': [
                '[NX3H2][CH2][CH2][CH2][CH2][CX3](=O)[OX2H1]',
                '[NX3H2][CH2][CH2][CH2][CH2][CH2][CX3](=O)[OX2H1]',
                '[NX3H2][CH2][CH2][CH2][CH2][CH2][CH2][CX3](=O)[OX2H1]',
                '[NX3H2][CH2][CH2][CH2][CH2][CH2][CH2][CH2][CX3](=O)[OX2H1]'
            ],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers that are aromatic carboxylic acids substituted with strong electron-withdrawing groups at the para position increase Fe/Hf.',
            'patterns': [
                '[c][C](=O)[O]',
                '[c][N+](=O)[O-]',
                '[c][F,Cl,Br,I]',
                '[c][CX4](F)(F)F'
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers containing sulfur atoms (thiol -SH or thioether -S- groups) enhance Fe/Hf.',
            'patterns': [
                '[SX2H]',
                '[#16X2][#6]'
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers with nitrogen-containing heteroaromatic rings, where the nitrogen is positioned to coordinate with Fe ions, increase Fe/Hf.',
            'patterns': [
                'n1ccccc1',
                'c1ccncc1',
                'c1ccnc(c1)[C](=O)[O,H]'
            ],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers with perfluorinated alkyl chains decrease Fe/Hf.',
            'patterns': [
                '[CX4](F)(F)(F)',
                '[C](F)(F)(F)',
                '[CF2][CF2][CF2]'
            ],
            'prediction': -1
        }
    ]

    # Compile patterns
    for rule in rules:
        compiled_patterns = []
        for smarts in rule['patterns']:
            mol = Chem.MolFromSmarts(smarts)
            compiled_patterns.append(mol)
        rule['compiled_patterns'] = compiled_patterns

    # Initialize result list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                # Check if the molecule matches any of the compiled patterns
                rule_match = False
                for pat in rule['compiled_patterns']:
                    if mol.HasSubstructMatch(pat):
                        rule_match = True
                        break
                if rule_match:
                    # Molecule matches this rule
                    row.append(rule['prediction'])
                else:
                    # Molecule does not match this rule
                    row.append(0)
            except:
                # In case of error, append 0
                row.append(0)
        results.append(row)

    # Create DataFrame
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df
