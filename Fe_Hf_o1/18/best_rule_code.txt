def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    
    # Rule 1: Modifiers with terminal amino groups on aliphatic chains predict high Fe/Hf values
    primary_aliph_amine = '[NX3;H2][C;X4;H2]'  # Primary aliphatic amine
    carboxylic_acid = '[CX3](=O)[OX2H1]'  # Carboxylic acid group
    exclude_aromatic = '[a]'  # Aromatic atoms (to ensure aliphatic chain)
    
    # Rule 2: Modifiers containing thiol (-SH) groups predict high Fe/Hf values
    thiol = '[SX2H]'  # Thiol group
    
    # Rule 3: Aromatic carboxylic acids with electron-withdrawing para substituents predict high Fe/Hf values
    aromatic_carboxylic_acid = '[c][CX3](=O)[OX2H1]'
    ewg_on_aromatic = '[c][F,Cl,Br,I,NX3+](=O)[O-]'  # Halogens or nitro group on aromatic ring
    
    # Rule 4: Modifiers containing pyridine rings with accessible nitrogen atoms predict high Fe/Hf values
    pyridine_ring = 'n1ccccc1'  # Pyridine ring
    
    # Rule 5: Modifiers with ether linkages and terminal donor groups predict high Fe/Hf values
    ether_linkage = '[#6][OX2][#6]'  # Ether linkage
    terminal_amino = '[NX3;H2,H1][#6]'  # Terminal amino group
    terminal_methoxy = '[OX2][CH3]'  # Methoxy group
    
    # Rule 6: Modifiers with multiple hydroxyl groups predict low Fe/Hf values
    hydroxyl_group = '[OX2H]'  # Hydroxyl group
    
    # Rule 7: Modifiers containing perfluoroalkyl groups predict low Fe/Hf values
    perfluoroalkyl = '[CX4]([F])[F]'  # Carbon with at least two fluorines
    
    # Rule 8: Modifiers with conjugated carbonyl groups adjacent to aromatics predict low Fe/Hf values
    conjugated_carbonyl_aromatic = '[c][CX3](=O)[!O,N]'  # Carbonyl group attached to aromatic ring
    
    # Rule 9: Simple aliphatic carboxylic acids without additional donor groups predict low Fe/Hf values
    # Exclude amines, sulfur groups, ethers, halogens, and aromatic atoms
    exclude_amines = '[NX3]'
    exclude_sulfur_groups = '[SX2]'
    exclude_ethers = '[#6][OX2][#6]'
    exclude_halogens = '[F,Cl,Br,I]'
    exclude_aromatic = '[a]'
    
    # Rule 10: Modifiers with nitrogen heterocycles involving resonance delocalization predict low Fe/Hf values
    nitrogen_heterocycle_resonance = '[n][n]'
    
    # Rule 11: Modifiers with both amide and amino groups predict high Fe/Hf values
    amide_group = '[CX3](=O)[NX3]'
    amino_group = '[NX3;H2,H1][#6]'
    
    # Rule 12: Modifiers with electron-donating groups on aromatic rings predict low Fe/Hf values
    edg_on_aromatic = '[c][OX2H,NX3;H2,H1]'  # Hydroxyl or amino group on aromatic ring
    
    # Rule 13: Modifiers containing aromatic hydroxyl groups predict low Fe/Hf values
    aromatic_hydroxyl = '[c][OX2H]'
    
    # Rule 14: Modifiers with aliphatic chains terminated with a single hydroxyl group predict high Fe/Hf values
    terminal_hydroxyl = '[CX4][OX2H]'  # Primary alcohol
    
    # Rule 15: Modifiers with bulky aromatic side chains and electron-donating substituents predict low Fe/Hf values
    bulky_aromatic_edg = '[c]([c])[c][OX2H,NX3;H2,H1]'  # Aromatic ring with EDGs
    
    # Compile SMARTS patterns
    patterns = {
        'Rule 1': {
            'include': [primary_aliph_amine, carboxylic_acid],
            'exclude': [exclude_aromatic],
            'prediction': 1
        },
        'Rule 2': {
            'include': [thiol],
            'prediction': 1
        },
        'Rule 3': {
            'include': [aromatic_carboxylic_acid, ewg_on_aromatic],
            'prediction': 1
        },
        'Rule 4': {
            'include': [pyridine_ring],
            'prediction': 1
        },
        'Rule 5': {
            'include': [ether_linkage],
            'additional': [terminal_amino, terminal_methoxy],
            'prediction': 1
        },
        'Rule 6': {
            'include': [hydroxyl_group],
            'count_threshold': {'[OX2H]': 2},
            'prediction': -1
        },
        'Rule 7': {
            'include': [perfluoroalkyl],
            'prediction': -1
        },
        'Rule 8': {
            'include': [conjugated_carbonyl_aromatic],
            'prediction': -1
        },
        'Rule 9': {
            'include': [carboxylic_acid],
            'exclude': [exclude_amines, exclude_sulfur_groups, exclude_ethers, exclude_halogens, exclude_aromatic],
            'prediction': -1
        },
        'Rule 10': {
            'include': [nitrogen_heterocycle_resonance],
            'prediction': -1
        },
        'Rule 11': {
            'include': [amide_group, amino_group],
            'prediction': 1
        },
        'Rule 12': {
            'include': [edg_on_aromatic],
            'prediction': -1
        },
        'Rule 13': {
            'include': [aromatic_hydroxyl],
            'prediction': -1
        },
        'Rule 14': {
            'include': [terminal_hydroxyl],
            'exclude': [hydroxyl_group],
            'exclude_counts': {'[OX2H]': 2},
            'prediction': 1
        },
        'Rule 15': {
            'include': [bulky_aromatic_edg],
            'prediction': -1
        }
    }
    
    # Compile SMARTS patterns
    for rule in patterns.values():
        rule['compiled_include'] = [Chem.MolFromSmarts(pat) for pat in rule.get('include', [])]
        rule['compiled_exclude'] = [Chem.MolFromSmarts(pat) for pat in rule.get('exclude', [])]
        rule['compiled_additional'] = [Chem.MolFromSmarts(pat) for pat in rule.get('additional', [])]
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(patterns))
            continue
        row = []
        for rule_name, rule in patterns.items():
            try:
                match = True
                # Check exclude patterns if any
                for pat in rule.get('compiled_exclude', []):
                    if mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Check required include patterns
                for pat in rule.get('compiled_include', []):
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Check additional patterns (used in Rule 5)
                if 'additional' in rule:
                    additional_match = False
                    for pat in rule.get('compiled_additional', []):
                        if mol.HasSubstructMatch(pat):
                            additional_match = True
                            break
                    if not additional_match:
                        match = False
                if not match:
                    row.append(0)
                    continue
                # Check count thresholds
                if 'count_threshold' in rule:
                    count_match = True
                    for smarts, threshold in rule['count_threshold'].items():
                        pat = Chem.MolFromSmarts(smarts)
                        matches = mol.GetSubstructMatches(pat)
                        if len(matches) < threshold:
                            count_match = False
                            break
                    if not count_match:
                        match = False
                # Exclude if counts exceed thresholds
                if 'exclude_counts' in rule:
                    count_exclude = False
                    for smarts, threshold in rule['exclude_counts'].items():
                        pat = Chem.MolFromSmarts(smarts)
                        matches = mol.GetSubstructMatches(pat)
                        if len(matches) >= threshold:
                            count_exclude = True
                            break
                    if count_exclude:
                        match = False
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=patterns.keys())
    return df
