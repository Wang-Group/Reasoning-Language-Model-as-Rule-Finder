def rule2matrix(smiles_list):
    import pandas as pd
    from rdkit import Chem
    from rdkit.Chem import AllChem

    # Initialize results list
    results = []
    number_of_rules = 11

    # Define SMARTS patterns and helper functions for each rule

    # Rule 1: Aliphatic carboxylic acids with a terminal primary amino group on a linear carbon chain of 5 or more carbons predict a high Fe/Hf value (True).
    def apply_rule1(mol):
        try:
            # Primary amine
            primary_amine = Chem.MolFromSmarts('[NX3H2]')
            # Carboxylic acid
            carboxylic_acid = Chem.MolFromSmarts('[CX3](=O)[OX2H1]')
            # Check if both groups are present
            if mol.HasSubstructMatch(primary_amine) and mol.HasSubstructMatch(carboxylic_acid):
                # Find matches for primary amine and carboxylic acid
                amine_matches = [match[0] for match in mol.GetSubstructMatches(primary_amine)]
                acid_matches = [match[0] for match in mol.GetSubstructMatches(carboxylic_acid)]
                # For each combination, check the chain between them
                for amine_idx in amine_matches:
                    for acid_idx in acid_matches:
                        # Find shortest path between amine and acid
                        path = Chem.GetShortestPath(mol, amine_idx, acid_idx)
                        # Check if path length is at least 7 (includes N and C atoms)
                        if len(path) >= 7:
                            # At least 5 atoms between N and C
                            chain_atoms = path[1:-1]  # Exclude ends
                            # Verify all atoms in the chain are carbons
                            carbons_only = all(mol.GetAtomWithIdx(idx).GetAtomicNum() == 6 for idx in chain_atoms)
                            # Verify linearity (degree 2 for internal carbons)
                            linear_chain = all(mol.GetAtomWithIdx(idx).GetDegree() == 2 for idx in chain_atoms)
                            if carbons_only and linear_chain:
                                return 1
            return 0
        except:
            return 0

    # Rule 2: Aromatic carboxylic acids with strong electron-withdrawing groups at the para position predict a high Fe/Hf value (True).
    def apply_rule2(mol):
        try:
            # Aromatic carboxylic acid
            aromatic_acid = Chem.MolFromSmarts('c[C](=O)[O]')
            acid_matches = mol.GetSubstructMatches(aromatic_acid)
            if not acid_matches:
                return 0
            # Strong EWG patterns
            nitro = Chem.MolFromSmarts('[N+](=O)[O-]')
            bromomethyl = Chem.MolFromSmarts('CBr')
            pyridyl = Chem.MolFromSmarts('n1ccccc1')
            ewgs = [nitro, bromomethyl, pyridyl]
            # Check for para substitution
            for match in acid_matches:
                acid_carbon_idx = match[0]
                # Get neighboring atoms in aromatic ring
                aromatic_ring = None
                for ring in mol.GetRingInfo().AtomRings():
                    if acid_carbon_idx in ring:
                        aromatic_ring = ring
                        break
                if aromatic_ring:
                    ring_size = len(aromatic_ring)
                    idx_in_ring = aromatic_ring.index(acid_carbon_idx)
                    para_idx = aromatic_ring[(idx_in_ring + ring_size // 2) % ring_size]
                    # Check if EWG is attached at para position
                    for ewg in ewgs:
                        for match in mol.GetSubstructMatches(ewg):
                            if para_idx in match:
                                return 1
            return 0
        except:
            return 0

    # Rule 3: Modifiers containing functional groups capable of coordinating metals predict a high Fe/Hf value (True).
    def apply_rule3(mol):
        try:
            # Metal-coordinating groups
            thiol = Chem.MolFromSmarts('[SX2H]')
            thioether = Chem.MolFromSmarts('[#16X2][#6]')
            pyridine_ring = Chem.MolFromSmarts('n1ccccc1')
            amino_group = Chem.MolFromSmarts('[NX3;H2,H1,H0]')
            groups = [thiol, thioether, pyridine_ring, amino_group]
            for grp in groups:
                if mol.HasSubstructMatch(grp):
                    return 1
            return 0
        except:
            return 0

    # Rule 4: Aromatic carboxylic acids with electron-donating groups at the para position predict a low Fe/Hf value (False).
    def apply_rule4(mol):
        try:
            # Aromatic carboxylic acid
            aromatic_acid = Chem.MolFromSmarts('c[C](=O)[O]')
            acid_matches = mol.GetSubstructMatches(aromatic_acid)
            if not acid_matches:
                return 0
            # Electron-donating groups
            amino = Chem.MolFromSmarts('N')
            methyl = Chem.MolFromSmarts('C')
            hydroxyl = Chem.MolFromSmarts('O')
            edgs = [amino, methyl, hydroxyl]
            # Check for para substitution
            for match in acid_matches:
                acid_carbon_idx = match[0]
                # Get aromatic ring
                aromatic_ring = None
                for ring in mol.GetRingInfo().AtomRings():
                    if acid_carbon_idx in ring:
                        aromatic_ring = ring
                        break
                if aromatic_ring:
                    ring_size = len(aromatic_ring)
                    idx_in_ring = aromatic_ring.index(acid_carbon_idx)
                    para_idx = aromatic_ring[(idx_in_ring + ring_size // 2) % ring_size]
                    # Check if EDG is attached at para position
                    for edg in edgs:
                        for match in mol.GetSubstructMatches(edg):
                            if para_idx in match:
                                return -1
            return 0
        except:
            return 0

    # Rule 5: Modifiers containing polyether chains with or without terminal amino groups predict a high Fe/Hf value (True).
    def apply_rule5(mol):
        try:
            # Polyether chain pattern
            ether = Chem.MolFromSmarts('[#6]O[#6]')
            ether_count = len(mol.GetSubstructMatches(ether))
            if ether_count >= 2:
                return 1
            return 0
        except:
            return 0

    # Rule 6: Modifiers with multiple hydroxyl groups (polyols), sugar-like structures, or perfluoroalkyl chains predict a low Fe/Hf value (False).
    def apply_rule6(mol):
        try:
            # Multiple hydroxyl groups
            hydroxyl = Chem.MolFromSmarts('[OX2H]')
            hydroxyl_matches = mol.GetSubstructMatches(hydroxyl)
            if len(hydroxyl_matches) >= 2:
                return -1
            # Perfluoroalkyl chains
            perfluoroalkyl = Chem.MolFromSmarts('C(F)(F)F')
            if mol.HasSubstructMatch(perfluoroalkyl):
                return -1
            # Sugar-like structures (simplified as rings with oxygen and multiple hydroxyls)
            for ring in mol.GetRingInfo().AtomRings():
                ring_atoms = [mol.GetAtomWithIdx(idx) for idx in ring]
                if any(atom.GetAtomicNum() == 8 for atom in ring_atoms):
                    if len([atom for atom in ring_atoms if atom.GetAtomicNum() == 6]) >= 4:
                        return -1
            return 0
        except:
            return 0

    # Rule 7: Amino acids with small aromatic side chains predict a high Fe/Hf value (True), larger electron-rich side chains predict a low Fe/Hf value (False).
    def apply_rule7(mol):
        try:
            # Amino acid backbone
            amino_acid = Chem.MolFromSmarts('NCC(=O)O')
            if mol.HasSubstructMatch(amino_acid):
                # Small aromatic side chain (phenylalanine)
                phenyl = Chem.MolFromSmarts('c1ccccc1')
                if mol.HasSubstructMatch(phenyl):
                    return 1
                # Larger aromatic side chain (indole)
                indole = Chem.MolFromSmarts('c1ccc2c(c1)cc[nH]2')
                if mol.HasSubstructMatch(indole):
                    return -1
            return 0
        except:
            return 0

    # Rule 8: Modifiers containing aldehyde or ketone groups directly attached to aromatic rings predict a low Fe/Hf value (False).
    def apply_rule8(mol):
        try:
            # Aldehyde or ketone attached to aromatic ring
            carbonyl = Chem.MolFromSmarts('c[C](=O)[#6]')
            if mol.HasSubstructMatch(carbonyl):
                return -1
            return 0
        except:
            return 0

    # Rule 9: Simple aliphatic carboxylic acids with no additional functional groups predict a low Fe/Hf value (False).
    def apply_rule9(mol):
        try:
            # Carboxylic acid
            carboxylic_acid = Chem.MolFromSmarts('[CX3](=O)[OX2H1]')
            # No other functional groups (only carbon and hydrogen)
            for atom in mol.GetAtoms():
                if atom.GetAtomicNum() not in [1, 6, 8]:
                    return 0
            if mol.HasSubstructMatch(carboxylic_acid):
                return -1
            return 0
        except:
            return 0

    # Rule 10: Modifiers with hydroxyl or amino groups on aliphatic chains longer than five carbons predict a high Fe/Hf value (True).
    def apply_rule10(mol):
        try:
            # Hydroxyl or amino group
            hydroxyl = Chem.MolFromSmarts('[OX2H]')
            amino = Chem.MolFromSmarts('[NX3H2]')
            # Check for chains longer than five carbons
            chains = Chem.rdmolops.GetMolFrags(mol, asMols=True, sanitizeFrags=False)
            for chain in chains:
                carbons = [atom for atom in chain.GetAtoms() if atom.GetAtomicNum() == 6]
                if len(carbons) >= 5:
                    if chain.HasSubstructMatch(hydroxyl) or chain.HasSubstructMatch(amino):
                        return 1
            return 0
        except:
            return 0

    # Rule 11: Modifiers containing ketone groups on aliphatic chains attached to methoxy-substituted aromatic rings predict a high Fe/Hf value (True).
    def apply_rule11(mol):
        try:
            # Ketone on aliphatic chain
            aliph_ketone = Chem.MolFromSmarts('[CH2][CX3](=O)[CH2]')
            # Methoxy-substituted aromatic ring
            methoxy_aromatic = Chem.MolFromSmarts('c[OX2][CH3]')
            if mol.HasSubstructMatch(aliph_ketone) and mol.HasSubstructMatch(methoxy_aromatic):
                return 1
            return 0
        except:
            return 0

    # Now process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*number_of_rules)
            continue
        row = []
        # Apply each rule
        row.append(apply_rule1(mol))
        row.append(apply_rule2(mol))
        row.append(apply_rule3(mol))
        row.append(apply_rule4(mol))
        row.append(apply_rule5(mol))
        row.append(apply_rule6(mol))
        row.append(apply_rule7(mol))
        row.append(apply_rule8(mol))
        row.append(apply_rule9(mol))
        row.append(apply_rule10(mol))
        row.append(apply_rule11(mol))
        results.append(row)

    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {i+1}' for i in range(number_of_rules)])
    return df
