def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and structural features

    # Carboxylic acid group (-COOH)
    carboxylic_acid = ['[CX3](=O)[OX2H1]', '[CX3](=O)[O-]']

    # Primary amino group (-NH2) attached to an aliphatic carbon
    primary_aliphatic_amine = '[NX3H2][CX4]'
    
    # Additional carboxylic acid groups (excluding the one attached to the amine chain)
    additional_carboxylic_acid = '[CX3](=O)[OX1-,OX2H1]'

    # Thiol group (-SH)
    thiol = '[SX2H]'
    
    # Pyridine ring with accessible nitrogen
    pyridine_ring = '[nX2]1cccc1'

    # Electron-withdrawing groups on aromatic ring (e.g., nitro group)
    nitro_group_on_aromatic = '[c][NX3](=O)=O'
    
    # Ether linkage in aliphatic chain (-O-)
    ether_linkage = '[#6][OX2][#6]'
    
    # Multiple hydroxyl groups (-OH)
    hydroxyl_group = '[OX2H]'
    
    # Perfluoroalkyl or trifluoromethyl groups
    perfluoroalkyl = '[CX4]([F,Cl,Br,I])[F,Cl,Br,I][F,Cl,Br,I]'
    
    # Electron-donating groups on aromatic ring (e.g., hydroxyl or methoxy group)
    hydroxyl_or_methoxy_on_aromatic = ['[c][OX2H]', '[c][OX2][CH3]']
    
    # Diacid (two carboxylic acid groups)
    diacid = '[CX3](=O)[OX1-,OX2H1][#6][#6][#6][CX3](=O)[OX1-,OX2H1]'
    
    # Bulky aromatic side chains (e.g., indole group)
    indole_group = 'c1cc2c(c1)cc[nH]2'
    
    # Simple aliphatic carboxylic acids without additional coordinating functional groups
    simple_aliphatic_acid = '[#6][CX3](=O)[OX1-,OX2H1]'
    
    # Aromatic amine attached directly to aromatic ring (aniline)
    aromatic_amine = '[c][NX3H2]'
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers containing a primary amino group (-NH₂) attached to an aliphatic chain without additional carboxylic acid groups predict high Fe/Hf values.',
            'patterns': [
                [primary_aliphatic_amine]  # Primary aliphatic amine
            ],
            'exclude_patterns': [
                additional_carboxylic_acid  # Exclude additional carboxylic acid groups
            ],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers containing both a thiol group (-SH) and a carboxylic acid group (-COOH) predict high Fe/Hf values.',
            'patterns': [
                [thiol],  # Thiol group
                carboxylic_acid  # Carboxylic acid
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers containing a pyridine ring with an accessible nitrogen atom predict high Fe/Hf values.',
            'patterns': [
                [pyridine_ring]  # Pyridine ring
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers with electron-withdrawing groups (e.g., nitro group -NO₂) on an aromatic ring predict high Fe/Hf values.',
            'patterns': [
                [nitro_group_on_aromatic],  # Nitro group on aromatic ring
                carboxylic_acid  # Carboxylic acid
            ],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers containing multiple ether linkages (-O-) in the aliphatic chain and a terminal carboxylic acid group predict high Fe/Hf values.',
            'patterns': [
                [ether_linkage],  # Ether linkage
                carboxylic_acid  # Carboxylic acid
            ],
            'count_threshold': {'[OX2]': 2},  # At least two ether linkages
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers containing multiple hydroxyl groups (-OH) on aliphatic chains or aromatic rings predict low Fe/Hf values.',
            'patterns': [
                [hydroxyl_group]  # Hydroxyl group
            ],
            'count_threshold': {'[OX2H]': 2},  # At least two hydroxyl groups
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Modifiers containing perfluoroalkyl groups or trifluoromethyl groups attached to a carboxylic acid predict low Fe/Hf values.',
            'patterns': [
                [perfluoroalkyl],  # Perfluoroalkyl or trifluoromethyl group
                carboxylic_acid  # Carboxylic acid
            ],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Modifiers that are aromatic carboxylic acids with electron-donating groups (e.g., hydroxyl or methoxy groups) predict low Fe/Hf values.',
            'patterns': [
                hydroxyl_or_methoxy_on_aromatic,  # Hydroxyl or methoxy on aromatic ring
                carboxylic_acid  # Carboxylic acid
            ],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers that are diacids predict low Fe/Hf values unless they have other strong coordinating groups that facilitate chelation.',
            'patterns': [
                [diacid]  # Diacid pattern
            ],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers with bulky aromatic side chains, such as indole groups, predict low Fe/Hf values due to steric hindrance affecting coordination.',
            'patterns': [
                [indole_group]  # Indole group
            ],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Modifiers that are simple aliphatic carboxylic acids without additional coordinating functional groups predict low Fe/Hf values.',
            'patterns': [
                [simple_aliphatic_acid]  # Simple aliphatic carboxylic acid
            ],
            'exclude_patterns': [
                [primary_aliphatic_amine, thiol, ether_linkage, pyridine_ring]  # Exclude molecules with these groups
            ],
            'prediction': -1
        }
    ]

    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(p) for p in group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for group in rule['exclude_patterns']:
                if isinstance(group, list):
                    compiled_group = [Chem.MolFromSmarts(p) for p in group]
                else:
                    compiled_group = [Chem.MolFromSmarts(group)]
                compiled_excludes.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_excludes
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        matches = mol.GetSubstructMatches(pat)
                        if matches:
                            # Check for count threshold if specified
                            if 'count_threshold' in rule and pat.GetSmarts() in rule['count_threshold']:
                                threshold = rule['count_threshold'][pat.GetSmarts()]
                                if len(matches) >= threshold:
                                    group_match = True
                                    break
                            else:
                                group_match = True
                                break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df