def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and structural features
    
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    
    # Primary amino group (-NH2)
    primary_amine = '[NX3H2]'
    
    # Thiol group (-SH)
    thiol = '[SX2H]'
    
    # Thioether group (-S-)
    thioether = '[#16X2]([#6])[#6]'
    
    # Pyridine ring
    pyridine_ring = 'n1cccc1'
    
    # Aromatic carboxylic acid
    aromatic_carboxylic_acid = '[c][CX3](=O)[OX2H1]'
    
    # Electron-withdrawing groups on aromatic ring (e.g., nitro, halogens)
    nitro_group = '[NX3](=O)=O'
    halogen = '[c][F,Cl,Br,I]'
    
    # Polyether chain (-O-CH2CH2-)
    polyether_chain = '([#6][OX2][#6][#6][OX2][#6])'
    
    # Aromatic amino acid (amino group attached to aliphatic chain with aromatic side chain)
    aromatic_side_chain = '[CX3H1]([#6])[c]'
    
    # Multiple adjacent hydroxyl groups (polyols)
    polyol = '[OX2H][CX4][OX2H]'
    
    # Amide group (-CONH-)
    amide = '[NX3][CX3](=O)[#6]'
    
    # Nonaromatic heterocycles with nitrogen
    nonaromatic_heterocycle_nitrogen = '[NR3r5,NR3r6]'
    
    # Electron-donating groups on aromatic ring (e.g., hydroxyl, methoxy)
    edg_on_aromatic = '[c][OX2H,OX1-,OX2][#1,#6]'
    
    # Aliphatic hydroxyl group (-OH) in long chain
    aliphatic_hydroxyl = '[CX4][OX2H]'
    
    # Multiple electron-withdrawing groups (e.g., fluorine atoms in aliphatic chain)
    multiple_fluorines = '[CX4]([F])([F])[F]'
    
    # Ketone group adjacent to aromatic ring
    aromatic_ketone = '[c][CX3](=O)[#6]'
    
    # Thioether and amide together
    thioether_and_amide = '[NX3][CX3](=O)[#6][SX2][#6]'
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers containing both an amino group (-NH2) and a carboxylic acid group (-COOH) separated by an aliphatic chain of at least four carbon atoms predict a high Fe/Hf value.',
            'patterns': [[primary_amine], [carboxylic_acid]],
            'chain_length': 4,
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers featuring a pyridine ring and a carboxylic acid group (-COOH) attached directly or via a short aliphatic chain predict a high Fe/Hf value.',
            'patterns': [[pyridine_ring], [carboxylic_acid]],
            'max_chain_length': 3,
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers containing both a thiol group (-SH) and a carboxylic acid group (-COOH) predict a high Fe/Hf value if they are appropriately spaced to allow chelation.',
            'patterns': [[thiol], [carboxylic_acid]],
            'max_chain_length': 4,
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers that are carboxylic acids (aromatic or aliphatic) without additional strong coordinating groups predict a low Fe/Hf value.',
            'patterns': [[carboxylic_acid]],
            'exclude_patterns': [[primary_amine], [thiol], [thioether], [pyridine_ring], [polyether_chain]],
            'prediction': -1
        },
        {
            'number': 5,
            'description': 'Modifiers that are aromatic carboxylic acids with electron-withdrawing groups (e.g., nitro -NO2) on the ring predict a high Fe/Hf value.',
            'patterns': [[aromatic_carboxylic_acid], [nitro_group]],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers featuring polyether chains ending with a carboxylic acid group (-COOH) predict a high Fe/Hf value.',
            'patterns': [[polyether_chain], [carboxylic_acid]],
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'Modifiers that are amino acids with aromatic side chains capable of participating in coordination predict a high Fe/Hf value.',
            'patterns': [[aromatic_side_chain], [primary_amine], [carboxylic_acid]],
            'prediction': 1
        },
        {
            'number': 8,
            'description': 'Modifiers containing multiple adjacent hydroxyl groups (-OH) (polyols) along with a carboxylic acid group (-COOH) predict a low Fe/Hf value.',
            'patterns': [[polyol], [carboxylic_acid]],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers featuring a combination of amide bonds (-CONH-) and additional coordination sites such as an amino group (-NH2) or thioether (-S-) predict a high Fe/Hf value.',
            'patterns': [[amide], [primary_amine, thioether]],
            'prediction': 1
        },
        {
            'number': 10,
            'description': 'Modifiers containing nonaromatic heterocycles with nitrogen atoms that are less accessible for coordination predict a low Fe/Hf value.',
            'patterns': [[nonaromatic_heterocycle_nitrogen]],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Modifiers that are aromatic carboxylic acids with electron-donating groups (e.g., hydroxyl -OH, methoxy -OCH3) on the ring predict a low Fe/Hf value unless additional coordinating groups are present.',
            'patterns': [[aromatic_carboxylic_acid], [edg_on_aromatic]],
            'exclude_patterns': [[primary_amine], [thiol], [thioether], [pyridine_ring]],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'Modifiers with long-chain aliphatic hydroxyl groups (-OH) and a carboxylic acid group (-COOH) predict a high Fe/Hf value.',
            'patterns': [[aliphatic_hydroxyl], [carboxylic_acid]],
            'chain_length': 6,
            'prediction': 1
        },
        {
            'number': 13,
            'description': 'Modifiers containing multiple electron-withdrawing groups (e.g., fluorine atoms) in the aliphatic chain predict a low Fe/Hf value.',
            'patterns': [[multiple_fluorines], [carboxylic_acid]],
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'Modifiers containing ketone groups (C=O) adjacent to an aromatic ring and a carboxylic acid group (-COOH) predict a high Fe/Hf value when the ketone can participate in coordination.',
            'patterns': [[aromatic_ketone], [carboxylic_acid]],
            'prediction': 1
        },
        {
            'number': 15,
            'description': 'Modifiers containing both thioether groups (-S-) and amide bonds (-CONH-) along with a carboxylic acid group (-COOH) predict a high Fe/Hf value.',
            'patterns': [[thioether_and_amide], [carboxylic_acid]],
            'prediction': 1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(p) for p in group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for group in rule['exclude_patterns']:
                compiled_group = [Chem.MolFromSmarts(p) for p in group]
                compiled_excludes.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_excludes
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        if mol.HasSubstructMatch(pat):
                            group_match = True
                            break
                    if not group_match:
                        match = False
                        break
                # Additional checks for chain length if specified
                if match and 'chain_length' in rule:
                    # Find all paths between the atoms of interest
                    atom_pairs = []
                    # For rule 1, between amino nitrogen and carboxylic acid carbon
                    if rule['number'] == 1:
                        amine_nitrogens = mol.GetSubstructMatches(Chem.MolFromSmarts(primary_amine))
                        carboxyl_carbons = mol.GetSubstructMatches(Chem.MolFromSmarts(carboxylic_acid))
                        for n in amine_nitrogens:
                            for c in carboxyl_carbons:
                                atom_pairs.append((n[0], c[0]))
                    # For rule 12, between hydroxyl group and carboxylic acid
                    elif rule['number'] == 12:
                        hydroxyl_oxygens = mol.GetSubstructMatches(Chem.MolFromSmarts(aliphatic_hydroxyl))
                        carboxyl_carbons = mol.GetSubstructMatches(Chem.MolFromSmarts(carboxylic_acid))
                        for o in hydroxyl_oxygens:
                            for c in carboxyl_carbons:
                                atom_pairs.append((o[0], c[0]))
                    else:
                        atom_pairs = []
                    path_found = False
                    for pair in atom_pairs:
                        path = Chem.GetShortestPath(mol, pair[0], pair[1])
                        # Count the number of carbons in the path
                        carbon_count = sum(1 for idx in path if mol.GetAtomWithIdx(idx).GetAtomicNum() == 6)
                        if carbon_count >= rule['chain_length']:
                            path_found = True
                            break
                    if not path_found:
                        match = False
                # Additional checks for max chain length if specified
                if match and 'max_chain_length' in rule:
                    # For rule 2 and 3
                    atom_pairs = []
                    if rule['number'] == 2:
                        pyridine_nitrogens = mol.GetSubstructMatches(Chem.MolFromSmarts(pyridine_ring))
                        carboxyl_carbons = mol.GetSubstructMatches(Chem.MolFromSmarts(carboxylic_acid))
                        for n in pyridine_nitrogens:
                            for c in carboxyl_carbons:
                                atom_pairs.append((n[0], c[0]))
                    elif rule['number'] == 3:
                        thiol_sulfurs = mol.GetSubstructMatches(Chem.MolFromSmarts(thiol))
                        carboxyl_carbons = mol.GetSubstructMatches(Chem.MolFromSmarts(carboxylic_acid))
                        for s in thiol_sulfurs:
                            for c in carboxyl_carbons:
                                atom_pairs.append((s[0], c[0]))
                    else:
                        atom_pairs = []
                    path_found = False
                    for pair in atom_pairs:
                        path = Chem.GetShortestPath(mol, pair[0], pair[1])
                        # Count the number of atoms in the path excluding the endpoints
                        path_length = len(path) - 2
                        if path_length <= rule['max_chain_length']:
                            path_found = True
                            break
                    if not path_found:
                        match = False
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df