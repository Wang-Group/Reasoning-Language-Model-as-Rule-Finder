def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    
    # Primary aliphatic amino group (-NH2)
    primary_aliphatic_amino = '[NX3;H2][CX4]'
    
    # Thiol group (-SH)
    thiol_group = '[SX2H][CX4]'
    
    # Ether linkage (-O-)
    ether_linkage = '[#6]-[OX2]-[#6]'
    
    # Methoxy group (-OCH3)
    methoxy_group = '[OX2][CH3]'
    
    # Pyridine ring
    pyridine_ring = 'n1ccccc1'
    
    # Aromatic thiol
    aromatic_thiol = 'c[SX2H]'
    
    # Aromatic bromomethyl
    aromatic_bromomethyl = 'c[CH2Br]'
    
    # Aromatic nitro
    aromatic_nitro = 'c[N+](=O)[O-]'
    
    # Aromatic amino (-NH2)
    aromatic_amino = 'c[NH2]'
    
    # Aromatic hydroxyl (-OH)
    aromatic_hydroxyl = 'c[OH]'
    
    # Aromatic methyl (-CH3)
    aromatic_methyl = 'cC'
    
    # Hydroxyl group (-OH)
    hydroxyl_group = '[OX2H]'
    
    # Perfluoroalkyl group (trifluoromethyl as example)
    perfluoroalkyl = '[CX4](F)(F)F'
    
    # Heterocyclic carboxylic acids with heteroatoms not positioned for coordination
    heterocycle_carboxylic_acid = '[n,o,s][#6][CX3](=O)[OX2H1]'
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are aliphatic carboxylic acids with terminal primary amino (–NH₂) or thiol (–SH) groups on a straight carbon chain of three or more carbons, with no branching or additional functional groups.',
            'patterns': [
                [carboxylic_acid],
                [primary_aliphatic_amino, thiol_group]
            ],
            'extra_checks': 'rule1_additional_checks',
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers that are aromatic carboxylic acids with para-substituted electron-withdrawing groups capable of metal coordination, such as thiol (–SH), bromomethyl (–CH₂Br), or nitro (–NO₂) groups.',
            'patterns': [
                [aromatic_thiol, aromatic_bromomethyl, aromatic_nitro],
                [carboxylic_acid]
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers containing a pyridine ring connected via a linker to a carboxylic acid group.',
            'patterns': [
                [pyridine_ring],
                [carboxylic_acid]
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers with flexible ether chains terminating with coordinating groups, such as amino (–NH₂) or methoxy (–OCH₃) groups.',
            'patterns': [
                [ether_linkage],
                [primary_aliphatic_amino, methoxy_group],
                [carboxylic_acid]
            ],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers that are alpha-amino acids with sulfur-containing side chains (e.g., methionine derivatives) or those with acetamido groups.',
            'patterns': [
                ['[NX3;H2][CX4][CX4][SX2][#6]'],  # Simplified pattern for methionine-like side chain
                ['[CX3](=O)[NX3;H1,C]'],  # Amide bond (acetamido group)
                [carboxylic_acid]
            ],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers that are aliphatic or aromatic carboxylic acids without functional groups capable of effective metal coordination, or with non-coordinating substituents.',
            'patterns': [
                [carboxylic_acid]
            ],
            'exclude_patterns': [
                [primary_aliphatic_amino, thiol_group, ether_linkage, pyridine_ring, aromatic_thiol, aromatic_bromomethyl, aromatic_nitro]
            ],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Modifiers with multiple hydroxyl (–OH) groups or bulky polyhydroxylated structures, such as sugar acids or polyols.',
            'patterns': [
                [hydroxyl_group],
                [carboxylic_acid]
            ],
            'count_threshold': {'[OX2H]': 2},  # At least 2 hydroxyl groups
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Modifiers that are aromatic carboxylic acids with para-substituted electron-donating groups not capable of coordination, such as amino (–NH₂), hydroxyl (–OH), or methyl (–CH₃) groups.',
            'patterns': [
                [aromatic_amino, aromatic_hydroxyl, aromatic_methyl],
                [carboxylic_acid]
            ],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers containing perfluoroalkyl chains or non-coordinating electron-withdrawing groups.',
            'patterns': [
                [perfluoroalkyl],
                [carboxylic_acid]
            ],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers that are heterocyclic carboxylic acids with heteroatoms not positioned for effective metal coordination.',
            'patterns': [
                [heterocycle_carboxylic_acid]
            ],
            'prediction': -1
        }
    ]

    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(p) for p in group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for group in rule['exclude_patterns']:
                compiled_group = [Chem.MolFromSmarts(p) for p in group]
                compiled_excludes.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_excludes

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        matches = mol.GetSubstructMatches(pat)
                        if matches:
                            # If a count threshold is specified for this pattern
                            if 'count_threshold' in rule and pat.GetSmarts() in rule['count_threshold']:
                                threshold = rule['count_threshold'][pat.GetSmarts()]
                                if len(matches) >= threshold:
                                    group_match = True
                                    break
                            else:
                                group_match = True
                                break
                    if not group_match:
                        match = False
                        break
                # Apply extra checks if any
                if match and 'extra_checks' in rule:
                    # For Rule 1, do additional checks
                    if rule['extra_checks'] == 'rule1_additional_checks':
                        match = rule1_additional_checks(mol)
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

def rule1_additional_checks(mol):
    # Additional checks for Rule 1
    # Check for chain length, straight chain, no branching, etc.
    # Get all carboxylic acid groups
    carboxylic_acid_pattern = Chem.MolFromSmarts('[CX3](=O)[OX2H1]')
    carboxylic_acid_matches = mol.GetSubstructMatches(carboxylic_acid_pattern)
    if not carboxylic_acid_matches:
        return False
    # Get all primary aliphatic amino groups
    primary_amino_pattern = Chem.MolFromSmarts('[NX3;H2][CX4]')
    primary_amino_matches = mol.GetSubstructMatches(primary_amino_pattern)
    # Get all thiol groups
    thiol_pattern = Chem.MolFromSmarts('[SX2H][CX4]')
    thiol_matches = mol.GetSubstructMatches(thiol_pattern)
    # If neither amino nor thiol groups are present, return False
    if not primary_amino_matches and not thiol_matches:
        return False
    # Now, check for a straight chain connecting the two groups, with at least three carbons, unbranched, no other functional groups
    # For each pair of carboxylic acid and amino/thiol group, check the chain
    for acid_match in carboxylic_acid_matches:
        acid_atom_idx = acid_match[0]  # The carbon atom of the carboxyl group
        for amino_match in primary_amino_matches + thiol_matches:
            amino_atom_idx = amino_match[0]  # The nitrogen or sulfur atom
            # Find the shortest path between acid_atom_idx and amino_atom_idx
            path = Chem.rdmolops.GetShortestPath(mol, acid_atom_idx, amino_atom_idx)
            # Exclude the terminal atoms (acid carbon and amino nitrogen/sulfur)
            chain_atoms = path[1:-1]
            # Check that chain length is at least 3 carbons
            if len(chain_atoms) < 3:
                continue
            # Check that all atoms in the chain are carbons
            all_carbons = all(mol.GetAtomWithIdx(idx).GetAtomicNum() == 6 for idx in chain_atoms)
            if not all_carbons:
                continue
            # Check that all carbons are sp3 and have no branching
            chain_unbranched = True
            for idx in chain_atoms:
                atom = mol.GetAtomWithIdx(idx)
                if atom.GetDegree() != 2 or atom.GetHybridization() != Chem.HybridizationType.SP3:
                    chain_unbranched = False
                    break
            if not chain_unbranched:
                continue
            # Check for no other functional groups attached to the chain carbons
            has_other_functional_groups = False
            for idx in chain_atoms:
                atom = mol.GetAtomWithIdx(idx)
                for neighbor in atom.GetNeighbors():
                    neighbor_idx = neighbor.GetIdx()
                    if neighbor_idx not in path:
                        if neighbor.GetAtomicNum() not in [1,6]:
                            has_other_functional_groups = True
                            break
                if has_other_functional_groups:
                    break
            if has_other_functional_groups:
                continue
            # If all checks pass, return True
            return True
    # If no suitable chain found, return False
    return False

