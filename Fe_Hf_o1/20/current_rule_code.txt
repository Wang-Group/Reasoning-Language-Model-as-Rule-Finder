def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    # Carboxylic acid group (-COOH)
    carboxylic_acid = Chem.MolFromSmarts('[CX3](=O)[OX2H1]')
    # Carboxylate anion (-COO-)
    carboxylate_anion = Chem.MolFromSmarts('[CX3](=O)[O-]')
    carboxylic_acids = [carboxylic_acid, carboxylate_anion]

    # Primary amine group (-NH2)
    primary_amine = Chem.MolFromSmarts('[NX3;H2]')

    # Secondary amine group (-NH-)
    secondary_amine = Chem.MolFromSmarts('[NX3;H1][#6]')

    # Thiol group (-SH)
    thiol = Chem.MolFromSmarts('[SX2H]')

    # Ether linkage (-O-)
    ether_linkage = Chem.MolFromSmarts('[#6][OX2][#6]')

    # Aromatic ring
    aromatic_ring = Chem.MolFromSmarts('a1aaaaa1')

    # Pyridine ring
    pyridine_ring = Chem.MolFromSmarts('n1ccccc1')

    # Electron-withdrawing groups (EWGs)
    nitro_group = Chem.MolFromSmarts('[NX3](=O)=O')
    halogen = Chem.MolFromSmarts('[F,Cl,Br,I]')

    # Electron-donating groups (EDGs)
    hydroxyl_group = Chem.MolFromSmarts('[OX2H]')
    amino_group = Chem.MolFromSmarts('[NX3;H2,H1][#6]')

    # Long aliphatic chain (>=5 carbons)
    long_chain = Chem.MolFromSmarts('[CH2][CH2][CH2][CH2][CH2,CH,CH2]')

    # Keto group (=O)
    keto_group = Chem.MolFromSmarts('[CX3](=O)[#6]')

    # Aldehyde group (-CHO)
    aldehyde = Chem.MolFromSmarts('[CX3H](=O)')

    # Dicarboxylic acid
    dicarboxylic_acid = Chem.MolFromSmarts('[CX3](=O)[OX1H0][#6][CX3](=O)[OX1H0]')

    # Indole ring
    indole_ring = Chem.MolFromSmarts('c1ccc2c(c1)ccn2')

    # Hydroxyl groups (two adjacent -OH)
    adjacent_hydroxyls = Chem.MolFromSmarts('[#6][OX2H][#6][OX2H]')

    # Sterically hindered groups (bulky substituents)
    bulky_substituents = Chem.MolFromSmarts('[#6]([#6])[#6]([#6])[#6]')

    # Rules
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are aliphatic amino acids containing a primary amine group (-NH2) and a carboxylic acid group (-COOH) with an unbranched carbon chain of five or more carbons.',
            'patterns': [primary_amine, carboxylic_acid, long_chain],
            'exclude_patterns': [aromatic_ring],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers that are aromatic carboxylic acids with a para-substituted electron-withdrawing group such as nitro (-NO2), bromo (-Br), or a pyridine ring.',
            'patterns': [carboxylic_acid, aromatic_ring],
            'substructure_patterns': [
                {'pattern': nitro_group, 'positions': 'para'},
                {'pattern': halogen, 'positions': 'para'},
                {'pattern': pyridine_ring, 'positions': 'attached'}
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers containing a thiol group (-SH) adjacent to the carboxylic acid group (-COOH).',
            'patterns': [carboxylic_acid],
            'adjacent_patterns': [thiol],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers that are polyether carboxylic acids with multiple ether linkages (-O-) and terminating with a carboxylic acid group (-COOH).',
            'patterns': [carboxylic_acid, ether_linkage],
            'count_threshold': {'[OX2]': 2},
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers that are amino acids with aromatic side chains possessing a primary amine group (-NH2), a carboxylic acid group (-COOH), and an unhindered aromatic ring.',
            'patterns': [primary_amine, carboxylic_acid, aromatic_ring],
            'exclude_patterns': [bulky_substituents],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers that are aliphatic or aromatic carboxylic acids with a para-substituted electron-donating group such as hydroxy (-OH) or amino (-NH2).',
            'patterns': [carboxylic_acid, aromatic_ring],
            'substructure_patterns': [
                {'pattern': hydroxyl_group, 'positions': 'para'},
                {'pattern': amino_group, 'positions': 'para'}
            ],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Modifiers that are carboxylic acids with multiple adjacent hydroxyl groups (-OH), such as polyhydroxy acids.',
            'patterns': [carboxylic_acid, adjacent_hydroxyls],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Modifiers that are long-chain aliphatic carboxylic acids without additional coordinating groups.',
            'patterns': [carboxylic_acid, long_chain],
            'exclude_patterns': [primary_amine, secondary_amine, thiol, hydroxyl_group, ether_linkage],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers containing strong electron-withdrawing fluorinated groups, such as perfluoroalkyl chains.',
            'patterns': [carboxylic_acid],
            'substructure_patterns': [
                {'pattern': Chem.MolFromSmarts('[CX4][F][F][F]'), 'positions': 'any'}
            ],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers that are aromatic carboxylic acids with sterically hindered groups near the coordination site.',
            'patterns': [carboxylic_acid, aromatic_ring, bulky_substituents],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Modifiers that are aliphatic hydroxy acids with the hydroxyl group (-OH) located at least three carbons away from the carboxylic acid group (-COOH).',
            'patterns': [carboxylic_acid],
            'distant_hydroxyl': {'distance': 3, 'pattern': hydroxyl_group},
            'prediction': 1
        },
        {
            'number': 12,
            'description': 'Modifiers that are amino acids with bulky aromatic side chains that may cause steric hindrance, such as an indole ring.',
            'patterns': [carboxylic_acid, primary_amine, indole_ring],
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Modifiers that are dicarboxylic acids with carboxylic acid groups at both ends of a short aliphatic chain.',
            'patterns': [dicarboxylic_acid],
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'Modifiers containing keto groups (=O) adjacent to aromatic systems or within the backbone.',
            'patterns': [carboxylic_acid, keto_group],
            'prediction': 1
        },
        {
            'number': 15,
            'description': 'Modifiers that are aliphatic carboxylic acids with a terminal aldehyde group (-CHO).',
            'patterns': [carboxylic_acid, aldehyde],
            'prediction': -1
        }
    ]

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for exclude_pat in rule['exclude_patterns']:
                        if mol.HasSubstructMatch(exclude_pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for pat in rule['patterns']:
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Check substructure patterns with positions if any
                if 'substructure_patterns' in rule:
                    for sub_pat in rule['substructure_patterns']:
                        pat = sub_pat['pattern']
                        matches = mol.GetSubstructMatches(pat)
                        if not matches:
                            match = False
                            break
                        # Additional positional checks can be implemented here
                if not match:
                    row.append(0)
                    continue
                # Check adjacent patterns if any
                if 'adjacent_patterns' in rule:
                    for adj_pat in rule['adjacent_patterns']:
                        adj_match = False
                        matches = mol.GetSubstructMatches(carboxylic_acid)
                        for match_idx in matches:
                            atom = mol.GetAtomWithIdx(match_idx[0])
                            neighbors = atom.GetNeighbors()
                            for neighbor in neighbors:
                                if neighbor.Match(adj_pat):
                                    adj_match = True
                                    break
                            if adj_match:
                                break
                        if not adj_match:
                            match = False
                            break
                if not match:
                    row.append(0)
                    continue
                # Check count thresholds if any
                if 'count_threshold' in rule:
                    for smarts_str, threshold in rule['count_threshold'].items():
                        count_pat = Chem.MolFromSmarts(smarts_str)
                        matches = mol.GetSubstructMatches(count_pat)
                        if len(matches) < threshold:
                            match = False
                            break
                if not match:
                    row.append(0)
                    continue
                # Check distant hydroxyl group for Rule 11
                if 'distant_hydroxyl' in rule:
                    distance = rule['distant_hydroxyl']['distance']
                    hydroxyl_pat = rule['distant_hydroxyl']['pattern']
                    ca_matches = mol.GetSubstructMatches(carboxylic_acid)
                    oh_matches = mol.GetSubstructMatches(hydroxyl_pat)
                    hydroxyl_found = False
                    for ca_idx in ca_matches:
                        ca_atom_idx = ca_idx[0]  # Carboxylic carbon
                        for oh_idx in oh_matches:
                            oh_atom_idx = oh_idx[0]  # Hydroxyl oxygen
                            path_length = len(Chem.rdmolops.GetShortestPath(mol, ca_atom_idx, oh_atom_idx)) - 1
                            if path_length >= distance:
                                hydroxyl_found = True
                                break
                        if hydroxyl_found:
                            break
                    if not hydroxyl_found:
                        match = False
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df
