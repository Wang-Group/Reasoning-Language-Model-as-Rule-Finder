def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    
    # Primary amine group (-NH2)
    primary_amine = '[NX3H2]'
    
    # Thiol group (-SH)
    thiol = '[SX2H]'
    
    # Thioether group (-S-)
    thioether = '[#6][SX2][#6]'
    
    # Ether linkage (-O-)
    ether_linkage = '[#6][OX2][#6]'
    
    # Hydroxyl group (-OH)
    hydroxyl_group = '[OX2H]'
    
    # Aromatic rings
    aromatic_ring = '[a]'
    
    # Halogens
    halogen = '[F,Cl,Br,I]'
    
    # Electron-withdrawing groups (EWGs)
    ewg_patterns = ['[NX3](=O)=O', '[CX3](=O)[#6]', '[F,Cl,Br,I]', '[CX4](F)(F)F']
    
    # Electron-donating groups (EDGs) on aromatic ring
    edg_on_aromatic = ['[c][OX2H]', '[c][OX2][CH3]', '[c][NX3H2]', '[c][NX3H][#6]', '[c][NX3]([#6])[#6]']
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'High Fe/Hf Value: Straight-chain Ï‰-amino acids with a terminal primary amino group and a chain length of five carbons or more.',
            'patterns': [
                {'smarts': '[NX3H2]-[CH2]{5,}-[CX3](=O)[OX2H1]'},  # Primary amine connected via 5+ CH2 to carboxylic acid
                {'smarts': '[OX2H1][CX3](=O)-[CH2]{5,}-[NX3H2]'}   # Carboxylic acid connected via 5+ CH2 to primary amine
            ],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'High Fe/Hf Value: Para-substituted benzoic acids with electron-withdrawing groups (EWGs).',
            'patterns': [
                {'smarts': '[cH]1[cH][cH][cH][cH][c]1[CX3](=O)[OX2H1]'},  # Benzoic acid core
                {'smarts_list': ewg_patterns, 'attach_to': 'para'}            # EWG at para position
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'High Fe/Hf Value: Modifiers containing sulfur functional groups (thiol or thioether) and a carboxylic acid group.',
            'patterns': [
                [thiol, thioether],
                [carboxylic_acid]
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'High Fe/Hf Value: Aliphatic carboxylic acids containing polyethylene glycol (PEG) chains and terminating with an amino or methoxy group.',
            'patterns': [
                {'smarts': '[#6][OX2][#6][OX2][#6][OX2][#6]'},  # PEG chain
                {'smarts': '[NX3H2]', 'position': 'end'},          # Terminal amino group
                {'smarts': '[OX2][CH3]', 'position': 'end'},       # Terminal methoxy group
                [carboxylic_acid]
            ],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'High Fe/Hf Value: Aliphatic hydroxy acids with a terminal hydroxyl group and a chain length of seven carbons or more.',
            'patterns': [
                {'smarts': '[OX2H]-[CH2]{7,}-[CX3](=O)[OX2H1]'},
                {'smarts': '[CX3](=O)[OX2H1]-[CH2]{7,}-[OX2H]'}
            ],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Low Fe/Hf Value: Simple aliphatic carboxylic acids without additional coordinating functional groups.',
            'patterns': [
                [carboxylic_acid]
            ],
            'exclude_patterns': [
                [primary_amine],
                [thiol, thioether],
                [ether_linkage],
                [halogen],
                [aromatic_ring]
            ],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Low Fe/Hf Value: Modifiers containing multiple hydroxyl groups (polyhydroxylated acids).',
            'patterns': [
                [hydroxyl_group],
                [carboxylic_acid]
            ],
            'count_threshold': {'[OX2H]': 2},  # At least 2 hydroxyl groups
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Low Fe/Hf Value: Aromatic amino acids with bulky side chains like indole group in tryptophan.',
            'patterns': [
                {'smarts': 'c1ccc2c(c1)cc[nH]2'},  # Indole ring
                [carboxylic_acid]
            ],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Low Fe/Hf Value: Aromatic carboxylic acids with electron-donating groups (EDGs) in the para position.',
            'patterns': [
                edg_on_aromatic,
                [carboxylic_acid]
            ],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Low Fe/Hf Value: Modifiers with perfluorinated alkyl chains.',
            'patterns': [
                {'smarts': '[CX4]([F])([F])([F])'},  # Trifluoromethyl group
                [carboxylic_acid]
            ],
            'prediction': -1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = []
            if isinstance(group, dict):
                if 'smarts_list' in group:
                    # Compile multiple SMARTS in a list
                    for smarts in group['smarts_list']:
                        compiled_group.append(Chem.MolFromSmarts(smarts))
                else:
                    compiled_group.append(Chem.MolFromSmarts(group['smarts']))
            else:
                for p in group:
                    compiled_group.append(Chem.MolFromSmarts(p))
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for group in rule['exclude_patterns']:
                compiled_group = []
                for p in group:
                    compiled_group.append(Chem.MolFromSmarts(p))
                compiled_excludes.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_excludes
    
    # Initialize results list
    results = []
    number_of_rules = len(rules)
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # Append a row of zeros
            results.append([0]*number_of_rules)
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        matches = mol.GetSubstructMatches(pat)
                        if matches:
                            # If a count threshold is specified for this pattern
                            if 'count_threshold' in rule and pat.GetSmarts() in rule['count_threshold']:
                                threshold = rule['count_threshold'][pat.GetSmarts()]
                                if len(matches) >= threshold:
                                    group_match = True
                                    break
                            else:
                                group_match = True
                                break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # On error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df
