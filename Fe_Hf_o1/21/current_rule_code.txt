def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and structural features
    
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX1H1]'
    
    # Primary aliphatic amine group (-NH2)
    primary_aliph_amine = '[NX3;H2][CX4]'
    
    # Aromatic carboxylic acid group
    aromatic_carboxylic_acid = '[c][CX3](=O)[OX1H1]'
    
    # EWGs (Electron-Withdrawing Groups)
    halogen = '[F,Cl,Br,I]'
    nitro_group = '[NX3](=O)[O-]'
    trifluoromethyl = '[CX4](F)(F)F'
    ewg_patterns = [halogen, nitro_group, trifluoromethyl]
    
    # EDGs (Electron-Donating Groups)
    amino_group = '[NX3;H2,NX3;H1;!$(N-C=O)][CX4]'
    hydroxyl_group = '[OX2H][CX4]'
    methoxy_group = '[OX2][CH3]'
    edg_patterns = [amino_group, hydroxyl_group, methoxy_group]
    
    # Thiol group (-SH)
    thiol_group = '[SX2H]'
    
    # Thioether group (-S-)
    thioether_group = '[SX2][CX4]'
    
    # Ether linkage (-O-)
    ether_linkage = '[#6][OX2][#6]'
    
    # Pyridine ring
    pyridine_ring = 'n1ccccc1'
    
    # Polyhydroxylated aliphatic acids (multiple -OH groups)
    polyhydroxylated_aliphatic_acid = '[OX2H]'
    
    # Aliphatic hydroxy acid with terminal hydroxyl group
    terminal_hydroxy_group = '[OX2H][CX4H2][CX4H2][CX4H2][C](=O)[OX1H1]'  # Approximate pattern
    
    # Dicarboxylic acids with unfavorable geometry
    unfavorable_dicarboxylic_acid = '[CX3](=O)[OX1H1][CX4][CX3](=O)[OX1H1]'
    
    # Aromatic ring with ortho-hydroxyl or ortho-carbonyl groups
    ortho_hydroxyl_or_carbonyl = '[c][c](O)[c](=O)[c]'
    
    # Define the rules
    rules = [
        {
            'number': 1,
            'description': 'High Fe/Hf: Modifiers that are ω-amino aliphatic carboxylic acids with a terminal primary amino group at the end opposite the carboxylic acid.',
            'patterns': [
                carboxylic_acid,
                primary_aliph_amine
            ],
            'exclude_patterns': [
                '[a]',  # Exclude aromatic atoms
                '[CX4;!H3;!H4]'  # Exclude branching carbons
            ],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'High Fe/Hf: Modifiers that are aromatic carboxylic acids with electron-withdrawing groups (EWGs) at the para position.',
            'patterns': [
                aromatic_carboxylic_acid
            ],
            'ewg_patterns': ewg_patterns,
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Low Fe/Hf: Modifiers that are aromatic carboxylic acids with electron-donating groups (EDGs) at the para position.',
            'patterns': [
                aromatic_carboxylic_acid
            ],
            'edg_patterns': edg_patterns,
            'prediction': -1
        },
        {
            'number': 4,
            'description': 'High Fe/Hf: Modifiers containing sulfur functional groups, such as thiols (-SH) or thioethers (-S-).',
            'patterns': [
                carboxylic_acid,
                [thiol_group, thioether_group]
            ],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'High Fe/Hf: Modifiers that have nitrogen-containing heterocyclic rings (e.g., pyridine) attached to a carboxylic acid.',
            'patterns': [
                carboxylic_acid,
                pyridine_ring
            ],
            'prediction': 1
        },
        {
            'number':6,
            'description': 'Low Fe/Hf: Modifiers that are polyhydroxylated aliphatic acids (containing multiple hydroxyl groups).',
            'patterns': [
                carboxylic_acid,
                polyhydroxylated_aliphatic_acid
            ],
            'min_count': {polyhydroxylated_aliphatic_acid:2},
            'prediction': -1
        },
        {
            'number':7,
            'description': 'Low Fe/Hf: Modifiers that are aliphatic carboxylic acids without additional strong coordinating functional groups.',
            'patterns': [
                carboxylic_acid
            ],
            'exclude_patterns': [
                '[N]', '[O]', '[S]',  # Exclude N, O, S atoms (other than the ones in carboxylic acid)
                '[a]'  # Exclude aromatic atoms
            ],
            'prediction': -1
        },
        {
            'number':8,
            'description': 'High Fe/Hf: Modifiers that are α-amino acids with side chains capable of coordinating with Fe ions.',
            'patterns': [
                carboxylic_acid,
                '[NX3;H2]',  # Primary amine
                '[C][C][C](=[O])[O]'  # Approximate for α-amino acid
            ],
            'prediction':1
        },
        {
            'number':9,
            'description': 'High Fe/Hf: Modifiers that are aliphatic carboxylic acids with ether linkages in the chain and terminal functional groups capable of coordination.',
            'patterns': [
                carboxylic_acid,
                ether_linkage
            ],
            'prediction':1
        },
        {
            'number':10,
            'description': 'High Fe/Hf: Modifiers that are long-chain aliphatic hydroxy acids with a terminal hydroxyl group.',
            'patterns': [
                terminal_hydroxy_group
            ],
            'prediction':1
        },
        # More rules can be added similarly
    ]
    
    # Compile patterns
    for rule in rules:
        # Compile required patterns
        compiled_patterns = []
        for pat in rule.get('patterns', []):
            if isinstance(pat, list):
                compiled_group = [Chem.MolFromSmarts(p) for p in pat]
                compiled_patterns.append(compiled_group)
            else:
                compiled_patterns.append(Chem.MolFromSmarts(pat))
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        exclude_patterns = rule.get('exclude_patterns', [])
        rule['compiled_exclude_patterns'] = [Chem.MolFromSmarts(pat) for pat in exclude_patterns]
        # Compile EWG/EDG patterns if any
        if 'ewg_patterns' in rule:
            rule['compiled_ewg_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule['ewg_patterns']]
        if 'edg_patterns' in rule:
            rule['compiled_edg_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule['edg_patterns']]
        # Compile min_count patterns if any
        if 'min_count' in rule:
            rule['compiled_min_count'] = {Chem.MolFromSmarts(pat):count for pat, count in rule['min_count'].items()}
    
    # Initialize results list
    results = []
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                for ex_pat in rule.get('compiled_exclude_patterns', []):
                    if mol.HasSubstructMatch(ex_pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Check required patterns
                for pat in rule['compiled_patterns']:
                    if isinstance(pat, list):
                        # Group of patterns, match any
                        group_match = False
                        for sub_pat in pat:
                            if mol.HasSubstructMatch(sub_pat):
                                group_match = True
                                break
                        if not group_match:
                            match = False
                            break
                    else:
                        if not mol.HasSubstructMatch(pat):
                            match = False
                            break
                if not match:
                    row.append(0)
                    continue
                # Check min_count patterns if any
                if 'compiled_min_count' in rule:
                    for pat, count in rule['compiled_min_count'].items():
                        matches = mol.GetSubstructMatches(pat)
                        if len(matches) < count:
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # For rules with EWG/EDG patterns at para position
                if 'compiled_ewg_patterns' in rule:
                    match = check_substituent_at_para(mol, rule['compiled_ewg_patterns'], functional_group='EWG')
                    if not match:
                        row.append(0)
                        continue
                if 'compiled_edg_patterns' in rule:
                    match = check_substituent_at_para(mol, rule['compiled_edg_patterns'], functional_group='EDG')
                    if not match:
                        row.append(0)
                        continue
                # If all conditions are satisfied
                row.append(rule['prediction'])
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df

def check_substituent_at_para(mol, patterns, functional_group='EWG'):
    # Function to check if any of the patterns are present at the para position relative to a carboxylic acid group on an aromatic ring
    # Find aromatic carboxylic acid groups
    carboxylic_acid_pat = Chem.MolFromSmarts('[c][CX3](=O)[OX1H1]')
    matches = mol.GetSubstructMatches(carboxylic_acid_pat)
    if not matches:
        return False
    for match in matches:
        aromatic_c_idx = match[0]  # Index of the aromatic carbon connected to COOH
        # Get the benzene ring that aromatic_c_idx is part of
        ring_info = mol.GetRingInfo()
        atom_rings = ring_info.AtomRings()
        for ring in atom_rings:
            if aromatic_c_idx in ring and len(ring) == 6:
                # Found a benzene ring
                # Find the atom at para position
                idx_in_ring = ring.index(aromatic_c_idx)
                para_idx = ring[(idx_in_ring + 3) % 6]
                para_atom = mol.GetAtomWithIdx(para_idx)
                # Check if the atom at para position has substituents matching the patterns
                for nbr in para_atom.GetNeighbors():
                    if nbr.GetIdx() not in ring:
                        # Neighbor not in ring (i.e., substituent)
                        bond = mol.GetBondBetweenAtoms(para_atom.GetIdx(), nbr.GetIdx())
                        patt = Chem.MolFromSmiles(Chem.MolToSmiles(mol, rootedAtAtom=para_atom.GetIdx()))
                        for pat in patterns:
                            if pat.HasSubstructMatch(patt):
                                return True
    return False
