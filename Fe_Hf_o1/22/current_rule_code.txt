def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    
    # Primary amino group (-NH2)
    primary_amino = '[NX3H2]'
    
    # Aliphatic chain of five or more carbons (non-aromatic)
    aliphatic_chain_5plus = 'CCCC[C;!R]'
    
    # Thiol group (-SH)
    thiol = '[SX2H]'
    
    # Ether linkage (-O-)
    ether_linkage = '[#6][OX2][#6]'
    
    # Coordinating groups (amino or methoxy)
    amino_group = '[NX3;H2,H1;!$(NC=O)]'
    methoxy_group = '[OX2][CH3]'
    
    # Pyridine ring
    pyridine_ring = '[n][c]:[c]:[c]:[c]:[c]'
    
    # Flexible aliphatic linker (non-aromatic chain of two or more carbons)
    aliphatic_linker = 'CCC'
    
    # Simple carboxylic acid without additional coordinating groups
    simple_carboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1]'
    
    # Exclude patterns for Rule 5
    exclude_coordinating_groups = '[#7,#8,#16]'  # Exclude N, O, S
    
    # Hydroxyl group on aliphatic chain
    hydroxyl_aliphatic = '[C][C][C][C][C][OX2H]'
    
    # Electron-donating groups on aromatic ring connected via flexible linkers
    edg_on_aromatic = '[c][OX2H,OX2][C][C][C](=O)[OX1H0-,OX2H1]'
    
    # Multiple carboxylic acid groups
    multiple_carboxylic_acids = '[$([CX3](=O)[OX1H0-,OX2H1]),$([CX3](=O)[O-])][#6][CX3](=O)[OX1H0-,OX2H1]'
    
    # Electron-withdrawing groups (e.g., fluorinated chains, trifluoromethyl groups)
    ewgs = '[CX4][F,Cl,Br,I]'
    
    # Bulky, rigid structures with no additional coordinating groups
    bulky_rigid = '[c]1[c][c][c][c][c]1'
    
    # Oxygen-containing heterocycles directly attached to carboxylic acid groups
    oxygen_heterocycle = '[o][c][c](=O)[OX1H0-,OX2H1]'
    
    # Sulfur in side chains (e.g., sulfides, thioethers)
    sulfur_side_chain = '[#16][#6]'
    
    # Amide linkages adjacent to coordinating groups
    amide_adjacent = '[NX3][CX3](=O)[#7,#8,#16]'
    
    # Hydroxyl groups attached directly to aromatic rings (phenolic groups)
    phenolic_oh = '[c][OX2H]'
    
    # Compile SMARTS patterns
    smarts_patterns = {
        'Rule 1': {
            'patterns': [primary_amino, aliphatic_chain_5plus],
            'prediction': 1
        },
        'Rule 2': {
            'patterns': [thiol],
            'prediction': 1
        },
        'Rule 3': {
            'patterns': [ether_linkage, amino_group + ',' + methoxy_group],
            'prediction': 1
        },
        'Rule 4': {
            'patterns': [pyridine_ring, aliphatic_linker],
            'prediction': 1
        },
        'Rule 5': {
            'patterns': [simple_carboxylic_acid],
            'exclude': [exclude_coordinating_groups],
            'prediction': -1
        },
        'Rule 6': {
            'patterns': [hydroxyl_aliphatic],
            'prediction': 1
        },
        'Rule 7': {
            'patterns': [edg_on_aromatic],
            'prediction': 1
        },
        'Rule 8': {
            'patterns': [multiple_carboxylic_acids],
            'prediction': -1
        },
        'Rule 9': {
            'patterns': [ewgs],
            'prediction': -1
        },
        'Rule 10': {
            'patterns': [bulky_rigid],
            'exclude': [amide_adjacent],
            'prediction': -1
        },
        'Rule 11': {
            'patterns': [sulfur_side_chain],
            'prediction': 1
        },
        'Rule 12': {
            'patterns': [amide_adjacent],
            'prediction': 1
        },
        'Rule 13': {
            'patterns': [phenolic_oh],
            'prediction': -1
        },
        'Rule 14': {
            'patterns': [bulky_rigid],
            'prediction': -1
        },
        'Rule 15': {
            'patterns': [oxygen_heterocycle],
            'prediction': -1
        }
    }
    
    # Compile patterns
    for rule in smarts_patterns.values():
        compiled_patterns = []
        for pattern in rule.get('patterns', []):
            subpatterns = pattern.split(',')  # Handle multiple patterns separated by commas
            compiled_subpatterns = [Chem.MolFromSmarts(p.strip()) for p in subpatterns]
            compiled_patterns.append(compiled_subpatterns)
        rule['compiled_patterns'] = compiled_patterns
        
        # Compile exclude patterns if any
        if 'exclude' in rule:
            compiled_exclude = []
            for pattern in rule['exclude']:
                compiled_exclude.append(Chem.MolFromSmarts(pattern))
            rule['compiled_exclude'] = compiled_exclude
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(smarts_patterns))
            continue
        row = []
        for rule_name, rule in smarts_patterns.items():
            try:
                match = True
                # Check exclude patterns if any
                if 'compiled_exclude' in rule:
                    for pat in rule['compiled_exclude']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for pattern_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in pattern_group:
                        if mol.HasSubstructMatch(pat):
                            group_match = True
                            break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=smarts_patterns.keys())
    return df
