
    Target Name: Fe/Hf
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: **Modifiers containing sulfur functional groups** (thiol or thioether groups) result in a **high Fe/Hf value**. This includes compounds with sulfanyl (-SH) groups or thioether (-S-) linkages in their structure.
  - *Examples*: 4-sulfanylbenzoic acid, 3-sulfanylpropanoic acid, and compounds with methylsulfanyl groups like 2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid.

- **Rule 2**: **Modifiers with ether linkages in aliphatic chains** (such as polyethylene glycol chains) result in a **high Fe/Hf value**. These compounds contain multiple ether (-O-) functionalities within their aliphatic backbone.
  - *Examples*: 2-[2-(2-methoxyethoxy)ethoxy]acetic acid and 3-[2-(2-aminoethoxy)ethoxy]propanoic acid.

- **Rule 3**: **Benzoic acid derivatives with electron-withdrawing groups at the para position** (such as halogens or heteroaromatic rings) result in a **high Fe/Hf value**. The presence of groups like bromo (-Br) or pyridyl rings enhances this effect.
  - *Examples*: 4-(bromomethyl)benzoic acid and 4-pyridin-4-ylbenzoic acid.

- **Rule 4**: **Aliphatic carboxylic acids with an amino group at the terminal (omega) position** result in a **high Fe/Hf value**. These omega-amino acids have the amino group located on the opposite end of the molecule from the carboxylic acid.
  - *Examples*: 5-aminopentanoic acid, 7-aminoheptanoic acid, and 8-aminooctanoic acid.

- **Rule 5**: **Modifiers containing hydroxyphenyl groups** (phenolic hydroxyl groups attached to benzene rings) result in a **low Fe/Hf value**. The presence of these hydroxyphenyl moieties decreases the Fe/Hf ratio.
  - *Examples*: 5-(4-hydroxyphenyl)pentanoic acid, 3-(4-hydroxyphenyl)propanoic acid, and 2-[(4-hydroxybenzoyl)amino]acetic acid.

- **Rule 6**: **Modifiers with multiple hydroxyl groups on aliphatic chains** result in a **low Fe/Hf value**. Polyhydroxylation in aliphatic chains reduces the Fe/Hf ratio.
  - *Example*: (2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid.

- **Rule 7**: **Modifiers containing perfluorinated aliphatic chains** result in a **low Fe/Hf value**. The presence of multiple fluorine atoms on the aliphatic chain leads to lower Fe/Hf ratios.
  - *Examples*: 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid and 4-[(2,2,2-trifluoroacetyl)amino]butanoic acid.

- **Rule 8**: **Modifiers with aldehyde functional groups** result in a **low Fe/Hf value**. Aldehyde groups (-CHO) in the molecular structure decrease the Fe/Hf ratio.
  - *Examples*: 4-formylbenzoic acid and 5-formyl-2-hydroxybenzoic acid.

- **Rule 9**: **Modifiers containing a benzofuran moiety** result in a **high Fe/Hf value**. The benzofuran ring system contributes to an increased Fe/Hf ratio.
  - *Example*: 1,3-dioxo-2-benzofuran-5-carboxylic acid.

- **Rule 10**: **Simple aliphatic carboxylic acids with long chains and no additional functional groups** result in a **low Fe/Hf value**. Lack of functionalization in long-chain fatty acids does not favor high Fe/Hf ratios.
  - *Example*: Octanoic acid.

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,-1,0,0
0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6; Test Accuracy: 1.0
    Train Support: 0.11428571428571428; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 1.9444444444444446; Test Lift: NONE
    Train Leverage: 0.05551020408163266; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):

    # Define SMARTS patterns for functional groups and substructures

    # Rule 1: Modifiers containing sulfur functional groups (thiol or thioether groups)
    # Thiol group (-SH)
    thiol = '[SX2H]'
    # Thioether group (-S-)
    thioether = '[#16X2][#6]'

    # Rule 2: Modifiers with ether linkages in aliphatic chains
    # Updated pattern to detect multiple ether linkages
    ether_linkage = '[C;!R][OX2][C;!R]'
    # Set a count threshold to detect multiple ether linkages

    # Rule 3: Benzoic acid derivatives with electron-withdrawing groups at the para position
    # Define electron-withdrawing groups (EWGs)
    EWG_patterns = ['[F,Cl,Br,I]', '[N+](=O)[O-]', 'C#N', 'C(F)(F)F', '[a]']  # Halogens, nitro, cyano, trifluoromethyl, heteroaromatics
    para_EWG_benzoic_acid_patterns = [f'c1ccc(cc1{ewg})C(=O)[O;H,-]' for ewg in EWG_patterns]

    # Rule 4: Aliphatic carboxylic acids with an amino group at the terminal (omega) position
    # Generalized pattern with variable chain length
    omega_amino_acid_general = '[NX3;H2][C;!R]{{2,}}[CX3](=O)[OX2H1]'

    # Rule 5: Modifiers containing hydroxyphenyl groups (phenolic hydroxyl groups attached to benzene rings)
    # General pattern to capture all hydroxyphenyl groups
    hydroxyphenyl = 'c[OX2H]'

    # Rule 6: Modifiers with multiple hydroxyl groups on aliphatic chains
    # General pattern for aliphatic hydroxyl groups
    aliphatic_hydroxyl = '[CX4][OX2H]'
    # Set a count threshold to detect multiple hydroxyl groups

    # Rule 7: Modifiers containing perfluorinated aliphatic chains
    # General pattern for perfluorinated carbons
    perfluoro_alkane = '[CX4](F)(F)F'

    # Rule 8: Modifiers with aldehyde functional groups
    aldehyde = '[CX3H1](=O)'

    # Rule 9: Modifiers containing a benzofuran moiety
    benzofuran = 'c2cc1occc1cc2'

    # Rule 10: Simple aliphatic carboxylic acids with long chains and no additional functional groups
    # Generalized pattern for long-chain aliphatic acids
    long_chain_acid = 'C{{7,}}[CX3](=O)[OX2H1]'
    # Exclude patterns for additional functional groups
    exclude_groups = ['[!#6;!#1]', '[OX2H]', '[NX3;!H0]', '[SX2]']  # Exclude non-carbon atoms, hydroxyl, amine, sulfur groups

    # Define the rules
    rules = [
        {
            'number': 1,
            'description': 'Modifiers containing sulfur functional groups (thiol or thioether groups)',
            'patterns': [[thiol, thioether]],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers with multiple ether linkages in aliphatic chains',
            'patterns': [[ether_linkage]],
            'count_threshold': {ether_linkage: 2},  # At least two ether linkages
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Benzoic acid derivatives with electron-withdrawing groups at the para position',
            'patterns': [para_EWG_benzoic_acid_patterns],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Aliphatic carboxylic acids with an amino group at the terminal (omega) position',
            'patterns': [[omega_amino_acid_general]],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers containing hydroxyphenyl groups (phenolic hydroxyl groups attached to benzene rings)',
            'patterns': [[hydroxyphenyl]],
            'prediction': -1
        },
        {
            'number': 6,
            'description': 'Modifiers with multiple hydroxyl groups on aliphatic chains',
            'patterns': [[aliphatic_hydroxyl]],
            'count_threshold': {aliphatic_hydroxyl: 2},  # At least two hydroxyl groups
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Modifiers containing perfluorinated aliphatic chains',
            'patterns': [[perfluoro_alkane]],
            'count_threshold': {perfluoro_alkane: 1},
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Modifiers with aldehyde functional groups',
            'patterns': [[aldehyde]],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers containing a benzofuran moiety',
            'patterns': [[benzofuran]],
            'prediction': 1
        },
        {
            'number': 10,
            'description': 'Simple aliphatic carboxylic acids with long chains and no additional functional groups',
            'patterns': [[long_chain_acid]],
            'exclude_patterns': exclude_groups,
            'prediction': -1
        }
    ]

    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(p) for p in group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = [Chem.MolFromSmarts(p) for p in rule['exclude_patterns']]
            rule['compiled_exclude_patterns'] = compiled_excludes

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for pat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        matches = mol.GetSubstructMatches(pat)
                        if matches:
                            # If a count threshold is specified for this pattern
                            if 'count_threshold' in rule and pat.GetSmarts() in rule['count_threshold']:
                                threshold = rule['count_threshold'][pat.GetSmarts()]
                                if len(matches) >= threshold:
                                    group_match = True
                                    break
                                else:
                                    group_match = False
                                    continue
                            else:
                                group_match = True
                                break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f"Rule {rule['number']}" for rule in rules])
    return df
--------------------------------------------------
    Target Name: Fe/Hf
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: **Modifiers containing strong metal-coordinating functional groups such as terminal amino groups (especially in ω-amino acids) result in a high Fe/Hf value**. The presence of a terminal amino group enhances the ability to coordinate with metal ions like Fe.
  - *Examples*: 5-aminopentanoic acid (3), 7-aminoheptanoic acid (31), 8-aminooctanoic acid (34), and (2S)-6-acetamido-2-aminohexanoic acid (33).

- **Rule 2**: **Modifiers containing sulfur functional groups (thiol or thioether groups) result in a high Fe/Hf value**. Sulfur atoms have lone pairs that can effectively coordinate with metal ions.
  - *Examples*: 4-sulfanylbenzoic acid (10), 3-sulfanylpropanoic acid (18), and 2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid (23).

- **Rule 3**: **Modifiers featuring nitrogen-containing heteroaromatic rings (such as pyridine rings) connected to the carboxylic acid via aliphatic linkers result in a high Fe/Hf value**. The nitrogen in the heteroaromatic ring can coordinate with metal ions, and the linker allows flexibility.
  - *Examples*: 4-pyridin-4-ylbutanoic acid (24) and 4-pyridin-4-ylbenzoic acid (12).

- **Rule 4**: **Modifiers with flexible ether linkages in aliphatic chains terminating with coordinating groups (like amino or carboxyl groups) result in a high Fe/Hf value**. Ether linkages provide flexibility, enhancing coordination with metal ions.
  - *Examples*: 2-[2-(2-methoxyethoxy)ethoxy]acetic acid (11) and 3-[2-(2-aminoethoxy)ethoxy]propanoic acid (32).

- **Rule 5**: **Modifiers that are amino acids with side chains capable of coordinating with metal ions result in a high Fe/Hf value**. Side chains containing carboxylate, amino, or aromatic groups facilitate metal coordination.
  - *Examples*: (2S)-2-aminobutanedioic acid (2) and (2S)-2-amino-3-phenylpropanoic acid (13).

- **Rule 6**: **Modifiers lacking strong metal-coordinating functional groups, such as simple aliphatic carboxylic acids without additional functional groups, result in a low Fe/Hf value**. The absence of coordinating sites reduces metal binding.
  - *Examples*: Octanoic acid (5) and 4-methylbenzoic acid (22).

- **Rule 7**: **Modifiers containing multiple hydroxyl groups on aliphatic chains (polyhydroxylated compounds) result in a low Fe/Hf value**. Excessive hydroxylation may cause steric hindrance and reduce effective metal coordination.
  - *Examples*: (2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid (9) and 2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid (6).

- **Rule 8**: **Modifiers with electron-withdrawing groups such as perfluoroalkyl chains result in a low Fe/Hf value**. Electron-withdrawing groups decrease electron density, reducing the modifier's ability to coordinate with metal ions.
  - *Examples*: 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid (14) and 4-[(2,2,2-trifluoroacetyl)amino]butanoic acid (28).

- **Rule 9**: **Modifiers containing aldehyde functional groups (-CHO) result in a low Fe/Hf value**. Aldehyde groups may interfere with coordination due to their reactivity or by forming unfavorable interactions.
  - *Examples*: 4-formylbenzoic acid (20) and 5-formyl-2-hydroxybenzoic acid (19).

- **Rule 10**: **Modifiers with bulky aromatic side chains without additional coordinating functional groups result in a low Fe/Hf value**. Bulky groups may hinder interaction with metal ions due to steric effects.
  - *Examples*: (2R)-2-amino-3-(1H-indol-3-yl)propanoic acid (15) and 5-(4-hydroxyphenyl)pentanoic acid (7).

- **Rule 11**: **Modifiers featuring phenolic hydroxyl groups attached to aromatic rings result in a low Fe/Hf value**. Phenolic hydroxyls are less effective at coordinating with metal centers compared to other groups like amines or thiols.
  - *Examples*: 2-[(4-hydroxybenzoyl)amino]acetic acid (26) and 3-(4-hydroxyphenyl)propanoic acid (30).

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11
0,0,0,0,0,0,-1,0,0,0,0
1,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0
1,0,0,0,0,0,-1,0,0,0,0
1,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,-1
0,0,1,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0
0,1,0,0,0,0,-1,0,0,0,0
0,0,0,1,0,0,-1,0,0,0,0
0,0,1,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,-1,-1,0,0,0
0,0,1,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0
0,1,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,-1,0,-1,0,-1
0,0,0,0,0,0,-1,0,-1,0,0
0,0,1,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0
1,0,0,0,0,0,-1,0,0,0,0
0,0,1,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,-1
0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,-1,-1,0,0,0
0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,-1
1,0,0,0,0,0,-1,0,0,0,0
1,0,0,1,0,0,-1,0,0,0,0
1,0,0,0,0,0,-1,0,0,0,0
1,0,0,0,0,0,-1,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.7714285714285715; Test Accuracy: 0.0
    Train Support: 0.09047619047619047; Test Support: 0.0
    Train Confidence: 0.9791666666666666; Test Confidence: 0.5
    Train Lift: 1.9587418300653596; Test Lift: NONE
    Train Leverage: 0.04312925170068027; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    
    # Primary aliphatic amine at the terminal position (Rule 1)
    terminal_primary_amine = '[NX3;H2][CX4][CX4][CX4][CX4][CX3](=O)[OX1H]'
    
    # General primary amine
    primary_amine = '[NX3;H2][CX4]'
    
    # Terminal primary amine (more general)
    terminal_primary_amine_general = '[NX3;H2;$([NX3;H2][C;X4][C;X4][C;X4][C;X4][C]=O)]'
    
    # Carboxylic acid group
    carboxylic_acid = '[CX3](=O)[OX1H]'
    
    # Thiol group (Rule 2)
    thiol = '[SX2H]'
    
    # Thioether group
    thioether = '[#16X2][#6]'
    
    # Nitrogen-containing heteroaromatic ring (pyridine) (Rule 3)
    pyridine_ring = '[n][c][c][c][c][c]'
    
    # Aliphatic ether linkage (Rule 4)
    ether_linkage = '[CX4][OX2][CX4]'
    
    # Amino acids with side chains capable of coordinating with metal ions (Rule 5)
    # Amino acid backbone
    amino_acid = '[NX3;H2][CX4][CX3](=O)[OX1H]'
    
    # Side chains with carboxylate, amino, or aromatic groups
    side_chain_carboxylate = '[CX4][CX3](=O)[OX1H]'
    side_chain_amino = '[CX4][NX3;H2]'
    side_chain_aromatic = '[CX4][c]'
    
    # Simple aliphatic carboxylic acids without additional functional groups (Rule 6)
    simple_carboxylic_acid = '[CX3](=O)[OX1H]'
    
    # Exclude patterns for Rule 6
    exclude_amines = '[NX3]'
    exclude_sulfur = '[#16]'
    exclude_ethers = '[OX2]'
    exclude_aromatic = '[a]'
    
    # Polyhydroxylated compounds (Rule 7)
    hydroxyl_group = '[OX2H]'
    
    # Perfluoroalkyl chains (Rule 8)
    perfluoroalkyl = '[CX4]([F])([F])[F]'
    
    # Aldehyde functional group (Rule 9)
    aldehyde = '[CX3H]=[OX1]'
    
    # Bulky aromatic side chains without additional coordinating groups (Rule 10)
    bulky_aromatic = '[c][c][c][c][c][c]'
    
    # Phenolic hydroxyl groups attached to aromatic rings (Rule 11)
    phenolic_hydroxyl = '[c][OX2H]'
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'High Fe/Hf value: Modifiers containing strong metal-coordinating functional groups such as terminal amino groups (especially in ω-amino acids).',
            'patterns': [[primary_amine, carboxylic_acid]],
            'exclude_patterns': [[exclude_aromatic]],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'High Fe/Hf value: Modifiers containing sulfur functional groups (thiol or thioether groups).',
            'patterns': [[thiol, carboxylic_acid], [thioether, carboxylic_acid]],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'High Fe/Hf value: Modifiers featuring nitrogen-containing heteroaromatic rings (such as pyridine rings) connected to the carboxylic acid via aliphatic linkers.',
            'patterns': [[pyridine_ring, carboxylic_acid]],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'High Fe/Hf value: Modifiers with flexible ether linkages in aliphatic chains terminating with coordinating groups (like amino or carboxyl groups).',
            'patterns': [[ether_linkage, carboxylic_acid]],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'High Fe/Hf value: Modifiers that are amino acids with side chains capable of coordinating with metal ions.',
            'patterns': [[amino_acid, side_chain_carboxylate], [amino_acid, side_chain_amino], [amino_acid, side_chain_aromatic]],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Low Fe/Hf value: Modifiers lacking strong metal-coordinating functional groups, such as simple aliphatic carboxylic acids without additional functional groups.',
            'patterns': [[simple_carboxylic_acid]],
            'exclude_patterns': [[exclude_amines], [exclude_sulfur], [exclude_ethers], [exclude_aromatic]],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Low Fe/Hf value: Modifiers containing multiple hydroxyl groups on aliphatic chains (polyhydroxylated compounds).',
            'patterns': [[hydroxyl_group, hydroxyl_group]],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Low Fe/Hf value: Modifiers with electron-withdrawing groups such as perfluoroalkyl chains.',
            'patterns': [[perfluoroalkyl]],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Low Fe/Hf value: Modifiers containing aldehyde functional groups (-CHO).',
            'patterns': [[aldehyde]],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Low Fe/Hf value: Modifiers with bulky aromatic side chains without additional coordinating functional groups.',
            'patterns': [[bulky_aromatic]],
            'exclude_patterns': [[exclude_amines], [exclude_sulfur], [exclude_ethers]],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Low Fe/Hf value: Modifiers featuring phenolic hydroxyl groups attached to aromatic rings.',
            'patterns': [[phenolic_hydroxyl]],
            'prediction': -1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(p) for p in group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_exclude_patterns = []
            for group in rule['exclude_patterns']:
                compiled_group = [Chem.MolFromSmarts(p) for p in group]
                compiled_exclude_patterns.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_exclude_patterns
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'compiled_exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        if mol.HasSubstructMatch(pat):
                            group_match = True
                            break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: Fe/Hf
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: **Modifiers that are ω-aminoalkanoic acids with chain lengths of five or more carbons result in a high Fe/Hf value**. The terminal amino group on a flexible aliphatic chain effectively coordinates with metal ions, and the longer chain provides optimal spacing for chelation.
  - *Examples*: 5-aminopentanoic acid (3), 7-aminoheptanoic acid (31), 8-aminooctanoic acid (34), and (2S)-6-acetamido-2-aminohexanoic acid (33).

- **Rule 2**: **Modifiers containing sulfur functional groups, such as thiol (-SH) or thioether (-S-) groups, result in a high Fe/Hf value**. Sulfur's lone pairs and polarizability enhance its ability to coordinate with metal ions.
  - *Examples*: 4-sulfanylbenzoic acid (10), 3-sulfanylpropanoic acid (18), and 2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid (23).

- **Rule 3**: **Modifiers with nitrogen-containing heterocycles (e.g., pyridine rings) connected via flexible linkers result in a high Fe/Hf value**. The heterocyclic nitrogen provides a strong coordination site, and the flexible linker aids in optimal positioning for metal binding.
  - *Examples*: 4-pyridin-4-ylbutanoic acid (24) and 4-pyridin-4-ylbenzoic acid (12).

- **Rule 4**: **Modifiers containing flexible polyether chains terminating with coordinating groups (such as amino or carboxylate groups) result in a high Fe/Hf value**. The polyether chain enhances flexibility, allowing coordinating groups to effectively interact with metal ions.
  - *Examples*: 2-[2-(2-methoxyethoxy)ethoxy]acetic acid (11) and 3-[2-(2-aminoethoxy)ethoxy]propanoic acid (32).

- **Rule 5**: **Modifiers that are amino acids with small aromatic side chains (like phenyl groups) result in a high Fe/Hf value, whereas those with larger aromatic side chains (like indole rings) result in a low Fe/Hf value**. Smaller aromatic side chains have less steric hindrance, facilitating coordination with metal ions.
  - *High Fe/Hf Example*: (2S)-2-amino-3-phenylpropanoic acid (13) [(Phenylalanine)].
  - *Low Fe/Hf Example*: (2R)-2-amino-3-(1H-indol-3-yl)propanoic acid (15) [(Tryptophan)].

- **Rule 6**: **Modifiers with strong electron-withdrawing groups, such as perfluoroalkyl chains or aldehyde functional groups, result in a low Fe/Hf value**. Electron-withdrawing groups decrease electron density on coordinating atoms, diminishing their ability to coordinate with metal ions.
  - *Examples*: 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid (14) and 4-formylbenzoic acid (20).

- **Rule 7**: **Modifiers with multiple hydroxyl groups (polyols) or polyhydroxylated compounds result in a low Fe/Hf value**. Multiple hydroxyl groups may cause steric hindrance and intramolecular hydrogen bonding, reducing the availability of coordination sites for metal ions.
  - *Examples*: (2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid (9) and 2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid (6).

- **Rule 8**: **Modifiers with terminal hydroxyl groups on aliphatic chains result in a high Fe/Hf value**. The terminal hydroxyl group can coordinate with metal ions, and the aliphatic chain's flexibility aids in effective coordination.
  - *Example*: 7-hydroxyheptanoic acid (29).

- **Rule 9**: **Modifiers containing aromatic rings with phenolic hydroxyl groups and lacking additional strong coordinating groups result in a low Fe/Hf value**. Phenolic hydroxyls are less effective at coordinating due to resonance stabilization and may engage in hydrogen bonding, reducing metal coordination.
  - *Examples*: 3-(4-hydroxyphenyl)propanoic acid (30), 2-[(4-hydroxybenzoyl)amino]acetic acid (26), and 5-(4-hydroxyphenyl)pentanoic acid (7).

- **Rule 10**: **Modifiers featuring chelating groups such as β-diketones or related structures that can form stable chelate rings result in a high Fe/Hf value**. Chelation enhances metal ion binding stability through the formation of stable five- or six-membered rings.
  - *Example*: 1,3-dioxo-2-benzofuran-5-carboxylic acid (17).

- **Rule 11**: **Modifiers that are simple aliphatic or aromatic carboxylic acids without additional coordinating groups result in a low Fe/Hf value**. The lack of strong coordinating functionalities limits metal ion binding.
  - *Examples*: Octanoic acid (5) and 4-methylbenzoic acid (22).

- **Rule 12**: **Modifiers with aliphatic chains terminating in amide groups result in a high Fe/Hf value**. Amide groups can coordinate with metal ions through the lone pair on the nitrogen and the carbonyl oxygen.
  - *Example*: (2S)-6-acetamido-2-aminohexanoic acid (33).

- **Rule 13**: **Modifiers containing rigid structures with limited flexibility, such as aromatic carboxylic acids without flexible linkers or additional coordinating substituents, result in a low Fe/Hf value**. Rigidity hinders optimal positioning for metal coordination.
  - *Examples*: 4-aminobenzoic acid (4) and pyridine-3-carboxylic acid (21).

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6285714285714286; Test Accuracy: 0.0
    Train Support: 0.06666666666666667; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 2.0206971677559915; Test Lift: NONE
    Train Leverage: 0.03346938775510205; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns and logic for each rule
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are ω-aminoalkanoic acids with chain lengths of five or more carbons result in a high Fe/Hf value.',
            'prediction': 1,
            'function': rule1_function
        },
        {
            'number': 2,
            'description': 'Modifiers containing sulfur functional groups, such as thiol (-SH) or thioether (-S-) groups, result in a high Fe/Hf value.',
            'patterns': ['[SX2H]', '[#16X2][#6;!$(C=[O,N,S])][#6;!$(C=[O,N,S])]'],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers with nitrogen-containing heterocycles (e.g., pyridine rings) connected via flexible linkers result in a high Fe/Hf value.',
            'patterns': ['[n][#6]-*!@[#6]-*!@[#6]-*!@[CX3](=O)[OX2H1]'],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers containing flexible polyether chains terminating with coordinating groups (such as amino or carboxylate groups) result in a high Fe/Hf value.',
            'patterns': ['[#6][OX2][#6][OX2][#6][OX2][#6][CX3](=O)[OX2H1]', '[#6][OX2][#6][OX2][#6][NX3;H2,H1]'],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers that are amino acids with small aromatic side chains (like phenyl groups) result in a high Fe/Hf value.',
            'patterns': ['[NX3;H2][CX4][CX4][c]'],
            'exclude_patterns': ['[NX3;H2][CX4][CX4][c][c][c]c[c][c]'],  # Exclude larger rings like indole
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers that are amino acids with larger aromatic side chains (like indole rings) result in a low Fe/Hf value.',
            'patterns': ['[NX3;H2][CX4][CX4]c1ccc2c(c1)cccc2'],
            'prediction': -1
        },
        {
            'number': 6,
            'description': 'Modifiers with strong electron-withdrawing groups, such as perfluoroalkyl chains or aldehyde functional groups, result in a low Fe/Hf value.',
            'patterns': ['[CX3](=O)[#6][F,Cl,Br,I]', '[CX3H1](=O)[#6]'],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Modifiers with multiple hydroxyl groups (polyols) or polyhydroxylated compounds result in a low Fe/Hf value.',
            'patterns': ['[OX2H][CX4][OX2H]', '[OX2H][CX4][CX4][OX2H]'],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Modifiers with terminal hydroxyl groups on aliphatic chains result in a high Fe/Hf value.',
            'patterns': ['[CX4][CX2][CX2][CX2][CX2][CX2][CX3](=O)[OX2H1]', '[OX2H][CX2][CX2][CX2][CX2][CX3](=O)[OX2H1]'],
            'prediction': 1
        },
        {
            'number': 9,
            'description': 'Modifiers containing aromatic rings with phenolic hydroxyl groups and lacking additional strong coordinating groups result in a low Fe/Hf value.',
            'patterns': ['[c][OX2H]'],
            'exclude_patterns': ['[NX3]', '[SX2]'],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers featuring chelating groups such as β-diketones or related structures that can form stable chelate rings result in a high Fe/Hf value.',
            'patterns': ['[#6][CX3](=O)[CX2][CX3](=O)[#6]'],
            'prediction': 1
        },
        {
            'number': 11,
            'description': 'Modifiers that are simple aliphatic or aromatic carboxylic acids without additional coordinating groups result in a low Fe/Hf value.',
            'patterns': ['[CX3](=O)[OX2H1]'],
            'exclude_patterns': ['[NX3]', '[OX2H]', '[SX2]', '[n]', '[F,Cl,Br,I]'],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'Modifiers with aliphatic chains terminating in amide groups result in a high Fe/Hf value.',
            'patterns': ['[CX3](=O)[NX3][CX4][CX2][CX2][CX2][CX3](=O)[OX2H1]'],
            'prediction': 1
        },
        {
            'number': 13,
            'description': 'Modifiers containing rigid structures with limited flexibility, such as aromatic carboxylic acids without flexible linkers or additional coordinating substituents, result in a low Fe/Hf value.',
            'patterns': ['[c][CX3](=O)[OX2H1]'],
            'exclude_patterns': ['[OX2H]', '[NX3]', '[SX2]'],
            'prediction': -1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        if 'patterns' in rule:
            rule['compiled_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule['patterns']]
        if 'exclude_patterns' in rule:
            rule['compiled_exclude'] = [Chem.MolFromSmarts(pat) for pat in rule['exclude_patterns']]
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            match = False
            if 'function' in rule:
                # If the rule uses a custom function
                try:
                    match = rule['function'](mol)
                except:
                    match = False
            else:
                try:
                    # Check exclude patterns
                    if 'compiled_exclude' in rule:
                        exclude = False
                        for epat in rule['compiled_exclude']:
                            if mol.HasSubstructMatch(epat):
                                exclude = True
                                break
                        if exclude:
                            row.append(0)
                            continue
                    # Check patterns
                    for pat in rule['compiled_patterns']:
                        if not mol.HasSubstructMatch(pat):
                            match = False
                            break
                        else:
                            match = True
                    
                except:
                    match = False
            if match:
                row.append(rule['prediction'])
            else:
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

# Define custom functions for complex rules

def rule1_function(mol):
    try:
        # SMARTS patterns for primary amine and carboxylic acid
        amine_pat = Chem.MolFromSmarts('[NX3;H2]')
        acid_pat = Chem.MolFromSmarts('[CX3](=O)[OX2H1]')
        amine_atoms = mol.GetSubstructMatches(amine_pat)
        acid_atoms = mol.GetSubstructMatches(acid_pat)
        if not amine_atoms or not acid_atoms:
            return False
        # For each pair of amine and acid, check the path length and composition
        for amine_atom in amine_atoms:
            for acid_atom in acid_atoms:
                path = Chem.GetShortestPath(mol, amine_atom[0], acid_atom[0])
                if len(path) >= 7:  # At least 5 carbons plus amine and acid
                    # Check that the path is aliphatic and contains only carbons
                    aliphatic = True
                    for idx in path[1:-1]:
                        atom = mol.GetAtomWithIdx(idx)
                        if atom.GetAtomicNum() != 6 or atom.IsInRing():
                            aliphatic = False
                            break
                    if aliphatic:
                        return True
        return False
    except:
        return False

--------------------------------------------------
    Target Name: Fe/Hf
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: **Modifiers that are ω-aminoalkanoic acids with chain lengths of five or more carbons result in a high Fe/Hf value**. The terminal amino group on a flexible aliphatic chain effectively coordinates with metal ions, and the longer chain provides the necessary flexibility for optimal metal binding.
  - *Examples*: 5-aminopentanoic acid (3), 7-aminoheptanoic acid (31), 8-aminooctanoic acid (34).

- **Rule 2**: **Modifiers containing sulfur functional groups, such as thiol (-SH) or thioether (-S-) groups, result in a high Fe/Hf value**. Sulfur atoms have lone pairs and high polarizability, enhancing their ability to coordinate with metal ions.
  - *Examples*: 4-sulfanylbenzoic acid (10), 3-sulfanylpropanoic acid (18), and the methionine derivative 2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid (23).

- **Rule 3**: **Modifiers with flexible chains terminating with coordinating groups like amino or hydroxyl groups result in a high Fe/Hf value**. The flexibility of the chain allows the coordinating group to effectively interact with the metal center.
  - *Examples*: 2-[2-(2-methoxyethoxy)ethoxy]acetic acid (11), 3-[2-(2-aminoethoxy)ethoxy]propanoic acid (32), 7-hydroxyheptanoic acid (29).

- **Rule 4**: **Modifiers containing nitrogen-containing aromatic rings connected via flexible linkers result in a high Fe/Hf value**. The heterocyclic nitrogen provides a strong coordination site, and the flexible linker aids in optimal positioning for metal binding.
  - *Examples*: 4-pyridin-4-ylbutanoic acid (24), 4-pyridin-4-ylbenzoic acid (12).

- **Rule 5**: **Modifiers that are amino acids with small aromatic side chains, such as phenyl groups, result in a high Fe/Hf value**. Smaller aromatic side chains have less steric hindrance, facilitating coordination with metal ions.
  - *Example*: (2S)-2-amino-3-phenylpropanoic acid (13) [(Phenylalanine)].

- **Rule 6**: **Modifiers containing electron-withdrawing groups, such as perfluoroalkyl chains or aldehyde functional groups, result in a low Fe/Hf value**. Electron-withdrawing groups decrease electron density on coordinating atoms, diminishing their ability to bind metal ions.
  - *Examples*: 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid (14), 4-formylbenzoic acid (20).

- **Rule 7**: **Modifiers with polyhydroxylated aliphatic chains or multiple hydroxyl groups result in a low Fe/Hf value**. Multiple hydroxyl groups can cause steric hindrance and engage in intramolecular hydrogen bonding, reducing the availability of coordination sites.
  - *Examples*: (2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid (9), 2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid (6).

- **Rule 8**: **Modifiers that are simple aliphatic or aromatic carboxylic acids without additional coordinating groups result in a low Fe/Hf value**. The lack of strong coordinating functionalities limits metal ion binding.
  - *Examples*: Octanoic acid (5), 4-methylbenzoic acid (22).

- **Rule 9**: **Modifiers with rigid structures lacking flexible linkers, such as aromatic carboxylic acids without additional coordinating substituents, result in a low Fe/Hf value**. Rigidity hinders optimal positioning for metal coordination.
  - *Examples*: 4-aminobenzoic acid (4), pyridine-3-carboxylic acid (21).

- **Rule 10**: **Modifiers containing aromatic rings with phenolic hydroxyl groups and lacking additional strong coordinating groups result in a low Fe/Hf value**. Phenolic hydroxyls are less effective at coordinating due to resonance stabilization and may engage in hydrogen bonding.
  - *Examples*: 3-(4-hydroxyphenyl)propanoic acid (30), 5-(4-hydroxyphenyl)pentanoic acid (7), 2-[(4-hydroxybenzoyl)amino]acetic acid (26).

- **Rule 11**: **Modifiers with large aromatic side chains, such as indole rings, result in a low Fe/Hf value**. The bulky side chains introduce steric hindrance that impedes effective metal coordination.
  - *Example*: (2R)-2-amino-3-(1H-indol-3-yl)propanoic acid (15) [(Tryptophan)].

- **Rule 12**: **Modifiers capable of forming chelate rings with metal ions result in a high Fe/Hf value**. Chelation through bidentate ligands enhances metal ion binding stability by forming stable five- or six-membered rings.
  - *Example*: 1,3-dioxo-2-benzofuran-5-carboxylic acid (17).

- **Rule 13**: **Modifiers with terminal hydroxyl groups on aliphatic chains result in a high Fe/Hf value**. The terminal hydroxyl group can coordinate with metal ions, and the chain's flexibility facilitates effective coordination.
  - *Example*: 7-hydroxyheptanoic acid (29).

- **Rule 14**: **Modifiers containing aliphatic chains terminating in amide groups result in a high Fe/Hf value**. Amide groups can coordinate with metal ions through the lone pair on the nitrogen and the carbonyl oxygen.
  - *Example*: (2S)-6-acetamido-2-aminohexanoic acid (33).

- **Rule 15**: **Modifiers with ketone or ester functionalities adjacent to aromatic rings and flexible linkers result in a high Fe/Hf value**. These functionalities, combined with flexibility, facilitate coordination with metal ions.
  - *Example*: 4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid (25).

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
0,1,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,1,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,0,1,0,1,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,-1,-1,0,0,0,0,0
0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,1,1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,1
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.7714285714285715; Test Accuracy: 0.0
    Train Support: 0.09523809523809523; Test Support: 0.0
    Train Confidence: 0.782051282051282; Test Confidence: 0.5
    Train Lift: 1.552916038210156; Test Lift: NONE
    Train Leverage: 0.036326530612244896; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups based on the specified rules
    # Incorporate corrections from suggestions to ensure accurate matching
    
    # Rule 1: omega-aminoalkanoic acids with chain lengths of five or more carbons
    # Pattern: primary amine connected via aliphatic chain (>=4 CH2 units) to carboxylic acid group
    rule1_pattern = '[NX3H2][CH2]{4,}[CX3](=O)[OX2H1]'
    
    # Rule 2: sulfur functional groups, thiol (-SH) or thioether (-S-)
    thiol = '[SX2H]'
    thioether = '[#16X2;!$([#16X2]=O)]'  # Any sulfur atom with two single bonds, not double-bonded to oxygen
    rule2_patterns = [thiol, thioether]
    
    # Rule 3: flexible chains terminating with amino or hydroxyl groups
    terminal_amino = '[CX4][CX4][NX3H2]'
    terminal_hydroxyl = '[CX4][CX4][OX2H]'
    rule3_patterns = [terminal_amino, terminal_hydroxyl]
    
    # Rule 4: nitrogen-containing aromatic rings connected via flexible linkers
    nitrogen_aromatic_linker = '[n][CX4][CX4]'
    
    # Rule 5: amino acids with small aromatic side chains
    # General pattern for amino acid with aromatic side chain
    rule5_pattern = '[NX3][CH]([CX4][c])[CX3](=O)[OX2H1]'
    
    # Rule 6: electron-withdrawing groups, such as perfluoroalkyl chains or aldehyde
    aldehyde = '[CX3H1]=[OX1]'
    perfluoroalkyl = '[CX4](F)(F)(F)'
    rule6_patterns = [aldehyde, perfluoroalkyl]
    
    # Rule 7: polyhydroxylated aliphatic chains or multiple hydroxyl groups
    hydroxyl_group = '[OX2H]'
    
    # Rule 8: simple aliphatic or aromatic carboxylic acids without additional coordinating groups
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    # Exclude patterns: amino groups, hydroxyl groups (excluding carboxylic acid), sulfur groups
    exclude_amino = '[NX3;!$(N-C(=O))]'  # Exclude any amine groups not in amides
    exclude_hydroxyl = '[OX2H;!$(O=C[O,H])]'  # Exclude hydroxyl groups not in carboxylic acids
    exclude_sulfur = '[#16]'  # Any sulfur atom
    
    # Rule 9: rigid structures lacking flexible linkers, aromatic carboxylic acids without additional coordinating substituents
    aromatic_carboxylic_acid = '[c][CX3](=O)[OX2H1]'
    
    # Rule 10: aromatic rings with phenolic hydroxyl groups and lacking additional strong coordinating groups
    phenolic_hydroxyl = '[c][OX2H]'
    exclude_strong_donor = '[NX3,NX4,SX2,SX3]'
    
    # Rule 11: large aromatic side chains, such as indole rings
    indole = 'c1cc2ccccc2[nH]1'  # General indole pattern
    
    # Rule 12: modifiers capable of forming chelate rings with metal ions
    chelating_group = '[OX2H][CX3](=O)[#6][OX2H]'  # Hydroxy acid pattern
    
    # Rule 13: terminal hydroxyl groups on aliphatic chains
    terminal_hydroxyl_chain = '[CH2]{2,}[CH2][OX2H]'
    
    # Rule 14: aliphatic chains terminating in amide groups
    terminal_amide = '[CH2]{2,}[CX3](=O)[NX3H2]'
    
    # Rule 15: ketone or ester functionalities adjacent to aromatic rings and flexible linkers
    aromatic_ketone = '[c][CX3](=O)[CX4][CX4]'
    aromatic_ester = '[c][CX3](=O)[OX2][CX4][CX4]'
    rule15_patterns = [aromatic_ketone, aromatic_ester]
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are ω-aminoalkanoic acids with chain lengths of five or more carbons result in a high Fe/Hf value.',
            'patterns': [rule1_pattern],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers containing sulfur functional groups, such as thiol (-SH) or thioether (-S-) groups, result in a high Fe/Hf value.',
            'patterns': rule2_patterns,
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers with flexible chains terminating with coordinating groups like amino or hydroxyl groups result in a high Fe/Hf value.',
            'patterns': rule3_patterns,
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers containing nitrogen-containing aromatic rings connected via flexible linkers result in a high Fe/Hf value.',
            'patterns': [nitrogen_aromatic_linker],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers that are amino acids with small aromatic side chains, such as phenyl groups, result in a high Fe/Hf value.',
            'patterns': [rule5_pattern],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers containing electron-withdrawing groups, such as perfluoroalkyl chains or aldehyde functional groups, result in a low Fe/Hf value.',
            'patterns': rule6_patterns,
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Modifiers with polyhydroxylated aliphatic chains or multiple hydroxyl groups result in a low Fe/Hf value.',
            'patterns': [hydroxyl_group],
            'count_threshold': 3,  # At least 3 hydroxyl groups
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Modifiers that are simple aliphatic or aromatic carboxylic acids without additional coordinating groups result in a low Fe/Hf value.',
            'patterns': [carboxylic_acid],
            'exclude_patterns': [exclude_amino, exclude_hydroxyl, exclude_sulfur],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers with rigid structures lacking flexible linkers, such as aromatic carboxylic acids without additional coordinating substituents, result in a low Fe/Hf value.',
            'patterns': [aromatic_carboxylic_acid],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers containing aromatic rings with phenolic hydroxyl groups and lacking additional strong coordinating groups result in a low Fe/Hf value.',
            'patterns': [phenolic_hydroxyl],
            'exclude_patterns': [exclude_strong_donor],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Modifiers with large aromatic side chains, such as indole rings, result in a low Fe/Hf value.',
            'patterns': [indole],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'Modifiers capable of forming chelate rings with metal ions result in a high Fe/Hf value.',
            'patterns': [chelating_group],
            'prediction': 1
        },
        {
            'number': 13,
            'description': 'Modifiers with terminal hydroxyl groups on aliphatic chains result in a high Fe/Hf value.',
            'patterns': [terminal_hydroxyl_chain],
            'prediction': 1
        },
        {
            'number': 14,
            'description': 'Modifiers containing aliphatic chains terminating in amide groups result in a high Fe/Hf value.',
            'patterns': [terminal_amide],
            'prediction': 1
        },
        {
            'number': 15,
            'description': 'Modifiers with ketone or ester functionalities adjacent to aromatic rings and flexible linkers result in a high Fe/Hf value.',
            'patterns': rule15_patterns,
            'prediction': 1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = [Chem.MolFromSmarts(pat) for pat in rule.get('patterns', [])]
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = [Chem.MolFromSmarts(pat) for pat in rule['exclude_patterns']]
            rule['compiled_exclude_patterns'] = compiled_excludes
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for pat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                if not match:
                    row.append(0)
                    continue
                # Check required patterns
                for pat in rule['compiled_patterns']:
                    matches = mol.GetSubstructMatches(pat)
                    if matches:
                        # If a count threshold is specified for this pattern
                        if 'count_threshold' in rule and pat.GetSmarts() == hydroxyl_group:
                            threshold = rule['count_threshold']
                            if len(matches) >= threshold:
                                match = True
                                break
                            else:
                                match = False
                        else:
                            match = True
                            break  # Since any pattern match suffices
                    else:
                        match = False
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0 and continue
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: Fe/Hf
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: **Modifiers with flexible aliphatic chains (three or more carbons) terminating with coordinating groups such as amino, hydroxyl, or thiol groups result in a high Fe/Hf value**. The flexibility of the chain allows the terminal coordinating group to effectively interact with metal ions, enhancing metal loading.
  - *Examples*: 
    - **5-aminopentanoic acid (3)**: An amino group at the end of a five-carbon chain provides flexibility and strong coordination with Fe ions.
    - **7-aminoheptanoic acid (31)** and **8-aminooctanoic acid (34)**: Longer chains with terminal amino groups offer even more flexibility for coordination.
    - **7-hydroxyheptanoic acid (29)**: A terminal hydroxyl group on a flexible chain facilitates metal binding.
    - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid (11)** and **3-[2-(2-aminoethoxy)ethoxy]propanoic acid (32)**: Ether linkages increase chain flexibility, and terminal amino or methoxy groups aid in coordination.

- **Rule 2**: **Modifiers containing sulfur functional groups, such as thiol (-SH) or thioether (-S-) groups, result in a high Fe/Hf value**. Sulfur's high polarizability and availability of lone pairs enhance coordination with metal ions.
  - *Examples*: 
    - **4-sulfanylbenzoic acid (10)** and **3-sulfanylpropanoic acid (18)**: Thiol groups directly coordinate with Fe ions.
    - **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid (23)**: A thioether group in a flexible chain enhances metal binding.

- **Rule 3**: **Modifiers containing nitrogen heterocycles (e.g., pyridine rings) connected via flexible linkers result in a high Fe/Hf value**. The nitrogen atom in the heterocycle provides a strong coordination site, and the flexible linker aids in optimal positioning.
  - *Examples*: 
    - **4-pyridin-4-ylbutanoic acid (24)** and **4-pyridin-4-ylbenzoic acid (12)**: Pyridine rings offer strong nitrogen coordination sites, and the linkers provide flexibility.

- **Rule 4**: **Modifiers that are simple aliphatic or aromatic carboxylic acids without additional coordinating groups result in a low Fe/Hf value**. The absence of strong coordinating functionalities limits metal ion binding.
  - *Examples*: 
    - **Octanoic acid (5)** and **4-methylbenzoic acid (22)**: Lack of additional functional groups leads to poor metal coordination.
    - **Pyridine-3-carboxylic acid (21)**: Despite containing a pyridine ring, the rigid structure without a flexible linker reduces coordination efficiency.

- **Rule 5**: **Modifiers containing electron-withdrawing groups, such as perfluoroalkyl chains or aldehyde groups, result in a low Fe/Hf value**. Electron-withdrawing groups decrease electron density on coordinating atoms, diminishing their ability to bind metal ions.
  - *Examples*: 
    - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid (14)**: The perfluoroalkyl chain reduces electron density, weakening coordination.
    - **4-formylbenzoic acid (20)**: The aldehyde group withdraws electron density, hindering metal binding.

- **Rule 6**: **Modifiers with multiple hydroxyl groups in close proximity result in a low Fe/Hf value**. Multiple hydroxyl groups can cause steric hindrance and form intramolecular hydrogen bonds, reducing coordination site availability.
  - *Examples*: 
    - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid (9)**: Multiple hydroxyls create a crowded environment, impeding metal coordination.
    - **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid (6)**: Similar steric hindrance from multiple hydroxyl groups.

- **Rule 7**: **Modifiers with bulky or rigid aromatic structures lacking flexible linkers result in a low Fe/Hf value**. Steric hindrance hinders effective coordination with metal ions.
  - *Examples*: 
    - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid (15)**: The bulky indole ring prevents close approach to the metal center.
    - **4-aminobenzoic acid (4)**: Rigid structure without additional flexibility limits coordination.

- **Rule 8**: **Modifiers capable of forming chelate rings through bidentate interactions result in a high Fe/Hf value**. Chelation enhances metal ion binding stability by forming stable rings.
  - *Example*: 
    - **1,3-dioxo-2-benzofuran-5-carboxylic acid (17)**: The adjacent keto groups can chelate the metal ion, increasing binding strength.

- **Rule 9**: **Modifiers that are amino acids with small aromatic side chains, such as phenyl groups, result in a high Fe/Hf value, whereas those with larger aromatic side chains result in a low Fe/Hf value**. Smaller aromatic side chains have less steric hindrance, facilitating coordination.
  - *High Fe/Hf Example*: 
    - **(2S)-2-amino-3-phenylpropanoic acid (13) [Phenylalanine]**: The phenyl group allows coordination without significant steric hindrance.
  - *Low Fe/Hf Example*: 
    - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid (15) [Tryptophan]**: The larger indole ring introduces steric hindrance, reducing metal binding.

- **Rule 10**: **Modifiers with ketone or ester functionalities adjacent to aromatic rings and flexible linkers result in a high Fe/Hf value**. These functionalities, combined with flexibility, facilitate coordination.
  - *Example*: 
    - **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid (25)**: The ketone group and flexible linker assist in binding the metal ion.

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 9.1,Rule 10
0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0
0,1,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,-1,0,1,0,0
0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,1,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,-1,0,0,0,0
0,0,0,0,-1,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6; Test Accuracy: 1.0
    Train Support: 0.11428571428571428; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 1.9444444444444446; Test Lift: NONE
    Train Leverage: 0.05551020408163266; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define the rules with their associated SMARTS patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers with flexible aliphatic chains (three or more carbons) terminating with coordinating groups such as amino, hydroxyl, or thiol groups result in a high Fe/Hf value.',
            'patterns': [
                '[CH2]{3,}[NX3;H2,H1,H0]',  # Flexible chain ending with amine
                '[CH2]{3,}[OX2H]',           # Flexible chain ending with hydroxyl group
                '[CH2]{3,}[SX2H]',           # Flexible chain ending with thiol group
            ],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers containing sulfur functional groups, such as thiol (-SH) or thioether (-S-) groups, result in a high Fe/Hf value.',
            'patterns': [
                '[SX2H]',  # Thiol group
                '[#16X2]-[#6]',  # Thioether group (sulfur single-bonded to carbon)
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers containing nitrogen heterocycles (e.g., pyridine rings) connected via flexible linkers result in a high Fe/Hf value.',
            'patterns': [
                '[CX4][CX4]{1,}n1ccccc1',  # Flexible linker to pyridine ring
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers that are simple aliphatic or aromatic carboxylic acids without additional coordinating groups result in a low Fe/Hf value.',
            'patterns': [
                '[#6][CX3](=O)[OX1H0-,OX2H1]',  # Alkyl carboxylic acid
                'c1ccccc1[CX3](=O)[OX1H0-,OX2H1]',  # Aromatic carboxylic acid
            ],
            'exclude_patterns': [
                '[NX3]',    # Exclude amines
                '[OX2H]',   # Exclude hydroxyls
                '[SX2H]',   # Exclude thiols
                '[CX3](=O)[NX3,OX2,OX1-,SX2]',  # Exclude amides, esters, thioesters
            ],
            'prediction': -1
        },
        {
            'number': 5,
            'description': 'Modifiers containing electron-withdrawing groups, such as perfluoroalkyl chains or aldehyde groups, result in a low Fe/Hf value.',
            'patterns': [
                '[CX3H1](=O)[#6]',  # Aldehyde group
                '[CX4]([F])([F])([F])',  # Trifluoromethyl group
                '[CX4]([F])([F])[F]',    # CF3 group
                '[CX4]([F])[F]',         # CF2 group
            ],
            'prediction': -1
        },
        {
            'number': 6,
            'description': 'Modifiers with multiple hydroxyl groups in close proximity result in a low Fe/Hf value.',
            'patterns': [
                '[OX2H][CX4][CX4][OX2H]',             # Two hydroxyls separated by two carbons
                '[OX2H][CX4][OX2H]',                  # Vicinal diol
                '[OX2H][CX4]([OX2H])[CX4][OX2H]',     # Three hydroxyls in close proximity
            ],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Modifiers with bulky or rigid aromatic structures lacking flexible linkers result in a low Fe/Hf value.',
            'patterns': [
                '[c]:[c]:[c]:[c]:[c]:[c]',  # Benzene ring
                '[c]1[c][c][c][c][c]1',     # Aromatic ring
            ],
            'exclude_patterns': [
                '[CX4][CX4][CX4]',  # Exclude flexible aliphatic chain of 3 carbons
            ],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Modifiers capable of forming chelate rings through bidentate interactions result in a high Fe/Hf value.',
            'patterns': [
                '[O]=[C][CX3](=O)[O]',       # Adjacent keto groups (1,3-diketone)
                '[O]=[C][C][C](=O)[O]',       # Keto acid capable of chelation
            ],
            'prediction': 1
        },
        {
            'number': 9,
            'description': 'Modifiers that are amino acids with small aromatic side chains result in a high Fe/Hf value.',
            'patterns': [
                '[NX3;H2][CX4][CX4][c]',  # Amino acid with aromatic side chain
            ],
            'exclude_patterns': [
                '[c]1[cH][cH][cH][nH][cH]1',  # Exclude indole ring (tryptophan)
            ],
            'prediction': 1
        },
        {
            'number': 9.1,
            'description': 'Modifiers that are amino acids with larger aromatic side chains result in a low Fe/Hf value.',
            'patterns': [
                '[NX3;H2][CX4][CX4][c]1[cH][cH][cH][nH][cH]1',  # Amino acid with indole side chain
            ],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers with ketone or ester functionalities adjacent to aromatic rings and flexible linkers result in a high Fe/Hf value.',
            'patterns': [
                '[c][CX3](=O)[OX2][CX4]{1,}',  # Ester adjacent to aromatic ring with flexible chain
                '[c][CX3](=O)[CX4]{1,}',       # Ketone adjacent to aromatic ring with flexible chain
            ],
            'prediction': 1
        },
    ]

    # Compile SMARTS patterns
    for rule in rules:
        rule['compiled_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule['patterns']]
        if 'exclude_patterns' in rule:
            rule['compiled_exclude_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule['exclude_patterns']]

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'compiled_exclude_patterns' in rule:
                    for pat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                pattern_match = False
                for pat in rule['compiled_patterns']:
                    if mol.HasSubstructMatch(pat):
                        pattern_match = True
                        break
                if pattern_match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: Fe/Hf
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: **Modifiers with terminal primary amino groups (-NH₂) on flexible aliphatic chains longer than five carbon atoms result in a high Fe/Hf value**. The extended, flexible chain allows the amino group to effectively coordinate with Fe ions, enhancing metal loading on the catalyst.

  - *Examples*:
    - **5-aminopentanoic acid (3)**: A six-carbon chain with a terminal amino group leads to high Fe/Hf.
    - **7-aminoheptanoic acid (31)** and **8-aminooctanoic acid (34)**: Longer chains with terminal amino groups maintain flexibility, facilitating Fe coordination.
  
  - *Counterexample*:
    - **(2S)-2-aminopentanedioic acid (0)**: Despite having an amino group, the presence of two carboxylate groups and a shorter chain reduces Fe coordination, resulting in low Fe/Hf.

- **Rule 2**: **Modifiers containing thiol (-SH) functional groups result in a high Fe/Hf value**. Sulfur atoms have lone pairs that coordinate strongly with Fe ions, enhancing metal-ligand interactions.

  - *Examples*:
    - **3-sulfanylpropanoic acid (18)**: A thiol group on a propanoic chain provides a strong coordination site.
    - **4-sulfanylbenzoic acid (10)**: A thiol group attached to an aromatic ring effectively coordinates with Fe.

- **Rule 3**: **Modifiers featuring nitrogen-containing heterocycles connected via flexible linkers result in a high Fe/Hf value**. The nitrogen atom acts as a strong ligand for Fe ions, and the flexible linker allows optimal spatial arrangement for coordination.

  - *Examples*:
    - **4-pyridin-4-ylbutanoic acid (24)**: A pyridine ring connected through a butanoic linker maximizes coordination potential.
    - **4-pyridin-4-ylbenzoic acid (12)**: The pyridine nitrogen coordinates with Fe, aided by the benzene linker enhancing flexibility.
  
  - *Counterexample*:
    - **Pyridine-3-carboxylic acid (21)**: A rigid pyridine carboxylic acid without a flexible linker results in low Fe/Hf.

- **Rule 4**: **Modifiers containing ether linkages with coordinating amino or methoxy groups result in a high Fe/Hf value**. Ether linkages increase chain flexibility, enhancing the ability of coordinating groups to interact with Fe ions.

  - *Examples*:
    - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid (32)**: Ether-linked amino groups enhance Fe binding through increased mobility.
    - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid (11)**: Multiple ether linkages provide flexibility for the methoxy group to coordinate with Fe.

- **Rule 5**: **Modifiers with primary hydroxyl (-OH) groups on long aliphatic chains result in a high Fe/Hf value**. The hydroxyl group can coordinate with Fe ions, and the long chain provides flexibility for effective interaction.

  - *Example*:
    - **7-hydroxyheptanoic acid (29)**: The hydroxyl group at the end of a seven-carbon chain facilitates Fe coordination.

- **Rule 6**: **Modifiers that are simple aliphatic or aromatic carboxylic acids without additional coordinating functional groups result in a low Fe/Hf value**. The lack of strong ligating atoms reduces metal ion binding affinity.

  - *Examples*:
    - **Octanoic acid (5)**: A simple aliphatic acid with no additional functional groups shows low Fe coordination.
    - **4-methylbenzoic acid (22)**: An aromatic carboxylic acid lacking coordinating substituents results in low Fe/Hf.

- **Rule 7**: **Modifiers containing multiple adjacent hydroxyl groups on small molecules result in a low Fe/Hf value**. The presence of several hydroxyl groups can lead to intramolecular hydrogen bonding and steric hindrance, reducing available coordination sites for Fe ions.

  - *Example*:
    - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid (9)**: Multiple hydroxyl groups hinder Fe coordination due to steric and electronic factors.

- **Rule 8**: **Modifiers with bulky aromatic side chains that cause steric hindrance near coordinating sites result in a low Fe/Hf value**. Steric bulk prevents effective interaction between the ligand and Fe ions.

  - *Examples*:
    - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid (15)**: The indole group creates steric hindrance, reducing Fe coordination.
    - **5-(4-hydroxyphenyl)pentanoic acid (7)**: The bulky hydroxyphenyl group impedes Fe binding despite the presence of a hydroxyl group.

- **Rule 9**: **Modifiers with electron-withdrawing substituents such as fluorinated alkyl groups result in a low Fe/Hf value**. Electron-withdrawing groups decrease electron density on potential coordinating atoms, weakening metal-ligand interactions.

  - *Example*:
    - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid (14)**: The perfluorinated chain reduces electron availability for coordination with Fe ions.

- **Rule 10**: **Modifiers with rigid structures lacking flexible linkers and coordinating groups result in a low Fe/Hf value**. Rigidity limits the ability to interact effectively with Fe ions.

  - *Examples*:
    - **4-aminobenzoic acid (4)**: The amino group on a rigid benzene ring without a flexible linker limits coordination.
    - **Pyridine-3-carboxylic acid (21)**: The nitrogen atom is part of a rigid pyridine ring, reducing its accessibility for coordination.

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10
0,0,0,0,0,0,0,0,0,-1
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1
0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,-1,0,0,0,-1
0,0,0,0,0,0,-1,0,0,0
0,1,0,0,0,0,0,0,0,-1
0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,-1,0,0,0,-1
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0
0,0,1,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,-1
0,0,0,0,0,-1,0,0,0,-1
0,1,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,-1
0,0,0,0,0,-1,0,0,0,-1
0,0,0,0,0,-1,0,0,0,-1
0,0,0,0,0,-1,0,0,0,-1
0,0,0,0,0,0,0,0,0,0
0,0,1,0,0,-1,0,0,0,0
0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0
1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6571428571428571; Test Accuracy: 1.0
    Train Support: 0.3142857142857143; Test Support: 0.0
    Train Confidence: 0.6875; Test Confidence: 0.5
    Train Lift: 1.3368055555555556; Test Lift: NONE
    Train Leverage: 0.07918367346938779; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for each rule
    from rdkit.Chem import rdMolDescriptors
    
    # Rule 1: Modifiers with terminal primary amino groups (-NH2) on flexible aliphatic chains longer than five carbon atoms result in a high Fe/Hf value.
    # Aliphatic chain of at least 6 carbons ending with NH2
    rule1_pattern = Chem.MolFromSmarts('[NX3H2][CX4][CX4][CX4][CX4][CX4][CX4]')
    
    # Rule 2: Modifiers containing thiol (-SH) functional groups result in a high Fe/Hf value.
    rule2_pattern = Chem.MolFromSmarts('[#16X2H]')  # Thiol group
    
    # Rule 3: Modifiers featuring nitrogen-containing heterocycles connected via flexible linkers result in a high Fe/Hf value.
    # Nitrogen-containing heterocycle connected via linker
    rule3_pattern_heterocycle = Chem.MolFromSmarts('[n]')  # Any nitrogen aromatic atom
    rule3_pattern_linker = Chem.MolFromSmarts('[CX4][CX4]')  # Flexible linker of at least 2 carbons
    
    # Rule 4: Modifiers containing ether linkages with coordinating amino or methoxy groups result in a high Fe/Hf value.
    rule4_pattern_ether_amino = Chem.MolFromSmarts('[OX2][CX4][NX3H2]')  # Ether linkage with amino group
    rule4_pattern_ether_methoxy = Chem.MolFromSmarts('[OX2][CX4][OX2][CX4]')  # Ether linkage with methoxy group
    
    # Rule 5: Modifiers with primary hydroxyl (-OH) groups on long aliphatic chains result in a high Fe/Hf value.
    # Aliphatic chain of at least 6 carbons ending with OH
    rule5_pattern = Chem.MolFromSmarts('[OX2H][CX4][CX4][CX4][CX4][CX4][CX4]')
    
    # Rule 6: Modifiers that are simple aliphatic or aromatic carboxylic acids without additional coordinating functional groups result in a low Fe/Hf value.
    # Carboxylic acid without additional functional groups
    rule6_pattern = Chem.MolFromSmarts('[CX3](=O)[OX1H0-,OX2H1]')  # Carboxylic acid
    rule6_exclude_patterns = [
        Chem.MolFromSmarts('[NX3;!$([N][CX3]=O)]'),  # Exclude amines
        Chem.MolFromSmarts('[OX2H][CX4]'),          # Exclude alcohols
        Chem.MolFromSmarts('[SX2]'),                # Exclude sulfur-containing groups
        Chem.MolFromSmarts('[OX2][CX4][OX2]'),      # Exclude ethers
        Chem.MolFromSmarts('[F,Cl,Br,I]'),          # Exclude halogens
    ]
    
    # Rule 7: Modifiers containing multiple adjacent hydroxyl groups on small molecules result in a low Fe/Hf value.
    # Molecules with at least 2 adjacent hydroxyls
    rule7_pattern = Chem.MolFromSmarts('[OX2H][CX4][CX4][OX2H]')
    
    # Rule 8: Modifiers with bulky aromatic side chains that cause steric hindrance near coordinating sites result in a low Fe/Hf value.
    # Bulky aromatic ring near functional group
    rule8_pattern = Chem.MolFromSmarts('[c][CX4][CX3](=O)[OX2H1]')  # Aromatic ring connected to carboxylic acid via single carbon
    
    # Rule 9: Modifiers with electron-withdrawing substituents such as fluorinated alkyl groups result in a low Fe/Hf value.
    # Fluorinated alkyl chain
    rule9_pattern = Chem.MolFromSmarts('[CX4][CX4](F)(F)(F)')  # Trifluoromethyl group
    
    # Rule 10: Modifiers with rigid structures lacking flexible linkers and coordinating groups result in a low Fe/Hf value.
    # Rigid aromatic structures without flexible linkers
    rule10_pattern = Chem.MolFromSmarts('[a][CX3](=O)[OX1H0-,OX2H1]')  # Aromatic ring directly connected to carboxylic acid
    
    # List of rules with their patterns, predictions, and any additional logic
    rules = [
        {'number': 1, 'pattern': rule1_pattern, 'prediction': 1},
        {'number': 2, 'pattern': rule2_pattern, 'prediction': 1},
        {'number': 3, 'patterns': [rule3_pattern_heterocycle, rule3_pattern_linker], 'prediction': 1},
        {'number': 4, 'patterns': [rule4_pattern_ether_amino, rule4_pattern_ether_methoxy], 'prediction': 1},
        {'number': 5, 'pattern': rule5_pattern, 'prediction': 1},
        {'number': 6, 'pattern': rule6_pattern, 'exclude_patterns': rule6_exclude_patterns, 'prediction': -1},
        {'number': 7, 'pattern': rule7_pattern, 'prediction': -1},
        {'number': 8, 'pattern': rule8_pattern, 'prediction': -1},
        {'number': 9, 'pattern': rule9_pattern, 'prediction': -1},
        {'number': 10, 'pattern': rule10_pattern, 'prediction': -1},
    ]
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = False
                # Check for matching patterns
                if 'patterns' in rule:
                    submatches = [mol.HasSubstructMatch(pat) for pat in rule['patterns']]
                    match = all(submatches)
                else:
                    match = mol.HasSubstructMatch(rule['pattern'])
                # Exclude patterns if any
                if match and 'exclude_patterns' in rule:
                    for expat in rule['exclude_patterns']:
                        if mol.HasSubstructMatch(expat):
                            match = False
                            break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: Fe/Hf
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

After thoroughly analyzing the dataset and considering the underlying physical and chemical properties of the molecular modifiers, I have crafted the following rules to describe the relationship between the modifiers and the Fe/Hf value. These rules aim to balance coverage and complexity while illustrating combinations of functional groups that influence the Fe/Hf ratio.

---

- **Rule 1**: **Modifiers containing primary amino groups (-NH₂) on flexible aliphatic chains of five or more carbon atoms result in a high Fe/Hf value**. The presence of a primary amino group provides a strong coordination site for Fe ions, and the flexibility of the aliphatic chain allows optimal interaction.

  - *Rationale*: Primary amino groups are good ligands due to their lone pair of electrons, and longer chains increase flexibility, enhancing coordination.

  - *Examples*:
    - **5-aminopentanoic acid (3)**
    - **7-aminoheptanoic acid (31)**
    - **8-aminooctanoic acid (34)**

  - *Counterexamples*:
    - **(2S)-2-aminopentanedioic acid (0)**: Contains additional carboxylic acid groups that may compete with the amino group for coordination, leading to a low Fe/Hf value.
    - **4-aminobenzoic acid (4)**: The amino group is attached to an aromatic ring, reducing flexibility and coordination efficiency.

---

- **Rule 2**: **Modifiers with thiol groups (-SH) result in a high Fe/Hf value**. Thiol groups are strong soft ligands that can form stable complexes with transition metals like Fe.

  - *Rationale*: Sulfur has a high affinity for iron, and the thiol group can effectively donate electron density to Fe ions.

  - *Examples*:
    - **3-sulfanylpropanoic acid (18)**
    - **4-sulfanylbenzoic acid (10)**

  - *Counterexample*:
    - **Octanoic acid (5)**: Lacks thiol groups, resulting in a low Fe/Hf value.

---

- **Rule 3**: **Modifiers containing flexible ether linkages terminating with coordinating groups (e.g., amino, methoxy) result in a high Fe/Hf value**. The ether linkages provide molecular flexibility, enhancing the ability of coordinating groups to interact with Fe ions.

  - *Rationale*: Ether chains increase the distance between functional groups and reduce steric hindrance, allowing better access to Fe ions.

  - *Examples*:
    - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid (11)**
    - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid (32)**

  - *Counterexample*:
    - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid (9)**: Contains multiple hydroxyl groups without ether linkages, leading to a low Fe/Hf value.

---

- **Rule 4**: **Modifiers with pyridine rings connected via flexible aliphatic linkers result in a high Fe/Hf value**. The nitrogen atom in the pyridine ring serves as a coordination site, and the linker provides flexibility for optimal interaction.

  - *Rationale*: Pyridine nitrogen is a good ligand, and flexibility enhances coordination with Fe ions.

  - *Examples*:
    - **4-pyridin-4-ylbutanoic acid (24)**
    - **4-pyridin-4-ylbenzoic acid (12)**

  - *Counterexample*:
    - **Pyridine-3-carboxylic acid (21)**: Pyridine ring directly attached to the carboxylic acid without a flexible linker, resulting in a low Fe/Hf value.

---

- **Rule 5**: **Modifiers that are simple aliphatic or aromatic carboxylic acids without additional coordinating groups result in a low Fe/Hf value**. The absence of strong ligating functional groups leads to minimal interaction with Fe ions.

  - *Rationale*: Carboxylic acids alone may not provide sufficient coordination sites compared to other functional groups like amino or thiol groups.

  - *Examples*:
    - **Octanoic acid (5)**
    - **4-methylbenzoic acid (22)**

  - *Counterexample*:
    - **7-aminoheptanoic acid (31)**: Contains a primary amino group, resulting in a high Fe/Hf value.

---

- **Rule 6**: **Modifiers with hydroxyl groups on flexible aliphatic chains of five or more carbon atoms result in a high Fe/Hf value**. The hydroxyl group can coordinate with Fe ions, and the chain flexibility enhances interaction.

  - *Rationale*: Hydroxyl groups can act as ligands, and longer chains provide the necessary flexibility for effective coordination.

  - *Example*:
    - **7-hydroxyheptanoic acid (29)**

  - *Counterexamples*:
    - **3-(4-hydroxyphenyl)propanoic acid (30)**: Hydroxyl group attached to an aromatic ring, which is less flexible, resulting in a low Fe/Hf value.
    - **5-(4-hydroxyphenyl)pentanoic acid (7)**: Similar reason as above.

---

- **Rule 7**: **Modifiers containing electron-donating groups (e.g., methoxy groups) on aromatic rings connected via flexible linkers result in a high Fe/Hf value**. These groups increase electron density, facilitating coordination with Fe ions.

  - *Rationale*: Electron-donating substituents enhance the ligand's ability to donate electron density to the metal ion.

  - *Example*:
    - **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid (25)**

  - *Counterexamples*:
    - **4-formylbenzoic acid (20)**: Contains an electron-withdrawing aldehyde group and lacks flexibility, leading to a low Fe/Hf value.
    - **4-methylbenzoic acid (22)**: Methyl group is less effective in electron donation and lacks flexibility.

---

- **Rule 8**: **Modifiers with multiple carboxylic acid groups result in a low Fe/Hf value**. The presence of additional carboxyl groups may reduce the ligand's ability to effectively coordinate with Fe ions due to intramolecular hydrogen bonding or competition.

  - *Rationale*: Multiple acidic groups can lead to deprotonation issues and unfavorable interactions that hinder coordination.

  - *Example*:
    - **(2S)-2-aminopentanedioic acid (0)**

  - *Counterexample*:
    - **(2S)-2-aminobutanedioic acid (2)**: Despite having multiple carboxylic acid groups, shows high Fe/Hf value, possibly due to a difference in spatial arrangement that allows effective coordination.

---

- **Rule 9**: **Modifiers containing electron-withdrawing groups (e.g., fluorinated chains, trifluoromethyl groups) result in a low Fe/Hf value**. These groups reduce electron density available for coordination.

  - *Rationale*: Electron-withdrawing substituents decrease the ligand's ability to donate electron density to the metal ion.

  - *Examples*:
    - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid (14)**
    - **4-[(2,2,2-trifluoroacetyl)amino]butanoic acid (28)**

---

- **Rule 10**: **Modifiers with rigid aromatic structures lacking flexible linkers and additional coordinating groups result in a low Fe/Hf value**. The rigidity hinders optimal alignment for coordination.

  - *Rationale*: Flexibility is crucial for effective interaction with metal centers; rigid structures limit this interaction.

  - *Examples*:
    - **4-formylbenzoic acid (20)**
    - **4-methylbenzoic acid (22)**

  - *Counterexample*:
    - **4-pyridin-4-ylbutanoic acid (24)**: Incorporates a flexible linker and a pyridine ring, resulting in a high Fe/Hf value.

---

- **Rule 11**: **Modifiers containing sulfur in side chains (e.g., sulfides, thioethers) result in a high Fe/Hf value**. Sulfur atoms act as good coordination sites for Fe ions.

  - *Rationale*: Sulfur's lone pairs and larger atomic radius make it an effective ligand for transition metals.

  - *Example*:
    - **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid (23)**

---

- **Rule 12**: **Modifiers with amide linkages adjacent to coordinating groups result in a high Fe/Hf value**. The amide oxygen and nitrogen can participate in coordination.

  - *Rationale*: Amide groups can stabilize the complex through additional coordination sites.

  - *Example*:
    - **(2S)-6-acetamido-2-aminohexanoic acid (33)**

---

- **Rule 13**: **Modifiers with hydroxyl groups attached directly to aromatic rings (phenolic groups) result in a low Fe/Hf value**. The rigidity of the aromatic ring limits the hydroxyl group's ability to coordinate effectively.

  - *Rationale*: Phenolic hydroxyl groups are less accessible for coordination due to resonance stabilization and planarity of the aromatic ring.

  - *Examples*:
    - **3-(4-hydroxyphenyl)propanoic acid (30)**
    - **5-(4-hydroxyphenyl)pentanoic acid (7)**

  - *Counterexample*:
    - **7-hydroxyheptanoic acid (29)**: Hydroxyl group on a flexible aliphatic chain leads to a high Fe/Hf value.

---

- **Rule 14**: **Modifiers with bulky, rigid structures and no additional coordinating groups result in a low Fe/Hf value**. Steric hindrance and lack of flexibility reduce coordination efficiency.

  - *Rationale*: Bulky groups can prevent close approach to the metal center, and rigidity limits the ability to adjust for optimal binding.

  - *Example*:
    - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid (15)**

---

- **Rule 15**: **Modifiers with oxygen-containing heterocycles directly attached to carboxylic acid groups result in a low Fe/Hf value**. The heterocycle may not provide suitable coordination sites or flexibility.

  - *Rationale*: The electron distribution in heterocycles can reduce the availability of lone pairs for coordination.

  - *Example*:
    - **2-oxo-1H-pyridine-4-carboxylic acid (8)**

---

**End of Rules**

These rules aim to capture the key structural features influencing the Fe/Hf ratio. By considering combinations of functional groups and molecular flexibility, we can predict whether a given modifier will result in a high or low Fe/Hf value. This understanding can guide the selection or design of new modifiers to optimize the catalytic performance of Hf-TPY-MOL(Fe).---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0
1,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,-1,0,0,-1,-1,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,-1,1,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,-1,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0
0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,-1,-1,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,-1,0,0,-1,-1,0
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,-1,-1,0
1,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,1,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.7714285714285715; Test Accuracy: 1.0
    Train Support: 0.11428571428571428; Test Support: 0.0
    Train Confidence: 0.7742857142857142; Test Confidence: 0.4
    Train Lift: 1.5581699346405231; Test Lift: NONE
    Train Leverage: 0.03363265306122449; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    
    # Primary amino group (-NH2)
    primary_amino = '[NX3H2]'
    
    # Aliphatic chain of five or more carbons (non-aromatic)
    aliphatic_chain_5plus = 'CCCC[C;!R]'
    
    # Thiol group (-SH)
    thiol = '[SX2H]'
    
    # Ether linkage (-O-)
    ether_linkage = '[#6][OX2][#6]'
    
    # Coordinating groups (amino or methoxy)
    amino_group = '[NX3;H2,H1;!$(NC=O)]'
    methoxy_group = '[OX2][CH3]'
    
    # Pyridine ring
    pyridine_ring = '[n][c]:[c]:[c]:[c]:[c]'
    
    # Flexible aliphatic linker (non-aromatic chain of two or more carbons)
    aliphatic_linker = 'CCC'
    
    # Simple carboxylic acid without additional coordinating groups
    simple_carboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1]'
    
    # Exclude patterns for Rule 5
    exclude_coordinating_groups = '[#7,#8,#16]'  # Exclude N, O, S
    
    # Hydroxyl group on aliphatic chain
    hydroxyl_aliphatic = '[C][C][C][C][C][OX2H]'
    
    # Electron-donating groups on aromatic ring connected via flexible linkers
    edg_on_aromatic = '[c][OX2H,OX2][C][C][C](=O)[OX1H0-,OX2H1]'
    
    # Multiple carboxylic acid groups
    multiple_carboxylic_acids = '[$([CX3](=O)[OX1H0-,OX2H1]),$([CX3](=O)[O-])][#6][CX3](=O)[OX1H0-,OX2H1]'
    
    # Electron-withdrawing groups (e.g., fluorinated chains, trifluoromethyl groups)
    ewgs = '[CX4][F,Cl,Br,I]'
    
    # Bulky, rigid structures with no additional coordinating groups
    bulky_rigid = '[c]1[c][c][c][c][c]1'
    
    # Oxygen-containing heterocycles directly attached to carboxylic acid groups
    oxygen_heterocycle = '[o][c][c](=O)[OX1H0-,OX2H1]'
    
    # Sulfur in side chains (e.g., sulfides, thioethers)
    sulfur_side_chain = '[#16][#6]'
    
    # Amide linkages adjacent to coordinating groups
    amide_adjacent = '[NX3][CX3](=O)[#7,#8,#16]'
    
    # Hydroxyl groups attached directly to aromatic rings (phenolic groups)
    phenolic_oh = '[c][OX2H]'
    
    # Compile SMARTS patterns
    smarts_patterns = {
        'Rule 1': {
            'patterns': [primary_amino, aliphatic_chain_5plus],
            'prediction': 1
        },
        'Rule 2': {
            'patterns': [thiol],
            'prediction': 1
        },
        'Rule 3': {
            'patterns': [ether_linkage, amino_group + ',' + methoxy_group],
            'prediction': 1
        },
        'Rule 4': {
            'patterns': [pyridine_ring, aliphatic_linker],
            'prediction': 1
        },
        'Rule 5': {
            'patterns': [simple_carboxylic_acid],
            'exclude': [exclude_coordinating_groups],
            'prediction': -1
        },
        'Rule 6': {
            'patterns': [hydroxyl_aliphatic],
            'prediction': 1
        },
        'Rule 7': {
            'patterns': [edg_on_aromatic],
            'prediction': 1
        },
        'Rule 8': {
            'patterns': [multiple_carboxylic_acids],
            'prediction': -1
        },
        'Rule 9': {
            'patterns': [ewgs],
            'prediction': -1
        },
        'Rule 10': {
            'patterns': [bulky_rigid],
            'exclude': [amide_adjacent],
            'prediction': -1
        },
        'Rule 11': {
            'patterns': [sulfur_side_chain],
            'prediction': 1
        },
        'Rule 12': {
            'patterns': [amide_adjacent],
            'prediction': 1
        },
        'Rule 13': {
            'patterns': [phenolic_oh],
            'prediction': -1
        },
        'Rule 14': {
            'patterns': [bulky_rigid],
            'prediction': -1
        },
        'Rule 15': {
            'patterns': [oxygen_heterocycle],
            'prediction': -1
        }
    }
    
    # Compile patterns
    for rule in smarts_patterns.values():
        compiled_patterns = []
        for pattern in rule.get('patterns', []):
            subpatterns = pattern.split(',')  # Handle multiple patterns separated by commas
            compiled_subpatterns = [Chem.MolFromSmarts(p.strip()) for p in subpatterns]
            compiled_patterns.append(compiled_subpatterns)
        rule['compiled_patterns'] = compiled_patterns
        
        # Compile exclude patterns if any
        if 'exclude' in rule:
            compiled_exclude = []
            for pattern in rule['exclude']:
                compiled_exclude.append(Chem.MolFromSmarts(pattern))
            rule['compiled_exclude'] = compiled_exclude
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(smarts_patterns))
            continue
        row = []
        for rule_name, rule in smarts_patterns.items():
            try:
                match = True
                # Check exclude patterns if any
                if 'compiled_exclude' in rule:
                    for pat in rule['compiled_exclude']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for pattern_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in pattern_group:
                        if mol.HasSubstructMatch(pat):
                            group_match = True
                            break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=smarts_patterns.keys())
    return df

--------------------------------------------------