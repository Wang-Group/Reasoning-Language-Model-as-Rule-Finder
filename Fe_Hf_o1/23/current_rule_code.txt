def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    carboxylate_anion = '[CX3](=O)[O-]'
    
    # Thiol group (-SH)
    thiol = '[SX2H]'
    # Thioether group (-S-)
    thioether = '[#16X2][$([#6]);!$(S=[O,N])][$([#6]);!$(S=[O,N])]'  # Excludes sulfoxides and sulfones
    
    # Primary aliphatic amine (-NH2)
    primary_amine = '[NX3;H2][C;!$(C=[O,N,S])][C;!$(C=[O,N,S])][C;!$(C=[O,N,S])][C;!$(C=[O,N,S])][C;!$(C=[O,N,S])]'  # Chain of at least 5 carbons
    
    # Aromatic carboxylic acid
    aromatic_carboxylic_acid = '[c][CX3](=O)[OX2H1]'
    
    # Electron-withdrawing groups (EWGs) on aromatic ring
    nitro_group = '[c][NX3](=O)[O-]'
    bromo_group = '[c][Br]'
    pyridine_ring = 'n1ccccc1'
    
    # Polyether chain (at least two ether linkages)
    ether_linkage = '[#6][OX2][#6]'
    
    # Terminal methoxy group (-OCH3)
    methoxy_group = '[OX2][CH3]'
    
    # Terminal amino group (-NH2)
    terminal_amino = '[NX3;H2]'
    
    # Phenolic hydroxyl group (-OH attached to aromatic ring)
    phenol = '[c][OX2H]'
    
    # Electron-rich heteroaromatic rings
    indole = 'c1ccc2c(c1)[nH]c3c2cccc3'
    pyrazole = 'c1cc[nH]n1'
    pyridone = 'O=C1C=CC=CN1'
    
    # Highly fluorinated aliphatic chain
    fluorinated_chain = '[CX4]([F])([F])([F])'  # Trifluoromethyl group as a marker
    
    # Straight-chain aliphatic carboxylic acids without additional functional groups
    aliphatic_carboxylic_acid = '[CH3][CH2][CH2][CH2][CH2][CH2][CX3](=O)[OX2H1]'  # Octanoic acid example
    
    # Multiple carboxylic acid groups without additional coordinating functionalities
    multiple_carboxylic_acids = '[CX3](=O)[OX2H1].[CX3](=O)[OX2H1]'  # Simplified pattern
    
    # Long aliphatic chain terminated with polar groups
    long_chain_polar_terminal = '[C;!$(C=[O,N,S])]1~[C;!$(C=[O,N,S])]~[C;!$(C=[O,N,S])]~[C;!$(C=[O,N,S])]~[C;!$(C=[O,N,S])]1[OX2H,NX3;H2]'
    
    # Sterically hindered carboxylic acid groups
    steric_hindrance = '[CX3](=O)[OX2H1][C](C)(C)C'  # Tertiary butyl adjacent to COOH
    
    # Multiple adjacent hydroxyl groups
    polyol = '[#6][OX2H][#6][OX2H][#6][OX2H]'  # Three adjacent hydroxyls
    
    # Rules definition
    rules = [
        {
            'number': 1,
            'description': 'Modifiers containing sulfur groups (thiol or thioether) and a carboxylic acid predict high Fe/Hf',
            'patterns': [[thiol, thioether], [carboxylic_acid, carboxylate_anion]],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers with terminal primary amines on medium to long aliphatic chains predict high Fe/Hf',
            'patterns': [[primary_amine], [carboxylic_acid, carboxylate_anion]],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Aromatic carboxylic acids with electron-withdrawing substituents predict high Fe/Hf',
            'patterns': [[aromatic_carboxylic_acid], [nitro_group, bromo_group, pyridine_ring]],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers with polyether chains and terminal polar groups predict high Fe/Hf',
            'patterns': [[ether_linkage], [methoxy_group, terminal_amino], [carboxylic_acid, carboxylate_anion]],
            'counts': {ether_linkage: 2},
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers with electron-rich aromatic hydroxyl groups predict low Fe/Hf',
            'patterns': [[phenol], [carboxylic_acid, carboxylate_anion]],
            'prediction': -1
        },
        {
            'number': 6,
            'description': 'Modifiers with electron-rich heteroaromatic rings predict low Fe/Hf',
            'patterns': [[indole, pyrazole, pyridone], [carboxylic_acid, carboxylate_anion]],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Modifiers with highly fluorinated aliphatic chains predict low Fe/Hf',
            'patterns': [[fluorinated_chain], [carboxylic_acid, carboxylate_anion]],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Straight-chain aliphatic carboxylic acids without additional functional groups predict low Fe/Hf',
            'patterns': [[aliphatic_carboxylic_acid]],
            'exclude_patterns': [[thiol, thioether, primary_amine, ether_linkage, phenol]],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers with multiple carboxylic acid groups without additional coordinating functionalities predict low Fe/Hf',
            'patterns': [[multiple_carboxylic_acids]],
            'exclude_patterns': [[thiol, thioether, primary_amine, ether_linkage, phenol]],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers with aliphatic chains terminated with polar groups predict high Fe/Hf',
            'patterns': [[long_chain_polar_terminal], [carboxylic_acid, carboxylate_anion]],
            'prediction': 1
        },
        {
            'number': 11,
            'description': 'Modifiers with sterically hindered carboxylic acid groups predict low Fe/Hf',
            'patterns': [[steric_hindrance]],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'Modifiers with electron-withdrawing groups and additional coordination sites predict high Fe/Hf',
            'patterns': [[aromatic_carboxylic_acid], [nitro_group, bromo_group, pyridine_ring], [primary_amine, methoxy_group]],
            'prediction': 1
        },
        {
            'number': 13,
            'description': 'Modifiers with multiple adjacent hydroxyl groups predict low Fe/Hf',
            'patterns': [[polyol], [carboxylic_acid, carboxylate_anion]],
            'prediction': -1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(p) for p in group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for group in rule['exclude_patterns']:
                compiled_group = [Chem.MolFromSmarts(p) for p in group]
                compiled_excludes.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_excludes
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for idx, compiled_group in enumerate(rule['compiled_patterns']):
                    group_match = False
                    for pat in compiled_group:
                        matches = mol.GetSubstructMatches(pat)
                        if matches:
                            # If a count threshold is specified for this pattern
                            if 'counts' in rule and pat.GetSmarts() in rule['counts']:
                                threshold = rule['counts'][pat.GetSmarts()]
                                if len(matches) >= threshold:
                                    group_match = True
                                    break
                            else:
                                group_match = True
                                break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df