def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and structural features based on the rules
    
    # Rule 1: Aliphatic amino acids with terminal primary amino group (-NH2) and carboxylate group, carbon chains of 5 to 8 carbons
    rule1_smarts = '[N;X3;H2][C;X4][C;X4][C;X4][C;X4][C;X3](=O)[O;H1,-1]'
    
    # Rule 2: Aromatic carboxylic acids with strong EWGs at para position
    ewg_para_smarts = '[c][c](C(=O)[O;H1,-1])[c][c][c][$(c[F,Cl,Br,I]),$(c[N+](=O)[O-])]'
    
    # Rule 3: Aromatic carboxylic acids with EDGs at para position
    edg_para_smarts = '[c][c](C(=O)[O;H1,-1])[c][c][c][$(c[NH2,NH,R]);!$(c[N+](=O)[O-])]'
    
    # Rule 4: Heterocyclic aromatic rings with nitrogen atoms positioned to coordinate (e.g., pyridine rings at 4-position)
    rule4_smarts = '[n][c][c][c](C(=O)[O;H1,-1])[c][c]'
    
    # Rule 5: Aliphatic carboxylic acids with terminal hydroxy groups (-OH)
    rule5_smarts = '[O;H1][C;X4][C;X4][C;X4][C;X3](=O)[O;H1,-1]'
    
    # Rule 6: Modifiers with multiple coordinating functional groups (amino, hydroxy, ether linkages) in flexible aliphatic chains
    rule6_smarts = '[$([N;X3;H2]),$([O;H1]),$([O][C;X4])][C;X4][C;X4][C;X4][C;X3](=O)[O;H1,-1]'
    
    # Rule 7: Modifiers containing sulfur atoms in functional groups such as thiol (-SH) or thioether (-S-)
    rule7_smarts = '[$([S;X2;H1]),$([S][C;X4])][C;X4][C;X3](=O)[O;H1,-1]'
    
    # Rule 8: Modifiers containing perfluorinated alkyl chains
    rule8_smarts = '[C](F)(F)[C](F)(F)F'
    
    # Rule 9: Modifiers with multiple hydroxyl groups on rigid or bulky aliphatic chains
    rule9_smarts = '[C;X4]([O;H1])([O;H1])[C;X3](=O)[O;H1,-1]'
    
    # Rule 10: Bulky or rigid aromatic structures without additional coordinating groups
    rule10_smarts = '[c][c]([C;X3](=O)[O;H1,-1])[c][c][c][c]'
    
    # Rule 11: Dicarboxylic acids with adjacent carbonyl groups (e.g., alpha-keto diacids)
    rule11_smarts = 'O=C[C;X3](=O)[O;H1,-1]'
    
    # Rule 12: Aromatic carboxylic acids with methoxy groups on the aromatic ring and additional coordinating groups
    rule12_smarts = '[c][c](C(=O)[O;H1,-1])[c][c](OC)[c][c]'
    
    # Rule 13: Aldehyde groups adjacent to carboxylic acids on aromatic rings
    rule13_smarts = '[c][c](C=O)[c][c](C(=O)[O;H1,-1])[c][c]'
    
    # Rule 14: Flexible ether linkages with terminal coordinating groups (e.g., amino or carboxylate)
    rule14_smarts = '[O][C;X4][C;X4][O][C;X4][C;X3](=O)[O;H1,-1]'
    
    # Rule 15: Fused aromatic systems containing additional carbonyl groups facilitating coordination
    rule15_smarts = '[o][c](C(=O)[O;H1,-1])[c]1[c](=O)[c][c][c][o]1'
    
    # List of rules with their SMARTS patterns and predictions
    rules = [
        {'number': 1, 'smarts': rule1_smarts, 'prediction': 1},
        {'number': 2, 'smarts': ewg_para_smarts, 'prediction': 1},
        {'number': 3, 'smarts': edg_para_smarts, 'prediction': -1},
        {'number': 4, 'smarts': rule4_smarts, 'prediction': 1},
        {'number': 5, 'smarts': rule5_smarts, 'prediction': 1},
        {'number': 6, 'smarts': rule6_smarts, 'prediction': 1},
        {'number': 7, 'smarts': rule7_smarts, 'prediction': 1},
        {'number': 8, 'smarts': rule8_smarts, 'prediction': -1},
        {'number': 9, 'smarts': rule9_smarts, 'prediction': -1},
        {'number': 10, 'smarts': rule10_smarts, 'prediction': -1},
        {'number': 11, 'smarts': rule11_smarts, 'prediction': -1},
        {'number': 12, 'smarts': rule12_smarts, 'prediction': 1},
        {'number': 13, 'smarts': rule13_smarts, 'prediction': -1},
        {'number': 14, 'smarts': rule14_smarts, 'prediction': 1},
        {'number': 15, 'smarts': rule15_smarts, 'prediction': 1},
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        rule['pattern'] = Chem.MolFromSmarts(rule['smarts'])
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                if mol.HasSubstructMatch(rule['pattern']):
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except:
                # In case of an error, append 0
                row.append(0)
        results.append(row)
    
    # Create DataFrame with results
    columns = [f"Rule {rule['number']}" for rule in rules]
    df = pd.DataFrame(results, columns=columns)
    return df
