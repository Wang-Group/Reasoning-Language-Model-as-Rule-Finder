def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and features
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    primary_amino_group = '[NX3H2]'
    aromatic_atom = '[a]'
    thiol_group = '[#16X2H]'
    ether_linkage = '[OD2]([#6])[#6]'
    alpha_amino_acid = '[NX3][CX4H]([#6])[CX3](=O)[OX2H1]'
    hydroxyl_group = '[OX2H]'
    perfluoro_chain = '[#6][F][F][F]'
    aldehyde_group = '[CX3H1](=O)[#6]'
    nitrogen_heterocycle = '[n]'
    ketone_in_chain = '[#6][CX3](=O)[#6]'
    thioether = '[#16X2][#6]'
    aromatic_ring = '[a]'
    bulky_aromatic_side_chain = '[c][c][c][c][c][c]'
    # Electron-withdrawing groups (EWG) on aromatic ring
    ewg_on_aromatic = ['[c][F,Cl,Br,I]', '[c][NX3](=O)[OX1-]']
    # Electron-donating groups (EDG) on aromatic ring
    edg_on_aromatic = ['[c][NX3H2]', '[c][OX2H]', '[c][OX2][CH3]']
    # Multiple hydroxyl groups
    multiple_hydroxyl_groups = '[OX2H]'
    
    # Compile SMARTS patterns
    smarts_patterns = {
        'carboxylic_acid': Chem.MolFromSmarts(carboxylic_acid),
        'primary_amino_group': Chem.MolFromSmarts(primary_amino_group),
        'aromatic_atom': Chem.MolFromSmarts(aromatic_atom),
        'thiol_group': Chem.MolFromSmarts(thiol_group),
        'ether_linkage': Chem.MolFromSmarts(ether_linkage),
        'alpha_amino_acid': Chem.MolFromSmarts(alpha_amino_acid),
        'hydroxyl_group': Chem.MolFromSmarts(hydroxyl_group),
        'perfluoro_chain': Chem.MolFromSmarts(perfluoro_chain),
        'aldehyde_group': Chem.MolFromSmarts(aldehyde_group),
        'nitrogen_heterocycle': Chem.MolFromSmarts(nitrogen_heterocycle),
        'ketone_in_chain': Chem.MolFromSmarts(ketone_in_chain),
        'thioether': Chem.MolFromSmarts(thioether),
        'aromatic_ring': Chem.MolFromSmarts(aromatic_ring),
        'bulky_aromatic_side_chain': Chem.MolFromSmarts(bulky_aromatic_side_chain),
        'ewg_on_aromatic': [Chem.MolFromSmarts(pat) for pat in ewg_on_aromatic],
        'edg_on_aromatic': [Chem.MolFromSmarts(pat) for pat in edg_on_aromatic],
        'multiple_hydroxyl_groups': Chem.MolFromSmarts(multiple_hydroxyl_groups),
    }
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'High Fe/Hf Value: Aliphatic carboxylic acids with a terminal primary amino group (-NH2).',
            'patterns': [
                smarts_patterns['carboxylic_acid'],
                smarts_patterns['primary_amino_group'],
            ],
            'exclude_patterns': [
                smarts_patterns['aromatic_atom'],
            ],
            'prediction': 1,
        },
        {
            'number': 2,
            'description': 'High Fe/Hf Value: Aromatic carboxylic acids with strong electron-withdrawing substituents at the para position.',
            'patterns': [
                smarts_patterns['carboxylic_acid'],
                smarts_patterns['aromatic_atom'],
                smarts_patterns['aromatic_ring'],
            ],
            'extra_patterns': smarts_patterns['ewg_on_aromatic'],
            'prediction': 1,
        },
        {
            'number': 3,
            'description': 'High Fe/Hf Value: Modifiers containing thiol groups (-SH) along with carboxylic acids.',
            'patterns': [
                smarts_patterns['carboxylic_acid'],
                smarts_patterns['thiol_group'],
            ],
            'prediction': 1,
        },
        {
            'number': 4,
            'description': 'High Fe/Hf Value: Modifiers with polyether chains connected to a terminal carboxylic acid.',
            'patterns': [
                smarts_patterns['carboxylic_acid'],
                smarts_patterns['ether_linkage'],
            ],
            'prediction': 1,
        },
        {
            'number': 5,
            'description': 'High Fe/Hf Value: Alpha-amino acids with small or unbranched side chains.',
            'patterns': [
                smarts_patterns['alpha_amino_acid'],
            ],
            'exclude_patterns': [
                smarts_patterns['bulky_aromatic_side_chain'],
            ],
            'prediction': 1,
        },
        {
            'number': 6,
            'description': 'Low Fe/Hf Value: Aromatic carboxylic acids with electron-donating substituents on the aromatic ring.',
            'patterns': [
                smarts_patterns['carboxylic_acid'],
                smarts_patterns['aromatic_atom'],
            ],
            'extra_patterns': smarts_patterns['edg_on_aromatic'],
            'prediction': -1,
        },
        {
            'number': 7,
            'description': 'Low Fe/Hf Value: Modifiers containing multiple hydroxyl groups (polyols) along with carboxylic acids.',
            'patterns': [
                smarts_patterns['carboxylic_acid'],
            ],
            'count_patterns': {
                smarts_patterns['multiple_hydroxyl_groups']: 2,
            },
            'prediction': -1,
        },
        {
            'number': 8,
            'description': 'Low Fe/Hf Value: Modifiers containing perfluorinated aliphatic chains.',
            'patterns': [
                smarts_patterns['perfluoro_chain'],
            ],
            'prediction': -1,
        },
        {
            'number': 9,
            'description': 'Low Fe/Hf Value: Modifiers with aldehyde groups attached to aromatic rings.',
            'patterns': [
                smarts_patterns['aldehyde_group'],
                smarts_patterns['aromatic_atom'],
            ],
            'prediction': -1,
        },
        {
            'number': 10,
            'description': 'High Fe/Hf Value or Low Fe/Hf Value: Modifiers containing nitrogen heterocycles with flexible linkers.',
            'patterns': [
                smarts_patterns['carboxylic_acid'],
                smarts_patterns['nitrogen_heterocycle'],
            ],
            'prediction': 1,
        },
        {
            'number': 11,
            'description': 'Low Fe/Hf Value: Modifiers with internal ketone groups within aliphatic chains.',
            'patterns': [
                smarts_patterns['ketone_in_chain'],
            ],
            'prediction': -1,
        },
        {
            'number': 12,
            'description': 'High Fe/Hf Value: Modifiers containing ether-functionalized aliphatic chains with terminal amino groups.',
            'patterns': [
                smarts_patterns['ether_linkage'],
                smarts_patterns['primary_amino_group'],
            ],
            'prediction': 1,
        },
        {
            'number': 13,
            'description': 'Low Fe/Hf Value: Simple aliphatic carboxylic acids without additional coordinating functional groups.',
            'patterns': [
                smarts_patterns['carboxylic_acid'],
            ],
            'exclude_patterns': [
                smarts_patterns['primary_amino_group'],
                smarts_patterns['thiol_group'],
                smarts_patterns['ether_linkage'],
                smarts_patterns['aromatic_atom'],
            ],
            'prediction': -1,
        },
        {
            'number': 14,
            'description': 'High Fe/Hf Value: Modifiers containing sulfur in side chains as thioethers or sulfides.',
            'patterns': [
                smarts_patterns['thioether'],
            ],
            'prediction': 1,
        },
        {
            'number': 15,
            'description': 'High or Low Fe/Hf Value: Modifiers with bulky aromatic side chains depending on their contribution to coordination.',
            'patterns': [
                smarts_patterns['bulky_aromatic_side_chain'],
            ],
            'prediction': -1,  # Assuming low Fe/Hf due to steric hindrance
        },
    ]
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for pat in rule['exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for pat in rule['patterns']:
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Check extra patterns (e.g., EWGs or EDGs on aromatic ring)
                if 'extra_patterns' in rule:
                    extra_match = False
                    for pat in rule['extra_patterns']:
                        if mol.HasSubstructMatch(pat):
                            extra_match = True
                            break
                    if not extra_match:
                        match = False
                # Check count of patterns if specified (e.g., multiple hydroxyl groups)
                if 'count_patterns' in rule:
                    for pat, count in rule['count_patterns'].items():
                        matches = mol.GetSubstructMatches(pat)
                        if len(matches) < count:
                            match = False
                            break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

