def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    
    # Carboxylic acid group (-COOH) and carboxylate anion (-COO-)
    carboxylic_acid = ['[CX3](=O)[OX2H1]', '[CX3](=O)[O-]']

    # Primary aliphatic amine (-NH2)
    primary_aliphatic_amine = '[NX3H2][CX4]'

    # Secondary aliphatic amine (-NH-)
    secondary_aliphatic_amine = '[NX3H1][CX4][CX4]'

    # Thiol group (-SH)
    thiol = '[SX2H]'

    # Thioether group (-S-)
    thioether = '[SX2][#6][#6]'

    # Ether linkage (-O-)
    ether_linkage = '[#6][OX2][#6]'

    # Pyridine ring
    pyridine_ring = '[n]1ccccc1'

    # Aromatic ring
    aromatic_ring = 'c1ccccc1'

    # Electron-withdrawing groups at para-position on aromatic ring
    
    # Para-substituted benzoic acid with nitro group
    para_nitro_benzoic_acid = 'O=C(O)c1ccc([NX3](=O)=O)cc1'
    
    # Para-substituted benzoic acid with bromomethyl group
    para_bromomethyl_benzoic_acid = 'O=C(O)c1ccc(CBr)cc1'
    
    # Para-substituted benzoic acid with sulfanyl group
    para_sulfanyl_benzoic_acid = 'O=C(O)c1ccc(S)cc1'
    
    # Electron-donating groups at para-position (hydroxyl, amino, methyl)
    para_hydroxyl_benzoic_acid = 'O=C(O)c1ccc(O)cc1'
    para_amino_benzoic_acid = 'O=C(O)c1ccc(N)cc1'
    para_methyl_benzoic_acid = 'O=C(O)c1ccc(C)cc1'
    
    # Multiple hydroxyl groups (polyhydroxy)
    multiple_hydroxyl_groups = '[OX2H]'

    # Perfluorinated alkane chain
    perfluoro_alkane = '[CX4](F)(F)F'

    # Aromatic ring with carbonyl-containing substituents
    aromatic_carbonyl = '[c][CX3](=O)[#6]'

    # Side-chain carboxyl group (amino acids with additional carboxyl)
    side_chain_carboxyl = '[CX3](=O)[OX1-,OX2H][#6][CX3](=O)[OX1-,OX2H]'

    # Electron-rich heterocycles fused to aromatic carboxylic acids
    fused_heterocycle = '[a][n,o,s][a]'

    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'High Fe/Hf Value (True): Aliphatic monocarboxylic acids with a terminal primary amino group (-NH₂) at the end opposite the carboxyl group.',
            'patterns': [
                carboxylic_acid,
                [primary_aliphatic_amine]
            ],
            'exclude_patterns': [
                ['[a]'],  # Exclude aromatic atoms
                ['[NX3H1]', '[NX3H0]'],  # Exclude secondary and tertiary amines
                ['[OX2H]'],  # Exclude hydroxyl groups
                ['[SX2]']  # Exclude sulfur-containing groups
            ],
            'additional_checks': ['is_linear_chain'],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'High Fe/Hf Value (True): Aromatic carboxylic acids with a strong electron-withdrawing group at the para-position.',
            'patterns': [
                [para_nitro_benzoic_acid, para_bromomethyl_benzoic_acid, para_sulfanyl_benzoic_acid]
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'High Fe/Hf Value (True): Modifiers containing sulfur-containing functional groups such as thiol (-SH) or thioether (-S-) and a carboxylic acid group (-COOH).',
            'patterns': [
                [thiol, thioether],
                carboxylic_acid
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'High Fe/Hf Value (True): Aromatic carboxylic acids with an attached pyridine ring.',
            'patterns': [
                [pyridine_ring],
                carboxylic_acid
            ],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'High Fe/Hf Value (True): Aliphatic carboxylic acids with ether linkages (-O-) in the chain and a terminal amino (-NH₂) or hydroxyl (-OH) group.',
            'patterns': [
                [ether_linkage],
                carboxylic_acid,
                ['[NX3H2]', '[OX2H]']  # Terminal amino or hydroxyl group
            ],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Low Fe/Hf Value (False): Aliphatic carboxylic acids without additional coordinating groups.',
            'patterns': carboxylic_acid,
            'exclude_patterns': [
                ['[a]'],  # Exclude aromatic atoms
                ['[NX3]', '[OX2H]', '[SX2]'],  # Exclude amines, hydroxyls, sulfur groups
                [ether_linkage],
            ],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Low Fe/Hf Value (False): Aromatic carboxylic acids with electron-donating groups at the para-position.',
            'patterns': [
                [para_hydroxyl_benzoic_acid, para_amino_benzoic_acid, para_methyl_benzoic_acid]
            ],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Low Fe/Hf Value (False): Polyhydroxy carboxylic acids with multiple hydroxyl groups.',
            'patterns': [
                carboxylic_acid
            ],
            'additional_checks': ['multiple_hydroxyl_groups'],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Low Fe/Hf Value (False): Perfluorinated carboxylic acids.',
            'patterns': [
                carboxylic_acid,
                [perfluoro_alkane]
            ],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Low Fe/Hf Value (False): Aromatic carboxylic acids with additional carbonyl-containing substituents attached directly to the ring.',
            'patterns': [
                carboxylic_acid,
                [aromatic_carbonyl]
            ],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Variable Fe/Hf Value: Amino acids with an α-carboxyl group and a side-chain carboxyl group.',
            'patterns': [
                ['[NX3][CX4][CX3](=O)[OX1-,OX2H]'],  # Amino acid backbone
                ['[CX3](=O)[OX1-,OX2H]']  # Side-chain carboxyl group
            ],
            'prediction': 0  # Variable, assign 0
        },
        {
            'number': 12,
            'description': 'Low Fe/Hf Value (False): Aromatic carboxylic acids fused directly to electron-rich heterocycles.',
            'patterns': [
                carboxylic_acid,
                [fused_heterocycle]
            ],
            'prediction': -1
        }
    ]

    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(p) for p in group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for group in rule['exclude_patterns']:
                compiled_group = [Chem.MolFromSmarts(p) for p in group]
                compiled_excludes.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_excludes

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        if mol.HasSubstructMatch(pat):
                            group_match = True
                            break
                    if not group_match:
                        match = False
                        break
                # Additional checks
                if 'additional_checks' in rule:
                    for check in rule['additional_checks']:
                        if check == 'multiple_hydroxyl_groups':
                            hydroxyl_pat = Chem.MolFromSmarts('[OX2H]')
                            matches = mol.GetSubstructMatches(hydroxyl_pat)
                            if len(matches) < 2:
                                match = False
                        elif check == 'is_linear_chain':
                            if mol.GetRingInfo().NumRings() > 0:
                                match = False
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df
