def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    # Carboxylic acid group (-COOH)
    carboxylic_acid_patterns = ['[CX3](=O)[OX2H1]', '[CX3](=O)[O-]']

    # Primary aliphatic amine group (-NH2)
    primary_aliph_amine_pattern = '[NX3H2,NX4H3+;!$([N][!C])]'

    # Secondary aliphatic amine group (-NHR)
    secondary_aliph_amine_pattern = '[NX3H1,NX4H2+;!$([N][!C])]([C])'

    # Aromatic carboxylic acid
    aromatic_carboxylic_acid_pattern = '[c][CX3](=O)[OX2H1]'

    # Nitro group on aromatic ring
    nitro_group_on_aromatic_pattern = '[c][N+](=O)[O-]'

    # Halogen on aromatic ring
    halogen_on_aromatic_pattern = '[c][F,Cl,Br,I]'

    # Thiol group (-SH)
    thiol_pattern = '[SX2H]'

    # Thioether group (-S-)
    thioether_pattern = '[SX2;!$(S=[O,N])]([#6])[#6]'

    # Pyridine ring
    pyridine_ring_pattern = 'n1ccccc1'

    # Ether linkage (-O-) in aliphatic chain
    ether_linkage_pattern = '[CX4][OX2][CX4]'

    # Hydroxyl group (-OH)
    hydroxyl_group_pattern = '[OX2H]'

    # Aromatic hydroxyl group (-OH on aromatic ring)
    aromatic_hydroxyl_pattern = '[c][OX2H]'

    # Aromatic amino group (-NH2 on aromatic ring)
    aromatic_amino_pattern = '[c][NX3H2]'

    # Exclude patterns for Rule 6
    exclude_amines_pattern = '[NX3]'
    exclude_sulfur_groups_pattern = '[SX2]'
    exclude_ethers_pattern = '[OX2;!$([OX2][CX3](=O)[OX1H1])]'  # Exclude ether linkages not in carboxylic acid

    # Define the rules
    rules = [
        {
            'number': 1,
            'description': 'High Fe/Hf Value (True): Modifiers containing nitrogen-based functional groups (e.g., amino groups), especially attached to aliphatic chains.',
            'patterns': [
                carboxylic_acid_patterns,
                [primary_aliph_amine_pattern, secondary_aliph_amine_pattern]
            ],
            'exclude_patterns': [
                '[c][NX3]',  # Exclude aromatic amine
            ],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'High Fe/Hf Value (True): Modifiers that are aromatic carboxylic acids with strong electron-withdrawing groups (EWGs), such as nitro (-NO2) or halogens.',
            'patterns': [
                [aromatic_carboxylic_acid_pattern],
                [nitro_group_on_aromatic_pattern, halogen_on_aromatic_pattern]
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'High Fe/Hf Value (True): Modifiers containing sulfur-functional groups (thiol (-SH) or thioether (-S-)), especially when combined with carboxyl groups.',
            'patterns': [
                carboxylic_acid_patterns,
                [thiol_pattern, thioether_pattern]
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'High Fe/Hf Value (True): Modifiers containing pyridine rings or other nitrogen-containing heterocycles, especially when combined with carboxyl groups.',
            'patterns': [
                carboxylic_acid_patterns,
                [pyridine_ring_pattern]
            ],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'High Fe/Hf Value (True): Modifiers containing polyether chains with multiple ether linkages (-O-) and carboxyl groups.',
            'patterns': [
                carboxylic_acid_patterns,
                [ether_linkage_pattern]
            ],
            'count_threshold': {ether_linkage_pattern: 2},  # Require at least 2 ether linkages
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Low Fe/Hf Value (False): Modifiers that are aliphatic carboxylic acids without additional coordinating functional groups.',
            'patterns': [
                carboxylic_acid_patterns
            ],
            'exclude_patterns': [
                exclude_amines_pattern,
                exclude_sulfur_groups_pattern,
                exclude_ethers_pattern,
                '[OX2H]'   # Exclude hydroxyl groups
            ],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Low Fe/Hf Value (False): Modifiers that are aromatic carboxylic acids with electron-donating groups (EDGs) such as hydroxyl (-OH) or amino (-NH2) groups directly attached to the ring.',
            'patterns': [
                [aromatic_carboxylic_acid_pattern],
                [aromatic_hydroxyl_pattern, aromatic_amino_pattern]
            ],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Low Fe/Hf Value (False): Modifiers containing multiple hydroxyl groups (-OH) on aliphatic chains.',
            'patterns': [
                carboxylic_acid_patterns,
                [hydroxyl_group_pattern]
            ],
            'count_threshold': {hydroxyl_group_pattern: 2},
            'prediction': -1
        }
        # ... Additional rules can be added here
    ]

    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule['patterns']:
            compiled_group = [Chem.MolFromSmarts(p) for p in group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns

        if 'exclude_patterns' in rule:
            compiled_exclude_patterns = [Chem.MolFromSmarts(p) for p in rule['exclude_patterns']]
            rule['compiled_exclude_patterns'] = compiled_exclude_patterns

    # Process the SMILES list
    results = []
    for smiles in smiles_list:
        mol = Chem.MolFromSmiles(smiles)
        if mol is None:
            # If molecule can't be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns
                if 'compiled_exclude_patterns' in rule:
                    for pat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        matches = mol.GetSubstructMatches(pat)
                        if matches:
                            # If a count threshold is specified for this pattern
                            if 'count_threshold' in rule and pat.GetSmarts() in rule['count_threshold']:
                                threshold = rule['count_threshold'][pat.GetSmarts()]
                                if len(matches) >= threshold:
                                    group_match = True
                                    break
                            else:
                                group_match = True
                                break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df
