def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups, incorporating suggestions
    
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1]'
    
    # Terminal primary amine group (-NH2) at the end of an aliphatic chain
    terminal_primary_amine = '[NX3H2][CX4H2][CX4H2]'
    
    # Sulfur-containing functional groups
    thiol = '[SX2H]'  # Thiol (-SH)
    thioether = '[#16X2][#6;!$(C=S)]'  # Thioether (-S-), exclude sulfoxides etc.
    
    # Pyridine ring with nitrogen available
    pyridine_ring = 'n1ccccc1'
    
    # Aromatic carboxylic acids substituted at para position with nitro or bromomethyl
    para_nitro_benzoic_acid = 'c1ccc(cc1)[N+](=O)[O-]'
    para_bromomethyl_benzoic_acid = 'c1ccc(cc1)CBr'
    
    # Additional coordinating functional groups positioned to allow chelation
    amino_group = '[NX3H2,NX3H1,NX3H0]'
    ether_linkage = '[#6][OX2][#6]'
    
    # Exclude patterns for Rule 6
    exclude_patterns_rule6 = [
        '[NX3;!$(*=[O,N,S])]',  # Exclude any amine groups
        '[OX2H]',  # Exclude hydroxyl groups
        '[#16]',  # Exclude sulfur atoms
        '[OX2;!$(*=O)]',  # Exclude ethers
        '[F,Cl,Br,I]',  # Exclude halogens
        '[#7]',  # Exclude nitrogen
        '[a]'  # Exclude aromatic atoms
    ]
    
    # Aromatic rings substituted with electron-donating groups at para position
    para_hydroxyl_benzoic_acid = 'c1ccc(cc1O)C(=O)O'
    para_amino_benzoic_acid = 'c1ccc(cc1N)C(=O)O'
    
    # Multiple hydroxyl groups (-OH)
    hydroxyl_group = '[OX2H]'
    
    # Fluorinated aliphatic chains
    fluorinated_chain = '[CX4]([F])([F])[F]'
    
    # Carbonyl groups adjacent to carboxylic acid
    adjacent_carbonyl = '[CX3](=O)[CX3](=O)[OX1H0-,OX2H1]'
    
    # Define the rules
    rules = [
        {
            'number': 1,
            'description': 'Modifiers containing a terminal primary amino group (-NH2) on an aliphatic chain that is at least two carbons away from the carboxylic acid group (-COOH) predict a high Fe/Hf value.',
            'logic': 'custom_rule1',
            'smarts': [terminal_primary_amine, carboxylic_acid],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers containing sulfur-containing functional groups, such as thiols (-SH) or thioethers (-S-), predict a high Fe/Hf value.',
            'logic': 'and',
            'smarts': [[thiol, thioether], carboxylic_acid],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers containing a pyridine ring with the nitrogen atom available for coordination, predict a high Fe/Hf value.',
            'logic': 'and',
            'smarts': [pyridine_ring, carboxylic_acid],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers that are aromatic carboxylic acids substituted at the para position with strong electron-withdrawing groups, such as nitro (-NO2) or bromomethyl (-CH2Br), predict a high Fe/Hf value.',
            'logic': 'or',
            'smarts': [para_nitro_benzoic_acid, para_bromomethyl_benzoic_acid],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers containing additional coordinating functional groups, such as amino (-NH2) or ether (-O-) groups, positioned to allow chelation, predict a high Fe/Hf value.',
            'logic': 'custom_rule5',
            'smarts': [amino_group, ether_linkage, carboxylic_acid],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers that are simple aliphatic carboxylic acids without additional coordinating functional groups predict a low Fe/Hf value.',
            'logic': 'and_exclude',
            'smarts': [carboxylic_acid],
            'exclude': exclude_patterns_rule6,
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Modifiers containing aromatic rings substituted with electron-donating groups, such as hydroxyl (-OH) or amino (-NH2) groups at the para position, predict a low Fe/Hf value.',
            'logic': 'or',
            'smarts': [para_hydroxyl_benzoic_acid, para_amino_benzoic_acid],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Modifiers containing multiple hydroxyl groups (-OH) on an aliphatic chain or cyclic structure, without effective chelating arrangement, predict a low Fe/Hf value.',
            'logic': 'count',
            'smarts': [hydroxyl_group],
            'count_threshold': 2,
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers with fluorinated aliphatic chains predict a low Fe/Hf value.',
            'logic': 'count',
            'smarts': [fluorinated_chain],
            'count_threshold': 1,
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers containing carbonyl groups (aldehydes or ketones) adjacent to the carboxylic acid group predict a low Fe/Hf value.',
            'logic': 'and',
            'smarts': [adjacent_carbonyl],
            'prediction': -1
        },

    ]

    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        if 'smarts' in rule:
            for smarts in rule['smarts']:
                if isinstance(smarts, list):
                    compiled_subpatterns = [Chem.MolFromSmarts(s) for s in smarts]
                    compiled_patterns.append(compiled_subpatterns)
                else:
                    compiled_patterns.append(Chem.MolFromSmarts(smarts))
            rule['compiled_patterns'] = compiled_patterns

        # Compile exclude patterns if any
        if 'exclude' in rule:
            compiled_excludes = [Chem.MolFromSmarts(s) for s in rule['exclude']]
            rule['compiled_exclude'] = compiled_excludes

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = False
                # Handle logic for the rule
                if rule['logic'] == 'and':
                    match = True
                    for pat in rule['compiled_patterns']:
                        if isinstance(pat, list):
                            # Multiple patterns, match any
                            sub_match = False
                            for subpat in pat:
                                if mol.HasSubstructMatch(subpat):
                                    sub_match = True
                                    break
                            if not sub_match:
                                match = False
                                break
                        else:
                            if not mol.HasSubstructMatch(pat):
                                match = False
                                break
                elif rule['logic'] == 'or':
                    for pat in rule['compiled_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = True
                            break
                elif rule['logic'] == 'and_exclude':
                    match = True
                    for pat in rule['compiled_patterns']:
                        if not mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if match:
                        for excl_pat in rule['compiled_exclude']:
                            if mol.HasSubstructMatch(excl_pat):
                                match = False
                                break
                elif rule['logic'] == 'count':
                    count = 0
                    for pat in rule['compiled_patterns']:
                        count += len(mol.GetSubstructMatches(pat))
                    if count >= rule['count_threshold']:
                        match = True
                elif rule['logic'] == 'custom_rule1':
                    # Implement the specific logic for Rule 1
                    # Check for terminal primary amine
                    amine_matches = mol.GetSubstructMatches(rule['compiled_patterns'][0])
                    # Check for carboxylic acid
                    acid_matches = mol.GetSubstructMatches(rule['compiled_patterns'][1])
                    if amine_matches and acid_matches:
                        nitrogen_idxs = [match[0] for match in amine_matches]
                        carboxyl_carbon_idxs = [match[0] for match in acid_matches]
                        for n_idx in nitrogen_idxs:
                            for c_idx in carboxyl_carbon_idxs:
                                # Find shortest path between N and C of COOH
                                path = Chem.rdmolops.GetShortestPath(mol, n_idx, c_idx)
                                # Exclude N and C from the count
                                if len(path) < 4:  # Need at least two carbons between N and C
                                    continue
                                # Check that the path is aliphatic chain: carbons connected via single bonds, no heteroatoms
                                aliphatic_chain = True
                                for i in range(len(path)-1):
                                    atom1 = mol.GetAtomWithIdx(path[i])
                                    atom2 = mol.GetAtomWithIdx(path[i+1])
                                    bond = mol.GetBondBetweenAtoms(path[i], path[i+1])
                                    if bond.GetBondType() != Chem.rdchem.BondType.SINGLE:
                                        aliphatic_chain = False
                                        break
                                    if atom1.GetAtomicNum() != 6 or atom2.GetAtomicNum() !=6:
                                        if i != 0 and i != len(path)-2:
                                            # Exclude the terminal atoms (N and C), but internal atoms must be carbons
                                            aliphatic_chain = False
                                            break
                                if aliphatic_chain:
                                    # Check that there are at least two carbons in the path between N and carboxyl C
                                    carbon_count = sum(1 for idx in path[1:-1] if mol.GetAtomWithIdx(idx).GetAtomicNum() ==6)
                                    if carbon_count >= 2:
                                        match = True
                                        break
                            if match:
                                break
                elif rule['logic'] == 'custom_rule5':
                    # Implement logic for Rule 5, check for chelation possibility
                    # The amino or ether group should be positioned to allow chelation with the carboxylic acid
                    # For simplicity, let's check if the amino or ether group is within 3 bonds of the carboxylic acid
                    has_amino = mol.HasSubstructMatch(rule['compiled_patterns'][0])
                    has_ether = mol.HasSubstructMatch(rule['compiled_patterns'][1])
                    has_acid = mol.HasSubstructMatch(rule['compiled_patterns'][2])
                    if has_acid and (has_amino or has_ether):
                        # Get the atom indices
                        acid_matches = mol.GetSubstructMatches(rule['compiled_patterns'][2])
                        func_group_matches = []
                        if has_amino:
                            func_group_matches.extend(mol.GetSubstructMatches(rule['compiled_patterns'][0]))
                        if has_ether:
                            func_group_matches.extend(mol.GetSubstructMatches(rule['compiled_patterns'][1]))
                        # Check distances
                        match = False
                        for acid_match in acid_matches:
                            acid_idx = acid_match[0]
                            for group_match in func_group_matches:
                                group_idx = group_match[0]
                                path_len = Chem.rdmolops.GetShortestPath(mol, acid_idx, group_idx)
                                if len(path_len) <= 4:  # At most 3 bonds apart
                                    match = True
                                    break
                            if match:
                                break
                else:
                    match = False

                row.append(rule['prediction'] if match else 0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df