def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    primary_amino = '[NX3;H2]'
    secondary_amino = '[NX3;H1][#6]'
    thiol = '[SX2H]'
    thioether = '[#16X2]([#6])[#6]'
    halogen = '[F,Cl,Br,I]'
    nitro_group = '[NX3](=O)[OX1]'
    hydroxyl_group = '[OX2H]'
    ether_linkage = '[#6][OX2][#6]'
    pyridine_ring = 'n1ccccc1'
    aromatic_c_oh = '[c][OX2H]'
    aromatic_c_nh2 = '[c][NX3;H2]'
    aromatic_c_ch3 = '[c][CH3]'
    amide_adjacent_aromatic = '[c][CX3](=O)[NX3]'

    fused_aromatic_rings = '[*;r5,r6;!r3,r4]1~[*;r5,r6;!r3,r4]~[*;r5,r6;!r3,r4]~[*;r5,r6;!r3,r4]~[*;r5,r6;!r3,r4]~1[*;r5,r6]'

    # Define the rules
    rules = [
        {
            'number': 1,
            'description': 'High Fe/Hf (True): Modifiers containing both amino (-NH2) and carboxyl (-COOH) groups, particularly in amino acids.',
            'patterns': [
                ['[NX3;H2]'],       # Amino group
                ['[CX3](=O)[OX2H1]']  # Carboxylic acid group
            ],
            'exclude_patterns': [
                ['[NX3;H2][a]']  # Exclude amino group attached to aromatic
            ],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'High Fe/Hf (True): Modifiers containing sulfur-functional groups such as thiol (-SH) or thioether (-S-) and carboxyl (-COOH) groups.',
            'patterns': [
                ['[SX2H]', '[#16X2]([#6])[#6]'],  # Thiol or thioether
                ['[CX3](=O)[OX2H1]']  # Carboxyl group
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'High Fe/Hf (True): Modifiers that are aromatic carboxylic acids with electron-withdrawing groups attached to the aromatic ring.',
            'patterns': [
                ['[c][CX3](=O)[OX2H1]'],  # Aromatic carboxylic acid
                ['[c][F,Cl,Br,I]', '[c][NX3](=O)[OX1]', 'n1ccccc1']  # EWG attached to aromatic ring
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'High Fe/Hf (True): Modifiers containing flexible polyether chains with ether linkages and a terminal carboxyl (-COOH) or amino (-NH2) group.',
            'patterns': [
                ['[#6][OX2][#6]'],  # Ether linkage
                ['[CX3](=O)[OX2H1]', '[NX3;H2]']  # Carboxyl or amino group
            ],
            'count_threshold': {'[#6][OX2][#6]': 2},  # At least two ether linkages
            'prediction': 1
        },
        {
            'number':5,
            'description':'High Fe/Hf (True): Modifiers combining multiple coordinating groups (amino, carboxyl, amide, hydroxyl).',
            'patterns': [
                ['[NX3;H2]', '[CX3](=O)[OX2H1]', '[CX3](=O)[NX3;H2,H1][#6]', '[OX2H]'],  # At least two different coordinating groups
            ],
            'count_threshold_groups': 2,  # At least two different groups must be present
            'prediction':1
        },
        {
            'number': 6,
            'description': 'Low Fe/Hf (False): Simple aliphatic carboxylic acids without additional donor groups.',
            'patterns': [
                ['[CX3](=O)[OX2H1]']  # Carboxyl group
            ],
            'exclude_patterns': [
                ['[NX3]'],       # Exclude amines
                ['[S]'],         # Exclude sulfur groups
                ['[#6][OX2][#6]'], # Exclude ether linkages
                ['[F,Cl,Br,I]'], # Exclude halogens
                ['[a]']          # Exclude aromatic systems
            ],
            'prediction': -1
        },
        {
            'number':7,
            'description':'Low Fe/Hf (False): Aromatic carboxylic acids with electron-donating groups attached to aromatic ring.',
            'patterns': [
                ['[c][CX3](=O)[OX2H1]'],  # Aromatic carboxylic acid
                ['[c][NX3;H2]', '[c][OX2H]', '[c][CH3]']  # EDG attached to aromatic ring
            ],
            'prediction': -1
        },
        {
            'number':8,
            'description':'Low Fe/Hf (False): Modifiers containing multiple hydroxyl (-OH) groups on aliphatic chains (polyols).',
            'patterns': [
                ['[CX4][OX2H]']  # Aliphatic hydroxyl group
            ],
            'count_threshold': {'[CX4][OX2H]':2},  # At least two hydroxyl groups
            'prediction': -1
        },
        {
            'number':9,
            'description':'Low Fe/Hf (False): Modifiers containing fluorinated alkyl chains or multiple fluorine atoms.',
            'patterns': [
                ['[CX4][F]']  # Carbon with fluorine
            ],
            'count_threshold': {'[CX4][F]':2},  # At least two fluorine atoms
            'prediction': -1
        },
        {
            'number':10,
            'description':'Low Fe/Hf (False): Modifiers with conjugated carbonyl groups adjacent to carboxyl groups.',
            'patterns': [
                ['[CX3](=O)[OX2H1]'],  # Carboxyl group
                ['[c][CX3](=O)[#6]']  # Conjugated carbonyl group on aromatic ring
            ],
            'prediction': -1
        },
        {
            'number':11,
            'description':'Modifiers containing nitrogen heterocycles directly attached to carboxyl group (Low Fe/Hf), or with a spacer (High Fe/Hf).',
            'patterns': [
                ['[n][CX3](=O)[OX2H1]']  # Nitrogen heterocycle directly attached to carboxyl group
            ],
            'prediction': -1
        },
        {
            'number':11.1,
            'description':'Modifiers containing nitrogen heterocycles connected via spacer to carboxyl group (High Fe/Hf).',
            'patterns': [
                ['[n][CX4][CX3](=O)[OX2H1]']  # Nitrogen heterocycle connected via spacer to carboxyl group
            ],
            'prediction': 1
        },
        {
            'number':12,
            'description':'Low Fe/Hf (False): Modifiers with bulky aromatic side groups (e.g., indole).',
            'patterns': [
                ['[nH]1c2ccccc2cc1', 'c1cc2c(cc1)oc2']  # Indole or benzofuran
            ],
            'prediction': -1
        }
    ]

    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(p) for p in group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for group in rule['exclude_patterns']:
                compiled_group = [Chem.MolFromSmarts(p) for p in group]
                compiled_excludes.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_excludes

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Special case for Rule 5 requiring count of groups
                if rule.get('number') == 5:
                    group_matches = 0
                    matched_groups = set()
                    for pattern in rule['compiled_patterns'][0]:
                        if mol.HasSubstructMatch(pattern):
                            matched_groups.add(pattern)
                    if len(matched_groups) >= rule['count_threshold_groups']:
                        row.append(rule['prediction'])
                    else:
                        row.append(0)
                    continue
                # Special handling for count thresholds
                if 'count_threshold' in rule:
                    pattern_counts = {}
                    for idx, compiled_group in enumerate(rule['compiled_patterns']):
                        group_match = False
                        for pat in compiled_group:
                            matches = mol.GetSubstructMatches(pat)
                            count_required = rule['count_threshold'].get(pat.GetSmarts(), 1)
                            if len(matches) >= count_required:
                                group_match = True
                                break
                        if not group_match:
                            match = False
                            break
                    if match:
                        row.append(rule['prediction'])
                    else:
                        row.append(0)
                    continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        if mol.HasSubstructMatch(pat):
                            group_match = True
                            break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                # print(f"Error processing rule {rule['number']} for SMILES {smi}: {e}")
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df
