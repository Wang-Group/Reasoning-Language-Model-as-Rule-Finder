def rule2matrix(smiles_list):
    import pandas as pd
    from rdkit import Chem
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Rule 1a: Para-substituted benzoic acids with electron-withdrawing groups result in a high Fe/Hf ratio.',
            'patterns': [
                ['[c]1ccc(cc1)C(=O)[OH]'],  # Benzoic acid
                ['[c][F,Cl,Br,I]', '[c][N+](=O)[O-]', '[c][SH]', '[c]n1ccccc1']  # Halogen, nitro, sulfanyl, pyridyl
            ],
            'prediction': 1
        },
        {
            'number': 1.1,
            'description': 'Rule 1b: Para-substituted benzoic acids with electron-donating groups result in a low Fe/Hf ratio.',
            'patterns': [
                ['[c]1ccc(cc1)C(=O)[OH]'],  # Benzoic acid
                ['[c][NH2]', '[c][OH]', '[c][CH3]', '[c][OCH3]']  # Amino, hydroxy, methyl, methoxy
            ],
            'prediction': -1
        },
        {
            'number': 2,
            'description': 'Rule 2a: Molecules with amino groups located three or more carbons away from a carboxylic acid group result in a high Fe/Hf ratio.',
            'patterns': [
                ['[CX4][CX4][CX4][NX3;H2,H1;!$(N-C=O)]'],  # Amino group three or more carbons away
                ['[CX3](=O)[OX1H0-,OX2H1]']  # Carboxylic acid
            ],
            'prediction': 1
        },
        {
            'number': 2.1,
            'description': 'Rule 2b: Molecules with pyridine rings attached via alkyl or aryl linkers to carboxylic acid groups result in a high Fe/Hf ratio.',
            'patterns': [
                ['[n]1ccccc1'],  # Pyridine ring
                ['[CX3](=O)[OX1H0-,OX2H1]']  # Carboxylic acid
            ],
            'prediction': 1
        },
        {
            'number': 2.2,
            'description': 'Rule 2c: Molecules with pyridine rings directly attached to carboxylic acid groups result in a low Fe/Hf ratio.',
            'patterns': [
                ['[n]1ccccc1C(=O)[OH]']  # Pyridine ring directly attached to carboxylic acid
            ],
            'prediction': -1
        },
        {
            'number': 3,
            'description': 'Rule 3: Thiol (-SH) containing molecules result in a high Fe/Hf ratio.',
            'patterns': [
                ['[SX2H]']  # Thiol group
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Rule 4: Hydroxyl-rich molecules (polyols) result in a low Fe/Hf ratio.',
            'patterns': [
                ['[OX2H]']  # Hydroxyl group
            ],
            'count_threshold': {'[OX2H]': 2},
            'prediction': -1
        },
        {
            'number': 5,
            'description': 'Rule 5a: Molecules with ether linkages connected to terminal carboxylic acid groups result in a high Fe/Hf ratio.',
            'patterns': [
                ['[CX4][OX2][CX4]'],  # Ether linkage
                ['[CX3](=O)[OX2H1,OX1-]']  # Carboxylic acid
            ],
            'prediction': 1
        },
        {
            'number': 5.1,
            'description': 'Rule 5b: Molecules with terminal hydroxy groups on aliphatic chains result in a high Fe/Hf ratio.',
            'patterns': [
                ['[#6][OX2H]'],  # Terminal hydroxyl group
                ['[CX3](=O)[OX2H1,OX1-]']  # Carboxylic acid
            ],
            'prediction': 1
        },
        {
            'number': 5.2,
            'description': 'Rule 5c: Simple aliphatic carboxylic acids without additional functional groups result in a low Fe/Hf ratio.',
            'patterns': [
                ['[CX3](=O)[OX2H1,OX1-]']  # Carboxylic acid
            ],
            'exclude_patterns': [
                ['[OX2H]', '[NX3;H2,H1]', '[SX2H]']  # Exclude if hydroxyl, amino, or thiol groups are present
            ],
            'prediction': -1
        },
        {
            'number': 6,
            'description': 'Rule 6: Aromatic molecules with carbonyl groups adjacent to the ring result in a low Fe/Hf ratio.',
            'patterns': [
                ['[c][CX3](=O)[#6]']  # Carbonyl group adjacent to aromatic ring
            ],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Rule 7: Perfluorinated alkyl chains result in a low Fe/Hf ratio.',
            'patterns': [
                ['[CX4]([F])([F])([F])[F]']  # Tetra-fluorinated carbon (approximation)
            ],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Rule 8a: Amino acids with non-polar aromatic side chains result in a high Fe/Hf ratio.',
            'patterns': [
                ['[NX3;H2][CX4][CX3](=O)[OX1-,OX2H1]', '[CX4][c]']  # Amino acid with aromatic side chain
            ],
            'prediction': 1
        },
        {
            'number': 8.1,
            'description': 'Rule 8b: Amino acids with polar aromatic side chains result in a low Fe/Hf ratio.',
            'patterns': [
                ['[NX3;H2][CX4][CX3](=O)[OX1-,OX2H1]', '[c][OX2H]']  # Amino acid with polar aromatic side chain
            ],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Rule 9: Molecules with ether and amino functionalities result in a high Fe/Hf ratio.',
            'patterns': [
                ['[CX4][OX2][CX4]', '[NX3;H2,H1]']  # Ether linkage and amino group
            ],
            'prediction': 1
        },
        {
            'number': 10,
            'description': 'Rule 10: Molecules lacking strong coordinating groups result in a low Fe/Hf ratio.',
            'patterns': [
                ['[CX3](=O)[OX1-,OX2H1]']  # Carboxylic acid
            ],
            'exclude_patterns': [
                ['[NX3;H2,H1]', '[OX2H]', '[SX2H]', '[NX2]=[NX2]']  # Exclude if N, OH, SH, or azo groups are present
            ],
            'prediction': -1
        }
    ]

    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(pat) for pat in group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for group in rule['exclude_patterns']:
                compiled_group = [Chem.MolFromSmarts(pat) for pat in group]
                compiled_excludes.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_excludes

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        matches = mol.GetSubstructMatches(pat)
                        if matches:
                            # If a count threshold is specified for this pattern
                            if 'count_threshold' in rule and pat.GetSmarts() in rule['count_threshold']:
                                threshold = rule['count_threshold'][pat.GetSmarts()]
                                if len(matches) >= threshold:
                                    group_match = True
                                    break
                            else:
                                group_match = True
                                break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df