def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    
    # Carboxylic acid group (-COOH)
    carboxylic_acid = ['[CX3](=O)[OX2H1]', '[CX3](=O)[O-]']
    
    # Primary aliphatic amine (-NH2)
    primary_aliphatic_amine = '[NX3;H2][C;!$([C]=[O,N,S])]'  # Nitrogen with two hydrogens attached to carbon not double bonded
    
    # Thiol group (-SH)
    thiol_group = '[SX2H][C;!$([C]=[O,N,S])]'  # Sulfur with one hydrogen attached to sp3 carbon
    
    # Aromatic atom
    aromatic_atom = '[a]'
    
    # Nitro group attached to aromatic ring at para position
    nitro_para = '[c][c](N(=O)=O)[c][c][c][CX3](=O)[OX1H0-,OX2H1]'
    
    # Bromomethyl group attached to aromatic ring at para position
    bromomethyl_para = '[c][c](CBr)[c][c][c][CX3](=O)[OX1H0-,OX2H1]'
    
    # Sulfhydryl group attached to aromatic ring at para position
    sulfhydryl_para = '[c][c](S)[c][c][c][CX3](=O)[OX1H0-,OX2H1]'
    
    # Electron-donating groups (EDGs) at para position on aromatic ring
    amino_para = '[c][c](Nc)[c][c][c][CX3](=O)[OX1H0-,OX2H1]'
    hydroxy_para = '[c][c](Oc)[c][c][c][CX3](=O)[OX1H0-,OX2H1]'
    methyl_para = '[c][c](C)[c][c][c][CX3](=O)[OX1H0-,OX2H1]'
    
    # Aromatic carboxylic acid
    aromatic_carboxylic_acid = '[c][CX3](=O)[OX1H0-,OX2H1]'
    
    # Aromatic nitrogen heterocycle connected via linker to carboxylic acid
    aromatic_nitrogen_heterocycle = '[n][C][C][C][CX3](=O)[OX1H0-,OX2H1]'
    
    # Polyether chain with ethylene glycol units (-OCCO-)
    polyether_chain = '[OX2][CH2][CH2][OX2][CH2][CH2][OX2]'
    
    # Additional amino group
    additional_amino_group = '[NX3;H2,H1][C;!$([C]=[O,N,S])]'  # Aliphatic amine
    
    # Alpha-amino acid
    alpha_amino_acid = '[NX3;H2][CX4H]([#6])[CX3](=O)[OX1H0-,OX2H1]'
    
    # Bulky side chains to be excluded
    bulky_side_chains = ['[CX4][CH2][c]1[cH][nH][cH][cH][c]1',  # Indole ring (tryptophan)
                         '[CX4][CH2][CH2][C](=O)[OX1H0-,OX2H1]']  # Glutamic acid side chain
    
    # Multiple hydroxyl groups (polyhydroxy compounds)
    multiple_hydroxyls = '[OX2H][CX4H][OX2H]'
    
    # Perfluoroalkyl chain
    perfluoroalkyl_chain = '[CX4]([F])([F])[F]'
    
    # Conjugated carbonyl group on aromatic ring
    conjugated_carbonyl = '[c][CX3](=O)[#6]'
    
    # Multiple EWGs within conjugated system
    multiple_EWG_conjugated = '[CX3](=O)[CX3](=O)[c]'
    
    # Aliphatic hydroxy acid with single hydroxyl group on medium-length chain
    aliphatic_hydroxy_acid = '[OX2H][CH2][CH2][CH2][CX3](=O)[OX1H0-,OX2H1]'
    
    # Compile patterns for each rule
    rules = [
        {
            'number': 1,
            'description': 'High Fe/Hf Value (True): Modifiers that are aliphatic carboxylic acids with a terminal primary amino group (-NH₂) or sulfhydryl group (-SH).',
            'patterns': [
                carboxylic_acid,  # Carboxylic acid group
                [primary_aliphatic_amine, thiol_group]  # Primary aliphatic amine or thiol group
            ],
            'exclude_patterns': [aromatic_atom],  # Exclude aromatic atoms
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'High Fe/Hf Value (True): Modifiers that are aromatic carboxylic acids with electron-withdrawing groups (EWGs) at the para position.',
            'patterns': [
                [nitro_para, bromomethyl_para, sulfhydryl_para]
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'High Fe/Hf Value (True): Modifiers containing aromatic nitrogen heterocycles connected via flexible linkers to a carboxylic acid.',
            'patterns': [
                aromatic_nitrogen_heterocycle
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'High Fe/Hf Value (True): Modifiers that are carboxylic acids with flexible polyether chains and additional coordinating groups (e.g., amino groups).',
            'patterns': [
                carboxylic_acid,
                polyether_chain,
                additional_amino_group
            ],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'High Fe/Hf Value (True): Modifiers that are α-amino acids with small to moderate-sized hydrophobic or aromatic side chains.',
            'patterns': [
                alpha_amino_acid
            ],
            'exclude_patterns': bulky_side_chains,  # Exclude bulky side chains
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Low Fe/Hf Value (False): Modifiers that are aromatic carboxylic acids with electron-donating groups (EDGs) at the para position.',
            'patterns': [
                [amino_para, hydroxy_para, methyl_para]
            ],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Low Fe/Hf Value (False): Modifiers containing multiple hydroxyl groups (polyhydroxy compounds).',
            'patterns': [
                multiple_hydroxyls
            ],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Low Fe/Hf Value (False): Modifiers containing perfluoroalkyl chains.',
            'patterns': [
                perfluoroalkyl_chain
            ],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Low Fe/Hf Value (False): Modifiers that are simple aliphatic carboxylic acids without additional coordinating functional groups.',
            'patterns': [
                carboxylic_acid
            ],
            'exclude_patterns': [
                '[NX3]',  # Exclude amine groups
                '[OX2H]',  # Exclude hydroxyl groups
                '[SX2H,SX2]'  # Exclude sulfur groups
            ],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'High Fe/Hf Value (True): Modifiers containing multiple electron-withdrawing groups within a conjugated system.',
            'patterns': [
                multiple_EWG_conjugated
            ],
            'prediction': 1
        },
        {
            'number': 11,
            'description': 'Low Fe/Hf Value (False): Modifiers that are aromatic carboxylic acids with carbonyl groups conjugated to the aromatic ring.',
            'patterns': [
                aromatic_carboxylic_acid,
                conjugated_carbonyl
            ],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'High Fe/Hf Value (True): Modifiers that are aliphatic hydroxy acids with a single hydroxyl group on a medium-length carbon chain.',
            'patterns': [
                aliphatic_hydroxy_acid
            ],
            'exclude_patterns': [
                '[OX2H][CX4][OX2H]'  # Exclude multiple hydroxyl groups
            ],
            'prediction': 1
        }
    ]
    
    # Compile patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            if isinstance(group, list):
                compiled_group = [Chem.MolFromSmarts(pat) for pat in group]
            else:
                compiled_group = [Chem.MolFromSmarts(group)]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for pat in rule['exclude_patterns']:
                compiled_excludes.append(Chem.MolFromSmarts(pat))
            rule['compiled_exclude_patterns'] = compiled_excludes
    
    # Process each SMILES string
    results = []
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'compiled_exclude_patterns' in rule:
                    for pat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        if mol.HasSubstructMatch(pat):
                            group_match = True
                            break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df
