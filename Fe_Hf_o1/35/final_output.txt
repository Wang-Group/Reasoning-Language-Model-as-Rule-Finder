
    Target Name: Fe/Hf
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: **Modifiers containing an aliphatic chain with a terminal amino group (-NH₂) and a carboxylic acid group (-COOH) tend to have a high Fe/Hf value (`Fe/Hf_high_or_low_value = True`).**  
  *Examples*:  
  - **5-aminopentanoic acid**  
  - **7-aminoheptanoic acid**  
  - **8-aminooctanoic acid**  

- **Rule 2**: **Modifiers with a thiol group (-SH) attached to either an aliphatic chain or an aromatic ring tend to have a high Fe/Hf value (`Fe/Hf_high_or_low_value = True`).**  
  *Examples*:  
  - **3-sulfanylpropanoic acid**  
  - **4-sulfanylbenzoic acid**  

- **Rule 3**: **Modifiers containing electron-withdrawing groups (e.g., nitro (-NO₂), bromo (-Br)) on an aromatic ring with a carboxylic acid group tend to have a high Fe/Hf value (`Fe/Hf_high_or_low_value = True`).**  
  *Examples*:  
  - **4-nitrobenzoic acid**  
  - **4-(bromomethyl)benzoic acid**  

- **Rule 4**: **Modifiers with an aromatic ring bearing electron-donating groups (e.g., hydroxy (-OH), methoxy (-OCH₃)) and a carboxylic acid group tend to have a low Fe/Hf value (`Fe/Hf_high_or_low_value = False`).**  
  *Examples*:  
  - **4-hydroxybenzoic acid**  
  - **5-(4-hydroxyphenyl)pentanoic acid**  
  - **3-(4-hydroxyphenyl)propanoic acid**

- **Rule 5**: **Modifiers that are aliphatic carboxylic acids without additional functional groups tend to have a low Fe/Hf value (`Fe/Hf_high_or_low_value = False`).**  
  *Example*:  
  - **Octanoic acid**

- **Rule 6**: **Modifiers containing a pyridine ring attached via an aliphatic linker to a carboxylic acid group tend to have a high Fe/Hf value (`Fe/Hf_high_or_low_value = True`).**  
  *Examples*:  
  - **4-pyridin-4-ylbutanoic acid**  
  - **4-pyridin-4-ylbenzoic acid**

- **Rule 7**: **Modifiers with pyridine rings directly attached to the carboxylic acid group tend to have a low Fe/Hf value (`Fe/Hf_high_or_low_value = False`).**  
  *Example*:  
  - **Pyridine-3-carboxylic acid**

- **Rule 8**: **Modifiers containing multiple hydroxyl groups (polyhydroxylated compounds) tend to have a low Fe/Hf value (`Fe/Hf_high_or_low_value = False`).**  
  *Example*:  
  - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid**

- **Rule 9**: **Modifiers with long aliphatic chains terminating in a hydroxy (-OH) group and a carboxylic acid group tend to have a high Fe/Hf value (`Fe/Hf_high_or_low_value = True`).**  
  *Example*:  
  - **7-hydroxyheptanoic acid**

- **Rule 10**: **Modifiers that are amino acids with side chains containing aromatic rings without electron-donating groups tend to have a high Fe/Hf value (`Fe/Hf_high_or_low_value = True`).**  
  *Example*:  
  - **(2S)-2-amino-3-phenylpropanoic acid (Phenylalanine)**

- **Rule 11**: **Modifiers that are amino acids with side chains containing aromatic rings with electron-donating groups (e.g., indole, hydroxyphenyl) tend to have a low Fe/Hf value (`Fe/Hf_high_or_low_value = False`).**  
  *Examples*:  
  - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid (Tryptophan)**  
  - **(2S)-2-amino-3-(4-hydroxyphenyl)propanoic acid (Tyrosine)**

- **Rule 12**: **Modifiers containing ether linkages with terminal amino groups and a carboxylic acid group tend to have a high Fe/Hf value (`Fe/Hf_high_or_low_value = True`).**  
  *Example*:  
  - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**

- **Rule 13**: **Modifiers with fluorinated alkyl chains tend to have a low Fe/Hf value (`Fe/Hf_high_or_low_value = False`).**  
  *Example*:  
  - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**

- **Rule 14**: **Modifiers with carbonyl groups (aldehyde or ketone) on the aromatic ring tend to have a low Fe/Hf value (`Fe/Hf_high_or_low_value = False`).**  
  *Examples*:  
  - **4-formylbenzoic acid**  
  - **5-formyl-2-hydroxybenzoic acid**

- **Rule 15**: **Modifiers containing sulfur in the side chain as a thioether (-S-) linked to an aliphatic chain tend to have a high Fe/Hf value (`Fe/Hf_high_or_low_value = True`).**  
  *Example*:  
  - **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid**

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,1,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,1
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0
0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,1,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.7428571428571429; Test Accuracy: 1.0
    Train Support: 0.12571428571428572; Test Support: 0.2
    Train Confidence: 0.8914285714285715; Test Confidence: 0.6
    Train Lift: 1.7758169934640524; Test Lift: NONE
    Train Leverage: 0.05077551020408164; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    
    # Primary aliphatic amine group (-NH2)
    primary_aliphatic_amine = '[NX3;H2][CX4]'
    
    # Thiol group (-SH)
    thiol_group = '[SX2H]'
    
    # Thioether group (-S-)
    thioether_group = '[#6][SX2][#6]'
    
    # Halogens on aromatic ring
    halogen_on_aromatic_ring = '[c][F,Cl,Br,I]'
    
    # Nitro group on aromatic ring
    nitro_on_aromatic_ring = '[c][NX3+(=O)[O-]]'
    
    # Electron-withdrawing groups on aromatic ring
    ewg_on_aromatic_ring = [halogen_on_aromatic_ring, nitro_on_aromatic_ring]
    
    # Hydroxyl group (-OH) on aromatic ring
    hydroxy_on_aromatic_ring = '[c][OX2H]'
    
    # Methoxy group (-OCH3) on aromatic ring
    methoxy_on_aromatic_ring = '[c][OX2][CH3]'
    
    # Electron-donating groups on aromatic ring
    edg_on_aromatic_ring = [hydroxy_on_aromatic_ring, methoxy_on_aromatic_ring]
    
    # Exclusion patterns
    exclude_aromatic = '[a]'
    exclude_amines = '[NX3]'
    exclude_sulfur = '[SX2,SX3]'
    exclude_ethers = '[#6][OX2][#6]'
    
    # Pyridine ring attached via an aliphatic linker
    pyridine_with_linker = '[#6]-n1ccccc1'
    
    # Pyridine ring directly attached to carboxylic acid group
    pyridine_carboxylic_acid = 'n[cX3](=O)[OX2H1]'
    
    # Multiple hydroxyl groups (polyols)
    hydroxyl_group = '[OX2H]'
    
    # Long aliphatic chain terminating in hydroxy (-OH) and carboxylic acid group
    hydroxy_alkyl_carboxylic_acid = '[OX2H][CH2][CH2][CH2][CH2][CX3](=O)[OX2H1]'
    
    # Amino acid with side chain containing aromatic ring without EDGs
    amino_acid_aromatic_side_chain = '[NX3;H2][CX4][CX4][c]'
    
    # Fluorinated alkyl chain
    fluorinated_alkyl_chain = '[CX4]([F])[F]'
    
    # Carbonyl groups (aldehyde or ketone) on aromatic ring
    aromatic_carbonyl = '[c][CX3](=O)[#6]'
    
    # Define the rules
    rules = [
        {
            'number': 1,
            'description': 'High Fe/Hf Value: Modifiers containing an aliphatic chain with a terminal amino group (-NH2) and a carboxylic acid group (-COOH).',
            'patterns': [
                primary_aliphatic_amine,
                carboxylic_acid
            ],
            'exclude_patterns': [exclude_aromatic],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'High Fe/Hf Value: Modifiers with a thiol group (-SH) attached to either an aliphatic chain or an aromatic ring.',
            'patterns': [
                thiol_group
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'High Fe/Hf Value: Modifiers containing electron-withdrawing groups (e.g., nitro, bromo) on an aromatic ring with a carboxylic acid group.',
            'patterns': [
                ewg_on_aromatic_ring,
                carboxylic_acid
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Low Fe/Hf Value: Modifiers with aromatic ring bearing electron-donating groups (e.g., hydroxy, methoxy) and a carboxylic acid group.',
            'patterns': [
                edg_on_aromatic_ring,
                carboxylic_acid
            ],
            'prediction': -1
        },
        {
            'number': 5,
            'description': 'Low Fe/Hf Value: Modifiers that are aliphatic carboxylic acids without additional functional groups.',
            'patterns': [
                carboxylic_acid
            ],
            'exclude_patterns': [
                exclude_aromatic,
                exclude_amines,
                exclude_sulfur,
                exclude_ethers
            ],
            'prediction': -1
        },
        {
            'number': 6,
            'description': 'High Fe/Hf Value: Modifiers containing a pyridine ring attached via an aliphatic linker to a carboxylic acid group.',
            'patterns': [
                pyridine_with_linker,
                carboxylic_acid
            ],
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'Low Fe/Hf Value: Modifiers with pyridine rings directly attached to the carboxylic acid group.',
            'patterns': [
                pyridine_carboxylic_acid
            ],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Low Fe/Hf Value: Modifiers containing multiple hydroxyl groups (polyhydroxylated compounds).',
            'patterns': [
                hydroxyl_group
            ],
            'count_threshold': 2,
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'High Fe/Hf Value: Modifiers with long aliphatic chains terminating in a hydroxy (-OH) group and a carboxylic acid group.',
            'patterns': [
                hydroxy_alkyl_carboxylic_acid
            ],
            'prediction': 1
        },
        {
            'number': 10,
            'description': 'High Fe/Hf Value: Modifiers that are amino acids with side chains containing aromatic rings without electron-donating groups.',
            'patterns': [
                amino_acid_aromatic_side_chain,
                carboxylic_acid
            ],
            'exclude_patterns': edg_on_aromatic_ring,
            'prediction': 1
        },
        {
            'number': 11,
            'description': 'Low Fe/Hf Value: Modifiers that are amino acids with side chains containing aromatic rings with electron-donating groups.',
            'patterns': [
                amino_acid_aromatic_side_chain,
                edg_on_aromatic_ring,
                carboxylic_acid
            ],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'High Fe/Hf Value: Modifiers containing ether linkages with terminal amino groups and a carboxylic acid group.',
            'patterns': [
                '[OX2][CX4][CX4][NX3;H2]',
                carboxylic_acid
            ],
            'prediction': 1
        },
        {
            'number': 13,
            'description': 'Low Fe/Hf Value: Modifiers with fluorinated alkyl chains.',
            'patterns': [
                fluorinated_alkyl_chain
            ],
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'Low Fe/Hf Value: Modifiers with carbonyl groups (aldehyde or ketone) on the aromatic ring.',
            'patterns': [
                aromatic_carbonyl
            ],
            'prediction': -1
        },
        {
            'number': 15,
            'description': 'High Fe/Hf Value: Modifiers containing sulfur in the side chain as a thioether (-S-) linked to an aliphatic chain.',
            'patterns': [
                thioether_group,
                carboxylic_acid
            ],
            'prediction': 1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for pat in rule.get('patterns', []):
            if isinstance(pat, list):
                compiled_group = [Chem.MolFromSmarts(p) for p in pat]
                compiled_patterns.append(compiled_group)
            else:
                compiled_patterns.append([Chem.MolFromSmarts(pat)])
        rule['compiled_patterns'] = compiled_patterns

        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for pat in rule['exclude_patterns']:
                if isinstance(pat, list):
                    compiled_group = [Chem.MolFromSmarts(p) for p in pat]
                    compiled_excludes.extend(compiled_group)
                else:
                    compiled_excludes.append(Chem.MolFromSmarts(pat))
            rule['compiled_exclude_patterns'] = compiled_excludes

    results = []

    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for pat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for idx, compiled_group in enumerate(rule['compiled_patterns']):
                    group_match = False
                    for pat in compiled_group:
                        matches = mol.GetSubstructMatches(pat)
                        if matches:
                            # Check count threshold if specified
                            if 'count_threshold' in rule:
                                threshold = rule['count_threshold']
                                if isinstance(threshold, dict):
                                    if idx in threshold:
                                        required_count = threshold[idx]
                                        if len(matches) >= required_count:
                                            group_match = True
                                            break
                                        else:
                                            group_match = False
                                            continue
                                    else:
                                        group_match = True
                                        break
                                else:
                                    if len(matches) >= threshold:
                                        group_match = True
                                        break
                                    else:
                                        group_match = False
                                        continue
                            else:
                                group_match = True
                                break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: Fe/Hf
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: **Modifiers that are aliphatic carboxylic acids with a terminal primary amino group (-NH₂) tend to have a high Fe/Hf value (`Fe/Hf_high_or_low_value = True`).**  
  *Examples*:  
  - **5-aminopentanoic acid**  
  - **7-aminoheptanoic acid**  
  - **8-aminooctanoic acid**  
  - **(2S)-2-aminobutanedioic acid (Aspartic acid)**  
  *Counter-example*:  
  - **(2S)-2-aminopentanedioic acid (Glutamic acid)** (`Fe/Hf_high_or_low_value = False`)  

- **Rule 2**: **Modifiers containing sulfur functional groups, such as thiol (-SH) or thioether (-S-), tend to have a high Fe/Hf value (`Fe/Hf_high_or_low_value = True`).**  
  *Examples*:  
  - **3-sulfanylpropanoic acid**  
  - **4-sulfanylbenzoic acid**  
  - **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid**

- **Rule 3**: **Modifiers containing aromatic rings with strong electron-withdrawing groups at the para position (e.g., nitro (-NO₂), bromo (-Br), sulfanyl (-SH)) attached to the ring with a carboxylic acid group tend to have a high Fe/Hf value (`Fe/Hf_high_or_low_value = True`).**  
  *Examples*:  
  - **4-nitrobenzoic acid**  
  - **4-(bromomethyl)benzoic acid**  
  - **4-sulfanylbenzoic acid**  
  *Counter-example*:  
  - **4-formylbenzoic acid** (`Fe/Hf_high_or_low_value = False`)

- **Rule 4**: **Modifiers containing aromatic rings with electron-donating groups (e.g., hydroxy (-OH), methoxy (-OCH₃)) without additional electron-withdrawing groups tend to have a low Fe/Hf value (`Fe/Hf_high_or_low_value = False`).**  
  *Examples*:  
  - **4-hydroxybenzoic acid**  
  - **3-(4-hydroxyphenyl)propanoic acid**  
  - **5-(4-hydroxyphenyl)pentanoic acid**  
  *Exception*:  
  - **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid** (`Fe/Hf_high_or_low_value = True`, due to additional ketone group)

- **Rule 5**: **Modifiers containing pyridine rings linked via an aliphatic chain to a carboxylic acid group tend to have a high Fe/Hf value (`Fe/Hf_high_or_low_value = True`).**  
  *Examples*:  
  - **4-pyridin-4-ylbutanoic acid**  
  - **4-pyridin-4-ylbenzoic acid**

- **Rule 6**: **Modifiers containing pyridine rings directly attached to the carboxylic acid group tend to have a low Fe/Hf value (`Fe/Hf_high_or_low_value = False`).**  
  *Example*:  
  - **Pyridine-3-carboxylic acid**

- **Rule 7**: **Modifiers that are polyhydroxylated aliphatic carboxylic acids tend to have a low Fe/Hf value (`Fe/Hf_high_or_low_value = False`).**  
  *Examples*:  
  - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid (Gluconic acid)**  
  - **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid**

- **Rule 8**: **Modifiers that are α-amino acids with nonpolar side chains containing an unsubstituted aromatic ring tend to have a high Fe/Hf value (`Fe/Hf_high_or_low_value = True`).**  
  *Example*:  
  - **(2S)-2-amino-3-phenylpropanoic acid (Phenylalanine)**

- **Rule 9**: **Modifiers that are α-amino acids with bulky or polar aromatic side chains tend to have a low Fe/Hf value (`Fe/Hf_high_or_low_value = False`).**  
  *Example*:  
  - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid (Tryptophan)**

- **Rule 10**: **Modifiers containing ether chains (polyether) with terminal amino groups and a carboxylic acid group tend to have a high Fe/Hf value (`Fe/Hf_high_or_low_value = True`).**  
  *Examples*:  
  - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**  
  - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**

- **Rule 11**: **Modifiers containing fused aromatic rings with electron-withdrawing groups tend to have a high Fe/Hf value (`Fe/Hf_high_or_low_value = True`).**  
  *Example*:  
  - **1,3-dioxo-2-benzofuran-5-carboxylic acid**

- **Rule 12**: **Modifiers with fluorinated alkyl chains tend to have a low Fe/Hf value (`Fe/Hf_high_or_low_value = False`).**  
  *Example*:  
  - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**

- **Rule 13**: **Modifiers with aldehyde or ketone groups attached directly to an aromatic ring tend to have a low Fe/Hf value (`Fe/Hf_high_or_low_value = False`).**  
  *Examples*:  
  - **4-formylbenzoic acid**  
  - **5-formyl-2-hydroxybenzoic acid**

- **Rule 14**: **Modifiers that are aliphatic carboxylic acids without additional functional groups or with short chain lengths tend to have a low Fe/Hf value (`Fe/Hf_high_or_low_value = False`).**  
  *Example*:  
  - **Octanoic acid**

- **Rule 15**: **Modifiers containing aliphatic carboxylic acids with a terminal hydroxy group (-OH) and a chain length of seven carbons or more tend to have a high Fe/Hf value (`Fe/Hf_high_or_low_value = True`).**  
  *Example*:  
  - **7-hydroxyheptanoic acid**

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6857142857142857; Test Accuracy: 1.0
    Train Support: 0.06857142857142857; Test Support: 0.2
    Train Confidence: 0.95; Test Confidence: 0.6
    Train Lift: 1.9101307189542485; Test Lift: NONE
    Train Leverage: 0.0316734693877551; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1]'
    
    # Primary amine group (-NH2)
    primary_amine = '[NX3;H2]'
    
    # Terminal primary amine connected to aliphatic chain
    terminal_primary_amine = '[NX3;H2][CH2]'
    
    # Aliphatic chain of variable length
    aliphatic_chain = '[CH2]'
    
    # Sulfur-containing groups
    thiol = '[SX2H]'
    thioether = '[#16X2][#6]'
    
    # Aromatic ring
    aromatic_ring = '[a]'
    
    # Electron-withdrawing groups (EWGs)
    nitro_group = '[NX3](=O)=O'
    bromo = '[Br]'
    sulfanyl = '[SH]'
    EWG_para = '[c][cX3](=[OX1])c([c][c][c])[F,Cl,Br,I,NX3](=O)=O'
    
    # Electron-donating groups (EDGs)
    hydroxy_group = '[OX2H]'
    methoxy_group = '[OX2][CH3]'
    
    # Pyridine ring linked via aliphatic chain to carboxylic acid
    pyridine_ring = 'n1ccccc1'
    
    # Polyhydroxylated aliphatic carboxylic acids
    polyhydroxyl = '[CX4H2][OX2H][CX4H][OX2H][CX4H][OX2H][CX3](=O)[OX1H]'  # Simplified pattern
    
    # Fused aromatic rings with EWGs
    fused_aromatic_EWG = '[a]1[a][a][a][a][a]1[C](=O)[OX1H0-,OX2H1]'
    
    # Fluorinated alkyl chains
    fluorinated_chain = '[CX4]([F,Cl,Br,I])[CX4]([F,Cl,Br,I])[CX4]([F,Cl,Br,I])[CX3](=O)[OX1H0-,OX2H1]'
    
    # Aldehyde or ketone attached directly to aromatic ring
    aldehyde_on_aromatic = '[c][CX3H0](=O)'
    ketone_on_aromatic = '[c][CX3](=O)[c]'
    
    # Long aliphatic chain carboxylic acids
    long_chain_acid = '[CH2][CH2][CH2][CH2][CH2][CH2][C](=O)[OX1H0-,OX2H1]'
    
    # Aliphatic carboxylic acids with terminal hydroxy group
    terminal_hydroxy_acid = '[CH2][CH2][CH2][CH2][CH2][CH2][OX2H][C](=O)[OX1H0-,OX2H1]'
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are aliphatic carboxylic acids with a terminal primary amino group (-NH2) tend to have a high Fe/Hf value.',
            'patterns': [
                primary_amine,  # Primary amine group
                carboxylic_acid,  # Carboxylic acid group
                '[#6]-[#7]',  # Carbon connected to nitrogen
                '[#6]-[#6]-[#6]-[#6]-[#6]',  # At least 5 carbons
            ],
            'logic': 'and',
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers containing sulfur functional groups, such as thiol (-SH) or thioether (-S-), tend to have a high Fe/Hf value.',
            'patterns': [
                [thiol, thioether],  # Thiol or thioether group
                carboxylic_acid  # Carboxylic acid group
            ],
            'logic': 'and',
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers containing aromatic rings with strong electron-withdrawing groups at the para position attached to the ring with a carboxylic acid group tend to have a high Fe/Hf value.',
            'patterns': [
                aromatic_ring,  # Aromatic ring
                '[c][c][c](C(=O)[OX1H0-,OX2H1])[c][c][c]',  # Aromatic ring with carboxylic acid
                '[c][c][c][c][c][c][F,Cl,Br,I,NX3](=O)=O'  # EWG at para position
            ],
            'logic': 'and',
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers containing aromatic rings with electron-donating groups (e.g., hydroxy (-OH), methoxy (-OCH3)) without additional electron-withdrawing groups tend to have a low Fe/Hf value.',
            'patterns': [
                aromatic_ring,
                '[c][OX2H]',  # Hydroxy group on aromatic ring
                carboxylic_acid
            ],
            'exclude_patterns': [
                '[c][F,Cl,Br,I,NX3](=O)=O'  # Exclude EWGs
            ],
            'logic': 'and',
            'prediction': -1
        },
        {
            'number': 5,
            'description': 'Modifiers containing pyridine rings linked via an aliphatic chain to a carboxylic acid group tend to have a high Fe/Hf value.',
            'patterns': [
                pyridine_ring,  # Pyridine ring
                '[#6]-[#6]-[#6]-[c]',  # Aliphatic chain linked to aromatic
                carboxylic_acid
            ],
            'logic': 'and',
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers containing pyridine rings directly attached to the carboxylic acid group tend to have a low Fe/Hf value.',
            'patterns': [
                pyridine_ring,  # Pyridine ring
                '[n][c][c][c][c][c](C(=O)[OX1H0-,OX2H1])'  # Pyridine directly attached to COOH
            ],
            'logic': 'and',
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Modifiers that are polyhydroxylated aliphatic carboxylic acids tend to have a low Fe/Hf value.',
            'patterns': [
                carboxylic_acid,
                '[#6][OX2H][#6][OX2H][#6][OX2H][#6]'  # Multiple hydroxyl groups
            ],
            'logic': 'and',
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Modifiers that are α-amino acids with nonpolar side chains containing an unsubstituted aromatic ring tend to have a high Fe/Hf value.',
            'patterns': [
                '[CX3](=O)[NX3;H][CX4][c]',  # α-Amino acid with aromatic side chain
                carboxylic_acid
            ],
            'logic': 'and',
            'prediction': 1
        },
        {
            'number': 9,
            'description': 'Modifiers that are α-amino acids with bulky or polar aromatic side chains tend to have a low Fe/Hf value.',
            'patterns': [
                '[CX3](=O)[NX3;H][CX4][c][c][n]',  # α-Amino acid with polar aromatic side chain
                carboxylic_acid
            ],
            'logic': 'and',
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers containing ether chains (polyether) with terminal amino groups and a carboxylic acid group tend to have a high Fe/Hf value.',
            'patterns': [
                '[OX2][CX4][OX2][CX4][NX3;H2]',  # Ether chain ending with amine
                carboxylic_acid
            ],
            'logic': 'and',
            'prediction': 1
        },
        {
            'number': 11,
            'description': 'Modifiers containing fused aromatic rings with electron-withdrawing groups tend to have a high Fe/Hf value.',
            'patterns': [
                fused_aromatic_EWG,  # Fused aromatic ring with COOH
                '[F,Cl,Br,I,NX3](=O)=O'  # EWGs
            ],
            'logic': 'and',
            'prediction': 1
        },
        {
            'number': 12,
            'description': 'Modifiers with fluorinated alkyl chains tend to have a low Fe/Hf value.',
            'patterns': [
                fluorinated_chain  # Fluorinated chain with COOH
            ],
            'logic': 'and',
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Modifiers with aldehyde or ketone groups attached directly to an aromatic ring tend to have a low Fe/Hf value.',
            'patterns': [
                aldehyde_on_aromatic,
                ketone_on_aromatic,
                carboxylic_acid
            ],
            'logic': 'and',
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'Modifiers that are aliphatic carboxylic acids without additional functional groups or with short chain lengths tend to have a low Fe/Hf value.',
            'patterns': [
                carboxylic_acid,
                '[CH2][CH2][CH2][CH2][CH2][CH2]'  # Long chain
            ],
            'exclude_patterns': [
                '[OX2H]', '[NX3;H2]', '[SX2H]', '[#8]', '[#7]',  # Exclude other functional groups
            ],
            'logic': 'and',
            'prediction': -1
        },
        {
            'number': 15,
            'description': 'Modifiers containing aliphatic carboxylic acids with a terminal hydroxy group (-OH) and a chain length of seven carbons or more tend to have a high Fe/Hf value.',
            'patterns': [
                terminal_hydroxy_acid  # Terminal hydroxy group with long chain
            ],
            'logic': 'and',
            'prediction': 1
        },
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for smarts in rule.get('patterns', []):
            if isinstance(smarts, list):
                compiled_group = [Chem.MolFromSmarts(s) for s in smarts]
                compiled_patterns.append(compiled_group)
            else:
                compiled_patterns.append(Chem.MolFromSmarts(smarts))
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for smarts in rule['exclude_patterns']:
                compiled_excludes.append(Chem.MolFromSmarts(smarts))
            rule['compiled_exclude_patterns'] = compiled_excludes
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for pat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for pat in rule['compiled_patterns']:
                    if isinstance(pat, list):
                        group_match = False
                        for p in pat:
                            if mol.HasSubstructMatch(p):
                                group_match = True
                                break
                        if not group_match:
                            match = False
                            break
                    else:
                        if not mol.HasSubstructMatch(pat):
                            match = False
                            break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: Fe/Hf
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

---

- **Rule 1**: **Modifiers that are aliphatic carboxylic acids with a terminal primary amino group (-NH₂) or sulfhydryl group (-SH) tend to have a high Fe/Hf value (`Fe/Hf_high_or_low_value = True`).**

  *Rationale*: Terminal amino and sulfhydryl groups act as strong coordinating sites for Fe(III), enhancing its incorporation into the catalyst.

  *Examples*:
    - **5-aminopentanoic acid**
    - **7-aminoheptanoic acid**
    - **8-aminooctanoic acid**
    - **3-sulfanylpropanoic acid**

  *Counter-example*:
    - **Octanoic acid** (lacks terminal -NH₂ or -SH; `Fe/Hf_high_or_low_value = False`)

---

- **Rule 2**: **Modifiers that are aromatic carboxylic acids with electron-withdrawing groups (EWGs) at the para position, such as nitro (-NO₂), bromomethyl (-CH₂Br), or sulfhydryl (-SH), tend to have a high Fe/Hf value (`Fe/Hf_high_or_low_value = True`).**

  *Rationale*: EWGs increase the acidity of the carboxyl group and enhance the molecule's ability to coordinate with Fe(III).

  *Examples*:
    - **4-nitrobenzoic acid**
    - **4-(bromomethyl)benzoic acid**
    - **4-sulfanylbenzoic acid**

  *Counter-examples*:
    - **4-methylbenzoic acid** (electron-donating methyl group; `Fe/Hf_high_or_low_value = False`)
    - **4-aminobenzoic acid** (electron-donating amino group; `Fe/Hf_high_or_low_value = False`)

---

- **Rule 3**: **Modifiers containing aromatic nitrogen heterocycles capable of coordinating with metals, especially when connected via flexible linkers to a carboxylic acid, tend to have a high Fe/Hf value (`Fe/Hf_high_or_low_value = True`).**

  *Rationale*: Nitrogen atoms in heterocycles like pyridine can coordinate with Fe(III), and flexible linkers allow optimal positioning for binding.

  *Examples*:
    - **4-pyridin-4-ylbutanoic acid**
    - **4-pyridin-4-ylbenzoic acid**

  *Counter-example*:
    - **Pyridine-3-carboxylic acid** (rigid attachment; `Fe/Hf_high_or_low_value = False`)

---

- **Rule 4**: **Modifiers that are carboxylic acids with flexible polyether chains (e.g., containing ethylene glycol units) and additional coordinating groups (e.g., amino groups) tend to have a high Fe/Hf value (`Fe/Hf_high_or_low_value = True`).**

  *Rationale*: Ether oxygen atoms and amino groups can coordinate with Fe(III), and flexible chains enhance the interaction with the catalyst.

  *Examples*:
    - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**
    - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**

  *Counter-example*:
    - **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid** (polyol without amino groups; `Fe/Hf_high_or_low_value = False`)

---

- **Rule 5**: **Modifiers that are α-amino acids with small to moderate-sized hydrophobic or aromatic side chains tend to have a high Fe/Hf value (`Fe/Hf_high_or_low_value = True`), while those with bulky or highly polar side chains may have a low Fe/Hf value.**

  *Rationale*: The amino and carboxyl groups provide coordination sites, and suitable side chains facilitate effective interaction with Fe(III). Bulky or polar side chains may hinder coordination due to steric or electronic effects.

  *Examples*:
    - **(2S)-2-amino-3-phenylpropanoic acid** (phenylalanine)

  *Counter-examples*:
    - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (tryptophan; bulky indole ring; `Fe/Hf_high_or_low_value = False`)
    - **(2S)-2-aminopentanedioic acid** (glutamic acid; additional carboxyl group; `Fe/Hf_high_or_low_value = False`)

---

- **Rule 6**: **Modifiers that are aromatic carboxylic acids with electron-donating groups (EDGs) at the para position, such as amino (-NH₂), hydroxy (-OH), or methyl (-CH₃), tend to have a low Fe/Hf value (`Fe/Hf_high_or_low_value = False`).**

  *Rationale*: EDGs decrease the acidity of the carboxyl group and reduce the molecule's ability to coordinate with Fe(III).

  *Examples*:
    - **4-aminobenzoic acid**
    - **4-hydroxybenzoic acid**
    - **4-methylbenzoic acid**

---

- **Rule 7**: **Modifiers containing multiple hydroxyl groups (polyhydroxy compounds), especially in aliphatic chains or side chains, tend to have a low Fe/Hf value (`Fe/Hf_high_or_low_value = False`).**

  *Rationale*: Excessive hydroxylation increases hydrophilicity and steric hindrance, hindering effective coordination with Fe(III).

  *Examples*:
    - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (gluconic acid)
    - **5-(4-hydroxyphenyl)pentanoic acid**

---

- **Rule 8**: **Modifiers containing perfluoroalkyl chains tend to have a low Fe/Hf value (`Fe/Hf_high_or_low_value = False`).**

  *Rationale*: Strong electron-withdrawing fluorine atoms reduce the coordinating ability of the carboxylate group with Fe(III), and the bulky perfluoroalkyl group may cause steric hindrance.

  *Example*:
    - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**

---

- **Rule 9**: **Modifiers that are simple aliphatic carboxylic acids without additional coordinating functional groups tend to have a low Fe/Hf value (`Fe/Hf_high_or_low_value = False`).**

  *Rationale*: Lack of extra coordination sites limits interaction with Fe(III).

  *Example*:
    - **Octanoic acid**

---

- **Rule 10**: **Modifiers containing multiple electron-withdrawing groups within a conjugated system tend to have a high Fe/Hf value (`Fe/Hf_high_or_low_value = True`).**

  *Rationale*: Multiple EWGs enhance the molecule's ability to coordinate with Fe(III) by increasing acidity and providing resonance-stabilized sites.

  *Example*:
    - **1,3-dioxo-2-benzofuran-5-carboxylic acid**

---

- **Rule 11**: **Modifiers that are aromatic carboxylic acids with carbonyl groups (aldehyde or ketone) conjugated to the aromatic ring but not directly at the coordination site tend to have a low Fe/Hf value (`Fe/Hf_high_or_low_value = False`).**

  *Rationale*: Carbonyl groups may compete with the carboxylate for coordination or reduce the overall coordination ability due to steric or electronic factors.

  *Examples*:
    - **4-formylbenzoic acid**
    - **5-formyl-2-hydroxybenzoic acid**

---

- **Rule 12**: **Modifiers that are aliphatic hydroxy acids with a single hydroxyl group on a medium-length carbon chain tend to have a high Fe/Hf value (`Fe/Hf_high_or_low_value = True`).**

  *Rationale*: The combination of a carboxyl group and a single hydroxyl group provides multiple coordination sites without excessive steric hindrance.

  *Example*:
    - **7-hydroxyheptanoic acid**

  *Counter-example*:
    - **Gluconic acid** (multiple hydroxyl groups; `Fe/Hf_high_or_low_value = False`)

---

**End of Rules**

---

These rules illustrate how combinations of functional groups and structural features influence the Fe/Hf ratio by affecting the coordination of Fe(III) within the catalyst system. By considering underlying physical-chemical properties such as acidity, coordination sites, steric factors, and electronic effects, the rules provide predictive insights into the relationship between molecular modifiers and the Fe/Hf value.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12
1,0,0,0,1,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,-1,0,0,0,0,0,0
1,0,0,0,1,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.7428571428571429; Test Accuracy: 1.0
    Train Support: 0.12857142857142856; Test Support: 0.5
    Train Confidence: 0.9375; Test Confidence: 0.75
    Train Lift: 1.9301470588235294; Test Lift: NONE
    Train Leverage: 0.05918367346938776; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    
    # Carboxylic acid group (-COOH)
    carboxylic_acid = ['[CX3](=O)[OX2H1]', '[CX3](=O)[O-]']
    
    # Primary aliphatic amine (-NH2)
    primary_aliphatic_amine = '[NX3;H2][C;!$([C]=[O,N,S])]'  # Nitrogen with two hydrogens attached to carbon not double bonded
    
    # Thiol group (-SH)
    thiol_group = '[SX2H][C;!$([C]=[O,N,S])]'  # Sulfur with one hydrogen attached to sp3 carbon
    
    # Aromatic atom
    aromatic_atom = '[a]'
    
    # Nitro group attached to aromatic ring at para position
    nitro_para = '[c][c](N(=O)=O)[c][c][c][CX3](=O)[OX1H0-,OX2H1]'
    
    # Bromomethyl group attached to aromatic ring at para position
    bromomethyl_para = '[c][c](CBr)[c][c][c][CX3](=O)[OX1H0-,OX2H1]'
    
    # Sulfhydryl group attached to aromatic ring at para position
    sulfhydryl_para = '[c][c](S)[c][c][c][CX3](=O)[OX1H0-,OX2H1]'
    
    # Electron-donating groups (EDGs) at para position on aromatic ring
    amino_para = '[c][c](Nc)[c][c][c][CX3](=O)[OX1H0-,OX2H1]'
    hydroxy_para = '[c][c](Oc)[c][c][c][CX3](=O)[OX1H0-,OX2H1]'
    methyl_para = '[c][c](C)[c][c][c][CX3](=O)[OX1H0-,OX2H1]'
    
    # Aromatic carboxylic acid
    aromatic_carboxylic_acid = '[c][CX3](=O)[OX1H0-,OX2H1]'
    
    # Aromatic nitrogen heterocycle connected via linker to carboxylic acid
    aromatic_nitrogen_heterocycle = '[n][C][C][C][CX3](=O)[OX1H0-,OX2H1]'
    
    # Polyether chain with ethylene glycol units (-OCCO-)
    polyether_chain = '[OX2][CH2][CH2][OX2][CH2][CH2][OX2]'
    
    # Additional amino group
    additional_amino_group = '[NX3;H2,H1][C;!$([C]=[O,N,S])]'  # Aliphatic amine
    
    # Alpha-amino acid
    alpha_amino_acid = '[NX3;H2][CX4H]([#6])[CX3](=O)[OX1H0-,OX2H1]'
    
    # Bulky side chains to be excluded
    bulky_side_chains = ['[CX4][CH2][c]1[cH][nH][cH][cH][c]1',  # Indole ring (tryptophan)
                         '[CX4][CH2][CH2][C](=O)[OX1H0-,OX2H1]']  # Glutamic acid side chain
    
    # Multiple hydroxyl groups (polyhydroxy compounds)
    multiple_hydroxyls = '[OX2H][CX4H][OX2H]'
    
    # Perfluoroalkyl chain
    perfluoroalkyl_chain = '[CX4]([F])([F])[F]'
    
    # Conjugated carbonyl group on aromatic ring
    conjugated_carbonyl = '[c][CX3](=O)[#6]'
    
    # Multiple EWGs within conjugated system
    multiple_EWG_conjugated = '[CX3](=O)[CX3](=O)[c]'
    
    # Aliphatic hydroxy acid with single hydroxyl group on medium-length chain
    aliphatic_hydroxy_acid = '[OX2H][CH2][CH2][CH2][CX3](=O)[OX1H0-,OX2H1]'
    
    # Compile patterns for each rule
    rules = [
        {
            'number': 1,
            'description': 'High Fe/Hf Value (True): Modifiers that are aliphatic carboxylic acids with a terminal primary amino group (-NH₂) or sulfhydryl group (-SH).',
            'patterns': [
                carboxylic_acid,  # Carboxylic acid group
                [primary_aliphatic_amine, thiol_group]  # Primary aliphatic amine or thiol group
            ],
            'exclude_patterns': [aromatic_atom],  # Exclude aromatic atoms
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'High Fe/Hf Value (True): Modifiers that are aromatic carboxylic acids with electron-withdrawing groups (EWGs) at the para position.',
            'patterns': [
                [nitro_para, bromomethyl_para, sulfhydryl_para]
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'High Fe/Hf Value (True): Modifiers containing aromatic nitrogen heterocycles connected via flexible linkers to a carboxylic acid.',
            'patterns': [
                aromatic_nitrogen_heterocycle
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'High Fe/Hf Value (True): Modifiers that are carboxylic acids with flexible polyether chains and additional coordinating groups (e.g., amino groups).',
            'patterns': [
                carboxylic_acid,
                polyether_chain,
                additional_amino_group
            ],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'High Fe/Hf Value (True): Modifiers that are α-amino acids with small to moderate-sized hydrophobic or aromatic side chains.',
            'patterns': [
                alpha_amino_acid
            ],
            'exclude_patterns': bulky_side_chains,  # Exclude bulky side chains
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Low Fe/Hf Value (False): Modifiers that are aromatic carboxylic acids with electron-donating groups (EDGs) at the para position.',
            'patterns': [
                [amino_para, hydroxy_para, methyl_para]
            ],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Low Fe/Hf Value (False): Modifiers containing multiple hydroxyl groups (polyhydroxy compounds).',
            'patterns': [
                multiple_hydroxyls
            ],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Low Fe/Hf Value (False): Modifiers containing perfluoroalkyl chains.',
            'patterns': [
                perfluoroalkyl_chain
            ],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Low Fe/Hf Value (False): Modifiers that are simple aliphatic carboxylic acids without additional coordinating functional groups.',
            'patterns': [
                carboxylic_acid
            ],
            'exclude_patterns': [
                '[NX3]',  # Exclude amine groups
                '[OX2H]',  # Exclude hydroxyl groups
                '[SX2H,SX2]'  # Exclude sulfur groups
            ],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'High Fe/Hf Value (True): Modifiers containing multiple electron-withdrawing groups within a conjugated system.',
            'patterns': [
                multiple_EWG_conjugated
            ],
            'prediction': 1
        },
        {
            'number': 11,
            'description': 'Low Fe/Hf Value (False): Modifiers that are aromatic carboxylic acids with carbonyl groups conjugated to the aromatic ring.',
            'patterns': [
                aromatic_carboxylic_acid,
                conjugated_carbonyl
            ],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'High Fe/Hf Value (True): Modifiers that are aliphatic hydroxy acids with a single hydroxyl group on a medium-length carbon chain.',
            'patterns': [
                aliphatic_hydroxy_acid
            ],
            'exclude_patterns': [
                '[OX2H][CX4][OX2H]'  # Exclude multiple hydroxyl groups
            ],
            'prediction': 1
        }
    ]
    
    # Compile patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            if isinstance(group, list):
                compiled_group = [Chem.MolFromSmarts(pat) for pat in group]
            else:
                compiled_group = [Chem.MolFromSmarts(group)]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for pat in rule['exclude_patterns']:
                compiled_excludes.append(Chem.MolFromSmarts(pat))
            rule['compiled_exclude_patterns'] = compiled_excludes
    
    # Process each SMILES string
    results = []
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'compiled_exclude_patterns' in rule:
                    for pat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        if mol.HasSubstructMatch(pat):
                            group_match = True
                            break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: Fe/Hf
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

---

- **Rule 1**: **Modifiers that are aliphatic carboxylic acids with a terminal primary amino group (-NH₂) tend to have a high Fe/Hf value (`Fe/Hf_high_or_low_value = True`).**

  *Rationale*: The terminal amino group serves as an additional coordination site for Fe(III), enhancing its incorporation into the catalyst.

  *Examples*:
    - **5-aminopentanoic acid** (`Fe/Hf_high_or_low_value = True`)
    - **7-aminoheptanoic acid** (`Fe/Hf_high_or_low_value = True`)
    - **8-aminooctanoic acid** (`Fe/Hf_high_or_low_value = True`)

  *Counter-example*:
    - **Octanoic acid** (lacks terminal -NH₂; `Fe/Hf_high_or_low_value = False`)

---

- **Rule 2**: **Modifiers that are aromatic carboxylic acids with electron-withdrawing groups (EWGs) at the para position tend to have a high Fe/Hf value (`Fe/Hf_high_or_low_value = True`), while those with electron-donating groups (EDGs) tend to have a low Fe/Hf value (`Fe/Hf_high_or_low_value = False`).**

  *Rationale*: EWGs increase the acidity of the carboxylic acid and enhance coordination with Fe(III), while EDGs decrease acidity and coordination ability.

  *Examples* of EWGs leading to high Fe/Hf value:
    - **4-nitrobenzoic acid** (`Fe/Hf_high_or_low_value = True`)
    - **4-(bromomethyl)benzoic acid** (`Fe/Hf_high_or_low_value = True`)
    - **4-sulfanylbenzoic acid** (`Fe/Hf_high_or_low_value = True`)

  *Examples* of EDGs leading to low Fe/Hf value:
    - **4-methylbenzoic acid** (`Fe/Hf_high_or_low_value = False`)
    - **4-aminobenzoic acid** (`Fe/Hf_high_or_low_value = False`)

---

- **Rule 3**: **Modifiers that contain nitrogen heterocycles connected via flexible linkers to a carboxylic acid tend to have a high Fe/Hf value (`Fe/Hf_high_or_low_value = True`).**

  *Rationale*: Nitrogen atoms in heterocycles can coordinate with Fe(III), and flexible linkers allow optimal positioning for binding.

  *Examples*:
    - **4-pyridin-4-ylbutanoic acid** (`Fe/Hf_high_or_low_value = True`)
    - **4-pyridin-4-ylbenzoic acid** (`Fe/Hf_high_or_low_value = True`)

  *Counter-example*:
    - **Pyridine-3-carboxylic acid** (direct attachment without flexible linker; `Fe/Hf_high_or_low_value = False`)

---

- **Rule 4**: **Modifiers that are α-amino acids without additional carboxyl groups and with moderate-sized side chains tend to have a high Fe/Hf value (`Fe/Hf_high_or_low_value = True`), whereas those with extra acidic groups or bulky side chains tend to have a low Fe/Hf value (`Fe/Hf_high_or_low_value = False`).**

  *Rationale*: The amino and carboxyl groups provide coordination sites; extra carboxyl groups or bulky side chains may hinder coordination due to steric effects.

  *Examples*:
    - **(2S)-2-amino-3-phenylpropanoic acid** (phenylalanine; `Fe/Hf_high_or_low_value = True`)
    - **(2S)-2-aminobutanedioic acid** (aspartic acid; `Fe/Hf_high_or_low_value = True`)

  *Counter-examples*:
    - **(2S)-2-aminopentanedioic acid** (glutamic acid; extra carboxyl group; `Fe/Hf_high_or_low_value = False`)
    - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (tryptophan; bulky indole ring; `Fe/Hf_high_or_low_value = False`)

---

- **Rule 5**: **Modifiers containing polyether chains terminated with coordinating groups (e.g., amino, carboxyl) tend to have a high Fe/Hf value (`Fe/Hf_high_or_low_value = True`).**

  *Rationale*: Ether oxygen atoms and terminal coordinating groups enhance the ability to chelate Fe(III).

  *Examples*:
    - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid** (`Fe/Hf_high_or_low_value = True`)
    - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid** (`Fe/Hf_high_or_low_value = True`)

  *Counter-example*:
    - **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid** (polyol; lacks terminal coordinating groups; `Fe/Hf_high_or_low_value = False`)

---

- **Rule 6**: **Modifiers that are aliphatic carboxylic acids with a terminal sulfhydryl group (-SH) tend to have a high Fe/Hf value (`Fe/Hf_high_or_low_value = True`).**

  *Rationale*: The sulfhydryl group provides a strong coordination site for Fe(III).

  *Example*:
    - **3-sulfanylpropanoic acid** (`Fe/Hf_high_or_low_value = True`)

  *Counter-example*:
    - **Octanoic acid** (no -SH group; `Fe/Hf_high_or_low_value = False`)

---

- **Rule 7**: **Modifiers containing multiple hydroxyl groups (polyhydroxy compounds) tend to have a low Fe/Hf value (`Fe/Hf_high_or_low_value = False`).**

  *Rationale*: Multiple hydroxyl groups increase hydrophilicity and may reduce binding to Fe(III) due to solvation effects or steric hindrance.

  *Examples*:
    - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (`Fe/Hf_high_or_low_value = False`)
    - **5-(4-hydroxyphenyl)pentanoic acid** (`Fe/Hf_high_or_low_value = False`)

---

- **Rule 8**: **Modifiers that are aliphatic hydroxy acids with medium-length carbon chains (5-7 carbons) and a single hydroxyl group tend to have a high Fe/Hf value (`Fe/Hf_high_or_low_value = True`).**

  *Rationale*: The presence of both carboxyl and hydroxyl groups provides multiple coordination sites without excessive steric hindrance.

  *Example*:
    - **7-hydroxyheptanoic acid** (`Fe/Hf_high_or_low_value = True`)

---

- **Rule 9**: **Modifiers containing perfluoroalkyl groups tend to have a low Fe/Hf value (`Fe/Hf_high_or_low_value = False`).**

  *Rationale*: Strong electron-withdrawing fluorine atoms decrease the electron density on coordinating groups, reducing their ability to coordinate with Fe(III).

  *Example*:
    - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid** (`Fe/Hf_high_or_low_value = False`)

---

- **Rule 10**: **Modifiers that are simple aliphatic carboxylic acids without additional coordinating functional groups tend to have a low Fe/Hf value (`Fe/Hf_high_or_low_value = False`).**

  *Rationale*: Lack of extra coordination sites limits interaction with Fe(III).

  *Example*:
    - **Octanoic acid** (`Fe/Hf_high_or_low_value = False`)

---

- **Rule 11**: **Modifiers that are aromatic carboxylic acids with conjugated carbonyl groups (aldehyde or ketone) tend to have a low Fe/Hf value (`Fe/Hf_high_or_low_value = False`).**

  *Rationale*: Conjugated carbonyl groups may delocalize electron density away from the carboxylate, reducing binding affinity with Fe(III).

  *Examples*:
    - **4-formylbenzoic acid** (`Fe/Hf_high_or_low_value = False`)
    - **5-formyl-2-hydroxybenzoic acid** (`Fe/Hf_high_or_low_value = False`)

---

- **Rule 12**: **Modifiers containing multiple electron-withdrawing groups within a conjugated system tend to have a high Fe/Hf value (`Fe/Hf_high_or_low_value = True`).**

  *Rationale*: Multiple EWGs enhance the acidity and coordinating ability of the molecule by stabilizing negative charge and facilitating Fe(III) binding.

  *Example*:
    - **1,3-dioxo-2-benzofuran-5-carboxylic acid** (`Fe/Hf_high_or_low_value = True`)

---

- **Rule 13**: **Modifiers that are simple aliphatic dicarboxylic acids (having two carboxyl groups) tend to have a low Fe/Hf value (`Fe/Hf_high_or_low_value = False`).**

  *Rationale*: Multiple carboxyl groups may lead to intramolecular hydrogen bonding or electrostatic repulsion when coordinating with Fe(III), reducing overall binding efficiency.

  *Example*:
    - **4-oxoheptanedioic acid** (`Fe/Hf_high_or_low_value = False`)

---

**End of Rules**

---

These rules demonstrate how specific combinations of functional groups and structural features in the molecular modifiers influence the Fe/Hf ratio by affecting the coordination chemistry of Fe(III) within the catalyst system. By considering underlying physical and chemical properties such as coordination ability, acidity, steric effects, and electronic effects, the rules provide predictive insights into the relationship between molecular modifiers and the Fe/Hf value.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13
1,0,0,0,1,0,0,0,-1,0,0,0,0
1,0,0,0,1,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0
1,0,0,0,1,0,0,0,-1,0,0,0,0
1,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,1,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,1,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,-1,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,-1,0,0
0,0,0,1,0,-1,0,0,-1,0,0,0,0
0,0,0,1,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,1,-1,0,0,0,0
0,0,-1,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0
0,1,0,0,0,0,0,0,-1,0,0,1,0
0,0,0,1,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0
1,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,1,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,-1,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0
1,0,0,0,0,0,0,0,-1,0,0,0,0
1,0,0,0,0,0,0,0,-1,0,0,0,0
1,0,0,0,0,0,0,0,-1,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6571428571428571; Test Accuracy: 1.0
    Train Support: 0.17142857142857143; Test Support: 1.0
    Train Confidence: 0.8571428571428571; Test Confidence: 1.0
    Train Lift: 1.7647058823529411; Test Lift: NONE
    Train Leverage: 0.07428571428571429; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups used in rules
    
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    
    # Primary aliphatic amine (-NH2)
    primary_aliphatic_amine = '[NX3;H2][CX4]'
    
    # Aromatic carboxylic acid
    aromatic_carboxylic_acid = '[c][CX3](=O)[OX2H1]'
    
    # Electron-Withdrawing Groups (EWGs) attached to aromatic ring
    ewg_halogen = '[c][F,Cl,Br,I]'
    ewg_nitro = '[c][NX3](=O)[O-]'
    ewg_trifluoromethyl = '[c][CX4]([F])([F])[F]'
    
    # Electron-Donating Groups (EDGs) attached to aromatic ring
    edg_hydroxyl = '[c][OX2H]'
    edg_methoxy = '[c][OX2][CH3]'
    edg_amino = '[c][NX3;H2,H1][#6]'
    
    # Nitrogen heterocycle
    nitrogen_heterocycle = '[n]'
    
    # Alpha amino acid
    alpha_amino_acid = '[$([NX3][CX4H][CX3](=O)[OX2H1])]'  
    
    # Additional carboxylic acid group
    additional_carboxylic_acid = '[CX3](=O)[OX2H1][CX4]'
    
    # Aromatic ring
    aromatic_ring = '[a]'
    
    # Polyether chain (-O-CH2-CH2-)n
    polyether_chain = '([OX2][CX4][CX4][OX2])'
    
    # Terminal coordinating groups
    terminal_amine = '[NX3;H2]'
    
    # Thiol group (-SH)
    thiol_group = '[SX2H]'
    
    # Hydroxyl group (-OH)
    hydroxyl_group = '[OX2H]'
    
    # Perfluoroalkyl group
    perfluoroalkyl = '[CX4]([F])([F])[F]'
    
    # Conjugated electron-withdrawing groups
    conjugated_ewg = '[c][CX3](=O)[O-]'
    
    # Aliphatic dicarboxylic acid
    aliphatic_dicarboxylic_acid = '[CX3](=O)[OX2H1][CX4][CX3](=O)[OX2H1]'
    
    # Define the rules
    rules = [
        {
            'number': 1,
            'description': 'High Fe/Hf Value (True): Modifiers that are aliphatic carboxylic acids with a terminal primary amino group (-NH₂).',
            'patterns': [
                [primary_aliphatic_amine],
                [carboxylic_acid]
            ],
            'exclude_patterns': [
                [aromatic_ring]  # Exclude aromatic atoms
            ],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'High Fe/Hf Value (True): Modifiers that are aromatic carboxylic acids with electron-withdrawing groups (EWGs) attached to the aromatic ring.',
            'patterns': [
                [aromatic_carboxylic_acid],
                [ewg_halogen, ewg_nitro, ewg_trifluoromethyl]
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Low Fe/Hf Value (False): Modifiers that are aromatic carboxylic acids with electron-donating groups (EDGs) attached to the aromatic ring.',
            'patterns': [
                [aromatic_carboxylic_acid],
                [edg_hydroxyl, edg_methoxy, edg_amino]
            ],
            'prediction': -1
        },
        {
            'number': 4,
            'description': 'High Fe/Hf Value (True): Modifiers that contain nitrogen heterocycles connected via flexible linkers to a carboxylic acid.',
            'patterns': [
                [carboxylic_acid],
                [nitrogen_heterocycle]
            ],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'High Fe/Hf Value (True): Modifiers that are α-amino acids without additional carboxyl groups and with moderate-sized side chains.',
            'patterns': [
                [alpha_amino_acid]
            ],
            'exclude_patterns': [
                [additional_carboxylic_acid],
                ['[c]', '[n]']  # Exclude aromatic and heteroaromatic rings
            ],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Low Fe/Hf Value (False): Modifiers that are α-amino acids with extra carboxyl groups or bulky side chains.',
            'patterns': [
                [alpha_amino_acid],
                [additional_carboxylic_acid, '[c]']
            ],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'High Fe/Hf Value (True): Modifiers containing polyether chains terminated with coordinating groups (e.g., amino, carboxyl).',
            'patterns': [
                [polyether_chain],
                [terminal_amine, carboxylic_acid]
            ],
            'prediction': 1
        },
        {
            'number': 8,
            'description': 'High Fe/Hf Value (True): Modifiers that are aliphatic carboxylic acids with a terminal sulfhydryl group (-SH).',
            'patterns': [
                [thiol_group],
                [carboxylic_acid]
            ],
            'exclude_patterns': [
                [aromatic_ring]  # Exclude aromatic atoms
            ],
            'prediction': 1
        },
        {
            'number': 9,
            'description': 'Low Fe/Hf Value (False): Modifiers containing multiple hydroxyl groups (polyhydroxy compounds).',
            'patterns': [
                [hydroxyl_group],
                [hydroxyl_group]  # At least two hydroxyl groups
            ],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'High Fe/Hf Value (True): Modifiers that are aliphatic hydroxy acids with medium-length carbon chains (5-7 carbons) and a single hydroxyl group.',
            'patterns': [
                [carboxylic_acid],
                [hydroxyl_group],
                ['[CH2][CH2][CH2][CH2][CH2]']  # Chain of five carbons
            ],
            'exclude_patterns': [
                [hydroxyl_group, hydroxyl_group]  # Exclude multiple hydroxyl groups
            ],
            'prediction': 1
        },
        {
            'number': 11,
            'description': 'Low Fe/Hf Value (False): Modifiers containing perfluoroalkyl groups.',
            'patterns': [
                [perfluoroalkyl]
            ],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'High Fe/Hf Value (True): Modifiers containing multiple electron-withdrawing groups within a conjugated system.',
            'patterns': [
                [aromatic_carboxylic_acid],
                [conjugated_ewg, ewg_nitro]
            ],
            'prediction': 1
        },
        {
            'number': 13,
            'description': 'Low Fe/Hf Value (False): Modifiers that are simple aliphatic dicarboxylic acids.',
            'patterns': [
                [aliphatic_dicarboxylic_acid]
            ],
            'prediction': -1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(p) for p in group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for group in rule['exclude_patterns']:
                compiled_group = [Chem.MolFromSmarts(p) for p in group]
                compiled_excludes.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_excludes
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        matches = mol.GetSubstructMatches(pat)
                        if matches:
                            group_match = True
                            break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: Fe/Hf
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

---

- **Rule 1**: **Modifiers that are aliphatic carboxylic acids with a terminal primary amino group (-NH₂) tend to have a high Fe/Hf value (`Fe/Hf_high_or_low_value = True`).**

  *Rationale*: The terminal amino group offers an additional coordination site for Fe(III), enhancing its incorporation into the catalyst through chelation between the amino and carboxyl groups.

  *Examples*:
    - **5-aminopentanoic acid** (`Fe/Hf_high_or_low_value = True`)
    - **7-aminoheptanoic acid** (`Fe/Hf_high_or_low_value = True`)
    - **8-aminooctanoic acid** (`Fe/Hf_high_or_low_value = True`)

  *Counter-example*:
    - **Octanoic acid** (lacks terminal amino group; `Fe/Hf_high_or_low_value = False`)

---

- **Rule 2**: **Modifiers that are aromatic carboxylic acids with strong electron-withdrawing groups (EWGs) at the para position tend to have a high Fe/Hf value (`True`), while those with electron-donating groups (EDGs) at the same position tend to have a low Fe/Hf value (`False`).**

  *Rationale*: EWGs increase the acidity and coordination ability of the carboxylate anion, facilitating stronger binding with Fe(III). EDGs decrease acidity and reduce coordination efficiency.

  *Examples* with EWGs (high Fe/Hf value):
    - **4-nitrobenzoic acid** (nitro group; `True`)
    - **4-(bromomethyl)benzoic acid** (bromomethyl group; `True`)

  *Examples* with EDGs (low Fe/Hf value):
    - **4-methylbenzoic acid** (methyl group; `False`)
    - **4-aminobenzoic acid** (amino group; `False`)

---

- **Rule 3**: **Modifiers containing sulfur functional groups (-SH or thioethers) tend to have a high Fe/Hf value (`True`), regardless of whether they are aliphatic or aromatic.**

  *Rationale*: Sulfur atoms have lone pair electrons that can strongly coordinate with Fe(III), enhancing metal binding.

  *Examples*:
    - **3-sulfanylpropanoic acid** (`True`)
    - **4-sulfanylbenzoic acid** (`True`)
    - **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid** (`True`)

---

- **Rule 4**: **Modifiers that are aromatic carboxylic acids conjugated to nitrogen-containing heterocycles tend to have a high Fe/Hf value (`True`).**

  *Rationale*: Nitrogen atoms in heterocycles can act as additional coordination sites for Fe(III), and conjugation enhances electron delocalization, promoting binding.

  *Examples*:
    - **4-pyridin-4-ylbenzoic acid** (`True`)
    - **4-pyridin-4-ylbutanoic acid** (`True`)

  *Counter-example*:
    - **Pyridine-3-carboxylic acid** (pyridine ring directly attached to carboxyl group without extended conjugation; `False`)

---

- **Rule 5**: **Modifiers that are aliphatic carboxylic acids with multiple adjacent hydroxyl groups (polyol structures) tend to have a low Fe/Hf value (`False`).**

  *Rationale*: Multiple adjacent hydroxyl groups increase hydrophilicity and can create steric hindrance or compete with carboxylate coordination, reducing Fe(III) binding efficiency.

  *Examples*:
    - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (`False`)
    - **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid** (`False`)

---

- **Rule 6**: **Modifiers that are aliphatic carboxylic acids lacking additional coordinating functional groups tend to have a low Fe/Hf value (`False`).**

  *Rationale*: Without extra coordination sites, these modifiers interact less effectively with Fe(III).

  *Example*:
    - **Octanoic acid** (`False`)

---

- **Rule 7**: **Modifiers that are α-amino acids with nonpolar or aromatic side chains tend to have a high Fe/Hf value (`True`), whereas those with additional carboxyl groups or bulky side chains tend to have a low Fe/Hf value (`False`).**

  *Rationale*: The amino and carboxyl groups in α-amino acids provide effective chelating sites for Fe(III). Bulky side chains or extra acidic groups can introduce steric hindrance or charge repulsion, reducing coordination efficiency.

  *Examples* (high Fe/Hf value):
    - **(2S)-2-amino-3-phenylpropanoic acid** (phenylalanine; `True`)
    - **(2S)-2-aminobutanedioic acid** (aspartic acid; `True`)

  *Counter-examples* (low Fe/Hf value):
    - **(2S)-2-aminopentanedioic acid** (glutamic acid; extra carboxyl group; `False`)
    - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (tryptophan; bulky indole ring; `False`)

---

- **Rule 8**: **Modifiers with perfluorinated alkyl chains tend to have a low Fe/Hf value (`False`).**

  *Rationale*: Perfluoroalkyl groups are strongly electron-withdrawing and hydrophobic, which can decrease electron density on coordinating groups and hinder interaction with Fe(III).

  *Example*:
    - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid** (`False`)

---

- **Rule 9**: **Modifiers with conjugated carbonyl groups adjacent to the carboxylic acid tend to have a low Fe/Hf value (`False`), unless compensated by additional strong coordinating groups.**

  *Rationale*: Conjugated carbonyl groups withdraw electron density from the carboxylate anion, reducing its ability to coordinate effectively with Fe(III).

  *Examples*:
    - **4-formylbenzoic acid** (`False`)
    - **5-formyl-2-hydroxybenzoic acid** (`False`)

---

- **Rule 10**: **Modifiers that are aromatic carboxylic acids with fused oxygen-containing heterocycles tend to have a high Fe/Hf value (`True`).**

  *Rationale*: The oxygen atoms in the heterocycles provide additional coordination sites, enhancing Fe(III) binding.

  *Example*:
    - **1,3-dioxo-2-benzofuran-5-carboxylic acid** (`True`)

---

- **Rule 11**: **Modifiers that are aliphatic carboxylic acids with terminal hydroxyl groups tend to have a high Fe/Hf value (`True`).**

  *Rationale*: Terminal hydroxyl groups can act as additional coordination sites for Fe(III).

  *Example*:
    - **7-hydroxyheptanoic acid** (`True`)

  *Counter-example*:
    - **5-(4-hydroxyphenyl)pentanoic acid** (hydroxyl group on aromatic ring not as effective for Fe(III) coordination in this context; `False`)

---

- **Rule 12**: **Modifiers containing flexible polyether chains terminated with coordinating groups (e.g., carboxyl or amino groups) tend to have a high Fe/Hf value (`True`).**

  *Rationale*: Ether oxygens provide multiple coordination sites, and the flexible chain allows for effective binding with Fe(III).

  *Examples*:
    - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid** (`True`)
    - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid** (`True`)

---

- **Rule 13**: **Modifiers that are aliphatic dicarboxylic acids without additional coordinating groups tend to have a low Fe/Hf value (`False`).**

  *Rationale*: The presence of multiple carboxyl groups may lead to chelation patterns that are less favorable for Fe(III) incorporation into the catalyst.

  *Example*:
    - **4-oxoheptanedioic acid** (`False`)

---

**End of Rules**

---

These rules describe how specific combinations of functional groups and structural features in the molecular modifiers influence the Fe/Hf ratio by affecting the coordination chemistry of Fe(III) within the catalyst system.

**Coverage and Balance**:

- **Coverage**: The rules encompass a broad range of modifiers in the dataset by focusing on common functional groups and structural motifs, such as amino groups, electron-withdrawing or -donating substituents, sulfur-containing groups, hydroxyl groups, polyethers, and conjugated systems. This ensures that the rules can predict the Fe/Hf value for most modifiers based on their structural features.

- **Balance**: A suitable balance is maintained between simple rules with higher coverage (e.g., Rule 2 on EWGs and EDGs in aromatic carboxylic acids) and more complex rules with lower coverage (e.g., Rule 10 on fused oxygen-containing heterocycles). This balance allows for both general predictions and the capture of specific cases where unique structural features have a significant impact.

**Applicability**:

- Each rule clearly predicts whether a modifier will result in a high or low Fe/Hf value based on its structural description, making them applicable for assessing new modifiers in future research.

**Rationale**:

- The rules are grounded in fundamental principles of coordination chemistry and physical-organic chemistry. Functional groups known to coordinate well with Fe(III), such as amino, sulfur-containing, and certain hydroxyl groups, are associated with high Fe/Hf values. Electron-withdrawing or -donating effects influence the acidity and coordination ability of carboxylic acids, affecting Fe(III) binding.

By applying these rules, researchers can better understand how to design and select molecular modifiers to control the Fe/Hf ratio, ultimately optimizing the yield of the remote δ-C(sp³)–H bond functionalization reaction.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2_high,Rule 2_low,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7_high,Rule 7_low,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,1,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,1,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,1,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.7142857142857143; Test Accuracy: 0.0
    Train Support: 0.1; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 2.058823529411765; Test Lift: NONE
    Train Leverage: 0.05142857142857143; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for various functional groups and structural features
    patterns = {}

    # Rule 1: Aliphatic carboxylic acids with terminal primary amino group (-NH2)
    carboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1]'
    terminal_primary_amino = '[NX3;H2][CX4;H2][CX4]*'  # Primary amine attached to terminal carbon

    # Rule 2: Aromatic carboxylic acids with EWGs or EDGs at the para position
    aromatic_carboxylic_acid = '[c][c][c](c)[c][c][CX3](=O)[OX1H0-,OX2H1]'  # Simplified pattern for benzoic acid

    # Electron-withdrawing groups (EWGs) on aromatic ring
    ewg_on_aromatic = ['[c][F,Cl,Br,I]',  # Halogens attached to aromatic carbons
                       '[c][NX3+](=O)[O-]',  # Nitro group
                       '[c][CX4](F)(F)F']  # Trifluoromethyl group

    # Electron-donating groups (EDGs) on aromatic ring
    edg_on_aromatic = ['[c][CH3]',  # Methyl group
                       '[c][OX2H]',  # Hydroxyl group
                       '[c][NX3;H2]']  # Amino group

    # Rule 3: Sulfur functional groups (-SH or thioethers)
    thiol = '[SX2H]'  # Thiol group
    thioether = '[#16X2][#6]'  # Sulfur connected to carbon

    # Rule 4: Aromatic carboxylic acids conjugated to nitrogen-containing heterocycles
    nitrogen_heterocycle = '[n]1cccc1'  # Pyridine ring
    aromatic_carboxylic_acid_conjugated = '[c][CX3](=O)[OX1H0-,OX2H1]'  # Aromatic carboxylic acid

    # Rule 5: Aliphatic carboxylic acids with multiple adjacent hydroxyl groups (polyols)
    polyol = '[OX2H][CX4][OX2H]'  # Adjacent hydroxyl groups

    # Rule 6: Aliphatic carboxylic acids lacking additional coordinating functional groups
    aliphatic_carboxylic_acid = '[#6][CX3](=O)[OX1H0-,OX2H1]'  # Aliphatic carboxylic acid

    # Rule 7: α-Amino acids with nonpolar or aromatic side chains
    alpha_amino_acid = '[NX3;H2][CX4H]([#6])[CX3](=O)[OX1H0-,OX2H1]'  # General pattern for α-amino acid

    # Nonpolar side chains for high Fe/Hf value
    nonpolar_side_chain = ['[CX4H2][CX4H3]',  # Methyl group
                          '[CX4H2][c]']  # Benzyl group

    # Bulky side chains or additional carboxyl groups for low Fe/Hf value
    bulky_side_chain = '[CX4H]([CX3](=O)[OX1H0-,OX2H1])[#6]'  # Additional carboxyl group in side chain

    # Rule 8: Perfluorinated alkyl chains
    perfluoroalkyl = '[CX4](F)(F)(F)'

    # Rule 9: Conjugated carbonyl groups adjacent to carboxylic acid
    conjugated_carbonyl = '[CX3](=O)[CX3](=O)[#6]'  # Carbonyl group adjacent to carboxylic acid

    # Rule 10: Aromatic carboxylic acids with fused oxygen-containing heterocycles
    fused_oxygen_heterocycle = 'O1c2ccccc2C(=O)C1=O'  # Example for isobenzofuranone

    # Rule 11: Aliphatic carboxylic acids with terminal hydroxyl groups
    terminal_hydroxyl = '[OX2H][CX4][CX4]*[CX3](=O)[OX1H0-,OX2H1]'  # Hydroxyl group at terminal position

    # Rule 12: Flexible polyether chains terminated with coordinating groups
    polyether_chain = '[#6][OX2][#6][OX2][#6][OX2][#6]'  # Polyether chain
    terminating_group = '[CX3](=O)[OX1H0-,OX2H1]'  # Carboxylic acid group
    terminating_amino = '[NX3;H2,H1][#6]'  # Amino group

    # Rule 13: Aliphatic dicarboxylic acids without additional coordinating groups
    aliphatic_dicarboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1][#6][#6][CX3](=O)[OX1H0-,OX2H1]'

    # Compile patterns
    compiled_patterns = {
        'Rule 1': {'include': [carboxylic_acid, terminal_primary_amino], 'exclude': [], 'prediction': 1},
        'Rule 2_high': {'include': [aromatic_carboxylic_acid], 'ewg': ewg_on_aromatic, 'prediction': 1},
        'Rule 2_low': {'include': [aromatic_carboxylic_acid], 'edg': edg_on_aromatic, 'prediction': -1},
        'Rule 3': {'include': [carboxylic_acid], 'sulfur_groups': [thiol, thioether], 'prediction': 1},
        'Rule 4': {'include': [aromatic_carboxylic_acid_conjugated, nitrogen_heterocycle], 'prediction': 1},
        'Rule 5': {'include': [aliphatic_carboxylic_acid], 'polyol': polyol, 'prediction': -1},
        'Rule 6': {'include': [aliphatic_carboxylic_acid], 'exclude': [terminal_primary_amino, thiol, thioether, '[OX2][#6]'], 'prediction': -1},
        'Rule 7_high': {'include': [alpha_amino_acid], 'side_chain': nonpolar_side_chain, 'prediction': 1},
        'Rule 7_low': {'include': [alpha_amino_acid, bulky_side_chain], 'prediction': -1},
        'Rule 8': {'include': [perfluoroalkyl], 'prediction': -1},
        'Rule 9': {'include': [conjugated_carbonyl], 'exclude': [thiol, terminal_primary_amino, '[O,N,S]'], 'prediction': -1},
        'Rule 10': {'include': [fused_oxygen_heterocycle], 'prediction': 1},
        'Rule 11': {'include': [terminal_hydroxyl], 'prediction': 1},
        'Rule 12': {'include': [polyether_chain], 'terminating_groups': [terminating_group, terminating_amino], 'prediction':1},
        'Rule 13': {'include': [aliphatic_dicarboxylic_acid], 'exclude': [thiol, terminal_primary_amino, '[O,N,S]'], 'prediction': -1}
    }

    # Compile all patterns
    for rule_key, rule in compiled_patterns.items():
        rule['compiled_include'] = [Chem.MolFromSmarts(pat) for pat in rule.get('include', [])]
        rule['compiled_exclude'] = [Chem.MolFromSmarts(pat) for pat in rule.get('exclude', [])]
        if 'ewg' in rule:
            rule['compiled_ewg'] = [Chem.MolFromSmarts(pat) for pat in rule['ewg']]
        if 'edg' in rule:
            rule['compiled_edg'] = [Chem.MolFromSmarts(pat) for pat in rule['edg']]
        if 'sulfur_groups' in rule:
            rule['compiled_sulfur_groups'] = [Chem.MolFromSmarts(pat) for pat in rule['sulfur_groups']]
        if 'polyol' in rule:
            rule['compiled_polyol'] = Chem.MolFromSmarts(rule['polyol'])
        if 'side_chain' in rule:
            rule['compiled_side_chain'] = [Chem.MolFromSmarts(pat) for pat in rule['side_chain']]
        if 'terminating_groups' in rule:
            rule['compiled_terminating_groups'] = [Chem.MolFromSmarts(pat) for pat in rule['terminating_groups']]

    # Initialize results list
    results = []
    rule_keys = list(compiled_patterns.keys())

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rule_keys))
            continue
        row = []
        for rule_key in rule_keys:
            rule = compiled_patterns[rule_key]
            try:
                match = True
                # Check exclude patterns
                for pat in rule.get('compiled_exclude', []):
                    if mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Check include patterns
                for pat in rule.get('compiled_include', []):
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Special checks for rules with additional patterns
                if 'compiled_ewg' in rule:
                    # Check for EWG on aromatic ring
                    ewg_match = False
                    for pat in rule['compiled_ewg']:
                        if mol.HasSubstructMatch(pat):
                            ewg_match = True
                            break
                    if not ewg_match:
                        match = False
                if 'compiled_edg' in rule:
                    # Check for EDG on aromatic ring
                    edg_match = False
                    for pat in rule['compiled_edg']:
                        if mol.HasSubstructMatch(pat):
                            edg_match = True
                            break
                    if not edg_match:
                        match = False
                if 'compiled_sulfur_groups' in rule:
                    # Check for sulfur groups
                    sulfur_match = False
                    for pat in rule['compiled_sulfur_groups']:
                        if mol.HasSubstructMatch(pat):
                            sulfur_match = True
                            break
                    if not sulfur_match:
                        match = False
                if 'compiled_polyol' in rule:
                    # Check for multiple adjacent hydroxyl groups
                    polyol_matches = mol.GetSubstructMatches(rule['compiled_polyol'])
                    if len(polyol_matches) < 1:
                        match = False
                if 'compiled_side_chain' in rule:
                    # Check for side chains
                    side_chain_match = False
                    for pat in rule['compiled_side_chain']:
                        if mol.HasSubstructMatch(pat):
                            side_chain_match = True
                            break
                    if not side_chain_match:
                        match = False
                if 'compiled_terminating_groups' in rule:
                    # Check for terminating groups
                    term_group_match = False
                    for pat in rule['compiled_terminating_groups']:
                        if mol.HasSubstructMatch(pat):
                            term_group_match = True
                            break
                    if not term_group_match:
                        match = False
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                # print(f"Error processing rule {rule_key} for SMILES {smi}: {e}")
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=rule_keys)
    return df

--------------------------------------------------
    Target Name: Fe/Hf
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

---

- **Rule 1**: **Modifiers that are **aliphatic carboxylic acids with a terminal primary amino group (-NH₂)** tend to have a high Fe/Hf value (`Fe/Hf_high_or_low_value = True`).**

  *Rationale*: The terminal amino group provides an additional coordination site for Fe(III), enhancing complexation through bidentate binding with both the amino and carboxyl groups.

  *Examples* (high Fe/Hf value):
    - **5-aminopentanoic acid** (`True`)
    - **7-aminoheptanoic acid** (`True`)
    - **8-aminooctanoic acid** (`True`)
    - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid** (`True`)

  *Counter-examples* (low Fe/Hf value):
    - **Octanoic acid** (lacks amino group; `False`)
    - **4-oxoheptanedioic acid** (`False`)

---

- **Rule 2**: **Modifiers that are **aromatic carboxylic acids with strong electron-withdrawing groups (EWGs) at the para position** tend to have a high Fe/Hf value (`True`), while those with electron-donating groups (EDGs) at the same position tend to have a low Fe/Hf value (`False`).**

  *Rationale*: EWGs increase the acidity and enhance the electron-withdrawing capacity of the carboxylate group, facilitating stronger coordination with Fe(III). EDGs decrease acidity, reducing coordination efficiency.

  *Examples* with EWGs (high Fe/Hf value):
    - **4-nitrobenzoic acid** (`True`)
    - **4-(bromomethyl)benzoic acid** (`True`)

  *Examples* with EDGs (low Fe/Hf value):
    - **4-methylbenzoic acid** (`False`)
    - **4-aminobenzoic acid** (`False`)

---

- **Rule 3**: **Modifiers containing **sulfur functional groups** (-SH or thioethers) tend to have a high Fe/Hf value (`True`), regardless of whether they are aliphatic or aromatic.**

  *Rationale*: Sulfur atoms have lone pair electrons that can coordinate strongly with Fe(III), enhancing metal binding due to soft base-hard acid interactions.

  *Examples* (high Fe/Hf value):
    - **3-sulfanylpropanoic acid** (`True`)
    - **4-sulfanylbenzoic acid** (`True`)
    - **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid** (`True`)

---

- **Rule 4**: **Modifiers that are **aliphatic carboxylic acids with a terminal hydroxyl group (-OH)** tend to have a high Fe/Hf value (`True`).**

  *Rationale*: The terminal hydroxyl group acts as an additional coordination site, allowing for chelation with Fe(III) through both the hydroxyl and carboxyl groups.

  *Example* (high Fe/Hf value):
    - **7-hydroxyheptanoic acid** (`True`)

  *Counter-example* (low Fe/Hf value):
    - **Octanoic acid** (no hydroxyl group; `False`)

---

- **Rule 5**: **Modifiers that are **polyhydroxy aliphatic acids** (multiple adjacent hydroxyl groups) tend to have a low Fe/Hf value (`False`).**

  *Rationale*: Multiple hydroxyl groups can increase hydrophilicity and steric hindrance, potentially interfering with effective coordination to Fe(III).

  *Examples* (low Fe/Hf value):
    - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (`False`)
    - **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid** (`False`)

---

- **Rule 6**: **Modifiers containing **flexible polyether chains** terminated with coordinating groups (e.g., carboxyl or amino groups) tend to have a high Fe/Hf value (`True`).**

  *Rationale*: Ether oxygens provide multiple coordination sites, and the flexible chain allows for effective multi-dentate binding with Fe(III).

  *Examples* (high Fe/Hf value):
    - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid** (`True`)
    - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid** (`True`)

---

- **Rule 7**: **Modifiers that are **aromatic carboxylic acids conjugated with nitrogen-containing heterocycles at the para position** tend to have a high Fe/Hf value (`True`). If the carboxyl group is not directly conjugated due to its position, the Fe/Hf value tends to be low (`False`).**

  *Rationale*: Conjugation enhances electron delocalization and provides additional coordination sites via the nitrogen atom, facilitating stronger binding with Fe(III).

  *Examples* (high Fe/Hf value):
    - **4-pyridin-4-ylbenzoic acid** (`True`)
    - **4-pyridin-4-ylbutanoic acid** (`True`)

  *Counter-examples* (low Fe/Hf value):
    - **Pyridine-3-carboxylic acid** (`False`)
    - **1H-pyrazole-4-carboxylic acid** (`False`)

---

- **Rule 8**: **Modifiers that are **aromatic carboxylic acids with phenolic hydroxyl groups** tend to have a low Fe/Hf value (`False`).**

  *Rationale*: Phenolic hydroxyl groups can engage in intramolecular hydrogen bonding, reducing the availability of the carboxylate oxygen for coordination with Fe(III).

  *Examples* (low Fe/Hf value):
    - **5-(4-hydroxyphenyl)pentanoic acid** (`False`)
    - **3-(4-hydroxyphenyl)propanoic acid** (`False`)
    - **2-[(4-hydroxybenzoyl)amino]acetic acid** (`False`)

---

- **Rule 9**: **Modifiers with **perfluorinated alkyl chains** tend to have a low Fe/Hf value (`False`).**

  *Rationale*: Perfluorinated groups are highly electron-withdrawing and hydrophobic, decreasing electron density on coordinating atoms and hindering effective Fe(III) coordination.

  *Example* (low Fe/Hf value):
    - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid** (`False`)

---

- **Rule 10**: **Modifiers that are **aliphatic carboxylic acids without additional coordinating functional groups** tend to have a low Fe/Hf value (`False`).**

  *Rationale*: The lack of extra coordination sites limits the ability of the molecule to effectively bind Fe(III).

  *Examples* (low Fe/Hf value):
    - **Octanoic acid** (`False`)
    - **4-oxoheptanedioic acid** (`False`)

---

- **Rule 11**: **Modifiers containing **bulky hydrophobic groups**, such as large aromatic rings or fused rings, without additional coordinating groups tend to have a low Fe/Hf value (`False`).**

  *Rationale*: Bulky groups can cause steric hindrance, impeding access to Fe(III) and reducing coordination efficiency.

  *Example* (low Fe/Hf value):
    - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (tryptophan; `False`)

---

- **Rule 12**: **Modifiers that are **aromatic carboxylic acids with aldehyde groups adjacent to the carboxyl group** tend to have a low Fe/Hf value (`False`).**

  *Rationale*: Aldehyde groups can withdraw electron density from the carboxylate, diminishing its ability to coordinate with Fe(III).

  *Examples* (low Fe/Hf value):
    - **4-formylbenzoic acid** (`False`)
    - **5-formyl-2-hydroxybenzoic acid** (`False`)

---

- **Rule 13**: **Modifiers that are **aromatic carboxylic acids fused with oxygen-containing heterocycles or additional carbonyl groups** tend to have a high Fe/Hf value (`True`).**

  *Rationale*: Additional carbonyl and ether oxygen atoms offer more coordination sites, promoting stronger chelation with Fe(III).

  *Example* (high Fe/Hf value):
    - **1,3-dioxo-2-benzofuran-5-carboxylic acid** (`True`)

---

- **Rule 14**: **Modifiers containing **both electron-donating groups and adjacent carbonyl groups** on an aromatic ring can have a high Fe/Hf value (`True`) if the molecule provides multiple coordination sites.**

  *Rationale*: Synergistic effects of electron-donating groups and carbonyl groups can enhance electron delocalization, improving coordination with Fe(III) despite electron-donating tendencies.

  *Example* (high Fe/Hf value):
    - **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid** (`True`)

---

**End of Rules**

---

These rules describe how specific combinations of functional groups and structural features in the molecular modifiers influence the Fe/Hf ratio by affecting the coordination of Fe(III) within the catalyst system.

**Coverage and Balance**:

- **Coverage**: The rules encompass a broad range of modifiers in the dataset, focusing on common functional groups like amino groups, sulfur-containing groups, hydroxyl groups, ethers, electron-withdrawing and electron-donating substituents, and conjugated systems. This allows for the prediction of the Fe/Hf value for most modifiers based on their structural features.

- **Balance**: A suitable balance is maintained between simple rules with higher coverage (e.g., **Rule 2** on aromatic acids with EWGs/EDGs) and more complex rules with lower coverage (e.g., **Rule 14** on modifiers with both electron-donating groups and adjacent carbonyl groups). This balance facilitates general predictions while capturing specific cases where unique structural features significantly impact Fe(III) coordination.

**Applicability**:

- Each rule clearly predicts whether a modifier will result in a high or low Fe/Hf value based on its structural description, making them useful for evaluating new modifiers in future research.

**Rationale**:

- The rules are grounded in fundamental principles of coordination chemistry and physical-organic chemistry. Functional groups known to coordinate effectively with Fe(III)—such as amino, sulfur-containing, hydroxyl, and ether groups—are associated with high Fe/Hf values. Electron-withdrawing and electron-donating effects influence the acidity and coordination ability of carboxylic acids, impacting Fe(III) binding.

By applying these rules, researchers can better understand how to design and select molecular modifiers to control the Fe/Hf ratio, ultimately optimizing the yield of the remote δ-C(sp³)–H bond functionalization reaction.

------------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14
1,0,0,1,0,0,0,0,0,0,0,0,0,0
1,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,1,1
1,0,0,1,0,0,0,0,0,0,0,0,0,0
1,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,1,1
0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,1,0,0,0,0,0,1,1
0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,1,1,0,0,0,0,0,0,0,0,1,1
0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,1,0,0,0,0,0,1,1
1,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,-1,0,0,0,0,0
1,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,1,0,0,0,0,0,1,1
0,0,0,1,0,0,0,0,0,0,0,0,1,1
0,0,1,1,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,-1,0,0,0,-1,1,1
0,0,0,1,0,0,0,0,0,0,0,-1,1,1
0,0,0,1,0,0,0,0,0,0,0,0,1,1
0,0,0,1,0,0,1,0,0,0,0,0,1,1
0,0,0,1,0,0,0,0,0,0,0,0,1,1
1,0,1,1,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,-1,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0
1,0,0,1,0,0,0,0,0,0,0,0,0,0
1,0,0,1,0,0,0,0,0,0,0,0,0,0
1,0,0,1,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.7142857142857143; Test Accuracy: 1.0
    Train Support: 0.14285714285714285; Test Support: 0.5
    Train Confidence: 0.8888888888888888; Test Confidence: 0.75
    Train Lift: 1.8300653594771243; Test Lift: NONE
    Train Leverage: 0.05959183673469389; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'High Fe/Hf Value (True): Modifiers that are aliphatic carboxylic acids with a terminal primary amino group (-NH₂).',
            'patterns': [
                ['[C;!a;X3](=O)[OX2H1]'],  # Aliphatic carboxylic acid
                ['[NX3H2][C;!a]']  # Terminal primary amino group
            ],
            'logic': 'and',
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'High Fe/Hf Value (True) or Low Fe/Hf Value (False) based on electron-withdrawing (EWG) or electron-donating groups (EDG) at the para position of an aromatic carboxylic acid.',
            'patterns_high': [
                ['[c][CX3](=O)[OX2H1]'],  # Aromatic carboxylic acid
                ['[c][c][c]([F,Cl,Br,I,NX3(=O)(=O)])[c][c][CX3](=O)[OX2H1]']  # EWG at para position
            ],
            'patterns_low': [
                ['[c][CX3](=O)[OX2H1]'],  # Aromatic carboxylic acid
                ['[c][c][c]([OX2H,OX2][CH3,NX3H2])[c][c][CX3](=O)[OX2H1]']  # EDG at para position
            ],
            'logic': 'and',
            'prediction_high': 1,
            'prediction_low': -1
        },
        {
            'number': 3,
            'description': 'High Fe/Hf Value (True): Modifiers containing sulfur functional groups (-SH or thioethers).',
            'patterns': [
                ['[SX2H]'],  # Thiol group
                ['[SX2][#6]']  # Thioether group
            ],
            'logic': 'or',
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'High Fe/Hf Value (True): Modifiers that are aliphatic carboxylic acids with a terminal hydroxyl group (-OH).',
            'patterns': [
                ['[C;!a;X3](=O)[OX2H1]'],  # Aliphatic carboxylic acid
                ['[OX2H][C;!a]']  # Terminal hydroxyl group
            ],
            'logic': 'and',
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Low Fe/Hf Value (False): Modifiers that are polyhydroxy aliphatic acids (multiple adjacent hydroxyl groups).',
            'patterns': [
                ['[C;!a;X3](=O)[OX2H1]'],  # Aliphatic carboxylic acid
                ['[OX2H][CX4][OX2H]']  # Adjacent hydroxyl groups
            ],
            'logic': 'and',
            'prediction': -1
        },
        {
            'number': 6,
            'description': 'High Fe/Hf Value (True): Modifiers containing flexible polyether chains terminated with coordinating groups (e.g., carboxyl or amino groups).',
            'patterns': [
                ['[C;!a;X3](=O)[OX2H1]', '[NX3H2]'],  # Carboxyl or amino group
                ['[#6][OX2][#6][OX2][#6]']  # Polyether chain
            ],
            'logic': 'and',
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'High or Low Fe/Hf Value depending on the conjugation of the carboxyl group with nitrogen-containing heterocycles.',
            'patterns_high': [
                ['[c][CX3](=O)[OX2H1]', '[n]'],  # Carboxyl group conjugated with nitrogen-containing heterocycle
            ],
            'patterns_low': [
                ['[n][c][CX3](=O)[OX2H1]'],  # Carboxyl group not directly conjugated
            ],
            'logic': 'and',
            'prediction_high': 1,
            'prediction_low': -1
        },
        {
            'number': 8,
            'description': 'Low Fe/Hf Value (False): Modifiers that are aromatic carboxylic acids with phenolic hydroxyl groups.',
            'patterns': [
                ['[c][OX2H]'],  # Phenolic hydroxyl group
                ['[c][CX3](=O)[OX2H1]']  # Carboxyl group on aromatic ring
            ],
            'logic': 'and',
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Low Fe/Hf Value (False): Modifiers with perfluorinated alkyl chains.',
            'patterns': [
                ['[C](F)(F)F']  # Trifluoromethyl group, extended for perfluorinated chains
            ],
            'logic': 'or',
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Low Fe/Hf Value (False): Modifiers that are aliphatic carboxylic acids without additional coordinating functional groups.',
            'patterns': [
                ['[C;!a;X3](=O)[OX2H1]'],  # Aliphatic carboxylic acid
            ],
            'exclude_patterns': [
                ['[NX3]', '[OX2H]', '[SX2]']  # Exclude amines, hydroxyls, and sulfurs
            ],
            'logic': 'and',
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Low Fe/Hf Value (False): Modifiers containing bulky hydrophobic groups without additional coordinating groups.',
            'patterns': [
                ['[c]1[c][c][c][c][c]1'],  # Aromatic ring
                ['[C;!a;X3](=O)[OX2H1]']  # Carboxyl group
            ],
            'exclude_patterns': [
                ['[NX3]', '[OX2H]', '[SX2]']  # Exclude amines, hydroxyls, and sulfurs
            ],
            'logic': 'and',
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'Low Fe/Hf Value (False): Modifiers that are aromatic carboxylic acids with aldehyde groups adjacent to the carboxyl group.',
            'patterns': [
                ['[c][CX3](=O)[OX2H1]'],  # Aromatic carboxylic acid
                ['[c][CX3H]=O']  # Aldehyde group adjacent to carboxyl group
            ],
            'logic': 'and',
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'High Fe/Hf Value (True): Modifiers that are aromatic carboxylic acids fused with oxygen-containing heterocycles or additional carbonyl groups.',
            'patterns': [
                ['[O]', '[CX3](=O)'],  # Oxygen-containing heterocycle or carbonyl group
                ['[c][CX3](=O)[OX2H1]']  # Aromatic carboxylic acid
            ],
            'logic': 'and',
            'prediction': 1
        },
        {
            'number': 14,
            'description': 'High Fe/Hf Value (True): Modifiers containing both electron-donating groups and adjacent carbonyl groups on an aromatic ring providing multiple coordination sites.',
            'patterns': [
                ['[c][OX2H]', '[CX3]=O'],  # Hydroxyl and carbonyl groups on aromatic ring
                ['[c][CX3](=O)[OX2H1]']  # Aromatic carboxylic acid
            ],
            'logic': 'and',
            'prediction': 1
        },
    ]

    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(pat) for pat in group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for group in rule['exclude_patterns']:
                compiled_group = [Chem.MolFromSmarts(pat) for pat in group]
                compiled_excludes.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_excludes
        # Compile patterns for rules with high and low predictions
        if 'patterns_high' in rule:
            compiled_patterns_high = []
            for group in rule.get('patterns_high', []):
                compiled_group = [Chem.MolFromSmarts(pat) for pat in group]
                compiled_patterns_high.append(compiled_group)
            rule['compiled_patterns_high'] = compiled_patterns_high
        if 'patterns_low' in rule:
            compiled_patterns_low = []
            for group in rule.get('patterns_low', []):
                compiled_group = [Chem.MolFromSmarts(pat) for pat in group]
                compiled_patterns_low.append(compiled_group)
            rule['compiled_patterns_low'] = compiled_patterns_low

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = False
                # Check for rules with high and low predictions
                if 'compiled_patterns_high' in rule and 'compiled_patterns_low' in rule:
                    # Check high patterns
                    match_high = True
                    for compiled_group in rule['compiled_patterns_high']:
                        group_match = all(mol.HasSubstructMatch(pat) for pat in compiled_group)
                        if not group_match:
                            match_high = False
                            break
                    # Check low patterns
                    match_low = True
                    for compiled_group in rule['compiled_patterns_low']:
                        group_match = all(mol.HasSubstructMatch(pat) for pat in compiled_group)
                        if not group_match:
                            match_low = False
                            break
                    if match_high:
                        row.append(rule['prediction_high'])
                    elif match_low:
                        row.append(rule['prediction_low'])
                    else:
                        row.append(0)
                    continue
                # Check exclude patterns if any
                if 'compiled_exclude_patterns' in rule:
                    exclude_match = False
                    for compiled_group in rule['compiled_exclude_patterns']:
                        for pat in compiled_group:
                            if mol.HasSubstructMatch(pat):
                                exclude_match = True
                                break
                        if exclude_match:
                            break
                    if exclude_match:
                        row.append(0)
                        continue
                # Check required patterns
                if rule['logic'] == 'and':
                    match = True
                    for compiled_group in rule['compiled_patterns']:
                        group_match = any(mol.HasSubstructMatch(pat) for pat in compiled_group)
                        if not group_match:
                            match = False
                            break
                elif rule['logic'] == 'or':
                    match = False
                    for compiled_group in rule['compiled_patterns']:
                        group_match = any(mol.HasSubstructMatch(pat) for pat in compiled_group)
                        if group_match:
                            match = True
                            break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)

    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: Fe/Hf
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

---

- **Rule 1**: **Modifiers that are **aliphatic carboxylic acids with a terminal primary amino group (-NH₂) and without additional carboxyl groups** tend to have a high Fe/Hf value (`Fe/Hf_high_or_low_value = True`).**

  *Rationale*: The terminal amino group provides a strong coordination site for Fe(III), enhancing metal binding. The absence of additional carboxyl groups prevents potential negative interference with coordination.

  *Examples* (high Fe/Hf value):
    - **5-aminopentanoic acid** (`True`)
    - **7-aminoheptanoic acid** (`True`)
    - **8-aminooctanoic acid** (`True`)
    - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid** (`True`)

  *Counter-example* (low Fe/Hf value):
    - **(2S)-2-aminopentanedioic acid** (has an extra carboxyl group; `False`)

---

- **Rule 2**: **Modifiers containing **sulfur functional groups** (-SH or thioethers) along with a carboxylic acid group tend to have a high Fe/Hf value (`True`).**

  *Rationale*: Sulfur atoms coordinate strongly with Fe(III) due to their lone pair electrons and polarizability, enhancing metal binding through soft base-hard acid interactions.

  *Examples* (high Fe/Hf value):
    - **3-sulfanylpropanoic acid** (`True`)
    - **4-sulfanylbenzoic acid** (`True`)
    - **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid** (`True`)

---

- **Rule 3**: **Modifiers that are **aromatic carboxylic acids with strong electron-withdrawing groups (EWGs) at the para position** (e.g., nitro, bromomethyl) tend to have a high Fe/Hf value (`True`).**

  *Rationale*: EWGs increase the acidity of the carboxylic acid group, promoting deprotonation and enhancing the carboxylate's ability to coordinate with Fe(III).

  *Examples* (high Fe/Hf value):
    - **4-nitrobenzoic acid** (`True`)
    - **4-(bromomethyl)benzoic acid** (`True`)

  *Counter-examples* (low Fe/Hf value):
    - **4-formylbenzoic acid** (aldehyde group is a moderate EWG; `False`)

---

- **Rule 4**: **Modifiers with **flexible polyether chains** terminating with coordinating groups (e.g., carboxyl or amino groups) tend to have a high Fe/Hf value (`True`).**

  *Rationale*: Ether oxygen atoms offer multiple coordination sites, and the flexibility of the chain allows for effective multidentate binding with Fe(III), enhancing coordination strength.

  *Examples* (high Fe/Hf value):
    - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid** (`True`)
    - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid** (`True`)

---

- **Rule 5**: **Modifiers that are **aliphatic carboxylic acids without additional coordinating functional groups** tend to have a low Fe/Hf value (`False`).**

  *Rationale*: The lack of extra coordination sites limits the molecule's ability to bind effectively with Fe(III), resulting in lower metal incorporation.

  *Examples* (low Fe/Hf value):
    - **Octanoic acid** (`False`)
    - **4-oxoheptanedioic acid** (`False`)

---

- **Rule 6**: **Modifiers that are **aromatic carboxylic acids with electron-donating groups (EDGs) at the para position** tend to have a low Fe/Hf value (`False`).**

  *Rationale*: EDGs decrease the acidity of the carboxylic acid group, reducing the tendency of the carboxylate to coordinate with Fe(III).

  *Examples* (low Fe/Hf value):
    - **4-methylbenzoic acid** (`False`)
    - **4-aminobenzoic acid** (`False`)

---

- **Rule 7**: **Modifiers that are **aromatic carboxylic acids with phenolic hydroxyl groups** tend to have a low Fe/Hf value (`False`).**

  *Rationale*: Phenolic hydroxyl groups can form intramolecular hydrogen bonds with the carboxyl group, decreasing the availability of the carboxylate oxygen for Fe(III) coordination.

  *Examples* (low Fe/Hf value):
    - **5-(4-hydroxyphenyl)pentanoic acid** (`False`)
    - **3-(4-hydroxyphenyl)propanoic acid** (`False`)
    - **2-[(4-hydroxybenzoyl)amino]acetic acid** (`False`)

---

- **Rule 8**: **Modifiers that are **polyhydroxy aliphatic acids** (with multiple adjacent hydroxyl groups) tend to have a low Fe/Hf value (`False`).**

  *Rationale*: Multiple adjacent hydroxyl groups increase hydrophilicity and introduce steric hindrance, which can interfere with effective coordination to Fe(III).

  *Examples* (low Fe/Hf value):
    - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (`False`)
    - **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid** (`False`)

---

- **Rule 9**: **Modifiers that are **aromatic carboxylic acids substituted with pyridyl groups in positions favorable for coordination** tend to have a high Fe/Hf value (`True`).**

  *Rationale*: The pyridine nitrogen provides an additional coordination site for Fe(III), enhancing metal binding.

  *Examples* (high Fe/Hf value):
    - **4-pyridin-4-ylbenzoic acid** (`True`)
    - **4-pyridin-4-ylbutanoic acid** (`True`)

  *Counter-example* (low Fe/Hf value):
    - **Pyridine-3-carboxylic acid** (pyridine nitrogen not favorably positioned; `False`)

---

- **Rule 10**: **Modifiers that are **aliphatic carboxylic acids with a terminal hydroxyl group (-OH) and no additional hydroxyl or carboxyl groups** tend to have a high Fe/Hf value (`True`).**

  *Rationale*: The terminal hydroxyl group offers an additional coordination site, allowing for chelation with Fe(III) through both the hydroxyl and carboxyl groups.

  *Example* (high Fe/Hf value):
    - **7-hydroxyheptanoic acid** (`True`)

  *Counter-example* (low Fe/Hf value):
    - **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid** (multiple hydroxyl groups; `False`)

---

- **Rule 11**: **Modifiers that are **aromatic carboxylic acids fused with oxygen-containing heterocycles** tend to have a high Fe/Hf value (`True`).**

  *Rationale*: Additional heteroatoms in the fused ring system provide more coordination sites, promoting stronger chelation with Fe(III).

  *Example* (high Fe/Hf value):
    - **1,3-dioxo-2-benzofuran-5-carboxylic acid** (`True`)

---

- **Rule 12**: **Modifiers that are **amino acids with hydrophobic side chains** tend to have a high Fe/Hf value (`True`), whereas those with polar or bulky aromatic side chains tend to have a low Fe/Hf value (`False`).**

  *Rationale*: Hydrophobic side chains do not interfere with metal coordination, while polar or bulky side chains can introduce steric hindrance or compete for coordination.

  *Examples*:
    - High Fe/Hf value:
      - **(2S)-2-amino-3-phenylpropanoic acid** (`True`)
    - Low Fe/Hf value:
      - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (`False`)

---

- **Rule 13**: **Modifiers containing **perfluorinated chains** tend to have a low Fe/Hf value (`False`).**

  *Rationale*: The strong electron-withdrawing effect of perfluoroalkyl groups reduces the electron density on the carboxylate oxygen, diminishing its ability to coordinate with Fe(III).

  *Example* (low Fe/Hf value):
    - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid** (`False`)

---

**End of Rules**

---

These rules describe how specific combinations of functional groups and structural features in the molecular modifiers influence the Fe/Hf ratio by affecting the coordination of Fe(III) within the catalyst system.

**Coverage and Balance**:

- **Coverage**: The rules encompass a broad range of modifiers in the dataset, focusing on common functional groups like amino groups, sulfur-containing groups, hydroxyl groups, ethers, electron-withdrawing and electron-donating substituents, and heterocyclic systems. This allows for the prediction of the Fe/Hf value for most modifiers based on their structural features.

- **Balance**: A suitable balance is maintained between simple rules with higher coverage (e.g., **Rule 5** on aliphatic acids without additional functional groups) and more complex rules with lower coverage (e.g., **Rule 11** on modifiers fused with oxygen-containing heterocycles). This balance facilitates general predictions while capturing specific cases where unique structural features significantly impact Fe(III) coordination.

**Applicability**:

- Each rule clearly predicts whether a modifier will result in a high or low Fe/Hf value based on its structural description, making them useful for evaluating new modifiers in future research.

**Rationale**:

- The rules are grounded in fundamental principles of coordination chemistry and physical-organic chemistry. Functional groups known to coordinate effectively with Fe(III)—such as amino, sulfur-containing, hydroxyl, ether, and pyridine nitrogen groups—are associated with high Fe/Hf values. Electron-withdrawing and electron-donating effects influence the acidity and coordination ability of carboxylic acids, impacting Fe(III) binding. Steric factors and intramolecular interactions (like hydrogen bonding) are also considered, as they can hinder effective coordination.

By applying these rules, researchers can better understand how to design and select molecular modifiers to control the Fe/Hf ratio, ultimately optimizing the yield of the remote δ-C(sp³)–H bond functionalization reaction.

---

**Note**: These rules have been refined to improve clarity and accuracy based on the dataset provided and underlying chemical principles. They aim to provide a comprehensive understanding of how different structural features influence Fe(III) coordination.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.5142857142857142; Test Accuracy: 0.0
    Train Support: 0.0; Test Support: 0.0
    Train Confidence: 0.5; Test Confidence: 0.5
    Train Lift: 1.0; Test Lift: NONE
    Train Leverage: 0.0; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define the SMARTS patterns for functional groups
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    
    # Aliphatic primary amine (-NH2)
    primary_aliphatic_amine = '[NX3;H2][CX4]'
    
    # Thiol group (-SH)
    thiol = '[SX2H]'
    
    # Thioether (-S-)
    thioether = '[SX2][#6]'

    # Sulfur functional groups (-SH or -S-)
    sulfur_groups = [thiol, thioether]

    # Aromatic carboxylic acid
    aromatic_carboxylic_acid = '[c][CX3](=O)[OX2H1]'

    # Electron-withdrawing groups (EWGs)
    nitro_group = '[NX3](=O)=O'
    halogens = '[F,Cl,Br,I]'
    trifluoromethyl = '[CX4](F)(F)F'

    # Electron-donating groups (EDGs)
    amino_group = '[NX3;H2,H1][#6]'
    methoxy_group = '[OX2][CH3]'
    hydroxyl_group = '[OX2H]'
    edg_groups = [amino_group, methoxy_group, hydroxyl_group]

    # Polyether chain (simplified as two or more ether linkages)
    ether_linkage = '[#6][OX2][#6]'
    
    # Aromatic ring
    aromatic_ring = '[a]'

    # Perfluorinated chains
    perfluoro_alkane = '[CX4](F)(F)(F)'
    perfluoro_alkene = '[CX3](F)(F)=C(F)[F]'

    # Pyridine ring
    pyridine = 'n1ccccc1'

    # Phenolic hydroxyl group
    phenolic_hydroxyl = '[c][OX2H]'

    rules = [
        {
            'number': 1,
            'description': 'Rule 1: Modifiers that are aliphatic carboxylic acids with a terminal primary amino group (-NH2) and without additional carboxyl groups.',
            'patterns': [
                carboxylic_acid,
                primary_aliphatic_amine,
            ],
            'exclude_patterns': [
                aromatic_ring,
            ],
            'count_patterns': {
                carboxylic_acid: 1,
            },
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Rule 2: Modifiers containing sulfur functional groups (-SH or thioethers) along with a carboxylic acid group.',
            'patterns': [
                carboxylic_acid,
                sulfur_groups,
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Rule 3: Modifiers that are aromatic carboxylic acids with strong EWGs at the para position (e.g., nitro, bromomethyl).',
            'patterns': [
                aromatic_carboxylic_acid,
                [halogens, nitro_group],
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Rule 4: Modifiers with flexible polyether chains terminating with coordinating groups (e.g., carboxyl or amino groups).',
            'patterns': [
                ether_linkage,
                [carboxylic_acid, amino_group],
            ],
            'count_threshold': {
                ether_linkage: 2,
            },
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Rule 5: Modifiers that are aliphatic carboxylic acids without additional coordinating functional groups.',
            'patterns': [
                carboxylic_acid,
            ],
            'exclude_patterns': [
                amino_group,
                hydroxyl_group,
                sulfur_groups,
                ether_linkage,
                halogens,
                aromatic_ring,
            ],
            'prediction': -1
        },
        {
            'number': 6,
            'description': 'Rule 6: Modifiers that are aromatic carboxylic acids with EDGs at the para position.',
            'patterns': [
                aromatic_carboxylic_acid,
                edg_groups,
            ],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Rule 7: Modifiers that are aromatic carboxylic acids with phenolic hydroxyl groups.',
            'patterns': [
                aromatic_carboxylic_acid,
                phenolic_hydroxyl,
            ],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Rule 8: Modifiers that are polyhydroxy aliphatic acids (with multiple adjacent hydroxyl groups).',
            'patterns': [
                carboxylic_acid,
                hydroxyl_group,
            ],
            'count_threshold': {
                hydroxyl_group: 2,
            },
            'exclude_patterns': [
                aromatic_ring,
            ],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Rule 9: Modifiers that are aromatic carboxylic acids substituted with pyridyl groups.',
            'patterns': [
                aromatic_carboxylic_acid,
                pyridine,
            ],
            'prediction': 1
        },
        {
            'number': 10,
            'description': 'Rule 10: Modifiers that are aliphatic carboxylic acids with a terminal hydroxyl group (-OH) and no additional hydroxyl or carboxyl groups.',
            'patterns': [
                carboxylic_acid,
                hydroxyl_group,
            ],
            'exclude_patterns': [
                aromatic_ring,
            ],
            'count_patterns': {
                carboxylic_acid: 1,
                hydroxyl_group:1,
            },
            'prediction': 1
        },
        {
            'number': 11,
            'description': 'Rule 11: Modifiers that are aromatic carboxylic acids fused with oxygen-containing heterocycles.',
            'patterns': [
                aromatic_carboxylic_acid,
                '[o]1cccc1',  # Furan ring
            ],
            'prediction': 1
        },
        {
            'number': 12,
            'description': 'Rule 12: Modifiers that are amino acids with hydrophobic side chains (high) or polar/bulky aromatic side chains (low).',
            'patterns': [
                '[NX3;H2][CX4;!$(C[OX2H])][CX3](=O)[OX2H1]',
            ],
            'substructure_patterns': {
                'hydrophobic': [
                    '[CX4][CH3]',  # Methyl group (alanine)
                    '[CX4][CX4][CH3]',  # Ethyl group (valine)
                    '[CX4][c1ccccc1]',  # Phenyl group (phenylalanine)
                ],
                'polar_aromatic': [
                    '[CX4][c1c[nH]c2c1cccc2]',  # Indole ring (tryptophan)
                    '[CX4][c1ccncc1]',  # Pyridine ring
                    '[CX4][CX3](=O)[NX3]',  # Amide linkage (glutamine)
                    '[CX4][OX2H]',  # Hydroxyl side chain (serine)
                ],
            },
            'prediction': None  # Prediction depends on side chain type
        },
        {
            'number':13,
            'description': 'Rule 13: Modifiers containing perfluorinated chains.',
            'patterns': [
                perfluoro_alkane,
            ],
            'prediction': -1
        },
    ]

    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for pattern in rule.get('patterns', []):
            # If pattern is a list of patterns, compile each
            if isinstance(pattern, list):
                compiled_subpatterns = [Chem.MolFromSmarts(pat) for pat in pattern]
                compiled_patterns.append(compiled_subpatterns)
            else:
                compiled_patterns.append([Chem.MolFromSmarts(pattern)])
        rule['compiled_patterns'] = compiled_patterns

        # Compile exclude patterns
        exclude_patterns = rule.get('exclude_patterns', [])
        compiled_exclude = []
        for pattern in exclude_patterns:
            # If pattern is a list of patterns, compile each
            if isinstance(pattern, list):
                compiled_subpatterns = [Chem.MolFromSmarts(pat) for pat in pattern]
                compiled_exclude.extend(compiled_subpatterns)
            else:
                compiled_exclude.append(Chem.MolFromSmarts(pattern))
        rule['compiled_exclude_patterns'] = compiled_exclude

        # Compile substructure patterns for Rule 12
        if rule.get('substructure_patterns'):
            compiled_substructure_patterns = {}
            for key, patterns in rule['substructure_patterns'].items():
                compiled_substructure_patterns[key] = [Chem.MolFromSmarts(pat) for pat in patterns]
            rule['compiled_substructure_patterns'] = compiled_substructure_patterns

    # Initialize results
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True

                # Check exclude patterns
                for pat in rule.get('compiled_exclude_patterns', []):
                    if mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue

                # Check required patterns
                for group in rule['compiled_patterns']:
                    group_match = False
                    for pat in group:
                        matches = mol.GetSubstructMatches(pat)
                        if matches:
                            # If a count threshold is specified for this pattern
                            count_thresholds = rule.get('count_threshold', {})
                            if pat.GetSmarts() in count_thresholds:
                                if len(matches) >= count_thresholds[pat.GetSmarts()]:
                                    group_match = True
                                    break
                            else:
                                group_match = True
                                break
                    if not group_match:
                        match = False
                        break

                # Check count patterns
                count_patterns = rule.get('count_patterns', {})
                for smarts_pattern, count_required in count_patterns.items():
                    pat = Chem.MolFromSmarts(smarts_pattern)
                    matches = mol.GetSubstructMatches(pat)
                    if len(matches) != count_required:
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue

                # For Rule 12, need special handling
                if rule['number'] ==12:
                    is_hydrophobic = False
                    is_polar = False
                    # Check hydrophobic side chains
                    for pat in rule['compiled_substructure_patterns']['hydrophobic']:
                        if mol.HasSubstructMatch(pat):
                            is_hydrophobic = True
                            break
                    # Check polar/aromatic side chains
                    for pat in rule['compiled_substructure_patterns']['polar_aromatic']:
                        if mol.HasSubstructMatch(pat):
                            is_polar = True
                            break
                    if is_hydrophobic:
                        row.append(1)
                    elif is_polar:
                        row.append(-1)
                    else:
                        # Side chain not identified, default to 0
                        row.append(0)
                else:
                    if match:
                        row.append(rule['prediction'])
                    else:
                        row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)

    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df
--------------------------------------------------