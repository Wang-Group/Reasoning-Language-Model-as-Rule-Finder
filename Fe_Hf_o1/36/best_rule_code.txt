def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups

    # Carboxylic acid group
    carboxylic_acid = ['[CX3](=O)[OX1H0-]', '[CX3](=O)[OX2H1]']
    
    # Sulfur-containing groups: thiol and thioether
    thiol = '[SX2H]'
    thioether = '[SX2][#6]'
    
    # Primary amine
    primary_amine = '[NX3H2]'
    
    # Terminal primary amine at least four carbons away from carboxylic acid (omega-amino acid)
    # This is difficult to express in SMARTS due to variable chain length
    # We can define patterns for specific chain lengths (e.g., 4, 5, 6 carbons)
    omega_amino_acids = [
        '[NX3H2][CH2][CH2][CH2][CH2][CX3](=O)[OX1H0-,OX2H1]',
        '[NX3H2][CH2][CH2][CH2][CH2][CH2][CX3](=O)[OX1H0-,OX2H1]',
        '[NX3H2][CH2][CH2][CH2][CH2][CH2][CH2][CX3](=O)[OX1H0-,OX2H1]'
    ]
    
    # Ether linkage in polyether chain
    ether_linkage = '[#6][OX2][#6][OX2][#6]'
    
    # Halogens or nitro groups on aromatic ring
    halogen_on_aromatic = '[c][F,Cl,Br,I]'
    nitro_group = '[NX3+(=O)[O-]]'
    nitro_on_aromatic = '[c][NX3+](=O)[O-]'
    
    # Electron-donating groups on aromatic ring
    amino_on_aromatic = '[c][NX3;H2,H1][#6]'
    hydroxyl_on_aromatic = '[c][OX2H]'
    methoxy_on_aromatic = '[c][OX2][CH3]'
    
    # Ketone or aldehyde adjacent to carboxylic acid
    alpha_ketone = '[#6][CX3](=O)[CX3](=O)[OX1H0-,OX2H1]'
    
    # Aldehyde group on aromatic ring
    aldehyde_on_aromatic = '[c][CX3H](=O)'
    
    # Polyhydroxylated carboxylic acids (sugar acids)
    polyhydroxyl = '[OX2H][CX4][OX2H]'
    
    # Dicarboxylic acids without additional coordinating groups
    dicarboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1][#6][CX3](=O)[OX1H0-,OX2H1]'
    
    # Define rules
    rules = [
        {
            'number': 1,
            'description': 'Modifiers containing both a carboxylic acid group and a sulfur-containing functional group (thiol or thioether) predict a high Fe/Hf value (True).',
            'patterns': [
                carboxylic_acid,
                [thiol, thioether]
            ],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers that are omega-amino acids predict a high Fe/Hf value (True).',
            'patterns': [
                omega_amino_acids
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers with carboxylic acid groups and ether linkages (polyether chains) predict a high Fe/Hf value (True).',
            'patterns': [
                carboxylic_acid,
                [ether_linkage]
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers with aromatic carboxylic acids substituted at the para position with electron-withdrawing groups (nitro, halomethyl, pyridyl) predict a high Fe/Hf value (True).',
            'patterns': [
                '[c]1[c][c][c][c][c]1[CX3](=O)[OX1H0-,OX2H1]',
                ['[c]1[c][c]([c][c][c]1)[C][F,Cl,Br,I]', '[c]1[c][c]([c][c][c]1)[NX3+](=O)[O-]', '[c]1[c][c]([c][c][c]1)[n]']
            ],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers with long aliphatic chains terminating with hydroxyl groups, along with a carboxylic acid group, predict a high Fe/Hf value (True).',
            'patterns': [
                carboxylic_acid,
                '[#6][CH2][CH2][CH2][CH2][CH2][CH2][OX2H]'
            ],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers that are amino acids with side chains containing small aromatic rings predict a high Fe/Hf value (True).',
            'patterns': [
                carboxylic_acid,
                '[NX3][CX4][CX3][c]'
            ],
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'Modifiers that are simple aliphatic carboxylic acids without additional coordinating functional groups predict a low Fe/Hf value (False).',
            'patterns': [
                carboxylic_acid
            ],
            'exclude_patterns': [
                [thiol, thioether, primary_amine, ether_linkage]
            ],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Modifiers containing perfluorinated alkyl chains with a carboxylic acid group predict a low Fe/Hf value (False).',
            'patterns': [
                carboxylic_acid,
                '[CX4]([F])[F]'
            ],
            'prediction': -1
        },
        {
            'number': 9,
            'description': "Modifiers containing nitrogen heterocycles where the nitrogen's lone pair is involved in aromaticity and not accessible for coordination predict a low Fe/Hf value (False).",
            'patterns': [
                carboxylic_acid,
                '[nH0]'
            ],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers that are polyhydroxylated carboxylic acids (e.g., sugar acids) predict a low Fe/Hf value (False).',
            'patterns': [
                carboxylic_acid,
                polyhydroxyl
            ],
            'prediction': -1
        },
        # Add more rules as per the definitions (Rules 11 to 15)
    ]
    
    # Compile patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(p) for p in group] if isinstance(group, list) else [Chem.MolFromSmarts(group)]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for group in rule['exclude_patterns']:
                compiled_group = [Chem.MolFromSmarts(p) for p in group]
                compiled_excludes.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_excludes
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        matches = mol.GetSubstructMatches(pat)
                        if matches:
                            group_match = True
                            break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df