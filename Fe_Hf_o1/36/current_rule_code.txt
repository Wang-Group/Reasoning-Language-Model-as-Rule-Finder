def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX1H1]'
    
    # Primary aliphatic amine group (-NH2)
    primary_aliphatic_amine = '[NX3H2][CX4]'
    
    # Aliphatic chain with terminal amino and carboxylic acid groups (ω-amino acid)
    omega_amino_acid = '[NX3H2][CH2]{3,}[CX3](=O)[OX1H1]'
    
    # Aromatic carboxylic acid (benzoic acid)
    aromatic_carboxylic_acid = 'c1ccccc1C(=O)[O;H]'
    
    # Electron-withdrawing groups (EWGs)
    nitro_group = '[N+](=O)[O-]'
    bromomethyl_group = '[CH2Br]'
    
    # Electron-donating groups (EDGs)
    amino_group = '[NH2]'
    methyl_group = '[CH3]'
    hydroxy_group = '[OH]'
    
    # Thiol group (-SH)
    thiol_group = '[SX2H]'
    
    # Pyridine ring
    pyridine_ring = 'n1ccccc1'
    
    # Multiple hydroxyl groups (polyols)
    hydroxyl_group = '[OX2H]'
    
    # Aromatic ring with ortho-hydroxyl or ortho-carbonyl groups
    ortho_hydroxyl_carbonyl = '[c][c](O)[c](C(=O)O)[c]'
    
    # Perfluorinated alkyl chain attached to carboxylic acid
    perfluoro_alkyl_carboxylic_acid = 'C(F)(F)F'
    
    # Methoxy group on aromatic ring
    methoxy_on_aromatic = 'c[OX2][CH3]'
    
    # Indole ring (tryptophan side chain)
    indole_ring = 'c1cc2ccccc2[nH]1'
    
    # Aromatic amide group adjacent to aromatic ring
    aromatic_amide = 'c1ccc(cc1)C(=O)N'
    
    # Aliphatic chain containing ether groups and terminal carboxylic acid
    aliphatic_ether_chain = '[#6]-O-[#6]-O-[#6]-C(=O)[O;H]'
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are ω-amino acids (aliphatic chains with terminal amino and carboxylic acid groups) predict a high Fe/Hf value (True).',
            'patterns': [omega_amino_acid],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers that are aromatic carboxylic acids substituted at the para position with strong electron-withdrawing groups (e.g., nitro, bromomethyl) predict a high Fe/Hf value (True).',
            'patterns': ['[cAH]1[cAH][cAH]([C](=O)[O;H])[cAH][cAH]([$(N(=O)=O),$(CBr)])c1'],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers that are aromatic carboxylic acids substituted at the para position with electron-donating groups (e.g., amino, methyl, hydroxy) predict a low Fe/Hf value (False).',
            'patterns': ['[cAH]1[cAH][cAH]([C](=O)[O;H])[cAH][cAH]([$(NH2),$(CH3),$(OH)])c1'],
            'prediction': -1
        },
        {
            'number': 4,
            'description': 'Modifiers containing both a carboxylic acid group and a thiol group (-SH) predict a high Fe/Hf value (True).',
            'patterns': [carboxylic_acid, thiol_group],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers with pyridine rings that can act as ligands predict a high Fe/Hf value (True).',
            'patterns': [pyridine_ring, carboxylic_acid],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers that are amino acids with side chains containing additional coordinating groups (e.g., amino, thiol, methoxy) predict a high Fe/Hf value (True).',
            'patterns': ['[NX3][CX4][CX3](=O)[OX1H1]', '[CX4][NX3H2]', '[CX4][SX2H]', '[CX4][OX2][CH3]'],
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'Modifiers with flexible aliphatic chains containing ether groups and a terminal carboxylic acid predict a high Fe/Hf value (True).',
            'patterns': [aliphatic_ether_chain],
            'prediction': 1
        },
        {
            'number': 8,
            'description': 'Modifiers that are simple aliphatic carboxylic acids without additional coordinating functional groups predict a low Fe/Hf value (False).',
            'patterns': [carboxylic_acid],
            'exclude_patterns': [primary_aliphatic_amine, thiol_group, aliphatic_ether_chain, hydroxyl_group],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers with multiple hydroxyl groups and a carboxylic acid predict a low Fe/Hf value (False).',
            'patterns': [carboxylic_acid, hydroxyl_group],
            'count_threshold': {'[OX2H]': 2},
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers that are aromatic carboxylic acids with ortho-hydroxyl or ortho-carbonyl groups predict a low Fe/Hf value (False).',
            'patterns': ['[cAH]1[cAH]([OH])[cAH][cAH]([C](=O)[O;H])[cAH]c1'],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Modifiers containing perfluorinated alkyl chains attached to a carboxylic acid predict a low Fe/Hf value (False).',
            'patterns': [carboxylic_acid, perfluoro_alkyl_carboxylic_acid],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'Modifiers with aromatic rings and methoxy substituents predict a high Fe/Hf value (True).',
            'patterns': [methoxy_on_aromatic, aromatic_carboxylic_acid],
            'prediction': 1
        },
        {
            'number': 13,
            'description': 'Modifiers that are amino acids with bulky aromatic side chains (e.g., indole from tryptophan) predict a low Fe/Hf value (False).',
            'patterns': [indole_ring, '[NX3][CX3](=O)[OX1H1]'],
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'Modifiers with aliphatic chains containing a hydroxyl group and a carboxylic acid predict a high Fe/Hf value (True), provided there is minimal steric hindrance.',
            'patterns': [carboxylic_acid, hydroxyl_group],
            'exclude_patterns': [hydroxyl_group + hydroxyl_group],  # Exclude multiple hydroxyl groups
            'prediction': 1
        },
        {
            'number': 15,
            'description': 'Modifiers that are aromatic carboxylic acids with side chains that may hinder coordination through steric or electronic effects predict a low Fe/Hf value (False).',
            'patterns': [aromatic_carboxylic_acid, aromatic_amide],
            'prediction': -1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        try:
            compiled_patterns = [Chem.MolFromSmarts(p) for p in rule.get('patterns', [])]
            rule['compiled_patterns'] = compiled_patterns
            # Compile exclude patterns if any
            if 'exclude_patterns' in rule:
                compiled_excludes = [Chem.MolFromSmarts(p) for p in rule['exclude_patterns']]
                rule['compiled_exclude_patterns'] = compiled_excludes
        except Exception as e:
            # Handle exception if SMARTS pattern cannot be compiled
            rule['compiled_patterns'] = []
            rule['compiled_exclude_patterns'] = []
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for pat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for pat in rule['compiled_patterns']:
                    matches = mol.GetSubstructMatches(pat)
                    if not matches:
                        match = False
                        break
                    # If a count threshold is specified for this pattern
                    if 'count_threshold' in rule and pat.GetSmarts() in rule['count_threshold']:
                        threshold = rule['count_threshold'][pat.GetSmarts()]
                        if len(matches) < threshold:
                            match = False
                            break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df