def rule2matrix(smiles_list):
    # Define the SMARTS patterns for each rule
    
    # Rule 1: Aliphatic amino acids with side chains containing an amino or acetamido group (with six or more carbons) result in a high Fe/Hf value.
    rule1_patterns = [
        Chem.MolFromSmarts('[NX3H2][C][C][C][C][C;$(C(N))[CX3](=O)[OX1H]]'),  # Amino acid with side chain containing amino group
        Chem.MolFromSmarts('[NX3H2][C][C][C][C][C;$(C(NC(=O)C))[CX3](=O)[OX1H]]')  # Amino acid with side chain containing acetamido group
    ]
    
    # Rule 2: Aromatic carboxylic acids with electron-withdrawing groups at the para position result in a high Fe/Hf value.
    rule2_patterns = [
        Chem.MolFromSmarts('c1cc([CX3](=O)[OX1H])ccc1[F,Cl,Br,I,N+](=O)[O-]'),  # Para-substituted EWG
        Chem.MolFromSmarts('c1cc([CX3](=O)[OX1H])ccc1C(=O)[#6]')  # Para-acyl group
    ]
    
    # Rule 3: Modifiers containing both a thiol (-SH) group and a carboxylic acid group
    rule3_pattern = Chem.MolFromSmarts('[#6][SX2H].[CX3](=O)[OX1H]')
    
    # Rule 4: Modifiers with pyridine rings attached via the para position to a carboxylic acid group
    rule4_pattern = Chem.MolFromSmarts('c1ccncc1-c2ccccc2C(=O)O')
    
    # Rule 5: Modifiers with flexible polyether chains terminating with a carboxylic acid or amino group
    rule5_patterns = [
        Chem.MolFromSmarts('[OX2][CH2][OX2][CH2][OX2][CH2][CX3](=O)[OX1H]'),  # Polyether chain ending with COOH
        Chem.MolFromSmarts('[OX2][CH2][OX2][CH2][OX2][CH2][NH2]')  # Polyether chain ending with NH2
    ]
    
    # Rule 6: Aliphatic carboxylic acids with medium-length (C7â€“C8) chains and terminal hydroxyl or amino groups
    rule6_patterns = [
        Chem.MolFromSmarts('[CX3](=O)[OX1H][CH2][CH2][CH2][CH2][CH2][CH2][OX2H]'),  # C7 chain with terminal OH
        Chem.MolFromSmarts('[CX3](=O)[OX1H][CH2][CH2][CH2][CH2][CH2][CH2][NH2]')   # C7 chain with terminal NH2
    ]
    
    # Rule 7: Amino acids with small or non-coordinating side chains
    rule7_pattern = Chem.MolFromSmarts('[NX3H2][CH][C](C)[CX3](=O)[OX1H]')
    
    # Rule 8: Aromatic carboxylic acids with electron-donating substituents at the para position
    rule8_patterns = [
        Chem.MolFromSmarts('c1cc([CX3](=O)[OX1H])cc(c1)[OX2H]'),  # Para-hydroxybenzoic acid
        Chem.MolFromSmarts('c1cc([CX3](=O)[OX1H])cc(c1)[OCH3]')   # Para-methoxybenzoic acid
    ]
    
    # Rule 9: Modifiers containing multiple hydroxyl groups (polyols) without strong coordinating groups
    rule9_pattern = Chem.MolFromSmarts('[#6][OX2H][#6][OX2H][#6][OX2H][CX3](=O)[OX1H]')
    
    # Rule 10: Modifiers with aldehyde groups adjacent to carboxylic acids
    rule10_pattern = Chem.MolFromSmarts('[CX3H](=O)c[CX3](=O)[OX1H]')
    
    # Rule 11: Modifiers lacking strong coordinating groups and containing perfluoroalkyl chains
    rule11_pattern = Chem.MolFromSmarts('[CX3](=O)[OX1H][CX4](F)(F)[F]')
    
    # Combine all rules into a list
    rules = [
        {'number': 1, 'patterns': rule1_patterns, 'prediction': 1},
        {'number': 2, 'patterns': rule2_patterns, 'prediction': 1},
        {'number': 3, 'patterns': [rule3_pattern], 'prediction': 1},
        {'number': 4, 'patterns': [rule4_pattern], 'prediction': 1},
        {'number': 5, 'patterns': rule5_patterns, 'prediction': 1},
        {'number': 6, 'patterns': rule6_patterns, 'prediction': 1},
        {'number': 7, 'patterns': [rule7_pattern], 'prediction': -1},
        {'number': 8, 'patterns': rule8_patterns, 'prediction': -1},
        {'number': 9, 'patterns': [rule9_pattern], 'prediction': -1},
        {'number': 10, 'patterns': [rule10_pattern], 'prediction': -1},
        {'number': 11, 'patterns': [rule11_pattern], 'prediction': -1}
    ]
    
    # Initialize the results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            match = False
            try:
                for pattern in rule['patterns']:
                    if mol.HasSubstructMatch(pattern):
                        match = True
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df