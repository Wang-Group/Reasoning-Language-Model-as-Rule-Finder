def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    primary_aliphatic_amine = '[NX3H2][CX4]'
    thiol_group = '[SX2H]'
    thioether_group = '[SX2][#6]'
    ether_linkage = '[#6][OX2][#6]'
    pyridine_ring = '[n][a][a][a][a][a]'
    halogen_on_aromatic = '[c][F,Cl,Br,I]'
    nitro_group_on_aromatic = '[c][N+](=O)[O-]'
    methyl_on_aromatic = '[c][CH3]'
    methoxy_on_aromatic = '[c][OCH3]'
    hydroxyl_on_aromatic = '[c][OH]'
    hydroxyl_group = '[OX2H]'
    aldehyde_on_aromatic = '[c][CX3H](=O)'
    fluorinated_alkyl = '[CX4]([F])([F])[F]'
    aromatic_carboxylic_acid = '[c][CX3](=O)[OX2H1]'
    amino_acid_aromatic_side_chain = '[NX3][CX4][CX4][c]1[c][c][c][c][c]1'
    multiple_carboxylic_acids = '[CX3](=O)[OX2H1].[CX3](=O)[OX2H1]'

    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'High Fe/Hf Value (True): Modifiers that are ω-amino aliphatic carboxylic acids—linear aliphatic chains with a terminal amino group (-NH2) at the end opposite the carboxylate group.',
            'patterns': [[primary_aliphatic_amine], [carboxylic_acid]],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'High Fe/Hf Value (True): Modifiers capable of forming five-membered chelate rings through adjacent amino and carboxylate groups on short (four-carbon) aliphatic chains.',
            'patterns': [[primary_aliphatic_amine], [carboxylic_acid]],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'High Fe/Hf Value (True): Modifiers that are aromatic carboxylic acids with strong electron-withdrawing groups—such as nitro (-NO2) or halogens (e.g., bromo -Br)—attached directly to the aromatic ring.',
            'patterns': [[aromatic_carboxylic_acid], [halogen_on_aromatic, nitro_group_on_aromatic]],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'High Fe/Hf Value (True): Modifiers containing thiol (-SH) groups in proximity to carboxylate groups.',
            'patterns': [[thiol_group], [carboxylic_acid]],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'High Fe/Hf Value (True): Modifiers that are aromatic carboxylic acids with pyridine rings or pyridinyl substituents capable of coordinating through nitrogen atoms.',
            'patterns': [[pyridine_ring], [carboxylic_acid]],
            'prediction': 1
        },
        # Additional rules (6 to 15) should be added here following the same structure
    ]

    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(p) for p in group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for group in rule['exclude_patterns']:
                compiled_group = [Chem.MolFromSmarts(p) for p in group]
                compiled_excludes.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_excludes

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        matches = mol.GetSubstructMatches(pat)
                        if matches:
                            group_match = True
                            break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)

    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df
