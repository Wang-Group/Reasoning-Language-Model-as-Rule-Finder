def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    
    # Primary amino group (-NH2)
    primary_amine = '[NX3;H2]'
    
    # Terminal primary amino group with chain length of four or more carbons
    rule1_pattern = '[NX3;H2][CH2]{3,}[CX3](=O)[OX2H1]'
    
    # Aromatic carboxylic acid
    aromatic_carboxylic_acid = '[c][CX3](=O)[OX2H1]'
    
    # Electron-withdrawing groups (EWGs) at para position
    nitro_group = '[NX3](=O)=O'
    bromoethyl_group = '[CH2][Br]'
    pyridyl_ring = 'n1cccc1'
    
    # Patterns for Rule 2 (aromatic carboxylic acid with EWG at para position)
    rule2_patterns = [
        ('[#6;c]1:[#6;c]:[#6;c]:[#6;c]:[#6;c]:[#6;c]1[CX3](=O)[OX2H1]', '[#6;c]1:[#6;c]:[#6;c]:[#6;c]([N+](=O)[O-]):[#6;c]:[#6;c]1'),  # Nitro group at para position
        ('[#6;c]1:[#6;c]:[#6;c]:[#6;c]:[#6;c]:[#6;c]1[CX3](=O)[OX2H1]', '[#6;c]1:[#6;c]:[#6;c]:[#6;c]([CH2Br]):[#6;c]:[#6;c]1'),          # Bromomethyl group at para position
        ('[#6;c]1:[#6;c]:[#6;c]:[#6;c]:[#6;c]:[#6;c]1[CX3](=O)[OX2H1]', 'c1ccncc1')                                                         # Pyridyl ring
    ]
    
    # Thiol group (-SH)
    thiol = '[SX2H]'
    
    # Ether linkage (-O-)
    ether_linkage = '[#6][OX2][#6]'
    
    # Hydroxyl group (-OH)
    hydroxyl_group = '[OX2H]'
    
    # Multiple adjacent hydroxyl groups (sugar-like structures)
    polyol = '[#6][OX2H][#6][OX2H][#6]'
    
    # Electron-donating groups (EDGs) on aromatic rings
    aromatic_hydroxyl = '[c][OX2H]'
    aromatic_amino = '[c][NX3;H2,H1]'
    aromatic_methyl = '[c][CH3]'
    
    # Carbonyl groups adjacent to the carboxyl group
    adjacent_carbonyl = '[CX3](=O)[#6][CX3](=O)'  # General pattern for adjacent carbonyl groups
    
    # Fluorinated alkyl chains or trifluoromethyl groups
    fluorinated_chain = '[#6][CX4]([F])([F])[F]'
    
    # Rigid heteroaromatic rings attached to carboxyl group without additional coordinating groups
    heteroaromatic_carboxylic_acid = '[n,o,s][c][CX3](=O)[OX2H1]'
    
    # Bulky or heterocyclic side chains in amino acids
    bulky_amino_acid = '[NX3;H2][CX4][CX3](=[OX1])[C,N][c]'  # Simplified pattern for amino acids with side chains containing rings
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Aliphatic carboxylic acids with a terminal primary amino group (-NH2) and a carbon chain length of four or more carbons.',
            'patterns': [rule1_pattern],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Aromatic carboxylic acids with strong electron-withdrawing groups (EWGs) at the para position.',
            'complex_patterns': rule2_patterns,
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers containing both thiol groups (-SH) and carboxylic acid groups.',
            'patterns': [thiol, carboxylic_acid],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers with ether linkages in the backbone and terminal amino groups.',
            'patterns': [ether_linkage, primary_amine],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Aliphatic carboxylic acids with terminal hydroxyl groups (-OH) on a carbon chain of six or more carbons.',
            'patterns': ['[OX2H][CH2]{5,}[CX3](=O)[OX2H1]'],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Amino acids with small to medium-sized side chains that can participate in coordination.',
            'patterns': ['[NX3;H2][CX4][CX3](=[OX1])[OX2H]'],
            'exclude_patterns': [bulky_amino_acid],
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'Aromatic carboxylic acids with electron-donating groups (EDGs) at the para position.',
            'patterns': [aromatic_carboxylic_acid],
            'edg_patterns': [aromatic_hydroxyl, aromatic_amino, aromatic_methyl],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Modifiers with multiple adjacent hydroxyl groups near the carboxyl group.',
            'patterns': [polyol, carboxylic_acid],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers containing additional carbonyl groups adjacent to the carboxyl group.',
            'patterns': [adjacent_carbonyl],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers with fluorinated alkyl chains or trifluoromethyl groups.',
            'patterns': [fluorinated_chain],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Modifiers where the carboxyl group is directly attached to a rigid heteroaromatic ring without additional coordinating groups.',
            'patterns': [heteroaromatic_carboxylic_acid],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'Amino acids with bulky or heterocyclic side chains.',
            'patterns': [bulky_amino_acid],
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Modifiers containing aromatic hydroxyl groups adjacent to the carboxyl group.',
            'patterns': [aromatic_carboxylic_acid, aromatic_hydroxyl],
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'Modifiers with saccharide or polyol structures.',
            'patterns': [polyol],
            'prediction': -1
        },
        {
            'number': 15,
            'description': 'Modifiers that are aliphatic carboxylic acids containing both ether linkages and bulky substituents.',
            'patterns': [ether_linkage, '[#6][c]'],  # Ether linkage and aromatic ring
            'prediction': -1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for smarts in rule.get('patterns', []):
            try:
                pat = Chem.MolFromSmarts(smarts)
                if pat is not None:
                    compiled_patterns.append(pat)
            except:
                pass
        rule['compiled_patterns'] = compiled_patterns
        
        # Compile exclude patterns if any
        compiled_exclude_patterns = []
        for smarts in rule.get('exclude_patterns', []):
            try:
                pat = Chem.MolFromSmarts(smarts)
                if pat is not None:
                    compiled_exclude_patterns.append(pat)
            except:
                pass
        rule['compiled_exclude_patterns'] = compiled_exclude_patterns

        # Compile patterns for electron-donating groups (EDGs) for Rule 7
        compiled_edg_patterns = []
        for smarts in rule.get('edg_patterns', []):
            try:
                pat = Chem.MolFromSmarts(smarts)
                if pat is not None:
                    compiled_edg_patterns.append(pat)
            except:
                pass
        rule['compiled_edg_patterns'] = compiled_edg_patterns
        
        # Compile complex patterns for Rule 2
        compiled_complex_patterns = []
        for base_smarts, ewg_smarts in rule.get('complex_patterns', []):
            try:
                base_pat = Chem.MolFromSmarts(base_smarts)
                ewg_pat = Chem.MolFromSmarts(ewg_smarts)
                if base_pat is not None and ewg_pat is not None:
                    compiled_complex_patterns.append((base_pat, ewg_pat))
            except:
                pass
        rule['compiled_complex_patterns'] = compiled_complex_patterns
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = False
                # Handle complex patterns (e.g., Rule 2)
                if 'compiled_complex_patterns' in rule and rule['compiled_complex_patterns']:
                    for base_pat, ewg_pat in rule['compiled_complex_patterns']:
                        if mol.HasSubstructMatch(base_pat) and mol.HasSubstructMatch(ewg_pat):
                            match = True
                            break
                else:
                    # Check exclude patterns if any
                    exclude = False
                    for pat in rule.get('compiled_exclude_patterns', []):
                        if mol.HasSubstructMatch(pat):
                            exclude = True
                            break
                    if exclude:
                        row.append(0)
                        continue
                    # Check required patterns
                    pattern_matches = [mol.HasSubstructMatch(pat) for pat in rule['compiled_patterns']]
                    if all(pattern_matches):
                        match = True
                    # Additional check for EDGs in Rule 7
                    if rule.get('number') == 7 and match:
                        edg_match = False
                        for pat in rule.get('compiled_edg_patterns', []):
                            if mol.HasSubstructMatch(pat):
                                edg_match = True
                                break
                        match = edg_match
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df
