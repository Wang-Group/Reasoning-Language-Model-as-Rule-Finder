def rule2matrix(smiles_list):
    # Define SMARTS patterns for each rule, incorporating the suggestions

    # Rule 1: Modifiers that are straight-chain aliphatic carboxylic acids with terminal primary amino groups at the omega (Ï‰) position.
    # Patterns adjusted according to Suggestion 1
    rule1_patterns = [
        '[NX3;H2][CH2]{2,}[CX3](=O)[OX2H1]',  # Amino group at one end
        '[CX3](=O)[OX2H1][CH2]{2,}[NX3;H2]'   # Amino group at the other end
    ]

    # Rule 2: Modifiers containing thiol groups (-SH)
    rule2_pattern = '[SX2H]'

    # Rule 3: Aromatic carboxylic acids with electron-withdrawing groups at the para position
    # Patterns adjusted according to Suggestion 2
    rule3_patterns = [
        'c1cc([N+](=O)[O-])ccc1C(=O)[OX2H1]',  # Nitro group at para position
        'c1cc(F)ccc1C(=O)[OX2H1]',             # Fluoro at para
        'c1cc(Cl)ccc1C(=O)[OX2H1]',            # Chloro at para
        'c1cc(Br)ccc1C(=O)[OX2H1]',            # Bromo at para
        'c1cc(I)ccc1C(=O)[OX2H1]',             # Iodo at para
        'c1cc(CF3)ccc1C(=O)[OX2H1]',           # Trifluoromethyl at para
        'c1cc(CCl)ccc1C(=O)[OX2H1]',           # Chloromethyl at para
        'c1cc(CBr)ccc1C(=O)[OX2H1]',           # Bromomethyl at para
        'c1cc(CI)ccc1C(=O)[OX2H1]'             # Iodomethyl at para
    ]

    # Rule 4: Modifiers with pyridine rings available for coordination
    rule4_pattern = 'n1ccccc1C(=O)[OX2H1]'

    # Rule 5: Modifiers with multiple ether linkages ending with polar groups
    # Pattern adjusted according to Suggestion 3
    rule5_pattern = '[#6][O][#6]([O][#6]){1,}[CX3](=O)[OX2H1,NH2]'

    # Rule 6: Modifiers with multiple hydroxyl groups (-OH) besides the carboxyl group
    rule6_pattern = '[OX2H][CX4;!$(C=O)]'

    # Rule 7: Aromatic carboxylic acids with electron-donating groups
    # Patterns adjusted according to Suggestion 4
    rule7_patterns = [
        'c1cc([NX3;H2,H1])ccc1C(=O)[OX2H1]',  # Amino group on aromatic ring with carboxyl group
        'c1cc([OX2H])ccc1C(=O)[OX2H1]'        # Hydroxy group on aromatic ring with carboxyl group
    ]

    # Rule 8: Modifiers with bulky or sterically hindered groups near coordination sites
    rule8_pattern = 'c1ccc2ccccc2c1'  # Fused aromatic rings (e.g., naphthalene)

    # Rule 9: Modifiers with fluorinated alkyl chains
    # Pattern adjusted according to Suggestion 5
    rule9_pattern = '[CX4][CX4](F)(F)(F)[CX4][CX3](=O)[OX2H1]'

    # Rule 10: Modifiers with lactone rings or cyclic ester functionalities
    # Patterns adjusted according to Suggestion 6
    rule10_patterns = [
        'O=C1OC[C@@H](O)[C@@H](O)C1',  # 5-membered lactone ring
        'O=C1OCC[C@@H](O)C1'           # 6-membered lactone ring
    ]

    # Rule 11: Modifiers with side-chain amide groups
    rule11_pattern = '[CX3](=O)[NX3][#6][CX3](=O)[OX2H1]'

    # Rule 12: Simple aliphatic carboxylic acids without additional functional groups
    # Exclude patterns adjusted according to Suggestion 7
    rule12_pattern = '[CX3](=O)[OX2H1]'
    rule12_exclude_patterns = [
        '[#7;!$([NX3][CX3](=O)[OX2H1])]',  # Exclude nitrogen atoms not part of amide linkage
        '[#8;!$([OX2H1][CX3](=O)[OX1H0-])]',  # Exclude oxygen atoms beyond the carboxyl group
        '[#16]',  # Exclude sulfur atoms
        '[OX2H;!$([OX2H][CX3](=O)[OX1H0-])]',  # Exclude hydroxyl groups beyond carboxyl hydroxyl
        '[NX3;!$([NX3][CX3](=O)[OX1H0-])]',  # Exclude amino groups not part of amide linkage
        '[SX2H]',  # Exclude thiol groups
        '[#6][OX2][#6;!$(C=O)]',  # Exclude ether linkages not part of ester or carboxylate
        '[a]',  # Exclude aromatic atoms
        '[#6]=[#6]',  # Exclude double bonds
        '[#6]#[#6]'   # Exclude triple bonds
    ]

    # Compile the patterns
    rules = [
        {
            'number': 1,
            'description': 'Modifiers with terminal primary amino groups on straight-chain aliphatic carboxylic acids.',
            'patterns': rule1_patterns,
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers containing thiol groups (-SH).',
            'patterns': [rule2_pattern],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Aromatic carboxylic acids with EWGs at the para position.',
            'patterns': rule3_patterns,
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers with pyridine rings available for coordination.',
            'patterns': [rule4_pattern],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers with multiple ether linkages ending with polar groups.',
            'patterns': [rule5_pattern],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers with multiple hydroxyl groups (-OH) besides the carboxyl group.',
            'patterns': [rule6_pattern],
            'count_threshold': 2,
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Aromatic carboxylic acids with electron-donating groups.',
            'patterns': rule7_patterns,
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Modifiers with bulky or sterically hindered groups near coordination sites.',
            'patterns': [rule8_pattern],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers with fluorinated alkyl chains.',
            'patterns': [rule9_pattern],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers with lactone rings or cyclic ester functionalities.',
            'patterns': rule10_patterns,
            'prediction': 1
        },
        {
            'number': 11,
            'description': 'Modifiers with side-chain amide groups.',
            'patterns': [rule11_pattern],
            'prediction': 1
        },
        {
            'number': 12,
            'description': 'Simple aliphatic carboxylic acids without additional functional groups.',
            'patterns': [rule12_pattern],
            'exclude_patterns': rule12_exclude_patterns,
            'prediction': -1
        }
    ]

    # Compile the patterns
    for rule in rules:
        compiled_patterns = [Chem.MolFromSmarts(p) for p in rule.get('patterns', [])]
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = [Chem.MolFromSmarts(p) for p in rule['exclude_patterns']]
            rule['compiled_exclude_patterns'] = compiled_excludes
        else:
            rule['compiled_exclude_patterns'] = []

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                for pat in rule['compiled_exclude_patterns']:
                    if mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Check required patterns
                if 'count_threshold' in rule:
                    total_matches = 0
                    for pat in rule['compiled_patterns']:
                        matches = mol.GetSubstructMatches(pat)
                        total_matches += len(matches)
                    if total_matches >= rule['count_threshold']:
                        row.append(rule['prediction'])
                    else:
                        row.append(0)
                else:
                    pattern_match = any(mol.HasSubstructMatch(pat) for pat in rule['compiled_patterns'])
                    if pattern_match:
                        row.append(rule['prediction'])
                    else:
                        row.append(0)
            except Exception:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df