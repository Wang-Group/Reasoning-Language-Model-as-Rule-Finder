def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and substructures
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    
    # Carboxylate anion (-COO-)
    carboxylate_anion = '[CX3](=O)[O-]'
    
    # Primary amino group (-NH2)
    primary_amine = '[NX3H2]'
    
    # Secondary amino group (-NH[!H])
    secondary_amine = '[NX3H1][#6]'
    
    # Aromatic ring
    aromatic_ring = '[a]'
    
    # Thiol group (-SH)
    thiol = '[SX2H]'
    
    # Thioether group (-S-)
    thioether = '[#6][SX2][#6]'
    
    # Ether linkage (-O-)
    ether_linkage = '[#6][OX2][#6]'
    
    # Hydroxyl group (-OH)
    hydroxyl_group = '[OX2H]'
    
    # Hydroxyl group attached to aromatic ring (phenol)
    phenolic_hydroxyl = '[c][OX2H]'
    
    # Aromatic amine (-NH2 attached to aromatic ring)
    aromatic_amine = '[NX3H2][c]'
    
    # Electron-withdrawing groups (EWGs) on aromatic ring
    halogen = '[F,Cl,Br,I]'
    nitro_group = '[NX3](=O)[OX1-]'
    cyano_group = '[CX2]#[NX1]'
    sulfonyl_group = '[SX4](=O)(=O)[#6]'
    
    # Electron-donating groups (EDGs) on aromatic ring
    methoxy_group = '[OX2][CH3]'
    amino_group = '[NX3H2,NX3H1][#6]'
    
    # Nitrogen heterocycle (e.g., pyridine)
    nitrogen_heterocycle = '[n]'
    
    # Fluorinated chain
    fluorinated_chain = '[#6][F]'
    
    # Bulky aromatic groups (e.g., indole)
    bulky_aromatic = '[c]1[c][c][c][c][c]1'
    
    # Acylated amino group (amide)
    acylated_amino = '[NX3][CX3](=O)[#6]'
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'High Fe/Hf: Aliphatic carboxylic acids with a terminal primary amino group (-NH2).',
            'patterns': [
                [carboxylic_acid],  # Carboxylic acid group
                [primary_amine],     # Primary amino group
            ],
            'exclude_patterns': [
                [aromatic_ring],     # Exclude aromatic rings
            ],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'High Fe/Hf: Aromatic carboxylic acids with strong electron-withdrawing groups at the para position.',
            'patterns': [
                [carboxylic_acid, aromatic_ring],  # Aromatic carboxylic acid
                [
                    '[c][c][c]([CX3](=O)[OX2H1])[c][c][c][F,Cl,Br,I]',  # Para-halogen
                    '[c][c][c]([CX3](=O)[OX2H1])[c][c][c][NX3](=O)[O-]'   # Para-nitro
                ],
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Low Fe/Hf: Aromatic carboxylic acids with electron-donating groups at the para position.',
            'patterns': [
                [carboxylic_acid, aromatic_ring],  # Aromatic carboxylic acid
                [
                    '[c][c][c]([CX3](=O)[OX2H1])[c][c][c][OX2H]',   # Para-hydroxyl
                    '[c][c][c]([CX3](=O)[OX2H1])[c][c][c][NX3H2]',  # Para-amino
                    '[c][c][c]([CX3](=O)[OX2H1])[c][c][c][CH3]'     # Para-methyl
                ],
            ],
            'prediction': -1
        },
        {
            'number': 4,
            'description': 'High Fe/Hf: Modifiers containing both a carboxyl group and a thiol (-SH) group.',
            'patterns': [
                [carboxylic_acid],  # Carboxylic acid group
                [thiol],            # Thiol group
            ],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'High Fe/Hf: Aliphatic carboxylic acids with ether linkages and terminal polar groups (-OH or -NH2).',
            'patterns': [
                [carboxylic_acid],   # Carboxylic acid group
                [ether_linkage],      # Ether linkage
                [hydroxyl_group, primary_amine],  # Terminal polar groups
            ],
            'exclude_patterns': [
                [aromatic_ring],      # Exclude aromatic rings
            ],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Low Fe/Hf: Modifiers with multiple adjacent hydroxyl groups (polyols).',
            'patterns': [
                [carboxylic_acid],   # Carboxylic acid group
            ],
            'count_patterns': {hydroxyl_group: 3},  # At least 3 hydroxyl groups
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Low Fe/Hf: Modifiers with phenolic hydroxyl groups attached directly to an aromatic ring.',
            'patterns': [
                [carboxylic_acid],    # Carboxylic acid group
                [phenolic_hydroxyl],  # Phenolic hydroxyl group
            ],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Low Fe/Hf: Straight-chain aliphatic carboxylic acids without additional coordinating groups.',
            'patterns': [
                [carboxylic_acid],    # Carboxylic acid group
            ],
            'exclude_patterns': [
                [aromatic_ring],       # Exclude aromatic rings
                [primary_amine, secondary_amine],  # Exclude amines
                [thiol, thioether],    # Exclude sulfur groups
                [ether_linkage],       # Exclude ethers
            ],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'High Fe/Hf: Modifiers containing nitrogen heterocycles connected via a linker to a carboxyl group.',
            'patterns': [
                [carboxylic_acid],    # Carboxylic acid group
                [nitrogen_heterocycle],  # Nitrogen heterocycle
            ],
            'prediction': 1
        },
        {
            'number': 10,
            'description': 'High Fe/Hf: Modifiers with sulfur-containing functional groups (e.g., methylsulfanyl, thiol), especially with amino groups.',
            'patterns': [
                [carboxylic_acid],    # Carboxylic acid group
                [thiol, thioether],   # Sulfur-containing groups
                [primary_amine, secondary_amine],  # Amino groups
            ],
            'prediction': 1
        },
        {
            'number': 11,
            'description': 'High Fe/Hf: Modifiers with multiple carboxyl groups and an amino group positioned for chelation.',
            'patterns': [
                [carboxylic_acid],    # Carboxylic acid group
                [carboxylic_acid],    # Additional carboxylic acid group
                [primary_amine, secondary_amine],  # Amino group
            ],
            'prediction': 1
        },
        {
            'number': 12,
            'description': 'Low Fe/Hf: Modifiers with multiple carboxyl groups but lacking other coordinating groups.',
            'patterns': [
                [carboxylic_acid],    # Carboxylic acid group
                [carboxylic_acid],    # Additional carboxylic acid group
            ],
            'exclude_patterns': [
                [primary_amine, secondary_amine],  # Exclude amino groups
                [thiol, thioether],   # Exclude sulfur groups
            ],
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Low Fe/Hf: Modifiers with fluorinated aliphatic chains.',
            'patterns': [
                [carboxylic_acid],    # Carboxylic acid group
                [fluorinated_chain],   # Fluorinated chain
            ],
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'Low Fe/Hf: Modifiers containing bulky aromatic groups adjacent to coordinating sites.',
            'patterns': [
                [carboxylic_acid],    # Carboxylic acid group
                [bulky_aromatic],      # Bulky aromatic groups
            ],
            'prediction': -1
        },
        {
            'number': 15,
            'description': 'High Fe/Hf: Modifiers with acylated amino groups on an aliphatic chain.',
            'patterns': [
                [carboxylic_acid],    # Carboxylic acid group
                [acylated_amino],      # Acylated amino group
            ],
            'exclude_patterns': [
                [aromatic_ring],       # Exclude aromatic rings
                [bulky_aromatic],      # Exclude bulky aromatics
            ],
            'prediction': 1
        },
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(p) for p in group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for group in rule['exclude_patterns']:
                compiled_group = [Chem.MolFromSmarts(p) for p in group]
                compiled_excludes.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_excludes
        # Compile count patterns if any
        if 'count_patterns' in rule:
            compiled_count_patterns = {}
            for patt_str, count in rule['count_patterns'].items():
                compiled_patt = Chem.MolFromSmarts(patt_str)
                compiled_count_patterns[compiled_patt] = count
            rule['compiled_count_patterns'] = compiled_count_patterns
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        if mol.HasSubstructMatch(pat):
                            group_match = True
                            break
                    if not group_match:
                        match = False
                        break
                # Check count patterns if any
                if match and 'compiled_count_patterns' in rule:
                    for pat, threshold in rule['compiled_count_patterns'].items():
                        matches = mol.GetSubstructMatches(pat)
                        if len(matches) < threshold:
                            match = False
                            break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df
