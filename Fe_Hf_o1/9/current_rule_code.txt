def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and structural features
    
    # Aliphatic carboxylic acid (-COOH) chain of 4 to 8 carbons
    aliphatic_carboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1]'
    chain_4_8_carbons = '[CH2]CCCC[CH2]'
    chain_4_carbons = '[CH2]CCC[CH2]'
    chain_8_carbons = '[CH2]CCCCCCC[CH2]'
    
    # Terminal primary amino group (-NH2)
    terminal_primary_amino = '[NX3H2][CH2]'
    
    # Alpha-amino dicarboxylic acid with short chain (4 carbons)
    alpha_amino_dicarboxylic_acid = '[NX3H2][CH](C(=O)[OX1H0-,OX2H1])C(=O)[OX1H0-,OX2H1]'
    
    # Aromatic carboxylic acid with para-substituted electron-withdrawing group
    aromatic_carboxylic_acid = 'c1ccc(cc1)C(=O)[OX1H0-,OX2H1]'
    para_nitro = 'c1ccc([NX3+](=O)[O-])cc1'
    para_bromomethyl = 'c1ccc(cc1)CBr'
    para_pyridyl = 'c1ccc(cc1)c2ccncc2'
    
    # Thiol group adjacent to aromatic ring
    thiol_adjacent_aromatic = 'c1ccc(SH)cc1'
    
    # Simple aliphatic carboxylic acids without additional coordinating groups
    simple_aliphatic_carboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1]'
    
    # Exclude patterns for additional coordinating groups
    exclude_amino = '[NX3]'
    exclude_thiol = '[SX2H]'
    exclude_ether = '[#6][OX2][#6]'
    exclude_aromatic = '[a]'
    
    # Multiple adjacent hydroxyl groups (polyols)
    polyol = '[OX2H][CX4][OX2H]'
    
    # Phenolic hydroxyl groups
    phenolic_hydroxyl = 'c[OX2H]'
    
    # Nitrogen heterocycles directly attached to carboxyl group
    nitrogen_heterocycle_carboxylic_acid = '[nH]1cccc1C(=O)[OX1H0-,OX2H1]'
    
    # Amino acids with aromatic side chains lacking additional heteroatoms
    amino_acid_aromatic_side_chain = '[NX3H2][CH](CCc1ccccc1)C(=O)[OX1H0-,OX2H1]'
    
    # Perfluorinated alkyl chains
    perfluoro_alkyl_chain = '[CX4]([F])([F])[F]'
    
    # Ether linkages with terminal oxygen or nitrogen atoms
    ether_linkage_terminal_ON = '[#6][OX2][#6][OX2H1,NX3H2]'
    
    # Compile SMARTS patterns
    patterns = {
        'Rule 1': {
            'patterns': [
                Chem.MolFromSmarts('C' * 4 + '[C](=O)[O,H]'),  # Aliphatic chain of 4 carbons with carboxylic acid
                Chem.MolFromSmarts('[NX3H2][CH2]'),  # Terminal primary amino group
            ],
            'prediction': 1
        },
        'Rule 2': {
            'patterns': [
                Chem.MolFromSmarts('[NX3H2][CH](C(=O)[OX1H0-,OX2H1])C(=O)[OX1H0-,OX2H1]'),  # Alpha-amino dicarboxylic acid
            ],
            'exclude_patterns': [
                Chem.MolFromSmarts('C' * 5 + '[C](=O)[O,H]'),  # Exclude chains longer than 4 carbons
            ],
            'prediction': 1
        },
        'Rule 3': {
            'patterns': [
                Chem.MolFromSmarts('c1ccc(cc1)[C](=O)[O,H]'),  # Aromatic carboxylic acid
                Chem.MolFromSmarts('c1ccc([NX3+](=O)[O-])cc1'),  # Para-nitro group
                Chem.MolFromSmarts('c1ccc(cc1)CBr'),  # Para-bromomethyl group
                Chem.MolFromSmarts('c1ccc(cc1)c2ccncc2'),  # Para-pyridyl group
            ],
            'prediction': 1
        },
        'Rule 4': {
            'patterns': [
                Chem.MolFromSmarts('c1ccc(SH)cc1'),  # Thiol adjacent to aromatic ring
            ],
            'prediction': 1
        },
        'Rule 5': {
            'patterns': [
                Chem.MolFromSmarts('[CX3](=O)[OX1H0-,OX2H1]'),  # Aliphatic carboxylic acid
            ],
            'exclude_patterns': [
                Chem.MolFromSmarts('[NX3]'),  # Exclude amino groups
                Chem.MolFromSmarts('[SX2H]'),  # Exclude thiol groups
                Chem.MolFromSmarts('[#6][OX2][#6]'),  # Exclude ether linkages
                Chem.MolFromSmarts('[a]'),  # Exclude aromatic rings
            ],
            'prediction': -1
        },
        'Rule 6': {
            'patterns': [
                Chem.MolFromSmarts(polyol),  # Multiple adjacent hydroxyl groups
                Chem.MolFromSmarts('[CX3](=O)[OX1H0-,OX2H1]'),  # Carboxylic acid group
            ],
            'count_threshold': {polyol: 2},  # At least two polyol groups
            'prediction': -1
        },
        'Rule 7': {
            'patterns': [
                Chem.MolFromSmarts('c[OX2H]'),  # Phenolic hydroxyl group
                Chem.MolFromSmarts('[CX3](=O)[OX1H0-,OX2H1]'),  # Carboxylic acid group
            ],
            'prediction': -1
        },
        'Rule 8': {
            'patterns': [
                Chem.MolFromSmarts('[nH]1cccc1C(=O)[OX1H0-,OX2H1]'),  # Nitrogen heterocycle attached to carboxyl group
            ],
            'prediction': -1
        },
        'Rule 9': {
            'patterns':[ 
                Chem.MolFromSmarts('[NX3H2][CH](CCc1ccccc1)C(=O)[OX1H0-,OX2H1]'),  # Amino acid with aromatic side chain
            ],
            'exclude_patterns': [
                Chem.MolFromSmarts('[NX3][c]'),  # Exclude additional heteroatoms in aromatic ring
            ],
            'prediction': 1
        },
        'Rule 10': {
            'patterns': [
                Chem.MolFromSmarts('[CX4]([F])([F])[F]'),  # Perfluorinated alkyl chain
            ],
            'prediction': -1
        },
        'Rule 11': {
            'patterns': [
                Chem.MolFromSmarts('[#6][OX2][#6][OX2H1,NX3H2]'),  # Ether linkage with terminal O or N
            ],
            'prediction': 1
        },
    }
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(patterns))
            continue
        row = []
        for rule_name, rule in patterns.items():
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for pat in rule['exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for pat in rule['patterns']:
                    matches = mol.GetSubstructMatches(pat)
                    if not matches:
                        match = False
                        break
                    else:
                        # If a count threshold is specified for this pattern
                        if 'count_threshold' in rule:
                            threshold = rule['count_threshold'].get(pat, 1)
                            if len(matches) < threshold:
                                match = False
                                break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=list(patterns.keys()))
    return df
