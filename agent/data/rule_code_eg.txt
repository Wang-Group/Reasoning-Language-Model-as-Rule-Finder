def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups using corrected patterns from suggestions
    # Carboxylic acid group (-COOH)
    carboxylic_acid = ['[CX3](=O)[OX2H1]', '[CX3](=O)[O-]']
    
    # Primary and secondary aliphatic amine groups (-NH2 or -NH-)
    primary_aliph_amine = '[NX3H2+0,NX4H3+;!$([N][!C])]'  # Primary aliphatic amine
    secondary_aliph_amine = '[NX3H1+0,NX4H2+;!$([N][!C])]'  # Secondary aliphatic amine
    
    # Sulfur-containing groups - thiols (-SH) or thioethers (-S-)
    thiol = '[SX2H]'  # Thiol group
    # Thioether group refined as per suggestion 7
    thioether = '[SX2;!$(S=[O,N])]([#6])[#6]'  # Thioether group
    
    # Ether linkage in aliphatic chains (-O-)
    # Updated to a more general pattern as per suggestion 2
    ether_linkage = '[#6][OX2][#6]'
    
    # Pyridine ring
    pyridine_ring = 'n1cccc1'
    
    # Halogens or nitro groups on aromatic ring
    halogen_on_aromatic = ['[c][F,Cl,Br,I]', '[c][CX4][F,Cl,Br,I]']
    nitro_on_aromatic = ['[c][NX3+](=O)[O-]', '[c][CX4][NX3+](=O)[O-]']
    
    # Aromatic amine attached directly to aromatic ring (aniline)
    aromatic_amine = '[NX3H2,NX3H1][c]'
    
    # Hydroxyl group (-OH)
    hydroxyl_group = '[OX2H]'
    
    # Hydroxyl or methoxy group on aromatic ring
    hydroxyl_or_methoxy_on_aromatic = ['[c][OX2H]', '[c][OX2][CH3]']
    
    # Amide group adjacent to aromatic ring
    amide_adjacent_to_aromatic = '[c][CX3](=O)[NX3]'
    
    # Exclude patterns for Rule 6 with corrections from suggestions
    exclude_amines = '[NX3]'  # Exclude any amine groups
    exclude_sulfur_groups = ['[SX2H]', '[SX2;!$(S=[O,N])]([#6])[#6]']  # Exclude thiols and thioethers
    exclude_ethers = '[#6][OX2][#6]'  # Exclude ethers
    exclude_halogens = '[!#1][F,Cl,Br,I]'  # Exclude halogens bonded within the molecule
    exclude_aromatic = '[a]'  # Exclude aromatic atoms
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'High Fe/Hf Value (True): Modifiers containing a primary or secondary aliphatic amine group (-NH2 or -NH-) and a carboxylic acid group (-COOH).',
            'patterns': [
                [primary_aliph_amine, secondary_aliph_amine],  # Primary or secondary aliphatic amine
                carboxylic_acid  # Carboxylic acid
            ],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'High Fe/Hf Value (True): Modifiers containing sulfur-containing groups such as thiols (-SH) or thioethers (-S-) and a carboxylic acid group (-COOH).',
            'patterns': [
                [thiol, thioether],  # Thiol or thioether
                carboxylic_acid  # Carboxylic acid
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'High Fe/Hf Value (True): Modifiers containing ether linkages (-O-) in aliphatic chains and a carboxylic acid group (-COOH).',
            'patterns': [
                [ether_linkage],  # Ether linkage
                carboxylic_acid  # Carboxylic acid
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'High Fe/Hf Value (True): Modifiers containing pyridine rings connected to a carboxylic acid group (-COOH).',
            'patterns': [
                [pyridine_ring],  # Pyridine ring
                carboxylic_acid  # Carboxylic acid
            ],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'High Fe/Hf Value (True): Modifiers containing electron-withdrawing groups such as halogens (-Cl, -Br) or nitro groups (-NO2) on an aromatic ring connected to a carboxylic acid group (-COOH).',
            'patterns': [
                halogen_on_aromatic + nitro_on_aromatic,  # Halogen or nitro group on aromatic ring
                carboxylic_acid  # Carboxylic acid
            ],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Low Fe/Hf Value (False): Modifiers that are simple aliphatic carboxylic acids without additional donor groups such as amines, sulfurs, or ethers.',
            'patterns': [
                carboxylic_acid,  # Carboxylic acid
            ],
            'exclude_patterns': [
                [exclude_amines],  # Exclude any amines
                exclude_sulfur_groups,  # Exclude sulfur-containing groups
                [exclude_ethers],  # Exclude ethers
                [exclude_halogens],  # Exclude halogens
                [exclude_aromatic]  # Exclude aromatic atoms
            ],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Low Fe/Hf Value (False): Modifiers where an amine group (-NH2) is directly attached to an aromatic ring (e.g., anilines) along with a carboxylic acid group (-COOH).',
            'patterns': [
                [aromatic_amine],  # Amine attached to aromatic ring
                carboxylic_acid  # Carboxylic acid
            ],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Low Fe/Hf Value (False): Modifiers with multiple hydroxyl groups (-OH) (polyols) and a carboxylic acid group (-COOH), without other strong coordination sites.',
            'patterns': [
                [hydroxyl_group],  # Hydroxyl group
                carboxylic_acid  # Carboxylic acid
            ],
            'count_threshold': {'[OX2H]': 2},  # At least 2 hydroxyl groups
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Low Fe/Hf Value (False): Modifiers containing electron-donating groups such as hydroxyl (-OH) or methoxy (-OCH3) groups on an aromatic ring connected to a carboxylic acid group (-COOH), without additional strong donor atoms.',
            'patterns': [
                hydroxyl_or_methoxy_on_aromatic,  # Hydroxyl or methoxy group on aromatic ring
                carboxylic_acid  # Carboxylic acid
            ],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Low Fe/Hf Value (False): Modifiers containing amide groups (-CONH-) adjacent to aromatic rings and a carboxylic acid group (-COOH).',
            'patterns': [
                [amide_adjacent_to_aromatic],  # Amide group adjacent to aromatic ring
                carboxylic_acid  # Carboxylic acid
            ],
            'prediction': -1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(p) for p in group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for group in rule['exclude_patterns']:
                compiled_group = [Chem.MolFromSmarts(p) for p in group]
                compiled_excludes.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_excludes
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        matches = mol.GetSubstructMatches(pat)
                        if matches:
                            # If a count threshold is specified for this pattern
                            if 'count_threshold' in rule and pat.GetSmarts() in rule['count_threshold']:
                                threshold = rule['count_threshold'][pat.GetSmarts()]
                                if len(matches) >= threshold:
                                    group_match = True
                                    break
                            else:
                                group_match = True
                                break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0 and optionally log the error
                # print(f"Error processing rule {rule['number']} for SMILES {smi}: {e}")
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df