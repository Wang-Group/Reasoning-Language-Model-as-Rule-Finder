def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and structural features
    
    # Common SMARTS patterns
    carboxylic_acid = '[CX3](=O)[OX2H1]'  # Carboxylic acid group
    carboxylate_anion = '[CX3](=O)[O-]'    # Carboxylate anion
    primary_amine = '[NX3H2]'               # Primary amine group
    thiol = '[SX2H]'                        # Thiol group
    aliphatic_chain_5 = '[CH2][CH2][CH2][CH2][CH2]'  # Aliphatic chain of 5 carbons
    amino_acid_backbone = '[NX3H2][CX4][CX3](=O)[OX2H1]'  # Simplified amino acid backbone
    
    # Electron-withdrawing groups (EWGs)
    nitro = '[NX3+](=O)[O-]'
    halomethyl = '[CH2][F,Cl,Br,I]'
    ewg = [nitro, halomethyl]
    
    # Electron-donating groups (EDGs)
    amino_edg = '[NX3;H2,H1][!#1]'
    hydroxy_edg = '[OX2H]'
    methoxy_edg = '[OX2][CH3]'
    edg = [amino_edg, hydroxy_edg, methoxy_edg]
    
    # Aromatic ring patterns
    benzene_ring = '[c]1[c][c][c][c][c]1'
    pyridine_ring = 'n1ccccc1'
    aromatic_ring = '[a]1[a][a][a][a][a]1'
    
    # Carbonyl group adjacent to aromatic ring
    carbonyl_adjacent_aromatic = '[c][CX3](=O)[!#1]'
    
    # Fluorinated alkyl chain
    fluorinated_alkyl_chain = '[CX4]([F,Cl,Br,I])[F,Cl,Br,I]'
    
    # Bulky aromatic side chain (e.g., phenylalanine)
    bulky_aromatic_side_chain = '[CX3](=[OX1])[CX4][#6][c]1[c][c][c][c][c]1'  # Simplified pattern
    
    # Ether linkage
    ether_linkage = '[#6][OX2][#6]'
    
    # Acetamido group
    acetamido_group = '[NX3][CX3](=O)[#6]'
    
    # Aldehyde group on aromatic ring
    aldehyde_on_aromatic = '[c][CX3H](=O)'
    
    # Initialize list of rules with SMARTS patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that contain a thiol group (-SH) and a carboxylic acid group predict a high Fe/Hf value.',
            'patterns': [thiol, carboxylic_acid],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers that are aliphatic amino acids with a primary amine and a single carboxylic acid group on a carbon chain of five or more carbons, with no additional carboxylic acid groups.',
            'patterns': [primary_amine, carboxylic_acid, aliphatic_chain_5],
            'exclude_patterns': [carboxylic_acid],  # Exclude if more than one carboxylic acid group
            'max_count': {carboxylic_acid: 1},
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers with aromatic rings substituted at the para position with electron-withdrawing groups (e.g., nitro, halomethyl) and a carboxylic acid group predict a high Fe/Hf value.',
            'patterns': [benzene_ring, carboxylic_acid],
            'sub_patterns': ewg,
            'sub_position': 'para',
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers containing a pyridine ring with the nitrogen atom positioned to coordinate with iron, linked via para substitution to a carboxylic acid group.',
            'patterns': [pyridine_ring, carboxylic_acid],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers that are aliphatic carboxylic acids lacking additional strong coordinating functional groups predict a low Fe/Hf value.',
            'patterns': [carboxylic_acid],
            'exclude_patterns': [primary_amine, thiol, ether_linkage, '[F,Cl,Br,I]', aromatic_ring],
            'prediction': -1
        },
        {
            'number': 6,
            'description': 'Modifiers with multiple hydroxyl groups near the carboxylic acid group predict a low Fe/Hf value.',
            'patterns': [carboxylic_acid],
            'count_patterns': {hydroxy_edg: 2},
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Modifiers containing electron-donating groups (e.g., amino, hydroxy, methoxy) on aromatic rings at the para position, along with a carboxylic acid group, predict a low Fe/Hf value.',
            'patterns': [benzene_ring, carboxylic_acid],
            'sub_patterns': edg,
            'sub_position': 'para',
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Modifiers that are amino acids with bulky aromatic side chains predict a low Fe/Hf value due to steric hindrance.',
            'patterns': [amino_acid_backbone, bulky_aromatic_side_chain],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers containing carbonyl groups adjacent to aromatic rings predict a high Fe/Hf value due to potential chelation.',
            'patterns': [carbonyl_adjacent_aromatic],
            'prediction': 1
        },
        {
            'number': 10,
            'description': 'Modifiers with long aliphatic chains containing terminal hydroxy groups predict a high Fe/Hf value.',
            'patterns': [aliphatic_chain_5, hydroxy_edg],
            'prediction': 1
        },
        {
            'number': 11,
            'description': 'Modifiers containing ether linkages in aliphatic chains along with an amino group predict a high Fe/Hf value.',
            'patterns': [ether_linkage, primary_amine],
            'prediction': 1
        },
        {
            'number': 12,
            'description': 'Modifiers with fluorinated alkyl chains predict a low Fe/Hf value.',
            'patterns': [fluorinated_alkyl_chain],
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Modifiers containing aldehyde groups on aromatic rings predict a low Fe/Hf value.',
            'patterns': [aldehyde_on_aromatic],
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'Modifiers that are amino acids with sulfur-containing side chains predict a high Fe/Hf value.',
            'patterns': [amino_acid_backbone, thiol],
            'prediction': 1
        },
        {
            'number': 15,
            'description': 'Modifiers with aliphatic chains containing both amino and acetamido groups predict a high Fe/Hf value.',
            'patterns': [primary_amine, acetamido_group],
            'prediction': 1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        rule['compiled_patterns'] = [Chem.MolFromSmarts(p) for p in rule.get('patterns', [])]
        if 'exclude_patterns' in rule:
            rule['compiled_exclude'] = [Chem.MolFromSmarts(p) for p in rule.get('exclude_patterns', [])]
        if 'sub_patterns' in rule:
            rule['compiled_sub_patterns'] = [Chem.MolFromSmarts(p) for p in rule.get('sub_patterns', [])]
        if 'count_patterns' in rule:
            rule['compiled_count_patterns'] = {Chem.MolFromSmarts(p): count for p, count in rule['count_patterns'].items()}
        if 'max_count' in rule:
            rule['compiled_max_count'] = {Chem.MolFromSmarts(p): count for p, count in rule['max_count'].items()}
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'compiled_exclude' in rule:
                    for pat in rule['compiled_exclude']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for pat in rule['compiled_patterns']:
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Check sub-patterns at specific positions (e.g., para substitution)
                if 'compiled_sub_patterns' in rule and 'sub_position' in rule:
                    # This is a simplified example; in practice, you'd need to map atom indices
                    sub_match = False
                    for sp in rule['compiled_sub_patterns']:
                        if mol.HasSubstructMatch(sp):
                            sub_match = True
                            break
                    if not sub_match:
                        match = False
                if not match:
                    row.append(0)
                    continue
                # Check count patterns
                if 'compiled_count_patterns' in rule:
                    for pat, count in rule['compiled_count_patterns'].items():
                        matches = mol.GetSubstructMatches(pat)
                        if len(matches) < count:
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check max count patterns
                if 'compiled_max_count' in rule:
                    for pat, max_count in rule['compiled_max_count'].items():
                        matches = mol.GetSubstructMatches(pat)
                        if len(matches) > max_count:
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # If all checks passed
                row.append(rule['prediction'])
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df
