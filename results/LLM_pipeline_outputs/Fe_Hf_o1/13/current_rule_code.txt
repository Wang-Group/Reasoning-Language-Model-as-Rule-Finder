def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups using corrected patterns from suggestions

    # Carboxylic acid group (-COOH) and carboxylate anion
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    carboxylate_anion = '[CX3](=O)[O-]'

    # Primary amine group (-NH2)
    primary_amine = '[NX3H2]'

    # Secondary amine (-NH-)
    secondary_amine = '[NX3H1][#6]'

    # Electron-withdrawing groups (EWGs)
    nitro_group = '[NX3+](=O)[O-]'
    halogen = '[F,Cl,Br,I]'

    # Electron-donating groups (EDGs)
    hydroxyl_group = '[OX2H]'
    methoxy_group = '[OX2][CH3]'
    amino_group_aromatic = '[c][NX3H2]'

    # Aromatic ring (generic)
    aromatic_ring = '[a]1aaaaa1'

    # Sulfur-containing groups
    thiol = '[SX2H]'
    thioether = '[SX2][#6][#6]'

    # Ether linkage
    ether_linkage = '[#6][OX2][#6]'

    # Acetamido group
    acetamido_group = '[NX3][CX3](=O)[#6]'

    # Heteroaromatic ring with nitrogen atoms (e.g., pyridine)
    pyridine_ring = 'n1ccccc1'

    # Aldehyde group (-CHO)
    aldehyde_group = '[CX3H1](=O)[#6]'

    # Fluorinated aliphatic chain
    fluorinated_chain = '[CX4]([F])([F])[F]'

    # Ketone group within aliphatic chain
    ketone_in_chain = '[#6][CX3](=O)[#6]'

    # Bulky aromatic systems (e.g., fused rings)
    fused_aromatic = '[r3,r4,r5,r6,r7,r8,r9,r10]'

    # Ortho-hydroxyl group to carboxylic acid on aromatic ring
    ortho_hydroxyl_carboxylic_acid = 'c1cc(O)ccc1C(=O)O'

    # Define electron-withdrawing group patterns
    ewg_patterns = [nitro_group, halogen]

    # Define electron-donating group patterns
    edg_patterns = [hydroxyl_group, methoxy_group, amino_group_aromatic]

    # Define rules with patterns and conditions
    rules = [
        # Rule 1
        {
            'number': 1,
            'description': 'Rule 1: Modifiers that are linear aliphatic amino acids with a primary amino group (-NH2) and a single terminal carboxylic acid group (-COOH), with a carbon chain length of five or more carbons, result in high Fe/Hf values.',
            'patterns': [primary_amine, carboxylic_acid],
            'conditions': 'chain_length',
            'prediction': 1
        },
        # Rule 2
        {
            'number': 2,
            'description': 'Rule 2: Aromatic carboxylic acids with strong electron-withdrawing groups, such as nitro (-NO2) or halogens, at the para position result in high Fe/Hf values.',
            'patterns': ['[c][CX3](=O)[OX2H1]'],  # Aromatic carboxylic acid
            'ewg_patterns': ewg_patterns,
            'conditions': 'para_substitution',
            'prediction': 1
        },
        # Rule 3
        {
            'number': 3,
            'description': 'Rule 3: Modifiers containing sulfur-functional groups such as thiol (-SH) or thioether (-S-) alongside a carboxylic acid group (-COOH) result in high Fe/Hf values.',
            'patterns': [carboxylic_acid],
            'sub_patterns': [thiol, thioether],
            'prediction': 1
        },
        # Rule 4
        {
            'number': 4,
            'description': 'Rule 4: Modifiers featuring flexible ether linkages (-O-) with terminal coordinating groups such as amino (-NH2) or carboxyl (-COOH) result in high Fe/Hf values.',
            'patterns': [ether_linkage],
            'sub_patterns': [primary_amine, carboxylic_acid],
            'prediction': 1
        },
        # Rule 5
        {
            'number': 5,
            'description': 'Rule 5: Modifiers containing multiple coordinating groups, such as amino acids with additional amino or acetamido groups, result in high Fe/Hf values due to enhanced chelation.',
            'patterns': [carboxylic_acid],
            'sub_patterns': [primary_amine, acetamido_group],
            'conditions': 'multiple_coordinating_groups',
            'prediction': 1
        },
        # Rule 6
        {
            'number': 6,
            'description': 'Rule 6: Aromatic carboxylic acids with electron-donating groups such as amino (-NH2), hydroxyl (-OH), or methoxy (-OCH3) at the para position result in low Fe/Hf values.',
            'patterns': ['[c][CX3](=O)[OX2H1]'],  # Aromatic carboxylic acid
            'edg_patterns': edg_patterns,
            'conditions': 'para_substitution',
            'prediction': -1
        },
        # Rule 7
        {
            'number': 7,
            'description': 'Rule 7: Modifiers containing multiple hydroxyl groups (-OH) on aliphatic chains or cyclic structures result in low Fe/Hf values.',
            'patterns': [carboxylic_acid, hydroxyl_group],
            'conditions': 'multiple_hydroxyls',
            'prediction': -1
        },
        # Rule 8
        {
            'number': 8,
            'description': 'Rule 8: Simple aliphatic carboxylic acids without additional strong coordinating groups result in low Fe/Hf values.',
            'patterns': [carboxylic_acid],
            'exclude_patterns': [primary_amine, secondary_amine, thiol, thioether, ether_linkage, aromatic_ring, '[#7,#8,#16,#15]'],  # Exclude other coordinating groups
            'prediction': -1
        },
        # Additional rules (9-15) would be defined similarly...
    ]

    # Compile SMARTS patterns
    for rule in rules:
        rule['compiled_patterns'] = [Chem.MolFromSmarts(p) for p in rule.get('patterns', [])]
        rule['compiled_sub_patterns'] = [Chem.MolFromSmarts(p) for p in rule.get('sub_patterns', [])]
        rule['compiled_exclude_patterns'] = [Chem.MolFromSmarts(p) for p in rule.get('exclude_patterns', [])]
        rule['compiled_ewg_patterns'] = [Chem.MolFromSmarts(p) for p in rule.get('ewg_patterns', [])]
        rule['compiled_edg_patterns'] = [Chem.MolFromSmarts(p) for p in rule.get('edg_patterns', [])]

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                for pat in rule.get('compiled_exclude_patterns', []):
                    if mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Check required patterns
                for pat in rule.get('compiled_patterns', []):
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Additional conditions
                if rule.get('conditions') == 'chain_length':
                    # Implement chain length condition for Rule 1
                    n_atoms = mol.GetSubstructMatches(Chem.MolFromSmarts(primary_amine))
                    c_atoms = mol.GetSubstructMatches(Chem.MolFromSmarts(carboxylic_acid))
                    condition_met = False
                    for n_match in n_atoms:
                        n_idx = n_match[0]
                        for c_match in c_atoms:
                            c_idx = c_match[0]
                            path = Chem.rdmolops.GetShortestPath(mol, n_idx, c_idx)
                            # Check that path is linear, contains only carbons
                            if len(path) >= 7:
                                linear = True
                                for idx in path[1:-1]:
                                    atom = mol.GetAtomWithIdx(idx)
                                    if atom.GetSymbol() != 'C' or atom.GetDegree() != 2:
                                        linear = False
                                        break
                                if linear:
                                    condition_met = True
                                    break
                        if condition_met:
                            break
                    if not condition_met:
                        match = False
                elif rule.get('conditions') == 'para_substitution':
                    # Implement para substitution condition for Rule 2 and Rule 6
                    # Find aromatic carboxylic acid matches
                    ca_matches = mol.GetSubstructMatches(rule['compiled_patterns'][0])
                    if not ca_matches:
                        match = False
                    else:
                        condition_met = False
                        for ca_match in ca_matches:
                            ca_atom_idx = ca_match[0]
                            ca_atom = mol.GetAtomWithIdx(ca_atom_idx)
                            ring_info = mol.GetRingInfo()
                            atom_rings = ring_info.AtomRings()
                            # Find rings containing the carboxylic acid
                            rings_with_ca = [ring for ring in atom_rings if ca_atom_idx in ring]
                            for ring in rings_with_ca:
                                # Find position of carboxylic acid in ring
                                pos_ca = ring.index(ca_atom_idx)
                                ring_size = len(ring)
                                # Get atom at position opposite (para position)
                                pos_para = (pos_ca + ring_size // 2) % ring_size
                                para_atom_idx = ring[pos_para]
                                para_atom = mol.GetAtomWithIdx(para_atom_idx)
                                # Check for EWG or EDG at para position
                                if rule.get('compiled_ewg_patterns'):
                                    for ewg_pat in rule['compiled_ewg_patterns']:
                                        if para_atom.HasSubstructMatch(ewg_pat):
                                            condition_met = True
                                            break
                                elif rule.get('compiled_edg_patterns'):
                                    for edg_pat in rule['compiled_edg_patterns']:
                                        if para_atom.HasSubstructMatch(edg_pat):
                                            condition_met = True
                                            break
                                if condition_met:
                                    break
                            if condition_met:
                                break
                        if not condition_met:
                            match = False
                elif rule.get('conditions') == 'multiple_hydroxyls':
                    # Implement multiple hydroxyls condition for Rule 7
                    hydroxyl_matches = mol.GetSubstructMatches(Chem.MolFromSmarts(hydroxyl_group))
                    if len(hydroxyl_matches) < 2:
                        match = False
                elif rule.get('conditions') == 'multiple_coordinating_groups':
                    # Implement multiple coordinating groups condition for Rule 5
                    count = 0
                    for pat in rule.get('compiled_sub_patterns', []):
                        matches = mol.GetSubstructMatches(pat)
                        count += len(matches)
                    if count < 2:
                        match = False
                # Check sub-patterns if any
                if 'compiled_sub_patterns' in rule:
                    for pat in rule['compiled_sub_patterns']:
                        if not mol.HasSubstructMatch(pat):
                            match = False
                            break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # On error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df