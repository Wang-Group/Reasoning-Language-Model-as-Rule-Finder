def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    carboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1]'
    primary_aliphatic_amine = '[NX3;H2][CX4]'
    thiol_group = '[SX2H]'
    ether_linkage = '[#6][OX2][#6]'
    pyridine_ring = '[nX2]1cccc1'
    nitro_group_on_aromatic = '[c][NX3+](=O)[O-]'
    bromo_group_on_aromatic = '[c][Br]'
    hydroxyl_group = '[OX2H]'
    methoxy_group_on_aromatic = '[c][OX2][CH3]'
    aromatic_ring = 'c1ccccc1'
    dicarboxylic_amino_acid_2C = '[NX3;H2][CX4][CX4][C](=O)[OX1H0-,OX2H1]'
    dicarboxylic_amino_acid_long_chain = '[NX3;H2][CX4][CX4][CX4][C](=O)[OX1H0-,OX2H1]'
    phenolic_hydroxyl_group = '[c][OX2H]'
    polyhydroxylated_compound = '[#6][OX2H][#6][OX2H][#6][OX2H]'
    fluorinated_alkyl_chain = '[CX4][F]'
    nitrogen_heterocycle_attached_to_carboxylate = '[n][CX3](=O)[OX1H0-,OX2H1]'

    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Rule 1: Modifiers containing a terminal primary amino group (–NH₂) attached to an aliphatic chain of at least five carbons (including the carboxylate carbon).',
            'patterns': [primary_aliphatic_amine, carboxylic_acid],
            'path_length_cond': {'min':5},  # Path length between N and carboxyl C
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Rule 2: Modifiers with a thiol (–SH) group separated by two to three carbons from a carboxylate group.',
            'patterns': [thiol_group, carboxylic_acid],
            'path_length_cond': {'min':3, 'max':4},
            'prediction': 1
        },
        {
            'number':3,
            'description':'Rule 3: Modifiers featuring ether linkages (–O–) in the backbone with three or more ether units and terminal carboxylate or amino groups.',
            'patterns':[ether_linkage],
            'count_threshold':{'pattern':ether_linkage, 'threshold':3},
            'terminal_groups':[carboxylic_acid, primary_aliphatic_amine],
            'prediction':1
        },
        {
            'number':4,
            'description':'Rule 4: Modifiers with aromatic rings substituted at the para position with strong electron-withdrawing groups (e.g., nitro, bromo).',
            'patterns':[aromatic_ring],
            'substituents':[nitro_group_on_aromatic, bromo_group_on_aromatic],
            'prediction':1
        },
        {
            'number':5,
            'description':'Rule 5: Modifiers containing pyridine rings connected via an aliphatic linker of at least one carbon to the carboxylate group.',
            'patterns':[pyridine_ring, carboxylic_acid],
            'path_length_cond': {'min':2},
            'prediction':1
        },
        {
            'number':6,
            'description':'Rule 6: Modifiers with aliphatic hydroxyl (–OH) groups located four or more carbons away from the carboxylate group.',
            'patterns':[hydroxyl_group, carboxylic_acid],
            'path_length_cond': {'min':5},
            'prediction':1
        },
        {
            'number':7,
            'description':'Rule 7: Modifiers that are dicarboxylic amino acids with side chains of two carbons.',
            'patterns':[dicarboxylic_amino_acid_2C],
            'prediction':1
        },
        {
            'number':7.1,
            'description':'Rule 7.1: Modifiers that are dicarboxylic amino acids with side chains longer than two carbons.',
            'patterns':[dicarboxylic_amino_acid_long_chain],
            'prediction':-1
        },
        {
            'number':8,
            'description':'Rule 8: Modifiers with aromatic rings bearing multiple methoxy (–OCH₃) substituents and additional carbonyl groups linked to a carboxylate.',
            'patterns':[aromatic_ring, methoxy_group_on_aromatic, '[CX3]=[OX1]'],
            'prediction':1
        },
        {
            'number':9,
            'description':'Rule 9: Modifiers with fused aromatic systems containing multiple carbonyl groups.',
            'patterns':['[a][a][a][CX3]=[OX1]'],
            'prediction':1
        },
        {
            'number':10,
            'description':'Rule 10: Simple aliphatic or aromatic carboxylic acids without additional coordinating functional groups or with electron-donating substituents.',
            'patterns':[carboxylic_acid],
            'exclude_patterns':[primary_aliphatic_amine, thiol_group, ether_linkage],
            'prediction':-1
        },
        {
            'number':11,
            'description':'Rule 11: Modifiers with phenolic hydroxyl groups (–OH attached directly to an aromatic ring).',
            'patterns':[phenolic_hydroxyl_group],
            'prediction':-1
        },
        {
            'number':12,
            'description':'Rule 12: Modifiers containing multiple adjacent hydroxyl groups on an aliphatic chain (polyhydroxylated compounds).',
            'patterns':[polyhydroxylated_compound],
            'prediction':-1
        },
        {
            'number':13,
            'description':'Rule 13: Modifiers with bulky aromatic or heteroaromatic groups causing steric hindrance near the coordination site.',
            'patterns':[aromatic_ring, carboxylic_acid],
            'prediction':-1
        },
        {
            'number':14,
            'description':'Rule 14: Modifiers containing fluorinated alkyl chains.',
            'patterns':[fluorinated_alkyl_chain],
            'prediction':-1
        },
        {
            'number':15,
            'description':'Rule 15: Modifiers with nitrogen-containing heterocycles directly attached to the carboxylate group.',
            'patterns':[nitrogen_heterocycle_attached_to_carboxylate],
            'prediction':-1
        }
    ]

    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for pattern in rule.get('patterns', []):
            compiled_pattern = Chem.MolFromSmarts(pattern)
            compiled_patterns.append(compiled_pattern)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        compiled_exclude_patterns = []
        for pattern in rule.get('exclude_patterns', []):
            compiled_pattern = Chem.MolFromSmarts(pattern)
            if compiled_pattern:
                compiled_exclude_patterns.append(compiled_pattern)
        rule['compiled_exclude_patterns'] = compiled_exclude_patterns

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                for pat in rule.get('compiled_exclude_patterns', []):
                    if mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Check required patterns
                for pat in rule['compiled_patterns']:
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Additional logic for path length conditions
                if 'path_length_cond' in rule:
                    min_length = rule['path_length_cond'].get('min', None)
                    max_length = rule['path_length_cond'].get('max', None)
                    # Need to find atoms matching the patterns
                    atoms_list_1 = mol.GetSubstructMatches(rule['compiled_patterns'][0])
                    atoms_list_2 = mol.GetSubstructMatches(rule['compiled_patterns'][1])
                    path_lengths = []
                    for atom_idx_1 in atoms_list_1:
                        for atom_idx_2 in atoms_list_2:
                            idx1 = atom_idx_1[0]
                            idx2 = atom_idx_2[0]
                            path = Chem.rdmolops.GetShortestPath(mol, idx1, idx2)
                            path_length = len(path)
                            path_lengths.append(path_length)
                    if min_length is not None:
                        if not any(length >= min_length for length in path_lengths):
                            match = False
                    if max_length is not None:
                        if not any(length <= max_length for length in path_lengths):
                            match = False
                    if not match:
                        row.append(0)
                        continue
                # Additional logic for count thresholds
                if 'count_threshold' in rule:
                    pattern_to_count = Chem.MolFromSmarts(rule['count_threshold']['pattern'])
                    threshold = rule['count_threshold']['threshold']
                    matches = mol.GetSubstructMatches(pattern_to_count)
                    if len(matches) < threshold:
                        match = False
                        row.append(0)
                        continue
                    # Check for terminal groups
                    if 'terminal_groups' in rule:
                        terminal_match = False
                        for terminal_pat in rule['terminal_groups']:
                            compiled_terminal_pat = Chem.MolFromSmarts(terminal_pat)
                            if mol.HasSubstructMatch(compiled_terminal_pat):
                                terminal_match = True
                                break
                        if not terminal_match:
                            match = False
                            row.append(0)
                            continue
                # Additional logic for substituents
                if 'substituents' in rule:
                    substituent_match = False
                    for subs_pat in rule['substituents']:
                        compiled_subs_pat = Chem.MolFromSmarts(subs_pat)
                        if mol.HasSubstructMatch(compiled_subs_pat):
                            substituent_match = True
                            break
                    if not substituent_match:
                        match = False
                        row.append(0)
                        continue
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df
