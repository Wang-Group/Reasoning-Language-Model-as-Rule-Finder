def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    
    # Primary amine group (-NH2)
    primary_amine = '[NX3H2]'
    
    # Hydroxyl group (-OH)
    hydroxyl_group = '[OX2H]'
    
    # Aliphatic chain of five or more carbons
    aliphatic_chain_five_or_more = '[CH2][CH2][CH2][CH2][CH2]'
    
    # Aromatic carboxylic acid (benzoic acid)
    aromatic_carboxylic_acid = '[c][CX3](=O)[OX2H1]'
    
    # Electron-withdrawing groups (EWGs)
    nitro_group = '[NX3](=O)=O'  # Nitro group
    halogen = '[F,Cl,Br,I]'
    halomethyl = '[CX4][F,Cl,Br,I]'
    sulfanyl = '[SX2H]'
    
    # Electron-donating groups (EDGs)
    amino_group = '[NX3H2]'
    methoxy_group = '[OX2][CH3]'
    
    # Pyridine ring
    pyridine_ring = 'n1ccccc1'
    
    # Sulfur-containing groups
    thiol = '[SX2H]'  # Thiol group
    thioether = '[#16X2][#6]'  # Thioether group
    
    # Ether linkage in aliphatic chains (-O-CH2-CH2-)
    ether_linkage = '[OX2][CH2][CH2]([OX2][CH2][CH2]){2}[OX2]'  # Simplified pattern for multiple ether units
    
    # Alpha-amino acid with side-chain carboxylate close to alpha-carbon
    aspartic_acid_like = '[NX3][CX4H]([CX3](=O)[OX2H1])[CX3](=O)[OX2H1]'
    
    # Multiple adjacent hydroxyl groups
    polyol = '[OX2H][CX4][OX2H][CX4][OX2H]'
    
    # Aromatic hydroxyl group
    aromatic_hydroxyl = '[c][OX2H]'
    
    # Amino group attached to aromatic ring
    aromatic_amino = '[c][NX3H2]'
    
    # Rules definition
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are aliphatic carboxylic acids with a terminal primary amino group (-NH2) or hydroxyl group (-OH) at the omega-position, and a carbon chain length of at least five carbons.',
            'patterns': [
                [carboxylic_acid],
                [primary_amine, hydroxyl_group],
                [aliphatic_chain_five_or_more]
            ],
            'smarts_logic': 'custom',
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers that are aromatic carboxylic acids with strong electron-withdrawing groups (EWGs) at the para position (e.g., nitro, halomethyl, sulfanyl).',
            'patterns': [
                [aromatic_carboxylic_acid],
                [nitro_group, halomethyl, sulfanyl]
            ],
            'smarts_logic': 'custom',
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers that are aromatic carboxylic acids containing a pyridine ring with an accessible nitrogen atom.',
            'patterns': [
                [pyridine_ring],
                [carboxylic_acid]
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers containing sulfur atoms in functional groups such as thiol (-SH) or thioether (-S-) within close proximity to the carboxylate group.',
            'patterns': [
                [carboxylic_acid],
                [thiol, thioether]
            ],
            'smarts_logic': 'custom',
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers that are aliphatic carboxylic acids with flexible polyether chains and terminal amino (-NH2) or other coordinating groups.',
            'patterns': [
                [carboxylic_acid],
                [ether_linkage],
                [primary_amine, hydroxyl_group]
            ],
            'smarts_logic': 'custom',
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers that are aromatic carboxylic acids with electron-donating groups (EDGs) such as amino (-NH2) or hydroxyl (-OH) directly attached to the ring.',
            'patterns': [
                [aromatic_carboxylic_acid],
                [aromatic_amino, aromatic_hydroxyl]
            ],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Modifiers that are aliphatic carboxylic acids lacking additional coordinating groups or electron-withdrawing substituents.',
            'patterns': [
                [carboxylic_acid]
            ],
            'exclude_patterns': [
                [primary_amine, hydroxyl_group, thiol, methoxy_group]
            ],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers with multiple adjacent hydroxyl groups (polyols) near the carboxylate group.',
            'patterns': [
                [carboxylic_acid],
                [polyol]
            ],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers that are alpha-amino acids with side-chain carboxylate groups close to the alpha-carbon.',
            'patterns': [
                [aspartic_acid_like]
            ],
            'prediction': 1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(p) for p in group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for group in rule['exclude_patterns']:
                compiled_group = [Chem.MolFromSmarts(p) for p in group]
                compiled_excludes.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_excludes
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Custom logic for certain rules
                if rule.get('smarts_logic') == 'custom':
                    if rule['number'] == 1:
                        # Rule 1 custom logic
                        # Check for carboxylic acid group
                        if not mol.HasSubstructMatch(Chem.MolFromSmarts(carboxylic_acid)):
                            match = False
                        else:
                            # Check for terminal primary amine or hydroxyl group
                            terminal_groups = [primary_amine, hydroxyl_group]
                            terminal_match = False
                            for pat in terminal_groups:
                                termini = mol.GetSubstructMatches(Chem.MolFromSmarts(pat))
                                for term in termini:
                                    atom = mol.GetAtomWithIdx(term[0])
                                    if len(atom.GetNeighbors()) == 1:
                                        terminal_match = True
                                        break
                                if terminal_match:
                                    break
                            if not terminal_match:
                                match = False
                            else:
                                # Check for aliphatic chain of at least five carbons
                                # Simplified by checking the total number of carbon atoms
                                num_carbons = sum(1 for atom in mol.GetAtoms() if atom.GetAtomicNum() == 6 and not atom.IsInRing())
                                if num_carbons < 5:
                                    match = False
                        row.append(rule['prediction'] if match else 0)
                        continue
                    elif rule['number'] == 2:
                        # Rule 2 custom logic
                        # Check for aromatic carboxylic acid
                        if not mol.HasSubstructMatch(Chem.MolFromSmarts(aromatic_carboxylic_acid)):
                            match = False
                        else:
                            # Check for EWG at para position
                            ewg_patterns = [nitro_group, halomethyl, sulfanyl]
                            ewg_match = False
                            for ewg in ewg_patterns:
                                # We're approximating para position by checking if EWG is connected to aromatic ring
                                if mol.HasSubstructMatch(Chem.MolFromSmarts(f'[c][c]([c][c][c]{ewg})[c][CX3](=O)[OX2H1]')):
                                    ewg_match = True
                                    break
                            if not ewg_match:
                                match = False
                        row.append(rule['prediction'] if match else 0)
                        continue
                    elif rule['number'] == 4:
                        # Rule 4 custom logic
                        # Check for carboxylic acid group
                        if not mol.HasSubstructMatch(Chem.MolFromSmarts(carboxylic_acid)):
                            match = False
                        else:
                            # Check for sulfur-containing group within 3 bonds of carboxylic acid
                            sulfur_groups = [thiol, thioether]
                            carboxy_matches = mol.GetSubstructMatches(Chem.MolFromSmarts(carboxylic_acid))
                            sulfur_matches = []
                            for pat in sulfur_groups:
                                sulfur_matches.extend(mol.GetSubstructMatches(Chem.MolFromSmarts(pat)))
                            sulfur_near_carboxy = False
                            for c_match in carboxy_matches:
                                c_atom_idx = c_match[0]
                                for s_match in sulfur_matches:
                                    s_atom_idx = s_match[0]
                                    path_length = Chem.rdmolops.GetShortestPath(mol, c_atom_idx, s_atom_idx)
                                    if len(path_length) - 1 <= 3:
                                        sulfur_near_carboxy = True
                                        break
                                if sulfur_near_carboxy:
                                    break
                            if not sulfur_near_carboxy:
                                match = False
                        row.append(rule['prediction'] if match else 0)
                        continue
                    elif rule['number'] == 5:
                        # Rule 5 custom logic
                        # Check for carboxylic acid group
                        if not mol.HasSubstructMatch(Chem.MolFromSmarts(carboxylic_acid)):
                            match = False
                        else:
                            # Check for ether linkage
                            if not mol.HasSubstructMatch(Chem.MolFromSmarts(ether_linkage)):
                                match = False
                            else:
                                # Check for terminal amino or hydroxyl group
                                terminal_groups = [primary_amine, hydroxyl_group]
                                terminal_match = False
                                for pat in terminal_groups:
                                    termini = mol.GetSubstructMatches(Chem.MolFromSmarts(pat))
                                    for term in termini:
                                        atom = mol.GetAtomWithIdx(term[0])
                                        if len(atom.GetNeighbors()) == 1:
                                            terminal_match = True
                                            break
                                    if terminal_match:
                                        break
                                if not terminal_match:
                                    match = False
                        row.append(rule['prediction'] if match else 0)
                        continue
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        if mol.HasSubstructMatch(pat):
                            group_match = True
                            break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df