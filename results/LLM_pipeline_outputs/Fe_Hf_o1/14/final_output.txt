
    Target Name: Fe/Hf
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

1. **Modifiers containing a terminal amino group at least four carbon atoms away from a carboxylate group (long-chain ω-amino acids) result in `Fe/Hf_high_or_low_value` being **True**.**

   Long-chain ω-amino acids can effectively chelate Fe ions through the formation of stable five- or six-membered rings, enhancing Fe incorporation into the catalyst.

   **Examples:**
   - **5-aminopentanoic acid** *(True)*
   - **7-aminoheptanoic acid** *(True)*
   - **8-aminooctanoic acid** *(True)*
   - **(2S)-6-acetamido-2-aminohexanoic acid** *(True)*

2. **Modifiers containing both a carboxylate group and a thiol (–SH) functional group result in `Fe/Hf_high_or_low_value` being **True**.**

   Thiol groups are soft Lewis bases with a high affinity for Fe ions, facilitating strong coordination and increased Fe loading.

   **Examples:**
   - **3-sulfanylpropanoic acid** *(True)*
   - **4-sulfanylbenzoic acid** *(True)*
   - **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid** *(True)*

3. **Modifiers containing an aromatic ring with electron-donating methoxy (–OCH₃) groups result in `Fe/Hf_high_or_low_value` being **True**.**

   Electron-donating groups increase the electron density of the aromatic ring, enhancing π-interactions and coordination with Fe ions.

   **Example:**
   - **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid** *(True)*

4. **Modifiers with a pyridyl group connected via a linker to a carboxylate group result in `Fe/Hf_high_or_low_value` being **True**.**

   The nitrogen atom in the pyridine ring acts as a strong coordination site for Fe ions, promoting Fe incorporation.

   **Examples:**
   - **4-pyridin-4-ylbutanoic acid** *(True)*
   - **4-pyridin-4-ylbenzoic acid** *(True)*

5. **Modifiers containing ether linkages and an amino or carboxylate group result in `Fe/Hf_high_or_low_value` being **True**.**

   Ether linkages provide flexibility, allowing the modifier to adopt conformations that facilitate multi-dentate binding with Fe ions.

   **Examples:**
   - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid** *(True)*
   - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid** *(True)*

6. **Modifiers that are amino acids with side-chain carboxylate groups result in `Fe/Hf_high_or_low_value` being **True**.**

   Multiple carboxylate groups offer additional coordination sites for Fe ions, enhancing Fe incorporation.

   **Example:**
   - **(2S)-2-aminobutanedioic acid (Aspartic acid)** *(True)*

7. **Modifiers containing an aromatic ring with strong electron-withdrawing groups such as nitro (–NO₂) result in `Fe/Hf_high_or_low_value` being **True**.**

   Electron-withdrawing groups increase the electrophilicity of the ring, facilitating metal-ligand interactions with Fe ions.

   **Example:**
   - **4-nitrobenzoic acid** *(True)*

8. **Modifiers with a hydroxy group on an aliphatic chain in addition to a carboxylate group result in `Fe/Hf_high_or_low_value` being **True**.**

   Aliphatic hydroxyl groups can participate in coordination with Fe ions, enhancing Fe incorporation.

   **Example:**
   - **7-hydroxyheptanoic acid** *(True)*

9. **Modifiers that are simple alkyl or aryl carboxylic acids without additional coordinating functional groups result in `Fe/Hf_high_or_low_value` being **False**.**

   Lack of multiple coordination sites leads to lower Fe incorporation compared to Hf.

   **Examples:**
   - **Octanoic acid** *(False)*
   - **4-methylbenzoic acid** *(False)*
   - **pyridine-3-carboxylic acid** *(False)*

10. **Modifiers containing an aromatic hydroxyl (phenolic –OH) group directly attached to the ring result in `Fe/Hf_high_or_low_value` being **False**.**

    Phenolic hydroxyl groups may form strong interactions with Hf ions, reducing Fe incorporation.

    **Examples:**
    - **3-(4-hydroxyphenyl)propanoic acid** *(False)*
    - **5-(4-hydroxyphenyl)pentanoic acid** *(False)*
    - **2-[(4-hydroxybenzoyl)amino]acetic acid** *(False)*

11. **Modifiers containing multiple hydroxyl groups (polyhydroxylated compounds) result in `Fe/Hf_high_or_low_value` being **False**.**

    Multiple hydroxyl groups increase hydrophilicity and may preferentially coordinate with Hf clusters.

    **Example:**
    - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** *(False)*

12. **Modifiers with carbonyl groups adjacent to the carboxylate (α-keto acids) result in `Fe/Hf_high_or_low_value` being **False**.**

    Ketone groups adjacent to carboxylates may not effectively coordinate with Fe ions.

    **Examples:**
    - **2-oxo-1H-pyridine-4-carboxylic acid** *(False)*
    - **4-oxoheptanedioic acid** *(False)*

13. **Modifiers containing fluorinated alkyl chains result in `Fe/Hf_high_or_low_value` being **False**.**

    Fluorinated groups are highly electronegative and reduce the affinity of the modifier for Fe ions.

    **Example:**
    - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid** *(False)*

14. **Modifiers with an amino group directly attached to an aromatic ring result in `Fe/Hf_high_or_low_value` being **False**.**

    Aromatic amino groups may engage in strong interactions with Hf ions, limiting Fe incorporation.

    **Example:**
    - **4-aminobenzoic acid** *(False)*

15. **Modifiers that are amino acids with bulky, hydrophobic side chains result in `Fe/Hf_high_or_low_value` being **False**.**

    Bulky side chains can hinder effective coordination with Fe ions.

    **Example:**
    - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid (Tryptophan)** *(False)*

**End of Rules**

---

**Explanation and Analysis:**

In generating these rules, the following considerations were made:

- **Coordination Chemistry:** Functional groups capable of donating electron pairs (e.g., amino, thiol, pyridyl nitrogen) enhance Fe coordination due to Fe's preference for such ligands.

- **Chelation Effect:** Modifiers that can form chelate rings with Fe ions (e.g., ω-amino acids) increase Fe incorporation due to the stability of chelated complexes.

- **Electronic Effects:** Electron-donating groups on aromatic rings enhance coordination through increased electron density, while electron-withdrawing groups can either facilitate or hinder Fe binding depending on their influence on the ligand's donor ability.

- **Steric Factors:** Bulky side chains or multiple hydroxyl groups can sterically hinder coordination sites, reducing Fe incorporation.

- **Hydrophilicity vs. Hydrophobicity:** Highly hydrophilic modifiers with multiple hydroxyl groups may prefer Hf coordination, while hydrophobic fluorinated chains reduce affinity for Fe ions.

- **Functional Group Interactions:** The presence and position of functional groups (e.g., phenolic –OH vs. aliphatic –OH) significantly impact the modifier's ability to coordinate with Fe ions.

This set of rules aims to balance simplicity and coverage, providing clear guidelines for predicting `Fe/Hf_high_or_low_value` based on the structural features of the modifiers. Each rule combines multiple functional groups or structural characteristics to enhance predictive power, adhering to the requirements specified.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,1,0,1,0,0,0,0,0,0,-1
0,0,0,0,0,1,0,1,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,1,0,0,0,0,-1,0,0
0,0,0,0,0,1,0,1,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,1,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,1,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,1,0,-1,-1,0,0,0,0
0,0,0,1,0,0,0,1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,1,0,0,-1,0,0,0,0
0,1,0,0,0,0,0,1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
0,0,0,1,0,0,0,1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,1,0,0,0,0,-1,0,0
0,0,0,1,0,1,0,1,0,0,0,0,0,0,-1
0,0,0,1,0,0,0,1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
0,1,0,0,0,0,0,1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,1,0,-1,-1,0,0,0,0
0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
0,0,0,0,0,0,1,1,0,0,0,0,0,-1,0
0,0,0,1,0,0,0,1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
0,0,0,1,0,0,0,1,0,0,0,0,0,0,0
0,0,1,0,0,0,0,1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,1,0,-1,-1,0,0,0,0
0,0,0,0,0,0,0,1,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,1,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,1,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,1,0,-1,-1,0,0,0,0
0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
0,0,0,0,1,0,0,1,0,0,0,0,0,0,0
1,0,0,0,0,1,0,1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,1,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.7714285714285715; Test Accuracy: 0.0
    Train Support: 0.06190476190476191; Test Support: 0.08333333333333333
    Train Confidence: 0.8166666666666665; Test Confidence: 0.5
    Train Lift: 1.6435639070442989; Test Lift: NONE
    Train Leverage: 0.01891156462585034; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define the rules with their associated SMARTS patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers containing a terminal amino group at least four carbon atoms away from a carboxylate group (long-chain ω-amino acids) result in Fe/Hf_high_or_low_value being True.',
            'patterns': [
                '[NX3;H2,H1;!$(N[*;r])]CCCCC[CX3](=O)[OX1H0-,OX2H1]'
            ],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers containing both a carboxylate group and a thiol (–SH) functional group result in Fe/Hf_high_or_low_value being True.',
            'patterns': [
                '[CX3](=O)[OX1H0-,OX2H1]',  # Carboxylic acid
                '[#6][SX2H]'
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers containing an aromatic ring with electron-donating methoxy (–OCH₃) groups result in Fe/Hf_high_or_low_value being True.',
            'patterns': [
                '[c][OX2][CH3]',  # Methoxy group on aromatic ring
                '[c]',  # Aromatic ring
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers with a pyridyl group connected via a linker to a carboxylate group result in Fe/Hf_high_or_low_value being True.',
            'patterns': [
                '[n][c]',  # Pyridyl group
                '[CX3](=O)[OX1H0-,OX2H1]',  # Carboxylic acid
            ],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers containing ether linkages and an amino or carboxylate group result in Fe/Hf_high_or_low_value being True.',
            'patterns': [
                '[#6][OX2][#6]',  # Ether linkage
                '[NX3;H2,H1,H0]',  # Amino group
                '[CX3](=O)[OX1H0-,OX2H1]',  # Carboxylic acid
            ],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers that are amino acids with side-chain carboxylate groups result in Fe/Hf_high_or_low_value being True.',
            'patterns': [
                '[NX3;H2,H1;!$(N[*;r])][CX4H]([#6])[CX3](=O)[OX1H0-,OX2H1]',  # Amino acid backbone
                '[CX3](=O)[OX1H0-,OX2H1]',  # Side-chain carboxylic acid
            ],
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'Modifiers containing an aromatic ring with strong electron-withdrawing groups such as nitro (–NO₂) result in Fe/Hf_high_or_low_value being True.',
            'patterns': [
                '[c][NX3+](=O)[O-]',  # Nitro group on aromatic ring
                '[c]',  # Aromatic ring
            ],
            'prediction': 1
        },
        {
            'number': 8,
            'description': 'Modifiers with a hydroxy group on an aliphatic chain in addition to a carboxylate group result in Fe/Hf_high_or_low_value being True.',
            'patterns': [
                '[CX3](=O)[OX1H0-,OX2H1]',  # Carboxylic acid
                '[#6][OX2H]'  # Aliphatic hydroxyl group
            ],
            'prediction': 1
        },
        {
            'number': 9,
            'description': 'Modifiers that are simple alkyl or aryl carboxylic acids without additional coordinating functional groups result in Fe/Hf_high_or_low_value being False.',
            'patterns': [
                '[CX3](=O)[OX1H0-,OX2H1]',  # Carboxylic acid
            ],
            'exclude_patterns': [
                '[NX3;H2,H1,H0]',  # Exclude amino groups
                '[OX2H]',  # Exclude hydroxyl groups
                '[SX2H]',  # Exclude thiol groups
                '[#7]',    # Exclude nitrogen atoms
                '[#8]',    # Exclude oxygen atoms other than carboxylate
                '[#16]',   # Exclude sulfur atoms
            ],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers containing an aromatic hydroxyl (phenolic –OH) group directly attached to the ring result in Fe/Hf_high_or_low_value being False.',
            'patterns': [
                '[c][OX2H]',  # Phenolic hydroxyl group
            ],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Modifiers containing multiple hydroxyl groups (polyhydroxylated compounds) result in Fe/Hf_high_or_low_value being False.',
            'patterns': [
                '[OX2H]',  # Hydroxyl group
            ],
            'count_threshold': {'[OX2H]': 2},  # At least 2 hydroxyl groups
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'Modifiers with carbonyl groups adjacent to the carboxylate (α-keto acids) result in Fe/Hf_high_or_low_value being False.',
            'patterns': [
                '[CX3](=O)[CX3](=O)[OX1H0-,OX2H1]',  # Alpha-keto acid
            ],
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Modifiers containing fluorinated alkyl chains result in Fe/Hf_high_or_low_value being False.',
            'patterns': [
                '[CX4][F,Cl,Br,I]',  # Halogens attached to aliphatic carbons
            ],
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'Modifiers with an amino group directly attached to an aromatic ring result in Fe/Hf_high_or_low_value being False.',
            'patterns': [
                '[c][NX3;H2,H1,H0]',  # Amino group on aromatic ring
            ],
            'prediction': -1
        },
        {
            'number': 15,
            'description': 'Modifiers that are amino acids with bulky, hydrophobic side chains result in Fe/Hf_high_or_low_value being False.',
            'patterns': [
                '[NX3;H2,H1;!$(N[*;r])][CX4H]([#6])[CX3](=O)[OX1H0-,OX2H1]',  # Amino acid backbone
                '[c]',  # Aromatic side chain (bulky)
            ],
            'prediction': -1
        }
    ]

    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for smarts in rule.get('patterns', []):
            compiled_patterns.append(Chem.MolFromSmarts(smarts))
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for smarts in rule['exclude_patterns']:
                compiled_excludes.append(Chem.MolFromSmarts(smarts))
            rule['compiled_exclude_patterns'] = compiled_excludes

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for pat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for pat in rule['compiled_patterns']:
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if match:
                    # Check count thresholds if any
                    if 'count_threshold' in rule:
                        for smarts, threshold in rule['count_threshold'].items():
                            pat = Chem.MolFromSmarts(smarts)
                            matches = mol.GetSubstructMatches(pat)
                            if len(matches) < threshold:
                                match = False
                                break
                    if match:
                        row.append(rule['prediction'])
                    else:
                        row.append(0)
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)

    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: Fe/Hf
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

1. **Modifiers with terminal amino groups (–NH₂) attached to aliphatic chains of four or more carbons result in `Fe/Hf_high_or_low_value` being **True**.**

   The terminal amino group can coordinate with Fe ions, and the chain length allows for flexible chelation.

   **Examples:**
   - **5-aminopentanoic acid** *(True)*
   - **7-aminoheptanoic acid** *(True)*
   - **8-aminooctanoic acid** *(True)*
   - **(2S)-6-acetamido-2-aminohexanoic acid** *(True)*

   **Counter-Example:**
   - **4-aminobenzoic acid** *(False)* (amino group directly attached to aromatic ring)

2. **Modifiers containing a thiol (–SH) group and a carboxylate group result in `Fe/Hf_high_or_low_value` being **True**.**

   Thiol groups are strong Lewis bases that coordinate effectively with Fe ions.

   **Examples:**
   - **3-sulfanylpropanoic acid** *(True)*
   - **4-sulfanylbenzoic acid** *(True)*
   - **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid** *(True)*

3. **Modifiers with ether linkages (–O–) in the backbone and terminal amino or carboxylate groups result in `Fe/Hf_high_or_low_value` being **True**.**

   Ether linkages provide flexibility, facilitating multi-dentate coordination with Fe ions.

   **Examples:**
   - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid** *(True)*
   - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid** *(True)*

4. **Modifiers containing a pyridine ring connected to a carboxylate group via an aliphatic linker result in `Fe/Hf_high_or_low_value` being **True**.**

   The pyridine nitrogen acts as a strong coordination site for Fe ions.

   **Examples:**
   - **4-pyridin-4-ylbutanoic acid** *(True)*
   - **4-pyridin-4-ylbenzoic acid** *(True)*

   **Counter-Example:**
   - **pyridine-3-carboxylic acid** *(False)* (carboxylate group directly attached to pyridine ring)

5. **Modifiers with electron-withdrawing groups (e.g., nitro, bromomethyl) at the para position of an aromatic ring result in `Fe/Hf_high_or_low_value` being **True**.**

   Electron-withdrawing groups can enhance metal-ligand interactions through inductive effects.

   **Examples:**
   - **4-nitrobenzoic acid** *(True)*
   - **4-(bromomethyl)benzoic acid** *(True)*

6. **Modifiers with electron-donating methoxy (–OCH₃) groups on aromatic rings result in `Fe/Hf_high_or_low_value` being **True**.**

   These groups increase electron density, enhancing π-coordination with Fe ions.

   **Example:**
   - **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid** *(True)*

7. **Modifiers with aliphatic hydroxyl (–OH) groups located at least three carbons away from the carboxylate group result in `Fe/Hf_high_or_low_value` being **True**.**

   Aliphatic hydroxyl groups can act as additional coordination sites for Fe ions.

   **Example:**
   - **7-hydroxyheptanoic acid** *(True)*

   **Counter-Examples:**
   - **Modifiers with phenolic hydroxyl groups directly attached to aromatic rings result in `Fe/Hf_high_or_low_value` being **False**.**

     **Examples:**
     - **3-(4-hydroxyphenyl)propanoic acid** *(False)*
     - **5-(4-hydroxyphenyl)pentanoic acid** *(False)*

8. **Modifiers that are amino acids with side-chain carboxylate groups (dicarboxylic amino acids) and shorter side chains result in `Fe/Hf_high_or_low_value` being **True**, whereas those with longer side chains result in `Fe/Hf_high_or_low_value` being **False**.**

   The position of the side-chain carboxylate affects chelation ability.

   **Examples:**
   - **(2S)-2-aminobutanedioic acid (Aspartic acid)** *(True)*
   - **(2S)-2-aminopentanedioic acid (Glutamic acid)** *(False)*

9. **Modifiers with multiple hydroxyl groups (polyhydroxylated compounds) result in `Fe/Hf_high_or_low_value` being **False**.**

   Excessive hydrophilicity and competitive binding with Hf ions reduce Fe incorporation.

   **Example:**
   - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** *(False)*

10. **Modifiers that are simple carboxylic acids without additional coordinating functional groups result in `Fe/Hf_high_or_low_value` being **False**.**

    Lack of effective coordination sites leads to lower Fe incorporation.

    **Examples:**
    - **Octanoic acid** *(False)*
    - **4-methylbenzoic acid** *(False)*

11. **Modifiers containing fluorinated alkyl chains result in `Fe/Hf_high_or_low_value` being **False**.**

    The electronegativity of fluorine decreases the ligand's ability to coordinate with Fe ions.

    **Example:**
    - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid** *(False)*

12. **Modifiers with aromatic amino groups (–NH₂ directly attached to an aromatic ring) result in `Fe/Hf_high_or_low_value` being **False**.**

    Aromatic amino groups may preferentially interact with Hf ions or be less effective in coordinating Fe.

    **Example:**
    - **4-aminobenzoic acid** *(False)*

13. **Modifiers with carbonyl groups adjacent to the carboxylate group (α-keto acids) result in `Fe/Hf_high_or_low_value` being **False**.**

    The adjacent carbonyl may hinder effective Fe coordination.

    **Examples:**
    - **2-oxo-1H-pyridine-4-carboxylic acid** *(False)*
    - **4-oxoheptanedioic acid** *(False)*

14. **Modifiers with functional groups capable of multi-dentate chelation (e.g., thiol and amino groups in specific positions) enhance Fe incorporation, resulting in `Fe/Hf_high_or_low_value` being **True**.**

    **Examples:**
    - **Modifiers in Rules 1–3**

15. **Modifiers with bulky or sterically hindering groups that impede Fe coordination result in `Fe/Hf_high_or_low_value` being **False**.**

    Such steric hindrance reduces effective binding to Fe ions.

    **Examples:**
    - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid (Tryptophan)** *(False)*
    - **Modifiers with bulky fluorinated chains (Rule 11)**

**End of Rules**

---

**Explanation:**

In generating these rules, the following considerations were made:

- **Combining Functional Groups:** Each rule combines multiple sub-structures, such as functional groups and structural features, to predict the `Fe/Hf_high_or_low_value`.

- **Physical-Chemical Properties:** The rules are based on coordination chemistry principles, considering how different functional groups interact with Fe ions.

- **Clear Predictions:** Each rule clearly states whether the `Fe/Hf_high_or_low_value` is **True** or **False** for modifiers that fit the description.

- **Broader Coverage:** The rules aim to cover a wide range of modifiers in the dataset, balancing simplicity and complexity.

- **Balance Between Simple and Complex Rules:** Rules 1, 2, 3, and 4 are relatively simple with broader coverage, while rules like 8 and 13 are more specific, addressing particular cases.

- **Abandoning Terrible Rules:** Inconsistent or contradictory rules from the previous set have been refined or merged to enhance clarity and predictive power.

---

By adhering to the specified requirements and leveraging chemical insights, this set of rules provides a structured approach to predicting the impact of molecular modifiers on the `Fe/Hf_high_or_low_value`. Each rule integrates multiple functional groups and structural features, ensuring comprehensive coverage and practical applicability.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 9,Rule 10,Rule 12
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,1,-1,0,0
0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,1,-1,0,0
0,1,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0
0,0,1,0,0,1,0,0,0,0
0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,1,-1,0,0
0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6857142857142857; Test Accuracy: 0.0
    Train Support: 0.13333333333333333; Test Support: 0.0
    Train Confidence: 0.9333333333333332; Test Confidence: 0.5
    Train Lift: 1.891067538126362; Test Lift: NONE
    Train Leverage: 0.056598639455782314; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define the rules with their associated SMARTS patterns and predictions
    # Patterns within inner lists are ORed together; pattern groups are ANDed together
    # Exclude patterns are used to exclude matches
    rules = [
        {
            'number': 1,
            'description': 'Modifiers with terminal amino groups (-NH2) attached to aliphatic chains of four or more carbons result in Fe/Hf_high_or_low_value being True.',
            'smarts': [
                [
                    # Chains of 4 or more aliphatic carbons ending with NH2 and attached to a carboxylic acid
                    '[NX3H2][CX4][CX4][CX4][CX4][CX3](=O)[O-]?',
                    '[NX3H2][CX4][CX4][CX4][CX4][CX4][CX3](=O)[O-]?',
                    '[NX3H2][CX4][CX4][CX4][CX4][CX4][CX4][CX3](=O)[O-]?'
                ]
            ],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers containing a thiol (-SH) group and a carboxylate group result in Fe/Hf_high_or_low_value being True.',
            'smarts': [
                [
                    '[SX2H]'  # Thiol group
                ],
                [
                    '[CX3](=O)[O-]', '[CX3](=O)[OX1H0-,OX2H1]'  # Carboxylate or carboxylic acid
                ]
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers with ether linkages (-O-) in the backbone and terminal amino or carboxylate groups result in Fe/Hf_high_or_low_value being True.',
            'smarts': [
                [
                    '[#6][OX2][#6]'  # Ether linkage
                ],
                [
                    '[NX3H2]', '[NX3H1]',  # Terminal amino groups
                    '[CX3](=O)[O-]', '[CX3](=O)[OX1H0-,OX2H1]'  # Carboxylate or carboxylic acid groups
                ]
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers containing a pyridine ring connected to a carboxylate group via an aliphatic linker result in Fe/Hf_high_or_low_value being True.',
            'smarts': [
                [
                    'n1ccccc1'  # Pyridine ring
                ],
                [
                    '[CX4][CX3](=O)[O-]', '[CX4][CX3](=O)[OX1H0-,OX2H1]'  # Aliphatic linker to carboxylate
                ]
            ],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers with electron-withdrawing groups at the para position of an aromatic ring result in Fe/Hf_high_or_low_value being True.',
            'smarts': [
                [
                    'c1ccc(cc1)[N+](=O)[O-]',  # Nitro group on aromatic ring
                    'c1ccc(cc1)[Br]',  # Bromine on aromatic ring
                    'c1ccc(cc1)[CBr]'  # Bromomethyl group on aromatic ring
                ]
            ],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers with electron-donating methoxy (-OCH3) groups on aromatic rings result in Fe/Hf_high_or_low_value being True.',
            'smarts': [
                [
                    'c[OX2][CH3]',  # Methoxy group attached to aromatic carbon
                    'c[OX2][CH2][CH3]'  # Ethoxy group attached to aromatic carbon
                ]
            ],
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'Modifiers with aliphatic hydroxyl (-OH) groups located at least three carbons away from the carboxylate group result in Fe/Hf_high_or_low_value being True.',
            'smarts': [
                [
                    '[CX4][CX4][CX4][OX2H]'  # Aliphatic chain with OH at least 3 carbons away
                ],
                [
                    '[CX3](=O)[O-]', '[CX3](=O)[OX1H0-,OX2H1]'  # Carboxylate or carboxylic acid group
                ]
            ],
            'exclude_smarts': [
                [
                    '[a]'  # Exclude aromatic atoms
                ]
            ],
            'prediction': 1
        },
        {
            'number': 9,
            'description': 'Modifiers with multiple hydroxyl groups (polyhydroxylated compounds) result in Fe/Hf_high_or_low_value being False.',
            'smarts': [
                [
                    '[OX2H]'  # Hydroxyl group
                ]
            ],
            'count_smarts': {
                '[OX2H]': 2  # At least two hydroxyl groups
            },
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers that are simple carboxylic acids without additional coordinating functional groups result in Fe/Hf_high_or_low_value being False.',
            'smarts': [
                [
                    '[CX3](=O)[O-]', '[CX3](=O)[OX1H0-,OX2H1]'  # Carboxylate or carboxylic acid group
                ]
            ],
            'exclude_smarts': [
                [
                    '[OX2][#6]',  # Exclude ethers
                    '[NX3]',  # Exclude amines
                    '[SX2]', '[SX2H]',  # Exclude sulfur groups
                    '[#7]', '[#16]'  # Exclude nitrogen and sulfur atoms
                ]
            ],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'Modifiers with aromatic amino groups (-NH2 directly attached to an aromatic ring) result in Fe/Hf_high_or_low_value being False.',
            'smarts': [
                [
                    '[NX3H2][c]'  # Amino group attached to aromatic ring
                ]
            ],
            'prediction': -1
        }
    ]

    # Compile SMARTS patterns and exclude patterns
    for rule in rules:
        compiled_smarts = []
        for group in rule.get('smarts', []):
            compiled_group = [Chem.MolFromSmarts(pat) for pat in group]
            compiled_smarts.append(compiled_group)
        rule['compiled_smarts'] = compiled_smarts
        if 'exclude_smarts' in rule:
            compiled_exclude = []
            for group in rule['exclude_smarts']:
                compiled_group = [Chem.MolFromSmarts(pat) for pat in group]
                compiled_exclude.append(compiled_group)
            rule['compiled_exclude'] = compiled_exclude

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'compiled_exclude' in rule:
                    for group in rule['compiled_exclude']:
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for group in rule['compiled_smarts']:
                    group_match = False
                    for pat in group:
                        if mol.HasSubstructMatch(pat):
                            group_match = True
                            break
                    if not group_match:
                        match = False
                        break
                # Check count patterns if any
                if match and 'count_smarts' in rule:
                    for smarts, threshold in rule['count_smarts'].items():
                        pat = Chem.MolFromSmarts(smarts)
                        matches = mol.GetSubstructMatches(pat)
                        if len(matches) < threshold:
                            match = False
                            break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: Fe/Hf
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

1. **Modifiers containing a terminal primary amino group (–NH₂) attached to an aliphatic chain of at least five carbons (including the carboxylate carbon) result in `Fe/Hf_high_or_low_value` being **True**.**

   *The long aliphatic chain provides flexibility, and the terminal amino group acts as a strong coordination site for Fe ions, enhancing incorporation into the catalyst.*

   **Examples:**

   - **5-aminopentanoic acid** *(True)*
   - **7-aminoheptanoic acid** *(True)*
   - **8-aminooctanoic acid** *(True)*
   - **(2S)-6-acetamido-2-aminohexanoic acid** *(True)*

   **Counter-Examples:**

   - **4-aminobenzoic acid** *(False)* (amino group attached to aromatic ring)
   - **(2S)-2-aminopentanedioic acid** *(False)* (short side-chain length with additional carboxylate)

2. **Modifiers with a thiol (–SH) group separated by two to three carbons from a carboxylate group result in `Fe/Hf_high_or_low_value` being **True**.**

   *Thiol groups are soft Lewis bases and can form strong coordination bonds with Fe ions, facilitating higher Fe incorporation.*

   **Examples:**

   - **3-sulfanylpropanoic acid** *(True)*
   - **4-sulfanylbenzoic acid** *(True)*

3. **Modifiers featuring ether linkages (–O–) in the backbone with three or more ether units and terminal carboxylate or amino groups result in `Fe/Hf_high_or_low_value` being **True**.**

   *Ether linkages increase molecular flexibility, allowing multiple coordination interactions via oxygen atoms and terminal functional groups with Fe ions.*

   **Examples:**

   - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid** *(True)*
   - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid** *(True)*

4. **Modifiers with aromatic rings substituted at the para position with strong electron-withdrawing groups (e.g., nitro, bromo) result in `Fe/Hf_high_or_low_value` being **True**.**

   *Electron-withdrawing groups enhance the acidity of the carboxylic acid, improving its ability to coordinate with Fe ions.*

   **Examples:**

   - **4-nitrobenzoic acid** *(True)*
   - **4-(bromomethyl)benzoic acid** *(True)*

   **Counter-Examples:**

   - **4-methylbenzoic acid** *(False)* (electron-donating methyl group)
   - **4-formylbenzoic acid** *(False)* (aldehyde group less effective)

5. **Modifiers containing pyridine rings connected via an aliphatic linker of at least one carbon to the carboxylate group result in `Fe/Hf_high_or_low_value` being **True**.**

   *The pyridine nitrogen acts as a strong coordination site, and the linker provides necessary flexibility for effective Fe coordination.*

   **Examples:**

   - **4-pyridin-4-ylbutanoic acid** *(True)*
   - **4-pyridin-4-ylbenzoic acid** *(True)*

   **Counter-Example:**

   - **pyridine-3-carboxylic acid** *(False)* (carboxylate directly attached reduces coordination efficiency)

6. **Modifiers with aliphatic hydroxyl (–OH) groups located four or more carbons away from the carboxylate group result in `Fe/Hf_high_or_low_value` being **True**.**

   *Distal hydroxyl groups can coordinate with Fe ions without causing steric hindrance or undesired chelation with Hf ions.*

   **Example:**

   - **7-hydroxyheptanoic acid** *(True)*

   **Counter-Examples:**

   - **Polyhydroxylated compounds** *(False)*
   - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid**

7. **Modifiers that are dicarboxylic amino acids with side chains of two carbons (e.g., aspartic acid) result in `Fe/Hf_high_or_low_value` being **True**; those with longer side chains result in `Fe/Hf_high_or_low_value` being **False**.**

   *Short side-chain length allows effective chelation of Fe ions, while longer chains may reduce coordination due to steric factors.*

   **Examples:**

   - **(2S)-2-aminobutanedioic acid (Aspartic acid)** *(True)*
   - **(2S)-2-aminopentanedioic acid (Glutamic acid)** *(False)*

8. **Modifiers with aromatic rings bearing multiple methoxy (–OCH₃) substituents and additional carbonyl groups linked to a carboxylate result in `Fe/Hf_high_or_low_value` being **True**.**

   *Methoxy groups increase electron density, and carbonyl groups provide additional coordination sites for Fe ions.*

   **Example:**

   - **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid** *(True)*

9. **Modifiers with fused aromatic systems containing multiple carbonyl groups (e.g., benzofuran derivatives with ketone groups) result in `Fe/Hf_high_or_low_value` being **True**.**

   *Rigid structures with multiple coordination sites enhance Fe binding.*

   **Example:**

   - **1,3-dioxo-2-benzofuran-5-carboxylic acid** *(True)*

10. **Simple aliphatic or aromatic carboxylic acids without additional coordinating functional groups or with electron-donating substituents result in `Fe/Hf_high_or_low_value` being **False**.**

    *Lack of effective coordination sites diminishes Fe incorporation into the catalyst.*

    **Examples:**

    - **Octanoic acid** *(False)*
    - **4-methylbenzoic acid** *(False)*

11. **Modifiers with phenolic hydroxyl groups (–OH attached directly to an aromatic ring) result in `Fe/Hf_high_or_low_value` being **False**.**

    *Phenolic hydroxyls may preferentially bind to Hf ions or interfere with Fe coordination due to competitive binding.*

    **Examples:**

    - **5-(4-hydroxyphenyl)pentanoic acid** *(False)*
    - **3-(4-hydroxyphenyl)propanoic acid** *(False)*
    - **2-[(4-hydroxybenzoyl)amino]acetic acid** *(False)*

12. **Modifiers containing multiple adjacent hydroxyl groups on an aliphatic chain (polyhydroxylated compounds) result in `Fe/Hf_high_or_low_value` being **False**.**

    *Excessive hydroxyl groups increase hydrophilicity and potential Hf binding, reducing Fe incorporation.*

    **Example:**

    - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** *(False)*

13. **Modifiers with bulky aromatic or heteroaromatic groups that cause steric hindrance near the coordination site result in `Fe/Hf_high_or_low_value` being **False**.**

    *Steric hindrance impedes effective coordination between the ligand and Fe ions.*

    **Example:**

    - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid (Tryptophan)** *(False)*

14. **Modifiers containing fluorinated alkyl chains result in `Fe/Hf_high_or_low_value` being **False**.**

    *Fluorine's electronegativity reduces electron density available for coordination with Fe ions.*

    **Example:**

    - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid** *(False)*

15. **Modifiers with nitrogen-containing heterocycles directly attached to the carboxylate group result in `Fe/Hf_high_or_low_value` being **False**.**

    *Direct attachment may not orient the nitrogen lone pair effectively for Fe coordination.*

    **Examples:**

    - **pyridine-3-carboxylic acid** *(False)*
    - **1H-pyrazole-4-carboxylic acid** *(False)*

**End of Rules**

---

**Explanation:**

In developing these rules, the following considerations were made:

- **Integration of Multiple Sub-Structures:** Each rule combines specific functional groups and structural features to predict the `Fe/Hf_high_or_low_value`. For instance, Rule 1 merges a terminal amino group with an aliphatic chain length, while Rule 4 incorporates aromatic rings with para-substituted electron-withdrawing groups.

- **Underlying Physical-Chemical Properties:** The rules are grounded in coordination chemistry principles. Functional groups like amino, thiol, ether linkages, and pyridine rings are known to interact with Fe ions. Electronic effects (electron-withdrawing/donating groups), steric factors, and ligand flexibility are all taken into account based on their influence on metal-ligand interactions.

- **Clear Predictions with Examples:** Each rule specifies whether the `Fe/Hf_high_or_low_value` is **True** or **False** for modifiers fitting its description. Examples and counter-examples are provided to illustrate the application of the rule.

- **Broad Dataset Coverage:** The rules collectively cover a wide range of the provided dataset, ensuring that both common and unique modifiers are accounted for. Simpler rules like Rule 10 address broad categories, while more complex rules like Rule 8 target specific structural features.

- **Balance of Rule Complexity:** A mix of simple and complex rules is maintained to provide both general guidelines and specific insights, striking a balance that enhances predictive accuracy without oversimplification.

- **Refinement and Improvement:** The rules have been reviewed and refined to eliminate redundancies and enhance clarity. For example, modifiers with electron-withdrawing groups are consolidated in Rule 4, and those causing steric hindrance are addressed in Rule 13.

- **Adherence to Requirements:** All rules are formulated in line with the given requirements, focusing on combinations of functional groups, considering physical-chemical properties, ensuring clear predictions, and maintaining appropriate coverage of the dataset.

---

By synthesizing chemical insights with the provided data, these rules offer a systematic approach to predict how molecular modifiers influence the `Fe/Hf_high_or_low_value`. They can guide the selection and design of modifiers to optimize Fe incorporation into the catalyst, ultimately enhancing the efficiency of the target reaction.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 7.1,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0
1,0,0,0,0,1,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,1,-1,0,0,-1,0,0
0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,1,-1,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,-1,-1,0,-1,0,0
0,0,0,0,0,0,0,0,0,1,-1,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,1,0,0,0,-1,0,0
0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,1,-1,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,1,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,1,0,0,0,-1,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,1,-1,-1,0,-1,0,0
0,0,0,0,0,0,0,0,0,1,-1,0,0,-1,0,0
0,0,0,1,0,0,0,0,0,1,-1,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,1,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,1,-1,0,0,-1,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,1,1,0,0,0,-1,0,0
0,0,0,0,0,1,0,0,0,1,-1,-1,0,-1,0,0
0,0,0,0,0,1,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0
0,0,0,0,0,1,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,-1,-1,0,-1,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.8; Test Accuracy: 1.0
    Train Support: 0.45714285714285713; Test Support: 0.0
    Train Confidence: 0.7619047619047619; Test Confidence: 0.5
    Train Lift: 1.4814814814814816; Test Lift: NONE
    Train Leverage: 0.14857142857142858; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    carboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1]'
    primary_aliphatic_amine = '[NX3;H2][CX4]'
    thiol_group = '[SX2H]'
    ether_linkage = '[#6][OX2][#6]'
    pyridine_ring = '[nX2]1cccc1'
    nitro_group_on_aromatic = '[c][NX3+](=O)[O-]'
    bromo_group_on_aromatic = '[c][Br]'
    hydroxyl_group = '[OX2H]'
    methoxy_group_on_aromatic = '[c][OX2][CH3]'
    aromatic_ring = 'c1ccccc1'
    dicarboxylic_amino_acid_2C = '[NX3;H2][CX4][CX4][C](=O)[OX1H0-,OX2H1]'
    dicarboxylic_amino_acid_long_chain = '[NX3;H2][CX4][CX4][CX4][C](=O)[OX1H0-,OX2H1]'
    phenolic_hydroxyl_group = '[c][OX2H]'
    polyhydroxylated_compound = '[#6][OX2H][#6][OX2H][#6][OX2H]'
    fluorinated_alkyl_chain = '[CX4][F]'
    nitrogen_heterocycle_attached_to_carboxylate = '[n][CX3](=O)[OX1H0-,OX2H1]'

    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Rule 1: Modifiers containing a terminal primary amino group (–NH₂) attached to an aliphatic chain of at least five carbons (including the carboxylate carbon).',
            'patterns': [primary_aliphatic_amine, carboxylic_acid],
            'path_length_cond': {'min':5},  # Path length between N and carboxyl C
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Rule 2: Modifiers with a thiol (–SH) group separated by two to three carbons from a carboxylate group.',
            'patterns': [thiol_group, carboxylic_acid],
            'path_length_cond': {'min':3, 'max':4},
            'prediction': 1
        },
        {
            'number':3,
            'description':'Rule 3: Modifiers featuring ether linkages (–O–) in the backbone with three or more ether units and terminal carboxylate or amino groups.',
            'patterns':[ether_linkage],
            'count_threshold':{'pattern':ether_linkage, 'threshold':3},
            'terminal_groups':[carboxylic_acid, primary_aliphatic_amine],
            'prediction':1
        },
        {
            'number':4,
            'description':'Rule 4: Modifiers with aromatic rings substituted at the para position with strong electron-withdrawing groups (e.g., nitro, bromo).',
            'patterns':[aromatic_ring],
            'substituents':[nitro_group_on_aromatic, bromo_group_on_aromatic],
            'prediction':1
        },
        {
            'number':5,
            'description':'Rule 5: Modifiers containing pyridine rings connected via an aliphatic linker of at least one carbon to the carboxylate group.',
            'patterns':[pyridine_ring, carboxylic_acid],
            'path_length_cond': {'min':2},
            'prediction':1
        },
        {
            'number':6,
            'description':'Rule 6: Modifiers with aliphatic hydroxyl (–OH) groups located four or more carbons away from the carboxylate group.',
            'patterns':[hydroxyl_group, carboxylic_acid],
            'path_length_cond': {'min':5},
            'prediction':1
        },
        {
            'number':7,
            'description':'Rule 7: Modifiers that are dicarboxylic amino acids with side chains of two carbons.',
            'patterns':[dicarboxylic_amino_acid_2C],
            'prediction':1
        },
        {
            'number':7.1,
            'description':'Rule 7.1: Modifiers that are dicarboxylic amino acids with side chains longer than two carbons.',
            'patterns':[dicarboxylic_amino_acid_long_chain],
            'prediction':-1
        },
        {
            'number':8,
            'description':'Rule 8: Modifiers with aromatic rings bearing multiple methoxy (–OCH₃) substituents and additional carbonyl groups linked to a carboxylate.',
            'patterns':[aromatic_ring, methoxy_group_on_aromatic, '[CX3]=[OX1]'],
            'prediction':1
        },
        {
            'number':9,
            'description':'Rule 9: Modifiers with fused aromatic systems containing multiple carbonyl groups.',
            'patterns':['[a][a][a][CX3]=[OX1]'],
            'prediction':1
        },
        {
            'number':10,
            'description':'Rule 10: Simple aliphatic or aromatic carboxylic acids without additional coordinating functional groups or with electron-donating substituents.',
            'patterns':[carboxylic_acid],
            'exclude_patterns':[primary_aliphatic_amine, thiol_group, ether_linkage],
            'prediction':-1
        },
        {
            'number':11,
            'description':'Rule 11: Modifiers with phenolic hydroxyl groups (–OH attached directly to an aromatic ring).',
            'patterns':[phenolic_hydroxyl_group],
            'prediction':-1
        },
        {
            'number':12,
            'description':'Rule 12: Modifiers containing multiple adjacent hydroxyl groups on an aliphatic chain (polyhydroxylated compounds).',
            'patterns':[polyhydroxylated_compound],
            'prediction':-1
        },
        {
            'number':13,
            'description':'Rule 13: Modifiers with bulky aromatic or heteroaromatic groups causing steric hindrance near the coordination site.',
            'patterns':[aromatic_ring, carboxylic_acid],
            'prediction':-1
        },
        {
            'number':14,
            'description':'Rule 14: Modifiers containing fluorinated alkyl chains.',
            'patterns':[fluorinated_alkyl_chain],
            'prediction':-1
        },
        {
            'number':15,
            'description':'Rule 15: Modifiers with nitrogen-containing heterocycles directly attached to the carboxylate group.',
            'patterns':[nitrogen_heterocycle_attached_to_carboxylate],
            'prediction':-1
        }
    ]

    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for pattern in rule.get('patterns', []):
            compiled_pattern = Chem.MolFromSmarts(pattern)
            compiled_patterns.append(compiled_pattern)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        compiled_exclude_patterns = []
        for pattern in rule.get('exclude_patterns', []):
            compiled_pattern = Chem.MolFromSmarts(pattern)
            if compiled_pattern:
                compiled_exclude_patterns.append(compiled_pattern)
        rule['compiled_exclude_patterns'] = compiled_exclude_patterns

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                for pat in rule.get('compiled_exclude_patterns', []):
                    if mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Check required patterns
                for pat in rule['compiled_patterns']:
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Additional logic for path length conditions
                if 'path_length_cond' in rule:
                    min_length = rule['path_length_cond'].get('min', None)
                    max_length = rule['path_length_cond'].get('max', None)
                    # Need to find atoms matching the patterns
                    atoms_list_1 = mol.GetSubstructMatches(rule['compiled_patterns'][0])
                    atoms_list_2 = mol.GetSubstructMatches(rule['compiled_patterns'][1])
                    path_lengths = []
                    for atom_idx_1 in atoms_list_1:
                        for atom_idx_2 in atoms_list_2:
                            idx1 = atom_idx_1[0]
                            idx2 = atom_idx_2[0]
                            path = Chem.rdmolops.GetShortestPath(mol, idx1, idx2)
                            path_length = len(path)
                            path_lengths.append(path_length)
                    if min_length is not None:
                        if not any(length >= min_length for length in path_lengths):
                            match = False
                    if max_length is not None:
                        if not any(length <= max_length for length in path_lengths):
                            match = False
                    if not match:
                        row.append(0)
                        continue
                # Additional logic for count thresholds
                if 'count_threshold' in rule:
                    pattern_to_count = Chem.MolFromSmarts(rule['count_threshold']['pattern'])
                    threshold = rule['count_threshold']['threshold']
                    matches = mol.GetSubstructMatches(pattern_to_count)
                    if len(matches) < threshold:
                        match = False
                        row.append(0)
                        continue
                    # Check for terminal groups
                    if 'terminal_groups' in rule:
                        terminal_match = False
                        for terminal_pat in rule['terminal_groups']:
                            compiled_terminal_pat = Chem.MolFromSmarts(terminal_pat)
                            if mol.HasSubstructMatch(compiled_terminal_pat):
                                terminal_match = True
                                break
                        if not terminal_match:
                            match = False
                            row.append(0)
                            continue
                # Additional logic for substituents
                if 'substituents' in rule:
                    substituent_match = False
                    for subs_pat in rule['substituents']:
                        compiled_subs_pat = Chem.MolFromSmarts(subs_pat)
                        if mol.HasSubstructMatch(compiled_subs_pat):
                            substituent_match = True
                            break
                    if not substituent_match:
                        match = False
                        row.append(0)
                        continue
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: Fe/Hf
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

---

**Rule 1**: **Modifiers that are aliphatic carboxylic acids with a terminal primary amino group (–NH₂) at the end opposite the carboxylate, having a carbon chain length of five or more carbons, result in `Fe/Hf_high_or_low_value` being **True**.**

- **Physical-Chemical Basis**: The terminal amino group can coordinate with Fe ions, and the extended aliphatic chain provides flexibility for effective chelation without significant steric hindrance.

- **Examples**:
  - **5-aminopentanoic acid** *(True)*
  - **7-aminoheptanoic acid** *(True)*
  - **8-aminooctanoic acid** *(True)*
  - **(2S)-6-acetamido-2-aminohexanoic acid** *(True)*

- **Counter-Examples**:
  - **4-aminobenzoic acid** *(False)* (amino group attached to a rigid aromatic ring, limiting flexibility)
  - **(2S)-2-aminopentanedioic acid** *(False)* (additional carboxylate group affects coordination geometry)

---

**Rule 2**: **Modifiers that are aromatic carboxylic acids with strong electron-withdrawing substituents at the para position result in `Fe/Hf_high_or_low_value` being **True**.**

- **Physical-Chemical Basis**: Electron-withdrawing groups increase the acidity of the carboxylate group, enhancing its ability to donate electron density and coordinate with Fe ions.

- **Examples**:
  - **4-nitrobenzoic acid** *(True)*
  - **4-(bromomethyl)benzoic acid** *(True)*

- **Counter-Examples**:
  - **4-methylbenzoic acid** *(False)* (methyl group is electron-donating)
  - **4-formylbenzoic acid** *(False)* (aldehyde is less electron-withdrawing than nitro or bromomethyl groups)

---

**Rule 3**: **Modifiers containing thiol groups (–SH) within three carbons of the carboxylate group result in `Fe/Hf_high_or_low_value` being **True**.**

- **Physical-Chemical Basis**: Thiol groups are soft bases that form strong coordination bonds with transition metals like Fe, promoting higher Fe incorporation.

- **Examples**:
  - **3-sulfanylpropanoic acid** *(True)*
  - **4-sulfanylbenzoic acid** *(True)*

- **Counter-Example**:
  - **Octanoic acid** *(False)* (lacks thiol group)

---

**Rule 4**: **Modifiers with a pyridine ring connected to the carboxylate group, either directly or via a short aliphatic linker, result in `Fe/Hf_high_or_low_value` being **True**, provided the pyridine nitrogen is available for coordination.**

- **Physical-Chemical Basis**: The lone pair on the pyridine nitrogen can coordinate with Fe ions, and the proximity or flexibility provided by the linker facilitates effective binding.

- **Examples**:
  - **4-pyridin-4-ylbenzoic acid** *(True)*
  - **4-pyridin-4-ylbutanoic acid** *(True)*

- **Counter-Examples**:
  - **Pyridine-3-carboxylic acid** *(False)* (nitrogen orientation and steric factors reduce coordination ability)

---

**Rule 5**: **Modifiers that are amino acids with sulfur-containing side chains (e.g., thioether groups) result in `Fe/Hf_high_or_low_value` being **True**.**

- **Physical-Chemical Basis**: Sulfur atoms in thioether groups can donate electron density to Fe ions, forming stable complexes due to their soft base character.

- **Example**:
  - **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid** *(True)*

- **Counter-Example**:
  - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** *(False)* (indole nitrogen less effective in Fe coordination)

---

**Rule 6**: **Modifiers that are aliphatic carboxylic acids with a distal hydroxyl group (–OH) located five or more carbons away from the carboxylate group result in `Fe/Hf_high_or_low_value` being **True**.**

- **Physical-Chemical Basis**: The distal hydroxyl group can act as an additional coordination site for Fe ions without causing steric hindrance near the carboxylate group.

- **Example**:
  - **7-hydroxyheptanoic acid** *(True)*

- **Counter-Examples**:
  - **3-hydroxypropanoic acid** *(False)* (hydroxyl group too close to carboxylate, potential steric hindrance)
  - **Polyhydroxylated compounds** *(False)* (excessive hydroxyl groups may interfere with coordination)

---

**Rule 7**: **Modifiers that are polyether carboxylic acids with ether linkages in the side chain result in `Fe/Hf_high_or_low_value` being **True**.**

- **Physical-Chemical Basis**: Ether oxygen atoms can coordinate with Fe ions, and the flexible chain allows for multiple coordination sites enhancing binding.

- **Example**:
  - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid** *(True)*

---

**Rule 8**: **Modifiers that are aliphatic dicarboxylic acids with a short side chain (four carbons) and an α-amino group result in `Fe/Hf_high_or_low_value` being **True**; longer side chains lead to `Fe/Hf_high_or_low_value` being **False**.**

- **Physical-Chemical Basis**: Short chains facilitate the formation of stable chelate rings with Fe ions. Longer chains reduce chelation efficiency due to increased flexibility.

- **Example**:
  - **(2S)-2-aminobutanedioic acid** *(True)* (aspartic acid)

- **Counter-Example**:
  - **(2S)-2-aminopentanedioic acid** *(False)* (glutamic acid; longer chain reduces chelation efficiency)

---

**Rule 9**: **Modifiers with multiple hydroxyl groups near the carboxylate (polyhydroxylated aliphatic acids) result in `Fe/Hf_high_or_low_value` being **False**.**

- **Physical-Chemical Basis**: Excess hydroxyl groups can lead to intra- and intermolecular hydrogen bonding, hindering effective coordination with Fe ions due to steric and electronic factors.

- **Example**:
  - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** *(False)*

- **Counter-Example**:
  - **Modifiers with fewer hydroxyl groups distal from the carboxylate** (may not hinder coordination as significantly)

---

**Rule 10**: **Modifiers that are simple aliphatic carboxylic acids lacking additional coordinating functional groups result in `Fe/Hf_high_or_low_value` being **False**.**

- **Physical-Chemical Basis**: Without supplementary coordination sites, these molecules interact weakly with Fe ions, leading to lower Fe incorporation.

- **Examples**:
  - **Octanoic acid** *(False)*
  - **4-methylbenzoic acid** *(False)*

---

**Rule 11**: **Modifiers with electron-donating groups (e.g., hydroxyl, methoxy) directly attached to an aromatic ring result in `Fe/Hf_high_or_low_value` being **False**.**

- **Physical-Chemical Basis**: Electron-donating groups decrease the acidity of the carboxylate group, reducing its ability to coordinate effectively with Fe ions.

- **Examples**:
  - **5-(4-hydroxyphenyl)pentanoic acid** *(False)*
  - **3-(4-hydroxyphenyl)propanoic acid** *(False)*
  - **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid** *(True)* (Note: Despite methoxy groups, the ketone may enhance coordination; exceptions exist)

---

**Rule 12**: **Modifiers with fluorinated alkyl chains result in `Fe/Hf_high_or_low_value` being **False**.**

- **Physical-Chemical Basis**: Fluorinated groups are highly electronegative, which can reduce the electron density available for coordination with Fe ions and may introduce steric hindrance.

- **Example**:
  - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid** *(False)*

---

**Rule 13**: **Modifiers that are α-keto acids (carboxylic acids with a keto group adjacent to the carboxylate) result in `Fe/Hf_high_or_low_value` being **False**.**

- **Physical-Chemical Basis**: The presence of a keto group adjacent to the carboxylate can form internal hydrogen bonds or enolize, reducing the availability of coordination sites for Fe ions.

- **Example**:
  - **4-oxoheptanedioic acid** *(False)*

- **Counter-Example**:
  - **Modifiers where the keto group is farther from the carboxylate** (may not impede coordination as significantly)

---

**Rule 14**: **Modifiers that are aromatic carboxylic acids fused with electron-deficient heterocycles result in `Fe/Hf_high_or_low_value` being **False**.**

- **Physical-Chemical Basis**: Electron-deficient heterocycles may not provide effective coordination sites due to delocalization of electron density.

- **Example**:
  - **1H-pyrazole-4-carboxylic acid** *(False)*
  - **1,3-dioxo-2-benzofuran-5-carboxylic acid** *(Note: Listed as True, indicating exceptions may exist based on specific structure and electronic effects)**

---

**Rule 15**: **Modifiers with aldehyde groups adjacent to the aromatic ring result in `Fe/Hf_high_or_low_value` being **False**.**

- **Physical-Chemical Basis**: Aldehyde groups can engage in competing interactions (e.g., forming hydrates) and may reduce the electron density on the carboxylate, diminishing coordination with Fe ions.

- **Examples**:
  - **4-formylbenzoic acid** *(False)*
  - **5-formyl-2-hydroxybenzoic acid** *(False)*

---

**End of Rules**

---

**Explanation:**

In developing these rules:

- **Combination of Functional Groups**: Each rule integrates multiple sub-structures (functional groups), such as amino, thiol, hydroxyl, ether, keto groups, and their positions relative to the carboxylate group, to predict the impact on Fe/Hf ratio.

- **Underlying Physical-Chemical Properties**: The rules are grounded in coordination chemistry principles, considering how different functional groups and molecular geometries influence the ability of modifiers to coordinate with Fe ions.

- **Clarity and Predictability**: Each rule clearly states whether the `Fe/Hf_high_or_low_value` will be **True** or **False** for any modifier fitting its description, providing examples and counter-examples to illustrate.

- **Broad Dataset Coverage**: The rules cover a wide range of modifiers in the dataset, balancing simplicity and complexity to maximize coverage while capturing nuanced relationships.

- **Balance Between Rules**: The set includes both general rules with broad applicability and specific rules addressing particular structural features, maintaining a suitable balance as per the requirements.

By applying these rules, one can predict the effect of various molecular modifiers on the Fe/Hf ratio in the catalyst. This understanding aids in selecting and designing modifiers to optimize and control the yield of the radical-mediated remote δ-C(sp³)–H bond functionalization reaction.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1
0,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1
0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6; Test Accuracy: 1.0
    Train Support: 0.05714285714285714; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 1.9444444444444446; Test Lift: NONE
    Train Leverage: 0.02775510204081633; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:

def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and substructures
    # General patterns
    carboxylic_acid = '[CX3](=O)[OX1H0-]'
    primary_amine = '[NX3;H2]'
    aliphatic_chain_five_or_more = '[CH2][CH2][CH2][CH2][CH2,CH2+]'
    thiol_group = '[SX2H]'
    pyridine_ring = '[n]1ccccc1'
    aromatic_ring = 'c1ccccc1'
    electron_withdrawing_groups = ['[N+](=O)[O-]', '[CX3](=O)[OX1H0-,OX2H0]', 'F', 'Cl', 'Br', 'I', '[CX4]F']
    electron_donating_groups = ['[OX2H]', '[OX2][CH3]', '[NX3;H2,H1]']
    aldehyde_group_adjacent_aromatic = '[CX3H1](=O)[c]'
    ketone_adjacent_to_carboxylate = '[CX3](=O)[CX3](=O)'
    polyhydroxy_aliphatic_acid = '[CX3](=O)[OX1H0-][C;!$(C=O)]([OX2H])[C;!$(C=O)]([OX2H])[C;!$(C=O)]([OX2H])[C;!$(C=O)]([OX2H])[C;!$(C=O)]'
    fluorinated_chain = '[CX4]([F])([F])([F])'

    # Compile SMARTS patterns
    carboxylic_acid_pat = Chem.MolFromSmarts(carboxylic_acid)
    primary_amine_pat = Chem.MolFromSmarts(primary_amine)
    aliphatic_chain_five_or_more_pat = Chem.MolFromSmarts(aliphatic_chain_five_or_more)
    thiol_group_pat = Chem.MolFromSmarts(thiol_group)
    pyridine_ring_pat = Chem.MolFromSmarts(pyridine_ring)
    aromatic_ring_pat = Chem.MolFromSmarts(aromatic_ring)
    electron_withdrawing_pats = [Chem.MolFromSmarts(pat) for pat in electron_withdrawing_groups]
    electron_donating_pats = [Chem.MolFromSmarts(pat) for pat in electron_donating_groups]
    aldehyde_group_adjacent_aromatic_pat = Chem.MolFromSmarts(aldehyde_group_adjacent_aromatic)
    ketone_adjacent_to_carboxylate_pat = Chem.MolFromSmarts(ketone_adjacent_to_carboxylate)
    polyhydroxy_aliphatic_acid_pat = Chem.MolFromSmarts(polyhydroxy_aliphatic_acid)
    fluorinated_chain_pat = Chem.MolFromSmarts(fluorinated_chain)

    # Define the rules
    rules = [
        {
            'number': 1,
            'description': 'Rule 1: Aliphatic carboxylic acids with a terminal primary amino group (–NH₂) at the end opposite the carboxylate, having a carbon chain length of five or more carbons.',
            'patterns': [carboxylic_acid_pat, primary_amine_pat, aliphatic_chain_five_or_more_pat],
            'logic': 'and',
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Rule 2: Aromatic carboxylic acids with strong electron-withdrawing substituents at the para position.',
            'patterns': [carboxylic_acid_pat, aromatic_ring_pat],
            'ewg_patterns': electron_withdrawing_pats,
            'logic': 'and',
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Rule 3: Modifiers containing thiol groups (–SH) within three carbons of the carboxylate group.',
            'patterns': [carboxylic_acid_pat, thiol_group_pat],
            'logic': 'and',
            'max_distance': 3,
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Rule 4: Modifiers with a pyridine ring connected to the carboxylate group, either directly or via a short aliphatic linker.',
            'patterns': [carboxylic_acid_pat, pyridine_ring_pat],
            'logic': 'and',
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Rule 5: Modifiers that are amino acids with sulfur-containing side chains (e.g., thioether groups).',
            'patterns': [carboxylic_acid_pat, '[#16]'],  # Sulfur atom
            'logic': 'and',
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Rule 6: Modifiers that are aliphatic carboxylic acids with a distal hydroxyl group (–OH) located five or more carbons away from the carboxylate group.',
            'patterns': [carboxylic_acid_pat, '[OX2H]'],
            'logic': 'and',
            'min_distance': 5,
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'Rule 7: Modifiers that are polyether carboxylic acids with ether linkages in the side chain.',
            'patterns': [carboxylic_acid_pat, '[#6][OX2][#6]'],  # Ether linkage
            'logic': 'and',
            'prediction': 1
        },
        {
            'number': 8,
            'description': 'Rule 8: Modifiers that are aliphatic dicarboxylic acids with a short side chain (four carbons) and an α-amino group.',
            'patterns': [
                Chem.MolFromSmarts('[CX3](=O)[OX1H0-][CX4][CX4][CX4][CX4][CX3](=O)[OX1H0-]'),
                primary_amine_pat
            ],
            'logic': 'and',
            'prediction': 1
        },
        {
            'number': 9,
            'description': 'Rule 9: Modifiers with multiple hydroxyl groups near the carboxylate (polyhydroxylated aliphatic acids).',
            'patterns': [polyhydroxy_aliphatic_acid_pat],
            'logic': 'and',
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Rule 10: Modifiers that are simple aliphatic carboxylic acids lacking additional coordinating functional groups.',
            'patterns': [carboxylic_acid_pat],
            'exclude_patterns': [primary_amine_pat, thiol_group_pat, '[OX2][CX4]'],
            'logic': 'and',
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Rule 11: Modifiers with electron-donating groups (e.g., hydroxyl, methoxy) directly attached to an aromatic ring.',
            'patterns': [aromatic_ring_pat],
            'edg_patterns': electron_donating_pats,
            'logic': 'and',
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'Rule 12: Modifiers with fluorinated alkyl chains.',
            'patterns': [fluorinated_chain_pat],
            'logic': 'and',
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Rule 13: Modifiers that are α-keto acids (carboxylic acids with a keto group adjacent to the carboxylate).',
            'patterns': [carboxylic_acid_pat, ketone_adjacent_to_carboxylate_pat],
            'logic': 'and',
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'Rule 14: Modifiers that are aromatic carboxylic acids fused with electron-deficient heterocycles.',
            'patterns': [carboxylic_acid_pat, '[a][a][a][a][a][a]'],
            'exclude_patterns': electron_donating_pats + electron_withdrawing_pats,
            'logic': 'and',
            'prediction': -1
        },
        {
            'number': 15,
            'description': 'Rule 15: Modifiers with aldehyde groups adjacent to the aromatic ring.',
            'patterns': [aldehyde_group_adjacent_aromatic_pat],
            'logic': 'and',
            'prediction': -1
        }
    ]

    # Compile patterns for all rules
    for rule in rules:
        compiled_patterns = []
        for patt in rule.get('patterns', []):
            if isinstance(patt, str):
                compiled_patterns.append(Chem.MolFromSmarts(patt))
            else:
                compiled_patterns.append(patt)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for patt in rule['exclude_patterns']:
                if isinstance(patt, str):
                    compiled_excludes.append(Chem.MolFromSmarts(patt))
                else:
                    compiled_excludes.append(patt)
            rule['compiled_exclude_patterns'] = compiled_excludes
        # Compile EWG patterns if any
        if 'ewg_patterns' in rule:
            rule['compiled_ewg_patterns'] = [patt for patt in rule['ewg_patterns']]
        # Compile EDG patterns if any
        if 'edg_patterns' in rule:
            rule['compiled_edg_patterns'] = [patt for patt in rule['edg_patterns']]

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'compiled_exclude_patterns' in rule:
                    for pat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for pat in rule['compiled_patterns']:
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Check EWG patterns for Rule 2
                if 'compiled_ewg_patterns' in rule:
                    ewg_match = False
                    for pat in rule['compiled_ewg_patterns']:
                        if mol.HasSubstructMatch(pat):
                            ewg_match = True
                            break
                    if not ewg_match:
                        match = False
                # Check EDG patterns for Rule 11
                if 'compiled_edg_patterns' in rule:
                    edg_match = False
                    for pat in rule['compiled_edg_patterns']:
                        if mol.HasSubstructMatch(pat):
                            edg_match = True
                            break
                    if not edg_match:
                        match = False
                # Check distances for rules with distance constraints
                if 'max_distance' in rule:
                    # For Rule 3: thiol within three bonds of carboxylate
                    hits1 = mol.GetSubstructMatches(carboxylic_acid_pat)
                    hits2 = mol.GetSubstructMatches(thiol_group_pat)
                    distance_match = False
                    for atom1 in hits1:
                        for atom2 in hits2:
                            path_length = Chem.GetShortestPath(mol, atom1[0], atom2[0])
                            if len(path_length) - 1 <= rule['max_distance']:
                                distance_match = True
                                break
                        if distance_match:
                            break
                    if not distance_match:
                        match = False
                if 'min_distance' in rule:
                    # For Rule 6: hydroxyl group five or more bonds away from carboxylate
                    hits1 = mol.GetSubstructMatches(carboxylic_acid_pat)
                    hits2 = mol.GetSubstructMatches(Chem.MolFromSmarts('[OX2H]'))
                    distance_match = False
                    for atom1 in hits1:
                        for atom2 in hits2:
                            path_length = Chem.GetShortestPath(mol, atom1[0], atom2[0])
                            if len(path_length) - 1 >= rule['min_distance']:
                                distance_match = True
                                break
                        if distance_match:
                            break
                    if not distance_match:
                        match = False
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: Fe/Hf
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

---

**Rule 1**: **Modifiers that are aliphatic carboxylic acids with a terminal primary amino group (–NH₂) at the end opposite the carboxylate group result in `Fe/Hf_high_or_low_value` being **True**.**

- **Physical-Chemical Basis**: The terminal amino group serves as a strong coordination site for Fe ions. The flexibility of the aliphatic chain allows effective chelation without significant steric hindrance, enhancing Fe incorporation into the catalyst.

- **Examples**:
  - **5-aminopentanoic acid** *(True)*
  - **7-aminoheptanoic acid** *(True)*
  - **8-aminooctanoic acid** *(True)*

- **Counter-Examples**:
  - **4-aminobenzoic acid** *(False)* (amino group attached to a rigid aromatic ring, limiting flexibility for coordination)
  - **(2S)-2-aminopentanedioic acid** *(False)* (amino group adjacent to two carboxylate groups, leading to intramolecular interactions that reduce coordination with Fe)

---

**Rule 2**: **Modifiers that are aliphatic or aromatic carboxylic acids containing sulfur atoms in functional groups such as thiol (–SH) or thioether (–S–) within three carbon atoms of the carboxylate group result in `Fe/Hf_high_or_low_value` being **True**.**

- **Physical-Chemical Basis**: Sulfur atoms are soft Lewis bases and form strong coordination bonds with Fe ions. Their presence near the carboxylate enhances the overall chelating ability of the modifier.

- **Examples**:
  - **3-sulfanylpropanoic acid** *(True)*
  - **4-sulfanylbenzoic acid** *(True)*
  - **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid** *(True)* (contains a thioether group within the side chain)

- **Counter-Example**:
  - **Octanoic acid** *(False)* (lacks sulfur-containing functional groups)

---

**Rule 3**: **Modifiers that are aromatic carboxylic acids with strong electron-withdrawing groups (EWGs) at the para position, such as nitro (–NO₂) or bromomethyl (–CH₂Br), result in `Fe/Hf_high_or_low_value` being **True**.**

- **Physical-Chemical Basis**: EWGs increase the acidity of the carboxylic acid and stabilize the negative charge on the carboxylate ion. This enhances the ability of the carboxylate oxygen to donate electron density to Fe ions, promoting stronger coordination.

- **Examples**:
  - **4-nitrobenzoic acid** *(True)*
  - **4-(bromomethyl)benzoic acid** *(True)*

- **Counter-Examples**:
  - **4-methylbenzoic acid** *(False)* (methyl group is electron-donating, decreasing acidity and coordination ability)
  - **4-formylbenzoic acid** *(False)* (aldehyde group is less electron-withdrawing than nitro or halomethyl groups)

---

**Rule 4**: **Modifiers that are carboxylic acids containing a pyridine ring with the nitrogen atom available for coordination, either directly attached to the carboxylate group or via a short linker, result in `Fe/Hf_high_or_low_value` being **True**.**

- **Physical-Chemical Basis**: The lone pair on the pyridine nitrogen serves as an effective coordination site for Fe ions. Proximity due to direct attachment or a short linker enhances the likelihood of complex formation.

- **Examples**:
  - **4-pyridin-4-ylbenzoic acid** *(True)* (pyridine ring directly attached to benzoic acid)
  - **4-pyridin-4-ylbutanoic acid** *(True)* (pyridine ring connected via a short aliphatic linker)

- **Counter-Example**:
  - **Pyridine-3-carboxylic acid** *(False)* (the position of the nitrogen relative to the carboxylate group may hinder effective chelation due to steric factors)

---

**Rule 5**: **Modifiers that are aliphatic carboxylic acids with polyether chains (containing multiple –O– units) ending with a coordinating group such as amino (–NH₂) result in `Fe/Hf_high_or_low_value` being **True**.**

- **Physical-Chemical Basis**: The ether oxygen atoms and terminal coordinating groups provide multiple potential coordination sites for Fe ions. The flexibility of the polyether chain facilitates optimal spatial arrangement for effective coordination.

- **Examples**:
  - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid** *(True)*
  - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid** *(True)*

- **Counter-Example**:
  - **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid** *(False)* (bulky hydroxyl groups lead to steric hindrance, reducing coordination efficiency)

---

**Rule 6**: **Modifiers that are aliphatic carboxylic acids with a distal hydroxyl group (–OH) located at least five carbons away from the carboxylate group result in `Fe/Hf_high_or_low_value` being **True**.**

- **Physical-Chemical Basis**: The distant hydroxyl group provides an additional coordination site without causing steric interference near the carboxylate group. The long aliphatic chain offers flexibility, facilitating effective chelation with Fe ions.

- **Example**:
  - **7-hydroxyheptanoic acid** *(True)*

- **Counter-Example**:
  - **3-hydroxypropanoic acid** *(False)* (hydroxyl group is too close to the carboxylate, potentially leading to steric hindrance and intramolecular hydrogen bonding)

---

**Rule 7**: **Modifiers that are amino acids with side chains capable of coordinating with Fe ions, particularly those containing sulfur (e.g., thioether groups) or extra carboxylate groups, result in `Fe/Hf_high_or_low_value` being **True**.**

- **Physical-Chemical Basis**: Side chains with sulfur or additional carboxylate groups provide extra coordination sites. This enhances the chelating ability of the amino acid, facilitating stronger interaction with Fe ions.

- **Examples**:
  - **(2S)-2-aminobutanedioic acid** *(True)* (aspartic acid with an extra carboxylate group)
  - **(2S)-6-acetamido-2-aminohexanoic acid** *(True)* (modified lysine with an acetamido group)

- **Counter-Example**:
  - **(2S)-2-aminopentanedioic acid** *(False)* (glutamic acid; the longer side chain may introduce steric challenges, reducing coordination efficiency)

---

**Rule 8**: **Modifiers that are carboxylic acids without additional coordinating functional groups, or containing electron-donating groups (such as methyl or hydroxyl groups) directly attached to an aromatic ring, result in `Fe/Hf_high_or_low_value` being **False**.**

- **Physical-Chemical Basis**: Lack of supplementary coordination sites diminishes the ability of the modifier to chelate Fe ions. Electron-donating groups decrease the acidity of the carboxylic acid, further reducing coordination effectiveness.

- **Examples**:
  - **Octanoic acid** *(False)* (no additional functional groups)
  - **4-methylbenzoic acid** *(False)* (methyl group is electron-donating)
  - **5-(4-hydroxyphenyl)pentanoic acid** *(False)* (hydroxyl group is electron-donating and attached to an aromatic ring)

---

**Rule 9**: **Modifiers containing multiple hydroxyl groups (polyols), especially near the carboxylate group, result in `Fe/Hf_high_or_low_value` being **False**.**

- **Physical-Chemical Basis**: Multiple proximal hydroxyl groups can engage in intramolecular hydrogen bonding, causing steric hindrance and reducing the availability of coordination sites for Fe ions.

- **Example**:
  - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** *(False)* (multiple hydroxyl groups adjacent to the carboxylate)

---

**Rule 10**: **Modifiers with fluorinated alkyl chains or perfluorinated groups result in `Fe/Hf_high_or_low_value` being **False**.**

- **Physical-Chemical Basis**: Fluorine's high electronegativity withdraws electron density from potential coordination sites, diminishing the modifier's ability to chelate Fe ions. Additionally, the bulky nature of fluorinated chains can introduce steric hindrance.

- **Example**:
  - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid** *(False)*

---

**Rule 11**: **Modifiers that are aromatic carboxylic acids with aldehyde (–CHO) or keto (–C=O) groups adjacent to the aromatic ring result in `Fe/Hf_high_or_low_value` being **False**.**

- **Physical-Chemical Basis**: Aldehyde and keto groups can participate in resonance with the aromatic ring, reducing electron density on the carboxylate oxygen. This makes the carboxylate less effective at coordinating with Fe ions.

- **Examples**:
  - **4-formylbenzoic acid** *(False)*
  - **5-formyl-2-hydroxybenzoic acid** *(False)*
  - **1,3-dioxo-2-benzofuran-5-carboxylic acid** *(False)* (contains adjacent keto groups)

---

**Rule 12**: **Modifiers that are heteroaromatic carboxylic acids with electron-deficient rings (e.g., pyrazole, pyridone), and without additional coordinating groups, result in `Fe/Hf_high_or_low_value` being **False**.**

- **Physical-Chemical Basis**: Electron-deficient heterocycles may have delocalized electron density, making heteroatoms less available for coordination. Without other coordinating groups, the overall ability to chelate Fe ions is reduced.

- **Examples**:
  - **1H-pyrazole-4-carboxylic acid** *(False)*
  - **2-oxo-1H-pyridine-4-carboxylic acid** *(False)*

---

**Rule 13**: **Modifiers that are dicarboxylic acids without other coordinating functional groups, especially those where the carboxylate groups are separated by a short chain, result in `Fe/Hf_high_or_low_value` being **False**.**

- **Physical-Chemical Basis**: The presence of two carboxylate groups in close proximity can lead to unfavorable chelation geometry and intramolecular interactions that compete with coordination to Fe ions.

- **Examples**:
  - **(2S)-2-aminopentanedioic acid** *(False)* (glutamic acid)
  - **4-oxoheptanedioic acid** *(False)* (adjacent keto and carboxylate groups may hinder coordination)

---

**End of Rules**

---

**Explanation:**

In generating these rules:

1. **Combination of Functional Groups**: Each rule combines multiple sub-structural features, such as functional groups (e.g., amino, thiol, pyridine rings) and their specific positions within the molecule. This highlights the combined effect of these features on Fe incorporation.

2. **Physical-Chemical Properties**: The rules are grounded in coordination chemistry principles. Factors like electron density, the presence of lone pairs, steric hindrance, and the ability to form stable chelates with Fe ions have been considered to explain how different modifiers influence Fe/Hf ratios.

3. **Predictive Clarity**: Each rule clearly predicts whether the `Fe/Hf_high_or_low_value` is expected to be **True** or **False** for any modifier fitting its description, providing straightforward guidance for analyzing new modifiers.

4. **Broad Dataset Coverage**: The rules have been designed to cover a wide range of the dataset, prioritizing modifiers that fit into common structural categories. This maximizes their applicability and usefulness for predicting Fe/Hf ratios.

5. **Balance Between Simplicity and Complexity**: A suitable balance has been maintained between simple rules with higher coverage (e.g., Rule 8 about modifiers lacking coordinating groups) and more complex rules that address specific cases (e.g., Rule 7 about amino acids with coordinating side chains).

6. **Improvements and Refinements**: The rules have been refined to resolve any contradictions and improve accuracy. For instance, conflicting examples in previous versions have been reassessed, and rules have been rephrased for clarity and precision.

By applying these refined rules, researchers can predict how different molecular modifiers will affect the Fe/Hf ratio in the catalyst Hf-TPY-MOL(Fe). This understanding is crucial for selecting and designing modifiers that optimize the yield of the radical-mediated remote δ-C(sp³)–H bond functionalization reaction. The rules integrate structural insights and chemical reasoning to provide a practical framework for analyzing and predicting the behavior of new modifiers.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,1,0,0,0,0,0,-1
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.5428571428571428; Test Accuracy: 0.0
    Train Support: 0.014285714285714285; Test Support: 0.0
    Train Confidence: 0.5; Test Confidence: 0.5
    Train Lift: 0.9722222222222223; Test Lift: NONE
    Train Leverage: -0.0004081632653061204; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    from rdkit import Chem
    from rdkit.Chem import AllChem
    import pandas as pd

    # Define SMARTS patterns for functional groups based on the rules

    # Common patterns
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    carboxylate_anion = '[CX3](=O)[O-]'
    carboxylic_acid_group = f'[{carboxylic_acid},{carboxylate_anion}]'

    # Rule 1: Aliphatic carboxylic acids with a terminal primary amino group
    rule1_pattern = '[NX3H2][CH2]{2,}[CX3](=O)[OX2H1]'

    # Rule 2: Aliphatic or aromatic carboxylic acids with sulfur atoms in thiol or thioether groups within three carbon atoms of the carboxylate group
    thiol = '[SX2H]'
    thioether = '[#16X2]([#6])[#6]'
    sulfur_group = f'[{thiol},{thioether}]'
    rule2_pattern = f'[*][CH2,CH]{{0,2}}{sulfur_group}[CH2,CH]{{0,2}}{carboxylic_acid}'

    # Rule 3: Aromatic carboxylic acids with strong electron-withdrawing groups at the para position
    nitro_group = '[NX3+](=O)[O-]'
    halomethyl = '[CH2][Br,Cl,I]'
    ewg_para = f'[c][c](c{nitro_group}|c{halomethyl})[c](c)[c]{carboxylic_acid}'
    rule3_pattern = ewg_para

    # Rule 4: Carboxylic acids containing a pyridine ring with the nitrogen atom available for coordination
    pyridine_carboxylic_acid = 'n1ccccc1[CX3](=O)[OX2H1]'
    pyridine_linker_carboxylic_acid = 'n1ccccc1[CX4][CX3](=O)[OX2H1]'
    rule4_patterns = [pyridine_carboxylic_acid, pyridine_linker_carboxylic_acid]

    # Rule 5: Aliphatic carboxylic acids with polyether chains ending with an amino group
    polyether_chain = '[C;H2][OX2][C;H2][OX2][C;H2][NX3H2]'
    rule5_pattern = f'{carboxylic_acid}[C;H2]{polyether_chain}'

    # Rule 6: Aliphatic carboxylic acids with a distal hydroxyl group at least five carbons away from the carboxylate group
    long_chain_hydroxyl = f'{carboxylic_acid}[CH2]{{5,}}[OX2H]'
    rule6_pattern = long_chain_hydroxyl

    # Rule 7: Amino acids with side chains capable of coordinating with Fe ions (sulfur or extra carboxylate groups)
    amino_acid = '[NX3][CH]([CX3](=O)[OX2H1])[CX4][SX2H,CX3](=O)[OX2H1]'
    rule7_pattern = amino_acid

    # Rule 8: Carboxylic acids without additional coordinating functional groups or containing electron-donating groups directly attached to an aromatic ring
    edg_aromatic = f'[c][C,H]({carboxylic_acid})[c][C,H]'  # Simplified pattern
    rule8_pattern = edg_aromatic

    # Rule 9: Modifiers containing multiple hydroxyl groups (polyols) near the carboxylate group
    polyol_near_carboxylate = f'{carboxylic_acid}[C;H2][C;H]([OX2H])[C;H]([OX2H])'
    rule9_pattern = polyol_near_carboxylate

    # Rule 10: Modifiers with fluorinated alkyl chains or perfluorinated groups
    fluorinated_chain = '[C][F][F][F]'  # Trifluoromethyl group
    perfluoroalkyl = '[C][C]([F,Cl,Br,I])([F,Cl,Br,I])[C][C]([F,Cl,Br,I])([F,Cl,Br,I])'  # Simplified
    rule10_patterns = [fluorinated_chain, perfluoroalkyl]

    # Rule 11: Aromatic carboxylic acids with aldehyde or keto groups adjacent to the aromatic ring
    aldehyde_adjacent_aromatic = '[c][CX3H](=O)'
    ketone_adjacent_aromatic = '[c][CX3](=O)[C,c]'
    rule11_patterns = [aldehyde_adjacent_aromatic, ketone_adjacent_aromatic]

    # Rule 12: Heteroaromatic carboxylic acids with electron-deficient rings and without additional coordinating groups
    electron_deficient_heterocycle = '[n,o,s][c][n,o,s][c][c][CX3](=O)[OX2H1]'
    rule12_pattern = electron_deficient_heterocycle

    # Rule 13: Dicarboxylic acids without other coordinating functional groups and with short chains
    short_chain_dicarboxylic_acid = '[OX2H1][CX3](=O)[CX4][CX4][CX3](=O)[OX2H1]'
    rule13_pattern = short_chain_dicarboxylic_acid

    # Compile SMARTS patterns
    rules = [
        {'number': 1, 'patterns': [rule1_pattern], 'exclude_patterns': ['[a]'], 'prediction': 1},
        {'number': 2, 'patterns': [rule2_pattern], 'prediction': 1},
        {'number': 3, 'patterns': [rule3_pattern], 'prediction': 1},
        {'number': 4, 'patterns': rule4_patterns, 'prediction': 1},
        {'number': 5, 'patterns': [rule5_pattern], 'prediction': 1},
        {'number': 6, 'patterns': [rule6_pattern], 'prediction': 1},
        {'number': 7, 'patterns': [rule7_pattern], 'prediction': 1},
        {'number': 8, 'patterns': [rule8_pattern], 'exclude_patterns': ['[NX3]', '[#16]', '[OX2H]'], 'prediction': -1},
        {'number': 9, 'patterns': [rule9_pattern], 'prediction': -1},
        {'number': 10, 'patterns': rule10_patterns, 'prediction': -1},
        {'number': 11, 'patterns': rule11_patterns, 'prediction': -1},
        {'number': 12, 'patterns': [rule12_pattern], 'prediction': -1},
        {'number': 13, 'patterns': [rule13_pattern], 'prediction': -1},
    ]

    for rule in rules:
        compiled_patterns = [Chem.MolFromSmarts(pat) for pat in rule.get('patterns', [])]
        rule['compiled_patterns'] = compiled_patterns
        if 'exclude_patterns' in rule:
            compiled_excludes = [Chem.MolFromSmarts(pat) for pat in rule['exclude_patterns']]
            rule['compiled_exclude_patterns'] = compiled_excludes

    # Initialize the results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            match = False
            try:
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    exclude = False
                    for epat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(epat):
                            exclude = True
                            break
                    if exclude:
                        row.append(0)
                        continue
                # Check include patterns
                for pat in rule['compiled_patterns']:
                    matches = mol.GetSubstructMatches(pat)
                    if matches:
                        match = True
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: Fe/Hf
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

---

**Rule 1**: **Modifiers that are aliphatic carboxylic acids with a terminal primary amino group (–NH₂) at the end opposite the carboxylate group, and with a carbon chain length of five or more carbons, result in `Fe/Hf_high_or_low_value` being **True**.**

- **Physical-Chemical Basis**: The terminal amino group acts as an additional coordination site for Fe ions. The flexible aliphatic chain allows for effective chelation, enhancing Fe incorporation into the catalyst.

- **Examples**:
  - **5-aminopentanoic acid** *(True)*
  - **7-aminoheptanoic acid** *(True)*
  - **8-aminooctanoic acid** *(True)*

- **Counter-Examples**:
  - **4-aminobenzoic acid** *(False)* (amino group attached to rigid aromatic ring)
  - **(2S)-2-aminopentanedioic acid** *(False)* (amino group adjacent to carboxylate groups, limiting flexibility)

---

**Rule 2**: **Modifiers that are aromatic carboxylic acids with strong electron-withdrawing groups (EWGs) at the para position (e.g., nitro, halomethyl, sulfonyl, ketone groups) result in `Fe/Hf_high_or_low_value` being **True**.**

- **Physical-Chemical Basis**: EWGs increase the acidity of the carboxylic acid and enhance its ability to coordinate with Fe ions. They also stabilize the carboxylate anion and strengthen Fe–O bonds.

- **Examples**:
  - **4-nitrobenzoic acid** *(True)*
  - **4-(bromomethyl)benzoic acid** *(True)*
  - **1,3-dioxo-2-benzofuran-5-carboxylic acid** *(True)*

- **Counter-Examples**:
  - **4-methylbenzoic acid** *(False)* (methyl is electron-donating)
  - **4-formylbenzoic acid** *(False)* (aldehyde less withdrawing than nitro)

---

**Rule 3**: **Modifiers containing sulfur atoms in functional groups such as thiol (–SH) or thioether (–S–) within three carbon atoms of the carboxylate group result in `Fe/Hf_high_or_low_value` being **True**.**

- **Physical-Chemical Basis**: Sulfur atoms are soft Lewis bases that coordinate strongly with transition metals like Fe. Proximity to the carboxylate group facilitates chelation, enhancing Fe incorporation.

- **Examples**:
  - **3-sulfanylpropanoic acid** *(True)*
  - **4-sulfanylbenzoic acid** *(True)*
  - **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid** *(True)*

- **Counter-Examples**:
  - **Octanoic acid** *(False)* (no sulfur-containing groups)
  - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** *(False)* (no sulfur atom)

---

**Rule 4**: **Modifiers that are aromatic carboxylic acids with a pyridine ring, where the nitrogen atom is accessible for coordination, result in `Fe/Hf_high_or_low_value` being **True**.**

- **Physical-Chemical Basis**: The lone pair on the pyridine nitrogen provides an additional coordination site for Fe ions. This facilitates bidentate coordination, stabilizing the metal complex.

- **Examples**:
  - **4-pyridin-4-ylbenzoic acid** *(True)*
  - **4-pyridin-4-ylbutanoic acid** *(True)*

- **Counter-Examples**:
  - **Pyridine-3-carboxylic acid** *(False)* (nitrogen position hinders coordination)
  - **2-oxo-1H-pyridine-4-carboxylic acid** *(False)* (nitrogen involved in lactam)

---

**Rule 5**: **Modifiers that are aliphatic carboxylic acids with polyether chains (–(CH₂CH₂O)ₙ–) ending with an amino (–NH₂) or hydroxyl (–OH) group result in `Fe/Hf_high_or_low_value` being **True**.**

- **Physical-Chemical Basis**: The ether oxygens and terminal functional groups provide multiple coordination sites. The flexibility of the chain allows for effective chelation with Fe ions.

- **Examples**:
  - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid** *(True)*
  - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid** *(True)*

- **Counter-Examples**:
  - **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid** *(False)* (bulky, less flexible)

---

**Rule 6**: **Modifiers that are aliphatic carboxylic acids with a terminal hydroxyl group (–OH) at the ω-position and a carbon chain length of seven carbons result in `Fe/Hf_high_or_low_value` being **True**.**

- **Physical-Chemical Basis**: The terminal hydroxyl group offers an extra coordination site. The chain length allows for proper folding to facilitate chelation.

- **Example**:
  - **7-hydroxyheptanoic acid** *(True)*

- **Counter-Examples**:
  - **5-(4-hydroxyphenyl)pentanoic acid** *(False)* (hydroxyl on aromatic ring)
  - **3-(4-hydroxyphenyl)propanoic acid** *(False)* (shorter chain, hydroxyl on ring)

---

**Rule 7**: **Modifiers that are amino acids with side chains containing sulfur (e.g., methionine derivatives) or additional amino groups further along the side chain result in `Fe/Hf_high_or_low_value` being **True**.**

- **Physical-Chemical Basis**: Additional coordinating groups in side chains enhance chelation with Fe ions.

- **Examples**:
  - **(2S)-2-aminobutanedioic acid (aspartic acid)** *(True)*
  - **(2S)-6-acetamido-2-aminohexanoic acid** *(True)*

- **Counter-Examples**:
  - **(2S)-2-aminopentanedioic acid (glutamic acid)** *(False)* (less effective coordination due to side chain length)

---

**Rule 8**: **Modifiers that are aromatic carboxylic acids with electron-donating groups (EDGs) such as amino (–NH₂), hydroxyl (–OH), or methyl (–CH₃) directly attached to the ring result in `Fe/Hf_high_or_low_value` being **False**.**

- **Physical-Chemical Basis**: EDGs decrease the acidity of the carboxylic acid, reducing its ability to coordinate with Fe ions.

- **Examples**:
  - **4-aminobenzoic acid** *(False)*
  - **4-methylbenzoic acid** *(False)*

- **Counter-Examples**:
  - **4-nitrobenzoic acid** *(True)* (contains EWG)

---

**Rule 9**: **Modifiers that are aliphatic carboxylic acids lacking additional coordinating groups or electron-withdrawing substituents result in `Fe/Hf_high_or_low_value` being **False**.**

- **Physical-Chemical Basis**: Without extra coordination sites, these modifiers have limited ability to chelate Fe ions.

- **Examples**:
  - **Octanoic acid** *(False)*
  - **4-oxoheptanedioic acid** *(False)*

---

**Rule 10**: **Modifiers with bulky substituents near coordinating groups, causing steric hindrance, result in `Fe/Hf_high_or_low_value` being **False**.**

- **Physical-Chemical Basis**: Steric hindrance impedes effective coordination with Fe ions.

- **Examples**:
  - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid (tryptophan)** *(False)*
  - **2-[(4-hydroxybenzoyl)amino]acetic acid** *(False)*

---

**Rule 11**: **Modifiers containing perfluorinated alkyl chains result in `Fe/Hf_high_or_low_value` being **False**.**

- **Physical-Chemical Basis**: Highly electronegative fluorine atoms withdraw electron density, reducing coordination ability.

- **Example**:
  - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid** *(False)*

---

**Rule 12**: **Modifiers that are heteroaromatic carboxylic acids with nitrogen atoms not properly positioned for coordination result in `Fe/Hf_high_or_low_value` being **False**.**

- **Physical-Chemical Basis**: Ineffective nitrogen positioning hinders coordination with Fe ions.

- **Examples**:
  - **Pyridine-3-carboxylic acid** *(False)*
  - **1H-pyrazole-4-carboxylic acid** *(False)*

---

**Rule 13**: **Modifiers that are polyhydroxylated aliphatic carboxylic acids (polyols) near the carboxylate group result in `Fe/Hf_high_or_low_value` being **False**.**

- **Physical-Chemical Basis**: Multiple hydroxyl groups can engage in intramolecular hydrogen bonding, reducing availability for coordination.

- **Example**:
  - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** *(False)*

---

**Rule 14**: **Modifiers with aldehyde (–CHO) or ketone (–C=O) groups adjacent to the carboxylate without additional coordinating groups result in `Fe/Hf_high_or_low_value` being **False**.**

- **Physical-Chemical Basis**: Carbonyl groups may participate in intramolecular interactions, reducing coordination with Fe ions.

- **Examples**:
  - **4-formylbenzoic acid** *(False)*
  - **5-formyl-2-hydroxybenzoic acid** *(False)*

---

**Rule 15**: **Modifiers that are aliphatic dicarboxylic acids with carboxylate groups positioned closely result in `Fe/Hf_high_or_low_value` being **False**.**

- **Physical-Chemical Basis**: Close carboxylate groups can create unfavorable chelation geometry.

- **Example**:
  - **(2S)-2-aminopentanedioic acid** *(False)*

---

**End of Rules**

---

**Explanation:**

In generating these rules, we have:

1. **Combined Sub-Structures**: Each rule involves combinations of functional groups and structural features, such as chain length, presence of specific atoms (sulfur, nitrogen), and the positioning of functional groups.

2. **Considered Physical-Chemical Properties**: The rules are based on coordination chemistry principles, considering how modifiers interact with Fe ions through electron-donating/-withdrawing effects, steric factors, and chelation potential.

3. **Clear Predictions**: Each rule clearly predicts whether `Fe/Hf_high_or_low_value` will be **True** or **False** for any modifier fitting the description.

4. **Prioritized Broad Coverage**: The rules cover a wide range of modifiers in the dataset, ensuring applicability to various structures.

5. **Balanced Simplicity and Complexity**: We have a mix of simple rules with broad coverage and more specific rules that capture nuanced relationships.

**Application of Rules:**

- **Modifier**: **Octanoic acid**
  - **Analysis**: Simple aliphatic carboxylic acid without additional coordinating groups (Rule 9).
  - **Prediction**: **False**

- **Modifier**: **4-(bromomethyl)benzoic acid**
  - **Analysis**: Aromatic carboxylic acid with EWG at para position (Rule 2).
  - **Prediction**: **True**

- **Modifier**: **3-sulfanylpropanoic acid**
  - **Analysis**: Contains sulfur near carboxylate group (Rule 3).
  - **Prediction**: **True**

- **Modifier**: **4-aminobenzoic acid**
  - **Analysis**: Aromatic carboxylic acid with EDG (amino group) (Rule 8).
  - **Prediction**: **False**

**Conclusion:**

By analyzing the structural features and their impact on Fe coordination, these rules provide a framework for predicting `Fe/Hf_high_or_low_value`. Chemists can utilize these insights to design new modifiers that enhance Fe incorporation, thereby optimizing the yield of the target reaction. The rules are scientifically grounded and practically applicable, aiding in the rational design of effective molecular modifiers.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10
0,0,0,0,0,0,1,0,0,0
0,0,0,0,0,0,1,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,1,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,1,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0
0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0
1,0,0,0,1,0,0,0,0,0
0,0,0,0,0,0,1,0,0,0
1,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6857142857142857; Test Accuracy: 0.0
    Train Support: 0.05714285714285714; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 2.035947712418301; Test Lift: NONE
    Train Leverage: 0.028897959183673473; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    from rdkit import Chem
    import pandas as pd

    # Define SMARTS patterns for functional groups
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    # Carboxylate anion (-COO-)
    carboxylate_anion = '[CX3](=O)[O-]'
    # Primary amino group (-NH2)
    primary_amino = '[NX3H2]'
    # Sulfur-containing groups: thiol (-SH) and thioether (-S-)
    thiol = '[SX2H]'
    thioether = '[#6][SX2][#6]'
    # Aromatic carboxylic acid
    aromatic_carboxylic_acid = '[c][CX3](=O)[OX2H1]'
    # Electron-withdrawing groups (EWGs)
    nitro_group = '[NX3](=O)=O'
    halomethyl_group = '[CX4][F,Cl,Br,I]'
    sulfonyl_group = '[SX4](=O)(=O)[#6]'
    ketone_group = '[CX3](=O)[#6]'
    EWG_list = [nitro_group, halomethyl_group, sulfonyl_group, ketone_group]
    # Electron-donating groups (EDGs) on aromatic ring
    amino_on_aromatic = '[c][NX3H2]'
    hydroxyl_on_aromatic = '[c][OX2H]'
    methyl_on_aromatic = '[c][CH3]'
    EDG_list = [amino_on_aromatic, hydroxyl_on_aromatic, methyl_on_aromatic]

    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are aliphatic carboxylic acids with a terminal primary amino group (–NH₂) at the end opposite the carboxylate group, and with a carbon chain length of five or more carbons result in Fe/Hf_high_or_low_value being True.',
            'patterns': [
                carboxylic_acid,
                primary_amino
            ],
            'function': 'rule1_check',
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers that are aromatic carboxylic acids with strong electron-withdrawing groups (EWGs) at the para position result in Fe/Hf_high_or_low_value being True.',
            'patterns': [
                aromatic_carboxylic_acid
            ],
            'ewg_patterns': EWG_list,
            'function': 'rule2_check',
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers containing sulfur atoms in functional groups such as thiol (–SH) or thioether (–S–) within three carbon atoms of the carboxylate group result in Fe/Hf_high_or_low_value being True.',
            'patterns': [
                carboxylic_acid,
                [thiol, thioether]
            ],
            'function': 'rule3_check',
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers that are aromatic carboxylic acids with a pyridine ring, where the nitrogen atom is accessible for coordination, result in Fe/Hf_high_or_low_value being True.',
            'patterns': [
                aromatic_carboxylic_acid
            ],
            'function': 'rule4_check',
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers that are aliphatic carboxylic acids with polyether chains ending with an amino (–NH₂) or hydroxyl (–OH) group result in Fe/Hf_high_or_low_value being True.',
            'patterns': [
                carboxylic_acid
            ],
            'function': 'rule5_check',
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers that are aliphatic carboxylic acids with a terminal hydroxyl group (–OH) at the ω-position and a carbon chain length of seven carbons result in Fe/Hf_high_or_low_value being True.',
            'patterns': [
                carboxylic_acid
            ],
            'function': 'rule6_check',
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'Modifiers that are amino acids with side chains containing sulfur or additional amino groups further along the side chain result in Fe/Hf_high_or_low_value being True.',
            'patterns': [
                carboxylic_acid,
                primary_amino
            ],
            'function': 'rule7_check',
            'prediction': 1
        },
        {
            'number': 8,
            'description': 'Modifiers that are aromatic carboxylic acids with electron-donating groups (EDGs) such as amino (–NH₂), hydroxyl (–OH), or methyl (–CH₃) directly attached to the ring result in Fe/Hf_high_or_low_value being False.',
            'patterns': [
                aromatic_carboxylic_acid,
                EDG_list
            ],
            'function': 'rule8_check',
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers that are aliphatic carboxylic acids lacking additional coordinating groups or electron-withdrawing substituents result in Fe/Hf_high_or_low_value being False.',
            'patterns': [
                carboxylic_acid
            ],
            'exclude_patterns': [
                thiol,
                thioether,
                primary_amino,
                '[OX2H]',  # Hydroxyl group
                '[NX3H2]',  # Primary amine
                '[#7]',     # Any nitrogen
                '[#16]'     # Any sulfur
            ],
            'function': 'rule9_check',
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers with bulky substituents near coordinating groups, causing steric hindrance, result in Fe/Hf_high_or_low_value being False.',
            'patterns': [
                carboxylic_acid
            ],
            'function': 'rule10_check',
            'prediction': -1
        }
    ]

    # Compile SMARTS patterns
    for rule in rules:
        rule['compiled_patterns'] = []
        if 'patterns' in rule:
            for pat in rule['patterns']:
                if isinstance(pat, list):
                    compiled_pat_list = [Chem.MolFromSmarts(p) for p in pat]
                    rule['compiled_patterns'].append(compiled_pat_list)
                else:
                    rule['compiled_patterns'].append([Chem.MolFromSmarts(pat)])
        if 'exclude_patterns' in rule:
            rule['compiled_exclude_patterns'] = []
            for pat in rule['exclude_patterns']:
                rule['compiled_exclude_patterns'].append(Chem.MolFromSmarts(pat))
        if 'ewg_patterns' in rule:
            rule['compiled_ewg_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule['ewg_patterns']]
        if 'edg_patterns' in rule:
            rule['compiled_edg_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule['edg_patterns']]

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for pat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for pat_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in pat_group:
                        if mol.HasSubstructMatch(pat):
                            group_match = True
                            break
                    if not group_match:
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Additional checks for specific rules
                function_name = rule.get('function', None)
                if function_name:
                    func = globals().get(function_name)
                    if func:
                        match = func(mol, rule)
                    else:
                        match = True
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df

# Functions for specific rules

def rule1_check(mol, rule):
    # Rule 1: Check for aliphatic carboxylic acid with terminal primary amino group and chain length >=5 carbons
    carboxy_pattern = Chem.MolFromSmarts('[CX3](=O)[OX2H1]')
    amine_pattern = Chem.MolFromSmarts('[NX3H2]')
    carboxy_matches = mol.GetSubstructMatches(carboxy_pattern)
    amine_matches = mol.GetSubstructMatches(amine_pattern)
    if not carboxy_matches or not amine_matches:
        return False
    # Check for path between amine nitrogen and carboxylic acid carbon with >=5 carbons
    for carboxy_match in carboxy_matches:
        carboxy_c = carboxy_match[0]
        for amine_match in amine_matches:
            amine_n = amine_match[0]
            path = Chem.GetShortestPath(mol, amine_n, carboxy_c)
            # Exclude N and C atoms
            carbon_count = sum(1 for idx in path[1:-1] if mol.GetAtomWithIdx(idx).GetSymbol() == 'C')
            if carbon_count >= 5:
                return True
    return False

def rule2_check(mol, rule):
    # Rule 2: Aromatic carboxylic acids with EWG at para position
    aromatic_carboxy_pattern = Chem.MolFromSmarts('[c][CX3](=O)[OX2H1]')
    matches = mol.GetSubstructMatches(aromatic_carboxy_pattern)
    if not matches:
        return False
    # For each match, check for EWG at para position
    for match in matches:
        aromatic_c_idx = match[0]
        carboxy_c_idx = match[1]
        ring_info = mol.GetRingInfo()
        atom_ring = None
        for ring in ring_info.AtomRings():
            if aromatic_c_idx in ring:
                atom_ring = ring
                break
        if atom_ring:
            idx_position = atom_ring.index(aromatic_c_idx)
            para_position = (idx_position + 3) % len(atom_ring)
            para_atom_idx = atom_ring[para_position]
            for ewg_pat in rule['compiled_ewg_patterns']:
                if mol.GetAtomWithIdx(para_atom_idx).HasSubstructMatch(ewg_pat):
                    return True
                # Check substituents on para atom
                para_atom = mol.GetAtomWithIdx(para_atom_idx)
                for nbr in para_atom.GetNeighbors():
                    if nbr.GetIdx() != atom_ring[(para_position - 1)%len(atom_ring)] and nbr.GetIdx() != atom_ring[(para_position + 1)%len(atom_ring)]:
                        if nbr.HasSubstructMatch(ewg_pat):
                            return True
    return False

def rule3_check(mol, rule):
    # Rule 3: Sulfur groups within three carbons of carboxylate
    carboxy_pattern = Chem.MolFromSmarts('[CX3](=O)[OX2H1]')
    sulfur_patterns = [Chem.MolFromSmarts('[SX2H]'), Chem.MolFromSmarts('[SX2]')]
    carboxy_matches = mol.GetSubstructMatches(carboxy_pattern)
    sulfur_matches = []
    for s_pat in sulfur_patterns:
        sulfur_matches.extend([match[0] for match in mol.GetSubstructMatches(s_pat)])
    if not carboxy_matches or not sulfur_matches:
        return False
    for carboxy_match in carboxy_matches:
        carboxy_c = carboxy_match[0]
        for s_idx in sulfur_matches:
            path = Chem.GetShortestPath(mol, carboxy_c, s_idx)
            carbon_count = sum(1 for idx in path[1:-1] if mol.GetAtomWithIdx(idx).GetSymbol() == 'C')
            if carbon_count <= 3:
                return True
    return False

def rule4_check(mol, rule):
    # Rule 4: Aromatic carboxylic acids with accessible pyridine ring
    pyridine_pattern = Chem.MolFromSmarts('n1ccccc1')
    if mol.HasSubstructMatch(pyridine_pattern):
        return True
    return False

def rule5_check(mol, rule):
    # Rule 5: Aliphatic carboxylic acids with polyether chains ending with amino or hydroxyl group
    polyether_pattern = Chem.MolFromSmarts('[OX2][CH2][CH2][OX2]')
    terminal_amino = Chem.MolFromSmarts('[NX3H2]')
    terminal_hydroxyl = Chem.MolFromSmarts('[OX2H]')
    if mol.HasSubstructMatch(polyether_pattern):
        if mol.HasSubstructMatch(terminal_amino) or mol.HasSubstructMatch(terminal_hydroxyl):
            return True
    return False

def rule6_check(mol, rule):
    # Rule 6: Aliphatic carboxylic acids with terminal hydroxyl group and chain length of seven carbons
    carboxy_pattern = Chem.MolFromSmarts('[CX3](=O)[OX2H1]')
    hydroxyl_pattern = Chem.MolFromSmarts('[CH2][OX2H]')
    carboxy_matches = mol.GetSubstructMatches(carboxy_pattern)
    hydroxyl_matches = mol.GetSubstructMatches(hydroxyl_pattern)
    if not carboxy_matches or not hydroxyl_matches:
        return False
    for carboxy_match in carboxy_matches:
        carboxy_c = carboxy_match[0]
        for hydroxyl_match in hydroxyl_matches:
            hydroxyl_c = hydroxyl_match[0]
            path = Chem.GetShortestPath(mol, carboxy_c, hydroxyl_c)
            carbon_count = sum(1 for idx in path[1:-1] if mol.GetAtomWithIdx(idx).GetSymbol() == 'C')
            if carbon_count == 7 - 2:  # Exclude terminal carbons
                return True
    return False

def rule7_check(mol, rule):
    # Rule 7: Amino acids with side chains containing sulfur or additional amino groups
    amino_acid_pattern = Chem.MolFromSmarts('[NX3][CX4H]([#6])[CX3](=O)[OX2H1]')
    sulfur_pattern = Chem.MolFromSmarts('[SX2]')
    additional_amino = Chem.MolFromSmarts('[NX3H2]')
    if mol.HasSubstructMatch(amino_acid_pattern):
        if mol.HasSubstructMatch(sulfur_pattern) or mol.HasSubstructMatch(additional_amino):
            return True
    return False

def rule8_check(mol, rule):
    # Rule 8: Aromatic carboxylic acids with EDGs attached to the ring
    # Already handled by patterns
    return True

def rule9_check(mol, rule):
    # Rule 9: Aliphatic carboxylic acids lacking additional coordinating groups
    # Already handled by exclude patterns
    return True

def rule10_check(mol, rule):
    # Rule 10: Modifiers with bulky substituents near coordinating groups
    # Complex, may require 3D structure; here, we check for tertiary carbons near carboxylic acid
    bulky_pattern = Chem.MolFromSmarts('[CX3](=O)[OX2H1][CX4]([CX4])[CX4]')
    if mol.HasSubstructMatch(bulky_pattern):
        return True
    return False

--------------------------------------------------
    Target Name: Fe/Hf
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

---

**Rule 1**: **Modifiers that are aliphatic carboxylic acids with a terminal primary amino group (–NH₂) at the ω-position (opposite the carboxylate group), and with a carbon chain length of five to eight carbons, result in `Fe/Hf_high_or_low_value` being **True**.**

- **Physical-Chemical Basis**: The terminal amino group serves as an additional coordination site for Fe ions. The flexible aliphatic chain allows effective chelation, enhancing Fe incorporation into the catalyst.

- **Examples**:
  - **5-aminopentanoic acid** *(True)*
  - **7-aminoheptanoic acid** *(True)*
  - **8-aminooctanoic acid** *(True)*

- **Counter-Examples**:
  - **4-aminobenzoic acid** *(False)* (amino group attached to rigid aromatic ring)
  - **(2S)-2-aminopentanedioic acid** *(False)* (amino group adjacent to carboxyl groups, limiting chelation)

---

**Rule 2**: **Modifiers that are aromatic carboxylic acids with strong electron-withdrawing groups (EWGs) at the para position (e.g., nitro, halomethyl, sulfonyl), result in `Fe/Hf_high_or_low_value` being **True**.**

- **Physical-Chemical Basis**: EWGs increase the acidity of the carboxylic acid, enhancing its ability to coordinate with Fe ions by stabilizing the carboxylate anion and strengthening Fe–O bonds.

- **Examples**:
  - **4-nitrobenzoic acid** *(True)*
  - **4-(bromomethyl)benzoic acid** *(True)*
  - **4-sulfanylbenzoic acid** *(True)*

- **Counter-Examples**:
  - **4-methylbenzoic acid** *(False)* (methyl is electron-donating)
  - **4-formylbenzoic acid** *(False)* (aldehyde less withdrawing than nitro group)

---

**Rule 3**: **Modifiers containing a sulfur atom in functional groups such as thiol (–SH) or thioether (–S–) within three carbon atoms of the carboxylate group result in `Fe/Hf_high_or_low_value` being **True**.**

- **Physical-Chemical Basis**: Sulfur atoms are soft Lewis bases that coordinate strongly with transition metals like Fe. Their proximity to the carboxylate group facilitates bidentate chelation, enhancing Fe incorporation.

- **Examples**:
  - **3-sulfanylpropanoic acid** *(True)*
  - **4-sulfanylbenzoic acid** *(True)*
  - **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid** *(True)*

- **Counter-Examples**:
  - **Octanoic acid** *(False)* (no sulfur-containing groups)
  - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** *(False)* (no sulfur atom)

---

**Rule 4**: **Modifiers that are aromatic carboxylic acids containing a pyridine ring with an accessible nitrogen atom capable of coordinating with Fe result in `Fe/Hf_high_or_low_value` being **True**.**

- **Physical-Chemical Basis**: The lone pair on the pyridine nitrogen provides an additional coordination site for Fe ions, facilitating chelation and stabilizing the metal complex.

- **Examples**:
  - **4-pyridin-4-ylbenzoic acid** *(True)*
  - **4-pyridin-4-ylbutanoic acid** *(True)*

- **Counter-Examples**:
  - **Pyridine-3-carboxylic acid** *(False)* (nitrogen position hinders coordination)
  - **1H-pyrazole-4-carboxylic acid** *(False)* (nitrogen involved in ring system limiting accessibility)

---

**Rule 5**: **Modifiers that are aliphatic carboxylic acids with flexible polyether chains (e.g., containing –O–CH₂–CH₂– units) and terminal hydroxyl (–OH) or amino (–NH₂) groups result in `Fe/Hf_high_or_low_value` being **True**.**

- **Physical-Chemical Basis**: Ether oxygens and terminal functional groups provide multiple coordination sites. The flexibility of the polyether chain allows effective wrapping around Fe ions, enhancing chelation.

- **Examples**:
  - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid** *(True)*
  - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid** *(True)*

- **Counter-Examples**:
  - **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid** *(False)* (bulkier structure reduces flexibility)
  - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** *(False)* (multiple hydroxyls may hinder coordination due to hydrogen bonding)

---

**Rule 6**: **Modifiers that are aliphatic carboxylic acids with a terminal hydroxyl group (–OH) at the ω-position and a carbon chain length of seven carbons result in `Fe/Hf_high_or_low_value` being **True**.**

- **Physical-Chemical Basis**: The terminal hydroxyl group offers an extra coordination site. The seven-carbon chain provides optimal flexibility for the molecule to fold and chelate the Fe ion effectively.

- **Example**:
  - **7-hydroxyheptanoic acid** *(True)*

- **Counter-Examples**:
  - **5-(4-hydroxyphenyl)pentanoic acid** *(False)* (hydroxyl group on aromatic ring, less accessible)
  - **Octanoic acid** *(False)* (no terminal hydroxyl group)

---

**Rule 7**: **Modifiers that are amino acids with side chains containing sulfur (e.g., methionine derivatives) or an extra amino group result in `Fe/Hf_high_or_low_value` being **True**.**

- **Physical-Chemical Basis**: Additional coordinating groups in side chains enhance chelation with Fe ions, promoting stronger complex formation.

- **Examples**:
  - **(2S)-2-aminobutanedioic acid** *(True)* (aspartic acid, with side-chain carboxylate)
  - **(2S)-6-acetamido-2-aminohexanoic acid** *(True)* (lysine derivative with extra amino group)

- **Counter-Examples**:
  - **(2S)-2-aminopentanedioic acid** *(False)* (glutamic acid, side-chain length may reduce effective chelation)

---

**Rule 8**: **Modifiers that are aromatic carboxylic acids with electron-donating groups (EDGs) such as amino (–NH₂) or hydroxyl (–OH) directly attached to the ring result in `Fe/Hf_high_or_low_value` being **False**.**

- **Physical-Chemical Basis**: EDGs decrease the acidity of the carboxylic acid, reducing its ability to deprotonate and coordinate with Fe ions.

- **Examples**:
  - **4-aminobenzoic acid** *(False)*
  - **5-formyl-2-hydroxybenzoic acid** *(False)*

- **Counter-Examples**:
  - **4-nitrobenzoic acid** *(True)* (contains EWG enhancing coordination)

---

**Rule 9**: **Modifiers that are aliphatic carboxylic acids lacking additional coordinating groups or electron-withdrawing substituents result in `Fe/Hf_high_or_low_value` being **False**.**

- **Physical-Chemical Basis**: Without extra coordination sites or activation by electron-withdrawing groups, these modifiers interact weakly with Fe ions, leading to lower incorporation into the catalyst.

- **Examples**:
  - **Octanoic acid** *(False)*
  - **4-oxoheptanedioic acid** *(False)*

---

**Rule 10**: **Modifiers containing bulky substituents near coordinating groups that cause steric hindrance result in `Fe/Hf_high_or_low_value` being **False**.**

- **Physical-Chemical Basis**: Steric hindrance impedes effective coordination by blocking access to Fe ions, reducing chelation efficiency.

- **Examples**:
  - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** *(False)* (tryptophan, bulky indole ring near amino group)
  - **2-[(4-hydroxybenzoyl)amino]acetic acid** *(False)* (bulky aromatic group near potential coordination sites)

---

**End of Rules**

---

**Explanation:**

These rules have been carefully developed to illustrate the relationship between the structural features of molecular modifiers and their impact on the Fe/Hf ratio in the catalyst. By combining functional groups such as amino, hydroxyl, sulfur-containing groups, and considering chain length and molecular flexibility, the rules predict the likelihood of high or low Fe incorporation.

- **Physical-Chemical Considerations**: Each rule is grounded in coordination chemistry principles, taking into account how functional groups interact with Fe ions, electron-donating or withdrawing effects, and steric factors that influence chelation.
- **Balanced Coverage**: The rules cover a broad spectrum of the dataset, from simple aliphatic acids to complex aromatic compounds, ensuring applicability to various modifiers.
- **Predictive Clarity**: Each rule clearly states whether a modifier fitting the description will result in a high or low `Fe/Hf_high_or_low_value`.

**Application Examples:**

- **Modifier**: **Octanoic acid**
  - **Analysis**: Fits Rule 9 (aliphatic acid without additional coordinating groups).
  - **Prediction**: **False**
  - **Actual**: **False**

- **Modifier**: **4-(bromomethyl)benzoic acid**
  - **Analysis**: Fits Rule 2 (aromatic acid with EWG at para position).
  - **Prediction**: **True**
  - **Actual**: **True**

- **Modifier**: **3-sulfanylpropanoic acid**
  - **Analysis**: Fits Rule 3 (contains sulfur near carboxylate group).
  - **Prediction**: **True**
  - **Actual**: **True**

- **Modifier**: **4-aminobenzoic acid**
  - **Analysis**: Fits Rule 8 (aromatic acid with EDG).
  - **Prediction**: **False**
  - **Actual**: **False**

- **Modifier**: **(2S)-2-aminobutanedioic acid** (aspartic acid)
  - **Analysis**: Fits Rule 7 (amino acid with additional coordinating groups).
  - **Prediction**: **True**
  - **Actual**: **True**

**Conclusion:**

By applying these rules, chemists can predict the effect of different molecular modifiers on the Fe/Hf ratio in the catalyst. This knowledge aids in the rational design and selection of modifiers to optimize catalyst performance and enhance the yield of the desired reaction. The rules offer a balance between simplicity and specificity, providing both broad coverage and detailed insights into the molecular interactions at play.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0
0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0
1,0,0,0,1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6285714285714286; Test Accuracy: 0.0
    Train Support: 0.11428571428571428; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 2.058823529411765; Test Lift: NONE
    Train Leverage: 0.05877551020408163; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    # Carboxylic acid group (-COOH)
    carboxylic_acid_group = '[CX3](=O)[OX1H0-,OX2H1]'
    
    # Primary amino group (-NH2)
    primary_amino_group = '[NX3;H2]'
    
    # Aromatic atoms
    aromatic_atoms = '[a]'
    
    # Electron-withdrawing groups (EWGs) at para position
    ewg_para = '[cH]1ccc([N+](=O)[O-]|[CX3](=O)[OX1H0-,OX2H1]|[SX4](=O)(=O)[OH0])cc1'
    
    # Sulfur-containing groups within three bonds of carboxylic acid
    sulfur_near_carboxylate = '[CX3](=O)[OX1H0-,OX2H1][!#1][!#1][#16]'
    
    # Pyridine ring connected to carboxylic acid
    pyridine_carboxylic_acid = 'c1ccncc1C(=O)[O,H]'
    
    # Polyether chain with terminal hydroxyl (-OH) or amino (-NH2) groups
    polyether_chain = '[OX2][CH2][CH2][OX2H,NX3;H2]'
    
    # Seven-carbon chain with terminal hydroxyl group at omega position
    omega_hydroxy_heptanoic_acid = 'O=CCCCCCC[OX2H]'
    
    # Amino acids with sulfur-containing side chains or extra amino group
    sulfur_amino_acid = '[NX3;H2][CX4][CX4][SX2][#6]'
    extra_amino_group = '[NX3;H2][CX4][CX4][NX3;H2][#6]'
    
    # Aromatic ring with electron-donating groups (EDGs)
    edg_aromatic = '[c][OX2H,NX3;H2]'
    
    # Simple aliphatic carboxylic acids without additional coordinating groups
    simple_aliphatic_acid = '[CX3](=O)[OX1H0-,OX2H1]'
    
    # Bulky substituents near coordinating groups causing steric hindrance
    bulky_substituents = '[#6][C](C)(C)[#6]'
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are aliphatic carboxylic acids with a terminal primary amino group (-NH2) at the omega-position and with a carbon chain length of five to eight carbons.',
            'patterns': [carboxylic_acid_group, primary_amino_group],
            'exclude_patterns': [aromatic_atoms],
            'additional_checks': {'chain_length': (5,8)},
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers that are aromatic carboxylic acids with strong electron-withdrawing groups (EWGs) at the para position.',
            'patterns': [ewg_para],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers containing a sulfur atom in functional groups such as thiol (-SH) or thioether (-S-) within three carbon atoms of the carboxylate group.',
            'patterns': [sulfur_near_carboxylate],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers that are aromatic carboxylic acids containing a pyridine ring with an accessible nitrogen atom capable of coordinating with Fe.',
            'patterns': [pyridine_carboxylic_acid],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers that are aliphatic carboxylic acids with flexible polyether chains and terminal hydroxyl (-OH) or amino (-NH2) groups.',
            'patterns': [carboxylic_acid_group, polyether_chain],
            'exclude_patterns': [aromatic_atoms],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers that are aliphatic carboxylic acids with a terminal hydroxyl group (-OH) at the omega-position and a carbon chain length of seven carbons.',
            'patterns': [omega_hydroxy_heptanoic_acid],
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'Modifiers that are amino acids with side chains containing sulfur or an extra amino group.',
            'patterns': [sulfur_amino_acid, extra_amino_group],
            'prediction': 1
        },
        {
            'number': 8,
            'description': 'Modifiers that are aromatic carboxylic acids with electron-donating groups (EDGs) such as amino (-NH2) or hydroxyl (-OH) directly attached to the ring.',
            'patterns': [edg_aromatic],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers that are aliphatic carboxylic acids lacking additional coordinating groups or electron-withdrawing substituents.',
            'patterns': [simple_aliphatic_acid],
            'exclude_patterns': [aromatic_atoms, primary_amino_group, '[#16]', '[OX2H]', '[NX3;H2]', '[OX2][CX4][CX4][OX2H,NX3;H2]'],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers containing bulky substituents near coordinating groups that cause steric hindrance.',
            'patterns': [bulky_substituents],
            'prediction': -1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = [Chem.MolFromSmarts(pat) for pat in rule.get('patterns', [])]
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = [Chem.MolFromSmarts(pat) for pat in rule['exclude_patterns']]
            rule['compiled_exclude_patterns'] = compiled_excludes
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for pat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for pat in rule['compiled_patterns']:
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if match and 'additional_checks' in rule:
                    # Perform additional checks specific to the rule
                    checks = rule['additional_checks']
                    if 'chain_length' in checks:
                        # Get the carboxylic acid carbon atoms
                        carboxy_carbons = [match[0] for match in mol.GetSubstructMatches(Chem.MolFromSmarts('[CX3](=O)[OX1H0-,OX2H1]'))]
                        # Get the amino nitrogen atoms
                        amino_nitrogens = [match[0] for match in mol.GetSubstructMatches(Chem.MolFromSmarts('[NX3;H2]'))]
                        chain_length_match = False
                        for c_atom in carboxy_carbons:
                            for n_atom in amino_nitrogens:
                                path = Chem.rdmolops.GetShortestPath(mol, c_atom, n_atom)
                                # Count number of carbons in the path
                                carbons_in_path = sum(1 for atom_idx in path if mol.GetAtomWithIdx(atom_idx).GetSymbol() == 'C')
                                # Check if carbons_in_path is between 5 and 8
                                if checks['chain_length'][0] <= carbons_in_path <= checks['chain_length'][1]:
                                    chain_length_match = True
                                    break
                            if chain_length_match:
                                break
                        if not chain_length_match:
                            match = False
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: Fe/Hf
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

---

**Rule 1**: **Modifiers that are aliphatic carboxylic acids with a terminal primary amino group (–NH₂) or hydroxyl group (–OH) at the ω-position (opposite the carboxylate group), and a carbon chain length of at least five carbons, result in `Fe/Hf_high_or_low_value` being **True**.**

- **Physical-Chemical Basis**: The terminal amino or hydroxyl groups act as additional coordination sites for Fe ions. The sufficient chain length provides flexibility, allowing the molecule to effectively chelate Fe ions through intramolecular coordination, enhancing Fe incorporation into the catalyst.

- **Examples**:
  - **5-aminopentanoic acid** *(True)*
  - **7-aminoheptanoic acid** *(True)*
  - **8-aminooctanoic acid** *(True)*
  - **7-hydroxyheptanoic acid** *(True)*

- **Counter-Examples**:
  - **Octanoic acid** *(False)* (no terminal coordinating group)
  - **3-sulfanylpropanoic acid** *(False)* (short chain length)

---

**Rule 2**: **Modifiers that are aromatic carboxylic acids with strong electron-withdrawing groups (EWGs) at the para position (e.g., nitro, halomethyl, sulfanyl), which enhance acidity and coordination ability, result in `Fe/Hf_high_or_low_value` being **True**.**

- **Physical-Chemical Basis**: EWGs increase the acidity of the carboxylic acid by stabilizing the negative charge on the carboxylate anion. This enhances its ability to coordinate with Fe ions by forming stronger Fe–O bonds.

- **Examples**:
  - **4-nitrobenzoic acid** *(True)*
  - **4-(bromomethyl)benzoic acid** *(True)*
  - **4-sulfanylbenzoic acid** *(True)*

- **Counter-Examples**:
  - **4-methylbenzoic acid** *(False)* (methyl is electron-donating)
  - **4-aminobenzoic acid** *(False)* (amino group is electron-donating)

---

**Rule 3**: **Modifiers that are aromatic carboxylic acids containing a pyridine ring with an accessible nitrogen atom capable of coordinating with Fe result in `Fe/Hf_high_or_low_value` being **True**.**

- **Physical-Chemical Basis**: The lone pair on the pyridine nitrogen provides an additional coordination site for Fe ions, facilitating chelation and stabilizing the metal complex.

- **Examples**:
  - **4-pyridin-4-ylbenzoic acid** *(True)*
  - **4-pyridin-4-ylbutanoic acid** *(True)*

- **Counter-Examples**:
  - **Pyridine-3-carboxylic acid** *(False)* (nitrogen positioned away from effective coordination)
  - **1H-pyrazole-4-carboxylic acid** *(False)* (nitrogens are less accessible due to aromaticity)

---

**Rule 4**: **Modifiers containing sulfur atoms in functional groups such as thiol (–SH) or thioether (–S–) within close proximity (within three carbon atoms) to the carboxylate group result in `Fe/Hf_high_or_low_value` being **True**.**

- **Physical-Chemical Basis**: Sulfur atoms are soft Lewis bases and coordinate strongly with transition metals like Fe. Their proximity to the carboxylate group allows for bidentate or polydentate chelation, enhancing Fe incorporation.

- **Examples**:
  - **3-sulfanylpropanoic acid** *(True)*
  - **4-sulfanylbenzoic acid** *(True)*
  - **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid** *(True)*

- **Counter-Example**:
  - **Octanoic acid** *(False)* (no sulfur-containing groups)

---

**Rule 5**: **Modifiers that are aliphatic carboxylic acids with flexible polyether chains (containing –O–CH₂–CH₂– units) and terminal amino (–NH₂) or other coordinating groups result in `Fe/Hf_high_or_low_value` being **True**.**

- **Physical-Chemical Basis**: Ether oxygen atoms and terminal amino groups provide multiple coordination sites for Fe ions. The flexibility of the polyether chain allows the molecule to wrap around Fe ions, facilitating effective chelation.

- **Examples**:
  - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid** *(True)*
  - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid** *(True)*

- **Counter-Example**:
  - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** *(False)* (multiple hydroxyl groups reduce coordination due to hydrogen bonding)

---

**Rule 6**: **Modifiers that are aromatic carboxylic acids with electron-donating groups (EDGs) such as amino (–NH₂) or hydroxyl (–OH) directly attached to the ring result in `Fe/Hf_high_or_low_value` being **False**.**

- **Physical-Chemical Basis**: EDGs decrease the acidity of the carboxylic acid by donating electron density, which reduces its ability to deprotonate and coordinate with Fe ions. Additionally, these groups can engage in intramolecular hydrogen bonding, further hindering coordination.

- **Examples**:
  - **4-aminobenzoic acid** *(False)*
  - **5-formyl-2-hydroxybenzoic acid** *(False)*
  - **(2-[(4-hydroxybenzoyl)amino]acetic acid)** *(False)*

- **Counter-Example**:
  - **4-nitrobenzoic acid** *(True)* (contains EWG enhancing coordination)

---

**Rule 7**: **Modifiers that are aliphatic carboxylic acids lacking additional coordinating groups or electron-withdrawing substituents result in `Fe/Hf_high_or_low_value` being **False**.**

- **Physical-Chemical Basis**: Without extra coordination sites or activation by electron-withdrawing groups, these modifiers interact weakly with Fe ions, leading to lower incorporation into the catalyst.

- **Examples**:
  - **Octanoic acid** *(False)*
  - **4-oxoheptanedioic acid** *(False)*

---

**Rule 8**: **Modifiers that are aromatic carboxylic acids containing bulky substituents near coordinating groups, causing steric hindrance, result in `Fe/Hf_high_or_low_value` being **False**.**

- **Physical-Chemical Basis**: Steric hindrance from bulky groups impedes effective coordination by blocking access to Fe ions, reducing chelation efficiency.

- **Examples**:
  - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** *(False)* (tryptophan, bulky indole ring near amino group)
  - **(4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid)** *(True)* (exception due to ketone group enhancing coordination despite bulkiness)

---

**Rule 9**: **Modifiers with multiple adjacent hydroxyl groups (polyols) near the carboxylate group result in `Fe/Hf_high_or_low_value` being **False**.**

- **Physical-Chemical Basis**: Multiple hydroxyl groups can form strong intramolecular hydrogen bonds, reducing the availability of lone pairs on oxygen atoms for coordination with Fe ions.

- **Example**:
  - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** *(False)*

- **Counter-Example**:
  - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid** *(True)* (ether oxygens are more available for coordination)

---

**Rule 10**: **Modifiers that are α-amino acids with side-chain carboxylate groups close to the α-carbon, allowing for effective chelation through formation of five-membered rings, result in `Fe/Hf_high_or_low_value` being **True**.**

- **Physical-Chemical Basis**: The proximity of the side-chain carboxylate group to the α-amino group enables the molecule to form stable chelate rings with Fe ions, enhancing coordination and incorporation.

- **Example**:
  - **(2S)-2-aminobutanedioic acid** *(True)* (aspartic acid)

- **Counter-Example**:
  - **(2S)-2-aminopentanedioic acid** *(False)* (glutamic acid; longer side chain reduces ring stability and chelation efficiency)

---

**End of Rules**

---

**Explanation:**

These rules have been developed to elucidate the relationship between the structural features of molecular modifiers and their impact on the `Fe/Hf_high_or_low_value` in the catalyst. By combining multiple functional groups and considering the underlying physical-chemical properties, the rules predict the likelihood of high or low Fe incorporation.

- **Combination of Sub-Structures**: Each rule combines multiple functional groups or structural features, such as terminal amino groups with sufficient chain length, electron-withdrawing groups on aromatic rings, or flexible polyether chains with coordinating groups.

- **Physical-Chemical Considerations**: The rules are grounded in coordination chemistry principles, focusing on how functional groups interact with Fe ions, the effect of electron-donating or withdrawing substituents on acidity and coordination ability, and the impact of molecular flexibility and steric hindrance on chelation.

- **Balanced Coverage**: The rules cover a broad spectrum of the dataset, ensuring applicability to various modifiers while balancing simple, high-coverage rules with more complex, specific ones.

- **Predictive Clarity**: Each rule explicitly states whether a modifier fitting the description will result in a high or low `Fe/Hf_high_or_low_value`, providing clear guidance for predicting outcomes.

**Application Examples:**

- **Modifier**: **Octanoic acid**
  - **Analysis**: Fits **Rule 7** (aliphatic acid without additional coordinating groups).
  - **Prediction**: **False**
  - **Actual**: **False**

- **Modifier**: **4-(bromomethyl)benzoic acid**
  - **Analysis**: Fits **Rule 2** (aromatic acid with EWG at para position).
  - **Prediction**: **True**
  - **Actual**: **True**

- **Modifier**: **3-sulfanylpropanoic acid**
  - **Analysis**: Fits **Rule 4** (contains sulfur near carboxylate group).
  - **Prediction**: **True**
  - **Actual**: **True**

- **Modifier**: **4-aminobenzoic acid**
  - **Analysis**: Fits **Rule 6** (aromatic acid with EDG).
  - **Prediction**: **False**
  - **Actual**: **False**

- **Modifier**: **(2S)-2-aminobutanedioic acid** (aspartic acid)
  - **Analysis**: Fits **Rule 10** (α-amino acid with side-chain carboxylate close to α-carbon).
  - **Prediction**: **True**
  - **Actual**: **True**

- **Modifier**: **(2S)-2-aminopentanedioic acid** (glutamic acid)
  - **Analysis**: Does not fit **Rule 10** due to longer side chain.
  - **Prediction**: **False**
  - **Actual**: **False**

- **Modifier**: **4-pyridin-4-ylbenzoic acid**
  - **Analysis**: Fits **Rule 3** (aromatic acid with pyridine ring).
  - **Prediction**: **True**
  - **Actual**: **True**

**Conclusion:**

By applying these rules, chemists can predict the effect of different molecular modifiers on the Fe/Hf ratio in the catalyst. This knowledge aids in the rational design and selection of modifiers to optimize catalyst performance and enhance the yield of the desired reaction. The rules offer a balance between simplicity and specificity, providing both broad coverage and detailed insights into the molecular interactions at play.

These rules adhere to the specified requirements:

1. **Combination of Sub-Structures**: Each rule illustrates direct combinations of functional groups, such as terminal amino groups with sufficient chain length or electron-withdrawing groups on aromatic rings.
2. **Physical-Chemical Properties**: The rules consider underlying physical-chemical properties, focusing on coordination chemistry and the influence of functional groups on Fe coordination.
3. **Predictive Clarity**: Each rule clearly predicts whether the `Fe/Hf_high_or_low_value` is high (True) or low (False) for any modifier that fits its description.
4. **Broader Coverage**: The rules prioritize broader coverage, collectively encompassing a wide range of modifiers in the dataset.
5. **Number of Rules**: A total of 10 rules have been generated, within the requirement of 5 to 15 rules.
6. **Balance Between Simplicity and Complexity**: The rules maintain a suitable balance, ranging from simple rules with higher coverage to more complex rules with lower coverage.
7. **Improvement Over Previous Rules**: The rules have been refined for clarity, accuracy, and applicability, improving upon previous versions by combining similar rules and eliminating redundancies.

---

**Note**: These rules serve as a predictive tool for understanding how different molecular modifiers influence the Fe/Hf ratio in the catalyst. They should be used alongside experimental data for validation and to guide the design of new modifiers for optimizing catalytic performance.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 9,Rule 10
0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0
1,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0
0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.5714285714285714; Test Accuracy: 0.0
    Train Support: 0.11428571428571428; Test Support: 0.0
    Train Confidence: 0.8431372549019608; Test Confidence: 0.5
    Train Lift: 1.6977444572600284; Test Lift: NONE
    Train Leverage: 0.021224489795918358; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    
    # Primary amine group (-NH2)
    primary_amine = '[NX3H2]'
    
    # Hydroxyl group (-OH)
    hydroxyl_group = '[OX2H]'
    
    # Aliphatic chain of five or more carbons
    aliphatic_chain_five_or_more = '[CH2][CH2][CH2][CH2][CH2]'
    
    # Aromatic carboxylic acid (benzoic acid)
    aromatic_carboxylic_acid = '[c][CX3](=O)[OX2H1]'
    
    # Electron-withdrawing groups (EWGs)
    nitro_group = '[NX3](=O)=O'  # Nitro group
    halogen = '[F,Cl,Br,I]'
    halomethyl = '[CX4][F,Cl,Br,I]'
    sulfanyl = '[SX2H]'
    
    # Electron-donating groups (EDGs)
    amino_group = '[NX3H2]'
    methoxy_group = '[OX2][CH3]'
    
    # Pyridine ring
    pyridine_ring = 'n1ccccc1'
    
    # Sulfur-containing groups
    thiol = '[SX2H]'  # Thiol group
    thioether = '[#16X2][#6]'  # Thioether group
    
    # Ether linkage in aliphatic chains (-O-CH2-CH2-)
    ether_linkage = '[OX2][CH2][CH2]([OX2][CH2][CH2]){2}[OX2]'  # Simplified pattern for multiple ether units
    
    # Alpha-amino acid with side-chain carboxylate close to alpha-carbon
    aspartic_acid_like = '[NX3][CX4H]([CX3](=O)[OX2H1])[CX3](=O)[OX2H1]'
    
    # Multiple adjacent hydroxyl groups
    polyol = '[OX2H][CX4][OX2H][CX4][OX2H]'
    
    # Aromatic hydroxyl group
    aromatic_hydroxyl = '[c][OX2H]'
    
    # Amino group attached to aromatic ring
    aromatic_amino = '[c][NX3H2]'
    
    # Rules definition
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are aliphatic carboxylic acids with a terminal primary amino group (-NH2) or hydroxyl group (-OH) at the omega-position, and a carbon chain length of at least five carbons.',
            'patterns': [
                [carboxylic_acid],
                [primary_amine, hydroxyl_group],
                [aliphatic_chain_five_or_more]
            ],
            'smarts_logic': 'custom',
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers that are aromatic carboxylic acids with strong electron-withdrawing groups (EWGs) at the para position (e.g., nitro, halomethyl, sulfanyl).',
            'patterns': [
                [aromatic_carboxylic_acid],
                [nitro_group, halomethyl, sulfanyl]
            ],
            'smarts_logic': 'custom',
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers that are aromatic carboxylic acids containing a pyridine ring with an accessible nitrogen atom.',
            'patterns': [
                [pyridine_ring],
                [carboxylic_acid]
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers containing sulfur atoms in functional groups such as thiol (-SH) or thioether (-S-) within close proximity to the carboxylate group.',
            'patterns': [
                [carboxylic_acid],
                [thiol, thioether]
            ],
            'smarts_logic': 'custom',
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers that are aliphatic carboxylic acids with flexible polyether chains and terminal amino (-NH2) or other coordinating groups.',
            'patterns': [
                [carboxylic_acid],
                [ether_linkage],
                [primary_amine, hydroxyl_group]
            ],
            'smarts_logic': 'custom',
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers that are aromatic carboxylic acids with electron-donating groups (EDGs) such as amino (-NH2) or hydroxyl (-OH) directly attached to the ring.',
            'patterns': [
                [aromatic_carboxylic_acid],
                [aromatic_amino, aromatic_hydroxyl]
            ],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Modifiers that are aliphatic carboxylic acids lacking additional coordinating groups or electron-withdrawing substituents.',
            'patterns': [
                [carboxylic_acid]
            ],
            'exclude_patterns': [
                [primary_amine, hydroxyl_group, thiol, methoxy_group]
            ],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers with multiple adjacent hydroxyl groups (polyols) near the carboxylate group.',
            'patterns': [
                [carboxylic_acid],
                [polyol]
            ],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers that are alpha-amino acids with side-chain carboxylate groups close to the alpha-carbon.',
            'patterns': [
                [aspartic_acid_like]
            ],
            'prediction': 1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(p) for p in group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for group in rule['exclude_patterns']:
                compiled_group = [Chem.MolFromSmarts(p) for p in group]
                compiled_excludes.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_excludes
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Custom logic for certain rules
                if rule.get('smarts_logic') == 'custom':
                    if rule['number'] == 1:
                        # Rule 1 custom logic
                        # Check for carboxylic acid group
                        if not mol.HasSubstructMatch(Chem.MolFromSmarts(carboxylic_acid)):
                            match = False
                        else:
                            # Check for terminal primary amine or hydroxyl group
                            terminal_groups = [primary_amine, hydroxyl_group]
                            terminal_match = False
                            for pat in terminal_groups:
                                termini = mol.GetSubstructMatches(Chem.MolFromSmarts(pat))
                                for term in termini:
                                    atom = mol.GetAtomWithIdx(term[0])
                                    if len(atom.GetNeighbors()) == 1:
                                        terminal_match = True
                                        break
                                if terminal_match:
                                    break
                            if not terminal_match:
                                match = False
                            else:
                                # Check for aliphatic chain of at least five carbons
                                # Simplified by checking the total number of carbon atoms
                                num_carbons = sum(1 for atom in mol.GetAtoms() if atom.GetAtomicNum() == 6 and not atom.IsInRing())
                                if num_carbons < 5:
                                    match = False
                        row.append(rule['prediction'] if match else 0)
                        continue
                    elif rule['number'] == 2:
                        # Rule 2 custom logic
                        # Check for aromatic carboxylic acid
                        if not mol.HasSubstructMatch(Chem.MolFromSmarts(aromatic_carboxylic_acid)):
                            match = False
                        else:
                            # Check for EWG at para position
                            ewg_patterns = [nitro_group, halomethyl, sulfanyl]
                            ewg_match = False
                            for ewg in ewg_patterns:
                                # We're approximating para position by checking if EWG is connected to aromatic ring
                                if mol.HasSubstructMatch(Chem.MolFromSmarts(f'[c][c]([c][c][c]{ewg})[c][CX3](=O)[OX2H1]')):
                                    ewg_match = True
                                    break
                            if not ewg_match:
                                match = False
                        row.append(rule['prediction'] if match else 0)
                        continue
                    elif rule['number'] == 4:
                        # Rule 4 custom logic
                        # Check for carboxylic acid group
                        if not mol.HasSubstructMatch(Chem.MolFromSmarts(carboxylic_acid)):
                            match = False
                        else:
                            # Check for sulfur-containing group within 3 bonds of carboxylic acid
                            sulfur_groups = [thiol, thioether]
                            carboxy_matches = mol.GetSubstructMatches(Chem.MolFromSmarts(carboxylic_acid))
                            sulfur_matches = []
                            for pat in sulfur_groups:
                                sulfur_matches.extend(mol.GetSubstructMatches(Chem.MolFromSmarts(pat)))
                            sulfur_near_carboxy = False
                            for c_match in carboxy_matches:
                                c_atom_idx = c_match[0]
                                for s_match in sulfur_matches:
                                    s_atom_idx = s_match[0]
                                    path_length = Chem.rdmolops.GetShortestPath(mol, c_atom_idx, s_atom_idx)
                                    if len(path_length) - 1 <= 3:
                                        sulfur_near_carboxy = True
                                        break
                                if sulfur_near_carboxy:
                                    break
                            if not sulfur_near_carboxy:
                                match = False
                        row.append(rule['prediction'] if match else 0)
                        continue
                    elif rule['number'] == 5:
                        # Rule 5 custom logic
                        # Check for carboxylic acid group
                        if not mol.HasSubstructMatch(Chem.MolFromSmarts(carboxylic_acid)):
                            match = False
                        else:
                            # Check for ether linkage
                            if not mol.HasSubstructMatch(Chem.MolFromSmarts(ether_linkage)):
                                match = False
                            else:
                                # Check for terminal amino or hydroxyl group
                                terminal_groups = [primary_amine, hydroxyl_group]
                                terminal_match = False
                                for pat in terminal_groups:
                                    termini = mol.GetSubstructMatches(Chem.MolFromSmarts(pat))
                                    for term in termini:
                                        atom = mol.GetAtomWithIdx(term[0])
                                        if len(atom.GetNeighbors()) == 1:
                                            terminal_match = True
                                            break
                                    if terminal_match:
                                        break
                                if not terminal_match:
                                    match = False
                        row.append(rule['prediction'] if match else 0)
                        continue
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        if mol.HasSubstructMatch(pat):
                            group_match = True
                            break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df
--------------------------------------------------