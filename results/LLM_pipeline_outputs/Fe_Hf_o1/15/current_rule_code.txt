def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and substructures used in the rules
    
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    
    # Terminal primary aliphatic amine group (-NH2 at ω-position)
    terminal_primary_amine = '[NX3;H2][CX4H2][CX4H2][CX4H2][CX3](=O)[OX2H1]'
    
    # Aromatic carboxylic acid
    aromatic_carboxylic_acid = 'c[C](=O)[OX2H1]'
    
    # Electron-withdrawing groups on aromatic ring
    nitro_group = '[$([NX3](=O)=O)]'
    halogen = '[F,Cl,Br,I]'
    ewg_on_aromatic = 'c[$(nitro_group),$(halogen)]'
    
    # Electron-donating groups on aromatic ring
    hydroxyl_on_aromatic = 'c[OX2H]'
    amino_on_aromatic = 'c[NX3;H2,H1]'
    methoxy_on_aromatic = 'c[OX2][CH3]'
    edg_on_aromatic = '[$(hydroxyl_on_aromatic),$(amino_on_aromatic),$(methoxy_on_aromatic)]'
    
    # Sulfur-containing groups
    thiol = '[SX2H]'  # Thiol group
    thioether = '[#16X2][#6]'  # Thioether group
    
    # Ether linkage in aliphatic chain
    ether_linkage = '[#6][OX2][#6]'
    
    # Heteroaromatic ring connected via flexible linker to carboxylic acid
    heteroaromatic_ring = '[n,o,s]1cccc1'
    aliphatic_linker = '[#6X4]'
    
    # Multiple adjacent hydroxyl groups (polyols)
    polyol = '[#6][OX2H][#6][OX2H]'
    
    # Bulky groups near coordinating sites
    bulky_group = '[#6][c]'
    
    # Conjugated systems with electron-withdrawing groups
    conjugated_electronegative = '[#6]=[#6]-[#6]=[CX3](=O)[OX2H1]'
    
    # Dicarboxylic acids
    dicarboxylic_acid = '[CX3](=O)[OX2H1][CX4][CX3](=O)[OX2H1]'
    
    # Initialize the rules list
    rules = []
    
    # Define the rules
    
    # Rule 1
    rules.append({
        'number': 1,
        'description': 'Modifiers that are aliphatic carboxylic acids with a terminal primary amino group (-NH2) at the ω-position tend to lead to high Fe/Hf values.',
        'patterns': [
            carboxylic_acid,
            terminal_primary_amine,
        ],
        'exclude_patterns': ['[a]'],  # Exclude aromatic rings
        'prediction': 1,
    })
    
    # Rule 2
    rules.append({
        'number': 2,
        'description': 'Modifiers that are aromatic carboxylic acids with electron-withdrawing substituents (e.g., nitro, halogens) at the para position tend to lead to high Fe/Hf values; those with electron-donating groups tend to lead to low Fe/Hf values.',
        'patterns': [
            aromatic_carboxylic_acid,
            'c1cc([F,Cl,Br,I,N+](=O)[O-])ccc1',
        ],
        'prediction': 1,
    })
    
    # Rule 3
    rules.append({
        'number': 3,
        'description': 'Modifiers containing sulfur-containing groups such as thiol (-SH) or thioether (-S-) functionalities tend to lead to high Fe/Hf values.',
        'patterns': [
            thiol,
            thioether,
        ],
        'prediction': 1,
    })
    
    # Rule 4
    rules.append({
        'number': 4,
        'description': 'Modifiers that are aliphatic carboxylic acids with flexible ether chains ending with coordinating groups (e.g., amino, hydroxyl) tend to lead to high Fe/Hf values.',
        'patterns': [
            carboxylic_acid,
            ether_linkage,
            '[NX3;H2,H1]',
            '[OX2H]',
        ],
        'prediction': 1,
    })
    
    # Rule 5
    rules.append({
        'number': 5,
        'description': 'Modifiers with heteroaromatic rings connected via flexible aliphatic linkers to the carboxylic acid group tend to lead to high Fe/Hf values.',
        'patterns': [
            carboxylic_acid,
            heteroaromatic_ring,
            aliphatic_linker,
        ],
        'exclude_patterns': [
            'c[C](=O)[OX2H1]',  # Exclude direct attachment
        ],
        'prediction': 1,
    })
    
    # Rule 6
    rules.append({
        'number': 6,
        'description': 'Modifiers that are amino acids or peptides with additional coordinating groups tend to lead to high Fe/Hf values.',
        'patterns': [
            carboxylic_acid,
            '[NX3][CX3](=O)[NX3]',  # Amide linkage
        ],
        'prediction': 1,
    })
    
    # Rule 7
    rules.append({
        'number': 7,
        'description': 'Modifiers that are aliphatic carboxylic acids with terminal hydroxyl groups (-OH) at the ω-position tend to lead to high Fe/Hf values.',
        'patterns': [
            carboxylic_acid,
            '[OX2H][CX4H2][CX4H2][CX4H2][CX3](=O)[OX2H1]',  # Terminal hydroxyl group at ω-position
        ],
        'exclude_patterns': ['[a]'],  # Exclude aromatic rings
        'prediction': 1,
    })
    
    # Rule 8
    rules.append({
        'number': 8,
        'description': 'Modifiers with bulky or sterically hindered groups near the coordinating sites tend to lead to low Fe/Hf values.',
        'patterns': [
            carboxylic_acid,
            bulky_group,
        ],
        'prediction': -1,
    })
    
    # Rule 9
    rules.append({
        'number': 9,
        'description': 'Modifiers containing electron-withdrawing groups within conjugated systems tend to lead to high Fe/Hf values.',
        'patterns': [
            conjugated_electronegative,
        ],
        'prediction': 1,
    })
    
    # Rule 10
    rules.append({
        'number': 10,
        'description': 'Modifiers that are simple aliphatic carboxylic acids without additional coordinating functional groups tend to lead to low Fe/Hf values.',
        'patterns': [
            carboxylic_acid,
        ],
        'exclude_patterns': [
            '[#7,#8,#16]',  # Exclude N, O, S
            '[a]',  # Exclude aromatic rings
        ],
        'prediction': -1,
    })
    
    # Rule 11
    rules.append({
        'number': 11,
        'description': 'Modifiers with multiple adjacent hydroxyl groups tend to lead to low Fe/Hf values due to steric hindrance and intramolecular hydrogen bonding.',
        'patterns': [
            polyol,
        ],
        'prediction': -1,
    })
    
    # Rule 12
    rules.append({
        'number': 12,
        'description': 'Modifiers containing aldehyde or ketone groups adjacent to or within the carboxylic acid moiety tend to lead to low Fe/Hf values.',
        'patterns': [
            '[CX3H1](=O)[CX3](=O)[OX2H1]',  # Aldehyde adjacent to carboxylic acid
            '[CX3](=O)[CX3](=O)[OX2H1]',    # Ketone adjacent to carboxylic acid
        ],
        'prediction': -1,
    })
    
    # Rule 13
    rules.append({
        'number': 13,
        'description': 'Modifiers with electron-rich heterocycles directly attached to the carboxyl group without additional coordinating groups tend to lead to low Fe/Hf values.',
        'patterns': [
            '[n,o,s][C](=O)[OX2H1]',
        ],
        'exclude_patterns': [
            aliphatic_linker,  # Exclude flexible aliphatic linkers
        ],
        'prediction': -1,
    })
    
    # Rule 14
    rules.append({
        'number': 14,
        'description': 'Modifiers that are dicarboxylic acids without additional coordinating functional groups tend to lead to low Fe/Hf values.',
        'patterns': [
            dicarboxylic_acid,
        ],
        'exclude_patterns': [
            '[#7,#8,#16]',  # Exclude N, O, S
        ],
        'prediction': -1,
    })
    
    # Rule 15
    rules.append({
        'number': 15,
        'description': 'Modifiers with flexible aliphatic chains that position coordinating groups favorably tend to lead to high Fe/Hf values.',
        'patterns': [
            carboxylic_acid,
            '[#6][#6][#6][NX3;H2,H1]',  # Aliphatic chain positioning amino group
            ether_linkage,
        ],
        'prediction': 1,
    })
    
    # Compile SMARTS patterns
    for rule in rules:
        rule['compiled_patterns'] = [Chem.MolFromSmarts(p) for p in rule.get('patterns', [])]
        rule['compiled_exclude_patterns'] = [Chem.MolFromSmarts(p) for p in rule.get('exclude_patterns', [])]
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns
                for epat in rule['compiled_exclude_patterns']:
                    if mol.HasSubstructMatch(epat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Check required patterns
                for pat in rule['compiled_patterns']:
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df
