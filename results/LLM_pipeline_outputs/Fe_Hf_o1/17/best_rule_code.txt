def rule2matrix(smiles_list):
    from rdkit import Chem
    import pandas as pd

    # Define evaluation functions for each rule
    
    def evaluate_rule1(mol):
        # Rule 1: Aliphatic carboxylic acids with a terminal primary amino group (-NH2) at least four carbons away from the carboxyl group
        try:
            carboxylic_acid = Chem.MolFromSmarts('[CX3](=O)[OX2H1]')
            primary_amine = Chem.MolFromSmarts('[NX3;H2]')
            carboxyl_matches = mol.GetSubstructMatches(carboxylic_acid)
            amine_matches = mol.GetSubstructMatches(primary_amine)
            if not carboxyl_matches or not amine_matches:
                return 0
            # Check for matches where the amino group is at least four carbons away from the carboxyl group
            for c_match in carboxyl_matches:
                c_atom_idx = c_match[0]  # Carbon of carboxylic acid
                for a_match in amine_matches:
                    n_atom_idx = a_match[0]  # Nitrogen of primary amine
                    # Find shortest path
                    path = Chem.rdmolops.GetShortestPath(mol, c_atom_idx, n_atom_idx)
                    # Exclude endpoint atoms (carboxyl carbon and amino nitrogen)
                    intermediate_atoms = path[1:-1]
                    # Check that there are at least four carbons in the path
                    carbon_count = 0
                    non_carbon_in_path = False
                    for idx in intermediate_atoms:
                        atom = mol.GetAtomWithIdx(idx)
                        if atom.GetAtomicNum() == 6:
                            carbon_count +=1
                        else:
                            non_carbon_in_path = True
                            break
                    if non_carbon_in_path:
                        continue  # Path contains non-carbon atoms; skip
                    if carbon_count >=4:
                        return 1  # Rule matches
            return 0
        except:
            return 0

    def evaluate_rule2(mol):
        # Rule 2: Modifiers containing thiol (-SH) groups
        try:
            thiol = Chem.MolFromSmarts('[SX2H]')
            matches = mol.GetSubstructMatches(thiol)
            if matches:
                return 1
            else:
                return 0
        except:
            return 0

    def evaluate_rule3(mol):
        # Rule 3: Aromatic carboxylic acids with strong electron-withdrawing groups at the para position
        try:
            # Aromatic carboxylic acid
            aromatic_carboxylic_acid = Chem.MolFromSmarts('[c][C](=O)[O;H1]')
            if not mol.HasSubstructMatch(aromatic_carboxylic_acid):
                return 0
            # Electron-withdrawing groups: nitro or halomethyl
            nitro = Chem.MolFromSmarts('[c][N+](=O)[O-]')
            halomethyl = Chem.MolFromSmarts('[c][CH2][F,Cl,Br,I]')
            if mol.HasSubstructMatch(nitro) or mol.HasSubstructMatch(halomethyl):
                return 1
            else:
                return 0
        except:
            return 0

    def evaluate_rule4(mol):
        # Rule 4: Modifiers containing pyridine rings with accessible nitrogen atoms for coordination
        try:
            pyridine_ring = Chem.MolFromSmarts('n1ccccc1')
            carboxylic_acid = Chem.MolFromSmarts('[CX3](=O)[OX2H1]')
            if mol.HasSubstructMatch(pyridine_ring) and mol.HasSubstructMatch(carboxylic_acid):
                return 1
            else:
                return 0
        except:
            return 0

    def evaluate_rule5(mol):
        # Rule 5: Modifiers with flexible ether linkages terminating with coordinating groups
        try:
            ether_linkage = Chem.MolFromSmarts('[#6][OX2][#6]')
            amino_group = Chem.MolFromSmarts('[NX3;H2]')
            carboxylic_acid = Chem.MolFromSmarts('[CX3](=O)[OX2H1]')
            if mol.HasSubstructMatch(ether_linkage):
                if mol.HasSubstructMatch(amino_group) or mol.HasSubstructMatch(carboxylic_acid):
                    return 1
            return 0
        except:
            return 0

    def evaluate_rule6(mol):
        # Rule 6: Modifiers that are amino acids with side chains containing coordinating groups
        try:
            # Amino acid backbone
            amino_acid = Chem.MolFromSmarts('[NX3;H2][CX4H]([CX3](=O)[OX1H0-,OX2H1])')
            side_chain_groups = [
                Chem.MolFromSmarts('[CX3](=O)[OX2H1]'),  # Additional carboxyl (-COOH)
                Chem.MolFromSmarts('[NX3;H2,H1]'),       # Additional amino (-NH2)
                Chem.MolFromSmarts('[CX3](=O)[NX3]')     # Amide (-CONH2)
            ]
            if mol.HasSubstructMatch(amino_acid):
                for group in side_chain_groups:
                    if mol.HasSubstructMatch(group):
                        return 1
            return 0
        except:
            return 0

    def evaluate_rule7(mol):
        # Rule 7: Aromatic carboxylic acids with electron-donating groups at the para position
        try:
            aromatic_carboxylic_acid = Chem.MolFromSmarts('[c][C](=O)[O;H1]')
            aromatic_amino = Chem.MolFromSmarts('[c][NX3;H2]')
            aromatic_hydroxy = Chem.MolFromSmarts('[c][OX2H]')
            if mol.HasSubstructMatch(aromatic_carboxylic_acid):
                if mol.HasSubstructMatch(aromatic_amino) or mol.HasSubstructMatch(aromatic_hydroxy):
                    return -1
            return 0
        except:
            return 0

    # List of rule evaluation functions and their corresponding numbers
    rule_functions = [
        evaluate_rule1,  # Rule 1
        evaluate_rule2,  # Rule 2
        evaluate_rule3,  # Rule 3
        evaluate_rule4,  # Rule 4
        evaluate_rule5,  # Rule 5
        evaluate_rule6,  # Rule 6
        evaluate_rule7   # Rule 7
    ]
    rule_numbers = [1, 2, 3, 4, 5, 6, 7]

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append zeros
            row = [0]*len(rule_functions)
            results.append(row)
            continue
        row = []
        for func in rule_functions:
            try:
                value = func(mol)
                row.append(value)
            except:
                # In case of any error, append 0
                row.append(0)
        results.append(row)

    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {n}' for n in rule_numbers])
    return df
