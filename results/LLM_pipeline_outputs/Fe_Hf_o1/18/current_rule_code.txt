def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    
    # Primary amine group (-NH2)
    terminal_primary_amine = '[NX3;H2]'
    
    # Linear unbranched alkyl chain of variable length (3 to 6 carbons)
    linear_alkyl_chain = '[CH2;X2]{3,6}'
    
    # Rule 1 pattern: Terminal primary amine connected via linear alkyl chain to carboxylic acid
    rule1_pattern = terminal_primary_amine + '-' + linear_alkyl_chain + '-' + carboxylic_acid
    
    # Electron-withdrawing groups (EWGs)
    nitro_group = '[N+](=O)[O-]'
    bromomethyl_group = '[CH2Br]'
    sulfanyl_group = '[SH]'
    ewg_list = [nitro_group, bromomethyl_group, sulfanyl_group]
    
    # Aromatic carboxylic acid
    aromatic_carboxylic_acid = '[c][CX3](=O)[OX2H1]'
    
    # Rule 2 patterns: Aromatic carboxylic acid with EWG at para position
    # Due to complexity, we'll check for aromatic carboxylic acid and EWG on aromatic ring
    ewg_on_aromatic = ['[c]' + ewg for ewg in ewg_list]
    
    # Pyridine ring
    pyridine_ring = '[n][c]1[c][c][c][c][c]1'
    
    # Sulfhydryl (thiol) group
    thiol_group = '[SX2H]'
    
    # Ether linkage (-O-) in aliphatic chains
    ether_linkage = '[#6][OX2][#6]'
    
    # Hydroxyl group
    hydroxyl_group = '[OX2H]'
    
    # Multiple hydroxyl groups (polyols)
    polyol = hydroxyl_group
    
    # Carbonyl group adjacent to carboxyl group
    adjacent_carbonyl = '[CX3](=O)[CX3](=O)[#6]'
    
    # Fluorinated alkyl chains
    fluorinated_alkyl_chain = '[CX4]([F])([F])[F]'
    
    # Amino acids capable of forming chelate rings
    chelating_amino_acid = '[$([NX3;H2][CX4][CX3](=O)[OX2H1])]'  # Simplified pattern
    
    # Bulky aromatic side chains near donor atoms
    bulky_aromatic_side_chain = '[a][CH2][NX3;H2]'  # Simplified pattern
    
    # Electron-rich heterocycles without additional donor groups
    electron_rich_heterocycle = '[nH]1[n][c][c][c][c]1'  # Example: pyrazole ring
    
    # Ortho-hydroxyl groups on aromatic carboxylic acids
    ortho_hydroxyl_aromatic_carboxylic_acid = '[c]1[c][c][c](O)[c](C(=O)[O])[c]1'
    
    # Amide linkages adjacent to carboxyl groups
    amide_adjacent_to_carboxyl = '[CX3](=O)[NX3][CX3](=O)[OX2H1]'
    
    # Compile SMARTS patterns
    patterns = {
        'Rule 1': Chem.MolFromSmarts(rule1_pattern),
        'Rule 2': [Chem.MolFromSmarts(aromatic_carboxylic_acid)] + [Chem.MolFromSmarts(pat) for pat in ewg_on_aromatic],
        'Rule 3': Chem.MolFromSmarts(pyridine_ring),
        'Rule 4': Chem.MolFromSmarts(thiol_group),
        'Rule 5': [Chem.MolFromSmarts(ether_linkage), Chem.MolFromSmarts(carboxylic_acid)],
        'Rule 6': Chem.MolFromSmarts(carboxylic_acid),
        'Rule 7': [Chem.MolFromSmarts(aromatic_carboxylic_acid), Chem.MolFromSmarts('[c][NX3;H2,H1]')],
        'Rule 8': Chem.MolFromSmarts(polyol),
        'Rule 9': [Chem.MolFromSmarts(aromatic_carboxylic_acid), Chem.MolFromSmarts('[c][OX2H]'), Chem.MolFromSmarts('[c][OX2][CH3]')],
        'Rule 10': Chem.MolFromSmarts(amide_adjacent_to_carboxyl),
        # Add patterns for Rules 11 to 15 as needed
    }
    
    # Define the rules with their associated predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers with terminal primary amino groups in linear aliphatic carboxylic acids predict high Fe/Hf values.',
            'patterns': [patterns['Rule 1']],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers that are aromatic carboxylic acids with strong electron-withdrawing groups at the para position predict high Fe/Hf values.',
            'patterns': patterns['Rule 2'],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers containing pyridine rings predict high Fe/Hf values.',
            'patterns': [patterns['Rule 3']],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers with sulfhydryl (thiol) groups predict high Fe/Hf values.',
            'patterns': [patterns['Rule 4']],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers with ether linkages and terminal donor groups predict high Fe/Hf values.',
            'patterns': patterns['Rule 5'],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers that are simple aliphatic carboxylic acids without additional donor groups predict low Fe/Hf values.',
            'patterns': [patterns['Rule 6']],
            'exclude_patterns': [patterns['Rule 1'], patterns['Rule 4'], patterns['Rule 5']],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Modifiers that are aromatic carboxylic acids with electron-donating groups at the para position predict low Fe/Hf values.',
            'patterns': patterns['Rule 7'],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Modifiers with multiple hydroxyl groups (polyols) predict low Fe/Hf values.',
            'patterns': [patterns['Rule 8']],
            'count_threshold': {'[OX2H]': 2},
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers with carbonyl groups adjacent to carboxyl groups predict low Fe/Hf values.',
            'patterns': [Chem.MolFromSmarts(adjacent_carbonyl)],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers with fluorinated alkyl chains predict low Fe/Hf values.',
            'patterns': [Chem.MolFromSmarts(fluorinated_alkyl_chain)],
            'prediction': -1
        },
        # Add rules 11 to 15 as needed
    ]
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = False
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for pat in rule['exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    else:
                        match = True
                else:
                    match = True
                if match:
                    # Check required patterns
                    for pat in rule['patterns']:
                        if isinstance(pat, list):
                            # For patterns that are lists (Rule 2), require all to match
                            if not any(mol.HasSubstructMatch(p) for p in pat):
                                match = False
                                break
                        else:
                            if not mol.HasSubstructMatch(pat):
                                match = False
                                break
                if match:
                    if 'count_threshold' in rule:
                        threshold_met = True
                        for pat_smarts, threshold in rule['count_threshold'].items():
                            pat = Chem.MolFromSmarts(pat_smarts)
                            matches = mol.GetSubstructMatches(pat)
                            if len(matches) < threshold:
                                threshold_met = False
                                break
                        if threshold_met:
                            row.append(rule['prediction'])
                        else:
                            row.append(0)
                    else:
                        row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df
