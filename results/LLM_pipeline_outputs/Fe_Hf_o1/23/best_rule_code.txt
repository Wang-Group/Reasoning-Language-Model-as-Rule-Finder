def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups

    # Carboxylic acid group attached to an aromatic ring
    aromatic_carboxylic_acid = '[c][CX3](=O)[OX2H1]'
    carboxylate_anion_aromatic = '[c][CX3](=O)[O-]'

    # EWGs attached to aromatic ring
    nitro_on_aromatic = '[c][N+](=O)[O-]'
    halogen_on_aromatic = '[c][F,Cl,Br,I]'
    trifluoromethyl_on_aromatic = '[c][CX4](F)(F)F'
    # Pyridine ring (nitrogen heteroaromatic ring)
    pyridine_ring = 'n1ccccc1'

    EWGs_on_aromatic = [nitro_on_aromatic, halogen_on_aromatic, trifluoromethyl_on_aromatic, pyridine_ring]

    # EDGs attached to aromatic ring
    amino_on_aromatic = '[c][NX3;H2,H1]'
    hydroxy_on_aromatic = '[c][OX2H]'
    alkyl_on_aromatic = '[c][CH3]'
    methoxy_on_aromatic = '[c][OX2][CH3]'

    EDGs_on_aromatic = [amino_on_aromatic, hydroxy_on_aromatic, alkyl_on_aromatic, methoxy_on_aromatic]

    # Terminal amino group (-NH2) at the opposite end of carboxylic acid in an aliphatic chain
    terminal_amino_carboxylic_acid = '[NX3;H2][*][*][*][CX3](=O)[OX2H1]'

    # Sulfur-containing groups (thiol or thioether) and carboxylic acid group
    thiol = '[SX2H]'
    thioether = '[#16X2][#6]'
    sulfur_containing_group = [thiol, thioether]

    # Multiple hydroxyl groups in addition to carboxylic acid
    hydroxyl_group = '[OX2H]'

    # Perfluorinated aliphatic chains with terminal carboxylic acid
    perfluoroalkyl_chain = '[CX4](F)(F)(F)[CX4](F)(F)[CX3](=O)[OX2H1]'

    # Aromatic rings bearing hydroxyl groups and a carboxylic acid
    aromatic_hydroxy = '[c][OX2H]'

    # Electron-rich heterocycles like indole, imidazole, or pyrazole rings
    indole = 'c1cc2ccccc2[nH]1'
    imidazole = 'c1ncc[nH]1'
    pyrazole = 'c1cc[nH]n1'

    # Pyridine ring with available nitrogen
    pyridine_ring = 'n1ccccc1'

    # Alpha, beta-unsaturated carbonyl groups with carboxylic acid
    alpha_beta_unsaturated_carbonyl = '[CX3]=[CX3][CX3](=O)[OX2H1]'

    # Simple aliphatic carboxylic acids without additional coordinating functional groups
    aliphatic_carboxylic_acid = '[#6][CX3](=O)[OX2H1]'

    # Polyether chains ending with a polar group and carboxylic acid
    polyether_chain = '[#6][OX2][#6][OX2][#6][OX2][#6]'

    # Modifiers with multiple carboxylic acid groups
    multiple_carboxylic_acids = '[CX3](=O)[OX2H1]'

    # Aliphatic hydroxyl groups at terminal position opposite carboxylic acid
    terminal_aliphatic_hydroxyl = '[OX2H][*][*][*][CX3](=O)[OX2H1]'

    # Electron-donating groups adjacent to carboxyl group
    EDG_adjacent_carboxyl = '[CX3](=O)[OX2H1][NX3;H2,H1]'

    # Ketone groups conjugated to aromatic systems and carboxylic acid
    conjugated_ketone_aromatic = '[c][CX3](=O)[c]'

    # Define rules

    # Compile SMARTS patterns
    rules = []

    # Rule 1: Modifiers with aromatic carboxylic acids with EWGs predict high Fe/Hf
    rules.append({
        'number': 1,
        'description': 'Modifiers with aromatic carboxylic acids with EWGs predict high Fe/Hf value',
        'patterns': [
            [aromatic_carboxylic_acid, carboxylate_anion_aromatic],  # Aromatic carboxylic acid
            EWGs_on_aromatic  # EWG attached to aromatic ring
        ],
        'prediction': 1
    })

    # Rule 2: Modifiers with aromatic carboxylic acids with EDGs predict low Fe/Hf
    rules.append({
        'number': 2,
        'description': 'Modifiers with aromatic carboxylic acids with EDGs predict low Fe/Hf value',
        'patterns': [
            [aromatic_carboxylic_acid, carboxylate_anion_aromatic],  # Aromatic carboxylic acid
            EDGs_on_aromatic  # EDG attached to aromatic ring
        ],
        'prediction': -1
    })

    # Rule 3: Modifiers with terminal amino groups predict high Fe/Hf
    rules.append({
        'number': 3,
        'description': 'Modifiers with terminal amino groups predict high Fe/Hf value',
        'patterns': [
            [terminal_amino_carboxylic_acid]  # Terminal amino opposite carboxylic acid
        ],
        'prediction': 1
    })

    # Rule 4: Modifiers with sulfur-containing groups predict high Fe/Hf
    rules.append({
        'number': 4,
        'description': 'Modifiers with sulfur-containing groups predict high Fe/Hf value',
        'patterns': [
            sulfur_containing_group,  # Thiol or thioether
            ['[CX3](=O)[OX2H1]']  # Carboxylic acid
        ],
        'prediction': 1
    })

    # Rule 5: Modifiers with multiple hydroxyl groups predict low Fe/Hf
    rules.append({
        'number': 5,
        'description': 'Modifiers with multiple hydroxyl groups predict low Fe/Hf value',
        'patterns': [
            ['[CX3](=O)[OX2H1]'],  # Carboxylic acid
        ],
        'count_patterns': {
            hydroxyl_group: 2  # At least two hydroxyl groups
        },
        'prediction': -1
    })

    # Rule 6: Modifiers with fluorinated aliphatic chains predict low Fe/Hf
    rules.append({
        'number': 6,
        'description': 'Modifiers with fluorinated aliphatic chains predict low Fe/Hf',
        'patterns': [
            ['[CX3](=O)[OX2H1]'],  # Carboxylic acid
            ['[CX4](F)(F)(F)']  # Trifluoromethyl group
        ],
        'prediction': -1
    })

    # Rule 7: Modifiers with aromatic hydroxyl groups predict low Fe/Hf
    rules.append({
        'number': 7,
        'description': 'Modifiers with aromatic hydroxyl groups predict low Fe/Hf',
        'patterns': [
            ['[CX3](=O)[OX2H1]'],  # Carboxylic acid
            [aromatic_hydroxy]  # Aromatic hydroxyl group
        ],
        'prediction': -1
    })

    # Rule 8: Modifiers with electron-rich heterocycles predict low Fe/Hf
    rules.append({
        'number': 8,
        'description': 'Modifiers with electron-rich heterocycles predict low Fe/Hf',
        'patterns': [
            ['[CX3](=O)[OX2H1]'],  # Carboxylic acid
            [indole, imidazole, pyrazole]  # Electron-rich heterocycles
        ],
        'prediction': -1
    })

    # Rule 9: Modifiers with pyridine rings predict Fe/Hf based on position of nitrogen
    rules.append({
        'number': 9,
        'description': 'Modifiers with pyridine rings predict high Fe/Hf',
        'patterns': [
            ['[CX3](=O)[OX2H1]'],  # Carboxylic acid
            [pyridine_ring]  # Pyridine ring
        ],
        'prediction': 1
    })

    # Rule 10: Modifiers with alpha, beta-unsaturated carbonyl groups predict high Fe/Hf
    rules.append({
        'number': 10,
        'description': 'Modifiers with alpha, beta-unsaturated carbonyl groups predict high Fe/Hf',
        'patterns': [
            ['[CX3](=O)[OX2H1]'],  # Carboxylic acid
            [alpha_beta_unsaturated_carbonyl]  # Alpha, beta-unsaturated carbonyl
        ],
        'prediction': 1
    })

    # Rule 11: Modifiers with simple aliphatic carboxylic acids predict low Fe/Hf
    # Exclude functional groups that may interact
    rules.append({
        'number': 11,
        'description': 'Modifiers with simple aliphatic carboxylic acids predict low Fe/Hf',
        'patterns': [
            [aliphatic_carboxylic_acid],  # Aliphatic carboxylic acid
        ],
        'exclude_patterns': [
            sulfur_containing_group,  # Exclude sulfur-containing groups
            [hydroxyl_group],  # Exclude hydroxyl groups
            ['[NX3;H2,H1]']  # Exclude amino groups
        ],
        'prediction': -1
    })

    # Rule 12: Modifiers with ether chains and terminal polar groups predict high Fe/Hf
    rules.append({
        'number': 12,
        'description': 'Modifiers with ether chains and terminal polar groups predict high Fe/Hf',
        'patterns': [
            ['[CX3](=O)[OX2H1]'],  # Carboxylic acid
            [polyether_chain],  # Polyether chain
            ['[NX3;H2,H1]', '[OX2][CH3]']  # Terminal amino or methoxy
        ],
        'prediction': 1
    })

    # Rule 13: Modifiers with multiple carboxylic acid groups predict low Fe/Hf
    rules.append({
        'number': 13,
        'description': 'Modifiers with multiple carboxylic acid groups predict low Fe/Hf',
        'patterns': [
            [multiple_carboxylic_acids],  # Carboxylic acid
        ],
        'count_patterns': {
            multiple_carboxylic_acids: 2  # At least two carboxylic acids
        },
        'prediction': -1
    })

    # Rule 14: Modifiers with aliphatic hydroxyl groups predict Fe/Hf based on position
    # If hydroxyl group is at terminal position opposite carboxylic acid, predict high Fe/Hf
    rules.append({
        'number': 14,
        'description': 'Modifiers with terminal aliphatic hydroxyl predict high Fe/Hf',
        'patterns': [
            [terminal_aliphatic_hydroxyl],  # Terminal hydroxyl opposite carboxylic acid
        ],
        'prediction': 1
    })

    # Rule 15: Modifiers with electron-donating groups adjacent to carboxyl predict low Fe/Hf
    rules.append({
        'number': 15,
        'description': 'Modifiers with EDGs adjacent to carboxyl group predict low Fe/Hf',
        'patterns': [
            [EDG_adjacent_carboxyl],  # EDG adjacent to carboxyl group
        ],
        'prediction': -1
    })

    # Compile patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(p) for p in group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns

        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for group in rule['exclude_patterns']:
                compiled_group = [Chem.MolFromSmarts(p) for p in group]
                compiled_excludes.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_excludes

        # Compile count_patterns if any
        if 'count_patterns' in rule:
            compiled_count_patterns = {}
            for p, threshold in rule['count_patterns'].items():
                compiled_pat = Chem.MolFromSmarts(p)
                compiled_count_patterns[compiled_pat] = threshold
            rule['compiled_count_patterns'] = compiled_count_patterns

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        if mol.HasSubstructMatch(pat):
                            group_match = True
                            break
                    if not group_match:
                        match = False
                        break
                # Check count patterns if any
                if match and 'compiled_count_patterns' in rule:
                    for pat, threshold in rule['compiled_count_patterns'].items():
                        matches = mol.GetSubstructMatches(pat)
                        if len(matches) < threshold:
                            match = False
                            break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df
