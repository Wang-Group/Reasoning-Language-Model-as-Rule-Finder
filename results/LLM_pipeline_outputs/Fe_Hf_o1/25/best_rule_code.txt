def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    
    # Primary amine group (-NH2) at terminal position
    terminal_primary_amine = '[NX3H2][CH2]'
    
    # Linear aliphatic chain (no rings, no branching)
    aliphatic_chain = '[CX4H2][CX4H2]'
    
    # Pyridine ring
    pyridine_ring = 'n1ccccc1'
    
    # Thiol group (-SH)
    thiol_group = '[SX2H]'
    
    # Ether linkage in aliphatic chains (-O-)
    ether_linkage = '[#6][OX2][#6]'
    
    # Aromatic ring with electron-withdrawing group (EWG) at para position
    para_ewg_benzene = 'c1cc([NX3+](=O)[O-])ccc1'  # Nitro group example
    para_bromomethyl_benzene = 'c1cc(ccc1)CBr'
    
    # Aromatic amino acids with hydrophobic side chains
    aromatic_amino_acid = '[NX3;H2][CX4](C(=O)[OX2H1])[c]'
    
    # Terminal hydroxy group (-OH) at end of aliphatic chain
    terminal_hydroxy = '[OX2H][CH2]'
    
    # Alpha-amino acids with side-chain carboxyl groups (dicarboxylic amino acids)
    short_side_chain_dicarboxylic = '[NX3;H2][CX4H]([CX3](=O)[OX2H1])[CX3](=O)[OX2H1]'
    long_side_chain_dicarboxylic = '[NX3;H2][CX4H]([CX4][CX3](=O)[OX2H1])[CX3](=O)[OX2H1]'
    
    # Electron-donating groups (EDGs) on aromatic ring
    para_edg_benzene = 'c1ccc([NX3H2,OX2H,CH3])cc1'  # Amino, hydroxy, methyl groups
    
    # Polyol (multiple hydroxyl groups)
    polyol = '[OX2H]'  # Will count occurrences
    
    # Hydroxyphenyl groups attached via aliphatic chains
    hydroxyphenyl_aliphatic = '[#6]-[c][OX2H]'
    
    # Fluorinated alkyl chains
    fluorinated_alkyl_chain = '[CX4](F)(F)F'  # Trifluoromethyl group as example
    
    # Aldehyde or ketone adjacent to carboxylic acid
    aldehyde_adjacent_carboxy = '[CX3](=O)[CX3](=O)[OX2H1]'
    
    # Aromatic heterocycles with carboxylic acid directly attached
    aromatic_heterocycle_carboxy = '[n,o,s]1cccc1C(=O)[OX2H1]'
    
    # Long-chain aliphatic carboxylic acids without additional functional groups
    long_chain_carboxylic_acid = '[CX4H2][CX4H2][CX4H2][CX4H2][CX3](=O)[OX2H1]'
    
    # Compile SMARTS patterns
    patterns = {
        'Rule 1': {
            'patterns': [carboxylic_acid, terminal_primary_amine],
            'exclude_patterns': ['[!#6]', '[R]'],  # Exclude non-carbon atoms, rings
            'prediction': 1
        },
        'Rule 2': {
            'patterns': [carboxylic_acid, para_ewg_benzene],
            'prediction': 1
        },
        'Rule 3': {
            'patterns': [carboxylic_acid, pyridine_ring],
            'prediction': 1
        },
        'Rule 4': {
            'patterns': [carboxylic_acid, thiol_group],
            'prediction': 1
        },
        'Rule 5': {
            'patterns': [carboxylic_acid, ether_linkage],
            'prediction': 1
        },
        'Rule 6': {
            'patterns': [aromatic_amino_acid],
            'prediction': 1
        },
        'Rule 7': {
            'patterns': [carboxylic_acid, terminal_hydroxy],
            'prediction': 1
        },
        'Rule 8a': {
            'patterns': [short_side_chain_dicarboxylic],
            'prediction': 1
        },
        'Rule 8b': {
            'patterns': [long_side_chain_dicarboxylic],
            'prediction': -1
        },
        'Rule 9': {
            'patterns': [carboxylic_acid, para_edg_benzene],
            'prediction': -1
        },
        'Rule 10': {
            'patterns': [carboxylic_acid],
            'count_pattern': polyol,
            'count_threshold': 2,
            'prediction': -1
        },
        'Rule 11': {
            'patterns': [carboxylic_acid, hydroxyphenyl_aliphatic],
            'prediction': -1
        },
        'Rule 12': {
            'patterns': [carboxylic_acid, fluorinated_alkyl_chain],
            'prediction': -1
        },
        'Rule 13': {
            'patterns': [carboxylic_acid, aldehyde_adjacent_carboxy],
            'prediction': -1
        },
        'Rule 14': {
            'patterns': [aromatic_heterocycle_carboxy],
            'prediction': -1
        },
        'Rule 15': {
            'patterns': [long_chain_carboxylic_acid],
            'prediction': -1
        }
    }
    
    # Compile patterns
    for rule in patterns:
        compiled_patterns = []
        for pat in patterns[rule].get('patterns', []):
            compiled_patterns.append(Chem.MolFromSmarts(pat))
        patterns[rule]['compiled_patterns'] = compiled_patterns
        
        # Compile exclude patterns if any
        if 'exclude_patterns' in patterns[rule]:
            compiled_exclude_patterns = []
            for pat in patterns[rule]['exclude_patterns']:
                compiled_exclude_patterns.append(Chem.MolFromSmarts(pat))
            patterns[rule]['compiled_exclude_patterns'] = compiled_exclude_patterns
        
        # Compile count patterns if any
        if 'count_pattern' in patterns[rule]:
            patterns[rule]['compiled_count_pattern'] = Chem.MolFromSmarts(patterns[rule]['count_pattern'])
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(patterns))
            continue
        row = []
        for rule_key in patterns:
            rule = patterns[rule_key]
            try:
                match = True
                
                # Check exclude patterns if any
                if 'compiled_exclude_patterns' in rule:
                    for excl_pat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(excl_pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                
                # Check required patterns
                for pat in rule['compiled_patterns']:
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                
                # Check count patterns if any
                if 'compiled_count_pattern' in rule:
                    count = len(mol.GetSubstructMatches(rule['compiled_count_pattern']))
                    if count < rule['count_threshold']:
                        match = False
                        row.append(0)
                        continue
                
                # If all patterns match
                row.append(rule['prediction'])
            except Exception as e:
                # In case of any error, append 0
                # print(f"Error processing rule {rule_key} for SMILES {smi}: {e}")
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=list(patterns.keys()))
    return df
