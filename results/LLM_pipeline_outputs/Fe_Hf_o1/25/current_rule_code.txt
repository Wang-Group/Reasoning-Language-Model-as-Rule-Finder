def rule2matrix(smiles_list):
    # Define the rules with their associated patterns and predictions
    # Each rule is a dictionary containing 'number', 'description', 'patterns', and 'prediction'
    rules = [
        {
            'number': 1,
            'description': 'Modifiers with Terminal Amino Groups on Aliphatic Chains (ω-Amino Acids)',
            'patterns': [
                '[NX3;H2][CH2][CH2][CH2][CH2][CX3](=O)[OX1H1]',  # Terminal amino group and carboxylic acid
                '[NX3;H2][CH2][CH2][CH2][CX3](=O)[OX1H1]',         # Near-terminal amino group
            ],
            'exclude_patterns': [
                '[R]'  # Exclude rings
            ],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers Containing Sulfur-Containing Functional Groups (Thiol or Thioether Groups)',
            'patterns': [
                '[SX2H]',  # Thiol group
                '[#16X2][#6]',  # Thioether group
                '[CX3](=O)[OX1H1]',  # Carboxylic acid group
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers with Strong Electron-Withdrawing Groups (EWGs) on Aromatic Rings',
            'patterns': [
                '[c][CX3](=O)[OX1H1]',  # Aromatic carboxylic acid
                '[c;$([c]1[c][c][c][c][c]1)][NX3+](=O)[O-]',  # Nitro group on aromatic ring
                '[c][CH2][F,Cl,Br,I]',  # Halomethyl group on aromatic ring
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers with Additional Coordinating Groups Attached via Flexible Aliphatic Linkers',
            'patterns': [
                '[c][CH2][CH2][CH2][CX3](=O)[OX1H1]',  # Aromatic ring connected via aliphatic linker to carboxylic acid
                '[n][CH2][CH2][CH2][CX3](=O)[OX1H1]',  # Pyridine ring connected via aliphatic linker
                '[c][CH2][CH2][CX3](=O)[OX1H1]',       # Shorter linker
            ],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers with Polyether Chains Containing Donor Atoms',
            'patterns': [
                '([#6][OX2]){2,}[#6][CX3](=O)[OX1H1]',  # Polyether chain ending with carboxylic acid
                '[OX2][CX2][OX2][CX2][OX2][CX2][OX2][CX3](=O)[OX1H1]',  # Explicit ether chain
            ],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers with Hydroxyl Groups Distant from the Carboxylate Group on Aliphatic Chains',
            'patterns': [
                '[OX2H][CH2][CH2][CH2][CH2][CX3](=O)[OX1H1]',  # Hydroxyl group distant from carboxylic acid
            ],
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'Modifiers with Multiple Carboxylate Groups and Short Aliphatic Chains (Dicarboxylic Acids with Short Chains)',
            'patterns': [
                '[CX3](=O)[OX1H1][CH2][CH2][CX3](=O)[OX1H1]',  # Dicarboxylic acid with short chain
                '[CX3](=O)[OX1H1][CH2][CX3](=O)[OX1H1]',        # Even shorter chain
            ],
            'prediction': 1
        },
        {
            'number': 8,
            'description': 'Modifiers Without Additional Strong Coordinating Groups (Simple Carboxylic Acids)',
            'patterns': [
                '[CX3](=O)[OX1H1]',  # Carboxylic acid group
            ],
            'exclude_patterns': [
                '[NX3]',    # Exclude amine groups
                '[SX2]',    # Exclude sulfur-containing groups
                '[OX2H]',   # Exclude additional hydroxyl groups
                '[c]',      # Exclude aromatic rings
            ],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers with Electron-Donating Groups (EDGs) on Aromatic Rings Without Additional Coordinating Atoms',
            'patterns': [
                '[c][CX3](=O)[OX1H1]',     # Aromatic carboxylic acid
                '[c][OX2H]',               # Hydroxyl group on aromatic ring
                '[c][NX3;H2]',             # Amino group on aromatic ring
            ],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers with Multiple Hydroxyl Groups Near the Carboxylate (Polyols)',
            'patterns': [
                '[CX3](=O)[OX1H1][CH](O)[CH](O)[CH](O)',  # Multiple hydroxyl groups near carboxylate
            ],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Modifiers with Rigid Heteroaromatic Rings Directly Attached to Carboxylate Groups',
            'patterns': [
                '[n][c][c][CX3](=O)[OX1H1]',  # Heteroaromatic ring attached to carboxylate
                '[n][c][CX3](=O)[OX1H1]',
            ],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'Modifiers with Electron-Rich Aromatic Rings (e.g., Indole Rings) Attached to Amino Acids',
            'patterns': [
                '[n][c]1[c][c][c][c]1[CH2][CH](NH2)[CX3](=O)[OX1H1]',  # Indole ring attached to amino acid
            ],
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Modifiers with Heavily Fluorinated Aliphatic Chains',
            'patterns': [
                '[CX4]([F,Cl,Br,I])([F,Cl,Br,I])([F,Cl,Br,I])[CX3](=O)[OX1H1]',  # Trifluoromethyl group adjacent to carboxylic acid
            ],
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'Modifiers with Carbonyl Groups Adjacent to the Carboxylate Group (α-Keto Acids)',
            'patterns': [
                '[CX3](=O)[CX3](=O)[OX1H1]',  # α-Keto acid
            ],
            'prediction': -1
        },
        {
            'number': 15,
            'description': 'Modifiers with Trifluoroacetyl Groups',
            'patterns': [
                '[CX3](=O)[CX4]([F,Cl,Br,I])([F,Cl,Br,I])[F,Cl,Br,I]',  # Trifluoroacetyl group
            ],
            'prediction': -1
        },
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for smarts in rule.get('patterns', []):
            try:
                pat = Chem.MolFromSmarts(smarts)
                compiled_patterns.append(pat)
            except Exception:
                compiled_patterns.append(None)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for smarts in rule['exclude_patterns']:
                try:
                    pat = Chem.MolFromSmarts(smarts)
                    compiled_excludes.append(pat)
                except Exception:
                    compiled_excludes.append(None)
            rule['compiled_exclude_patterns'] = compiled_excludes
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'compiled_exclude_patterns' in rule:
                    for pat in rule['compiled_exclude_patterns']:
                        if pat is not None and mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for pat in rule['compiled_patterns']:
                    if pat is not None:
                        if not mol.HasSubstructMatch(pat):
                            match = False
                            break
                    else:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df
