def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and structural features
    # Corrected and improved patterns based on the suggestions

    # Common patterns

    # Carboxylic acid group (-COOH) including both neutral and anionic forms
    carboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1]'
    carboxylic_acid_patterns = [carboxylic_acid]

    # Primary amino group (-NH2)
    primary_amino_group = '[NX3;H2]'

    # Ether linkage (-O-)
    ether_linkage = '[OX2H][CX4]'

    # Thiol group (-SH)
    thiol_group = '[SX2H]'

    # Thioether group (-S-)
    # As per suggestion 3
    thioether_group = '[SX2][#6]'

    # Aromatic ring
    aromatic_ring = 'c1ccccc1'  # Benzene ring

    # Halogen
    halogen = '[F,Cl,Br,I]'

    # Nitro group
    nitro_group = '[NX3](=O)[O-]'

    # Pyridine ring
    pyridine_ring = 'n1ccccc1'  # Pyridine ring

    # Hydroxyl group (-OH)
    hydroxyl_group = '[OX2H]'

    # Hydroxyl group attached to carbon
    hydroxyl_on_carbon = '[CX4][OX2H]'

    # Define rules and their SMARTS patterns

    rules = []

    # Rule 1: Modifiers that are aliphatic carboxylic acids with a terminal primary amino group (-NH2) on the end of an alkyl chain (ω-amino acids)
    rule1_pattern = '[NX3;H2][CH2]{2,}[CH2][CX3](=O)[OX1H0-,OX2H1]'
    rules.append({
        'number': 1,
        'description': 'Aliphatic carboxylic acids with a terminal primary amino group (-NH2) on the end of an alkyl chain (ω-amino acids)',
        'patterns': [rule1_pattern],
        'prediction': 1
    })

    # Rule 2: Aromatic carboxylic acids with para-substituted strong electron-withdrawing group capable of enhancing metal coordination, such as nitro (-NO2), halomethyl (-CH2X), or pyridyl rings
    # Need to ensure that the substituent is in the para position relative to the carboxylic acid group
    rule2_patterns = [
        # Para-nitrobenzoic acid
        '[OX2H][c]1ccc([NX3](=O)[O-])cc1',
        '[OX2H][c]1ccc([NX3](=O)[OX1])cc1',
        # Para-halomethylbenzoic acid
        '[OX2H][c]1ccc(C[Cl,Br,I,F])cc1',
        # Para-pyridyl substituted benzoic acid
        '[OX2H][c]1ccc(c2ncccc2)cc1',
        # Include 1,3-dioxo-2-benzofuran-5-carboxylic acid
        '[OX2H][c]1ccc2c(=O)oc(=O)c2c1'
    ]
    rules.append({
        'number': 2,
        'description': 'Aromatic carboxylic acids with para-substituted strong electron-withdrawing groups',
        'patterns': rule2_patterns,
        'prediction': 1
    })

    # Rule 3: Modifiers containing sulfur-functional groups (thiols (-SH) or thioethers (-S-)), along with a carboxylic acid group
    rules.append({
        'number': 3,
        'description': 'Modifiers containing sulfur-functional groups (thiols or thioethers) along with a carboxylic acid group',
        'sulfur_patterns': [thiol_group, thioether_group],
        'carboxylic_acid_patterns': carboxylic_acid_patterns,
        'prediction': 1
    })

    # Rule 4: Modifiers that are aliphatic carboxylic acids with polyether chains containing multiple ether linkages (-O-) and terminal amino groups (-NH2)
    # Let's assume polyether chain is at least two ether linkages
    rule4_pattern = '[NX3;H2][CX4]([OX2][CX4]){2,}[CX3](=O)[OX1H0-,OX2H1]'
    rules.append({
        'number': 4,
        'description': 'Aliphatic carboxylic acids with polyether chains containing multiple ether linkages (-O-) and terminal amino groups (-NH2)',
        'patterns': [rule4_pattern],
        'prediction': 1
    })

    # Rule 5: Modifiers that are amino acids with side chains capable of metal coordination
    # Amino acid backbone
    amino_acid_backbone = '[NX3H2][CX4H]([*])[CX3](=O)[OX1H0-,OX2H1]'
    # Side chain patterns
    side_chain_patterns = [
        '[CX3](=O)[OX1H0-,OX2H1]',  # Carboxylic acid side chain
        'c',  # Aromatic ring side chain
        thiol_group,  # Thiol side chain
        '[NX3;H2]',  # Amino group side chain
    ]
    rules.append({
        'number': 5,
        'description': 'Modifiers that are amino acids with side chains capable of metal coordination',
        'backbone_pattern': amino_acid_backbone,
        'side_chain_patterns': side_chain_patterns,
        'prediction': 1
    })

    # Rule 6: Modifiers that are aromatic carboxylic acids with para-substituted electron-donating groups
    # Such as hydroxyl (-OH), amino (-NH2), alkyl (-CH3), or formyl (-CHO) groups
    rule6_patterns = [
        # Para-hydroxybenzoic acid
        '[OX2H][c]1ccc([OX2H])cc1',
        # Para-aminobenzoic acid
        '[OX2H][c]1ccc([NX3;H2])cc1',
        # Para-methylbenzoic acid
        '[OX2H][c]1ccc(C)cc1',
        # Para-formylbenzoic acid
        '[OX2H][c]1ccc(C=O)cc1'
    ]
    rules.append({
        'number': 6,
        'description': 'Aromatic carboxylic acids with para-substituted electron-donating groups',
        'patterns': rule6_patterns,
        'prediction': -1
    })

    # Rule 7: Modifiers that are aliphatic carboxylic acids without additional coordinating functional groups or with groups that do not enhance metal coordination
    # Exclude patterns are primary amino group, thiol, thioether, ether linkage, aromatic ring, and substituents that enhance coordination
    exclude_patterns_rule7 = [
        primary_amino_group,
        thiol_group,
        thioether_group,
        ether_linkage,
        'c'  # Any aromatic carbon
    ]
    rules.append({
        'number': 7,
        'description': 'Aliphatic carboxylic acids without additional coordinating functional groups',
        'patterns': carboxylic_acid_patterns,
        'exclude_patterns': exclude_patterns_rule7,
        'prediction': -1
    })

    # Rule 8: Modifiers containing multiple hydroxyl groups (-OH), such as polyols or sugar acids
    rules.append({
        'number': 8,
        'description': 'Modifiers containing multiple hydroxyl groups (-OH), such as polyols or sugar acids',
        'hydroxyl_pattern': hydroxyl_on_carbon,
        'hydroxyl_count_threshold': 2,  # At least two hydroxyl groups
        'prediction': -1
    })

    # Rule 9: Modifiers that are heteroaromatic carboxylic acids where the heteroatom is adjacent to the carboxyl group
    rule9_patterns = [
        # Nicotinic acid (pyridine-3-carboxylic acid)
        '[n][c]c(cc1)C(=O)[OX1H0-,OX2H1]',
        # Pyrazole-4-carboxylic acid
        '[n][n][c](cc1)C(=O)[OX1H0-,OX2H1]',
        # 2-oxo-1H-pyridine-4-carboxylic acid
        'O=C1NC=CC=C1C(=O)[OX1H0-,OX2H1]'
    ]
    rules.append({
        'number': 9,
        'description': 'Heteroaromatic carboxylic acids where the heteroatom is adjacent to the carboxyl group',
        'patterns': rule9_patterns,
        'prediction': -1
    })

    # Rule 10: Modifiers that are amino acids with bulky or sterically hindered side chains, such as tryptophan and glutamic acid
    # Bulky side chains
    # Tryptophan side chain (indole ring)
    bulky_side_chain_patterns = [
        # Indole ring
        'c1cc2c(c1)cccn2',  # Indole group
        # Side chain carboxylate (glutamic acid)
        '[CH2][CH2][CX3](=O)[OX1H0-,OX2H1]'
    ]
    rules.append({
        'number': 10,
        'description': 'Amino acids with bulky or sterically hindered side chains',
        'backbone_pattern': amino_acid_backbone,
        'side_chain_patterns': bulky_side_chain_patterns,
        'prediction': -1
    })

    # Compile patterns
    for rule in rules:
        if 'patterns' in rule:
            rule['compiled_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule['patterns']]
        if 'exclude_patterns' in rule:
            rule['compiled_exclude_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule['exclude_patterns']]
        if 'sulfur_patterns' in rule:
            rule['compiled_sulfur_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule['sulfur_patterns']]
        if 'carboxylic_acid_patterns' in rule:
            rule['compiled_carboxylic_acid_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule['carboxylic_acid_patterns']]
        if 'backbone_pattern' in rule:
            rule['compiled_backbone_pattern'] = Chem.MolFromSmarts(rule['backbone_pattern'])
        if 'side_chain_patterns' in rule:
            rule['compiled_side_chain_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule['side_chain_patterns']]
        if 'hydroxyl_pattern' in rule:
            rule['compiled_hydroxyl_pattern'] = Chem.MolFromSmarts(rule['hydroxyl_pattern'])

    # Process each SMILES string
    results = []
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = False
                # For rules with exclude patterns
                if 'exclude_patterns' in rule:
                    exclude = False
                    for ex_pat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(ex_pat):
                            exclude = True
                            break
                    if exclude:
                        row.append(0)
                        continue
                # Rule-specific matching
                if rule['number'] == 3:
                    # Need to match both sulfur group and carboxylic acid
                    sulfur_match = any(mol.HasSubstructMatch(pat) for pat in rule['compiled_sulfur_patterns'])
                    carboxylic_acid_match = any(mol.HasSubstructMatch(pat) for pat in rule['compiled_carboxylic_acid_patterns'])
                    if sulfur_match and carboxylic_acid_match:
                        match = True
                elif rule['number'] == 5 or rule['number'] ==10:
                    # Need to match amino acid backbone and appropriate side chain
                    backbone_match = mol.HasSubstructMatch(rule['compiled_backbone_pattern'])
                    if backbone_match:
                        side_chain_match = any(mol.HasSubstructMatch(pat) for pat in rule['compiled_side_chain_patterns'])
                        if side_chain_match:
                            match = True
                elif rule['number'] == 8:
                    # Need to check if molecule contains multiple hydroxyl groups attached to carbons
                    hydroxyl_matches = mol.GetSubstructMatches(rule['compiled_hydroxyl_pattern'])
                    if len(hydroxyl_matches) >= rule['hydroxyl_count_threshold']:
                        match = True
                else:
                    for pat in rule['compiled_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = True
                            break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df