
    Target Name: Fe/Hf
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: Modifiers containing a **terminal primary amine group** on an **aliphatic chain with three or more carbons** result in a **high Fe/Hf** value.  
  *This predicts high Fe/Hf for any structure with a terminal –NH₂ group on a carbon chain of three or more carbons.*

- **Rule 2**: Modifiers containing a **thiol group** (–SH) attached to an **aliphatic or aromatic ring** result in a **high Fe/Hf** value.  
  *This predicts high Fe/Hf for any structure containing a –SH group attached to a carbon chain or aromatic ring.*

- **Rule 3**: **Aromatic carboxylic acids** substituted with **strong electron-withdrawing groups** at the **para position** (e.g., nitro, bromomethyl) result in a **high Fe/Hf** value.  
  *This predicts high Fe/Hf for benzoic acid derivatives with strong electron-withdrawing groups at the 4-position.*

- **Rule 4**: Modifiers containing **phenolic hydroxyl groups** (–OH attached to an aromatic ring) result in a **low Fe/Hf** value.  
  *This predicts low Fe/Hf for any structure with a phenolic –OH group.*

- **Rule 5**: Modifiers with **multiple hydroxyl groups on an aliphatic chain** (polyols) result in a **low Fe/Hf** value.  
  *This predicts low Fe/Hf for structures containing several –OH groups on an aliphatic chain.*

- **Rule 6**: Modifiers containing **perfluoroalkyl chains** (fully fluorinated carbon chains) result in a **low Fe/Hf** value.  
  *This predicts low Fe/Hf for any structure with perfluorinated alkyl chains.*

- **Rule 7**: Modifiers with a **carboxylic acid directly attached to heteroaromatic rings** (e.g., pyridine, pyrazole) result in a **low Fe/Hf** value.  
  *This predicts low Fe/Hf for structures like pyridine-3-carboxylic acid or pyrazole-4-carboxylic acid.*

- **Rule 8**: Modifiers containing **aliphatic hydroxy acids** with a **terminal hydroxyl group** result in a **high Fe/Hf** value.  
  *This predicts high Fe/Hf for structures like 7-hydroxyheptanoic acid.*

- **Rule 9**: Modifiers with **aromatic aldehyde groups** (–CHO attached to an aromatic ring) result in a **low Fe/Hf** value.  
  *This predicts low Fe/Hf for compounds like 4-formylbenzoic acid.*

- **Rule 10**: Modifiers containing **ether linkages** and a **terminal primary amine group** result in a **high Fe/Hf** value.  
  *This predicts high Fe/Hf for structures with ether chains ending with an –NH₂ group.*

- **Rule 11**: Modifiers with an **acetamido group** and an **additional amino group** on an **aliphatic chain** result in a **high Fe/Hf** value.  
  *This predicts high Fe/Hf for structures similar to acetylated amino acids with an extra amino group.*

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11
0,0,0,0,0,0,0,1,0,0,0
0,0,0,0,0,0,0,1,0,0,0
0,0,0,0,0,0,-1,1,0,0,0
0,0,0,0,0,0,0,1,0,0,0
1,0,0,0,0,0,0,1,0,0,0
0,0,0,0,0,0,-1,1,0,0,0
0,0,0,0,0,0,0,1,0,0,0
0,0,0,0,0,0,0,1,0,0,0
0,0,0,-1,0,0,0,1,0,0,0
0,0,0,0,0,0,-1,1,0,0,0
0,0,0,0,-1,0,0,1,0,0,0
0,1,0,0,0,0,-1,1,0,0,0
0,0,0,0,0,0,0,1,0,0,0
0,0,0,0,0,0,-1,1,0,0,0
0,0,0,0,0,0,0,1,0,0,0
0,0,0,0,0,0,0,1,0,0,0
0,0,0,0,0,0,0,1,0,0,0
0,0,0,0,0,0,-1,1,0,0,0
0,0,0,0,0,0,-1,1,0,0,0
0,1,0,0,0,0,0,1,0,0,0
0,0,0,-1,0,0,-1,1,-1,0,0
0,0,0,0,0,0,-1,1,-1,0,0
0,0,1,0,0,0,-1,1,0,0,0
0,0,0,0,0,0,-1,1,0,0,0
0,0,0,0,0,0,-1,1,0,0,0
0,0,0,0,0,0,0,1,0,0,1
0,0,0,0,0,0,0,1,0,0,0
0,0,0,-1,0,0,0,1,0,0,0
0,0,0,0,0,0,0,1,0,0,0
0,0,0,0,0,0,0,1,0,0,0
0,0,0,0,0,0,0,1,0,0,0
0,0,0,-1,0,0,0,1,0,0,0
1,0,0,0,0,0,0,1,0,0,0
0,0,0,0,0,0,0,1,0,1,0
0,0,0,0,0,0,0,1,0,0,1
1,0,0,0,0,0,0,1,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.7428571428571429; Test Accuracy: 0.0
    Train Support: 0.06857142857142857; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 2.035947712418301; Test Lift: NONE
    Train Leverage: 0.03461224489795918; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for the rules
    
    # Rule 1: Terminal primary amine group on aliphatic chain with three or more carbons (predicts high Fe/Hf, output 1)
    rule1_patterns = [
        '[CH2][CH2][CH2][NX3;H2]',  # Chain of 3 carbons ending with NH2
        '[CH2][CH2][CH2][CH2][NX3;H2]',  # Chain of 4 carbons ending with NH2
        '[CH2][CH2][CH2][CH2][CH2][NX3;H2]',  # Chain of 5 carbons ending with NH2
        '[CH2][CH2][CH2][CH2][CH2][CH2][NX3;H2]',  # Chain of 6 carbons ending with NH2
        '[CH2][CH2][CH2][CH2][CH2][CH2][CH2][NX3;H2]',  # Chain of 7 carbons ending with NH2
    ]
    
    # Rule 2: Thiol group (-SH) attached to an aliphatic or aromatic ring (predicts high Fe/Hf, output 1)
    rule2_patterns = [
        '[SX2H][C,c]',  # Thiol group attached to carbon (aliphatic or aromatic)
    ]
    
    # Rule 3: Aromatic carboxylic acids with strong EWG at para position (e.g., nitro, bromomethyl) (predicts high Fe/Hf, output 1)
    rule3_patterns = [
        # Aromatic carboxylic acid
        '[c][CX3](=O)[OX2H1]',
        # Nitro group attached to aromatic ring
        '[c][NX3](=O)[OX1-]', '[c][NX3+](=O)[O-]',
        # Bromomethyl attached to aromatic ring
        '[c][CH2Br]'
    ]
    
    # Rule 4: Phenolic hydroxyl groups (-OH attached to an aromatic ring) (predicts low Fe/Hf, output -1)
    rule4_patterns = [
        '[c][OX2H]',  # Phenolic hydroxyl group
    ]
    
    # Rule 5: Multiple hydroxyl groups on an aliphatic chain (polyols) (predicts low Fe/Hf, output -1)
    rule5_pattern = '[OX2H][CX4][CX4][OX2H]'  # Two hydroxyl groups separated by two carbons
    
    # Rule 6: Perfluoroalkyl chains (fully fluorinated carbon chains) (predicts low Fe/Hf, output -1)
    rule6_pattern = '[CX4]([F])([F])([F])([F])'  # Carbon fully substituted with fluorines
    
    # Rule 7: Carboxylic acid directly attached to heteroaromatic rings (predicts low Fe/Hf, output -1)
    rule7_patterns = [
        '[a][CX3](=O)[OX2H1]',  # Carboxylic acid attached to aromatic atom (includes heteroatoms)
    ]
    
    # Rule 8: Aliphatic hydroxy acids with a terminal hydroxyl group (predicts high Fe/Hf, output 1)
    rule8_patterns = [
        '[CX3](=O)[OX2H1]',  # Carboxylic acid group
        '[#6][OX2H]',  # Terminal hydroxyl group
    ]
    
    # Rule 9: Aromatic aldehyde groups (-CHO attached to an aromatic ring) (predicts low Fe/Hf, output -1)
    rule9_patterns = [
        '[c][CX3H](=O)',  # Aromatic aldehyde group
    ]
    
    # Rule 10: Ether linkages and a terminal primary amine group (predicts high Fe/Hf, output 1)
    rule10_patterns = [
        '[#6][OX2][#6]',  # Ether linkage
        '[NX3;H2]',  # Terminal primary amine group
    ]
    
    # Rule 11: Acetamido group and an additional amino group on an aliphatic chain (predicts high Fe/Hf, output 1)
    rule11_patterns = [
        '[NX3][CX3](=O)[#6]',  # Acetamido group
        '[NX3;H2][C;!$(C=[O,N,S])]',  # Additional amino group on aliphatic chain
    ]
    
    # Compile SMARTS patterns
    rules = [
        {'number': 1, 'patterns': rule1_patterns, 'prediction': 1},
        {'number': 2, 'patterns': rule2_patterns, 'prediction': 1},
        {'number': 3, 'patterns': rule3_patterns, 'prediction': 1},
        {'number': 4, 'patterns': rule4_patterns, 'prediction': -1},
        {'number': 5, 'patterns': [rule5_pattern], 'prediction': -1},
        {'number': 6, 'patterns': [rule6_pattern], 'prediction': -1},
        {'number': 7, 'patterns': rule7_patterns, 'prediction': -1},
        {'number': 8, 'patterns': rule8_patterns, 'prediction': 1},
        {'number': 9, 'patterns': rule9_patterns, 'prediction': -1},
        {'number':10, 'patterns': rule10_patterns, 'prediction': 1},
        {'number':11, 'patterns': rule11_patterns, 'prediction': 1},
    ]
    
    # Compile the patterns
    for rule in rules:
        compiled_patterns = [Chem.MolFromSmarts(pat) for pat in rule['patterns']]
        rule['compiled_patterns'] = compiled_patterns
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # For certain rules, all patterns must be matched (logical AND)
                if rule['number'] in [8, 10, 11]:
                    # Rules where all patterns must be present
                    for pat in rule['compiled_patterns']:
                        if not mol.HasSubstructMatch(pat):
                            match = False
                            break
                    row.append(rule['prediction'] if match else 0)
                elif rule['number'] == 5:
                    # Rule 5 requires multiple hydroxyl groups on aliphatic chain
                    matches = mol.GetSubstructMatches(rule['compiled_patterns'][0])
                    row.append(rule['prediction'] if len(matches) > 0 else 0)
                elif rule['number'] == 6:
                    # Rule 6 requires perfluoroalkyl chains
                    matches = mol.GetSubstructMatches(rule['compiled_patterns'][0])
                    row.append(rule['prediction'] if len(matches) > 0 else 0)
                elif rule['number'] == 3:
                    # Rule 3 requires aromatic carboxylic acid and EWG
                    carboxy_pattern = rule['compiled_patterns'][0]
                    ewg_patterns = rule['compiled_patterns'][1:]
                    if mol.HasSubstructMatch(carboxy_pattern):
                        ewg_match = False
                        for ewg_pat in ewg_patterns:
                            if mol.HasSubstructMatch(ewg_pat):
                                ewg_match = True
                                break
                        match = ewg_match
                    else:
                        match = False
                    row.append(rule['prediction'] if match else 0)
                else:
                    # For other rules, if any pattern matches, the rule matches
                    pattern_match = False
                    for pat in rule['compiled_patterns']:
                        if mol.HasSubstructMatch(pat):
                            pattern_match = True
                            break
                    row.append(rule['prediction'] if pattern_match else 0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: Fe/Hf
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: Modifiers containing a **terminal primary amine group** on an **aliphatic chain of at least four carbons** result in a **high Fe/Hf** value.  
  *This predicts high Fe/Hf for any structure with an –NH₂ group at the end of an aliphatic chain of four or more carbons.*

- **Rule 2**: Modifiers containing a **thiol group** (–SH) result in a **high Fe/Hf** value.  
  *This predicts high Fe/Hf for any structure containing a thiol (–SH) group.*

- **Rule 3**: **Aromatic carboxylic acids** substituted with **strong electron-withdrawing groups** at the **para position** (e.g., nitro, bromomethyl) result in a **high Fe/Hf** value.  
  *This predicts high Fe/Hf for benzoic acid derivatives with strong electron-withdrawing groups at the 4-position.*

- **Rule 4**: Modifiers containing **phenolic hydroxyl groups** (–OH attached to an aromatic ring) result in a **low Fe/Hf** value.  
  *This predicts low Fe/Hf for any structure with a phenolic –OH group.*

- **Rule 5**: Modifiers with **multiple hydroxyl groups on an aliphatic chain** (polyols) result in a **low Fe/Hf** value.  
  *This predicts low Fe/Hf for structures containing several –OH groups on an aliphatic chain.*

- **Rule 6**: Modifiers containing **perfluoroalkyl chains** (fully fluorinated carbon chains) result in a **low Fe/Hf** value.  
  *This predicts low Fe/Hf for any structure with perfluorinated alkyl chains.*

- **Rule 7**: Modifiers with a **carboxylic acid directly attached to heteroaromatic rings** (e.g., pyridine, pyrazole) result in a **low Fe/Hf** value.  
  *This predicts low Fe/Hf for structures like pyridine-3-carboxylic acid or pyrazole-4-carboxylic acid.*

- **Rule 8**: Modifiers containing **aliphatic hydroxy acids** with a **terminal hydroxyl group** result in a **high Fe/Hf** value.  
  *This predicts high Fe/Hf for structures like 7-hydroxyheptanoic acid.*

- **Rule 9**: Modifiers with **aromatic aldehyde groups** (–CHO attached to an aromatic ring) result in a **low Fe/Hf** value.  
  *This predicts low Fe/Hf for compounds like 4-formylbenzoic acid.*

- **Rule 10**: Modifiers containing **ether linkages and a terminal primary amine group** result in a **high Fe/Hf** value.  
  *This predicts high Fe/Hf for structures with ether chains ending with an –NH₂ group.*

- **Rule 11**: Modifiers with an **acylated amino group** (e.g., acetamido) and an additional **amino group** on an **aliphatic chain** result in a **high Fe/Hf** value.  
  *This predicts high Fe/Hf for compounds like (2S)-6-acetamido-2-aminohexanoic acid.*

- **Rule 12**: Modifiers containing **long ether chains without multiple hydroxyl groups** result in a **high Fe/Hf** value.  
  *This predicts high Fe/Hf for structures with extended ether linkages and minimal hydroxyl substitution.*

- **Rule 13**: **Aromatic carboxylic acids** substituted with **electron-donating groups** at the **para position** (e.g., amino, methyl, hydroxy) result in a **low Fe/Hf** value.  
  *This predicts low Fe/Hf for benzoic acid derivatives with electron-donating groups at the 4-position.*

- **Rule 14**: Modifiers that are **long-chain saturated carboxylic acids** result in a **low Fe/Hf** value.  
  *This predicts low Fe/Hf for straight-chain fatty acids without functional groups.*

- **Rule 15**: Modifiers containing an **indole ring** result in a **low Fe/Hf** value.  
  *This predicts low Fe/Hf for structures with an indole functional group, such as tryptophan derivatives.*

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.7142857142857143; Test Accuracy: 1.0
    Train Support: 0.06190476190476191; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 1.9825708061002179; Test Lift: NONE
    Train Leverage: 0.030612244897959186; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups according to the rules
    
    # Rule 1: Terminal primary amine group on an aliphatic chain of at least four carbons
    # Updated pattern to capture aliphatic chains (including branched chains) of at least four sp3 carbons ending with NH2
    rule1_pattern = '([C;X4;!$(C=O)]){4,}[NX3;H2]'
    
    # Rule 2: Thiol group (-SH)
    rule2_pattern = '[SX2H]'
    
    # Rule 3: Aromatic carboxylic acids substituted with strong electron-withdrawing groups at the para position
    # Requires complex matching; we'll handle this with additional checks in the code
    aromatic_carboxylic_acid = Chem.MolFromSmarts('c1ccccc1C(=O)[O]')
    ewg_patterns = ['[N+](=O)[O-]', '[CX3](=O)[OX1]', '[F,Cl,Br,I]', '[C](#N)']  # Including cyano group
    ewg_mols = [Chem.MolFromSmarts(pat) for pat in ewg_patterns]
    
    # Rule 4: Phenolic hydroxyl groups (-OH attached to an aromatic ring)
    rule4_pattern = '[c][OX2H]'
    
    # Rule 5: Multiple hydroxyl groups on an aliphatic chain (polyols)
    # Updated pattern to match hydroxyl groups on any aliphatic carbon
    hydroxyl_group = '[OX2H][C;X4]'
    
    # Rule 6: Perfluoroalkyl chains (fully fluorinated carbon chains)
    # Updated pattern to capture perfluoroalkyl chains of two or more carbons
    perfluoroalkyl_chain = '[CX4](F)(F)(F)-[CX4](F)(F)[F]'
    
    # Rule 7: Carboxylic acid directly attached to heteroaromatic rings
    heteroaromatic_carboxylic_acid = ['[n][C](=O)[O,H]', '[nH][C](=O)[O,H]']
    
    # Rule 8: Aliphatic hydroxy acids with a terminal hydroxyl group
    # Pattern connects carboxylic acid and terminal hydroxyl group through aliphatic chain
    rule8_pattern = '[OX2H][CH2][CH2][CH2][CX3](=O)[OX2H1]'
    
    # Rule 9: Aromatic aldehyde groups (-CHO attached to an aromatic ring)
    rule9_pattern = '[c][CX3H]=O'
    
    # Rule 10: Ether linkages and a terminal primary amine group
    # Ensuring primary amine is terminal
    rule10_pattern = '([#6][OX2]){1,}-[CH2][NX3;H2]'
    
    # Rule 11: Acylated amino group and an additional amino group on an aliphatic chain
    acylated_amino = '[NX3][CX3](=O)[#6]'
    aliphatic_amino = '[NX3;H2][C;X4]'
    
    # Rule 12: Long ether chains without multiple hydroxyl groups
    long_ether_chain = '([#6][OX2]){3,}[#6]'
    exclude_hydroxyl = '[OX2H]'
    
    # Rule 13: Aromatic carboxylic acids with electron-donating groups at the para position
    # Similar to Rule 3, needs complex matching
    edg_patterns = ['[NX3;H2]', '[OX2H]', '[CH3]']  # Amino, hydroxyl, methyl groups
    edg_mols = [Chem.MolFromSmarts(pat) for pat in edg_patterns]
    
    # Rule 14: Long-chain saturated carboxylic acids
    # Added conditions to ensure the chain is saturated
    long_chain_carboxylic_acid = '[CH3][CH2]{4,}[CH2][C](=O)[O][H]'
    
    # Rule 15: Indole ring
    indole_pattern = 'c1ccc2c(c1)[nH]cc2'
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'High Fe/Hf Value: Modifiers containing a terminal primary amine group on an aliphatic chain of at least four carbons.',
            'patterns': [rule1_pattern],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'High Fe/Hf Value: Modifiers containing a thiol group (-SH).',
            'patterns': [rule2_pattern],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'High Fe/Hf Value: Aromatic carboxylic acids substituted with strong electron-withdrawing groups at the para position.',
            'patterns': ['c1ccc(cc1)C(=O)[O,H]'],  # Aromatic carboxylic acid
            'additional_checks': {'ewg_para': ewg_patterns},
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Low Fe/Hf Value: Modifiers containing phenolic hydroxyl groups (-OH attached to an aromatic ring).',
            'patterns': [rule4_pattern],
            'prediction': -1
        },
        {
            'number': 5,
            'description': 'Low Fe/Hf Value: Modifiers with multiple hydroxyl groups on an aliphatic chain (polyols).',
            'patterns': [hydroxyl_group],
            'count_threshold': {'[OX2H][C;X4]': 2},
            'prediction': -1
        },
        {
            'number': 6,
            'description': 'Low Fe/Hf Value: Modifiers containing perfluoroalkyl chains (fully fluorinated carbon chains).',
            'patterns': [perfluoroalkyl_chain],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Low Fe/Hf Value: Modifiers with carboxylic acid directly attached to heteroaromatic rings.',
            'patterns': heteroaromatic_carboxylic_acid,
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'High Fe/Hf Value: Modifiers containing aliphatic hydroxy acids with a terminal hydroxyl group.',
            'patterns': [rule8_pattern],
            'prediction': 1
        },
        {
            'number': 9,
            'description': 'Low Fe/Hf Value: Modifiers with aromatic aldehyde groups (-CHO attached to an aromatic ring).',
            'patterns': [rule9_pattern],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'High Fe/Hf Value: Modifiers containing ether linkages and a terminal primary amine group.',
            'patterns': [rule10_pattern],
            'prediction': 1
        },
        {
            'number': 11,
            'description': 'High Fe/Hf Value: Modifiers with an acylated amino group and an additional amino group on an aliphatic chain.',
            'patterns': [acylated_amino, aliphatic_amino],
            'prediction': 1
        },
        {
            'number': 12,
            'description': 'High Fe/Hf Value: Modifiers containing long ether chains without multiple hydroxyl groups.',
            'patterns': [long_ether_chain],
            'exclude_patterns': [exclude_hydroxyl],
            'prediction': 1
        },
        {
            'number': 13,
            'description': 'Low Fe/Hf Value: Aromatic carboxylic acids with electron-donating groups at the para position.',
            'patterns': ['c1ccc(cc1)C(=O)[O,H]'],  # Aromatic carboxylic acid
            'additional_checks': {'edg_para': edg_patterns},
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'Low Fe/Hf Value: Modifiers that are long-chain saturated carboxylic acids.',
            'patterns': [long_chain_carboxylic_acid],
            'prediction': -1
        },
        {
            'number': 15,
            'description': 'Low Fe/Hf Value: Modifiers containing an indole ring.',
            'patterns': [indole_pattern],
            'prediction': -1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = [Chem.MolFromSmarts(pat) for pat in rule.get('patterns', [])]
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = [Chem.MolFromSmarts(pat) for pat in rule['exclude_patterns']]
            rule['compiled_exclude_patterns'] = compiled_excludes
        # Compile additional checks if any
        if 'additional_checks' in rule:
            compiled_additional_checks = {}
            for key, patterns in rule['additional_checks'].items():
                compiled_additional_checks[key] = [Chem.MolFromSmarts(p) for p in patterns]
            rule['compiled_additional_checks'] = compiled_additional_checks
        # Compile count thresholds if any
        if 'count_threshold' in rule:
            compiled_count_threshold = {}
            for smarts, count in rule['count_threshold'].items():
                compiled_count_threshold[Chem.MolFromSmarts(smarts)] = count
            rule['compiled_count_threshold'] = compiled_count_threshold
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for pat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for pat in rule['compiled_patterns']:
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Check count thresholds if any
                if 'compiled_count_threshold' in rule:
                    for pat, threshold in rule['compiled_count_threshold'].items():
                        matches = mol.GetSubstructMatches(pat)
                        if len(matches) < threshold:
                            match = False
                            break
                if not match:
                    row.append(0)
                    continue
                # Check additional checks (e.g., for para substitution)
                if 'compiled_additional_checks' in rule:
                    for check_key, patterns in rule['compiled_additional_checks'].items():
                        if check_key == 'ewg_para' or check_key == 'edg_para':
                            # Find aromatic carboxylic acid rings
                            ac_patterns = [Chem.MolFromSmarts('c1ccccc1C(=O)[O,H]')]
                            ac_matches = mol.GetSubstructMatches(ac_patterns[0], useChirality=False)
                            para_match = False
                            for ac_match in ac_matches:
                                # Get the ring atoms
                                ring_atoms = ac_match[:6]
                                # Carboxylic acid is at position 6
                                carboxy_pos = ac_match[6]
                                # Para position is opposite the ring (position 3)
                                para_atom_idx = ring_atoms[3]
                                # Check if EWG or EDG is attached at para position
                                for pat in patterns:
                                    edg_matches = mol.GetSubstructMatches(pat, useChirality=False)
                                    for edg_match in edg_matches:
                                        if para_atom_idx in edg_match:
                                            para_match = True
                                            break
                                    if para_match:
                                        break
                                if para_match:
                                    break
                            if not para_match:
                                match = False
                                break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df


--------------------------------------------------
    Target Name: Fe/Hf
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: Modifiers containing a **terminal primary amine group** on an **aliphatic chain of at least five carbons** and a **carboxylic acid group** result in a **high Fe/Hf** value.  
  *This predicts high Fe/Hf for structures like **5-aminopentanoic acid**, **7-aminoheptanoic acid**, and **8-aminooctanoic acid**.*

- **Rule 2**: Modifiers containing a **thiol group** (–SH) and a **carboxylic acid group** result in a **high Fe/Hf** value.  
  *This predicts high Fe/Hf for compounds like **3-sulfanylpropanoic acid** and **4-sulfanylbenzoic acid**.*

- **Rule 3**: **Aromatic carboxylic acids** substituted with **strong electron-withdrawing groups** such as **nitro** or **bromomethyl** at the **para position** result in a **high Fe/Hf** value.  
  *This predicts high Fe/Hf for structures like **4-(bromomethyl)benzoic acid** and **4-nitrobenzoic acid**.*

- **Rule 4**: Modifiers that are **aliphatic hydroxy acids** with a **terminal hydroxyl group**, a **carboxylic acid group**, and an **aliphatic chain of at least seven carbons** result in a **high Fe/Hf** value.  
  *This predicts high Fe/Hf for compounds like **7-hydroxyheptanoic acid**.*

- **Rule 5**: Modifiers containing **long ether chains** (at least three ether linkages) with a **terminal primary amine group** result in a **high Fe/Hf** value.  
  *This predicts high Fe/Hf for compounds like **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**.*

- **Rule 6**: Modifiers with both an **amide group** and an additional **amino group** on an aliphatic chain result in a **high Fe/Hf** value.  
  *This predicts high Fe/Hf for compounds like **(2S)-6-acetamido-2-aminohexanoic acid**.*

- **Rule 7**: Modifiers containing a **phenolic hydroxyl group** (–OH attached to an aromatic ring) and a **carboxylic acid group** result in a **low Fe/Hf** value.  
  *This predicts low Fe/Hf for compounds like **4-hydroxybenzoic acid** and **3-(4-hydroxyphenyl)propanoic acid**.*

- **Rule 8**: Modifiers that are **polyhydroxylated aliphatic carboxylic acids** (multiple –OH groups on an aliphatic chain) result in a **low Fe/Hf** value.  
  *This predicts low Fe/Hf for compounds like **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid**.*

- **Rule 9**: Modifiers containing **heteroaromatic rings** with a **carboxylic acid group** directly attached to the ring result in a **low Fe/Hf** value.  
  *This predicts low Fe/Hf for compounds like **pyridine-3-carboxylic acid** and **1H-pyrazole-4-carboxylic acid**.*

- **Rule 10**: Modifiers containing **perfluorinated alkyl chains** result in a **low Fe/Hf** value.  
  *This predicts low Fe/Hf for compounds like **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**.*

- **Rule 11**: Modifiers that are **long-chain saturated carboxylic acids** without additional functional groups result in a **low Fe/Hf** value.  
  *This predicts low Fe/Hf for compounds like **octanoic acid**.*

- **Rule 12**: Modifiers containing an **aromatic aldehyde group** (–CHO attached to an aromatic ring) and a **carboxylic acid group** result in a **low Fe/Hf** value.  
  *This predicts low Fe/Hf for compounds like **4-formylbenzoic acid** and **5-formyl-2-hydroxybenzoic acid**.*

- **Rule 13**: Modifiers with **indole rings** result in a **low Fe/Hf** value.  
  *This predicts low Fe/Hf for compounds like **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid**.*

- **Rule 14**: Modifiers containing **aromatic carboxylic acids** substituted with **electron-donating groups** at the **para position** (e.g., amino, methyl, hydroxy) result in a **low Fe/Hf** value.  
  *This predicts low Fe/Hf for compounds like **4-aminobenzoic acid** and **4-methylbenzoic acid**.*

- **Rule 15**: Modifiers that are **amino acids with a short aliphatic chain (four carbons or fewer)** and an additional **carboxylic acid group** result in a **high Fe/Hf** value.  
  *This predicts high Fe/Hf for compounds like **(2S)-2-aminobutanedioic acid** (aspartic acid) and low Fe/Hf for **(2S)-2-aminopentanedioic acid** (glutamic acid) due to its longer chain.*

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,1
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,1
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,1,0,0,-1,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,1
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,1
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,-1,-1,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,0,0,0,1
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,-1,-1,0,0,0,0,0,0,0
0,0,0,1,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,1,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,1,0,0,-1,-1,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,0,0,0,1
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.7428571428571429; Test Accuracy: 1.0
    Train Support: 0.15; Test Support: 0.0
    Train Confidence: 0.8458333333333333; Test Confidence: 0.5
    Train Lift: 1.644675925925926; Test Lift: NONE
    Train Leverage: 0.04714285714285715; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers containing a terminal primary amine group on an aliphatic chain of at least five carbons and a carboxylic acid group result in a high Fe/Hf value.',
            'patterns': {
                'primary_amine': '[NX3H2]',
                'carboxylic_acid': '[CX3](=O)[OX2H1]'
            },
            'min_chain_length': 5,
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers containing a thiol group (–SH) and a carboxylic acid group result in a high Fe/Hf value.',
            'patterns': {
                'thiol': '[SX2H]',
                'carboxylic_acid': '[CX3](=O)[OX2H1]'
            },
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Aromatic carboxylic acids substituted with strong electron-withdrawing groups such as nitro or bromomethyl at the para position result in a high Fe/Hf value.',
            'patterns': {
                'aromatic_carboxylic_acid': '[c][CX3](=O)[OX2H1]',  # Carboxylic acid attached to aromatic ring
                'nitro': '[NX3](=O)[O-]', # Nitro group
                'bromomethyl': '[CX4][Br]'  # Bromomethyl group
            },
            'ewgs': ['[NX3](=O)[O-]', '[CX4][Br]'],  # Electron-withdrawing groups
            'check_para_position': True,
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers that are aliphatic hydroxy acids with a terminal hydroxyl group, a carboxylic acid group, and an aliphatic chain of at least seven carbons result in a high Fe/Hf value.',
            'patterns': {
                'terminal_hydroxyl': '[OX2H]',
                'carboxylic_acid': '[CX3](=O)[OX2H1]'
            },
            'min_chain_length':7,
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers containing long ether chains (at least three ether linkages) with a terminal primary amine group result in a high Fe/Hf value.',
            'patterns': {
                'ether': '[OX2]',
                'primary_amine': '[NX3H2]'
            },
            'min_ether_count': 3,
            'prediction':1
        },
        {
            'number':6,
            'description': 'Modifiers with both an amide group and an additional amino group on an aliphatic chain result in a high Fe/Hf value.',
            'patterns': {
                'amide': '[CX3](=O)[NX3]',
                'amino_group': '[NX3H2,NX3H1]'
            },
            'prediction':1
        },
        {
            'number':7,
            'description': 'Modifiers containing a phenolic hydroxyl group (–OH attached to an aromatic ring) and a carboxylic acid group result in a low Fe/Hf value.',
            'patterns': {
                'phenolic_oh': '[c][OX2H]',
                'carboxylic_acid': '[CX3](=O)[OX2H1]'
            },
            'prediction':-1
        },
        {
            'number':8,
            'description': 'Modifiers that are polyhydroxylated aliphatic carboxylic acids (multiple –OH groups on an aliphatic chain) result in a low Fe/Hf value.',
            'patterns': {
                'alcohol': '[OX2H]',
                'carboxylic_acid': '[CX3](=O)[OX2H1]'
            },
            'min_hydroxyl_count':2,
            'prediction':-1
        },
        {
            'number':9,
            'description': 'Modifiers containing heteroaromatic rings with a carboxylic acid group directly attached to the ring result in a low Fe/Hf value.',
            'patterns': {
                'heteroaromatic_carboxylic_acid':'[a][CX3](=O)[OX2H1]'
            },
            'prediction':-1
        },
        {
            'number':10,
            'description': 'Modifiers containing perfluorinated alkyl chains result in a low Fe/Hf value.',
            'patterns': {
                'perfluoro_alkyl': '[CX4]([F])[F]'
            },
            'prediction':-1
        },
        {
            'number':11,
            'description': 'Modifiers that are long-chain saturated carboxylic acids without additional functional groups result in a low Fe/Hf value.',
            'patterns': {
                'carboxylic_acid': '[CX3](=O)[OX2H1]'
            },
            'min_chain_length':6,
            'exclude_patterns':{
                'functional_groups':'[!#6;!H0]'
            },
            'prediction':-1
        },
        {
            'number':12,
            'description': 'Modifiers containing an aromatic aldehyde group (–CHO attached to an aromatic ring) and a carboxylic acid group result in a low Fe/Hf value.',
            'patterns': {
                'aromatic_aldehyde': '[c][CX3H](=O)',
                'carboxylic_acid': '[CX3](=O)[OX2H1]'
            },
            'prediction':-1
        },
        {
            'number':13,
            'description': 'Modifiers with indole rings result in a low Fe/Hf value.',
            'patterns': {
                'indole': 'c1cc2ccccc2[nH]1'
            },
            'prediction':-1
        },
        {
            'number':14,
            'description': 'Modifiers containing aromatic carboxylic acids substituted with electron-donating groups at the para position (e.g., amino, methyl, hydroxy) result in a low Fe/Hf value.',
            'patterns': {
                'aromatic_carboxylic_acid': '[c][CX3](=O)[OX2H1]',
                'edg': ['[NX3H2]', '[OX2H]', '[CX4H3]']  # amino, hydroxy, methyl
            },
            'check_para_position': True,
            'prediction':-1
        },
        {
            'number':15,
            'description': 'Modifiers that are amino acids with a short aliphatic chain (four carbons or fewer) and an additional carboxylic acid group result in a high Fe/Hf value.',
            'patterns': {
                'amino_group': '[NX3H2]',
                'carboxylic_acid': '[CX3](=O)[OX2H1]'
            },
            'max_chain_length':4,
            'prediction':1
        }

    ]

    # Compile patterns
    for rule in rules:
        compiled_patterns = {}
        for key, smarts in rule.get('patterns', {}).items():
            if isinstance(smarts, list):
                compiled_patterns[key] = [Chem.MolFromSmarts(p) for p in smarts]
            else:
                compiled_patterns[key] = Chem.MolFromSmarts(smarts)
        rule['compiled_patterns'] = compiled_patterns
        if 'exclude_patterns' in rule:
            compiled_exclude = {}
            for key, smarts in rule.get('exclude_patterns', {}).items():
                if isinstance(smarts, list):
                    compiled_exclude[key] = [Chem.MolFromSmarts(p) for p in smarts]
                else:
                    compiled_exclude[key] = Chem.MolFromSmarts(smarts)
            rule['compiled_exclude_patterns'] = compiled_exclude

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = False
                mol = Chem.AddHs(mol)
                # Rule-specific processing
                if rule['number'] ==1:
                    # Rule 1: Terminal primary amine, carboxylic acid, chain length >=5
                    primary_amines = mol.GetSubstructMatches(rule['compiled_patterns']['primary_amine'])
                    carboxylic_acids = mol.GetSubstructMatches(rule['compiled_patterns']['carboxylic_acid'])
                    for amine in primary_amines:
                        for acid in carboxylic_acids:
                            N_idx = amine[0]
                            C_idx = acid[0]
                            path = Chem.rdmolops.GetShortestPath(mol, N_idx, C_idx)
                            num_carbons = sum(1 for idx in path if mol.GetAtomWithIdx(idx).GetAtomicNum() ==6)
                            if num_carbons >= rule['min_chain_length']:
                                match = True
                                break
                        if match:
                            break
                elif rule['number'] ==2:
                    # Rule 2: Has thiol and carboxylic acid
                    has_thiol = mol.HasSubstructMatch(rule['compiled_patterns']['thiol'])
                    has_acid = mol.HasSubstructMatch(rule['compiled_patterns']['carboxylic_acid'])
                    if has_thiol and has_acid:
                        match = True
                elif rule['number']==3:
                    # Rule 3: Aromatic carboxylic acid with EWG at para position
                    aromatic_acids = mol.GetSubstructMatches(rule['compiled_patterns']['aromatic_carboxylic_acid'])
                    for acid in aromatic_acids:
                        acid_c_idx = acid[0]
                        # Get aromatic ring containing acid
                        rings = mol.GetRingInfo().AtomRings()
                        for ring in rings:
                            if acid_c_idx in ring:
                                pos_acid = ring.index(acid_c_idx)
                                para_pos = (pos_acid + len(ring)//2)%len(ring)
                                para_atom_idx = ring[para_pos]
                                # Check for EWG at para position
                                for ewg_smarts in rule['ewgs']:
                                    ewg_mol = Chem.MolFromSmarts(ewg_smarts)
                                    matches = mol.GetSubstructMatches(ewg_mol)
                                    for m in matches:
                                        if para_atom_idx in m:
                                            match = True
                                            break
                                    if match:
                                        break
                                if match:
                                    break
                        if match:
                            break
                elif rule['number']==4:
                    # Rule 4: Terminal hydroxyl, carboxylic acid, chain length >=7
                    hydroxyls = mol.GetSubstructMatches(rule['compiled_patterns']['terminal_hydroxyl'])
                    carboxylic_acids = mol.GetSubstructMatches(rule['compiled_patterns']['carboxylic_acid'])
                    for oh in hydroxyls:
                        for acid in carboxylic_acids:
                            O_idx = oh[0]
                            C_idx = acid[0]
                            path = Chem.rdmolops.GetShortestPath(mol, O_idx, C_idx)
                            num_carbons = sum(1 for idx in path if mol.GetAtomWithIdx(idx).GetAtomicNum() ==6)
                            if num_carbons >= rule['min_chain_length']:
                                match = True
                                break
                        if match:
                            break
                elif rule['number']==5:
                    # Rule 5: At least three ether linkages and terminal primary amine
                    ethers = mol.GetSubstructMatches(rule['compiled_patterns']['ether'])
                    if len(ethers) >= rule['min_ether_count']:
                        has_amino = mol.HasSubstructMatch(rule['compiled_patterns']['primary_amine'])
                        if has_amino:
                            match = True
                elif rule['number']==6:
                    # Rule 6: Amide and additional amino group
                    has_amide = mol.HasSubstructMatch(rule['compiled_patterns']['amide'])
                    amino_groups = mol.GetSubstructMatches(rule['compiled_patterns']['amino_group'])
                    if has_amide and len(amino_groups)>1:
                        match = True
                elif rule['number']==7:
                    # Rule7: Phenolic OH and carboxylic acid
                    has_phenolic_oh = mol.HasSubstructMatch(rule['compiled_patterns']['phenolic_oh'])
                    has_acid = mol.HasSubstructMatch(rule['compiled_patterns']['carboxylic_acid'])
                    if has_phenolic_oh and has_acid:
                        match = True
                elif rule['number']==8:
                    # Rule8: Polyhydroxylated aliphatic carboxylic acids
                    hydroxyls = mol.GetSubstructMatches(rule['compiled_patterns']['alcohol'])
                    has_acid = mol.HasSubstructMatch(rule['compiled_patterns']['carboxylic_acid'])
                    if len(hydroxyls) >= rule['min_hydroxyl_count'] and has_acid:
                        match = True
                elif rule['number']==9:
                    # Rule9: Heteroaromatic rings with carboxylic acid attached
                    has_hetero_aromatic_acid = mol.HasSubstructMatch(rule['compiled_patterns']['heteroaromatic_carboxylic_acid'])
                    if has_hetero_aromatic_acid:
                        match = True
                elif rule['number']==10:
                    # Rule10: Perfluorinated alkyl chains
                    has_perfluoro = mol.HasSubstructMatch(rule['compiled_patterns']['perfluoro_alkyl'])
                    if has_perfluoro:
                        match = True
                elif rule['number']==11:
                    # Rule11: Long chain carboxylic acids without additional functional groups
                    carboxylic_acids = mol.GetSubstructMatches(rule['compiled_patterns']['carboxylic_acid'])
                    if carboxylic_acids:
                        # Check chain length from acid to end
                        acid_C_idx = carboxylic_acids[0][0]
                        max_chain_length = 0
                        for atom in mol.GetAtoms():
                            if atom.GetAtomicNum() ==6 and atom.GetDegree()==1:
                                C_idx = atom.GetIdx()
                                path = Chem.rdmolops.GetShortestPath(mol, acid_C_idx, C_idx)
                                num_carbons = sum(1 for idx in path if mol.GetAtomWithIdx(idx).GetAtomicNum() ==6)
                                if num_carbons > max_chain_length:
                                    max_chain_length = num_carbons
                        if max_chain_length >= rule['min_chain_length']:
                            # Check for absence of other functional groups
                            has_other_fg = False
                            if 'exclude_patterns' in rule:
                                for key, patterns in rule['compiled_exclude_patterns'].items():
                                    if mol.HasSubstructMatch(patterns):
                                        has_other_fg = True
                                        break
                            if not has_other_fg:
                                match = True
                elif rule['number']==12:
                    # Rule12: Aromatic aldehyde and carboxylic acid
                    has_aldehyde = mol.HasSubstructMatch(rule['compiled_patterns']['aromatic_aldehyde'])
                    has_acid = mol.HasSubstructMatch(rule['compiled_patterns']['carboxylic_acid'])
                    if has_aldehyde and has_acid:
                        match = True
                elif rule['number']==13:
                    # Rule13: Indole rings
                    has_indole = mol.HasSubstructMatch(rule['compiled_patterns']['indole'])
                    if has_indole:
                        match = True
                elif rule['number']==14:
                    # Rule14: Aromatic carboxylic acid with EDG at para position
                    aromatic_acids = mol.GetSubstructMatches(rule['compiled_patterns']['aromatic_carboxylic_acid'])
                    for acid in aromatic_acids:
                        acid_c_idx = acid[0]
                        # Get aromatic ring containing acid
                        rings = mol.GetRingInfo().AtomRings()
                        for ring in rings:
                            if acid_c_idx in ring:
                                pos_acid = ring.index(acid_c_idx)
                                para_pos = (pos_acid + len(ring)//2)%len(ring)
                                para_atom_idx = ring[para_pos]
                                # Check for EDG at para position
                                for edg_smarts in rule['compiled_patterns']['edg']:
                                    matches = mol.GetSubstructMatches(edg_smarts)
                                    for m in matches:
                                        if para_atom_idx in m:
                                            match = True
                                            break
                                    if match:
                                        break
                                if match:
                                    break
                        if match:
                            break
                elif rule['number']==15:
                    # Rule15: Amino acids with short aliphatic chain (<=4 carbons)
                    aminos = mol.GetSubstructMatches(rule['compiled_patterns']['amino_group'])
                    acids = mol.GetSubstructMatches(rule['compiled_patterns']['carboxylic_acid'])
                    if aminos and acids:
                        for amine in aminos:
                            for acid in acids:
                                N_idx = amine[0]
                                C_idx = acid[0]
                                path = Chem.rdmolops.GetShortestPath(mol, N_idx, C_idx)
                                num_carbons = sum(1 for idx in path if mol.GetAtomWithIdx(idx).GetAtomicNum() ==6)
                                if num_carbons <= rule['max_chain_length']:
                                    match = True
                                    break
                            if match:
                                break
                else:
                    match=False

                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                # print(f"Error processing rule {rule['number']} for SMILES {smi}: {e}")
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: Fe/Hf
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: Modifiers containing a **terminal primary amine group** on an **aliphatic chain** (with a chain length of at least three carbons) and a **carboxylic acid group** result in a **high Fe/Hf** value.  
  *This predicts high Fe/Hf for compounds like **5-aminopentanoic acid**, **7-aminoheptanoic acid**, **8-aminooctanoic acid**, and **(2S)-2-aminobutanedioic acid** (aspartic acid).*

- **Rule 2**: Modifiers containing a **thiol group** (–SH) and a **carboxylic acid group** result in a **high Fe/Hf** value.  
  *This predicts high Fe/Hf for compounds like **3-sulfanylpropanoic acid** and **4-sulfanylbenzoic acid**.*

- **Rule 3**: **Aromatic carboxylic acids** substituted with **strong electron-withdrawing groups** (e.g., **nitro**, **bromo**, **pyridinyl**) at the **para position** result in a **high Fe/Hf** value.  
  *This predicts high Fe/Hf for compounds like **4-(bromomethyl)benzoic acid**, **4-nitrobenzoic acid**, and **4-pyridin-4-ylbenzoic acid**.*

- **Rule 4**: Modifiers containing **polyether chains** with at least **three ether linkages** and a **terminal functional group** (e.g., amine or carboxylic acid) result in a **high Fe/Hf** value.  
  *This predicts high Fe/Hf for compounds like **2-[2-(2-methoxyethoxy)ethoxy]acetic acid** and **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**.*

- **Rule 5**: Modifiers containing **electron-donating groups** (e.g., **amino**, **hydroxy**, **methoxy**, **methyl**) at the **para position** of an **aromatic carboxylic acid** result in a **low Fe/Hf** value.  
  *This predicts low Fe/Hf for compounds like **4-aminobenzoic acid**, **4-hydroxybenzoic acid**, and **4-methylbenzoic acid**.*

- **Rule 6**: Modifiers containing **multiple hydroxyl groups** (polyhydroxylated) on an **aliphatic chain** result in a **low Fe/Hf** value.  
  *This predicts low Fe/Hf for compounds like **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** and **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid**.*

- **Rule 7**: Modifiers that are **long-chain saturated carboxylic acids** without additional functional groups result in a **low Fe/Hf** value.  
  *This predicts low Fe/Hf for compounds like **octanoic acid** and **7-hydroxyheptanoic acid** (due to minimal functionalization).*

- **Rule 8**: Modifiers containing **perfluorinated alkyl chains** result in a **low Fe/Hf** value.  
  *This predicts low Fe/Hf for compounds like **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**.*

- **Rule 9**: Modifiers containing **heteroaromatic rings** with a **carboxylic acid group** directly attached to the ring result in a **low Fe/Hf** value.  
  *This predicts low Fe/Hf for compounds like **pyridine-3-carboxylic acid** and **1H-pyrazole-4-carboxylic acid**.*

- **Rule 10**: Modifiers containing an **aldehyde group** attached to an **aromatic ring** along with a **carboxylic acid group** result in a **low Fe/Hf** value.  
  *This predicts low Fe/Hf for compounds like **4-formylbenzoic acid** and **5-formyl-2-hydroxybenzoic acid**.*

- **Rule 11**: Modifiers containing an **indole ring** result in a **low Fe/Hf** value.  
  *This predicts low Fe/Hf for compounds like **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (tryptophan).*

- **Rule 12**: Modifiers containing a **phenolic hydroxyl group** (–OH attached to an aromatic ring) result in a **low Fe/Hf** value.  
  *This predicts low Fe/Hf for compounds like **3-(4-hydroxyphenyl)propanoic acid** and **4-hydroxybenzoic acid**.*

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0
1,0,0,1,0,0,0,0,0,0,0,0
0,0,0,1,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,-1
0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,-1,0,-1
0,0,0,0,0,0,0,0,0,-1,0,0
0,0,1,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,-1
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,-1
1,0,0,1,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0
1,0,0,1,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.8285714285714286; Test Accuracy: 1.0
    Train Support: 0.08571428571428572; Test Support: 0.0
    Train Confidence: 0.9696969696969696; Test Confidence: 0.5
    Train Lift: 1.9201822142998612; Test Lift: NONE
    Train Leverage: 0.0381859410430839; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define the rules with their associated patterns and predictions
    from rdkit import Chem

    # Define patterns
    patterns = {}

    # Carboxylic acid group (-COOH)
    patterns['carboxylic_acid'] = Chem.MolFromSmarts('[CX3](=O)[OX2H1]')

    # Primary amine group (-NH2), terminal on aliphatic chain of at least three carbons
    # For simplicity, we will define a pattern that matches a chain of at least three aliphatic carbons ending with a primary amine
    patterns['primary_amine_chain'] = Chem.MolFromSmarts('[CH2][CH2][CH2][NX3H2]')

    # Thiol group (-SH)
    patterns['thiol'] = Chem.MolFromSmarts('[SX2H]')

    # Aromatic carboxylic acid
    patterns['aromatic_carboxylic_acid'] = Chem.MolFromSmarts('[c][CX3](=O)[OX2H1]')

    # Electron-withdrawing groups (EWG) attached to aromatic ring
    # Nitro group attached to aromatic ring
    patterns['nitro_on_aromatic'] = Chem.MolFromSmarts('[c][NX3](=O)[OX1]')

    # Bromo attached to aromatic ring
    patterns['bromo_on_aromatic'] = Chem.MolFromSmarts('[c][Br]')

    # Pyridine ring
    patterns['pyridine_ring'] = Chem.MolFromSmarts('n1ccccc1')

    # Electron-donating groups (EDG) attached to aromatic ring
    # Amino group attached to aromatic ring
    patterns['amino_on_aromatic'] = Chem.MolFromSmarts('[c][NX3H2]')

    # Hydroxy group attached to aromatic ring
    patterns['hydroxy_on_aromatic'] = Chem.MolFromSmarts('[c][OX2H]')

    # Methoxy group attached to aromatic ring
    patterns['methoxy_on_aromatic'] = Chem.MolFromSmarts('[c][OX2][CH3]')

    # Methyl group attached to aromatic ring
    patterns['methyl_on_aromatic'] = Chem.MolFromSmarts('[c][CH3]')

    # Multiple hydroxyl groups on aliphatic chain
    patterns['aliphatic_hydroxyl'] = Chem.MolFromSmarts('[CX4][OX2H]')

    # Aldehyde group attached to aromatic ring
    patterns['aldehyde_on_aromatic'] = Chem.MolFromSmarts('[c][CX3H](=O)')

    # Indole ring
    patterns['indole'] = Chem.MolFromSmarts('c1ccc2c(c1)[nH]c3c2cccc3')

    # Polyether chain (three or more ether linkages)
    patterns['ether_linkage'] = Chem.MolFromSmarts('[#6][OX2][#6]')
    # Note: counting is required for polyether chain with at least three ether linkages

    # Terminal functional groups (amine or carboxylic acid)
    patterns['terminal_amine'] = Chem.MolFromSmarts('[NX3H2]')
    patterns['terminal_carboxylic_acid'] = patterns['carboxylic_acid']

    # Heteroaromatic ring with carboxylic acid attached directly
    patterns['heteroaromatic_carboxylic_acid'] = Chem.MolFromSmarts('[n,o,s][c][CX3](=O)[OX2H1]')

    # Perfluorinated alkyl chain
    patterns['perfluoro_alkyl'] = Chem.MolFromSmarts('[CX4](F)(F)(F)')

    # Long aliphatic chain (saturated chain of at least five carbons)
    patterns['long_aliphatic_chain'] = Chem.MolFromSmarts('[CH2][CH2][CH2][CH2][CH2]')

    # Phenolic hydroxyl group
    patterns['phenolic_oh'] = patterns['hydroxy_on_aromatic']

    # Create list of rules
    rules = [
        {
            'number': 1,
            'description': 'Modifiers containing a terminal primary amine group on an aliphatic chain (with a chain length of at least three carbons) and a carboxylic acid group result in a high Fe/Hf value.',
            'patterns': [patterns['primary_amine_chain'], patterns['carboxylic_acid']],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers containing a thiol group (–SH) and a carboxylic acid group result in a high Fe/Hf value.',
            'patterns': [patterns['thiol'], patterns['carboxylic_acid']],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Aromatic carboxylic acids substituted with strong electron-withdrawing groups (e.g., nitro, bromo, pyridinyl) result in a high Fe/Hf value.',
            'patterns': [patterns['aromatic_carboxylic_acid'], [patterns['nitro_on_aromatic'], patterns['bromo_on_aromatic'], patterns['pyridine_ring']]],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers containing polyether chains with at least three ether linkages and a terminal functional group (e.g., amine or carboxylic acid) result in a high Fe/Hf value.',
            'patterns': [patterns['terminal_amine'], patterns['terminal_carboxylic_acid']],
            'count_threshold': {'ether_linkage': 3},
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers containing electron-donating groups (e.g., amino, hydroxy, methoxy, methyl) on an aromatic carboxylic acid result in a low Fe/Hf value.',
            'patterns': [patterns['aromatic_carboxylic_acid'], [patterns['amino_on_aromatic'], patterns['hydroxy_on_aromatic'], patterns['methoxy_on_aromatic'], patterns['methyl_on_aromatic']]],
            'prediction': -1
        },
        {
            'number': 6,
            'description': 'Modifiers containing multiple hydroxyl groups (polyhydroxylated) on an aliphatic chain result in a low Fe/Hf value.',
            'patterns': [patterns['aliphatic_hydroxyl']],
            'count_threshold': {'aliphatic_hydroxyl': 2},
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Modifiers that are long-chain saturated carboxylic acids without additional functional groups result in a low Fe/Hf value.',
            'patterns': [patterns['carboxylic_acid'], patterns['long_aliphatic_chain']],
            'exclude_patterns': [patterns['aliphatic_hydroxyl'], patterns['primary_amine_chain'], patterns['thiol']],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Modifiers containing perfluorinated alkyl chains result in a low Fe/Hf value.',
            'patterns': [patterns['perfluoro_alkyl']],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers containing heteroaromatic rings with a carboxylic acid group directly attached to the ring result in a low Fe/Hf value.',
            'patterns': [patterns['heteroaromatic_carboxylic_acid']],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers containing an aldehyde group attached to an aromatic ring along with a carboxylic acid group result in a low Fe/Hf value.',
            'patterns': [patterns['aldehyde_on_aromatic'], patterns['aromatic_carboxylic_acid']],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Modifiers containing an indole ring result in a low Fe/Hf value.',
            'patterns': [patterns['indole']],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'Modifiers containing a phenolic hydroxyl group (–OH attached to an aromatic ring) result in a low Fe/Hf value.',
            'patterns': [patterns['phenolic_oh']],
            'prediction': -1
        }
    ]

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for excl_pat in rule['exclude_patterns']:
                        if mol.HasSubstructMatch(excl_pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for pat in rule['patterns']:
                    if isinstance(pat, list):
                        # Logical OR: at least one pattern in the list should match
                        group_match = False
                        for sub_pat in pat:
                            if mol.HasSubstructMatch(sub_pat):
                                group_match = True
                                break
                        if not group_match:
                            match = False
                            break
                    else:
                        # Single pattern
                        if pat == patterns['ether_linkage']:
                            # For patterns requiring counts
                            if 'count_threshold' in rule and 'ether_linkage' in rule['count_threshold']:
                                threshold = rule['count_threshold']['ether_linkage']
                                matches = mol.GetSubstructMatches(pat)
                                if len(matches) < threshold:
                                    match = False
                                    break
                        elif pat == patterns['aliphatic_hydroxyl']:
                            if 'count_threshold' in rule and 'aliphatic_hydroxyl' in rule['count_threshold']:
                                threshold = rule['count_threshold']['aliphatic_hydroxyl']
                                matches = mol.GetSubstructMatches(pat)
                                if len(matches) < threshold:
                                    match = False
                                    break
                        else:
                            if not mol.HasSubstructMatch(pat):
                                match = False
                                break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    import pandas as pd
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df
--------------------------------------------------
    Target Name: Fe/Hf
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: Modifiers that are **linear aliphatic carboxylic acids** with a **primary amine or hydroxyl group** located at the **ω-position (terminal end)** result in a **high Fe/Hf** value.

  *Predicts high Fe/Hf for compounds like **5-aminopentanoic acid**, **7-aminoheptanoic acid**, **8-aminooctanoic acid**, and **7-hydroxyheptanoic acid**.*

- **Rule 2**: Modifiers containing a **thiol (-SH) group** and a **carboxylic acid group** on an **aliphatic chain** result in a **high Fe/Hf** value.

  *Predicts high Fe/Hf for compounds like **3-sulfanylpropanoic acid** and **4-sulfanylbenzoic acid**.*

- **Rule 3**: Modifiers that are **aromatic carboxylic acids** with a **para-substituted strong electron-withdrawing group** such as **nitro (-NO₂)**, **halomethyl (-CH₂Br)**, or **pyridyl rings**, result in a **high Fe/Hf** value.

  *Predicts high Fe/Hf for compounds like **4-nitrobenzoic acid**, **4-(bromomethyl)benzoic acid**, and **4-pyridin-4-ylbenzoic acid**.*

- **Rule 4**: Modifiers containing a **polyether chain** with at least **three ether linkages** ending with a **carboxylic acid group** result in a **high Fe/Hf** value.

  *Predicts high Fe/Hf for compounds like **2-[2-(2-methoxyethoxy)ethoxy]acetic acid** and **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**.*

- **Rule 5**: Modifiers that are **amino acids** with **sulfur-containing side chains** result in a **high Fe/Hf** value.

  *Predicts high Fe/Hf for compounds like **(2S)-2-amino-4-methylsulfanylbutanoic acid (Methionine derivative)** and **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid**.*

- **Rule 6**: Modifiers that are **aliphatic carboxylic acids** with **additional polar functional groups** (e.g., **amide**, **additional amine**) on the chain result in a **high Fe/Hf** value.

  *Predicts high Fe/Hf for compounds like **(2S)-6-acetamido-2-aminohexanoic acid** and **(2S)-2-aminopentanedioic acid**.*

- **Rule 7**: Modifiers that are **aromatic carboxylic acids** with **electron-donating groups** at the **para position** (e.g., **hydroxyl (-OH)**, **amino (-NH₂)**, **methoxy (-OCH₃)**, **methyl (-CH₃)**) result in a **low Fe/Hf** value.

  *Predicts low Fe/Hf for compounds like **4-hydroxybenzoic acid**, **4-aminobenzoic acid**, and **4-methylbenzoic acid**.*

- **Rule 8**: Modifiers containing **multiple hydroxyl groups** on an **aliphatic chain or ring system**, especially **polyols**, result in a **low Fe/Hf** value.

  *Predicts low Fe/Hf for compounds like **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** and **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid**.*

- **Rule 9**: Modifiers that are **heteroaromatic carboxylic acids** with the **carboxylic acid group** directly attached to the ring result in a **low Fe/Hf** value.

  *Predicts low Fe/Hf for compounds like **pyridine-3-carboxylic acid**, **1H-pyrazole-4-carboxylic acid**, and **2-oxo-1H-pyridine-4-carboxylic acid**.*

- **Rule 10**: Modifiers containing **aromatic rings** with **aldehyde (-CHO)** or **ketone (>C=O)** groups in conjugation with the ring and a **carboxylic acid group** result in a **low Fe/Hf** value.

  *Predicts low Fe/Hf for compounds like **4-formylbenzoic acid**, **5-formyl-2-hydroxybenzoic acid**, and **4-oxoheptanedioic acid**.*

- **Rule 11**: Modifiers that are **perfluorinated carboxylic acids** result in a **low Fe/Hf** value due to strong electron-withdrawing effects of fluorine atoms.

  *Predicts low Fe/Hf for compounds like **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**.*

- **Rule 12**: Modifiers that are **aromatic carboxylic acids** with an **aryl ketone linkage** between the aromatic ring and the carboxylic acid result in a **high Fe/Hf** value.

  *Predicts high Fe/Hf for compounds like **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid** and **1,3-dioxo-2-benzofuran-5-carboxylic acid**.*

- **Rule 13**: Modifiers containing an **indole ring system** result in a **low Fe/Hf** value.

  *Predicts low Fe/Hf for compounds like **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid (Tryptophan derivative)**.*

- **Rule 14**: Modifiers that are **aliphatic carboxylic acids** without additional polar functional groups or with **sterically hindered groups** result in a **low Fe/Hf** value.

  *Predicts low Fe/Hf for compounds like **octanoic acid** and **2,2,2-trifluoroacetic acid derivatives**.*

- **Rule 15**: Modifiers that are **amino acids** with **aromatic side chains** (e.g., **phenylalanine**) result in a **high Fe/Hf** value due to π-π interactions.

  *Predicts high Fe/Hf for compounds like **(2S)-2-amino-3-phenylpropanoic acid**.*

**End of Rules**

These rules are formulated by analyzing the structural features of the modifiers and their impact on the Fe/Hf ratio. The rules consider the electronic effects, steric factors, and the ability of functional groups to coordinate with metal centers, which influence the incorporation of iron relative to hafnium in the catalyst.

- **Rules 1, 2, 4, 5, 6, and 15** focus on modifiers that enhance Fe incorporation due to functional groups that can chelate or interact strongly with iron, leading to a **high Fe/Hf** value.
  
- **Rules 7, 8, 9, 10, 11, 13, and 14** identify modifiers that result in a **low Fe/Hf** value due to either electron-donating effects that reduce metal coordination, steric hindrance, or the presence of groups that favor hafnium coordination over iron.

- **Rules 3 and 12** highlight the importance of electron-withdrawing groups and conjugated systems in promoting Fe incorporation.

This set of rules balances coverage across the dataset while providing specificity based on chemical properties, fulfilling the requirements of generating between 5 and 15 rules and considering underlying physical-chemical principles.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,1
1,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,1
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
1,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,1,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6857142857142857; Test Accuracy: 0.0
    Train Support: 0.11428571428571428; Test Support: 0.0
    Train Confidence: 0.9; Test Confidence: 0.5
    Train Lift: 1.8148148148148149; Test Lift: NONE
    Train Leverage: 0.044081632653061226; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1]'
    
    # Primary amine group (-NH2) and hydroxyl group (-OH)
    primary_amine = '[NX3;H2]'
    hydroxyl_group = '[OX2H]'
    
    # Thiol group (-SH)
    thiol = '[SX2H]'
    
    # Aromatic carboxylic acid
    aromatic_carboxylic_acid = '[c][CX3](=O)[OX1H0-,OX2H1]'
    
    # Electron-withdrawing groups (EWGs)
    nitro_group = '[NX3](=O)=O'
    halomethyl_group = '[CH2][Br,Cl,F,I]'
    pyridyl_ring = 'n1ccccc1'
    
    # Ether linkage (-O-)
    ether_linkage = '[#6][OX2][#6]'
    
    # Sulfur-containing groups
    sulfur_group = '[#16]'
    
    # Amide group (-CONH-)
    amide_group = '[CX3](=O)[NX3H1,H0]'  
    
    # Electron-donating groups (EDGs) on aromatic ring
    aromatic_hydroxyl = '[c][OX2H]'
    aromatic_amino = '[c][NX3;H2]'
    aromatic_methoxy = '[c][OX2][CH3]'
    aromatic_methyl = '[c][CH3]'
    
    # Multiple hydroxyl groups
    multiple_hydroxyl = '[OX2H]'
    
    # Aldehyde and ketone groups conjugated with aromatic ring
    aromatic_aldehyde = '[c][CX3H1](=O)'
    aromatic_ketone = '[c][CX3](=O)[#6]'
    
    # Fluorine atom
    fluorine = '[F]'
    
    # Indole ring system
    indole = 'c1ccc2c(c1)[nH]c3c2cccc3'
    
    # Alpha amino acid pattern
    alpha_amino_acid = '[NX3;H2][CX4H]([#6])[CX3](=O)[OX1H0-,OX2H1]'
    
    # Aromatic ring
    aromatic_ring = '[a]'
    
    # Rules definition
    rules = [
        {
            'number': 1,
            'description': 'High Fe/Hf Value: Linear aliphatic carboxylic acids with a primary amine or hydroxyl group at the terminal end.',
            'patterns': [
                [carboxylic_acid],  # Carboxylic acid group
                [primary_amine, hydroxyl_group],  # Primary amine or hydroxyl group
            ],
            'exclude_patterns': [
                [aromatic_ring],  # Exclude aromatic rings
            ],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'High Fe/Hf Value: Modifiers containing a thiol (-SH) group and a carboxylic acid group on an aliphatic chain.',
            'patterns': [
                [carboxylic_acid],  # Carboxylic acid group
                [thiol],  # Thiol group
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'High Fe/Hf Value: Aromatic carboxylic acids with a para-substituted strong electron-withdrawing group.',
            'patterns': [
                [aromatic_carboxylic_acid],  # Aromatic carboxylic acid
                [nitro_group, halomethyl_group, pyridyl_ring],  # EWGs
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'High Fe/Hf Value: Modifiers containing a polyether chain with at least three ether linkages and a carboxylic acid group.',
            'patterns': [
                [carboxylic_acid],  # Carboxylic acid group
                [ether_linkage],  # Ether linkage
            ],
            'count_threshold': {ether_linkage: 3},  # At least 3 ether linkages
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'High Fe/Hf Value: Amino acids with sulfur-containing side chains.',
            'patterns': [
                [alpha_amino_acid],  # Alpha amino acid
                [sulfur_group],  # Sulfur-containing group
            ],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'High Fe/Hf Value: Aliphatic carboxylic acids with additional polar functional groups (amide, additional amine).',
            'patterns': [
                [carboxylic_acid],  # Carboxylic acid group
                [amide_group, primary_amine],  # Additional polar groups
            ],
            'exclude_patterns': [
                [aromatic_ring],  # Exclude aromatic rings
            ],
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'Low Fe/Hf Value: Aromatic carboxylic acids with electron-donating groups at the para position.',
            'patterns': [
                [aromatic_carboxylic_acid],  # Aromatic carboxylic acid
                [aromatic_hydroxyl, aromatic_amino, aromatic_methoxy, aromatic_methyl],  # EDGs
            ],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Low Fe/Hf Value: Modifiers containing multiple hydroxyl groups on an aliphatic chain or ring system (polyols).',
            'patterns': [
                [carboxylic_acid],  # Carboxylic acid group
                [multiple_hydroxyl],  # Hydroxyl group
            ],
            'count_threshold': {multiple_hydroxyl: 2},  # At least 2 hydroxyl groups
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Low Fe/Hf Value: Heteroaromatic carboxylic acids with the carboxylic acid group directly attached to the ring.',
            'patterns': [
                [aromatic_carboxylic_acid],  # Aromatic carboxylic acid
                [aromatic_ring],  # Ensure it's heteroaromatic
            ],
            'exclude_patterns': [
                ['[c]']],  # Exclude carbocyclic aromatics
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Low Fe/Hf Value: Aromatic rings with aldehyde (-CHO) or ketone (>C=O) groups in conjugation with the ring and a carboxylic acid group.',
            'patterns': [
                [aromatic_carboxylic_acid],  # Aromatic carboxylic acid
                [aromatic_aldehyde, aromatic_ketone],  # Aldehyde or ketone group
            ],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Low Fe/Hf Value: Perfluorinated carboxylic acids.',
            'patterns': [
                [carboxylic_acid],  # Carboxylic acid group
                [fluorine],  # Fluorine atoms
            ],
            'count_threshold': {fluorine: 4},  # At least 4 fluorine atoms
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'High Fe/Hf Value: Aromatic carboxylic acids with an aryl ketone linkage between the aromatic ring and the carboxylic acid.',
            'patterns': [
                [aromatic_carboxylic_acid],  # Aromatic carboxylic acid
                ['[c][CX3](=O)[c]'],  # Aryl ketone linkage
            ],
            'prediction': 1
        },
        {
            'number': 13,
            'description': 'Low Fe/Hf Value: Modifiers containing an indole ring system.',
            'patterns': [
                [indole],  # Indole ring system
            ],
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'Low Fe/Hf Value: Aliphatic carboxylic acids without additional polar functional groups or with sterically hindered groups.',
            'patterns': [
                [carboxylic_acid],  # Carboxylic acid group
            ],
            'exclude_patterns': [
                [primary_amine, hydroxyl_group, amide_group, ether_linkage, sulfur_group, aromatic_ring],  # Exclude additional polar groups and aromatics
            ],
            'prediction': -1
        },
        {
            'number': 15,
            'description': 'High Fe/Hf Value: Amino acids with aromatic side chains (e.g., phenylalanine).',
            'patterns': [
                [alpha_amino_acid],  # Alpha amino acid
                [aromatic_ring],  # Aromatic side chain
            ],
            'prediction': 1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(p) for p in group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for group in rule['exclude_patterns']:
                compiled_group = [Chem.MolFromSmarts(p) for p in group]
                compiled_excludes.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_excludes
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for idx, compiled_group in enumerate(rule['compiled_patterns']):
                    group_match = False
                    for pat in compiled_group:
                        matches = mol.GetSubstructMatches(pat)
                        if matches:
                            # If a count threshold is specified for this pattern
                            if 'count_threshold' in rule and pat.GetSmarts() in rule['count_threshold']:
                                threshold = rule['count_threshold'][pat.GetSmarts()]
                                if len(matches) >= threshold:
                                    group_match = True
                                    break
                            else:
                                group_match = True
                                break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f"Rule {rule['number']}" for rule in rules])
    return df

--------------------------------------------------
    Target Name: Fe/Hf
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: Modifiers that are **linear aliphatic carboxylic acids** with a **primary amine (-NH₂)** group at the **terminal (ω) position** and a carbon chain length of **five or more carbons** result in a **high Fe/Hf** value.

  *Predicts high Fe/Hf for compounds like **5-aminopentanoic acid**, **7-aminoheptanoic acid**, and **8-aminooctanoic acid**.*

- **Rule 2**: Modifiers that are **aromatic carboxylic acids** substituted at the **para position** with a **strong electron-withdrawing group**, such as **nitro (-NO₂)**, **bromomethyl (-CH₂Br)**, or a **pyridyl ring**, result in a **high Fe/Hf** value.

  *Predicts high Fe/Hf for compounds like **4-nitrobenzoic acid**, **4-(bromomethyl)benzoic acid**, and **4-pyridin-4-ylbenzoic acid**.*

- **Rule 3**: Modifiers containing a **thiol (-SH) group** and a **carboxylic acid group** on an **aliphatic chain** result in a **high Fe/Hf** value.

  *Predicts high Fe/Hf for compounds like **3-sulfanylpropanoic acid** and **4-sulfanylbenzoic acid**.*

- **Rule 4**: Modifiers that are **amino acids** with **sulfur-containing side chains**, such as **methionine** or **cysteine derivatives**, result in a **high Fe/Hf** value due to sulfur's affinity for metal coordination.

  *Predicts high Fe/Hf for compounds like **(2S)-2-amino-4-methylsulfanylbutanoic acid** and **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid**.*

- **Rule 5**: Modifiers that are **linear aliphatic carboxylic acids** with a **hydroxyl (-OH)** group at the **terminal (ω) position** result in a **high Fe/Hf** value.

  *Predicts high Fe/Hf for compounds like **7-hydroxyheptanoic acid**.*

- **Rule 6**: Modifiers that are **polyether carboxylic acids** with at least **three ether linkages** and ending with a **carboxylic acid group** result in a **high Fe/Hf** value due to their ability to coordinate with metals.

  *Predicts high Fe/Hf for compounds like **2-[2-(2-methoxyethoxy)ethoxy]acetic acid** and **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**.*

- **Rule 7**: Modifiers that are **aromatic carboxylic acids** with **electron-donating groups** at the **para position**, such as **hydroxyl (-OH)**, **amino (-NH₂)**, or **methoxy (-OCH₃)**, result in a **low Fe/Hf** value.

  *Predicts low Fe/Hf for compounds like **4-hydroxybenzoic acid**, **4-aminobenzoic acid**, **4-methylbenzoic acid**, and **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid**.*

- **Rule 8**: Modifiers containing **multiple hydroxyl (-OH) groups** on an **aliphatic chain** or **ring system**, such as **polyols** and **sugar acids**, result in a **low Fe/Hf** value due to increased hydrophilicity and steric hindrance.

  *Predicts low Fe/Hf for compounds like **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** and **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid**.*

- **Rule 9**: Modifiers that are **heteroaromatic carboxylic acids** with the **carboxylic acid group** directly attached to the ring result in a **low Fe/Hf** value, possibly favoring coordination with hafnium.

  *Predicts low Fe/Hf for compounds like **pyridine-3-carboxylic acid**, **1H-pyrazole-4-carboxylic acid**, and **2-oxo-1H-pyridine-4-carboxylic acid**.*

- **Rule 10**: Modifiers containing **aldehyde (-CHO)** or **ketone (>C=O)** groups conjugated with an **aromatic ring** and a **carboxylic acid group** result in a **low Fe/Hf** value due to potential competition in coordination sites.

  *Predicts low Fe/Hf for compounds like **4-formylbenzoic acid** and **5-formyl-2-hydroxybenzoic acid**.*

- **Rule 11**: Modifiers that are **perfluorinated carboxylic acids** result in a **low Fe/Hf** value due to strong electron-withdrawing effects reducing metal coordination capability.

  *Predicts low Fe/Hf for compounds like **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**.*

- **Rule 12**: Modifiers that are **amino acids** with **bulky or electron-rich aromatic side chains**, such as **tryptophan**, result in a **low Fe/Hf** value due to steric hindrance and decreased coordination efficiency.

  *Predicts low Fe/Hf for compounds like **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid**.*

- **Rule 13**: Modifiers that are **linear aliphatic carboxylic acids** without additional coordinating functional groups or with **sterically hindered groups** result in a **low Fe/Hf** value.

  *Predicts low Fe/Hf for compounds like **octanoic acid** and **4-[(2,2,2-trifluoroacetyl)amino]butanoic acid**.*

- **Rule 14**: Modifiers that are **aromatic carboxylic acids** with **electron-withdrawing groups** at positions other than para (e.g., meta or ortho), and without strong coordinating groups, result in a **low Fe/Hf** value.

  *Predicts low Fe/Hf for compounds like **5-formyl-2-hydroxybenzoic acid** and **2-oxo-1H-pyridine-4-carboxylic acid**.*

- **Rule 15**: Modifiers that are **cyclic compounds** with **adjacent carbonyl (>C=O) groups** capable of chelation result in a **high Fe/Hf** value due to the formation of stable chelate rings with iron.

  *Predicts high Fe/Hf for compounds like **1,3-dioxo-2-benzofuran-5-carboxylic acid**.*

**End of Rules**

---

**Explanation:**

These rules were developed by analyzing the structural features of the modifiers in the dataset and considering their chemical properties and potential interactions with metal ions. The key factors influencing the Fe/Hf ratio are:

- **Coordination Ability**: Functional groups capable of coordinating with iron, such as amines, thiols, sulfur-containing groups, and certain oxygen-containing groups, enhance iron incorporation, leading to a **high Fe/Hf** value.

- **Electron-Withdrawing vs. Electron-Donating Groups**: Electron-withdrawing groups increase the acidity of the carboxylic acid and can enhance metal binding, while electron-donating groups can reduce metal coordination due to increased electron density or steric hindrance, leading to a **low Fe/Hf** value.

- **Steric Factors**: Bulky substituents or multiple substituents can create steric hindrance, reducing the ability of the modifier to coordinate effectively with iron, resulting in a **low Fe/Hf** value.

- **Chelation Potential**: Modifiers capable of forming stable chelate rings with iron ions (e.g., adjacent carbonyl groups) tend to result in a **high Fe/Hf** value due to the increased stability of the chelated complex.

**Summary of Rules:**

- **High Fe/Hf Modifiers**:
  - Linear aliphatic carboxylic acids with terminal primary amines and longer carbon chains (**Rule 1**).
  - Aromatic carboxylic acids with para-substituted strong electron-withdrawing groups (**Rule 2**).
  - Modifiers with thiol groups and carboxylic acids on aliphatic chains (**Rule 3**).
  - Amino acids with sulfur-containing side chains (**Rule 4**).
  - Linear aliphatic carboxylic acids with terminal hydroxyl groups (**Rule 5**).
  - Polyether carboxylic acids with three or more ether linkages (**Rule 6**).
  - Cyclic compounds with adjacent carbonyl groups capable of chelation (**Rule 15**).

- **Low Fe/Hf Modifiers**:
  - Aromatic carboxylic acids with electron-donating groups at the para position (**Rule 7**).
  - Modifiers with multiple hydroxyl groups, increasing hydrophilicity and steric hindrance (**Rule 8**).
  - Heteroaromatic carboxylic acids with the carboxylic acid group directly attached to the ring (**Rule 9**).
  - Modifiers with aldehyde or ketone groups conjugated with aromatic rings (**Rule 10**).
  - Perfluorinated carboxylic acids with strong electron-withdrawing fluorine atoms (**Rule 11**).
  - Amino acids with bulky or electron-rich aromatic side chains (**Rule 12**).
  - Linear aliphatic carboxylic acids without coordinating functional groups (**Rule 13**).
  - Aromatic carboxylic acids with electron-withdrawing groups at non-para positions and lacking strong coordinating groups (**Rule 14**).

These rules aim to cover a broad range of modifiers in the dataset, balancing simplicity and complexity while combining multiple sub-structural features. They are grounded in physical-chemical principles, such as coordination chemistry, electronic effects, and steric considerations, which influence the interaction of the modifiers with iron and hafnium ions during catalyst preparation.

---

By applying these rules, one can predict whether a given modifier is likely to result in a high or low Fe/Hf value based on its structural features. This can guide the selection and design of modifiers to optimize the catalyst's performance in the remote δ-C(sp³)–H bond functionalization reaction.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,1
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6; Test Accuracy: 0.0
    Train Support: 0.05714285714285714; Test Support: 0.0
    Train Confidence: 0.8148148148148149; Test Confidence: 0.5
    Train Lift: 1.622488501573469; Test Lift: NONE
    Train Leverage: 0.0035374149659864016; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define the rules with their associated SMARTS patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'High Fe/Hf Value: Linear aliphatic carboxylic acids with a primary amine (-NH2) at the terminal position and a carbon chain length of five or more carbons.',
            'patterns': [
                '[NX3;H2][C;X4H2][C;X4H2][C;X4H2][C;X4H2][C;X4H1](=O)[O;H1]',  # Primary amine at one end, carboxylic acid at the other, chain of at least 5 carbons
            ],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'High Fe/Hf Value: Aromatic carboxylic acids substituted at the para position with a strong electron-withdrawing group (nitro, bromomethyl, pyridyl ring).',
            'patterns': [
                '[cH]1ccc([NX3+](=O)[O-])cc1C(=O)[O;H1]',  # Nitro group at para position
                '[cH]1ccc(CBr)cc1C(=O)[O;H1]',  # Bromomethyl group at para position
                '[cH]1ccc(nc2ccccc2)cc1C(=O)[O;H1]',  # Pyridyl ring at para position
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'High Fe/Hf Value: Modifiers containing a thiol (-SH) group and a carboxylic acid group on an aliphatic chain.',
            'patterns': [
                '[SX2H][C;X4][C;X4][C;X4](=O)[O;H1]',  # Thiol and carboxylic acid on aliphatic chain
                '[SX2H][C;X4][C;X4](=O)[O;H1]',
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'High Fe/Hf Value: Amino acids with sulfur-containing side chains (e.g., methionine, cysteine derivatives).',
            'patterns': [
                '[N;H2][C;X4H]([C;X4H][SX2][C])[C](=O)[O;H1]',  # Methionine-like structures
                '[N;H2][C;X4H]([C;X4H][SX2H])[C](=O)[O;H1]',  # Cysteine-like structures
            ],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'High Fe/Hf Value: Linear aliphatic carboxylic acids with a hydroxyl (-OH) group at the terminal position.',
            'patterns': [
                '[O;H1][C;X4][C;X4][C;X4][C;X4](=O)[O;H1]',  # Terminal hydroxyl group
            ],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'High Fe/Hf Value: Polyether carboxylic acids with at least three ether linkages ending with a carboxylic acid group.',
            'patterns': [
                '[C;X4]([O][C;X4]){3,}[C](=O)[O;H1]',  # Three or more ether linkages
            ],
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'Low Fe/Hf Value: Aromatic carboxylic acids with electron-donating groups at the para position (hydroxyl, amino, methoxy, methyl).',
            'patterns': [
                '[cH]1ccc([OH,NH2,OMe,CH3])cc1C(=O)[O;H1]',  # EDG at para position
            ],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Low Fe/Hf Value: Modifiers containing multiple hydroxyl (-OH) groups on an aliphatic chain or ring system (polyols, sugar acids).',
            'patterns': [
                '[C;X4]([O;H1])[C;X4]([O;H1])[C;X4]([O;H1])[C](=O)[O;H1]',  # Multiple hydroxyls and carboxylic acid
            ],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Low Fe/Hf Value: Heteroaromatic carboxylic acids with the carboxylic acid group directly attached to the ring.',
            'patterns': [
                '[n,o,s][c][c][c][c][c][C](=O)[O;H1]',  # Heteroaromatic ring with attached carboxylic acid
            ],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Low Fe/Hf Value: Modifiers containing aldehyde (-CHO) or ketone (>C=O) groups conjugated with an aromatic ring and a carboxylic acid group.',
            'patterns': [
                '[c][CH](=O)[c][C](=O)[O;H1]',  # Aromatic aldehyde with carboxylic acid
                '[c][C](=O)[c][C](=O)[O;H1]',  # Aromatic ketone with carboxylic acid
            ],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Low Fe/Hf Value: Perfluorinated carboxylic acids.',
            'patterns': [
                '[C](F)(F)F[C](F)(F)F[C](=O)[O;H1]',  # Example pattern for perfluorinated acids
            ],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'Low Fe/Hf Value: Amino acids with bulky or electron-rich aromatic side chains (e.g., tryptophan).',
            'patterns': [
                '[N;H2][C;X4H]([C;X4H][c]1c2ccccc2[nH]c1)[C](=O)[O;H1]',  # Tryptophan-like structures
            ],
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Low Fe/Hf Value: Linear aliphatic carboxylic acids without additional coordinating functional groups or with sterically hindered groups.',
            'patterns': [
                '[C;X4]([C;X4])[C;X4][C;X4][C](=O)[O;H1]',  # Aliphatic acid without other groups
            ],
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'Low Fe/Hf Value: Aromatic carboxylic acids with electron-withdrawing groups at non-para positions and lacking strong coordinating groups.',
            'patterns': [
                '[c][c]([C](=O)[O;H1])[c][C](=O)[O;H1]',  # EWG at meta or ortho positions
            ],
            'prediction': -1
        },
        {
            'number': 15,
            'description': 'High Fe/Hf Value: Cyclic compounds with adjacent carbonyl (>C=O) groups capable of chelation.',
            'patterns': [
                'O=C1OC(=O)c2ccccc12',  # Example for adjacent carbonyls in a ring
            ],
            'prediction': 1
        },
    ]

    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for smarts in rule['patterns']:
            pat = Chem.MolFromSmarts(smarts)
            compiled_patterns.append(pat)
        rule['compiled_patterns'] = compiled_patterns

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = False
                for pat in rule['compiled_patterns']:
                    if mol.HasSubstructMatch(pat):
                        match = True
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f"Rule {rule['number']}" for rule in rules])
    return df

--------------------------------------------------
    Target Name: Fe/Hf
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: Modifiers that are **aliphatic carboxylic acids** with a terminal **primary amine (-NH₂)** group and a carbon chain length of **five or more carbons** result in a **high Fe/Hf** value.

  *Predicts high Fe/Hf for compounds like **5-aminopentanoic acid**, **7-aminoheptanoic acid**, and **8-aminooctanoic acid**.*

- **Rule 2**: Modifiers that are **aromatic carboxylic acids** with a **para-substituted group capable of strong metal coordination**, such as **nitro (-NO₂)**, **bromomethyl (-CH₂Br)**, **pyridyl**, or **conjugated ketone (>C=O) groups**, result in a **high Fe/Hf** value.

  *Predicts high Fe/Hf for compounds like **4-nitrobenzoic acid**, **4-(bromomethyl)benzoic acid**, **4-pyridin-4-ylbenzoic acid**, **1,3-dioxo-2-benzofuran-5-carboxylic acid**, and **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid**.*

- **Rule 3**: Modifiers containing a **sulfur-containing functional group**, such as a **thiol (-SH)** or **thioether (-S-)**, along with a **carboxylic acid group**, result in a **high Fe/Hf** value due to sulfur's strong affinity for metal coordination.

  *Predicts high Fe/Hf for compounds like **3-sulfanylpropanoic acid**, **4-sulfanylbenzoic acid**, and **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid**.*

- **Rule 4**: Modifiers that are **aliphatic carboxylic acids** containing **polyether chains** with at least **three oxygen atoms** capable of metal coordination result in a **high Fe/Hf** value.

  *Predicts high Fe/Hf for compounds like **2-[2-(2-methoxyethoxy)ethoxy]acetic acid** and **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**.*

- **Rule 5**: Modifiers that are **aliphatic carboxylic acids** with a terminal **hydroxyl (-OH)** group on a chain of **seven or more carbons** result in a **high Fe/Hf** value due to increased chain length and additional coordination site.

  *Predicts high Fe/Hf for compounds like **7-hydroxyheptanoic acid**.*

- **Rule 6**: Modifiers that are **amino acids** with **aromatic side chains** result in a **variable Fe/Hf** value depending on the side chain's ability to coordinate with metals.

  - **Rule 6a**: If the aromatic side chain lacks bulky groups that hinder coordination (e.g., **phenylalanine**), the modifier results in a **high Fe/Hf** value.

    *Predicts high Fe/Hf for compounds like **(2S)-2-amino-3-phenylpropanoic acid**.*

  - **Rule 6b**: If the aromatic side chain is bulky with groups that hinder coordination (e.g., **tryptophan's indole ring**), the modifier results in a **low Fe/Hf** value.

    *Predicts low Fe/Hf for compounds like **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid**.*

- **Rule 7**: Modifiers that are **aromatic carboxylic acids** with **electron-donating groups** at the **para position**, such as **hydroxyl (-OH)**, **amino (-NH₂)**, or **methyl (-CH₃)**, result in a **low Fe/Hf** value due to decreased acidity and weaker metal coordination.

  *Predicts low Fe/Hf for compounds like **4-hydroxybenzoic acid**, **4-aminobenzoic acid**, and **4-methylbenzoic acid**.*

- **Rule 8**: Modifiers containing **multiple hydroxyl (-OH) groups** on an **aliphatic chain** or **cyclic structure**, such as **sugar acids** or **polyols**, result in a **low Fe/Hf** value due to increased hydrophilicity and steric hindrance, which reduces metal coordination.

  *Predicts low Fe/Hf for compounds like **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** and **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid**.*

- **Rule 9**: Modifiers that are **heteroaromatic carboxylic acids** with the **heteroatom adjacent to the carboxyl group**, such as in **pyridine-3-carboxylic acid** or **pyrazole-4-carboxylic acid**, result in a **low Fe/Hf** value due to competition between the heteroatom and the carboxyl group for metal binding.

  *Predicts low Fe/Hf for compounds like **pyridine-3-carboxylic acid**, **1H-pyrazole-4-carboxylic acid**, and **2-oxo-1H-pyridine-4-carboxylic acid**.*

- **Rule 10**: Modifiers that are **aliphatic carboxylic acids** without any additional coordinating functional groups or with electron-withdrawing groups that do not effectively coordinate with metals result in a **low Fe/Hf** value.

  *Predicts low Fe/Hf for compounds like **octanoic acid** and **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**.*

- **Rule 11**: Modifiers that are **aromatic carboxylic acids** with **aldehyde (-CHO)** or **formyl** groups at the **para position** result in a **low Fe/Hf** value due to reduced acidity and possible steric hindrance affecting metal coordination.

  *Predicts low Fe/Hf for compounds like **4-formylbenzoic acid** and **5-formyl-2-hydroxybenzoic acid**.*

**End of Rules**

---

**Explanation:**

These rules are derived from an analysis of the structural features of the modifiers and their chemical interactions with metal ions, particularly iron and hafnium. The key factors influencing the Fe/Hf ratio are:

- **Coordination Ability**: Functional groups capable of coordinating with iron, such as amines, thiols, ethers, certain aromatic rings, and ketones, enhance iron incorporation, leading to a **high Fe/Hf** value.

- **Electron Donating/Electron Withdrawing Effects**: Electron-donating groups reduce the acidity of the carboxylic acid and weaken metal coordination, resulting in a **low Fe/Hf** value. Electron-withdrawing groups can enhance metal binding if they facilitate coordination.

- **Steric Factors**: Bulky substituents or multiple hydroxyl groups can create steric hindrance, reducing the modifier's ability to coordinate with iron, resulting in a **low Fe/Hf** value.

- **Chain Length**: Longer carbon chains in aliphatic acids provide flexibility and additional coordination sites, which can enhance metal binding and result in a **high Fe/Hf** value.

- **Heteroatoms and Competition**: In heteroaromatic compounds, heteroatoms adjacent to the carboxyl group can compete for metal binding, reducing the Fe/Hf ratio.

---

**Summary of Rules:**

- **High Fe/Hf Modifiers**:

  - **Rule 1**: Linear aliphatic carboxylic acids with terminal primary amines and longer carbon chains.
  - **Rule 2**: Aromatic carboxylic acids with para-substituted groups capable of strong metal coordination (e.g., nitro, bromomethyl, pyridyl, conjugated ketones).
  - **Rule 3**: Modifiers with sulfur-containing groups (thiols, thioethers) and carboxylic acids.
  - **Rule 4**: Aliphatic carboxylic acids with polyether chains containing multiple oxygen atoms.
  - **Rule 5**: Long-chain aliphatic carboxylic acids with terminal hydroxyl groups.
  - **Rule 6a**: Amino acids with aromatic side chains that do not hinder coordination (e.g., phenylalanine).

- **Low Fe/Hf Modifiers**:

  - **Rule 6b**: Amino acids with bulky aromatic side chains that hinder coordination (e.g., tryptophan).
  - **Rule 7**: Aromatic carboxylic acids with para electron-donating groups (hydroxyl, amino, methyl).
  - **Rule 8**: Modifiers with multiple hydroxyl groups leading to steric hindrance (polyols, sugar acids).
  - **Rule 9**: Heteroaromatic carboxylic acids with heteroatoms adjacent to the carboxyl group.
  - **Rule 10**: Aliphatic carboxylic acids without additional coordinating groups or with non-coordinating electron-withdrawing groups.
  - **Rule 11**: Aromatic carboxylic acids with para aldehyde or formyl groups causing steric hindrance.

---

By applying these rules, we can predict whether a given modifier is likely to result in a high or low Fe/Hf value based on its structural features. This aids in selecting and designing modifiers to optimize the catalyst's performance in the radical-mediated remote δ-C(sp³)–H bond functionalization reaction.

---

**Note:** The rules have been refined to improve accuracy and coverage of the dataset. Rule 6 has been expanded to account for the variability in Fe/Hf values observed with amino acids bearing aromatic side chains, acknowledging that steric hindrance and coordination ability can vary depending on the specific structure of the side chain.

------------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12
0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0
0,0,1,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,1,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,1,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,-1,-1,0,0,-1
0,0,1,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,-1,-1,0,0,-1
0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,-1,-1,0,0
0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.5714285714285714; Test Accuracy: 0.0
    Train Support: 0.05714285714285714; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 2.058823529411765; Test Lift: NONE
    Train Leverage: 0.029387755102040815; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define the SMARTS patterns for each rule
    # Rule 1: Aliphatic carboxylic acids with terminal primary amine (-NH2) group and a carbon chain length of five or more carbons
    rule1_patterns = [
        # Aliphatic carboxylic acid chain of five or more carbons
        '[CX3](=O)[OX1H0-,OX2H1][C;X4][C;X4][C;X4][C;X4][C;X4][C;X4][C;X4]',  # Acid with chain length >=5
        # Terminal primary amine (-NH2) group
        '[NX3H2][C;X4]'  # Primary amine at the end of a chain
    ]
    
    # Rule 2: Aromatic carboxylic acids with para-substituted strong metal coordinating groups
    rule2_patterns = [
        # Aromatic carboxylic acid
        'c1ccc(cc1)C(=O)[O;H,-]',  # Benzoic acid core
        # Para-substituted groups capable of strong metal coordination
        [
            'c1ccc(cc1[NX3](=O)=O)C(=O)[O;H,-]',  # Nitro group at para position
            'c1ccc(cc1CBr)C(=O)[O;H,-]',          # Bromomethyl at para position
            'c1ccc(cc1c2ccccn2)C(=O)[O;H,-]',     # Pyridyl group at para position
            'c1ccc(cc1C(=O)C)C(=O)[O;H,-]'        # Conjugated ketone group at para position
        ]
    ]
    
    # Rule 3: Modifiers containing a sulfur functional group (thiol or thioether) and a carboxylic acid group
    rule3_patterns = [
        # Carboxylic acid group
        '[CX3](=O)[OX1H0-,OX2H1]',
        # Sulfur-containing functional group
        '[SX2H]',  # Thiol (-SH)
        '[#16X2][!#16]',  # Thioether (-S-)
    ]
    
    # Rule 4: Aliphatic carboxylic acids containing polyether chains with at least three oxygen atoms
    rule4_patterns = [
        # Carboxylic acid group
        '[CX3](=O)[OX1H0-,OX2H1]',
        # Polyether chain with at least three oxygen atoms
        '[OX2][CX4][OX2][CX4][OX2][CX4]',  # -O-C-O-C-O-C-
    ]
    
    # Rule 5: Aliphatic carboxylic acids with terminal hydroxyl (-OH) group on a chain of seven or more carbons
    rule5_patterns = [
        # Carboxylic acid group
        '[CX3](=O)[OX1H0-,OX2H1][C;X4][C;X4][C;X4][C;X4][C;X4][C;X4][C;X4][C;X4]',  # Acid with chain length >=7
        # Terminal hydroxyl group
        '[OX2H][C;X4]',
    ]
    
    # Rule 6a: Amino acids with aromatic side chains that do not hinder coordination (e.g., phenylalanine)
    rule6a_patterns = [
        # Amino acid backbone
        '[NX3][CX4H]([*])[CX3](=O)[OX1H0-,OX2H1]',
        # Aromatic side chain without bulky groups
        '[CX4][c]',
    ]
    
    # Rule 6b: Amino acids with bulky aromatic side chains that hinder coordination (e.g., tryptophan)
    rule6b_patterns = [
        # Amino acid backbone
        '[NX3][CX4H]([*])[CX3](=O)[OX1H0-,OX2H1]',
        # Bulky aromatic side chain
        '[CX4][c][nH]',  # Indole ring (tryptophan)
    ]
    
    # Rule 7: Aromatic carboxylic acids with para electron-donating groups (hydroxyl, amino, methyl)
    rule7_patterns = [
        # Aromatic carboxylic acid
        'c1ccc(cc1)C(=O)[O;H,-]',
        # Para-substituted electron-donating groups
        [
            'c1ccc(cc1[OX2H])C(=O)[O;H,-]',  # Hydroxyl group at para position
            'c1ccc(cc1[NX3H2])C(=O)[O;H,-]',  # Amino group at para position
            'c1ccc(cc1C)C(=O)[O;H,-]',         # Methyl group at para position
        ]
    ]
    
    # Rule 8: Modifiers with multiple hydroxyl (-OH) groups on an aliphatic chain or cyclic structure
    rule8_patterns = [
        # Carboxylic acid group
        '[CX3](=O)[OX1H0-,OX2H1]',
        # Multiple hydroxyl groups (at least two)
        '[#6][OX2H]',  # Alcohols attached to carbons
    ]
    
    # Rule 9: Heteroaromatic carboxylic acids with heteroatom adjacent to the carboxyl group
    rule9_patterns = [
        # Heteroaromatic ring with heteroatom adjacent to carboxyl group
        '[n][c][c][c][c][C](=O)[O;H,-]',  # Pyridine-3-carboxylic acid
    ]
    
    # Rule 10: Aliphatic carboxylic acids without any additional coordinating functional groups
    rule10_patterns = [
        # Carboxylic acid group
        '[CX3](=O)[OX1H0-,OX2H1]',
        # Exclude any additional donor groups (amines, thiols, ethers)
        '![NX3]',  # Exclude amines
        '![SX2H]',  # Exclude thiols
        '![OX2][CX4][OX2]',  # Exclude ethers
    ]
    
    # Rule 11: Aromatic carboxylic acids with aldehyde (-CHO) or formyl groups at the para position
    rule11_patterns = [
        # Aromatic carboxylic acid
        'c1ccc(cc1)C(=O)[O;H,-]',
        # Para-substituted aldehyde or formyl group
        [
            'c1ccc(cc1C=O)C(=O)[O;H,-]',  # Aldehyde at para position
            'c1ccc(cc1[C](=O)H)C(=O)[O;H,-]',  # Formyl group at para position
        ]
    ]
    
    # Compile the SMARTS patterns for each rule
    compiled_rules = []
    rules = [
        {'number': 1, 'patterns': rule1_patterns, 'prediction': 1},
        {'number': 2, 'patterns': rule2_patterns, 'prediction': 1},
        {'number': 3, 'patterns': rule3_patterns, 'prediction': 1},
        {'number': 4, 'patterns': rule4_patterns, 'prediction': 1},
        {'number': 5, 'patterns': rule5_patterns, 'prediction': 1},
        {'number': 6, 'patterns': rule6a_patterns, 'prediction': 1},
        {'number': 7, 'patterns': rule6b_patterns, 'prediction': -1},
        {'number': 8, 'patterns': rule7_patterns, 'prediction': -1},
        {'number': 9, 'patterns': rule8_patterns, 'prediction': -1},
        {'number':10, 'patterns': rule9_patterns, 'prediction': -1},
        {'number':11, 'patterns': rule10_patterns, 'prediction': -1},
        {'number':12, 'patterns': rule11_patterns, 'prediction': -1},
    ]
    
    for rule in rules:
        compiled_rule = {'number': rule['number'], 'prediction': rule['prediction'], 'patterns': []}
        patterns = rule['patterns']
        if isinstance(patterns[0], list):
            # Multiple patterns for the rule
            compiled_subpatterns = []
            for subpattern in patterns:
                if isinstance(subpattern, list):
                    compiled_subpatterns.append([Chem.MolFromSmarts(p) for p in subpattern])
                else:
                    compiled_subpatterns.append(Chem.MolFromSmarts(subpattern))
            compiled_rule['patterns'] = compiled_subpatterns
        else:
            compiled_rule['patterns'] = [Chem.MolFromSmarts(p) if isinstance(p, str) else [Chem.MolFromSmarts(s) for s in p] for p in patterns]
        compiled_rules.append(compiled_rule)
    
    # Initialize the result matrix
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # Invalid SMILES, append zeros
            results.append([0]*len(compiled_rules))
            continue
        row = []
        for rule in compiled_rules:
            try:
                match = True
                for pat in rule['patterns']:
                    if isinstance(pat, list):
                        # For patterns that are lists (OR conditions)
                        submatch = False
                        for subpat in pat:
                            if mol.HasSubstructMatch(subpat):
                                submatch = True
                                break
                        if not submatch:
                            match = False
                            break
                    else:
                        # Single pattern
                        if not mol.HasSubstructMatch(pat):
                            match = False
                            break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception:
                # In case of error, append 0
                row.append(0)
        results.append(row)
    # Create the DataFrame
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in compiled_rules])
    return df

--------------------------------------------------
    Target Name: Fe/Hf
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: Modifiers that are **aliphatic carboxylic acids** with a terminal **primary amine (-NH₂)** group (**ω-amino acids**), regardless of chain length, result in a **high Fe/Hf** value due to effective coordination with iron.

  *Predicts high Fe/Hf for compounds like **5-aminopentanoic acid**, **7-aminoheptanoic acid**, **8-aminooctanoic acid**, and **3-aminopropanoic acid**.*

- **Rule 2**: Modifiers that are **aromatic carboxylic acids** with **para-substituted electron-withdrawing groups** capable of strong metal coordination, such as **nitro (-NO₂)**, **halomethyl (-CH₂X)**, **pyridyl rings**, or **conjugated ketone (>C=O) groups**, result in a **high Fe/Hf** value.

  *Predicts high Fe/Hf for compounds like **4-nitrobenzoic acid**, **4-(bromomethyl)benzoic acid**, **4-pyridin-4-ylbenzoic acid**, **1,3-dioxo-2-benzofuran-5-carboxylic acid**, and **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid**.*

- **Rule 3**: Modifiers containing **sulfur-containing functional groups**, such as **thiols (-SH)** or **thioethers (-S-)**, along with a **carboxylic acid group**, result in a **high Fe/Hf** value due to sulfur's strong affinity for metal coordination.

  *Predicts high Fe/Hf for compounds like **3-sulfanylpropanoic acid**, **4-sulfanylbenzoic acid**, and **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid**.*

- **Rule 4**: Modifiers that are **aliphatic carboxylic acids** with **polyether chains** containing multiple **ether linkages (-O-)** and/or terminal **amino groups (-NH₂)** result in a **high Fe/Hf** value due to the ability of oxygen and nitrogen atoms to coordinate with metals.

  *Predicts high Fe/Hf for compounds like **2-[2-(2-methoxyethoxy)ethoxy]acetic acid** and **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**.*

- **Rule 5**: Modifiers that are **amino acids** with **unhindered side chains** capable of metal coordination, such as **phenylalanine** and **aspartic acid**, result in a **high Fe/Hf** value.

  *Predicts high Fe/Hf for compounds like **(2S)-2-amino-3-phenylpropanoic acid** and **(2S)-2-aminobutanedioic acid**.*

- **Rule 6**: Modifiers that are **aromatic carboxylic acids** with **para-substituted electron-donating groups**, such as **hydroxyl (-OH)**, **amino (-NH₂)**, **alkyl (-CH₃)**, or **formyl (-CHO)** groups, result in a **low Fe/Hf** value due to decreased acidity and weaker metal coordination.

  *Predicts low Fe/Hf for compounds like **4-hydroxybenzoic acid**, **4-aminobenzoic acid**, **4-methylbenzoic acid**, and **4-formylbenzoic acid**.*

- **Rule 7**: Modifiers that are **aliphatic carboxylic acids** without additional coordinating functional groups or with functional groups that do not enhance metal coordination result in a **low Fe/Hf** value.

  *Predicts low Fe/Hf for compounds like **octanoic acid**, **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**, and **4-oxoheptanedioic acid**.*

- **Rule 8**: Modifiers containing **multiple hydroxyl (-OH) groups** on an **aliphatic chain** or **cyclic structure** (such as **polyols** or **sugar acids**) result in a **low Fe/Hf** value due to increased hydrophilicity and steric hindrance, which reduce metal coordination.

  *Predicts low Fe/Hf for compounds like **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** and **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid**.*

- **Rule 9**: Modifiers that are **heteroaromatic carboxylic acids** with the **heteroatom adjacent to the carboxyl group**, such as in **pyridine-3-carboxylic acid** or **pyrazole-4-carboxylic acid**, result in a **low Fe/Hf** value due to competitive binding that reduces effective metal coordination.

  *Predicts low Fe/Hf for compounds like **pyridine-3-carboxylic acid** and **1H-pyrazole-4-carboxylic acid**.*

- **Rule 10**: Modifiers with **bulky side chains** or functional groups that cause **steric hindrance**, impeding effective metal coordination, result in a **low Fe/Hf** value.

  *Predicts low Fe/Hf for compounds like **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** and **5-(4-hydroxyphenyl)pentanoic acid**.*

- **Rule 11**: Modifiers that have **multiple functional groups** leading to **chelation** or internal hydrogen bonding, which competes with metal coordination, result in a **low Fe/Hf** value.

  *Predicts low Fe/Hf for compounds like **2-[(4-hydroxybenzoyl)amino]acetic acid** and **2-oxo-1H-pyridine-4-carboxylic acid**.*

**End of Rules**

---

**Explanation:**

These refined rules are derived from analyzing the structural features of the modifiers and their chemical interactions with metal ions, particularly iron (Fe) and hafnium (Hf). The rules focus on the ability of functional groups within the modifiers to coordinate with iron ions, thus influencing the Fe/Hf ratio in the catalyst.

**Key Factors Influencing Fe/Hf Ratio:**

1. **Coordination Ability:**
   - **Strong Coordinating Groups**: Functional groups like **amines (-NH₂)**, **thiols (-SH)**, **thioethers (-S-)**, **ethers (-O-)**, **nitro groups (-NO₂)**, and **pyridyl rings** have lone pairs of electrons that can effectively coordinate with metal ions like Fe. Modifiers containing these groups tend to result in a **high Fe/Hf** value.

2. **Electronic Effects:**
   - **Electron-Withdrawing Groups**: These groups increase the acidity of the carboxylic acid and enhance the ability of the modifier to coordinate with metal ions, leading to a **high Fe/Hf** value.
     - *Examples*: **Nitro (-NO₂)**, **halomethyl (-CH₂X)**, **conjugated ketones (>C=O)**.
   - **Electron-Donating Groups**: These groups decrease the acidity of the carboxylic acid and weaken metal coordination, resulting in a **low Fe/Hf** value.
     - *Examples*: **Hydroxyl (-OH)**, **amino (-NH₂)**, **alkyl (-CH₃)**, **formyl (-CHO)**.

3. **Steric Factors:**
   - **Steric Hindrance**: Bulky groups or multiple substituents near the coordination site can hinder the ability of the modifier to effectively coordinate with the metal ion, leading to a **low Fe/Hf** value.
   - **Chain Length and Flexibility**: Longer aliphatic chains with terminal coordinating groups can increase flexibility, allowing better access to the metal ion, resulting in a **high Fe/Hf** value.

4. **Multiple Functional Groups and Chelation:**
   - **Chelating Groups**: Modifiers with multiple functional groups that can chelate or form internal bonds may reduce the availability of coordinating sites for the metal ion, resulting in a **low Fe/Hf** value.

5. **Competition for Metal Binding:**
   - **Heteroatoms Adjacent to Carboxyl Group**: In heteroaromatic carboxylic acids, heteroatoms (like nitrogen) adjacent to the carboxyl group can compete with it for metal binding, decreasing effective coordination with Fe and leading to a **low Fe/Hf** value.

---

**Summary of Rules:**

- **High Fe/Hf Modifiers**:
  - **Rule 1**: Aliphatic carboxylic acids with terminal primary amines (ω-amino acids).
  - **Rule 2**: Aromatic carboxylic acids with para electron-withdrawing groups capable of strong metal coordination.
  - **Rule 3**: Modifiers with sulfur-containing groups (thiols, thioethers) alongside carboxylic acids.
  - **Rule 4**: Aliphatic carboxylic acids with polyether chains and/or terminal amino groups.
  - **Rule 5**: Amino acids with unhindered side chains capable of metal coordination (e.g., phenylalanine, aspartic acid).

- **Low Fe/Hf Modifiers**:
  - **Rule 6**: Aromatic carboxylic acids with para electron-donating groups.
  - **Rule 7**: Aliphatic carboxylic acids without additional coordinating groups.
  - **Rule 8**: Modifiers with multiple hydroxyl groups (polyols, sugar acids).
  - **Rule 9**: Heteroaromatic carboxylic acids with heteroatoms adjacent to the carboxyl group.
  - **Rule 10**: Modifiers with bulky side chains causing steric hindrance.
  - **Rule 11**: Modifiers with multiple functional groups leading to chelation or internal bonding.

---

**Applying the Rules to the Dataset:**

- **High Fe/Hf Examples:**
  - **5-Aminopentanoic Acid**: Fits Rule 1; high Fe/Hf due to terminal amine.
  - **4-Nitrobenzoic Acid**: Fits Rule 2; high Fe/Hf due to para nitro group.
  - **3-Sulfanylpropanoic Acid**: Fits Rule 3; high Fe/Hf due to thiol group.
  - **2-[2-(2-Methoxyethoxy)ethoxy]acetic Acid**: Fits Rule 4; high Fe/Hf due to polyether chain.
  - **(2S)-2-Amino-3-Phenylpropanoic Acid**: Fits Rule 5; high Fe/Hf due to phenyl side chain.

- **Low Fe/Hf Examples:**
  - **4-Aminobenzoic Acid**: Fits Rule 6; low Fe/Hf due to para amino group.
  - **Octanoic Acid**: Fits Rule 7; low Fe/Hf due to lack of coordinating groups.
  - **(2R,3S,4R,5R)-2,3,4,5,6-Pentahydroxyhexanoic Acid**: Fits Rule 8; low Fe/Hf due to multiple hydroxyl groups.
  - **Pyridine-3-Carboxylic Acid**: Fits Rule 9; low Fe/Hf due to heteroatom competition.
  - **(2R)-2-Amino-3-(1H-indol-3-yl)propanoic Acid**: Fits Rule 10; low Fe/Hf due to bulky indole ring.

---

**Conclusion:**

The rules generated provide a predictive framework for determining the impact of molecular modifiers on the Fe/Hf ratio based on their structural features and functional groups. By considering coordination ability, electronic effects, steric factors, and the presence of competing functional groups, these rules help in understanding and predicting the behavior of modifiers in the catalyst system.

Chemists can use these rules to select or design new modifiers that will enhance or suppress iron incorporation in the catalyst, thus optimizing the yield of the desired radical-mediated remote δ-C(sp³)–H bond functionalization reaction.

---

**Note:** These rules are intended to cover a broad range of the dataset while balancing simplicity and complexity. They focus on direct combinations of functional groups and their known chemical properties to ensure clear predictions of high or low Fe/Hf values.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,-1,0,0,0
1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0
0,0,1,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,-1,0,0,0
1,0,0,0,0,0,0,0,0,0,0
1,0,0,1,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.8; Test Accuracy: 0.0
    Train Support: 0.1; Test Support: 0.0
    Train Confidence: 0.9; Test Confidence: 0.5
    Train Lift: 1.8186274509803926; Test Lift: NONE
    Train Leverage: 0.04068027210884354; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns based on the suggestions
    
    # Carboxylic acid group (both neutral and anionic forms)
    carboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1]'
    
    # Rule 1: Aliphatic carboxylic acids with terminal primary amine (-NH2) group (omega-amino acids)
    # Terminal primary aliphatic amine (-NH2) connected to two methylene groups
    primary_aliphatic_amine_terminal = '[NX3H2][CX4H2][CX4H2]'
    
    # Rule 2: Aromatic carboxylic acids with para-substituted electron-withdrawing groups capable of strong metal coordination
    # Define specific patterns for para-substituted nitro, halomethyl, pyridyl rings, conjugated ketone
    
    # Para-substituted nitro group on aromatic carboxylic acid
    para_nitro_on_aromatic = 'c1ccc(cc1[N+](=O)[O-])C(=O)[O-,OH]'
    
    # Para-substituted halomethyl group on aromatic carboxylic acid
    para_halomethyl_on_aromatic = 'c1ccc(cc1C[Cl,Br,I,F])C(=O)[O-,OH]'
    
    # Para-substituted pyridyl ring connected to aromatic carboxylic acid
    para_pyridyl_on_aromatic = 'c1ccc(cc1c2ccncc2)C(=O)[O-,OH]'
    
    # Para-substituted conjugated ketone on aromatic carboxylic acid
    para_conjugated_ketone_on_aromatic = 'c1ccc(cc1C(=O)C=C)C(=O)[O-,OH]'
    
    # Rule 3: Modifiers containing sulfur-containing functional groups (thiols or thioethers) and carboxylic acid group
    # Thiol group (-SH)
    thiol_group = '[#16X2H]'
    
    # Thioether group (-S-), updated per Suggestion 6
    thioether_group = '[#16X2][#6]'
    
    # Rule 4: Aliphatic carboxylic acids with polyether chains and/or terminal amino groups
    # Ether linkage in aliphatic chain
    ether_linkage = '[CX4][OX2][CX4]'
    
    # Rule 5: Amino acids with unhindered side chains capable of metal coordination
    # General amino acid pattern with side chains capable of coordination
    amino_acid_with_side_chain = '[NX3H2][CX4H]([CX4H2])[CX3](=O)[O-,OH]'
    
    # Rule 6: Aromatic carboxylic acids with para-substituted electron-donating groups
    # Para-substituted hydroxyl group on aromatic carboxylic acid
    para_hydroxyl_on_aromatic = 'c1ccc(cc1[OH])C(=O)[O-,OH]'
    
    # Para-substituted amino group on aromatic carboxylic acid
    para_amino_on_aromatic = 'c1ccc(cc1[NH2])C(=O)[O-,OH]'
    
    # Para-substituted methyl group on aromatic carboxylic acid
    para_methyl_on_aromatic = 'c1ccc(cc1C)C(=O)[O-,OH]'
    
    # Para-substituted formyl group on aromatic carboxylic acid
    para_formyl_on_aromatic = 'c1ccc(cc1C=O)C(=O)[O-,OH]'
    
    # Rule 7: Aliphatic carboxylic acids without additional coordinating functional groups
    # Exclude patterns (coordinating groups)
    exclude_patterns_rule7 = [
        '[NX3]',  # Exclude amines
        '[#16]',  # Exclude sulfur-containing groups
        '[OX2][CX4]',  # Exclude ethers
        '[OH]',  # Exclude hydroxyl groups
        '[a]',    # Exclude aromatic atoms
    ]
    
    # Rule 8: Modifiers with multiple hydroxyl groups (-OH) and a carboxylic acid group
    # Hydroxyl group excluding those on carboxylic acids (Suggestion 5)
    hydroxyl_group = '[OX2H;!$([OX2H][CX3](=O)[O-,OH])]'
    
    # Rule 9: Heteroaromatic carboxylic acids with heteroatom adjacent to carboxyl group
    heteroaromatic_carboxylic_acid_adjacent = '[n,o,s][c][CX3](=O)[O-,OH]'
    
    # Rule 10: Modifiers with bulky side chains causing steric hindrance
    # Indole ring (bulky side chain)
    indole_ring = 'c1ccc2c(c1)[nH]cc2'
    
    # Rule 11: Modifiers with multiple functional groups leading to chelation or internal hydrogen bonding
    chelating_groups = [
        '[NX3][CX3](=O)[OX2H1]',  # Amide group adjacent to hydroxyl
        '[OX2H][CX3](=O)[OX2H1]',  # Hydroxyl adjacent to carbonyl
    ]
    
    # Start defining rules
    rules = []
    
    # Rule 1
    rule1 = {
        'number': 1,
        'description': 'Aliphatic carboxylic acids with terminal primary amine (-NH2) group (omega-amino acids)',
        'patterns': [
            carboxylic_acid,
            primary_aliphatic_amine_terminal
        ],
        'exclude_patterns': [
            '[a]'  # Exclude aromatic atoms directly attached to functional groups
        ],
        'prediction': 1
    }
    rules.append(rule1)
    
    # Rule 2
    rule2_patterns = [
        para_nitro_on_aromatic,
        para_halomethyl_on_aromatic,
        para_pyridyl_on_aromatic,
        para_conjugated_ketone_on_aromatic
    ]
    rule2 = {
        'number': 2,
        'description': 'Aromatic carboxylic acids with para-substituted EWGs capable of strong metal coordination',
        'patterns': rule2_patterns,
        'prediction': 1
    }
    rules.append(rule2)
    
    # Rule 3
    rule3 = {
        'number': 3,
        'description': 'Modifiers containing sulfur-containing functional groups (thiols or thioethers) and carboxylic acid group',
        'patterns': [
            carboxylic_acid,
            [thiol_group, thioether_group]
        ],
        'prediction': 1
    }
    rules.append(rule3)
    
    # Rule 4
    rule4 = {
        'number': 4,
        'description': 'Aliphatic carboxylic acids with polyether chains and/or terminal amino groups',
        'patterns': [
            carboxylic_acid,
            ether_linkage
        ],
        'prediction': 1
    }
    rules.append(rule4)
    
    # Rule 5
    rule5 = {
        'number': 5,
        'description': 'Amino acids with unhindered side chains capable of metal coordination',
        'patterns': [
            amino_acid_with_side_chain
        ],
        'prediction': 1
    }
    rules.append(rule5)
    
    # Rule 6
    rule6_patterns = [
        para_hydroxyl_on_aromatic,
        para_amino_on_aromatic,
        para_methyl_on_aromatic,
        para_formyl_on_aromatic
    ]
    rule6 = {
        'number': 6,
        'description': 'Aromatic carboxylic acids with para-substituted electron-donating groups',
        'patterns': rule6_patterns,
        'prediction': -1
    }
    rules.append(rule6)
    
    # Rule 7
    rule7 = {
        'number': 7,
        'description': 'Aliphatic carboxylic acids without additional coordinating functional groups',
        'patterns': [
            carboxylic_acid
        ],
        'exclude_patterns': exclude_patterns_rule7,
        'prediction': -1
    }
    rules.append(rule7)
    
    # Rule 8
    rule8 = {
        'number': 8,
        'description': 'Modifiers with multiple hydroxyl groups (-OH) and a carboxylic acid group',
        'patterns': [
            carboxylic_acid,
            hydroxyl_group
        ],
        'count_threshold': {
            hydroxyl_group: 2  # At least 2 hydroxyl groups
        },
        'prediction': -1
    }
    rules.append(rule8)
    
    # Rule 9
    rule9 = {
        'number': 9,
        'description': 'Heteroaromatic carboxylic acids with heteroatom adjacent to carboxyl group',
        'patterns': [
            heteroaromatic_carboxylic_acid_adjacent
        ],
        'prediction': -1
    }
    rules.append(rule9)
    
    # Rule 10
    rule10 = {
        'number': 10,
        'description': 'Modifiers with bulky side chains causing steric hindrance',
        'patterns': [
            indole_ring
        ],
        'prediction': -1
    }
    rules.append(rule10)
    
    # Rule 11
    rule11 = {
        'number': 11,
        'description': 'Modifiers with multiple functional groups leading to chelation or internal hydrogen bonding',
        'patterns': chelating_groups,
        'prediction': -1
    }
    rules.append(rule11)
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for pat in rule.get('patterns', []):
            if isinstance(pat, list):
                # List of patterns, any of which can match
                compiled_pat = [Chem.MolFromSmarts(p) for p in pat]
                compiled_patterns.append(compiled_pat)
            else:
                compiled_patterns.append(Chem.MolFromSmarts(pat))
        rule['compiled_patterns'] = compiled_patterns
        
        # Compile exclude patterns
        exclude_pats = rule.get('exclude_patterns', [])
        compiled_exclude_patterns = [Chem.MolFromSmarts(p) for p in exclude_pats]
        rule['compiled_exclude_patterns'] = compiled_exclude_patterns
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # First check exclude patterns
                for pat in rule['compiled_exclude_patterns']:
                    if mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Now check required patterns
                for pat in rule['compiled_patterns']:
                    if isinstance(pat, list):
                        # Any pattern in the list can match
                        group_match = False
                        for subpat in pat:
                            if mol.HasSubstructMatch(subpat):
                                group_match = True
                                break
                        if not group_match:
                            match = False
                            break
                    else:
                        # Single pattern
                        if not mol.HasSubstructMatch(pat):
                            match = False
                            break
                # Check count thresholds if any
                if match and 'count_threshold' in rule:
                    for sub_pat_str, threshold in rule['count_threshold'].items():
                        sub_pat = Chem.MolFromSmarts(sub_pat_str)
                        matches = mol.GetSubstructMatches(sub_pat, uniquify=False)
                        if len(matches) < threshold:
                            match = False
                            break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: Fe/Hf
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: Modifiers that are **aliphatic carboxylic acids** with a terminal **primary amino group (-NH₂)** on the end of an alkyl chain (**ω-amino acids**) result in a **high Fe/Hf** value due to effective metal coordination by the amino group.

  *Predicts high Fe/Hf for compounds like **5-aminopentanoic acid**, **7-aminoheptanoic acid**, **8-aminooctanoic acid**, and **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**.*

- **Rule 2**: Modifiers that are **aromatic carboxylic acids** with a **para-substituted strong electron-withdrawing group** capable of enhancing metal coordination, such as **nitro (-NO₂)**, **halomethyl (-CH₂X)**, or **pyridyl rings**, result in a **high Fe/Hf** value.

  *Predicts high Fe/Hf for compounds like **4-nitrobenzoic acid**, **4-(bromomethyl)benzoic acid**, **4-pyridin-4-ylbenzoic acid**, and **1,3-dioxo-2-benzofuran-5-carboxylic acid**.*

- **Rule 3**: Modifiers containing **sulfur-functional groups**, such as **thiols (-SH)** or **thioethers (-S-)**, along with a **carboxylic acid group**, result in a **high Fe/Hf** value due to sulfur's strong affinity for metal ions.

  *Predicts high Fe/Hf for compounds like **3-sulfanylpropanoic acid**, **4-sulfanylbenzoic acid**, and **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid**.*

- **Rule 4**: Modifiers that are **aliphatic carboxylic acids** with **polyether chains** containing multiple **ether linkages (-O-)** and terminal **amino groups (-NH₂)** result in a **high Fe/Hf** value due to enhanced coordination from oxygen and nitrogen atoms.

  *Predicts high Fe/Hf for compounds like **2-[2-(2-methoxyethoxy)ethoxy]acetic acid** and **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**.*

- **Rule 5**: Modifiers that are **amino acids** with **side chains capable of metal coordination**, such as **aspartic acid** and **phenylalanine**, result in a **high Fe/Hf** value due to additional coordinating sites.

  *Predicts high Fe/Hf for compounds like **(2S)-2-aminobutanedioic acid** and **(2S)-2-amino-3-phenylpropanoic acid**.*

- **Rule 6**: Modifiers that are **aromatic carboxylic acids** with **para-substituted electron-donating groups**, such as **hydroxyl (-OH)**, **amino (-NH₂)**, **alkyl (-CH₃)**, or **formyl (-CHO)** groups, result in a **low Fe/Hf** value due to decreased acidity and weaker metal coordination.

  *Predicts low Fe/Hf for compounds like **4-hydroxybenzoic acid**, **4-aminobenzoic acid**, **4-methylbenzoic acid**, and **4-formylbenzoic acid**.*

- **Rule 7**: Modifiers that are **aliphatic carboxylic acids** without additional coordinating functional groups or with groups that do not enhance metal coordination result in a **low Fe/Hf** value.

  *Predicts low Fe/Hf for compounds like **octanoic acid**, **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**, and **4-oxoheptanedioic acid**.*

- **Rule 8**: Modifiers containing **multiple hydroxyl groups (-OH)**, such as **polyols** or **sugar acids**, result in a **low Fe/Hf** value due to increased hydrophilicity and steric hindrance, which reduce effective metal coordination.

  *Predicts low Fe/Hf for compounds like **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** and **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid**.*

- **Rule 9**: Modifiers that are **heteroaromatic carboxylic acids** where the heteroatom is adjacent to the carboxyl group, potentially competing with metal coordination, result in a **low Fe/Hf** value.

  *Predicts low Fe/Hf for compounds like **pyridine-3-carboxylic acid**, **1H-pyrazole-4-carboxylic acid**, and **2-oxo-1H-pyridine-4-carboxylic acid**.*

- **Rule 10**: Modifiers that are **amino acids** with **bulky or sterically hindered side chains**, such as **tryptophan** and **glutamic acid**, result in a **low Fe/Hf** value due to steric hindrance impeding metal coordination.

  *Predicts low Fe/Hf for compounds like **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** and **(2S)-2-aminopentanedioic acid**.*

**End of Rules**

---

**Explanation:**

**Overview:**

These rules describe how specific structural features and functional groups within molecular modifiers influence the Fe/Hf ratio in the Hf-TPY-MOL catalyst system. The ability of a modifier to coordinate with iron is pivotal in determining whether it will result in a high or low Fe/Hf value.

**Key Factors Influencing Fe/Hf Ratio:**

1. **Coordination Sites:**
   - **Functional Groups:** Presence of strong metal-coordinating groups like **amines (-NH₂)**, **thiols (-SH)**, **ethers (-O-)**, and **pyridyl rings** enhance iron binding, resulting in a **high Fe/Hf** value.
   - **Multidentate Ligands:** Modifiers with multiple coordination sites can bind more effectively to iron.

2. **Electronic Effects:**
   - **Electron-Withdrawing Groups:** Increase acidity and enhance metal coordination. Stronger electron-withdrawing groups like **nitro (-NO₂)** and **halomethyl (-CH₂X)** are more effective.
   - **Electron-Donating Groups:** Decrease acidity and weaken metal coordination, leading to a **low Fe/Hf** value. Examples include **hydroxyl (-OH)** and **amino (-NH₂)** groups in the para position.

3. **Steric Factors:**
   - **Steric Hindrance:** Bulky side chains or functional groups near the coordination site can hinder metal binding.
   - **Chain Length and Flexibility:** Longer chains with terminal coordinating groups can enhance flexibility and improve metal coordination.

4. **Functional Group Synergy:**
   - **Polyether Chains and Amino Groups:** Combination of ether linkages and amino groups increases coordination potential.
   - **Sulfur-Containing Groups:** Sulfur has a high affinity for metals, enhancing coordination.

5. **Competing Functional Groups:**
   - **Heteroatoms Adjacent to Carboxyl Group:** Can compete with carboxylate for metal binding, reducing coordination efficiency.

**Application of Rules to Dataset:**

- **High Fe/Hf Modifiers:**
  - **Rule 1:** Explains high Fe/Hf for **5-aminopentanoic acid**, **7-aminoheptanoic acid**, and **8-aminooctanoic acid** due to terminal amine groups.
  - **Rule 2:** Justifies high Fe/Hf in **4-nitrobenzoic acid** and **4-(bromomethyl)benzoic acid** because of strong electron-withdrawing groups.
  - **Rule 3:** Accounts for high Fe/Hf in sulfur-containing modifiers like **3-sulfanylpropanoic acid**.
  - **Rule 4:** Describes high Fe/Hf in modifiers with polyether chains, such as **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**.
  - **Rule 5:** Predicts high Fe/Hf for amino acids like **(2S)-2-aminobutanedioic acid** with coordinating side chains.

- **Low Fe/Hf Modifiers:**
  - **Rule 6:** Identifies low Fe/Hf in modifiers with para electron-donating groups like **4-hydroxybenzoic acid**.
  - **Rule 7:** Explains low Fe/Hf in polyols such as **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid**.
  - **Rule 8:** Predicts low Fe/Hf in modifiers lacking coordinating groups, like **octanoic acid**.
  - **Rule 9:** Accounts for low Fe/Hf in heteroaromatic acids like **pyridine-3-carboxylic acid**.
  - **Rule 10:** Explains low Fe/Hf in amino acids with bulky side chains, such as **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid**.

**Conclusion:**

By analyzing the dataset and understanding the underlying chemical principles, these rules provide a framework for predicting the Fe/Hf ratio based on the structural features of molecular modifiers. Chemists can utilize these rules to design or select modifiers that optimize iron incorporation in the catalyst, thereby enhancing the yield of the desired reaction.

---

**Note:** These rules aim to balance simplicity and coverage, providing clear guidance based on functional group combinations and chemical properties.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10
0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,-1
0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0
0,0,1,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0
0,0,0,0,1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.7714285714285715; Test Accuracy: 1.0
    Train Support: 0.08; Test Support: 0.0
    Train Confidence: 0.96; Test Confidence: 0.5
    Train Lift: 1.8895424836601307; Test Lift: NONE
    Train Leverage: 0.036408163265306125; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and structural features
    # Corrected and improved patterns based on the suggestions

    # Common patterns

    # Carboxylic acid group (-COOH) including both neutral and anionic forms
    carboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1]'
    carboxylic_acid_patterns = [carboxylic_acid]

    # Primary amino group (-NH2)
    primary_amino_group = '[NX3;H2]'

    # Ether linkage (-O-)
    ether_linkage = '[OX2H][CX4]'

    # Thiol group (-SH)
    thiol_group = '[SX2H]'

    # Thioether group (-S-)
    # As per suggestion 3
    thioether_group = '[SX2][#6]'

    # Aromatic ring
    aromatic_ring = 'c1ccccc1'  # Benzene ring

    # Halogen
    halogen = '[F,Cl,Br,I]'

    # Nitro group
    nitro_group = '[NX3](=O)[O-]'

    # Pyridine ring
    pyridine_ring = 'n1ccccc1'  # Pyridine ring

    # Hydroxyl group (-OH)
    hydroxyl_group = '[OX2H]'

    # Hydroxyl group attached to carbon
    hydroxyl_on_carbon = '[CX4][OX2H]'

    # Define rules and their SMARTS patterns

    rules = []

    # Rule 1: Modifiers that are aliphatic carboxylic acids with a terminal primary amino group (-NH2) on the end of an alkyl chain (ω-amino acids)
    rule1_pattern = '[NX3;H2][CH2]{2,}[CH2][CX3](=O)[OX1H0-,OX2H1]'
    rules.append({
        'number': 1,
        'description': 'Aliphatic carboxylic acids with a terminal primary amino group (-NH2) on the end of an alkyl chain (ω-amino acids)',
        'patterns': [rule1_pattern],
        'prediction': 1
    })

    # Rule 2: Aromatic carboxylic acids with para-substituted strong electron-withdrawing group capable of enhancing metal coordination, such as nitro (-NO2), halomethyl (-CH2X), or pyridyl rings
    # Need to ensure that the substituent is in the para position relative to the carboxylic acid group
    rule2_patterns = [
        # Para-nitrobenzoic acid
        '[OX2H][c]1ccc([NX3](=O)[O-])cc1',
        '[OX2H][c]1ccc([NX3](=O)[OX1])cc1',
        # Para-halomethylbenzoic acid
        '[OX2H][c]1ccc(C[Cl,Br,I,F])cc1',
        # Para-pyridyl substituted benzoic acid
        '[OX2H][c]1ccc(c2ncccc2)cc1',
        # Include 1,3-dioxo-2-benzofuran-5-carboxylic acid
        '[OX2H][c]1ccc2c(=O)oc(=O)c2c1'
    ]
    rules.append({
        'number': 2,
        'description': 'Aromatic carboxylic acids with para-substituted strong electron-withdrawing groups',
        'patterns': rule2_patterns,
        'prediction': 1
    })

    # Rule 3: Modifiers containing sulfur-functional groups (thiols (-SH) or thioethers (-S-)), along with a carboxylic acid group
    rules.append({
        'number': 3,
        'description': 'Modifiers containing sulfur-functional groups (thiols or thioethers) along with a carboxylic acid group',
        'sulfur_patterns': [thiol_group, thioether_group],
        'carboxylic_acid_patterns': carboxylic_acid_patterns,
        'prediction': 1
    })

    # Rule 4: Modifiers that are aliphatic carboxylic acids with polyether chains containing multiple ether linkages (-O-) and terminal amino groups (-NH2)
    # Let's assume polyether chain is at least two ether linkages
    rule4_pattern = '[NX3;H2][CX4]([OX2][CX4]){2,}[CX3](=O)[OX1H0-,OX2H1]'
    rules.append({
        'number': 4,
        'description': 'Aliphatic carboxylic acids with polyether chains containing multiple ether linkages (-O-) and terminal amino groups (-NH2)',
        'patterns': [rule4_pattern],
        'prediction': 1
    })

    # Rule 5: Modifiers that are amino acids with side chains capable of metal coordination
    # Amino acid backbone
    amino_acid_backbone = '[NX3H2][CX4H]([*])[CX3](=O)[OX1H0-,OX2H1]'
    # Side chain patterns
    side_chain_patterns = [
        '[CX3](=O)[OX1H0-,OX2H1]',  # Carboxylic acid side chain
        'c',  # Aromatic ring side chain
        thiol_group,  # Thiol side chain
        '[NX3;H2]',  # Amino group side chain
    ]
    rules.append({
        'number': 5,
        'description': 'Modifiers that are amino acids with side chains capable of metal coordination',
        'backbone_pattern': amino_acid_backbone,
        'side_chain_patterns': side_chain_patterns,
        'prediction': 1
    })

    # Rule 6: Modifiers that are aromatic carboxylic acids with para-substituted electron-donating groups
    # Such as hydroxyl (-OH), amino (-NH2), alkyl (-CH3), or formyl (-CHO) groups
    rule6_patterns = [
        # Para-hydroxybenzoic acid
        '[OX2H][c]1ccc([OX2H])cc1',
        # Para-aminobenzoic acid
        '[OX2H][c]1ccc([NX3;H2])cc1',
        # Para-methylbenzoic acid
        '[OX2H][c]1ccc(C)cc1',
        # Para-formylbenzoic acid
        '[OX2H][c]1ccc(C=O)cc1'
    ]
    rules.append({
        'number': 6,
        'description': 'Aromatic carboxylic acids with para-substituted electron-donating groups',
        'patterns': rule6_patterns,
        'prediction': -1
    })

    # Rule 7: Modifiers that are aliphatic carboxylic acids without additional coordinating functional groups or with groups that do not enhance metal coordination
    # Exclude patterns are primary amino group, thiol, thioether, ether linkage, aromatic ring, and substituents that enhance coordination
    exclude_patterns_rule7 = [
        primary_amino_group,
        thiol_group,
        thioether_group,
        ether_linkage,
        'c'  # Any aromatic carbon
    ]
    rules.append({
        'number': 7,
        'description': 'Aliphatic carboxylic acids without additional coordinating functional groups',
        'patterns': carboxylic_acid_patterns,
        'exclude_patterns': exclude_patterns_rule7,
        'prediction': -1
    })

    # Rule 8: Modifiers containing multiple hydroxyl groups (-OH), such as polyols or sugar acids
    rules.append({
        'number': 8,
        'description': 'Modifiers containing multiple hydroxyl groups (-OH), such as polyols or sugar acids',
        'hydroxyl_pattern': hydroxyl_on_carbon,
        'hydroxyl_count_threshold': 2,  # At least two hydroxyl groups
        'prediction': -1
    })

    # Rule 9: Modifiers that are heteroaromatic carboxylic acids where the heteroatom is adjacent to the carboxyl group
    rule9_patterns = [
        # Nicotinic acid (pyridine-3-carboxylic acid)
        '[n][c]c(cc1)C(=O)[OX1H0-,OX2H1]',
        # Pyrazole-4-carboxylic acid
        '[n][n][c](cc1)C(=O)[OX1H0-,OX2H1]',
        # 2-oxo-1H-pyridine-4-carboxylic acid
        'O=C1NC=CC=C1C(=O)[OX1H0-,OX2H1]'
    ]
    rules.append({
        'number': 9,
        'description': 'Heteroaromatic carboxylic acids where the heteroatom is adjacent to the carboxyl group',
        'patterns': rule9_patterns,
        'prediction': -1
    })

    # Rule 10: Modifiers that are amino acids with bulky or sterically hindered side chains, such as tryptophan and glutamic acid
    # Bulky side chains
    # Tryptophan side chain (indole ring)
    bulky_side_chain_patterns = [
        # Indole ring
        'c1cc2c(c1)cccn2',  # Indole group
        # Side chain carboxylate (glutamic acid)
        '[CH2][CH2][CX3](=O)[OX1H0-,OX2H1]'
    ]
    rules.append({
        'number': 10,
        'description': 'Amino acids with bulky or sterically hindered side chains',
        'backbone_pattern': amino_acid_backbone,
        'side_chain_patterns': bulky_side_chain_patterns,
        'prediction': -1
    })

    # Compile patterns
    for rule in rules:
        if 'patterns' in rule:
            rule['compiled_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule['patterns']]
        if 'exclude_patterns' in rule:
            rule['compiled_exclude_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule['exclude_patterns']]
        if 'sulfur_patterns' in rule:
            rule['compiled_sulfur_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule['sulfur_patterns']]
        if 'carboxylic_acid_patterns' in rule:
            rule['compiled_carboxylic_acid_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule['carboxylic_acid_patterns']]
        if 'backbone_pattern' in rule:
            rule['compiled_backbone_pattern'] = Chem.MolFromSmarts(rule['backbone_pattern'])
        if 'side_chain_patterns' in rule:
            rule['compiled_side_chain_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule['side_chain_patterns']]
        if 'hydroxyl_pattern' in rule:
            rule['compiled_hydroxyl_pattern'] = Chem.MolFromSmarts(rule['hydroxyl_pattern'])

    # Process each SMILES string
    results = []
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = False
                # For rules with exclude patterns
                if 'exclude_patterns' in rule:
                    exclude = False
                    for ex_pat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(ex_pat):
                            exclude = True
                            break
                    if exclude:
                        row.append(0)
                        continue
                # Rule-specific matching
                if rule['number'] == 3:
                    # Need to match both sulfur group and carboxylic acid
                    sulfur_match = any(mol.HasSubstructMatch(pat) for pat in rule['compiled_sulfur_patterns'])
                    carboxylic_acid_match = any(mol.HasSubstructMatch(pat) for pat in rule['compiled_carboxylic_acid_patterns'])
                    if sulfur_match and carboxylic_acid_match:
                        match = True
                elif rule['number'] == 5 or rule['number'] ==10:
                    # Need to match amino acid backbone and appropriate side chain
                    backbone_match = mol.HasSubstructMatch(rule['compiled_backbone_pattern'])
                    if backbone_match:
                        side_chain_match = any(mol.HasSubstructMatch(pat) for pat in rule['compiled_side_chain_patterns'])
                        if side_chain_match:
                            match = True
                elif rule['number'] == 8:
                    # Need to check if molecule contains multiple hydroxyl groups attached to carbons
                    hydroxyl_matches = mol.GetSubstructMatches(rule['compiled_hydroxyl_pattern'])
                    if len(hydroxyl_matches) >= rule['hydroxyl_count_threshold']:
                        match = True
                else:
                    for pat in rule['compiled_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = True
                            break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df
--------------------------------------------------