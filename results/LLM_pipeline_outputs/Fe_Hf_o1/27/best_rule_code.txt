def rule2matrix(smiles_list):
    # Define and compile SMARTS patterns
    patterns = {
        # Carboxylic acid group (-COOH), including both protonated and deprotonated forms
        'carboxylic_acid': Chem.MolFromSmarts('[CX3](=O)[OX1H0-,OX2H1]'),
        # Primary aliphatic amine (-NH2) attached to sp3 carbon
        'primary_aliphatic_amine': Chem.MolFromSmarts('[NX3;H2][CX4;!$(C=O)]'),
        # Secondary aliphatic amine (-NH-) attached to sp3 carbons
        'secondary_aliphatic_amine': Chem.MolFromSmarts('[NX3;H1]([CX4])[CX4]'),
        # Thiol group (-SH)
        'thiol': Chem.MolFromSmarts('[SX2H]'),
        # Thioether group (-S-), sulfur between two carbons
        'thioether': Chem.MolFromSmarts('[#16X2]-[#6]'),
        # Ether linkage (-O-)
        'ether_linkage': Chem.MolFromSmarts('[#6][OX2][#6]'),
        # Pyridine ring
        'pyridine_ring': Chem.MolFromSmarts('n1ccccc1'),
        # Aldehyde group
        'aldehyde_group': Chem.MolFromSmarts('[CX3H]=O'),
        # Hydroxyl group (-OH)
        'hydroxyl_group': Chem.MolFromSmarts('[OX2H]'),
        # Polyhydroxyl group (-OH), used for counting hydroxyl groups
        'polyhydroxyl_group': Chem.MolFromSmarts('[OX2H]'),
        # Perfluoroalkyl chain
        'perfluoroalkyl': Chem.MolFromSmarts('[CX4](F)(F)F'),
        # Aromatic carboxylic acid
        'aromatic_carboxylic_acid': Chem.MolFromSmarts('[c][CX3](=O)[OX1H0-,OX2H1]'),
        # Alpha amino acid, amino group attached to alpha carbon (next to carboxylic acid)
        'alpha_amino_acid': Chem.MolFromSmarts('[NX3;H2][CHX4][CX3](=O)[OX1H0-,OX2H1]'),
        # Fused aromatic system with carbonyl group
        'fused_aromatic_with_carbonyl': Chem.MolFromSmarts('[a][a][CX3](=O)[a]'),
        # Aromatic ring
        'aromatic_ring': Chem.MolFromSmarts('[a]'),
        # Amino group
        'amino_group': Chem.MolFromSmarts('[NX3;H2,H1][#6]'),
        # Methoxy group (-OCH3)
        'methoxy_group': Chem.MolFromSmarts('[OX2][CH3]'),
    }

    # Electron-withdrawing groups (EWGs)
    ewg_smarts = [
        '[N+](=O)[O-]',    # Nitro group
        '[F,Cl,Br,I]',     # Halogens
        '[CX4](F)(F)F',    # Trifluoromethyl group
        '[C]#[N]',         # Cyano group
        '[SX4](=O)(=O)[O-,OH]',  # Sulfonyl group
    ]
    ewg_patterns = [Chem.MolFromSmarts(sma) for sma in ewg_smarts]

    # Electron-donating groups (EDGs)
    edg_smarts = [
        '[OX2H]',          # Hydroxyl group
        '[OX2][#6]',       # Alkoxy group
        '[NX3;H2,H1][#6]', # Amino group
    ]
    edg_patterns = [Chem.MolFromSmarts(sma) for sma in edg_smarts]

    # Define the rules with compiled patterns
    rules = [
        {
            'number': 1,
            'description': 'Modifiers containing non-α terminal amino groups on aliphatic chains will have high Fe/Hf values.',
            'required_patterns': [
                [patterns['carboxylic_acid']],
                [patterns['primary_aliphatic_amine'], patterns['secondary_aliphatic_amine']],
            ],
            'exclude_patterns': [
                [patterns['alpha_amino_acid']],  # Exclude alpha amino acids
            ],
            'prediction': 1,
        },
        {
            'number': 2,
            'description': 'Modifiers containing sulfur atoms (thiol or thioether groups) in combination with amino or carboxylic acid groups will have high Fe/Hf values.',
            'required_patterns': [
                [patterns['thiol'], patterns['thioether']],
                [patterns['carboxylic_acid'], patterns['amino_group']],
            ],
            'prediction': 1,
        },
        {
            'number': 3,
            'description': 'Modifiers that are aromatic carboxylic acids with strong electron-withdrawing groups at the para position will have high Fe/Hf values.',
            'required_patterns': [
                [patterns['aromatic_carboxylic_acid']],
                ewg_patterns,
            ],
            'prediction': 1,
        },
        {
            'number': 4,
            'description': 'Modifiers containing pyridine rings where the nitrogen atom is positioned to coordinate with Fe ions will have high Fe/Hf values.',
            'required_patterns': [
                [patterns['pyridine_ring']],
                [patterns['carboxylic_acid']],
            ],
            'prediction': 1,
        },
        {
            'number': 5,
            'description': 'Modifiers with flexible ether linkages and terminal coordinating groups (such as amino or methoxy groups) will have high Fe/Hf values.',
            'required_patterns': [
                [patterns['ether_linkage']],
                [patterns['amino_group'], patterns['methoxy_group']],
                [patterns['carboxylic_acid']],
            ],
            'prediction': 1,
        },
        {
            'number': 6,
            'description': 'Modifiers that are polyhydroxylated compounds (contain multiple hydroxyl groups) will have low Fe/Hf values.',
            'required_patterns': [
                [patterns['carboxylic_acid']],
            ],
            'count_thresholds': {'[OX2H]': 2},  # At least 2 hydroxyl groups
            'prediction': -1,
        },
        {
            'number': 7,
            'description': 'Modifiers that are aromatic carboxylic acids with electron-donating groups at the para position will have low Fe/Hf values.',
            'required_patterns': [
                [patterns['aromatic_carboxylic_acid']],
                edg_patterns,
            ],
            'prediction': -1,
        },
        {
            'number': 8,
            'description': 'Modifiers with highly electronegative perfluorinated alkyl chains will have low Fe/Hf values.',
            'required_patterns': [
                [patterns['perfluoroalkyl']],
                [patterns['carboxylic_acid']],
            ],
            'prediction': -1,
        },
        {
            'number': 9,
            'description': 'Modifiers that are simple aliphatic carboxylic acids without additional coordinating groups will have low Fe/Hf values.',
            'required_patterns': [
                [patterns['carboxylic_acid']],
            ],
            'exclude_patterns': [
                [patterns['amino_group']],
                [patterns['thiol'], patterns['thioether']],
                [patterns['ether_linkage']],
                ewg_patterns,
                [patterns['aromatic_ring']],
            ],
            'prediction': -1,
        },
        {
            'number': 10,
            'description': 'Modifiers containing aldehyde groups adjacent to carboxylic acids on aromatic rings will have low Fe/Hf values.',
            'required_patterns': [
                [patterns['aromatic_ring']],
                [patterns['aldehyde_group']],
                [patterns['carboxylic_acid']],
            ],
            'prediction': -1,
        },
        {
            'number': 11,
            'description': 'Modifiers with rigid fused aromatic systems containing carbonyl groups will have high Fe/Hf values.',
            'required_patterns': [
                [patterns['fused_aromatic_with_carbonyl']],
                [patterns['carboxylic_acid']],
            ],
            'prediction': 1,
        },
        {
            'number': 12,
            'description': 'Modifiers that are α-amino acids without additional coordinating side chains will have low Fe/Hf values.',
            'required_patterns': [
                [patterns['alpha_amino_acid']],
            ],
            'exclude_patterns': [
                [patterns['pyridine_ring']],
                [patterns['thiol'], patterns['thioether']],
                [patterns['aromatic_carboxylic_acid']],
                [patterns['amino_group']],
                [patterns['hydroxyl_group']],
            ],
            'prediction': -1,
        },
    ]

    # Initialize the results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check required patterns
                for group in rule.get('required_patterns', []):
                    group_match = False
                    for pat in group:
                        matches = mol.GetSubstructMatches(pat)
                        if matches:
                            # If a count threshold is specified for this pattern
                            if 'count_thresholds' in rule:
                                sma = Chem.MolToSmarts(pat)
                                threshold = rule['count_thresholds'].get(sma, 1)
                                if len(matches) >= threshold:
                                    group_match = True
                                    break
                            else:
                                group_match = True
                                break
                    if not group_match:
                        match = False
                        break  # Required pattern group not matched
                if not match:
                    row.append(0)
                    continue  # Move to next rule
                # Check exclude patterns if any
                for group in rule.get('exclude_patterns', []):
                    for pat in group:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)

    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f"Rule {rule['number']}" for rule in rules])
    return df