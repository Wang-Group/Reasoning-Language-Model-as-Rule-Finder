
    Target Name: Fe/Hf
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Analyzing the provided dataset and considering the underlying physical-chemical properties, here are the refined rules that describe the relationship between molecular modifiers and the relative high or low value of Fe/Hf:**

---

**Start of Rules**

- **Rule 1**: Modifiers containing **terminal amino groups (-NH₂)** on **aliphatic chains longer than three carbons** tend to have a **high Fe/Hf value**.
  - *Examples*: 5-aminopentanoic acid, 7-aminoheptanoic acid, 8-aminooctanoic acid, (2S)-6-acetamido-2-aminohexanoic acid.

- **Rule 2**: Modifiers containing **sulfur functional groups** such as **thiols (-SH)** or **thioethers (-S-)** tend to have a **high Fe/Hf value**.
  - *Examples*: 3-sulfanylpropanoic acid, 4-sulfanylbenzoic acid, 2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid.

- **Rule 3**: Modifiers with **aromatic rings** substituted with **strong electron-withdrawing groups** like **nitro (-NO₂)** or **haloalkyl groups (e.g., -CH₂Br)** tend to have a **high Fe/Hf value**.
  - *Examples*: 4-nitrobenzoic acid, 4-(bromomethyl)benzoic acid.

- **Rule 4**: Modifiers containing **ether linkages (-O-)** combined with **terminal amino groups (-NH₂)** or **methoxy groups (-OCH₃)** tend to have a **high Fe/Hf value**.
  - *Examples*: 2-[2-(2-methoxyethoxy)ethoxy]acetic acid, 3-[2-(2-aminoethoxy)ethoxy]propanoic acid.

- **Rule 5**: Modifiers with **aromatic rings** substituted with **electron-donating groups** such as **hydroxyl (-OH)**, **amino (-NH₂)**, or **methyl (-CH₃)** groups tend to have a **low Fe/Hf value**.
  - *Examples*: 4-aminobenzoic acid, 4-methylbenzoic acid, 3-(4-hydroxyphenyl)propanoic acid, 5-(4-hydroxyphenyl)pentanoic acid.

- **Rule 6**: Modifiers containing **multiple hydroxyl groups (-OH)** on **aliphatic chains** or **cyclic structures** tend to have a **low Fe/Hf value**.
  - *Examples*: (2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid, 2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid.

- **Rule 7**: Modifiers containing **pyridine rings** directly linked to **aromatic systems** tend to have a **high Fe/Hf value**.
  - *Examples*: 4-pyridin-4-ylbenzoic acid, 4-pyridin-4-ylbutanoic acid.

- **Rule 8**: Modifiers that are **straight-chain aliphatic carboxylic acids** without additional functional groups tend to have a **low Fe/Hf value**.
  - *Example*: Octanoic acid.

- **Rule 9**: Modifiers containing **aromatic rings** substituted with **aldehyde groups (-CHO)** tend to have a **low Fe/Hf value**.
  - *Examples*: 4-formylbenzoic acid, 5-formyl-2-hydroxybenzoic acid.

- **Rule 10**: Modifiers with **bulky aromatic heterocyclic rings**, such as **indole** or **pyridine ketones**, tend to have a **low Fe/Hf value**.
  - *Examples*: (2R)-2-amino-3-(1H-indol-3-yl)propanoic acid, 2-oxo-1H-pyridine-4-carboxylic acid, 1H-pyrazole-4-carboxylic acid.

- **Rule 11**: Modifiers with **perfluorinated aliphatic chains** tend to have a **low Fe/Hf value**.
  - *Example*: 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid.

- **Rule 12**: Modifiers containing **aromatic rings** substituted with **hydroxyl groups (-OH)** linked via **amide bonds** to **aliphatic chains** tend to have a **low Fe/Hf value**.
  - *Example*: 2-[(4-hydroxybenzoyl)amino]acetic acid.

**End of Rules**

---

**Explanation and Considerations:**

- These rules are derived by combining multiple functional groups and considering their ability to interact with iron ions based on coordination chemistry principles.
  
- **High Fe/Hf Value Modifiers**:
  - **Rules 1-4 and 7** highlight modifiers with functional groups capable of strong coordination with iron, such as amino groups on long aliphatic chains, sulfur-containing groups, strong electron-withdrawing substituents on aromatic systems, ether linkages with coordinating end groups, and heterocyclic nitrogen-containing rings.
  
- **Low Fe/Hf Value Modifiers**:
  - **Rules 5-6 and 8-12** focus on modifiers that either lack strong coordinating groups or possess functionalities that may hinder iron coordination, such as electron-donating groups on aromatics, multiple hydroxyl groups leading to steric hindrance or competing interactions, bulky heterocycles, and perfluorinated chains.
  
- **Coverage and Balance**:
  - The rules aim to cover a broad range of the dataset while balancing simplicity and complexity. They prioritize features that are indicative of the Fe/Hf ratio based on functional group interactions.

By applying these rules, one can predict whether a given molecular modifier is likely to result in a high or low Fe/Hf value, aiding in the optimization of the catalyst for the target reaction.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12
0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,-1,-1,0,0,0,0,0,0
0,0,0,0,0,0,1,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,-1,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,1,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,1,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0
0,0,0,0,-1,-1,0,0,0,0,0,-1
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,-1,-1,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.8285714285714286; Test Accuracy: 1.0
    Train Support: 0.10285714285714286; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 1.9673202614379086; Test Lift: NONE
    Train Leverage: 0.05093877551020408; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and features based on the rules
    
    # Rule 1: Terminal amino groups (-NH2) on aliphatic chains longer than three carbons
    primary_amine = '[NX3H2]'
    aliphatic_chain = '[CX4H2][CX4H2][CX4H2][CX4]'
    
    # Rule 2: Sulfur functional groups - thiols (-SH) or thioethers (-S-)
    thiol = '[SX2H]'
    thioether = '[#6][SX2][#6]'
    
    # Rule 3: Aromatic rings substituted with nitro (-NO2) or haloalkyl groups (-CH2Br)
    nitro_aromatic = '[c][NX3+](=O)[O-]'
    haloalkyl_aromatic = '[c][CX4][Br,Cl,F,I]'
    
    # Rule 4: Ether linkages (-O-) combined with terminal amino groups (-NH2) or methoxy groups (-OCH3)
    ether_linkage = '[#6][OX2][#6]'
    terminal_amine = '[NX3H2]'
    methoxy = '[OX2][CH3]'
    
    # Rule 5: Aromatic rings substituted with hydroxyl (-OH), amino (-NH2), or methyl (-CH3) groups
    hydroxyl_aromatic = '[c][OX2H]'
    amino_aromatic = '[c][NX3H2]'
    methyl_aromatic = '[c][CH3]'
    
    # Rule 6: Multiple hydroxyl groups (-OH) on aliphatic chains or cyclic structures
    hydroxyl_group = '[OX2H]'
    
    # Rule 7: Pyridine rings directly linked to aromatic systems
    pyridine_ring = 'n1ccccc1'
    
    # Rule 8: Straight-chain aliphatic carboxylic acids without additional functional groups
    aliphatic_acid = '[CX3](=O)[OX2H1]'
    exclude_groups = '[#7,#8,#9,#15,#16,#17,#35]'  # Exclude N, O (except in COOH), F, P, S, Cl, Br
    
    # Rule 9: Aromatic rings substituted with aldehyde groups (-CHO)
    aldehyde_aromatic = '[c][CX3H](=O)'
    
    # Rule 10: Bulky aromatic heterocyclic rings (indole, pyridine ketones)
    indole = 'c1ccc2ccccc2[nH]1'
    pyrazole = 'c1cn[nH]c1'
    
    # Rule 11: Perfluorinated aliphatic chains
    fluorinated_carbon = '[CX4](F)(F)(F)'
    
    # Rule 12: Aromatic rings substituted with hydroxyl groups (-OH) linked via amide bonds to aliphatic chains
    amide_bond = '[NX3][CX3](=O)[#6]'
    hydroxyl_aromatic = '[c][OX2H]'
    
    # Compile the SMARTS patterns
    smarts_dict = {
        'Rule 1': {
            'patterns': [primary_amine, aliphatic_chain],
            'prediction': 1
        },
        'Rule 2': {
            'patterns': [thiol + '|' + thioether],
            'prediction': 1
        },
        'Rule 3': {
            'patterns': [nitro_aromatic + '|' + haloalkyl_aromatic],
            'prediction': 1
        },
        'Rule 4': {
            'patterns': [ether_linkage, terminal_amine + '|' + methoxy],
            'prediction': 1
        },
        'Rule 5': {
            'patterns': [hydroxyl_aromatic + '|' + amino_aromatic + '|' + methyl_aromatic],
            'prediction': -1
        },
        'Rule 6': {
            'patterns': [hydroxyl_group],
            'count_threshold': 2,
            'prediction': -1
        },
        'Rule 7': {
            'patterns': [pyridine_ring],
            'prediction': 1
        },
        'Rule 8': {
            'patterns': [aliphatic_acid],
            'exclude': [exclude_groups],
            'prediction': -1
        },
        'Rule 9': {
            'patterns': [aldehyde_aromatic],
            'prediction': -1
        },
        'Rule 10': {
            'patterns': [indole + '|' + pyrazole],
            'prediction': -1
        },
        'Rule 11': {
            'patterns': [fluorinated_carbon],
            'count_threshold': 3,
            'prediction': -1
        },
        'Rule 12': {
            'patterns': [amide_bond, hydroxyl_aromatic],
            'prediction': -1
        },
    }
    
    # Precompile SMARTS patterns
    for rule in smarts_dict.values():
        compiled_patterns = []
        for smarts in rule['patterns']:
            patterns = smarts.split('|')
            compiled = [Chem.MolFromSmarts(pat) for pat in patterns]
            compiled_patterns.append(compiled)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude' in rule:
            exclude_patterns = rule['exclude']
            compiled_exclude = [Chem.MolFromSmarts(pat) for pat in exclude_patterns]
            rule['compiled_exclude'] = compiled_exclude
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(smarts_dict))
            continue
        row = []
        for rule_name, rule in smarts_dict.items():
            try:
                match = True
                # Check exclude patterns if any
                if 'compiled_exclude' in rule:
                    for pat in rule['compiled_exclude']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        matches = mol.GetSubstructMatches(pat)
                        if matches:
                            # Check count threshold if specified
                            if 'count_threshold' in rule:
                                if len(matches) >= rule['count_threshold']:
                                    group_match = True
                                    break
                            else:
                                group_match = True
                                break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=smarts_dict.keys())
    return df

--------------------------------------------------
    Target Name: Fe/Hf
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Analyzing the dataset and considering the underlying physical-chemical properties, here are the refined rules that describe the relationship between molecular modifiers and the relative high or low value of Fe/Hf:**

---

**Start of Rules**

1. **Rule 1**: Modifiers containing a **terminal amino group (-NH₂)** on an **aliphatic chain of five or more carbons** tend to have a **high Fe/Hf value**.
   - *Examples*: 5-aminopentanoic acid, 7-aminoheptanoic acid, 8-aminooctanoic acid, (2S)-6-acetamido-2-aminohexanoic acid.

2. **Rule 2**: Modifiers containing **sulfur-functional groups**, such as **thiols (-SH)** or **thioethers (-S-)**, tend to have a **high Fe/Hf value**.
   - *Examples*: 3-sulfanylpropanoic acid, 4-sulfanylbenzoic acid, 2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid.

3. **Rule 3**: Modifiers with **electron-withdrawing groups (EWGs)** on an **aromatic ring**, like **nitro (-NO₂)**, **bromo (-Br)**, or **pyridyl (-C₅H₄N)** substituents, tend to have a **high Fe/Hf value**.
   - *High Fe/Hf Examples*: 4-nitrobenzoic acid, 4-(bromomethyl)benzoic acid, 4-pyridin-4-ylbenzoic acid, 4-pyridin-4-ylbutanoic acid.

4. **Rule 4**: Modifiers containing **multiple ether linkages (-O-)**, especially when combined with **terminal amino groups (-NH₂)** or **methoxy groups (-OCH₃)**, tend to have a **high Fe/Hf value**.
   - *Examples*: 2-[2-(2-methoxyethoxy)ethoxy]acetic acid, 3-[2-(2-aminoethoxy)ethoxy]propanoic acid.

5. **Rule 5**: Modifiers that are **straight-chain aliphatic carboxylic acids** without additional functional groups tend to have a **low Fe/Hf value**.
   - *Example*: Octanoic acid.

6. **Rule 6**: Modifiers with **aromatic rings substituted with electron-donating groups (EDGs)** such as **hydroxyl (-OH)**, **amino (-NH₂)**, or **methyl (-CH₃)** groups, tend to have a **low Fe/Hf value**, unless they contain additional strong coordinating groups.
   - *Low Fe/Hf Examples*: 4-aminobenzoic acid, 4-methylbenzoic acid, 3-(4-hydroxyphenyl)propanoic acid.
   - *Exception*: If the modifier contains additional coordinating functional groups, the Fe/Hf value may be **high**.
     - *High Fe/Hf Example*: 4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid.

7. **Rule 7**: Modifiers containing **multiple hydroxyl groups (-OH)** on **aliphatic chains** or **sugar moieties** tend to have a **low Fe/Hf value**.
   - *Examples*: (2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid (gluconic acid), 2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid.

8. **Rule 8**: Modifiers with **aromatic aldehyde groups (-CHO)** tend to have a **low Fe/Hf value**.
   - *Examples*: 4-formylbenzoic acid, 5-formyl-2-hydroxybenzoic acid.

9. **Rule 9**: Modifiers containing **nitrogen-containing heterocycles** directly attached to the carboxylic acid group without linker atoms tend to have a **low Fe/Hf value**, whereas those with an intervening linkage tend to have a **high Fe/Hf value**.
   - *Low Fe/Hf Examples*: Pyridine-3-carboxylic acid (nicotinic acid), 1H-pyrazole-4-carboxylic acid.
   - *High Fe/Hf Examples*: 4-pyridin-4-ylbenzoic acid, 4-pyridin-4-ylbutanoic acid.

10. **Rule 10**: Modifiers with **perfluorinated alkyl chains** tend to have a **low Fe/Hf value**.
    - *Example*: 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid.

11. **Rule 11**: Modifiers containing **bulky aromatic rings** without strong coordinating groups tend to have a **low Fe/Hf value**, unless they possess additional functional groups capable of chelation.
    - *Low Fe/Hf Examples*: (2S)-2-amino-3-phenylpropanoic acid (L-phenylalanine), (2R)-2-amino-3-(1H-indol-3-yl)propanoic acid (L-tryptophan).
    - *High Fe/Hf Example*: 1,3-dioxo-2-benzofuran-5-carboxylic acid (contains ketone groups).

12. **Rule 12**: Modifiers with **ketone functional groups** adjacent to **aromatic rings** tend to have a **high Fe/Hf value**.
    - *Example*: 1,3-dioxo-2-benzofuran-5-carboxylic acid.

13. **Rule 13**: Modifiers containing **hydroxyl groups (-OH)** on **long aliphatic chains (≥7 carbons)** tend to have a **high Fe/Hf value**.
    - *Example*: 7-hydroxyheptanoic acid.

**End of Rules**

---

**Explanation and Considerations:**

- **Underlying Physical-Chemical Properties**:
  - **Coordination Chemistry**: Functional groups such as amino groups, sulfur-containing groups, pyridine rings, and ketones can act as ligands, coordinating with Fe ions and increasing the Fe/Hf ratio.
    - **Amino Groups (-NH₂)**: Provide lone pairs for coordination with metal ions.
    - **Sulfur Groups (-SH, -S-)**: Sulfur has a larger atomic radius and a lone pair, offering strong coordination.
    - **Pyridine Rings**: Nitrogen atom in the ring can coordinate with metals.
    - **Ketone Groups (-C=O)**: Oxygen can act as a ligand due to its lone pairs.
  - **Electron-Withdrawing Groups (EWGs)**:
    - EWGs like nitro, bromo, and pyridyl groups withdraw electron density, stabilizing the metal–ligand complex through π-backbonding.
  - **Electron-Donating Groups (EDGs)**:
    - EDGs like hydroxyl, amino, and methyl groups donate electron density, potentially reducing metal coordination due to increased electron repulsion.
  - **Steric Effects**:
    - Bulky substituents or multiple hydroxyl groups can hinder the approach of metal ions, decreasing Fe coordination.

- **Applicability of Rules**:
  - **High Fe/Hf Value Modifiers**:
    - **Rules 1-4, 9, 12-13** highlight modifiers that effectively coordinate with Fe ions due to suitable functional groups, leading to higher Fe incorporation.
      - These modifiers often have donor atoms (N, S, O) that can form coordinate bonds.
    - **Rule 9** distinguishes between direct attachment (less favorable) and linkers (more favorable) for nitrogen heterocycles.
  - **Low Fe/Hf Value Modifiers**:
    - **Rules 5-8, 10-11** identify modifiers lacking strong coordinating groups or having features that hinder coordination.
      - For example, perfluorinated chains (Rule 10) are highly electronegative and do not coordinate well with metals.
      - Bulky aromatic rings without coordinating groups (Rule 11) can sterically block metal access.

- **Coverage and Balance**:
  - The rules cover a broad range of structural motifs found in the dataset.
  - There is a balance between simple rules with broad coverage (e.g., Rule 5 on straight-chain acids) and more detailed rules addressing specific functional group combinations (e.g., Rule 9 on nitrogen heterocycles).

- **Exceptions and Refinements**:
  - **Rule 6** accounts for exceptions where additional coordinating groups can override the effects of EDGs.
  - **Rule 11** notes that the presence of strong coordinating groups can change the expected Fe/Hf value despite steric bulk.

- **Use of Examples**:
  - Examples are provided for each rule to illustrate how specific modifiers fit the rules, enhancing clarity and aiding in application to new compounds.

---

By applying these rules, researchers can predict whether a given molecular modifier is likely to result in a high or low Fe/Hf value. This insight aids in the rational design and optimization of catalysts for the target radical-mediated δ-C(sp³)–H bond functionalization reaction.

- **For High Fe/Hf Value**:
  - Consider modifiers with functional groups capable of strong coordination with Fe ions, such as terminal amino groups on long aliphatic chains, sulfur-containing groups, ketones adjacent to aromatic rings, and electron-withdrawing substituents on aromatic rings.
  - Utilize modifiers that have linkers between nitrogen-containing heterocycles and the carboxylic acid group to enhance coordination.

- **For Low Fe/Hf Value**:
  - Avoid modifiers lacking strong coordinating groups or those with steric hindrance due to bulky substituents.
  - Be cautious with modifiers containing multiple hydroxyl groups or perfluorinated chains, as they tend to decrease Fe incorporation.

---

**Note**: These rules are based on the provided dataset and are meant to guide future selection of molecular modifiers. When evaluating new modifiers, consider both the functional groups present and their potential impacts on Fe coordination, keeping in mind the balance between electronic effects and steric factors.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 2,Rule 3,Rule 4,Rule 6,Rule 7,Rule 8,Rule 10,Rule 12
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0
0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,1
0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6857142857142857; Test Accuracy: 0.0
    Train Support: 0.06428571428571428; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 2.0302287581699345; Test Lift: NONE
    Train Leverage: 0.032448979591836735; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    
    # Primary aliphatic amine (-NH2 attached to aliphatic carbon)
    primary_aliph_amine = '[NX3H2][CX4]'
    
    # Thiol group (-SH)
    thiol = '[SX2H]'
    
    # Thioether group (-S-)
    thioether = '[#6][SX2][#6]'
    
    # Ether linkage (-O-)
    ether_linkage = '[#6][OX2][#6]'
    
    # Methoxy group (-OCH3)
    methoxy_group = '[OX2][CH3]'
    
    # Pyridine ring
    pyridine_ring = 'n1ccccc1'
    
    # Nitro group on aromatic ring
    nitro_on_aromatic = '[c][N+](=O)[O-]'
    
    # Halogen on aromatic ring
    halogen_on_aromatic = '[c][F,Cl,Br,I]'
    
    # Aromatic ring with hydroxyl group (-OH)
    aromatic_hydroxyl = '[c][OX2H]'
    
    # Aromatic ring with amino group (-NH2)
    aromatic_amine = '[c][NX3H2]'
    
    # Aromatic ring with methyl group (-CH3)
    aromatic_methyl = '[c][CH3]'
    
    # Multiple hydroxyl groups (-OH)
    hydroxyl_group = '[OX2H]'
    
    # Aromatic aldehyde group (-CHO)
    aromatic_aldehyde = '[c][CX3H](=O)'
    
    # Ketone group adjacent to aromatic ring
    aromatic_ketone = '[c][CX3](=O)[#6]'
    
    # Perfluoroalkyl group (CF3)
    perfluoroalkyl = '[CX4]([F])([F])([F])'
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 2,
            'description': 'High Fe/Hf Value: Modifiers containing sulfur-functional groups such as thiols (-SH) or thioethers (-S-).',
            'patterns': [thiol, thioether],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'High Fe/Hf Value: Modifiers with electron-withdrawing groups (EWGs) like nitro (-NO2), bromo (-Br), or pyridyl substituents on an aromatic ring.',
            'patterns': [nitro_on_aromatic, halogen_on_aromatic, pyridine_ring],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'High Fe/Hf Value: Modifiers containing multiple ether linkages (-O-), possibly with terminal amino groups (-NH2) or methoxy groups (-OCH3).',
            'patterns': [ether_linkage],
            'count_threshold': {ether_linkage: 2},  # At least 2 ether linkages
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Low Fe/Hf Value: Modifiers with aromatic rings substituted with electron-donating groups (EDGs) such as hydroxyl (-OH), amino (-NH2), or methyl (-CH3) groups.',
            'patterns': [aromatic_hydroxyl, aromatic_amine, aromatic_methyl],
            'exclude_patterns': [thiol, thioether, primary_aliph_amine],  # Exclude if strong coordinating groups are present
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Low Fe/Hf Value: Modifiers containing multiple hydroxyl groups (-OH) on aliphatic chains or sugar moieties.',
            'patterns': [hydroxyl_group],
            'count_threshold': {hydroxyl_group: 3},  # At least 3 hydroxyl groups
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Low Fe/Hf Value: Modifiers with aromatic aldehyde groups (-CHO).',
            'patterns': [aromatic_aldehyde],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Low Fe/Hf Value: Modifiers with perfluorinated alkyl chains.',
            'patterns': [perfluoroalkyl],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'High Fe/Hf Value: Modifiers with ketone functional groups adjacent to aromatic rings.',
            'patterns': [aromatic_ketone],
            'prediction': 1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        count_thresholds = {}
        for pat in rule.get('patterns', []):
            mol_pat = Chem.MolFromSmarts(pat)
            compiled_patterns.append(mol_pat)
            if 'count_threshold' in rule and pat in rule['count_threshold']:
                threshold = rule['count_threshold'][pat]
                count_thresholds[mol_pat] = threshold
        rule['compiled_patterns'] = compiled_patterns
        rule['count_thresholds'] = count_thresholds
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = [Chem.MolFromSmarts(pat) for pat in rule['exclude_patterns']]
            rule['compiled_exclude_patterns'] = compiled_excludes
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for pat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for pat in rule['compiled_patterns']:
                    matches = mol.GetSubstructMatches(pat)
                    if matches:
                        # If count threshold is specified for this pattern
                        if pat in rule.get('count_thresholds', {}):
                            threshold = rule['count_thresholds'][pat]
                            if len(matches) >= threshold:
                                continue
                            else:
                                match = False
                                break
                        else:
                            continue
                    else:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: Fe/Hf
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Analyzing the dataset and considering the underlying physical-chemical properties, here are the refined rules that describe the relationship between molecular modifiers and the relative high or low value of Fe/Hf:**

---

**Start of Rules**

1. **Rule 1**: Modifiers containing a **terminal amino group (-NH₂)** on an **aliphatic chain of four or more carbons**, with a **carboxylic acid group (-COOH)** at the other end, tend to have a **high Fe/Hf value**.
   - *Examples*: 5-aminopentanoic acid, 7-aminoheptanoic acid, 8-aminooctanoic acid.

2. **Rule 2**: Modifiers that are **amino acids** with **additional coordinating functional groups** such as **thiol (-SH)** or **thioether (-S-)** side chains tend to have a **high Fe/Hf value**.
   - *Examples*: (2S)-2-aminobutanedioic acid, (2S)-6-acetamido-2-aminohexanoic acid, 2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid.

3. **Rule 3**: Modifiers containing **sulfur-containing functional groups** like **thiols (-SH)** or **thioethers (-S-)** in combination with a **carboxylic acid group**, tend to have a **high Fe/Hf value**.
   - *Examples*: 3-sulfanylpropanoic acid, 4-sulfanylbenzoic acid.

4. **Rule 4**: Modifiers with a **pyridine ring** connected to a **carboxylic acid group** directly or via a linker tend to have a **high Fe/Hf value**.
   - *Examples*: 4-pyridin-4-ylbenzoic acid, 4-pyridin-4-ylbutanoic acid.

5. **Rule 5**: Modifiers containing an **aromatic ring with electron-withdrawing groups (EWGs)** such as **nitro (-NO₂)** or **bromo (-Br)** substituents, especially when the ring also has a **carboxylic acid group**, tend to have a **high Fe/Hf value**.
   - *Examples*: 4-nitrobenzoic acid, 4-(bromomethyl)benzoic acid.

6. **Rule 6**: Modifiers with **long aliphatic chains (seven or more carbons)** ending with a **hydroxyl group (-OH)** tend to have a **high Fe/Hf value**.
   - *Example*: 7-hydroxyheptanoic acid.

7. **Rule 7**: Modifiers containing **ether linkages (-O-)** in the chain with a **terminal amino group (-NH₂)** or **carboxylic acid group (-COOH)** tend to have a **high Fe/Hf value**.
   - *Examples*: 2-[2-(2-methoxyethoxy)ethoxy]acetic acid, 3-[2-(2-aminoethoxy)ethoxy]propanoic acid.

8. **Rule 8**: Modifiers that are **straight-chain aliphatic carboxylic acids** with no additional coordinating groups tend to have a **low Fe/Hf value**.
   - *Example*: Octanoic acid.

9. **Rule 9**: Modifiers containing **multiple hydroxyl groups (-OH)** on **aliphatic chains** or cyclic structures, without strong coordinating groups, tend to have a **low Fe/Hf value**.
   - *Example*: (2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid.

10. **Rule 10**: Modifiers with **aromatic rings substituted with electron-donating groups (EDGs)** such as **hydroxyl (-OH)** or **amino (-NH₂)**, without additional strong coordinating groups, tend to have a **low Fe/Hf value**.
    - *Examples*: 4-aminobenzoic acid, 3-(4-hydroxyphenyl)propanoic acid.

11. **Rule 11**: Modifiers possessing **perfluorinated alkyl chains** tend to have a **low Fe/Hf value**.
    - *Example*: 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid.

12. **Rule 12**: Modifiers containing **nitrogen-containing heterocycles** attached directly to a **carboxylic acid group** without a linker tend to have a **low Fe/Hf value**.
    - *Examples*: Pyridine-3-carboxylic acid, 1H-pyrazole-4-carboxylic acid.

13. **Rule 13**: Modifiers with **aldehyde groups (-CHO)** on **aromatic rings** without additional coordinating functionalities tend to have a **low Fe/Hf value**.
    - *Examples*: 4-formylbenzoic acid, 5-formyl-2-hydroxybenzoic acid.

**End of Rules**

---

**Explanation and Considerations:**

- **Underlying Physical-Chemical Properties**:

  - **Coordination Ability**:
    - Functional groups like **amino (-NH₂)**, **thiol (-SH)**, **thioether (-S-)**, and **pyridine nitrogen** can coordinate with Fe ions, increasing the Fe/Hf ratio.
    - Combining multiple coordinating groups enhances metal binding, leading to higher Fe incorporation.

  - **Electron-Withdrawing vs. Electron-Donating Groups**:
    - **Electron-Withdrawing Groups (EWGs)**, such as **nitro (-NO₂)** and **halogens (-Br)**, stabilize metal-ligand complexes, promoting higher Fe/Hf values.
    - **Electron-Donating Groups (EDGs)**, like **hydroxyl (-OH)** and **amino (-NH₂)** on aromatic rings, may reduce Fe coordination due to increased electron density and potential steric hindrance.

  - **Steric Effects and Chain Length**:
    - Longer aliphatic chains with terminal coordinating groups increase flexibility and accessibility for Fe coordination.
    - Bulky groups or multiple hydroxyls can hinder metal approach, reducing Fe incorporation.

- **Applicability of Rules**:

  - **High Fe/Hf Value Modifiers**:
    - **Rules 1–7** identify modifiers with strong coordinating groups and structural features that enhance Fe binding.
    - These modifiers often combine multiple functional groups (e.g., amino and thiol groups) to increase coordination.

  - **Low Fe/Hf Value Modifiers**:
    - **Rules 8–13** highlight modifiers lacking strong coordinating groups or having features that impede Fe coordination.
    - Modifiers with EDGs, steric hindrance, or electron-rich environments tend to have lower Fe/Hf values.

- **Coverage and Balance**:

  - The rules cover a wide range of structural motifs and functional group combinations present in the dataset.
  - There is a balance between simple rules with broader coverage (e.g., Rule 8 on straight-chain acids) and complex rules with narrower focus (e.g., Rule 7 on ether-linked chains with terminal groups).

---

**Conclusion:**

By applying these rules, one can predict whether a given molecular modifier will result in a high or low Fe/Hf value. This aids in the rational design and optimization of catalysts for the target radical-mediated δ-C(sp³)–H bond functionalization reaction. The rules emphasize the importance of combining multiple functional groups and considering both electronic and steric factors to achieve the desired Fe/Hf ratio.

---

**Note:** These rules are based on the provided dataset and chemical principles. When evaluating new modifiers, consider both the functional groups present and their potential impacts on Fe coordination, keeping in mind that actual outcomes may vary depending on additional factors not captured in the dataset.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13
0,0,0,0,0,1,0,-1,-1,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,-1,-1,0,0,0,0
0,0,0,0,0,0,0,-1,-1,0,0,0,0
0,0,0,1,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,-1,-1,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,1,0,0,0,0,0,0
0,0,0,1,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,1,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,-1,0,0,0,-1
0,0,0,0,0,0,0,-1,0,0,0,0,-1
0,0,0,0,1,0,0,-1,0,0,0,0,0
0,0,0,1,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0
1,1,1,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,1,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,-1,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,-1,0,0
0,0,0,0,0,1,0,-1,-1,0,0,0,0
0,0,0,0,0,0,0,-1,-1,0,0,0,0
1,0,0,0,0,1,0,0,0,0,0,0,0
0,0,0,0,0,0,1,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,1,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.7714285714285715; Test Accuracy: 1.0
    Train Support: 0.4; Test Support: 1.0
    Train Confidence: 0.7368421052631579; Test Confidence: 1.0
    Train Lift: 1.5170278637770895; Test Lift: NONE
    Train Leverage: 0.13632653061224492; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and features
    patterns = {
        'carboxylic_acid': Chem.MolFromSmarts('[CX3](=O)[OX2H1]'),
        'carboxylate_anion': Chem.MolFromSmarts('[CX3](=O)[O-]'),
        'primary_amino': Chem.MolFromSmarts('[NX3;H2]'),
        'secondary_amino': Chem.MolFromSmarts('[NX3;H1][#6]'),
        'thiol': Chem.MolFromSmarts('[SX2H]'),
        'thioether': Chem.MolFromSmarts('[#16X2][#6]'),
        'pyridine_ring': Chem.MolFromSmarts('n1ccccc1'),
        'aromatic_ring': Chem.MolFromSmarts('a1aaaaa1'),
        'nitro_group': Chem.MolFromSmarts('[NX3](=O)[O-]'),
        'halo_aromatic': Chem.MolFromSmarts('[c][F,Cl,Br,I]'),
        'hydroxyl': Chem.MolFromSmarts('[OX2H]'),
        'aldehyde': Chem.MolFromSmarts('[CX3H1](=O)[#6]'),
        'nitrogen_heterocycle': Chem.MolFromSmarts('[n]'),
        'perfluoro_alkyl': Chem.MolFromSmarts('[CX4]([F])[F]'),
        'long_aliphatic_chain': Chem.MolFromSmarts('[CH2][CH2][CH2][CH2][CH2]'),
        'ether_linkage': Chem.MolFromSmarts('[#6][OX2][#6]'),
        'amide_adjacent_aromatic': Chem.MolFromSmarts('[c][CX3](=O)[NX3]'),
        'aromatic_amino': Chem.MolFromSmarts('[c][NX3;H2,H1]'),
        'multiple_hydroxyls': Chem.MolFromSmarts('[OX2H]'),
        'edg_on_aromatic': Chem.MolFromSmarts('[c][NX3;H2,H1][#6]'),
    }
    
    # Define the rules with their associated patterns and properties
    rules = [
        {
            'number': 1,
            'description': 'Modifiers containing a terminal amino group (-NH2) on an aliphatic chain of four or more carbons, with a carboxylic acid group (-COOH) at the other end, tend to have a high Fe/Hf value.',
            'patterns': ['primary_amino', 'carboxylic_acid'],
            'min_chain_length': 4,
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers that are amino acids with additional coordinating functional groups such as thiol (-SH) or thioether (-S-) side chains tend to have a high Fe/Hf value.',
            'patterns': ['carboxylic_acid', 'primary_amino', ['thiol', 'thioether']],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers containing sulfur-containing functional groups like thiols (-SH) or thioethers (-S-) in combination with a carboxylic acid group, tend to have a high Fe/Hf value.',
            'patterns': ['carboxylic_acid', ['thiol', 'thioether']],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers with a pyridine ring connected to a carboxylic acid group directly or via a linker tend to have a high Fe/Hf value.',
            'patterns': ['pyridine_ring', 'carboxylic_acid'],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers containing an aromatic ring with electron-withdrawing groups (EWGs) such as nitro (-NO₂) or bromo (-Br) substituents, especially when the ring also has a carboxylic acid group, tend to have a high Fe/Hf value.',
            'patterns': ['aromatic_ring', 'carboxylic_acid', ['nitro_group', 'halo_aromatic']],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers with long aliphatic chains (seven or more carbons) ending with a hydroxyl group (-OH) tend to have a high Fe/Hf value.',
            'patterns': ['hydroxyl'],
            'min_chain_length': 7,
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'Modifiers containing ether linkages (-O-) in the chain with a terminal amino group (-NH₂) or carboxylic acid group (-COOH) tend to have a high Fe/Hf value.',
            'patterns': ['ether_linkage', ['primary_amino', 'carboxylic_acid']],
            'prediction': 1
        },
        {
            'number': 8,
            'description': 'Modifiers that are straight-chain aliphatic carboxylic acids with no additional coordinating groups tend to have a low Fe/Hf value.',
            'patterns': ['carboxylic_acid'],
            'exclude_patterns': ['primary_amino', 'thiol', 'thioether', 'ether_linkage'],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers containing multiple hydroxyl groups (-OH) on aliphatic chains or cyclic structures, without strong coordinating groups, tend to have a low Fe/Hf value.',
            'patterns': ['multiple_hydroxyls'],
            'min_hydroxyl_count': 2,
            'exclude_patterns': ['primary_amino', 'thiol', 'thioether', 'pyridine_ring'],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers with aromatic rings substituted with electron-donating groups (EDGs) such as hydroxyl (-OH) or amino (-NH₂), without additional strong coordinating groups, tend to have a low Fe/Hf value.',
            'patterns': ['aromatic_ring', 'carboxylic_acid', 'edg_on_aromatic'],
            'exclude_patterns': ['thiol', 'thioether', 'pyridine_ring'],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Modifiers possessing perfluorinated alkyl chains tend to have a low Fe/Hf value.',
            'patterns': ['perfluoro_alkyl'],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'Modifiers containing nitrogen-containing heterocycles attached directly to a carboxylic acid group without a linker tend to have a low Fe/Hf value.',
            'patterns': ['nitrogen_heterocycle', 'carboxylic_acid'],
            'attached_directly': True,
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Modifiers with aldehyde groups (-CHO) on aromatic rings without additional coordinating functionalities tend to have a low Fe/Hf value.',
            'patterns': ['aldehyde', 'aromatic_ring'],
            'exclude_patterns': ['primary_amino', 'thiol', 'thioether'],
            'prediction': -1
        }
    ]
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for ep in rule['exclude_patterns']:
                        if mol.HasSubstructMatch(patterns[ep]):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for pat_key in rule['patterns']:
                    if isinstance(pat_key, list):
                        # Logical OR: at least one of the patterns in the list should match
                        sub_match = False
                        for sub_pat in pat_key:
                            if mol.HasSubstructMatch(patterns[sub_pat]):
                                sub_match = True
                                break
                        if not sub_match:
                            match = False
                            break
                    else:
                        # Single pattern must match
                        if not mol.HasSubstructMatch(patterns[pat_key]):
                            match = False
                            break
                # Additional conditions
                if match and 'min_chain_length' in rule:
                    # Check for aliphatic chain length
                    chain_smarts = '[C]' + ('[C]' * (rule['min_chain_length'] - 1))
                    chain_pattern = Chem.MolFromSmarts(chain_smarts)
                    if not mol.HasSubstructMatch(chain_pattern):
                        match = False
                if match and 'min_hydroxyl_count' in rule:
                    # Count hydroxyl groups
                    count = len(mol.GetSubstructMatches(patterns['multiple_hydroxyls']))
                    if count < rule['min_hydroxyl_count']:
                        match = False
                if match and 'attached_directly' in rule and rule['attached_directly']:
                    # Check if nitrogen heterocycle is attached directly to carboxylic acid
                    matches_nitrogen = mol.GetSubstructMatches(patterns['nitrogen_heterocycle'])
                    matches_carboxylic_acid = mol.GetSubstructMatches(patterns['carboxylic_acid'])
                    direct_attachment = False
                    for n_atom in matches_nitrogen:
                        for c_atom in matches_carboxylic_acid:
                            bond = mol.GetBondBetweenAtoms(n_atom[0], c_atom[0])
                            if bond is not None:
                                direct_attachment = True
                                break
                        if direct_attachment:
                            break
                    if not direct_attachment:
                        match = False
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: Fe/Hf
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Analyzing the dataset and considering the underlying physical-chemical properties, here are the refined rules that describe the relationship between molecular modifiers and the relative high or low value of Fe/Hf:**

---

**Start of Rules**

1. **Rule 1**: **Modifiers with a terminal amino group (-NH₂) on an aliphatic chain of five or more carbons and a carboxylic acid group (-COOH) at the other end tend to have a high Fe/Hf value**.
   - *Examples*: 5-aminopentanoic acid, 7-aminoheptanoic acid, 8-aminooctanoic acid, 7-aminoheptanoic acid.

2. **Rule 2**: **Modifiers containing a thiol group (-SH) along with a carboxylic acid group (-COOH), either on an aliphatic chain or an aromatic ring, tend to result in a high Fe/Hf value**.
   - *Examples*: 3-sulfanylpropanoic acid, 4-sulfanylbenzoic acid.

3. **Rule 3**: **Modifiers featuring an aromatic ring substituted with electron-withdrawing groups (EWGs) such as nitro (-NO₂) or halogens (e.g., bromo (-Br)), along with a carboxylic acid group (-COOH), tend to have a high Fe/Hf value**.
   - *Examples*: 4-nitrobenzoic acid, 4-(bromomethyl)benzoic acid.

4. **Rule 4**: **Modifiers that include a pyridine ring connected to a carboxylic acid group (-COOH) via an aromatic ring or an aliphatic linker tend to have a high Fe/Hf value**.
   - *Examples*: 4-pyridin-4-ylbenzoic acid, 4-pyridin-4-ylbutanoic acid.

5. **Rule 5**: **Modifiers with ether linkages (-O-) in the aliphatic chain and terminating with a carboxylic acid group (-COOH) or amino group (-NH₂) tend to have a high Fe/Hf value**.
   - *Examples*: 2-[2-(2-methoxyethoxy)ethoxy]acetic acid, 3-[2-(2-aminoethoxy)ethoxy]propanoic acid.

6. **Rule 6**: **Modifiers that are simple aliphatic carboxylic acids without additional coordinating groups tend to have a low Fe/Hf value**.
   - *Example*: Octanoic acid.

7. **Rule 7**: **Modifiers with aromatic rings substituted with electron-donating groups (EDGs) such as hydroxyl (-OH) or amino (-NH₂), along with a carboxylic acid group (-COOH), tend to have a low Fe/Hf value**.
   - *Examples*: 4-aminobenzoic acid, 3-(4-hydroxyphenyl)propanoic acid, 5-(4-hydroxyphenyl)pentanoic acid.

8. **Rule 8**: **Modifiers containing multiple hydroxyl groups (-OH) on an aliphatic chain or cyclic structure, without additional strong coordinating groups, tend to have a low Fe/Hf value**.
   - *Example*: (2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid.

9. **Rule 9**: **Modifiers possessing perfluorinated alkyl chains tend to have a low Fe/Hf value**.
   - *Example*: 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid.

10. **Rule 10**: **Modifiers containing nitrogen-containing heterocycles directly attached to a carboxylic acid group (-COOH) without an aliphatic linker tend to have a low Fe/Hf value**.
    - *Examples*: Pyridine-3-carboxylic acid, 1H-pyrazole-4-carboxylic acid.

**End of Rules**

---

**Explanation and Considerations:**

- **Underlying Physical-Chemical Properties**:

  - **Coordination Ability**:
    - Functional groups like **amino (-NH₂)** and **thiol (-SH)** can serve as additional coordination sites for Fe ions, enhancing the metal-binding capability of the modifier and leading to a higher Fe/Hf ratio.
    - **Electron-withdrawing groups (EWGs)** on aromatic rings increase the Lewis acidity of the metal center and stabilize metal-ligand interactions, promoting higher Fe incorporation.
    - **Ether linkages** can influence the solubility and flexibility of the modifier, potentially facilitating better interaction with metal centers.

  - **Electron-Withdrawing vs. Electron-Donating Groups**:
    - **EWGs** decrease electron density on the ligand, strengthening metal-ligand coordination.
    - **Electron-donating groups (EDGs)**, such as hydroxyl and amino groups on aromatic rings, may compete with metal coordination or create steric hindrance, resulting in lower Fe incorporation.

  - **Steric Effects and Chain Length**:
    - Longer aliphatic chains with terminal coordinating groups (Rule 1) provide flexibility and reduce steric hindrance, enhancing Fe coordination.
    - Bulky groups or multiple hydroxyls (Rule 8) can hinder effective metal approach and binding.

  - **Structural Connectivity**:
    - The presence of linkers between functional groups affects the modifier's ability to chelate metals. For instance, pyridine rings connected via linkers (Rule 4) can position coordinating nitrogen atoms favorably for metal interaction.

- **Applicability of Rules**:

  - **High Fe/Hf Value Modifiers**:
    - **Rules 1–5** focus on modifiers with functional groups that enhance Fe coordination through multiple binding sites or favorable electronic properties.

  - **Low Fe/Hf Value Modifiers**:
    - **Rules 6–10** identify modifiers lacking strong coordinating groups or possessing features that reduce metal-binding efficiency.

- **Coverage and Balance**:

  - The rules cover a broad spectrum of functional groups and structural motifs present in the dataset.
  - There is a balance between:
    - **Simple rules with broad coverage** (e.g., Rule 6 on simple aliphatic acids).
    - **Complex rules with narrower focus** (e.g., Rule 5 on ether-linked chains with terminal groups).

---

**Conclusion:**

By applying these rules, one can predict whether a given molecular modifier will result in a high or low Fe/Hf value based on its structural features. This understanding aids in the rational design and selection of modifiers to optimize the catalyst for the target radical-mediated δ-C(sp³)–H bond functionalization reaction. The rules emphasize the importance of specific functional groups and their combinations in influencing metal coordination and incorporation within the catalyst structure.

---

**Note:** These rules are formulated based on the provided dataset and fundamental chemical principles. When evaluating new modifiers, consider both the presence of functional groups and their potential impact on Fe coordination, while acknowledging that actual experimental outcomes may vary due to factors beyond the scope of this analysis.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10
0,0,0,0,0,-1,0,-1,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,-1,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,-1,0,0
0,1,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0
0,0,0,1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,-1,0,0
0,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,-1,0
0,0,0,0,0,-1,0,-1,0,0
0,0,0,0,0,0,-1,-1,0,0
1,0,0,0,0,0,0,0,0,0
1,0,0,0,1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.7428571428571429; Test Accuracy: 1.0
    Train Support: 0.09714285714285714; Test Support: 0.0
    Train Confidence: 0.96; Test Confidence: 0.5
    Train Lift: 1.9124183006535946; Test Lift: NONE
    Train Leverage: 0.045387755102040815; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    import pandas as pd
    from rdkit import Chem
    from rdkit.Chem import AllChem
    
    # Function definitions for rules that require custom logic
    def rule1_match(mol):
        try:
            # Find primary amine groups
            primary_amines = [match[0] for match in mol.GetSubstructMatches(Chem.MolFromSmarts('[NX3H2]'))]
            # Find carboxylic acid groups (carbonyl carbon)
            carboxylic_acids = [match[0] for match in mol.GetSubstructMatches(Chem.MolFromSmarts('[CX3](=O)[OX2H1]'))]
            
            # For each primary amine and carboxylic acid, check if they are connected by a chain of 5 or more carbons
            for amine_idx in primary_amines:
                for acid_idx in carboxylic_acids:
                    path = Chem.rdmolops.GetShortestPath(mol, amine_idx, acid_idx)
                    if path:
                        # Count number of carbons in the path
                        num_carbons = sum(1 for idx in path if mol.GetAtomWithIdx(idx).GetAtomicNum()==6)
                        if num_carbons >= 5:
                            return True
            return False
        except:
            return False

    def rule4_match(mol):
        try:
            # Find pyridine rings
            pyridine = Chem.MolFromSmarts('n1cccc1')
            pyridine_matches = mol.GetSubstructMatches(pyridine)
            # Find carboxylic acid groups (carbonyl carbon)
            carboxylic_acid = Chem.MolFromSmarts('[CX3](=O)[OX2H1]')
            carboxylic_acid_matches = mol.GetSubstructMatches(carboxylic_acid)
            if not pyridine_matches or not carboxylic_acid_matches:
                return False
            # Check if there's a path between pyridine and carboxylic acid
            for pyr_ring in pyridine_matches:
                pyridine_atoms = set(pyr_ring)
                for acid in carboxylic_acid_matches:
                    for pyridine_atom_idx in pyridine_atoms:
                        path = Chem.rdmolops.GetShortestPath(mol, pyridine_atom_idx, acid[0])
                        if path:
                            return True
            return False
        except:
            return False

    def rule5_match(mol):
        try:
            # Check for ether linkage
            ether_linkage = Chem.MolFromSmarts('[#6][OX2][#6]')
            has_ether = mol.HasSubstructMatch(ether_linkage)
            # Check for terminal amino group or carboxylic acid group
            primary_amine = Chem.MolFromSmarts('[NX3H2]')
            carboxylic_acid = Chem.MolFromSmarts('[CX3](=O)[OX2H1]')
            has_terminal_group = mol.HasSubstructMatch(primary_amine) or mol.HasSubstructMatch(carboxylic_acid)
            if has_ether and has_terminal_group:
                return True
            return False
        except:
            return False
        
    def rule6_match(mol):
        try:
            # Must have carboxylic acid group
            carboxylic_acid = Chem.MolFromSmarts('[CX3](=O)[OX2H1]')
            if not mol.HasSubstructMatch(carboxylic_acid):
                return False
            # Must not have amine, sulfur, ether, halogen, aromatic
            amine = Chem.MolFromSmarts('[NX3]')
            sulfur = Chem.MolFromSmarts('[#16]')
            ether = Chem.MolFromSmarts('[#6][OX2][#6]')
            halogen = Chem.MolFromSmarts('[F,Cl,Br,I]')
            aromatic = Chem.MolFromSmarts('a')
            if not (mol.HasSubstructMatch(amine) or mol.HasSubstructMatch(sulfur) or mol.HasSubstructMatch(ether) or mol.HasSubstructMatch(halogen) or mol.HasSubstructMatch(aromatic)):
                return True
            else:
                return False
        except:
            return False

    def rule8_match(mol):
        try:
            # Count hydroxyl groups
            hydroxyl_group = Chem.MolFromSmarts('[OX2H]')
            hydroxyl_matches = mol.GetSubstructMatches(hydroxyl_group)
            if len(hydroxyl_matches) >= 2:
                # Exclude other strong coordinating groups
                amine = Chem.MolFromSmarts('[NX3]')
                thiol = Chem.MolFromSmarts('[SX2H]')
                if not (mol.HasSubstructMatch(amine) or mol.HasSubstructMatch(thiol)):
                    return True
            return False
        except:
            return False
                    
    # Define SMARTS patterns
    # Carboxylic acid group (-COOH)
    carboxylic_acid = Chem.MolFromSmarts('[CX3](=O)[OX2H1]')
    
    # Amino group (-NH2)
    primary_amine = Chem.MolFromSmarts('[NX3H2]')
    
    # Thiol group (-SH)
    thiol = Chem.MolFromSmarts('[SX2H]')
    
    # Ether linkage (-O-)
    ether_linkage = Chem.MolFromSmarts('[#6][OX2][#6]')
    
    # Pyridine ring
    pyridine_ring = Chem.MolFromSmarts('n1ccccc1')
    
    # Aromatic halogen
    aromatic_halogen = Chem.MolFromSmarts('c[F,Cl,Br,I]')
    
    # Aromatic nitro group
    aromatic_nitro = Chem.MolFromSmarts('c[N+](=O)[O-]')
    
    # Aromatic amine (-NH2 attached to aromatic ring)
    aromatic_amine = Chem.MolFromSmarts('c[NX3H2]')
    
    # Hydroxyl group (-OH)
    hydroxyl_group = Chem.MolFromSmarts('[OX2H]')
    
    # Aromatic hydroxyl group
    aromatic_hydroxyl = Chem.MolFromSmarts('c[OX2H]')
    
    # Perfluorinated alkyl chain (simplified as carbon with three fluorines)
    perfluoro_alkyl = Chem.MolFromSmarts('[CX4]([F])([F])([F])')
    
    # Nitrogen-containing heterocycles directly attached to carboxylic acid
    nitrogen_heterocycle_carboxylic_acid = Chem.MolFromSmarts('[nX2][CX3](=O)[OX2H1]')
    
    # Define the rules
    rules = []
    
    # Rule 1
    # High Fe/Hf
    rules.append({
        'number': 1,
        'description': 'Modifiers with a terminal amino group (-NH2) on an aliphatic chain of five or more carbons and a carboxylic acid group (-COOH) at the other end',
        'function': rule1_match,
        'prediction': 1
    })
    
    # Rule 2
    # High Fe/Hf
    rules.append({
        'number': 2,
        'description': 'Modifiers containing a thiol group (-SH) along with a carboxylic acid group (-COOH)',
        'patterns': [[thiol, carboxylic_acid]],
        'prediction': 1
    })
    
    # Rule 3
    # High Fe/Hf
    rules.append({
        'number': 3,
        'description': 'Modifiers featuring an aromatic ring substituted with electron-withdrawing groups (EWGs) such as nitro (-NO2) or halogens (e.g., bromo (-Br)), along with a carboxylic acid group (-COOH)',
        'patterns': [[aromatic_nitro, carboxylic_acid], [aromatic_halogen, carboxylic_acid]],
        'prediction':1
    })
    
    # Rule 4
    # High Fe/Hf
    rules.append({
        'number':4,
        'description':'Modifiers that include a pyridine ring connected to a carboxylic acid group (-COOH) via an aromatic ring or an aliphatic linker',
        'function':rule4_match,
        'prediction':1
    })
    
    # Rule 5
    # High Fe/Hf
    rules.append({
        'number':5,
        'description':'Modifiers with ether linkages (-O-) in the aliphatic chain and terminating with a carboxylic acid group (-COOH) or amino group (-NH2)',
        'function':rule5_match,
        'prediction':1
    })
    
    # Rule 6
    # Low Fe/Hf
    rules.append({
        'number':6,
        'description':'Modifiers that are simple aliphatic carboxylic acids without additional coordinating groups',
        'function':rule6_match,
        'prediction':-1
    })
    
    # Rule 7
    # Low Fe/Hf
    rules.append({
        'number':7,
        'description':'Modifiers with aromatic rings substituted with electron-donating groups (EDGs) such as hydroxyl (-OH) or amino (-NH2), along with a carboxylic acid group (-COOH)',
        'patterns': [[aromatic_hydroxyl, carboxylic_acid], [aromatic_amine, carboxylic_acid]],
        'prediction':-1
    })
    
    # Rule 8
    # Low Fe/Hf
    rules.append({
        'number':8,
        'description':'Modifiers containing multiple hydroxyl groups (-OH) on an aliphatic chain or cyclic structure, without additional strong coordinating groups',
        'function':rule8_match,
        'prediction':-1
    })
    
    # Rule 9
    # Low Fe/Hf
    rules.append({
        'number':9,
        'description':'Modifiers possessing perfluorinated alkyl chains',
        'patterns': [[perfluoro_alkyl]],
        'prediction':-1
    })
    
    # Rule 10
    # Low Fe/Hf
    rules.append({
        'number':10,
        'description':'Modifiers containing nitrogen-containing heterocycles directly attached to a carboxylic acid group (-COOH) without an aliphatic linker',
        'patterns': [[nitrogen_heterocycle_carboxylic_acid]],
        'prediction':-1
    })
    
    # Now process each SMILES, check the rules, and build the feature matrix
    results = []
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            row = [0]*len(rules)
            results.append(row)
            continue
        row = []
        for rule in rules:
            try:
                match = False
                if 'patterns' in rule:
                    # For rules that are based on patterns
                    for group in rule['patterns']:
                        group_match = all(mol.HasSubstructMatch(pat) for pat in group)
                        if group_match:
                            match = True
                            break
                elif 'function' in rule:
                    # For rules that require custom functions
                    match = rule['function'](mol)
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except:
                row.append(0)
        results.append(row)
    # Create DataFrame
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: Fe/Hf
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

1. **Rule 1**: **Modifiers that are aliphatic amino acids with a terminal amino group (-NH₂) and a terminal carboxylic acid group (-COOH) separated by at least three carbon atoms tend to have a high Fe/Hf value**.
   - *Examples*: 5-aminopentanoic acid, 7-aminoheptanoic acid, 8-aminooctanoic acid.

2. **Rule 2**: **Modifiers containing both a thiol group (-SH) and a carboxylic acid group (-COOH) on an aliphatic chain or aromatic ring tend to result in a high Fe/Hf value**.
   - *Examples*: 3-sulfanylpropanoic acid, 4-sulfanylbenzoic acid.

3. **Rule 3**: **Modifiers featuring an aromatic ring substituted with strong electron-withdrawing groups (EWGs) such as nitro (-NO₂), halogens (e.g., bromo (-Br)), or aldehyde (-CHO), along with a carboxylic acid group (-COOH), tend to have a high Fe/Hf value**.
   - *Examples*: 4-nitrobenzoic acid, 4-(bromomethyl)benzoic acid.

4. **Rule 4**: **Modifiers with aromatic rings substituted with electron-donating groups (EDGs) such as hydroxyl (-OH) or amino (-NH₂), along with a carboxylic acid group (-COOH), tend to have a low Fe/Hf value**.
   - *Examples*: 4-aminobenzoic acid, 3-(4-hydroxyphenyl)propanoic acid, 5-(4-hydroxyphenyl)pentanoic acid.

5. **Rule 5**: **Modifiers that are simple aliphatic carboxylic acids without additional strong coordinating groups tend to have a low Fe/Hf value**.
   - *Examples*: Octanoic acid, 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid.

6. **Rule 6**: **Modifiers containing multiple ether linkages (-O-) in the aliphatic chain and terminating with coordinating groups such as a carboxylic acid (-COOH) tend to have a high Fe/Hf value**.
   - *Examples*: 2-[2-(2-methoxyethoxy)ethoxy]acetic acid, 3-[2-(2-aminoethoxy)ethoxy]propanoic acid.

7. **Rule 7**: **Modifiers that feature a pyridine ring connected via an aliphatic linker to a carboxylic acid group (-COOH) tend to have a high Fe/Hf value**.
   - *Examples*: 4-pyridin-4-ylbutanoic acid.

8. **Rule 8**: **Modifiers containing multiple hydroxyl groups (-OH) on an aliphatic chain or cyclic structure, without additional strong coordinating groups, tend to have a low Fe/Hf value**.
   - *Example*: (2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid.

9. **Rule 9**: **Modifiers that are amino acids with bulky aromatic side chains possessing electron-rich rings tend to have a low Fe/Hf value**, whereas those with less electron-rich aromatic rings may have a high Fe/Hf value.
   - *Examples*:
     - Low Fe/Hf: (2R)-2-amino-3-(1H-indol-3-yl)propanoic acid (L-tryptophan).
     - High Fe/Hf: (2S)-2-amino-3-phenylpropanoic acid (L-phenylalanine).

10. **Rule 10**: **Modifiers containing nitrogen-containing heterocycles attached directly to a carboxylic acid group (-COOH) without an aliphatic linker tend to have a low Fe/Hf value**.
    - *Examples*: Pyridine-3-carboxylic acid, 1H-pyrazole-4-carboxylic acid.

11. **Rule 11**: **Modifiers with an aromatic ring fused to a lactone (cyclic ester) structure and containing a carboxylic acid group (-COOH) tend to have a high Fe/Hf value**.
    - *Example*: 1,3-dioxo-2-benzofuran-5-carboxylic acid.

12. **Rule 12**: **Modifiers that have both a terminal amino group (-NH₂) and internal sulfur-containing groups (-S- or -SCH₃) tend to have a high Fe/Hf value**.
    - *Example*: 2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid.

13. **Rule 13**: **Modifiers containing long aliphatic chains with a terminal hydroxyl group (-OH) and a terminal carboxylic acid group (-COOH) tend to have a high Fe/Hf value**.
    - *Example*: 7-hydroxyheptanoic acid.

14. **Rule 14**: **Modifiers with electron-rich aromatic rings connected via an amide linkage to a carboxylic acid group (-COOH) tend to have a low Fe/Hf value**.
    - *Example*: 2-[(4-hydroxybenzoyl)amino]acetic acid.

15. **Rule 15**: **Modifiers containing ether linkages along with terminal amino groups (-NH₂) and carboxylic acid groups (-COOH) tend to have a high Fe/Hf value**.
    - *Example*: 3-[2-(2-aminoethoxy)ethoxy]propanoic acid.

**End of Rules**

---

**Explanation and Considerations:**

- **Underlying Physical-Chemical Properties**:

  - **Coordination Ability**:
    - Functional groups like **amino (-NH₂)**, **thiol (-SH)**, and **ether linkages (-O-)** serve as coordination sites for Fe ions, enhancing metal-binding capability and leading to higher Fe/Hf ratios.
    - **Electron-withdrawing groups (EWGs)** (e.g., nitro, halogens) increase metal-binding affinity by stabilizing negative charge developed during coordination.
    - **Electron-donating groups (EDGs)** (e.g., hydroxyl, amino) can reduce metal-binding efficiency due to increased electron density and potential steric hindrance.

  - **Electron-Withdrawing vs. Electron-Donating Groups**:
    - **EWGs** enhance coordination by making the ligand more effective at binding metal ions.
    - **EDGs** can donate electron density to the ligand, potentially repelling metal ions and decreasing coordination efficiency.

  - **Steric Effects and Chain Length**:
    - Longer aliphatic chains with terminal coordinating groups (Rules 1, 13) provide flexibility and reduce steric hindrance, facilitating Fe coordination.
    - Bulky side chains or multiple hydroxyl groups (Rule 8) can hinder effective metal approach and binding.

  - **Structural Connectivity**:
    - The presence of linkers and specific positioning of functional groups affects the modifier's ability to chelate metals effectively (Rules 7, 10, 11).

- **Applicability of Rules**:

  - **High Fe/Hf Value Modifiers**:
    - **Rules 1–3, 6, 7, 11–13, 15** focus on modifiers with functional groups that enhance Fe coordination through multiple binding sites or favorable electronic properties.

  - **Low Fe/Hf Value Modifiers**:
    - **Rules 4, 5, 8–10, 14** identify modifiers lacking strong coordinating groups or possessing features that reduce metal-binding efficiency.

- **Coverage and Balance**:
  - The rules cover a broad range of functional groups and structural motifs present in the dataset.
  - There is a balance between:
    - **Simple rules with broad coverage** (e.g., Rule 5 on simple aliphatic acids).
    - **Complex rules with narrower focus** (e.g., Rule 12 on sulfur-containing amino acids).

---

**Conclusion:**

By applying these rules, one can predict whether a given molecular modifier will result in a high or low Fe/Hf value based on its structural features. This facilitates the rational design and selection of modifiers to optimize the catalyst for the target radical-mediated δ-C(sp³)–H bond functionalization reaction. The rules emphasize the importance of specific functional groups and their combinations in influencing metal coordination and incorporation within the catalyst structure.

---

**Note:** These rules are derived from the provided dataset and fundamental chemical principles. When evaluating new modifiers, consider both the presence of functional groups and their potential impact on Fe coordination, acknowledging that actual experimental outcomes may vary due to factors beyond the scope of this analysis.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,1,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,1,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,1,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
0,0,0,-1,0,0,1,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,1,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,1
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.7714285714285715; Test Accuracy: 1.0
    Train Support: 0.047619047619047616; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 1.9444444444444446; Test Lift: NONE
    Train Leverage: 0.023129251700680278; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:

def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and structural features
    carboxylic_acid = ['[CX3](=O)[OX2H1]', '[CX3](=O)[O-]']  # Carboxylic acid group (-COOH)
    amino_group = ['[NX3;H2]']  # Primary amino group (-NH2)
    thiol_group = ['[SX2H]']  # Thiol group (-SH)
    electron_withdrawing_groups = ['[CX3](=O)[OX1]', '[NX3](=O)=O', '[CX3H]=O', '[F,Cl,Br,I]', '[CX4]([F])([F])[F]']  # Aldehyde, nitro, halogens, trifluoromethyl
    electron_donating_groups = ['[OX2H]', '[NX3;H2,H1]']  # Hydroxyl, amino
    aromatic_ring = ['a1aaaaa1']  # Aromatic ring
    ether_linkage = ['[#6][OX2][#6]']  # Ether linkage (-O-)
    pyridine_ring = ['n1ccccc1']  # Pyridine ring
    multiple_hydroxyl_groups = ['[OX2H]']  # Hydroxyl group (-OH)
    sulfur_groups = ['[SX2H]', '[#16]-[#6]']  # Thiol and sulfide
    amide_group = ['[NX3][CX3](=O)[#6]']  # Amide group
    nitrogen_heterocycle = ['[n]']  # Nitrogen-containing heterocycles
    lactone_ring = ['O=C1OC=CC1']  # Simplified lactone ring
    long_aliphatic_chain = ['[CH2][CH2][CH2][CH2][CH2]']  # Chain of 5 CH2 units
    terminal_hydroxyl = ['[CH2][OX2H]']  # Terminal hydroxyl group (-CH2OH)
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'High Fe/Hf: Aliphatic amino acids with terminal -NH2 and -COOH separated by at least three carbons.',
            'patterns': [
                amino_group,  # Terminal amino group
                carboxylic_acid,  # Terminal carboxylic acid
                ['[CH2][CH2][CH2]']  # At least three carbon atoms in between
            ],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'High Fe/Hf: Modifiers containing both -SH and -COOH on aliphatic chain or aromatic ring.',
            'patterns': [
                thiol_group,  # Thiol group
                carboxylic_acid  # Carboxylic acid group
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'High Fe/Hf: Aromatic ring with strong EWGs (e.g., -NO2, halogens, -CHO) and -COOH.',
            'patterns': [
                aromatic_ring,  # Aromatic ring
                electron_withdrawing_groups,  # EWGs
                carboxylic_acid  # Carboxylic acid group
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Low Fe/Hf: Aromatic rings with EDGs (e.g., -OH, -NH2) and -COOH.',
            'patterns': [
                aromatic_ring,  # Aromatic ring
                electron_donating_groups,  # EDGs
                carboxylic_acid  # Carboxylic acid group
            ],
            'prediction': -1
        },
        {
            'number': 5,
            'description': 'Low Fe/Hf: Simple aliphatic carboxylic acids without strong coordinating groups.',
            'patterns': [
                carboxylic_acid  # Carboxylic acid group
            ],
            'exclude_patterns': [
                amino_group + thiol_group + sulfur_groups + ether_linkage + electron_withdrawing_groups + electron_donating_groups + aromatic_ring  # Exclude molecules with these groups
            ],
            'prediction': -1
        },
        {
            'number': 6,
            'description': 'High Fe/Hf: Modifiers with multiple ether linkages (-O-) in aliphatic chain and -COOH.',
            'patterns': [
                ['[#6][OX2][#6][OX2][#6][OX2][#6]'],  # Multiple ether linkages
                carboxylic_acid
            ],
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'High Fe/Hf: Pyridine ring connected via aliphatic linker to -COOH.',
            'patterns': [
                pyridine_ring,  # Pyridine ring
                carboxylic_acid,
                ['[CX4][CX4][CX4][CX3](=O)[OX2H1]']  # Aliphatic linker to COOH
            ],
            'prediction': 1
        },
        {
            'number': 8,
            'description': 'Low Fe/Hf: Modifiers with multiple hydroxyl groups on aliphatic chain or cyclic structure without strong coordinating groups.',
            'patterns': [
                multiple_hydroxyl_groups,  # Multiple hydroxyl groups
                carboxylic_acid
            ],
            'count_threshold': {'[OX2H]': 3},  # At least 3 hydroxyl groups
            'exclude_patterns': [
                amino_group + thiol_group + sulfur_groups + ether_linkage + electron_withdrawing_groups + aromatic_ring
            ],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Low/High Fe/Hf: Amino acids with bulky aromatic side chains with electron-rich rings (low), less electron-rich rings (high).',
            'patterns': [
                ['[NX3;H2][CX4H]([#6])[CX3](=O)[O-]'],  # Amino acid backbone
                ['c']  # Aromatic ring in side chain
            ],
            'prediction': None  # Requires additional logic
        },
        {
            'number': 10,
            'description': 'Low Fe/Hf: Nitrogen heterocycles attached directly to -COOH without aliphatic linker.',
            'patterns': [
                nitrogen_heterocycle,
                carboxylic_acid
            ],
            'exclude_patterns': [
                ['[CX4]']  # Exclude aliphatic linkers
            ],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'High Fe/Hf: Aromatic ring fused to lactone structure with -COOH.',
            'patterns': [
                lactone_ring,
                carboxylic_acid
            ],
            'prediction': 1
        },
        {
            'number': 12,
            'description': 'High Fe/Hf: Terminal -NH2 and internal sulfur groups (-S- or -SCH3).',
            'patterns': [
                amino_group,
                sulfur_groups
            ],
            'prediction': 1
        },
        {
            'number': 13,
            'description': 'High Fe/Hf: Long aliphatic chains with terminal -OH and -COOH.',
            'patterns': [
                long_aliphatic_chain,
                terminal_hydroxyl,
                carboxylic_acid
            ],
            'prediction': 1
        },
        {
            'number': 14,
            'description': 'Low Fe/Hf: Electron-rich aromatic rings connected via amide linkage to -COOH.',
            'patterns': [
                aromatic_ring,
                amide_group,
                carboxylic_acid
            ],
            'prediction': -1
        },
        {
            'number': 15,
            'description': 'High Fe/Hf: Ether linkages with terminal -NH2 and -COOH.',
            'patterns': [
                ether_linkage,
                amino_group,
                carboxylic_acid
            ],
            'prediction': 1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for pattern_group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(pat) for pat in pattern_group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for pattern_group in rule['exclude_patterns']:
                compiled_group = [Chem.MolFromSmarts(pat) for pat in pattern_group]
                compiled_excludes.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_excludes
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for compiled_group in rule['compiled_exclude_patterns']:
                        group_match = False
                        for pat in compiled_group:
                            if mol.HasSubstructMatch(pat):
                                group_match = True
                                break
                        if group_match:
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        matches = mol.GetSubstructMatches(pat)
                        if matches:
                            # Check for count threshold if specified
                            if 'count_threshold' in rule and pat.GetSmarts() in rule['count_threshold']:
                                threshold = rule['count_threshold'][pat.GetSmarts()]
                                if len(matches) >= threshold:
                                    group_match = True
                                    break
                            else:
                                group_match = True
                                break
                    if not group_match:
                        match = False
                        break
                if match:
                    # For Rule 9, additional logic is required
                    if rule['number'] == 9:
                        # Check for electron-rich vs. less electron-rich aromatic rings
                        # Simplify by assuming that if there is a nitrogen in the ring, it's electron-rich
                        if mol.HasSubstructMatch(Chem.MolFromSmarts('[c][n]')):
                            row.append(-1)
                        else:
                            row.append(1)
                    else:
                        row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f"Rule {rule['number']}" for rule in rules])
    return df

--------------------------------------------------
    Target Name: Fe/Hf
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

1. **Rule 1**: Modifiers that are **aliphatic amino acids** with a terminal **amino group (-NH₂)** and a **carboxylic acid group (-COOH)** connected via an aliphatic chain of **five or more carbons** tend to result in a **high Fe/Hf value**.

   - *Examples*: 5-aminopentanoic acid, 7-aminoheptanoic acid, 8-aminooctanoic acid.

2. **Rule 2**: Modifiers containing both a **thiol group (-SH)** and a **carboxylic acid group (-COOH)**, whether in an aliphatic chain or attached to an aromatic ring, tend to result in a **high Fe/Hf value**.

   - *Examples*: 3-sulfanylpropanoic acid, 4-sulfanylbenzoic acid.

3. **Rule 3**: Modifiers featuring an **aromatic ring** substituted with strong **electron-withdrawing groups (EWGs)** such as **nitro (-NO₂)** or **halogens** (e.g., **bromo (-Br)**), along with a **carboxylic acid group (-COOH)**, tend to result in a **high Fe/Hf value**.

   - *Examples*: 4-nitrobenzoic acid, 4-(bromomethyl)benzoic acid.

4. **Rule 4**: Modifiers containing **multiple ether linkages (-O-)** in an aliphatic chain and terminating with a **carboxylic acid group (-COOH)**, possibly with additional **amino groups (-NH₂)**, tend to result in a **high Fe/Hf value**.

   - *Examples*: 2-[2-(2-methoxyethoxy)ethoxy]acetic acid, 3-[2-(2-aminoethoxy)ethoxy]propanoic acid.

5. **Rule 5**: Modifiers featuring a **pyridine ring** connected to a **carboxylic acid group (-COOH)**, either directly or via an aliphatic linker, tend to result in a **high Fe/Hf value**.

   - *Examples*: 4-pyridin-4-ylbenzoic acid, 4-pyridin-4-ylbutanoic acid.

6. **Rule 6**: Modifiers that are **amino acids with aromatic side chains**, such as **phenylalanine** derivatives, tend to result in a **high Fe/Hf value**.

   - *Example*: (2S)-2-amino-3-phenylpropanoic acid.

7. **Rule 7**: Modifiers that are **simple aliphatic carboxylic acids** without additional coordinating functional groups tend to result in a **low Fe/Hf value**.

   - *Examples*: Octanoic acid, 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid.

8. **Rule 8**: Modifiers featuring an **aromatic ring** substituted with **electron-donating groups (EDGs)** such as **hydroxyl (-OH)** or **amino (-NH₂)**, along with a **carboxylic acid group (-COOH)**, tend to result in a **low Fe/Hf value**.

   - *Examples*: 4-aminobenzoic acid, 5-(4-hydroxyphenyl)pentanoic acid, 3-(4-hydroxyphenyl)propanoic acid.

9. **Rule 9**: Modifiers containing **multiple hydroxyl groups (-OH)** on an aliphatic chain or cyclic structure, without additional strong coordinating groups, tend to result in a **low Fe/Hf value**.

   - *Example*: (2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid.

10. **Rule 10**: Modifiers containing **nitrogen-containing heterocycles** directly attached to a **carboxylic acid group (-COOH)** without an aliphatic linker tend to result in a **low Fe/Hf value**.

    - *Examples*: Pyridine-3-carboxylic acid, 1H-pyrazole-4-carboxylic acid.

11. **Rule 11**: Modifiers with **aliphatic chains** terminated with both a **hydroxyl group (-OH)** and a **carboxylic acid group (-COOH)** tend to result in a **high Fe/Hf value**.

    - *Example*: 7-hydroxyheptanoic acid.

12. **Rule 12**: Modifiers that are **amino acids with additional coordinating side chain functional groups**, such as **sulfide (-S-)** or **amide (-CONH₂)** groups, tend to result in a **high Fe/Hf value**.

    - *Examples*: (2S)-6-acetamido-2-aminohexanoic acid, 2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid.

13. **Rule 13**: Modifiers containing both **amino groups (-NH₂)** and **ether linkages (-O-)** in an aliphatic chain tend to result in a **high Fe/Hf value**.

    - *Example*: 3-[2-(2-aminoethoxy)ethoxy]propanoic acid.

14. **Rule 14**: Modifiers featuring a **conjugated ketone group** adjacent to an **aromatic ring** and a **carboxylic acid group (-COOH)** tend to result in a **high Fe/Hf value**.

    - *Example*: 1,3-dioxo-2-benzofuran-5-carboxylic acid.

15. **Rule 15**: Modifiers that are **amino acids with an indole ring** in the side chain tend to result in a **low Fe/Hf value**.

    - *Example*: (2R)-2-amino-3-(1H-indol-3-yl)propanoic acid.

**End of Rules**

---

**Explanation and Considerations:**

- **Underlying Physical-Chemical Properties:**

  - **Coordination Ability:**

    - **Enhancing Fe Coordination:**

      - **Thiol Groups (-SH)**: Contain lone pairs on sulfur that strongly coordinate with Fe ions (Rules 2 and 12).

      - **Amino Groups (-NH₂)**: Act as electron donors, coordinating with Fe ions (Rules 1, 6, 13).

      - **Ether Linkages (-O-)**: Oxygen atoms can coordinate with metal centers due to lone pairs (Rules 4 and 13).

      - **Nitrogen Heterocycles (Pyridine Rings)**: Nitrogen atoms in pyridine can coordinate with Fe (Rule 5).

      - **Electron-Withdrawing Groups (EWGs)**: Increase acidity, facilitating deprotonation of carboxylic acids and enhancing Fe coordination (Rule 3).

    - **Impeding Fe Coordination:**

      - **Electron-Donating Groups (EDGs)**: Decrease acidity, reducing the ability of carboxylic acids to coordinate with Fe ions (Rule 8).

      - **Bulky or Rigid Structures**: Steric hindrance from bulky side chains or rigid aromatic rings can impede coordination (Rule 15).

  - **Chain Length and Flexibility:**

    - **Long Aliphatic Chains**: Increase flexibility, allowing coordinating groups to effectively interact with Fe ions (Rules 1, 11).

    - **Aliphatic vs. Aromatic Structures**: Aliphatic chains provide flexibility, while rigid aromatic structures may hinder coordination unless they contain strong coordinating groups.

- **Applicability of Rules:**

  - **High Fe/Hf Value Predictors**:

    - **Rules 1–6, 11–14** identify modifiers with functional groups that enhance Fe coordination, such as thiols, amines, ether linkages, and EWGs.

    - **Key Factors**: Presence of multiple coordinating sites, flexible aliphatic chains, and electron-withdrawing substituents.

  - **Low Fe/Hf Value Predictors**:

    - **Rules 7–10, 15** identify modifiers lacking strong coordinating groups or containing features that impede Fe binding, such as EDGs or steric hindrance.

    - **Key Factors**: Absence of additional coordinating groups, presence of electron-donating groups, rigidity due to aromatic rings without coordinating substituents.

- **Coverage and Balance:**

  - **Broad Dataset Coverage**: The rules encompass a wide range of functional groups and structural features present in the dataset, ensuring broad applicability.

  - **Balance Between Simplicity and Complexity**:

    - **Simple Rules**: Provide general predictions covering many modifiers (e.g., Rule 7 on simple aliphatic acids).

    - **Complex Rules**: Address specific combinations of functional groups for more precise predictions (e.g., Rule 12 on amino acids with additional coordinating groups).

---

**Conclusion:**

By integrating chemical insights and analyzing the dataset, these rules offer a systematic approach to predict whether a molecular modifier will result in a high or low Fe/Hf value based on its structural features. Understanding how functional groups interact with Fe ions allows for the rational design and selection of modifiers to enhance catalyst performance in the radical-mediated remote δ-C(sp³)–H bond functionalization reaction. This knowledge is instrumental in optimizing reaction conditions and achieving higher yields.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,-1,0,-1,0,1,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,1,0,0,0,0
0,0,1,0,0,0,0,-1,0,0,1,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
0,0,0,0,0,1,0,-1,0,0,1,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,1,0,0,0,0
0,0,0,0,0,0,-1,0,-1,0,1,0,0,0,0
0,0,0,0,0,0,0,-1,-1,0,1,0,0,0,0
0,0,0,0,1,0,0,-1,0,0,1,0,0,0,0
0,0,0,0,0,0,-1,0,-1,0,1,0,0,0,0
0,1,0,0,0,0,0,-1,0,0,1,0,0,0,0
0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
0,0,0,0,1,0,0,-1,0,0,1,0,0,0,0
0,0,0,0,0,1,0,-1,0,0,1,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,1,0,0,0,0
0,0,0,0,0,1,0,-1,0,0,1,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,1,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,1,0,0,0,0
0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
0,0,0,0,0,0,0,-1,-1,0,1,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,1,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,1,0,0,0,0
0,0,0,0,1,0,0,-1,0,0,1,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,1,1,0,0,0
0,0,0,0,1,0,0,-1,0,0,1,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,1,0,0,0,0
0,0,0,0,0,0,0,-1,-1,0,1,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,1,0,0,0,0
0,0,0,0,0,0,-1,0,-1,0,1,0,0,0,0
0,0,0,0,0,0,0,-1,-1,0,1,0,0,0,0
1,0,0,0,0,0,0,0,0,0,1,0,0,0,0
0,0,0,1,0,0,0,0,0,0,1,0,1,0,0
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
1,0,0,0,0,0,0,0,0,0,1,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.7428571428571429; Test Accuracy: 1.0
    Train Support: 0.17142857142857143; Test Support: 1.0
    Train Confidence: 0.8055555555555556; Test Confidence: 1.0
    Train Lift: 1.6584967320261437; Test Lift: NONE
    Train Leverage: 0.0673469387755102; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and structural features
    # Carboxylic acid group (-COOH)
    carboxylic_acid = Chem.MolFromSmarts('[CX3](=O)[OX2H1]')
    
    # Amino group (-NH2)
    amino_group = Chem.MolFromSmarts('[NX3;H2]')
    
    # Thiol group (-SH)
    thiol_group = Chem.MolFromSmarts('[SX2H]')
    
    # Aromatic ring
    aromatic_ring = Chem.MolFromSmarts('a')
    
    # Electron-withdrawing groups (EWGs)
    nitro_group = Chem.MolFromSmarts('[NX3](=O)=O')
    halogen = Chem.MolFromSmarts('[F,Cl,Br,I]')
    
    # Ether linkage (-O-)
    ether_linkage = Chem.MolFromSmarts('[CX4][OX2][CX4]')
    
    # Pyridine ring
    pyridine_ring = Chem.MolFromSmarts('n1ccccc1')
    
    # Electron-donating groups (EDGs)
    hydroxyl_group = Chem.MolFromSmarts('[OX2H]')
    amino_group_EDG = Chem.MolFromSmarts('[NX3;H2,H1][#6]')
    
    # Long aliphatic chain of five or more carbons
    long_chain = Chem.MolFromSmarts('[CH2][CH2][CH2][CH2][CH2]')
    
    # Multiple hydroxyl groups (for Rule 9)
    multiple_hydroxyls = Chem.MolFromSmarts('[OX2H]')
    
    # Conjugated ketone adjacent to aromatic ring
    conjugated_ketone = Chem.MolFromSmarts('c[C](=O)c')
    
    # Indole ring
    indole_ring = Chem.MolFromSmarts('c1c[cH]c2c1cccc2')
    
    # Define rules with their patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are aliphatic amino acids with a terminal amino group (-NH2) and a carboxylic acid group (-COOH) connected via an aliphatic chain of five or more carbons tend to result in a high Fe/Hf value.',
            'patterns': [amino_group, carboxylic_acid, long_chain],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers containing both a thiol group (-SH) and a carboxylic acid group (-COOH), whether in an aliphatic chain or attached to an aromatic ring, tend to result in a high Fe/Hf value.',
            'patterns': [thiol_group, carboxylic_acid],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers featuring an aromatic ring substituted with strong electron-withdrawing groups (EWGs) such as nitro (-NO2) or halogens (e.g., bromo (-Br)), along with a carboxylic acid group (-COOH), tend to result in a high Fe/Hf value.',
            'patterns': [aromatic_ring, carboxylic_acid],
            'sub_patterns': [nitro_group, halogen],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers containing multiple ether linkages (-O-) in an aliphatic chain and terminating with a carboxylic acid group (-COOH), possibly with additional amino groups (-NH2), tend to result in a high Fe/Hf value.',
            'patterns': [ether_linkage, carboxylic_acid],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers featuring a pyridine ring connected to a carboxylic acid group (-COOH), either directly or via an aliphatic linker, tend to result in a high Fe/Hf value.',
            'patterns': [pyridine_ring, carboxylic_acid],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers that are amino acids with aromatic side chains, such as phenylalanine derivatives, tend to result in a high Fe/Hf value.',
            'patterns': [amino_group, carboxylic_acid, aromatic_ring],
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'Modifiers that are simple aliphatic carboxylic acids without additional coordinating functional groups tend to result in a low Fe/Hf value.',
            'patterns': [carboxylic_acid],
            'exclude_patterns': [amino_group, thiol_group, ether_linkage, aromatic_ring],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Modifiers featuring an aromatic ring substituted with electron-donating groups (EDGs) such as hydroxyl (-OH) or amino (-NH2), along with a carboxylic acid group (-COOH), tend to result in a low Fe/Hf value.',
            'patterns': [aromatic_ring, carboxylic_acid],
            'sub_patterns': [hydroxyl_group, amino_group_EDG],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers containing multiple hydroxyl groups (-OH) on an aliphatic chain or cyclic structure, without additional strong coordinating groups, tend to result in a low Fe/Hf value.',
            'patterns': [carboxylic_acid],
            'count_pattern': multiple_hydroxyls,
            'min_count': 2,
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers containing nitrogen-containing heterocycles directly attached to a carboxylic acid group (-COOH) without an aliphatic linker tend to result in a low Fe/Hf value.',
            'patterns': [carboxylic_acid],
            'sub_patterns': [pyridine_ring],
            'max_linker_length': 0,
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Modifiers with aliphatic chains terminated with both a hydroxyl group (-OH) and a carboxylic acid group (-COOH) tend to result in a high Fe/Hf value.',
            'patterns': [hydroxyl_group, carboxylic_acid],
            'prediction': 1
        },
        {
            'number': 12,
            'description': 'Modifiers that are amino acids with additional coordinating side chain functional groups, such as sulfide (-S-) or amide (-CONH2) groups, tend to result in a high Fe/Hf value.',
            'patterns': [amino_group, carboxylic_acid],
            'sub_patterns': [Chem.MolFromSmarts('[SX2]'), Chem.MolFromSmarts('[CX3](=O)[NX3;H2]')],
            'prediction': 1
        },
        {
            'number': 13,
            'description': 'Modifiers containing both amino groups (-NH2) and ether linkages (-O-) in an aliphatic chain tend to result in a high Fe/Hf value.',
            'patterns': [amino_group, ether_linkage],
            'prediction': 1
        },
        {
            'number': 14,
            'description': 'Modifiers featuring a conjugated ketone group adjacent to an aromatic ring and a carboxylic acid group (-COOH) tend to result in a high Fe/Hf value.',
            'patterns': [conjugated_ketone, carboxylic_acid],
            'prediction': 1
        },
        {
            'number': 15,
            'description': 'Modifiers that are amino acids with an indole ring in the side chain tend to result in a low Fe/Hf value.',
            'patterns': [amino_group, carboxylic_acid, indole_ring],
            'prediction': -1
        }
    ]
    
    # Initialize the result matrix
    result_matrix = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            result_matrix.append([0] * len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns
                if 'exclude_patterns' in rule:
                    for exclude_pat in rule['exclude_patterns']:
                        if mol.HasSubstructMatch(exclude_pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check main patterns
                for pat in rule['patterns']:
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Check sub-patterns (e.g., substitutions on rings)
                if 'sub_patterns' in rule:
                    sub_match = False
                    for sub_pat in rule['sub_patterns']:
                        if mol.HasSubstructMatch(sub_pat):
                            sub_match = True
                            break
                    if not sub_match:
                        match = False
                if not match:
                    row.append(0)
                    continue
                # Check count patterns (e.g., multiple hydroxyl groups)
                if 'count_pattern' in rule:
                    matches = mol.GetSubstructMatches(rule['count_pattern'])
                    if len(matches) < rule['min_count']:
                        match = False
                if not match:
                    row.append(0)
                    continue
                # Check linker length (for Rule 10)
                if 'max_linker_length' in rule:
                    linker_match = False
                    paths = Chem.FindAllPathsOfLengthN(mol, rule['max_linker_length']+2, useBonds=True)
                    for path in paths:
                        atoms_in_path = [mol.GetAtomWithIdx(idx) for idx in path]
                        if any(atom.GetSymbol() == 'N' for atom in atoms_in_path) and any(atom.HasSubstructMatch(carboxylic_acid) for atom in atoms_in_path):
                            linker_match = True
                            break
                    if not linker_match:
                        match = False
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        result_matrix.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(result_matrix, columns=[f"Rule {rule['number']}" for rule in rules])
    return df


--------------------------------------------------
    Target Name: Fe/Hf
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

1. **Rule 1**: Modifiers containing a **terminal amino group (-NH₂)** on an **aliphatic chain of at least five carbons**, with a **carboxylic acid group (-COOH)** at the other end, tend to result in a **high Fe/Hf value**.

   - *Examples*: 5-aminopentanoic acid, 7-aminoheptanoic acid, 8-aminooctanoic acid, (2S)-6-acetamido-2-aminohexanoic acid.

2. **Rule 2**: Modifiers that are **aromatic carboxylic acids** substituted with **strong electron-withdrawing groups (EWGs)** such as **nitro (-NO₂)** or **halogens (e.g., bromomethyl group)** at the **para position** tend to result in a **high Fe/Hf value**.

   - *Examples*: 4-nitrobenzoic acid, 4-(bromomethyl)benzoic acid.

3. **Rule 3**: Modifiers containing a **thiol group (-SH)** attached to an **aromatic ring** or an **aliphatic chain**, along with a **carboxylic acid group (-COOH)**, tend to result in a **high Fe/Hf value** due to the strong coordinating ability of sulfur atoms.

   - *Examples*: 4-sulfanylbenzoic acid, 3-sulfanylpropanoic acid.

4. **Rule 4**: Modifiers featuring a **pyridine ring** connected via a **conjugated system** (directly or through a phenylene linker) to a **carboxylic acid group (-COOH)** tend to result in a **high Fe/Hf value**, owing to the chelating ability of the nitrogen atom in the pyridine ring.

   - *Examples*: 4-pyridin-4-ylbenzoic acid, 4-pyridin-4-ylbutanoic acid.

5. **Rule 5**: Modifiers that are **amino acids** with **hydrophobic side chains** containing **sulfur atoms** tend to result in a **high Fe/Hf value**. The presence of sulfur enhances the coordination with iron.

   - *Examples*: 2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid.

6. **Rule 6**: Modifiers containing **multiple ether linkages (-O-)** within an **aliphatic chain**, and possessing a **terminal donor group** such as **amino (-NH₂)** or **methoxy (-OCH₃)**, along with a **carboxylic acid group (-COOH)**, tend to result in a **high Fe/Hf value** because the ether oxygens can coordinate with iron.

   - *Examples*: 2-[2-(2-methoxyethoxy)ethoxy]acetic acid, 3-[2-(2-aminoethoxy)ethoxy]propanoic acid.

7. **Rule 7**: Modifiers that are **aliphatic carboxylic acids** with **no additional functional groups** beyond the **carboxylic acid (-COOH)** tend to result in a **low Fe/Hf value**, as they lack additional sites for strong coordination with iron.

   - *Examples*: Octanoic acid, 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid.

8. **Rule 8**: Modifiers that are **aromatic carboxylic acids** substituted with **electron-donating groups (EDGs)** such as **hydroxyl (-OH)** or **amino (-NH₂)** groups, particularly at the **para position**, tend to result in a **low Fe/Hf value**. These groups can reduce the acidity of the carboxylic acid, diminishing coordination with iron.

   - *Examples*: 4-aminobenzoic acid, 4-hydroxybenzoic acid, 4-methylbenzoic acid.

9. **Rule 9**: Modifiers with an **aromatic ring** connected to an **aliphatic chain bearing a hydroxyl group (-OH)**, along with a **carboxylic acid group (-COOH)**, tend to result in a **low Fe/Hf value**. The hydroxyl group may engage in intramolecular hydrogen bonding, reducing its availability to coordinate with iron.

   - *Examples*: 5-(4-hydroxyphenyl)pentanoic acid, 3-(4-hydroxyphenyl)propanoic acid.

10. **Rule 10**: Modifiers that are **amino acids** with **bulky side chains containing electron-rich heterocycles**, such as **indole rings**, tend to result in a **low Fe/Hf value**. The steric hindrance and electron-rich nature of these groups may impede effective coordination with iron.

    - *Example*: (2R)-2-amino-3-(1H-indol-3-yl)propanoic acid.

11. **Rule 11**: Modifiers containing **multiple hydroxyl groups (-OH)** on an **aliphatic chain**, without other strong coordinating groups, tend to result in a **low Fe/Hf value**. The abundance of hydroxyl groups may lead to intramolecular hydrogen bonding, reducing their ability to coordinate with iron.

    - *Example*: (2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid.

12. **Rule 12**: Modifiers that are **aromatic carboxylic acids** with an **aldehyde group (-CHO)** at the **para or ortho position** tend to result in a **low Fe/Hf value**. The aldehyde group can engage in resonance with the aromatic ring, reducing the acidity and coordinating ability of the carboxylic acid.

    - *Examples*: 4-formylbenzoic acid, 5-formyl-2-hydroxybenzoic acid.

13. **Rule 13**: Modifiers with **electron-deficient aromatic heterocycles** (such as **pyridine or pyrazole rings**) where the **carboxylic acid group (-COOH)** is directly attached to the ring tend to result in a **low Fe/Hf value**. The nitrogen atom's lone pair is delocalized into the ring, making it less available for coordination.

    - *Examples*: Pyridine-3-carboxylic acid, 1H-pyrazole-4-carboxylic acid.

14. **Rule 14**: Modifiers containing a **terminal hydroxyl group (-OH)** on an **aliphatic chain of seven or more carbons**, with a **carboxylic acid group (-COOH)** at the other end, tend to result in a **high Fe/Hf value**. The hydroxyl and carboxyl groups can cooperatively coordinate with iron.

    - *Example*: 7-hydroxyheptanoic acid.

15. **Rule 15**: Modifiers that are **cyclic anhydrides or lactones** derived from **aromatic carboxylic acids**, possessing additional **carbonyl groups**, tend to result in a **high Fe/Hf value**. The multiple carbonyl oxygens provide strong coordination sites for iron.

    - *Example*: 1,3-Dioxo-2-benzofuran-5-carboxylic acid.

**End of Rules**

---

These rules have been generated by analyzing the provided dataset and considering the underlying physicochemical principles affecting Fe/Hf ratios. The rules aim to:

- Combine multiple substructures and functional groups to explain the observed Fe/Hf values.
- Emphasize functional groups known for strong metal coordination (e.g., amino, thiol, pyridine nitrogen, ether oxygens).
- Reflect the influence of electron-withdrawing and electron-donating substituents on metal coordination.
- Cover a broad range of the dataset while maintaining a balance between breadth and specificity.

### Highlights and Improvements:

- **Rule Refinement**: Rules have been refined to focus on the coordination chemistry of iron with the modifiers, emphasizing functional groups that can act as ligands.
  
- **Combination of Functional Groups**: The rules combine features like chain length, presence of specific functional groups, and their positions to provide a more comprehensive prediction.

- **Physicochemical Considerations**: The coordination ability of functional groups, the electronic influence of substituents, and steric factors have been considered to rationalize the Fe/Hf values.

- **Broad Coverage**: The rules have been designed to cover as many compounds in the dataset as possible while maintaining clarity and predictive power.

- **Simplification**: Overlapping or less impactful rules from the previous set have been consolidated or discarded to streamline the rule set.

### Application:

These rules can be used to predict whether a new modifier is likely to result in a high or low Fe/Hf value based on its structural features. When evaluating a new modifier:

1. Identify the key functional groups and structural motifs present.
2. Compare these features to the rules above.
3. Determine if the modifier fits within one or more rules predicting a high or low Fe/Hf value.
4. Use the rules to make an informed prediction about the modifier's effect on the Fe/Hf ratio.

**Note**: While these rules are based on the provided dataset, experimental validation is recommended for new modifiers to confirm their effect on the Fe/Hf ratio.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,-1,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,-1,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,-1,-1,0,0,0,-1,0,0
0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,1
0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,-1,0,0,-1,0,0,0
0,0,0,0,0,0,0,-1,-1,0,0,-1,0,0,0
0,1,0,0,0,0,0,-1,-1,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.7142857142857143; Test Accuracy: 0.0
    Train Support: 0.08095238095238096; Test Support: 0.0
    Train Confidence: 0.8388888888888889; Test Confidence: 0.5
    Train Lift: 1.6604030501089324; Test Lift: NONE
    Train Leverage: 0.019591836734693877; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:

def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    carboxylate_anion = '[CX3](=O)[O-]'
    primary_amine = '[NX3H2]'
    thiol = '[SX2H]'
    pyridine_ring = '[n]1ccccc1'
    aromatic_ring = 'c1ccccc1'
    halogens = '[F,Cl,Br,I]'
    nitro_group = '[N+](=O)[O-]'
    aldehyde = '[CX3H1](=O)'
    hydroxyl_group = '[OX2H]'
    ether_linkage = '[#6][OX2][#6]'
    amino_acid_pattern = '[NX3][CX4H]([*])[CX3](=O)[OX2H1]'
    aliphatic_chain_five = '[C;X4H2][C;X4H2][C;X4H2][C;X4H2][C;X4H2]'
    aliphatic_chain_seven = '[C;X4H2][C;X4H2][C;X4H2][C;X4H2][C;X4H2][C;X4H2][C;X4H2]'
    indole_ring = 'c1cc2c(c1)ccc2'
    multiple_oh = '[OX2H]'

    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers containing a terminal amino group (-NH2) on an aliphatic chain of at least five carbons, with a carboxylic acid group (-COOH) at the other end.',
            'patterns': [
                [primary_amine],  # Terminal amino group
                [carboxylic_acid, carboxylate_anion],  # Carboxylic acid group
            ],
            'chain_length': 5,
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers that are aromatic carboxylic acids substituted with strong electron-withdrawing groups (EWGs) such as nitro (-NO2) or halogens at the para position.',
            'patterns': [
                [aromatic_ring],
                [carboxylic_acid, carboxylate_anion],  # Carboxylic acid group attached to aromatic ring
                [halogens, nitro_group],  # EWG at para position
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers containing a thiol group (-SH) attached to an aromatic ring or an aliphatic chain, along with a carboxylic acid group (-COOH).',
            'patterns': [
                [thiol],  # Thiol group
                [carboxylic_acid, carboxylate_anion],  # Carboxylic acid group
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers featuring a pyridine ring connected via a conjugated system to a carboxylic acid group (-COOH).',
            'patterns': [
                [pyridine_ring],  # Pyridine ring
                [carboxylic_acid, carboxylate_anion],  # Carboxylic acid group
            ],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers that are amino acids with hydrophobic side chains containing sulfur atoms.',
            'patterns': [
                [amino_acid_pattern],  # Amino acid pattern
                [thiol],  # Sulfur atom in side chain (thiol)
            ],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers containing multiple ether linkages (-O-) within an aliphatic chain, and possessing a terminal donor group such as amino (-NH2) or methoxy (-OCH3), along with a carboxylic acid group (-COOH).',
            'patterns': [
                [ether_linkage],  # Ether linkage
                [primary_amine, '[OX2][CH3]'],  # Terminal donor group
                [carboxylic_acid, carboxylate_anion],  # Carboxylic acid group
            ],
            'count_threshold': {'[OX2][CX4]': 2},  # At least 2 ether linkages
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'Modifiers that are aliphatic carboxylic acids with no additional functional groups beyond the carboxylic acid (-COOH).',
            'patterns': [
                [carboxylic_acid, carboxylate_anion],  # Carboxylic acid group
            ],
            'exclude_patterns': [
                [primary_amine, thiol, ether_linkage, halogens, aromatic_ring, pyridine_ring, hydroxyl_group],
            ],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Modifiers that are aromatic carboxylic acids substituted with electron-donating groups (EDGs) such as hydroxyl (-OH) or amino (-NH2) groups.',
            'patterns': [
                [aromatic_ring],
                [carboxylic_acid, carboxylate_anion],  # Carboxylic acid group attached to aromatic ring
                [hydroxyl_group, primary_amine],  # EDG on aromatic ring
            ],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers with an aromatic ring connected to an aliphatic chain bearing a hydroxyl group (-OH), along with a carboxylic acid group (-COOH).',
            'patterns': [
                [aromatic_ring],
                [hydroxyl_group],
                [carboxylic_acid, carboxylate_anion],
            ],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers that are amino acids with bulky side chains containing electron-rich heterocycles, such as indole rings.',
            'patterns': [
                [amino_acid_pattern],
                [indole_ring],
            ],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Modifiers containing multiple hydroxyl groups (-OH) on an aliphatic chain, without other strong coordinating groups.',
            'patterns': [
                [multiple_oh],
                [carboxylic_acid, carboxylate_anion],
            ],
            'count_threshold': {'[OX2H]': 2},  # At least 2 hydroxyl groups
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'Modifiers that are aromatic carboxylic acids with an aldehyde group (-CHO) at the para or ortho position.',
            'patterns': [
                [aromatic_ring],
                [carboxylic_acid, carboxylate_anion],
                [aldehyde],
            ],
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Modifiers with electron-deficient aromatic heterocycles where the carboxylic acid group (-COOH) is directly attached to the ring.',
            'patterns': [
                [pyridine_ring, 'n1cccnc1', 'c1cnc[nH]1'],  # Electron-deficient heterocycles
                [carboxylic_acid, carboxylate_anion],
            ],
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'Modifiers containing a terminal hydroxyl group (-OH) on an aliphatic chain of seven or more carbons, with a carboxylic acid group (-COOH) at the other end.',
            'patterns': [
                [hydroxyl_group],
                [carboxylic_acid, carboxylate_anion],
            ],
            'chain_length': 7,
            'prediction': 1
        },
        {
            'number': 15,
            'description': 'Modifiers that are cyclic anhydrides or lactones derived from aromatic carboxylic acids, possessing additional carbonyl groups.',
            'patterns': [
                ['O=C1OC(=O)c2ccccc12'],  # General pattern for cyclic anhydrides/lactones
            ],
            'prediction': 1
        },
    ]

    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(p) for p in group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for group in rule['exclude_patterns']:
                compiled_group = [Chem.MolFromSmarts(p) for p in group]
                compiled_excludes.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_excludes

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        matches = mol.GetSubstructMatches(pat)
                        if matches:
                            # If a count threshold is specified for this pattern
                            if 'count_threshold' in rule and pat.GetSmarts() in rule['count_threshold']:
                                threshold = rule['count_threshold'][pat.GetSmarts()]
                                if len(matches) >= threshold:
                                    group_match = True
                                    break
                            else:
                                group_match = True
                                break
                    if not group_match:
                        match = False
                        break
                # Additional checks for chain length if specified
                if match and 'chain_length' in rule:
                    chain_length = rule['chain_length']
                    # Find indices of functional groups
                    fg1_pattern = Chem.MolFromSmarts(rule['compiled_patterns'][0][0].GetSmarts())
                    fg2_pattern = Chem.MolFromSmarts(rule['compiled_patterns'][1][0].GetSmarts())
                    fg1_matches = mol.GetSubstructMatches(fg1_pattern)
                    fg2_matches = mol.GetSubstructMatches(fg2_pattern)
                    path_match = False
                    for fg1 in fg1_matches:
                        for fg2 in fg2_matches:
                            path = Chem.rdmolops.GetShortestPath(mol, fg1[0], fg2[0])
                            num_carbons = sum(1 for idx in path if mol.GetAtomWithIdx(idx).GetAtomicNum() == 6)
                            if num_carbons >= chain_length:
                                path_match = True
                                break
                        if path_match:
                            break
                    if not path_match:
                        match = False
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------