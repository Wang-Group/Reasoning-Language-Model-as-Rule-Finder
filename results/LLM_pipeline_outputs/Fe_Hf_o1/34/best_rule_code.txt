def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and structural features
    
    # Primary aliphatic amine (-NH2) at one end
    primary_aliphatic_amine = '[NX3H2,NX4+][CX4;!$(C([#7,#8])[#7,#8])][CX4;!$(C([#7,#8])[#7,#8])]'
    
    # Carboxylic acid group (-COOH) at the other end
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    
    # Linear aliphatic chain of 4 or more carbons
    linear_aliphatic_chain = 'CCCCC'
    
    # Benzoic acid core
    benzoic_acid = 'c1ccccc1C(=O)[OH]'
    
    # Electron-withdrawing groups at para position
    nitro_group_para = 'c1ccc(cc1)[N+](=O)[O-]'
    bromomethyl_group_para = 'c1ccc(cc1)CBr'
    sulfanyl_group_para = 'c1ccc(cc1)S'
    
    # Pyridine ring with available nitrogen lone pair
    pyridine_ring = '[n]1ccccc1'
    
    # Thiol group (-SH)
    thiol_group = '[SX2H]'
    
    # Ether linkage in aliphatic chain
    ether_linkage = '[#6][OX2][#6]'
    
    # Multiple adjacent hydroxyl groups near carboxylic acid
    adjacent_hydroxyls = '[#6][OX2H][#6][OX2H][#6][C](=O)[OX2H1]'
    
    # Bulky aromatic substituents adjacent to carboxylate group
    bulky_aromatic_adjacent = '[#6]([c])[C](=O)[OX2H1]'
    
    # Electron-donating substituents on aromatic rings
    amino_group_on_aromatic = 'c[NH2]'
    hydroxyl_group_on_aromatic = 'c[OH]'
    
    # Highly fluorinated alkyl chains
    highly_fluorinated_chain = 'C(F)(F)F'
    
    # Aldehyde or ketone groups adjacent to carboxylic acid
    aldehyde_adjacent = '[#6][C](=O)[#6][C](=O)[OX2H1]'
    ketone_adjacent = '[#6][C](=O)[#6][C](=O)[OX2H1]'
    
    # Chelate rings involving aromatic systems
    chelate_structure = 'c1cccc(c1)C(=O)C(=O)'
    
    # Nitrogen heterocycles with delocalized lone pair
    pyrazole = '[nH]1nccc1'
    pyridone = 'O=[n]1ccccc1'
    
    # Simple aliphatic carboxylic acids
    simple_aliphatic_acid = 'CCCCCC(=O)[OH]'
    
    # Electron-donating alkyl substituents on aromatic rings
    methyl_on_aromatic = 'c1cc(ccc1)C'
    
    # Intramolecular hydrogen bonding
    intramolecular_hbond = '[O,NH][C](=O)[OH]'
    
    # Compile SMARTS patterns
    patterns = {
        'Rule 1': {
            'patterns': [primary_aliphatic_amine, carboxylic_acid, linear_aliphatic_chain],
            'prediction': 1
        },
        'Rule 2': {
            'patterns': [benzoic_acid],
            'sub_patterns': [nitro_group_para, bromomethyl_group_para, sulfanyl_group_para],
            'prediction': 1
        },
        'Rule 3': {
            'patterns': [pyridine_ring, carboxylic_acid],
            'prediction': 1
        },
        'Rule 4': {
            'patterns': [thiol_group],
            'prediction': 1
        },
        'Rule 5': {
            'patterns': [ether_linkage, carboxylic_acid],
            'prediction': 1
        },
        'Rule 6': {
            'patterns': [adjacent_hydroxyls],
            'prediction': -1
        },
        'Rule 7': {
            'patterns': [bulky_aromatic_adjacent],
            'prediction': -1
        },
        'Rule 8': {
            'patterns': [carboxylic_acid],
            'sub_patterns': [amino_group_on_aromatic, hydroxyl_group_on_aromatic],
            'prediction': -1
        },
        'Rule 9': {
            'patterns': [highly_fluorinated_chain],
            'prediction': -1
        },
        'Rule 10': {
            'patterns': [aldehyde_adjacent, ketone_adjacent],
            'prediction': -1
        },
        'Rule 11': {
            'patterns': [chelate_structure],
            'prediction': 1
        },
        'Rule 12': {
            'patterns': [pyrazole, pyridone],
            'prediction': -1
        },
        'Rule 13': {
            'patterns': [simple_aliphatic_acid],
            'prediction': -1
        },
        'Rule 14': {
            'patterns': [methyl_on_aromatic],
            'prediction': -1
        },
        'Rule 15': {
            'patterns': [intramolecular_hbond],
            'prediction': -1
        }
    }
    
    # Compile all patterns
    compiled_patterns = {}
    for rule_name, rule_data in patterns.items():
        compiled_patterns[rule_name] = {
            'patterns': [Chem.MolFromSmarts(pat) for pat in rule_data.get('patterns', [])],
            'prediction': rule_data['prediction']
        }
        if 'sub_patterns' in rule_data:
            compiled_patterns[rule_name]['sub_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule_data['sub_patterns']]
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(compiled_patterns))
            continue
        row = []
        for rule_name in compiled_patterns.keys():
            try:
                rule_match = True
                rule_info = compiled_patterns[rule_name]
                # Check main patterns
                for pat in rule_info['patterns']:
                    if not mol.HasSubstructMatch(pat):
                        rule_match = False
                        break
                # If main patterns match, check sub-patterns if any
                if rule_match and 'sub_patterns' in rule_info:
                    sub_match = False
                    for sub_pat in rule_info['sub_patterns']:
                        if mol.HasSubstructMatch(sub_pat):
                            sub_match = True
                            break
                    if not sub_match:
                        rule_match = False
                if rule_match:
                    row.append(rule_info['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=compiled_patterns.keys())
    return df
