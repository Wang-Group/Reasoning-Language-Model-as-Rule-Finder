{
    "prefix": "This code defines a function called 'rule2matrix' that takes a list of SMILES strings as input and returns a DataFrame where each column corresponds to one of the defined rules, and each row corresponds to one of the input SMILES strings.\n\nEach rule determines whether a certain structural feature is present in the molecule and predicts either a high (1) or low (-1) target value based on the presence of that feature.\n\nThe function uses RDKit to parse the SMILES strings and search for substructures using SMARTS patterns derived from the rules. It handles possible errors by assigning a value of 0 when a rule cannot be evaluated for a given SMILES string.\n\nThe output DataFrame contains values of 1, -1, or 0 for each molecule and rule, as per the specified criteria.",
    "imports": "import pandas as pd\nfrom rdkit import Chem\nfrom rdkit.Chem import AllChem",
    "code": "def rule2matrix(smiles_list):\n    # Define the rules with their associated SMARTS patterns and predictions\n    rules = [\n        {\n            'number': 1,\n            'description': 'High Fe/Hf value: Linear aliphatic amino acids with amino (-NH2) and carboxylic acid (-COOH) groups at opposite ends of the chain, chain length of five or more carbons.',\n            'patterns': [\n                # Linear chain of five or more carbons with amino and carboxylic acid groups at the ends\n                'NCCCCCC(=O)O',  # Simplified pattern for six-carbon chain\n                'NCCCCC(=O)O',   # Five-carbon chain\n                # General pattern using recursive SMARTS for chains of five or more carbons\n                '[NX3;H2][CH2]{5,}[CX3](=O)[OX2H1]',\n            ],\n            'prediction': 1\n        },\n        {\n            'number': 2,\n            'description': 'High Fe/Hf value: Modifiers containing sulfur-based functional groups, such as thiol (-SH) or thioether (-S-).',\n            'patterns': [\n                '[#16X2H]',  # Thiol group\n                '[#16X2][#6]',  # Thioether group\n            ],\n            'prediction': 1\n        },\n        {\n            'number': 3,\n            'description': 'High Fe/Hf value: Aromatic carboxylic acids with strong electron-withdrawing groups at the para position.',\n            'patterns': [\n                # Para-substituted aromatic carboxylic acids with electron-withdrawing groups\n                'c1ccc(cc1)[CX3](=O)[OX2H1]',  # General aromatic carboxylic acid\n                # Electron-withdrawing groups at para position\n                'c1cc([NX3](=O)=O)ccc1[CX3](=O)[OX2H1]',  # Nitro group\n                'c1cc(Br)ccc1[CX3](=O)[OX2H1]',           # Bromo group\n            ],\n            'prediction': 1\n        },\n        {\n            'number': 4,\n            'description': 'High Fe/Hf value: Modifiers containing pyridine rings with nitrogen atoms available for coordination.',\n            'patterns': [\n                'c1ccncc1',  # Pyridine ring\n                '[n]1ccccc1[CX3](=O)[OX2H1]',  # Pyridine connected to carboxylic acid\n            ],\n            'prediction': 1\n        },\n        {\n            'number': 5,\n            'description': 'Low Fe/Hf value: Aromatic carboxylic acids with strong electron-donating groups at ortho or para positions.',\n            'patterns': [\n                # Aromatic carboxylic acids with electron-donating groups\n                '[OX2H][c]',  # Phenol group\n                '[NX3;H2][c]',  # Aromatic amine\n                'c1cc([OX2H])ccc1[CX3](=O)[OX2H1]',  # Hydroxyl at para position\n                'c1cc([NX3;H2])ccc1[CX3](=O)[OX2H1]',  # Amino at para position\n            ],\n            'prediction': -1\n        },\n        {\n            'number': 6,\n            'description': 'Low Fe/Hf value: Modifiers with multiple hydroxyl groups adjacent to the carboxylic acid group.',\n            'patterns': [\n                '[CX4H](O)[CX4H](O)[CX3](=O)[OX2H1]',  # Adjacent hydroxyl groups\n            ],\n            'prediction': -1\n        },\n        {\n            'number': 7,\n            'description': 'Low Fe/Hf value: Simple aliphatic carboxylic acids without additional coordinating functional groups.',\n            'patterns': [\n                '[CX3](=O)[OX2H1]',  # Carboxylic acid group\n                '[C][C][C][C][C][C](=O)[O]',  # Aliphatic chain\n            ],\n            'exclude_patterns': [\n                '[N,S,O]',  # Exclude presence of other heteroatoms\n            ],\n            'prediction': -1\n        },\n        {\n            'number': 8,\n            'description': 'Low Fe/Hf value: Modifiers with highly fluorinated aliphatic chains.',\n            'patterns': [\n                '[C](F)(F)(F)',  # Trifluoromethyl group\n                '[C](F)(F)F',\n            ],\n            'prediction': -1\n        },\n        {\n            'number': 9,\n            'description': 'High Fe/Hf value: Modifiers containing long flexible chains with multiple ether linkages (-O-) and a terminal carboxylic acid.',\n            'patterns': [\n                '[OX2][CX4][OX2][CX4][OX2][CX4][OX2][CX3](=O)[OX2H1]',  # Multiple ether linkages ending with carboxylic acid\n            ],\n            'prediction': 1\n        },\n        {\n            'number': 10,\n            'description': 'Low Fe/Hf value: Modifiers with aldehyde (-CHO) or ketone (C=O) groups adjacent to the carboxylic acid.',\n            'patterns': [\n                '[CX3](=O)[CX3](=O)[OX2H1]',  # Ketone adjacent to carboxylic acid\n                '[CX3H1](=O)[CX3](=O)[OX2H1]',  # Aldehyde adjacent to carboxylic acid\n            ],\n            'prediction': -1\n        },\n        {\n            'number': 11,\n            'description': 'Low Fe/Hf value: Modifiers containing amino acids with bulky aromatic side chains.',\n            'patterns': [\n                '[NX3;H2][CX4][CX3](=O)[OX2H1]',  # Amino acid backbone\n                'c1ccccc1',  # Aromatic ring (phenyl group)\n            ],\n            'prediction': -1\n        },\n    ]\n\n    # Compile SMARTS patterns\n    for rule in rules:\n        try:\n            rule['compiled_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule['patterns']]\n            if 'exclude_patterns' in rule:\n                rule['compiled_exclude_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule['exclude_patterns']]\n        except Exception as e:\n            # Handle compilation errors\n            rule['compiled_patterns'] = []\n            rule['compiled_exclude_patterns'] = []\n\n    # Initialize results list\n    results = []\n\n    # Process each SMILES string\n    for smi in smiles_list:\n        mol = Chem.MolFromSmiles(smi)\n        if mol is None:\n            # If the molecule cannot be parsed, append a row of zeros\n            results.append([0]*len(rules))\n            continue\n        row = []\n        for rule in rules:\n            try:\n                match = False\n                # Check exclude patterns first\n                if 'compiled_exclude_patterns' in rule:\n                    for pat in rule['compiled_exclude_patterns']:\n                        if mol.HasSubstructMatch(pat):\n                            match = False\n                            break\n                    else:\n                        match = True\n                else:\n                    match = True\n                # Check if all patterns are matched\n                if match:\n                    for pat in rule['compiled_patterns']:\n                        if not mol.HasSubstructMatch(pat):\n                            match = False\n                            break\n                # Assign prediction based on match\n                if match:\n                    row.append(rule['prediction'])\n                else:\n                    row.append(0)\n            except Exception:\n                # In case of any error, append 0\n                row.append(0)\n        results.append(row)\n    # Create DataFrame with results\n    df = pd.DataFrame(results, columns=[f'Rule {rule[\"number\"]}' for rule in rules])\n    return df"
}