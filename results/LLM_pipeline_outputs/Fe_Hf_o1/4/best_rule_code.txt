def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    thiol_group = '[SX2H]'
    primary_amino_group = '[NX3;H2][#6]'
    amino_group = '[NX3;H2,H1][#6]'
    amide_group = '[CX3](=O)[NX3]'
    hydroxyl_group = '[OX2H]'
    ether_linkage = '[#6][OX2][#6]'
    aromatic_ring = '[a]'
    aromatic_carboxylic_acid = '[c][CX3](=O)[OX2H1]'
    aromatic_hydroxyl = '[c][OX2H]'
    aromatic_amino = '[c][NX3;H2,H1,H0]'
    aromatic_methoxy = '[c][OX2][CH3]'
    halogen_on_aromatic = '[c][F,Cl,Br,I]'
    nitro_group_on_aromatic = '[c][N+](=O)[O-]'
    nitrogen_heterocycle = '[n]'
    fluorinated_alkyl_chain = '[CX4][F]'
    thioether_group = '[#6][SX2][#6]'
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers containing both a carboxylic acid group and a thiol group (–SH).',
            'patterns': [
                [carboxylic_acid],
                [thiol_group]
            ],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers with flexible aliphatic chains containing a primary amino group (–NH₂) and a carboxylic acid group.',
            'patterns': [
                [primary_amino_group],
                [carboxylic_acid]
            ],
            'exclude_patterns': [
                [aromatic_ring]
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers containing nitrogen heterocycles connected via a linker to a carboxylic acid group.',
            'patterns': [
                [nitrogen_heterocycle],
                [carboxylic_acid]
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers with electron-withdrawing groups on aromatic rings adjacent to carboxylic acids.',
            'patterns': [
                [aromatic_carboxylic_acid],
                [halogen_on_aromatic, nitro_group_on_aromatic]
            ],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers with polyether chains and terminal coordinating groups.',
            'patterns': [
                [ether_linkage],
                [ether_linkage]  # Require at least two ether linkages
            ],
            'count_threshold': {ether_linkage: 2},
            'additional_patterns': [
                [amino_group],
                [carboxylic_acid]
            ],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers that are amino acids with simple aromatic side chains.',
            'patterns': [
                [amino_group],
                [carboxylic_acid],
                [aromatic_ring]
            ],
            'exclude_patterns': [
                [nitrogen_heterocycle]
            ],
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'Modifiers lacking strong Fe-coordinating groups other than the carboxylic acid.',
            'patterns': [
                [carboxylic_acid]
            ],
            'exclude_patterns': [
                [amino_group], [thiol_group], [nitrogen_heterocycle], [thioether_group],
                [aromatic_amino], [aromatic_hydroxyl], [hydroxyl_group]
            ],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Modifiers with electron-donating groups on aromatic rings directly attached to carboxylic acids.',
            'patterns': [
                [aromatic_carboxylic_acid],
                [aromatic_hydroxyl, aromatic_methoxy, aromatic_amino]
            ],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers with multiple hydroxyl groups (polyols) and a carboxylic acid group.',
            'patterns': [
                [carboxylic_acid],
                [hydroxyl_group]
            ],
            'count_threshold': {hydroxyl_group: 2},
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers with fluorinated alkyl chains and a carboxylic acid group.',
            'patterns': [
                [carboxylic_acid],
                [fluorinated_alkyl_chain]
            ],
            'count_threshold': {fluorinated_alkyl_chain: 2},
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Modifiers containing sulfur-containing groups in aliphatic chains and a carboxylic acid.',
            'patterns': [
                [thioether_group],
                [carboxylic_acid]
            ],
            'exclude_patterns': [
                [aromatic_ring]
            ],
            'prediction': 1
        },
        {
            'number': 12,
            'description': 'Modifiers with long aliphatic chains containing both amino and amide groups.',
            'patterns': [
                [amino_group],
                [amide_group],
                [carboxylic_acid]
            ],
            'exclude_patterns': [
                [aromatic_ring]
            ],
            'prediction': 1
        }
    ]
    # Compile SMARTS patterns
    for rule in rules:
        # Compile include patterns
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(p) for p in group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for group in rule['exclude_patterns']:
                compiled_group = [Chem.MolFromSmarts(p) for p in group]
                compiled_excludes.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_excludes
        else:
            rule['compiled_exclude_patterns'] = []
        # Adjust count_threshold keys to use SMARTS strings
        if 'count_threshold' in rule:
            rule['count_threshold'] = {k: v for k, v in rule['count_threshold'].items()}
        else:
            rule['count_threshold'] = {}
    # Initialize results list
    results = []
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns
                for group in rule['compiled_exclude_patterns']:
                    for pat in group:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        break
                if not match:
                    row.append(0)
                    continue
                # Check required patterns
                for idx, compiled_group in enumerate(rule['compiled_patterns']):
                    group_match = False
                    for pat in compiled_group:
                        matches = mol.GetSubstructMatches(pat)
                        if matches:
                            # If a count threshold is specified for this pattern
                            smarts_str = Chem.MolToSmarts(pat)
                            if smarts_str in rule.get('count_threshold', {}):
                                threshold = rule['count_threshold'][smarts_str]
                                if len(matches) >= threshold:
                                    group_match = True
                                    break
                            else:
                                group_match = True
                                break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of error, append 0 and continue
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df
