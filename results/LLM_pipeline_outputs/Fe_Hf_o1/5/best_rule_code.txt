def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    # Primary amino group (-NH2)
    primary_amino = '[NX3;H2]'
    
    # Sulfur-containing groups: thiols (-SH) and thioethers (-S-)
    thiol = '[SX2H]'
    thioether = '[SX2;!$(S=[O,N])]([#6])[#6]'
    
    # Carboxylic acid group (-COOH)
    carboxylic_acid = ['[CX3](=O)[OX2H1]', '[CX3](=O)[O-]']
    
    # Hydroxyl group (-OH)
    hydroxyl_group = '[OX2H]'
    
    # Hydroxyl group attached to aliphatic carbon
    aliphatic_hydroxyl = '[CX4][OX2H]'
    
    # Aromatic ring
    aromatic_ring = '[a]'
    
    # Hydroxyl group attached to aromatic ring (phenol)
    phenol_group = '[c][OX2H]'
    
    # Electron-withdrawing groups (EWGs) on aromatic rings
    nitro_group = '[NX3+](=O)[O-]'
    nitro_on_aromatic = '[c][NX3+](=O)[O-]'
    halogen = '[F,Cl,Br,I]'
    halogen_on_aromatic = ['[c][F,Cl,Br,I]', '[c][CH2][F,Cl,Br,I]']
    
    # Heterocyclic aromatic rings
    heterocyclic_aromatic = '[n,o,s]1cccc1'
    
    # Methoxy group on aromatic ring
    methoxy_on_aromatic = '[c][OX2][CH3]'
    
    # Aldehyde group attached to aromatic ring
    aldehyde_on_aromatic = '[c][CX3H](=O)'
    
    # Fluorinated alkyl chains
    fluorinated_alkyl_chain = '[CX4][F,Cl,Br,I]'
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'High Fe/Hf Value (True): Modifiers containing a primary amino group (-NH2) on an aliphatic chain of five or more carbons.',
            'patterns': [
                [primary_amino],  # Primary amino group
            ],
            'function': lambda mol: mol.HasSubstructMatch(Chem.MolFromSmarts(primary_amino)) and max([len(path) for path in Chem.FindAllPathsOfLengthN(mol, 5, useBonds=False)]) >= 5,
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'High Fe/Hf Value (True): Modifiers with sulfur-containing functional groups, such as thiol (-SH) or thioether (-S-), combined with a carboxylic acid.',
            'patterns': [
                [thiol, thioether],  # Sulfur-containing groups
                carboxylic_acid      # Carboxylic acid
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Low Fe/Hf Value (False): Modifiers containing multiple hydroxyl groups (-OH) on an aliphatic chain (polyols).',
            'patterns': [
                [aliphatic_hydroxyl],  # Aliphatic hydroxyl group
            ],
            'count_threshold': {aliphatic_hydroxyl: 2},  # At least 2 hydroxyl groups
            'prediction': -1
        },
        {
            'number': 4,
            'description': 'High Fe/Hf Value (True): Modifiers with an aromatic ring bearing electron-withdrawing groups (EWGs) such as nitro (-NO2) or halogenated methyl groups (-CH2X).',
            'patterns': [
                halogen_on_aromatic + [nitro_on_aromatic],  # EWGs on aromatic ring
            ],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Low Fe/Hf Value (False): Modifiers containing a phenolic hydroxyl group (-OH) directly attached to an aromatic ring, possibly with a carboxylic acid.',
            'patterns': [
                [phenol_group],  # Phenolic hydroxyl group
            ],
            'prediction': -1
        },
        {
            'number': 6,
            'description': 'High Fe/Hf Value (True): Modifiers with heterocyclic aromatic rings conjugated to another aromatic system or aliphatic chain.',
            'patterns': [
                [heterocyclic_aromatic],  # Heterocyclic aromatic ring
            ],
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'Low Fe/Hf Value (False): Modifiers containing isolated heterocyclic aromatic rings without further conjugation or functionalization.',
            'patterns': [
                [heterocyclic_aromatic],  # Heterocyclic aromatic ring
            ],
            'exclude_patterns': [
                [aromatic_ring],  # Exclude if connected to other aromatic rings
            ],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'High Fe/Hf Value (True): Modifiers with long aliphatic chains (six or more carbons) terminated with a hydroxyl group (-OH).',
            'patterns': [
                [aliphatic_hydroxyl],  # Hydroxyl group attached to aliphatic carbon
            ],
            'function': lambda mol: any(len(path) >= 6 for path in Chem.FindAllPathsOfLengthN(mol, 6, useBonds=False) if mol.GetAtomWithIdx(path[-1]).GetSymbol() == 'O'),
            'prediction': 1
        },
        {
            'number': 9,
            'description': 'Low Fe/Hf Value (False): Modifiers that are straight-chain aliphatic carboxylic acids without additional functional groups.',
            'patterns': [
                carboxylic_acid,  # Carboxylic acid
            ],
            'exclude_patterns': [
                [primary_amino, thiol, thioether, hydroxyl_group, aromatic_ring],  # Exclude if other functional groups are present
            ],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Low Fe/Hf Value (False): Modifiers containing fluorinated alkyl chains (-CFx).',
            'patterns': [
                [fluorinated_alkyl_chain],  # Fluorinated alkyl chain
            ],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Low Fe/Hf Value (False): Modifiers with aldehyde groups (-CHO) attached directly to an aromatic ring.',
            'patterns': [
                [aldehyde_on_aromatic],  # Aldehyde on aromatic ring
            ],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'High Fe/Hf Value (True): Modifiers containing aliphatic ether linkages (-O-) and terminal amino groups (-NH2), often with carboxylic acid groups.',
            'patterns': [
                ['[#6][OX2][#6]'],  # Ether linkage
                [primary_amino],    # Primary amino group
            ],
            'prediction': 1
        },
        {
            'number': 13,
            'description': 'High Fe/Hf Value (True): Modifiers that are amino acids with hydrophobic side chains.',
            'patterns': [
                [primary_amino],    # Primary amino group
                carboxylic_acid,    # Carboxylic acid
            ],
            'exclude_patterns': [
                [heterocyclic_aromatic, hydroxyl_group, sulfur_groups := '[SX2,SX3,SX4]'],  # Exclude polar side chains
            ],
            'prediction': 1
        },
        {
            'number': 14,
            'description': 'Low Fe/Hf Value (False): Modifiers that are amino acids with polar or heterocyclic side chains.',
            'patterns': [
                [primary_amino],    # Primary amino group
                carboxylic_acid,    # Carboxylic acid
                [heterocyclic_aromatic, hydroxyl_group, sulfur_groups := '[SX2,SX3,SX4]'],  # Polar side chains
            ],
            'prediction': -1
        },
        {
            'number': 15,
            'description': 'High Fe/Hf Value (True): Modifiers with methoxy groups (-OCH3) on aromatic rings, possibly with a ketone and carboxylic acid.',
            'patterns': [
                [methoxy_on_aromatic],  # Methoxy group on aromatic ring
            ],
            'prediction': 1
        },
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(p) for p in group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for group in rule['exclude_patterns']:
                compiled_group = [Chem.MolFromSmarts(p) for p in group]
                compiled_excludes.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_excludes
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for idx, compiled_group in enumerate(rule['compiled_patterns']):
                    group_match = False
                    for pat in compiled_group:
                        matches = mol.GetSubstructMatches(pat)
                        if matches:
                            # If a count threshold is specified for this pattern
                            if 'count_threshold' in rule and pat.GetSmarts() in rule['count_threshold']:
                                threshold = rule['count_threshold'][pat.GetSmarts()]
                                if len(matches) >= threshold:
                                    group_match = True
                                    break
                            else:
                                group_match = True
                                break
                    if not group_match:
                        match = False
                        break
                # Apply additional function if any
                if match and 'function' in rule:
                    match = rule['function'](mol)
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0 and optionally log the error
                # print(f"Error processing rule {rule['number']} for SMILES {smi}: {e}")
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f"Rule {rule['number']}" for rule in rules])
    return df