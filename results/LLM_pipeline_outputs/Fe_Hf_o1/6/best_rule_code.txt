def rule2matrix(smiles_list):
    import pandas as pd
    from rdkit import Chem
    
    # Define SMARTS patterns for functional groups and structural features
    # Aromatic carboxylic acid
    aromatic_carboxylic_acid = Chem.MolFromSmarts('[c][C](=O)[O;H1]')
    
    # Electron-Withdrawing Groups (EWGs) attached to aromatic ring
    ewg_patterns = [
        Chem.MolFromSmarts('[c][N+](=O)[O-]'),  # Nitro group
        Chem.MolFromSmarts('[c]Br'),            # Bromo group
        Chem.MolFromSmarts('[c][SH]')           # Sulfanyl (thiol) group
    ]
    
    # Electron-Donating Groups (EDGs) attached to aromatic ring
    edg_patterns = [
        Chem.MolFromSmarts('[c][NH2]'),  # Amino group
        Chem.MolFromSmarts('[c][OH]'),   # Hydroxyl group
        Chem.MolFromSmarts('[c][CH3]')   # Methyl group
    ]
    
    # Primary amine
    primary_amine = Chem.MolFromSmarts('[NX3;H2]')
    
    # Carboxylic acid group
    carboxyl_group = Chem.MolFromSmarts('[C](=O)[O;H1]')
    
    # Thiol group
    thiol_group = Chem.MolFromSmarts('[SX2H]')
    
    # Ether linkage
    ether_linkage = Chem.MolFromSmarts('[#6][OX2][#6]')
    
    # Amino acid backbone
    amino_acid_backbone = Chem.MolFromSmarts('[NX3;H2][CH]([#6])[C](=O)[O;H1]')
    
    # Bulky aromatic side chain (e.g., indole ring)
    indole_ring = Chem.MolFromSmarts('c1cc2ccccc2[nH]1')
    
    # Multiple hydroxyl groups adjacent to carboxyl group
    polyol_pattern = Chem.MolFromSmarts('[C](=O)[O;H1][C]([OH])[OH]')
    
    # Fluorinated alkyl chain (three or more fluorines)
    fluorinated_chain = Chem.MolFromSmarts('[CX4]([F])([F])([F])')
    
    # Carboxyl group attached directly to heteroaromatic ring
    heteroaromatic_carboxyl = Chem.MolFromSmarts('[n,o,s][C](=O)[O;H1]')
    
    # Flexible linker between carboxyl group and heteroaromatic ring
    flexible_linker = Chem.MolFromSmarts('[C](=O)[O;H1][CX4][CX4][n,o,s]')
    
    # Carbonyl group adjacent to carboxyl group
    carbonyl_adjacent = Chem.MolFromSmarts('[C](=O)[C](=O)[O;H1]')
    
    # Long aliphatic chain (six or more carbons) with additional functional groups
    long_chain_with_functional_group = Chem.MolFromSmarts('[C][C][C][C][C][C][*$([OH,NH2,C(=O)NH2])]')
    
    # Define rule functions
    def rule1(mol):
        # High Fe/Hf value: Aromatic carboxylic acids with EWGs at para position
        if mol.HasSubstructMatch(aromatic_carboxylic_acid):
            for ewg in ewg_patterns:
                if mol.HasSubstructMatch(ewg):
                    return 1
        return 0
    
    def rule2(mol):
        # Low Fe/Hf value: Aromatic carboxylic acids with EDGs at para position
        if mol.HasSubstructMatch(aromatic_carboxylic_acid):
            for edg in edg_patterns:
                if mol.HasSubstructMatch(edg):
                    return -1
        return 0
    
    def rule3(mol):
        # High Fe/Hf value: Aliphatic carboxylic acids with terminal amino group, chain length >=4
        amino_matches = mol.GetSubstructMatches(primary_amine)
        carboxyl_matches = mol.GetSubstructMatches(carboxyl_group)
        if amino_matches and carboxyl_matches:
            for amine_atom in amino_matches:
                for carboxyl_atom in carboxyl_matches:
                    path = Chem.GetShortestPath(mol, amine_atom[0], carboxyl_atom[0])
                    num_carbons = sum(1 for idx in path if mol.GetAtomWithIdx(idx).GetAtomicNum() == 6)
                    if num_carbons >= 4:
                        return 1
        return 0
    
    def rule4(mol):
        # High Fe/Hf value: Modifiers containing thiol groups (-SH)
        if mol.HasSubstructMatch(thiol_group):
            return 1
        return 0
    
    def rule5(mol):
        # High Fe/Hf value: Modifiers with ether linkages and carboxyl group
        if mol.HasSubstructMatch(ether_linkage) and mol.HasSubstructMatch(carboxyl_group):
            return 1
        return 0
    
    def rule6(mol):
        # High Fe/Hf value: Amino acids with small side chains or non-bulky aromatic side chains
        if mol.HasSubstructMatch(amino_acid_backbone):
            return 1
        return 0
    
    def rule7(mol):
        # Low Fe/Hf value: Amino acids with bulky aromatic side chains (e.g., indole ring)
        if mol.HasSubstructMatch(amino_acid_backbone) and mol.HasSubstructMatch(indole_ring):
            return -1
        return 0
    
    def rule8(mol):
        # Low Fe/Hf value: Multiple hydroxyl groups adjacent to carboxyl group
        if mol.HasSubstructMatch(polyol_pattern):
            return -1
        return 0
    
    def rule9(mol):
        # Low Fe/Hf value: Highly fluorinated alkyl chains
        fluorine_count = sum(1 for atom in mol.GetAtoms() if atom.GetAtomicNum() == 9)
        if fluorine_count >= 5:
            return -1
        return 0
    
    def rule10(mol):
        # Low Fe/Hf value: Carboxyl group directly attached to heteroaromatic ring
        if mol.HasSubstructMatch(heteroaromatic_carboxyl):
            return -1
        return 0
    
    def rule11(mol):
        # High Fe/Hf value: Flexible linker between carboxyl group and heteroaromatic ring
        if mol.HasSubstructMatch(flexible_linker):
            return 1
        return 0
    
    def rule12(mol):
        # Low Fe/Hf value: Carbonyl group adjacent to carboxyl group
        if mol.HasSubstructMatch(carbonyl_adjacent):
            return -1
        return 0
    
    def rule13(mol):
        # High Fe/Hf value: Long-chain aliphatic carboxylic acids with functional groups
        if mol.HasSubstructMatch(long_chain_with_functional_group) and mol.HasSubstructMatch(carboxyl_group):
            return 1
        return 0
    
    # List of all rule functions
    rules = [
        rule1, rule2, rule3, rule4, rule5, rule6, rule7, rule8, rule9, rule10, rule11, rule12, rule13
    ]
    
    # Process each SMILES string
    results = []
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                value = rule(mol)
                row.append(value)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {i+1}' for i in range(len(rules))])
    return df