def rule2matrix(smiles_list):
    import pandas as pd
    from rdkit import Chem

    # Initialize the list to store the results
    results = []

    # Define the rules
    rules = []

    # Rule 1
    def rule1(mol):
        # Rule 1: Aliphatic carboxylic acids with terminal primary amino group (ω-amino acids) and chain length of five carbons or more
        # High Fe/Hf value (True), Prediction: 1

        # Find primary amino groups
        amine_smarts = '[N;H2]'
        amine = Chem.MolFromSmarts(amine_smarts)
        amine_matches = mol.GetSubstructMatches(amine)

        # Find carboxylic acid groups
        carboxy_smarts = '[C](=O)[O;H1]'
        carboxy = Chem.MolFromSmarts(carboxy_smarts)
        carboxy_matches = mol.GetSubstructMatches(carboxy)

        # Check for chain of at least 5 carbons between amine and carboxyl group
        for amine_match in amine_matches:
            for carboxy_match in carboxy_matches:
                # Get shortest path between amine nitrogen and carboxy carbon
                try:
                    path = Chem.rdmolops.GetShortestPath(mol, amine_match[0], carboxy_match[0])
                    # Check if path consists of at least 5 carbons
                    carbons_in_path = 0
                    for atom_idx in path[1:-1]:  # Exclude amine and carboxy atoms
                        atom = mol.GetAtomWithIdx(atom_idx)
                        if atom.GetAtomicNum() == 6 and atom.GetDegree() <= 4 and not atom.IsInRing():
                            carbons_in_path +=1
                        else:
                            break  # Non-carbon atom or ring, break
                    if carbons_in_path >= 5:
                        return 1
                except:
                    continue
        return 0

    rules.append(rule1)

    # Rule 2
    def rule2(mol):
        # Rule 2: Aromatic carboxylic acids with strong electron-withdrawing groups at the para position
        # High Fe/Hf value (True), Prediction: 1
        # EWGs: nitro, bromomethyl at para position

        # Aromatic carboxylic acid
        aromatic_carboxy_smarts = 'c1ccc([C](=O)[O;H1])cc1'
        aromatic_carboxy = Chem.MolFromSmarts(aromatic_carboxy_smarts)
        if mol.HasSubstructMatch(aromatic_carboxy):
            # EWGs at para position
            ewg_smarts = ['[N+](=O)[O-]', 'BrC']
            for ewg in ewg_smarts:
                ewg_pattern = 'c1ccc('+ewg+')cc1'
                pattern = Chem.MolFromSmarts(ewg_pattern)
                if mol.HasSubstructMatch(pattern):
                    return 1
        return 0

    rules.append(rule2)

    # Rule 3
    def rule3(mol):
        # Rule 3: Aromatic carboxylic acids with electron-donating groups at the para position
        # Low Fe/Hf value (False), Prediction: -1
        # EDGs: amino, hydroxy, methyl at para position

        # Aromatic carboxylic acid
        aromatic_carboxy_smarts = 'c1ccc([C](=O)[O;H1])cc1'
        aromatic_carboxy = Chem.MolFromSmarts(aromatic_carboxy_smarts)
        if mol.HasSubstructMatch(aromatic_carboxy):
            # EDGs at para position
            edg_smarts = ['NH2', 'OH', 'CH3']
            for edg in edg_smarts:
                edg_pattern = 'c1ccc('+edg+')cc1'
                pattern = Chem.MolFromSmarts(edg_pattern)
                if mol.HasSubstructMatch(pattern):
                    return -1
        return 0

    rules.append(rule3)

    # Rule 4
    def rule4(mol):
        # Rule 4: Modifiers containing thiol groups (–SH) attached to aliphatic or aromatic chains
        # High Fe/Hf value (True), Prediction:1

        # Thiol group
        thiol_smarts = '[SX2H]'
        thiol = Chem.MolFromSmarts(thiol_smarts)
        if mol.HasSubstructMatch(thiol):
            return 1
        return 0

    rules.append(rule4)

    # Rule 5
    def rule5(mol):
        # Rule 5: Dicarboxylic acids (contain two carboxyl groups)
        # Low Fe/Hf value (False), Prediction: -1

        # Carboxylic acid group
        carboxy_smarts = '[C](=O)[O;H1]'
        carboxy = Chem.MolFromSmarts(carboxy_smarts)
        matches = mol.GetSubstructMatches(carboxy)
        if len(matches) >=2:
            return -1
        return 0

    rules.append(rule5)

    # Rule 6
    def rule6(mol):
        # Rule 6: Heteroaromatic carboxylic acids where the carboxyl group is directly attached to the heteroaromatic ring
        # Low Fe/Hf value (False), Prediction: -1

        # Heteroaromatic ring with carboxylic acid substituent
        heteroaromatic_carboxy_smarts = '[n,o,s]1cccc1[C](=O)[O;H1]'
        pattern = Chem.MolFromSmarts(heteroaromatic_carboxy_smarts)
        if mol.HasSubstructMatch(pattern):
            return -1
        return 0

    rules.append(rule6)

    # Rule 7
    def rule7(mol):
        # Rule 7: Aromatic carboxylic acids with a heteroaromatic ring attached at the para position via a direct bond
        # High Fe/Hf value (True), Prediction:1

        # Aromatic ring with carboxylic acid and heteroaromatic ring at para positions
        pattern_smarts = 'c1cc([C](=O)[O;H1])ccc1[c2nccc2]'
        pattern = Chem.MolFromSmarts(pattern_smarts)
        if mol.HasSubstructMatch(pattern):
            return 1
        return 0

    rules.append(rule7)

    # Rule 8
    def rule8(mol):
        # Rule 8: Modifiers containing polyether chains terminating with polar functional groups (e.g., amino or methoxy groups)
        # High Fe/Hf value (True), Prediction:1

        # Polyether chain ending with amino or methoxy group
        polyether_smarts = '[OX2][CH2][CH2](?:[OX2][CH2][CH2])*([NX3;H2]|[OX2][CH3])'
        polyether = Chem.MolFromSmarts(polyether_smarts)
        if mol.HasSubstructMatch(polyether):
            return 1
        return 0

    rules.append(rule8)

    # Rule 9
    def rule9(mol):
        # Rule 9: Simple aliphatic carboxylic acids without additional polar functional groups
        # Low Fe/Hf value (False), Prediction: -1

        # Aliphatic carboxylic acid
        aliphatic_carboxy_smarts = '[C;!R][C;!R](=O)[O;H1]'
        aliphatic_carboxy = Chem.MolFromSmarts(aliphatic_carboxy_smarts)
        if mol.HasSubstructMatch(aliphatic_carboxy):
            # Check for additional polar functional groups
            polar_smarts = '[#7,#8,#16]'  # N, O, S atoms
            polar = Chem.MolFromSmarts(polar_smarts)
            polar_matches = mol.GetSubstructMatches(polar)
            if len(polar_matches) <=2:  # Only the carboxyl oxygens
                return -1
        return 0

    rules.append(rule9)

    # Rule 10
    def rule10(mol):
        # Rule 10: Modifiers containing strong electron-withdrawing groups like trifluoromethyl or perfluoroalkyl chains
        # Low Fe/Hf value (False), Prediction: -1

        # Trifluoromethyl
        tfm_smarts = '[CX4](F)(F)F'
        tfm = Chem.MolFromSmarts(tfm_smarts)
        if mol.HasSubstructMatch(tfm):
            return -1
        # Perfluoroalkyl chain
        perfluoro_smarts = 'C(F)(F)(F)C(F)(F)F'
        perfluoro = Chem.MolFromSmarts(perfluoro_smarts)
        if mol.HasSubstructMatch(perfluoro):
            return -1
        return 0

    rules.append(rule10)

    # Rule 11
    def rule11(mol):
        # Rule 11: Amino acids with side chains bearing aromatic rings
        # High Fe/Hf value (True), Prediction:1

        # Alpha amino acid
        amino_acid_smarts = '[NX3;H2][CHX4][C](=O)[O;H1]'
        amino_acid = Chem.MolFromSmarts(amino_acid_smarts)
        # Side chain aromatic ring
        aromatic_smarts = '[CH2][c]1[c][c][c][c][c]1'

        if mol.HasSubstructMatch(amino_acid) and mol.HasSubstructMatch(aromatic_smarts):
            return 1
        return 0

    rules.append(rule11)

    # Rule 12
    def rule12(mol):
        # Rule 12: Amino acids with side chains bearing fused heteroaromatic rings (e.g., indole ring)
        # Low Fe/Hf value (False), Prediction: -1

        # Alpha amino acid
        amino_acid_smarts = '[NX3;H2][CHX4][C](=O)[O;H1]'
        amino_acid = Chem.MolFromSmarts(amino_acid_smarts)
        # Indole ring
        indole_smarts = 'c1c[cH]c2c1cccc2'
        indole = Chem.MolFromSmarts(indole_smarts)
        if mol.HasSubstructMatch(amino_acid) and mol.HasSubstructMatch(indole):
            return -1
        return 0

    rules.append(rule12)

    # Rule 13
    def rule13(mol):
        # Rule 13: Modifiers containing aldehyde or ketone groups on the aromatic ring
        # Low Fe/Hf value (False), Prediction: -1

        # Aldehyde or ketone on aromatic ring
        pattern_smarts = 'c[C](=O)[H,O]'
        pattern = Chem.MolFromSmarts(pattern_smarts)
        if mol.HasSubstructMatch(pattern):
            return -1
        return 0

    rules.append(rule13)

    # Rule 14
    def rule14(mol):
        # Rule 14: Aliphatic hydroxy acids with chain lengths of seven carbons or more
        # High Fe/Hf value (True), Prediction:1

        # Carboxylic acid group
        carboxy_smarts = '[C](=O)[O;H1]'
        carboxy = Chem.MolFromSmarts(carboxy_smarts)
        # Hydroxy group
        hydroxy_smarts = '[OX2H]'
        hydroxy = Chem.MolFromSmarts(hydroxy_smarts)
        if mol.HasSubstructMatch(carboxy) and mol.HasSubstructMatch(hydroxy):
            # Check for chain length >=7 carbons
            # Simple approach: count total number of carbons
            carbons = [atom for atom in mol.GetAtoms() if atom.GetAtomicNum()==6]
            if len(carbons) >=7:
                return 1
        return 0

    rules.append(rule14)

    # Rule 15
    def rule15(mol):
        # Rule 15: Modifiers containing oxidized aromatic rings with keto groups adjacent to carboxyl groups enhance Fe coordination
        # High Fe/Hf value (True), Prediction:1

        # Pattern with adjacent keto and carboxyl groups on aromatic ring
        pattern_smarts = 'c1c(=O)c(C(=O)[O;H1])ccc1'
        pattern = Chem.MolFromSmarts(pattern_smarts)
        if mol.HasSubstructMatch(pattern):
            return 1
        return 0

    rules.append(rule15)

    # Now process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                prediction = rule(mol)
                row.append(prediction)
            except:
                row.append(0)
        results.append(row)

    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {i+1}' for i in range(len(rules))])
    return df
