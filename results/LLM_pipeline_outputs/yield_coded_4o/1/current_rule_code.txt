def rule2matrix(smiles_list):
    rules = [
        ['[CX3](=O)[OX2H1]', '[c][OX2H]', '[c][NX3H2]'],  # Rule 1: Carboxylic acid and aromatic ring with electron-donating groups
        ['[NX3H2]', '[C;X4][C;X4][C;X4][C;X4]'],  # Rule 2: Amino group and linear aliphatic chain
        ['[OX2H]', '[c][OX2H]'],  # Rule 3: Hydroxyl group and aromatic ring with electron-donating groups
        ['[OX2][C;X4][OX2]'],  # Rule 4: Multiple ether linkages
        ['[SX2H]', '[C;X4][C;X4][C;X4]'],  # Rule 5: Sulfanyl group with short aliphatic chain
        ['[NX3+](=O)[O-]', '[c]'],  # Rule 6: Nitro group on an aromatic ring
        ['c1c[nH]c2c1cccc2'],  # Rule 7: Indole group
        ['c1ccncc1'],  # Rule 8: Pyridine ring
        ['[c][SX4](=O)(=O)', '[c][CX3](=O)'],  # Rule 9: Aromatic ring with sulfonyl or carbonyl groups
        ['[C;X4][C;X4][C;X4][C;X4][C;X4][C;X4][C;X4]'],  # Rule 10: Long aliphatic chain
        ['c1ccncc1', '[c][CX3](=O)'],  # Rule 11: Pyridine ring with electron-withdrawing groups
        ['[c][OX2][C;X4][OX2]'],  # Rule 12: Aromatic ring with methoxy or ethoxy groups
        ['[c][CX3H]=O'],  # Rule 13: Formyl group on an aromatic ring
    ]
    results = []
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            results.append([0] * len(rules))
            continue
        row = []
        for i, rule in enumerate(rules):
            try:
                if all(mol.HasSubstructMatch(Chem.MolFromSmarts(r)) for r in rule):
                    if i in [0, 1, 2, 4, 5, 6, 7, 12]:  # Rules with high prediction
                        row.append(1)
                    else:  # Rules with low prediction
                        row.append(-1)
                else:
                    row.append(0)
            except:
                row.append(0)
        results.append(row)
    df = pd.DataFrame(results, columns=[f'Rule {i+1}' for i in range(len(rules))])
    return df