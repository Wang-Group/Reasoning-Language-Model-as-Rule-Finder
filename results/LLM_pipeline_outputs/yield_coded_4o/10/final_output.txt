
    Target Name: yield
    GPT Model: gpt-4o-2024-08-06
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: Modifiers containing both a carboxylic acid group and an amino group, particularly in the form of amino acids or their derivatives, tend to result in high yield. This is supported by entries such as (2S)-2-aminopentanedioic acid and 5-aminopentanoic acid.

- **Rule 2**: Modifiers with aromatic carboxylic acids, especially those with additional electron-withdrawing groups (e.g., nitro or bromo), tend to result in high yield. Examples include 4-nitrobenzoic acid and 4-(bromomethyl)benzoic acid.

- **Rule 3**: Modifiers with sulfur-containing groups (e.g., sulfanyl) in combination with a carboxylic acid group tend to result in high yield. This is supported by 3-sulfanylpropanoic acid.

- **Rule 4**: Modifiers with multiple hydroxyl groups, especially in a branched structure, tend to result in high yield. An example is 2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid.

- **Rule 5**: Modifiers with pyridine rings tend to result in low yield unless they are combined with other activating groups such as carboxylic acids. Examples of low yield include 4-pyridin-4-ylbenzoic acid.

- **Rule 6**: Modifiers with long aliphatic chains without additional functional groups tend to result in low yield. Examples include octanoic acid and 7-aminoheptanoic acid.

- **Rule 7**: Modifiers with fluorinated alkyl chains tend to result in low yield. This is supported by 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid.

- **Rule 8**: Modifiers with formyl groups tend to result in low yield. Examples include 5-formyl-2-hydroxybenzoic acid and 4-formylbenzoic acid.

- **Rule 9**: Modifiers with ether linkages in combination with other functional groups such as carboxylic acids tend to result in low yield. This is supported by 2-[2-(2-methoxyethoxy)ethoxy]acetic acid.

- **Rule 10**: Modifiers with amino acids or derivatives, especially those with additional aromatic or heteroaromatic groups (e.g., phenyl, indole), tend to result in high yield. Examples include (2S)-2-aminobutanedioic acid and (2R)-2-amino-3-(1H-indol-3-yl)propanoic acid.

- **Rule 11**: Modifiers with aromatic rings substituted with hydroxyl groups tend to result in high yield, as seen in 5-(4-hydroxyphenyl)pentanoic acid.

- **Rule 12**: Modifiers with benzofuran or pyrazole structures tend to result in high yield, supported by 1,3-dioxo-2-benzofuran-5-carboxylic acid and 1H-pyrazole-4-carboxylic acid.

- **Rule 13**: Modifiers with a combination of aromatic and aliphatic chains, where the aromatic ring is substituted with activating groups like methoxy, tend to result in high yield. An example is 4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid.

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,1,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,1,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,1,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6285714285714286; Test Accuracy: 0.0
    Train Support: 0.02857142857142857; Test Support: 0.0
    Train Confidence: 0.16666666666666666; Test Confidence: 0.5
    Train Lift: 0.32407407407407407; Test Lift: NONE
    Train Leverage: -0.05959183673469387; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    rules = [
        ['[CX3](=O)[OX2H1]', '[NX3;!$(NC=[O,S])][CX3;$([CH]),$([C][#6])]=[NX2;!$(NC=[O,S])]'],  # Rule 1
        ['[c][CX3](=O)[OX2H1]', '[c][NX3+](=O)-[OX-]'],  # Rule 2
        ['[SX2H][CX3](=O)[OX2H1]'],  # Rule 3
        ['[OX2H][CX4;!$(C(O)(O)[!#6])][OX2H]'],  # Rule 4
        ['[n][c]'],  # Rule 5
        ['[CX4][CX4][CX4][CX4][CX4][CX4]'],  # Rule 6
        ['[CX4](F)(F)(F)'],  # Rule 7
        ['[CX3H]=[OX1]'],  # Rule 8
        ['[OX2][CX4][OX2]'],  # Rule 9
        ['[NX3;!$(NC=[O,S])][CX3;$([CH]),$([C][#6])]=[NX2;!$(NC=[O,S])]'],  # Rule 10
        ['[c][OX2H]'],  # Rule 11
        ['[c]1oc2ccccc2c1'],  # Rule 12
        ['[c][CX4][OX2]']  # Rule 13
    ]
    results = []
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            results.append([0] * len(rules))
            continue
        row = []
        for i, rule in enumerate(rules):
            try:
                if all(mol.HasSubstructMatch(Chem.MolFromSmarts(r)) for r in rule):
                    if i in [0, 1, 2, 3, 10, 11, 12]:  # Rules with high prediction
                        row.append(1)
                    else:
                        row.append(-1)
                else:
                    row.append(0)
            except:
                row.append(0)
        results.append(row)
    df = pd.DataFrame(results, columns=[f'Rule {i+1}' for i in range(len(rules))])
    return df
--------------------------------------------------
    Target Name: yield
    GPT Model: gpt-4o-2024-08-06
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: Modifiers containing both a carboxylic acid group and an amino group, particularly in the form of amino acids or their derivatives, tend to result in high yield. This is supported by entries such as (2S)-2-aminopentanedioic acid and 5-aminopentanoic acid.

- **Rule 2**: Modifiers with aromatic carboxylic acids, especially those with additional electron-withdrawing groups (e.g., nitro or bromo), tend to result in high yield. Examples include 4-nitrobenzoic acid and 4-(bromomethyl)benzoic acid.

- **Rule 3**: Modifiers with sulfur-containing groups (e.g., sulfanyl) in combination with a carboxylic acid group tend to result in high yield. This is supported by 3-sulfanylpropanoic acid.

- **Rule 4**: Modifiers with multiple hydroxyl groups, especially in a branched structure, tend to result in high yield. An example is 2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid.

- **Rule 5**: Modifiers with pyridine rings tend to result in low yield unless they are combined with other activating groups such as carboxylic acids. Examples of low yield include 4-pyridin-4-ylbenzoic acid.

- **Rule 6**: Modifiers with long aliphatic chains without additional functional groups tend to result in low yield. Examples include octanoic acid and 7-aminoheptanoic acid.

- **Rule 7**: Modifiers with fluorinated alkyl chains tend to result in low yield. This is supported by 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid.

- **Rule 8**: Modifiers with formyl groups tend to result in low yield. Examples include 5-formyl-2-hydroxybenzoic acid and 4-formylbenzoic acid.

- **Rule 9**: Modifiers with ether linkages in combination with other functional groups such as carboxylic acids tend to result in low yield. This is supported by 2-[2-(2-methoxyethoxy)ethoxy]acetic acid.

- **Rule 10**: Modifiers with amino acids or derivatives, especially those with additional aromatic or heteroaromatic groups (e.g., phenyl, indole), tend to result in high yield. Examples include (2S)-2-aminobutanedioic acid and (2R)-2-amino-3-(1H-indol-3-yl)propanoic acid.

- **Rule 11**: Modifiers with aromatic rings substituted with hydroxyl groups tend to result in high yield, as seen in 5-(4-hydroxyphenyl)pentanoic acid.

- **Rule 12**: Modifiers with benzofuran or pyrazole structures tend to result in high yield, supported by 1,3-dioxo-2-benzofuran-5-carboxylic acid and 1H-pyrazole-4-carboxylic acid.

- **Rule 13**: Modifiers with a combination of aromatic and aliphatic chains, where the aromatic ring is substituted with activating groups like methoxy, tend to result in high yield. An example is 4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid.

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13
0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,1,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,1,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,1,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.7142857142857143; Test Accuracy: 0.0
    Train Support: 0.06285714285714286; Test Support: 0.0
    Train Confidence: 0.625; Test Confidence: 0.4
    Train Lift: 1.220996732026144; Test Lift: NONE
    Train Leverage: 0.004734693877551025; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    rules = [
        ['[$([NX3][CX3](=O)[OX2H1]),$([CX3](=O)[OX2H1][NX3])]'],  # Rule 1: Amino acids or derivatives
        ['[c][CX3](=O)[OX2H1][!#1]'],  # Rule 2: Aromatic carboxylic acids with EWG
        ['[SX2][CX3](=O)[OX2H1]'],  # Rule 3: Sulfur-containing groups with carboxylic acid
        ['[$([OX2H][CX4]([OX2H])[CX4]),$([OX2H][CX4][OX2H])]'],  # Rule 4: Multiple hydroxyl groups
        ['[n]1ccccc1'],  # Rule 5: Pyridine rings
        ['[CX4][CX4][CX4][CX4]'],  # Rule 6: Long aliphatic chains
        ['[CX4](F)(F)(F)'],  # Rule 7: Fluorinated alkyl chains
        ['[CX3H]=O'],  # Rule 8: Formyl groups
        ['[OX2][CX4][OX2]'],  # Rule 9: Ether linkages
        ['[NX3][CX3](=O)[OX2H1][c]'],  # Rule 10: Amino acids with aromatic groups
        ['[c][OX2H]'],  # Rule 11: Aromatic rings with hydroxyl groups
        ['[c]1occc1', '[n]1cccn1'],  # Rule 12: Benzofuran or pyrazole structures
        ['[c][CX4][c][OX2]'],  # Rule 13: Aromatic and aliphatic chains with methoxy
    ]
    results = []
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            results.append([0] * len(rules))
            continue
        row = []
        for i, rule in enumerate(rules):
            try:
                if all(mol.HasSubstructMatch(Chem.MolFromSmarts(r)) for r in rule):
                    if i in [0, 1, 2, 3, 10, 11, 12]:  # High yield rules
                        row.append(1)
                    else:  # Low yield rules
                        row.append(-1)
                else:
                    row.append(0)
            except:
                row.append(0)
        results.append(row)
    df = pd.DataFrame(results, columns=[f'Rule {i+1}' for i in range(len(rules))])
    return df
--------------------------------------------------
    Target Name: yield
    GPT Model: gpt-4o-2024-08-06
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: Modifiers containing both a carboxylic acid group and an amino group, particularly in the form of amino acids or their derivatives, tend to result in high yield. This is supported by entries such as (2S)-2-aminopentanedioic acid and 5-aminopentanoic acid.

- **Rule 2**: Modifiers with aromatic carboxylic acids, especially those with additional electron-withdrawing groups (e.g., nitro or bromo), tend to result in high yield. Examples include 4-nitrobenzoic acid and 4-(bromomethyl)benzoic acid.

- **Rule 3**: Modifiers with sulfur-containing groups (e.g., sulfanyl) in combination with a carboxylic acid group tend to result in high yield. This is supported by 3-sulfanylpropanoic acid.

- **Rule 4**: Modifiers with multiple hydroxyl groups, especially in a branched structure, tend to result in high yield. An example is 2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid.

- **Rule 5**: Modifiers with pyridine rings tend to result in low yield unless they are combined with other activating groups such as carboxylic acids. Examples of low yield include 4-pyridin-4-ylbenzoic acid.

- **Rule 6**: Modifiers with long aliphatic chains without additional functional groups tend to result in low yield. Examples include octanoic acid and 7-aminoheptanoic acid.

- **Rule 7**: Modifiers with fluorinated alkyl chains tend to result in low yield. This is supported by 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid.

- **Rule 8**: Modifiers with formyl groups tend to result in low yield. Examples include 5-formyl-2-hydroxybenzoic acid and 4-formylbenzoic acid.

- **Rule 9**: Modifiers with ether linkages in combination with other functional groups such as carboxylic acids tend to result in low yield. This is supported by 2-[2-(2-methoxyethoxy)ethoxy]acetic acid.

- **Rule 10**: Modifiers with amino acids or derivatives, especially those with additional aromatic or heteroaromatic groups (e.g., phenyl, indole), tend to result in high yield. Examples include (2S)-2-aminobutanedioic acid and (2R)-2-amino-3-(1H-indol-3-yl)propanoic acid.

- **Rule 11**: Modifiers with aromatic rings substituted with hydroxyl groups tend to result in high yield, as seen in 5-(4-hydroxyphenyl)pentanoic acid.

- **Rule 12**: Modifiers with benzofuran or pyrazole structures tend to result in high yield, supported by 1,3-dioxo-2-benzofuran-5-carboxylic acid and 1H-pyrazole-4-carboxylic acid.

- **Rule 13**: Modifiers with a combination of aromatic and aliphatic chains, where the aromatic ring is substituted with activating groups like methoxy, tend to result in high yield. An example is 4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid.

- **Rule 14**: Modifiers with aromatic rings that are unsubstituted or substituted with electron-donating groups (e.g., methyl) tend to result in low yield. This is supported by 4-methylbenzoic acid.

- **Rule 15**: Modifiers with amino groups in combination with ether linkages tend to result in low yield. An example is 3-[2-(2-aminoethoxy)ethoxy]propanoic acid.

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,1,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6285714285714286; Test Accuracy: 0.0
    Train Support: 0.02857142857142857; Test Support: 0.0
    Train Confidence: 0.16666666666666666; Test Confidence: 0.5
    Train Lift: 0.32407407407407407; Test Lift: NONE
    Train Leverage: -0.05959183673469387; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    rules = [
        ['[NX3;H2,H1][CX3](=O)[OX2H1]', '[CX3](=O)[OX2H1]'],  # Rule 1
        ['[c][CX3](=O)[OX2H1]', '[c][NX3+](=O)[O-]', '[c][CH2Br]'],  # Rule 2
        ['[SX2H][CX3](=O)[OX2H1]'],  # Rule 3
        ['[OX2H][CX4][OX2H][CX4][OX2H]'],  # Rule 4
        ['[n][c]'],  # Rule 5
        ['[CX4][CX4][CX4][CX4][CX4][CX4][CX4][CX4]'],  # Rule 6
        ['[CX4](F)(F)(F)[CX4][CX4]'],  # Rule 7
        ['[CX3H]=[OX1]'],  # Rule 8
        ['[OX2][CX4][OX2][CX3](=O)[OX2H1][CX4]'],  # Rule 9
        ['[NX3;H2,H1][CX3](=O)[OX2H1][c]'],  # Rule 10
        ['[c][c][OX2H1]'],  # Rule 11
        ['[c]1oc2ccccc2c1', '[c]1cn[nH]c1'],  # Rule 12
        ['[c][CX4][OX2H][c][OX2H][c]'],  # Rule 13
        ['[c][c][CH3]', '[c][c][c]'],  # Rule 14
        ['[NX3;H2,H1][OX2][CX4][OX2]'],  # Rule 15
    ]
    results = []
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            results.append([0] * len(rules))
            continue
        row = []
        for i, rule in enumerate(rules):
            try:
                if all(mol.HasSubstructMatch(Chem.MolFromSmarts(r)) for r in rule):
                    if i in [0, 1, 2, 3, 10, 11, 12, 13]:  # Rules with high prediction
                        row.append(1)
                    else:
                        row.append(-1)
                else:
                    row.append(0)
            except:
                row.append(0)
        results.append(row)
    df = pd.DataFrame(results, columns=[f'Rule {i+1}' for i in range(len(rules))])
    return df
--------------------------------------------------
    Target Name: yield
    GPT Model: gpt-4o-2024-08-06
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: Modifiers containing both a carboxylic acid group and an amino group, particularly in the form of amino acids or their derivatives, tend to result in high yield. This is supported by entries such as (2S)-2-aminopentanedioic acid and 5-aminopentanoic acid.

- **Rule 2**: Modifiers with aromatic carboxylic acids, especially those with additional electron-withdrawing groups (e.g., nitro or bromo), tend to result in high yield. Examples include 4-nitrobenzoic acid and 4-(bromomethyl)benzoic acid.

- **Rule 3**: Modifiers with sulfur-containing groups (e.g., sulfanyl) in combination with a carboxylic acid group tend to result in high yield. This is supported by 3-sulfanylpropanoic acid.

- **Rule 4**: Modifiers with multiple hydroxyl groups, especially in a branched structure, tend to result in high yield. An example is 2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid.

- **Rule 5**: Modifiers with pyridine rings tend to result in low yield unless they are combined with other activating groups such as carboxylic acids. Examples of low yield include 4-pyridin-4-ylbenzoic acid.

- **Rule 6**: Modifiers with long aliphatic chains without additional functional groups tend to result in low yield. Examples include octanoic acid and 7-aminoheptanoic acid.

- **Rule 7**: Modifiers with fluorinated alkyl chains tend to result in low yield. This is supported by 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid.

- **Rule 8**: Modifiers with formyl groups tend to result in low yield. Examples include 5-formyl-2-hydroxybenzoic acid and 4-formylbenzoic acid.

- **Rule 9**: Modifiers with ether linkages in combination with other functional groups such as carboxylic acids tend to result in low yield. This is supported by 2-[2-(2-methoxyethoxy)ethoxy]acetic acid.

- **Rule 10**: Modifiers with amino acids or derivatives, especially those with additional aromatic or heteroaromatic groups (e.g., phenyl, indole), tend to result in high yield. Examples include (2S)-2-aminobutanedioic acid and (2R)-2-amino-3-(1H-indol-3-yl)propanoic acid.

- **Rule 11**: Modifiers with aromatic rings substituted with hydroxyl groups tend to result in high yield, as seen in 5-(4-hydroxyphenyl)pentanoic acid.

- **Rule 12**: Modifiers with benzofuran or pyrazole structures tend to result in high yield, supported by 1,3-dioxo-2-benzofuran-5-carboxylic acid and 1H-pyrazole-4-carboxylic acid.

- **Rule 13**: Modifiers with a combination of aromatic and aliphatic chains, where the aromatic ring is substituted with activating groups like methoxy, tend to result in high yield. An example is 4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid.

- **Rule 14**: Modifiers with aromatic rings that are unsubstituted or substituted with electron-donating groups (e.g., methyl) tend to result in low yield. This is supported by 4-methylbenzoic acid.

- **Rule 15**: Modifiers with amino groups in combination with ether linkages tend to result in low yield. An example is 3-[2-(2-aminoethoxy)ethoxy]propanoic acid.

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.5428571428571428; Test Accuracy: 1.0
    Train Support: 0.05714285714285714; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 1.9444444444444446; Test Lift: NONE
    Train Leverage: 0.02775510204081633; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    rules = [
        ['[NX3;!$(NC=[O,S])][CX3](=O)[OX2H1]', '[CX3](=O)[OX2H1]', '[NX3][CX3](=O)[OX2H1]'],  # Rule 1: Amino acids or derivatives
        ['[c][CX3](=O)[OX2H1]', '[c][NX3+](=O)[O-]', '[c][Br]', '[c][N+](=O)[O-]'],  # Rule 2: Aromatic carboxylic acids with EWG
        ['[SX2H][CX3](=O)[OX2H1]'],  # Rule 3: Sulfur-containing groups with carboxylic acid
        ['[OX2H][CX4][OX2H]', '[OX2H][CX4][OX2H][CX4][OX2H]', '[OX2H][CX4][OX2H][CX4][OX2H][CX4][OX2H]'],  # Rule 4: Multiple hydroxyl groups
        ['[n]1ccccc1', '[CX3](=O)[OX2H1]', '[n]1ccncc1'],  # Rule 5: Pyridine rings
        ['[CX4][CX4][CX4][CX4][CX4][CX4][CX4][CX4]'],  # Rule 6: Long aliphatic chains
        ['[CX4](F)(F)(F)', '[CX4](F)(F)(F)[CX4](F)(F)(F)'],  # Rule 7: Fluorinated alkyl chains
        ['[CX3H]=[OX1]', '[CX3H1]=[OX1]'],  # Rule 8: Formyl groups
        ['[OX2][CX4][OX2][CX4][OX2]', '[OX2][CX4][OX2][CX4][OX2][CX4][OX2]'],  # Rule 9: Ether linkages
        ['[NX3;!$(NC=[O,S])][CX3](=O)[OX2H1]', '[c]', '[c][c]'],  # Rule 10: Amino acids with aromatic groups
        ['[c][OX2H]', '[c][OX2H][c]'],  # Rule 11: Aromatic rings with hydroxyl groups
        ['[c]1oc2ccccc2c1', '[n]1ccccc1', '[n]1c[n]cc1'],  # Rule 12: Benzofuran or pyrazole structures
        ['[c][CX4][OX2][c]', '[c][CX4][OX2][c][OX2]'],  # Rule 13: Aromatic and aliphatic chains with methoxy
        ['[c][CH3]', '[c][CH3][c]'],  # Rule 14: Aromatic rings with methyl
        ['[NX3;!$(NC=[O,S])][OX2][CX4]', '[NX3;!$(NC=[O,S])][OX2][CX4][OX2]'],  # Rule 15: Amino groups with ether linkages
    ]
    results = []
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            results.append([0] * len(rules))
            continue
        row = []
        for i, rule in enumerate(rules):
            try:
                if all(mol.HasSubstructMatch(Chem.MolFromSmarts(r)) for r in rule):
                    if i in [0, 1, 2, 3, 10, 11, 12, 13]:  # Rules with high prediction
                        row.append(1)
                    else:
                        row.append(-1)
                else:
                    row.append(0)
            except:
                row.append(0)
        results.append(row)
    df = pd.DataFrame(results, columns=[f'Rule {i+1}' for i in range(len(rules))])
    return df
--------------------------------------------------
    Target Name: yield
    GPT Model: gpt-4o-2024-08-06
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: Modifiers containing both a carboxylic acid group and an amino group, particularly in the form of amino acids or their derivatives, tend to result in high yield. This is supported by entries such as (2S)-2-aminopentanedioic acid and 5-aminopentanoic acid.

- **Rule 2**: Modifiers with aromatic carboxylic acids, especially those with additional electron-withdrawing groups (e.g., nitro or bromo), tend to result in high yield. Examples include 4-nitrobenzoic acid and 4-(bromomethyl)benzoic acid.

- **Rule 3**: Modifiers with sulfur-containing groups (e.g., sulfanyl) in combination with a carboxylic acid group tend to result in high yield. This is supported by 3-sulfanylpropanoic acid.

- **Rule 4**: Modifiers with multiple hydroxyl groups, especially in a branched structure, tend to result in high yield. An example is 2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid.

- **Rule 5**: Modifiers with pyridine rings tend to result in low yield unless they are combined with other activating groups such as carboxylic acids. Examples of low yield include 4-pyridin-4-ylbenzoic acid.

- **Rule 6**: Modifiers with long aliphatic chains without additional functional groups tend to result in low yield. Examples include octanoic acid and 7-aminoheptanoic acid.

- **Rule 7**: Modifiers with fluorinated alkyl chains tend to result in low yield. This is supported by 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid.

- **Rule 8**: Modifiers with formyl groups tend to result in low yield unless combined with electron-donating groups such as hydroxyl or amino groups, which may counteract the electron-withdrawing effect of the formyl group.

- **Rule 9**: Modifiers with ether linkages in combination with other functional groups such as carboxylic acids tend to result in low yield. This is supported by 2-[2-(2-methoxyethoxy)ethoxy]acetic acid.

- **Rule 10**: Modifiers with amino acids or derivatives, especially those with additional aromatic or heteroaromatic groups (e.g., phenyl, indole), tend to result in high yield. Examples include (2S)-2-aminobutanedioic acid and (2R)-2-amino-3-(1H-indol-3-yl)propanoic acid.

- **Rule 11**: Modifiers with aromatic rings substituted with hydroxyl groups tend to result in high yield, as seen in 5-(4-hydroxyphenyl)pentanoic acid.

- **Rule 12**: Modifiers with benzofuran or pyrazole structures tend to result in high yield, supported by 1,3-dioxo-2-benzofuran-5-carboxylic acid and 1H-pyrazole-4-carboxylic acid.

- **Rule 13**: Modifiers with a combination of aromatic and aliphatic chains, where the aromatic ring is substituted with activating groups like methoxy, tend to result in high yield. An example is 4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid.

- **Rule 14**: Modifiers with aromatic rings that are unsubstituted or substituted with electron-donating groups (e.g., methyl) tend to result in low yield. This is supported by 4-methylbenzoic acid.

- **Rule 15**: Modifiers with amino groups in combination with ether linkages tend to result in low yield. An example is 3-[2-(2-aminoethoxy)ethoxy]propanoic acid.

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,1,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.7142857142857143; Test Accuracy: 1.0
    Train Support: 0.04081632653061224; Test Support: 0.0
    Train Confidence: 0.5952380952380952; Test Confidence: 0.5
    Train Lift: 1.1778322440087148; Test Lift: NONE
    Train Leverage: -0.00046647230320699424; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    rules = [
        ['[CX3](=O)[OX2H1]', '[NX3;!$(NC=[O,S])][CX3;$([CH]),$([C][#6])]=[NX2;!$(NC=[O,S])]'],  # Rule 1
        ['[c][CX3](=O)[OX2H1]', '[c][NX3+](=O)-[OX-]'],  # Rule 2
        ['[SX2H][CX3](=O)[OX2H1]'],  # Rule 3
        ['[OX2H][CX4;!$(C(O)(O)[!#6])][OX2H]'],  # Rule 4
        ['[n][c]', '[CX3](=O)[OX2H1]'],  # Rule 5
        ['[CX4][CX4][CX4][CX4][CX4][CX4]'],  # Rule 6
        ['[CX4](F)(F)(F)'],  # Rule 7
        ['[CX3H]=[OX1]'],  # Rule 8
        ['[OX2][CX4][OX2]'],  # Rule 9
        ['[NX3;!$(NC=[O,S])][CX3;$([CH]),$([C][#6])]=[NX2;!$(NC=[O,S])]'],  # Rule 10
        ['[c][OX2H]'],  # Rule 11
        ['[c]1oc2ccccc2c1'],  # Rule 12
        ['[c][CX4][c][OX2]'],  # Rule 13
        ['[c][CH3]'],  # Rule 14
        ['[NX3][OX2][CX4]']  # Rule 15
    ]
    results = []
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            results.append([0] * len(rules))
            continue
        row = []
        for i, rule in enumerate(rules):
            try:
                if all(mol.HasSubstructMatch(Chem.MolFromSmarts(r)) for r in rule):
                    if i in [0, 1, 2, 3, 10, 11, 12, 13]:  # Rules with high prediction
                        row.append(1)
                    else:
                        row.append(-1)
                else:
                    row.append(0)
            except:
                row.append(0)
        results.append(row)
    df = pd.DataFrame(results, columns=[f'Rule {i+1}' for i in range(len(rules))])
    return df
--------------------------------------------------
    Target Name: yield
    GPT Model: gpt-4o-2024-08-06
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: Modifiers containing both a carboxylic acid group and an amino group, particularly in the form of amino acids or their derivatives, tend to result in high yield. This is supported by entries such as (2S)-2-aminopentanedioic acid and 5-aminopentanoic acid.

- **Rule 2**: Modifiers with aromatic carboxylic acids, especially those with additional electron-withdrawing groups (e.g., nitro or bromo), tend to result in high yield. Examples include 4-nitrobenzoic acid and 4-(bromomethyl)benzoic acid.

- **Rule 3**: Modifiers with sulfur-containing groups (e.g., sulfanyl) in combination with a carboxylic acid group tend to result in high yield. This is supported by 3-sulfanylpropanoic acid.

- **Rule 4**: Modifiers with multiple hydroxyl groups, especially in a branched structure, tend to result in high yield. An example is 2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid.

- **Rule 5**: Modifiers with pyridine rings tend to result in low yield unless they are combined with strong electron-donating groups such as amino groups or hydroxyl groups, which can enhance yield. Examples of low yield include 4-pyridin-4-ylbenzoic acid, but high yield can be seen with pyridine-3-carboxylic acid.

- **Rule 6**: Modifiers with long aliphatic chains without additional functional groups tend to result in low yield. However, if these chains are branched or contain electron-donating groups, they may lead to higher yields. Examples of low yield include octanoic acid, but branching or additional functional groups can alter this outcome.

- **Rule 7**: Modifiers with fluorinated alkyl chains tend to result in low yield. This is supported by 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid.

- **Rule 8**: Modifiers with formyl groups tend to result in low yield unless combined with electron-donating groups such as hydroxyl or amino groups, which may counteract the electron-withdrawing effect of the formyl group. For example, 4-formylbenzoic acid results in low yield, but 5-formyl-2-hydroxybenzoic acid can result in higher yield.

- **Rule 9**: Modifiers with ether linkages in combination with other functional groups such as carboxylic acids tend to result in low yield. This is supported by 2-[2-(2-methoxyethoxy)ethoxy]acetic acid.

- **Rule 10**: Modifiers with amino acids or derivatives, especially those with additional aromatic or heteroaromatic groups (e.g., phenyl, indole), tend to result in high yield. Examples include (2S)-2-aminobutanedioic acid and (2R)-2-amino-3-(1H-indol-3-yl)propanoic acid.

- **Rule 11**: Modifiers with aromatic rings substituted with hydroxyl groups tend to result in high yield, as seen in 5-(4-hydroxyphenyl)pentanoic acid.

- **Rule 12**: Modifiers with benzofuran or pyrazole structures tend to result in high yield, supported by 1,3-dioxo-2-benzofuran-5-carboxylic acid and 1H-pyrazole-4-carboxylic acid.

- **Rule 13**: Modifiers with a combination of aromatic and aliphatic chains, where the aromatic ring is substituted with activating groups like methoxy, tend to result in high yield. An example is 4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid.

- **Rule 14**: Modifiers with aromatic rings that are unsubstituted or substituted with electron-donating groups (e.g., methyl) tend to result in low yield. This is supported by 4-methylbenzoic acid.

- **Rule 15**: Modifiers with amino groups in combination with ether linkages tend to result in low yield. An example is 3-[2-(2-aminoethoxy)ethoxy]propanoic acid.

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6857142857142857; Test Accuracy: 1.0
    Train Support: 0.04285714285714286; Test Support: 0.0
    Train Confidence: 0.5; Test Confidence: 0.5
    Train Lift: 0.9793709150326798; Test Lift: NONE
    Train Leverage: 0.003469387755102045; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    rules = [
        ['[NX3;!$(NC=[O,S])][CX3](=O)[OX2H1]', '[NX3;!$(NC=[O,S])][CX3](=O)[OX2H1]'],  # Rule 1: Carboxylic acid and amino group
        ['[c][CX3](=O)[OX2H1][N+](=O)[O-]', '[c][CX3](=O)[OX2H1][Br]'],  # Rule 2: Aromatic carboxylic acids with electron-withdrawing groups
        ['[SX2H][CX3](=O)[OX2H1]'],  # Rule 3: Sulfur-containing groups with carboxylic acid
        ['[OX2H][CX4;!$(C(O)(O)[!#6])][OX2H]'],  # Rule 4: Multiple hydroxyl groups
        ['[n][c]', '[n][c][NX3;!$(NC=[O,S])]', '[n][c][OX2H]'],  # Rule 5: Pyridine rings with electron-donating groups
        ['[CX4][CX4][CX4][CX4][CX4][CX4]'],  # Rule 6: Long aliphatic chains
        ['[CX4](F)(F)F'],  # Rule 7: Fluorinated alkyl chains
        ['[CX3H]=[OX1]', '[CX3H]=[OX1][OX2H]', '[CX3H]=[OX1][NX3;!$(NC=[O,S])]'],  # Rule 8: Formyl groups with electron-donating groups
        ['[OX2][CX4][OX2]'],  # Rule 9: Ether linkages
        ['[NX3;!$(NC=[O,S])][CX3](=O)[OX2H1]'],  # Rule 10: Amino acids or derivatives
        ['[c][OX2H]'],  # Rule 11: Aromatic rings with hydroxyl groups
        ['[c]1oc2ccccc2c1', '[c]1cn[nH]c1'],  # Rule 12: Benzofuran or pyrazole structures
        ['[c][CX4][c][OX2H]'],  # Rule 13: Aromatic and aliphatic chains with activating groups
        ['[c][c]', '[c][c][CH3]'],  # Rule 14: Aromatic rings with electron-donating groups
        ['[NX3;!$(NC=[O,S])][OX2][CX4]'],  # Rule 15: Amino groups with ether linkages
    ]
    results = []
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            results.append([0] * len(rules))
            continue
        row = []
        for i, rule in enumerate(rules):
            try:
                if all(mol.HasSubstructMatch(Chem.MolFromSmarts(r)) for r in rule):
                    if i in [0, 1, 2, 3, 10, 11, 12, 13]:  # Rules with high prediction
                        row.append(1)
                    else:
                        row.append(-1)
                else:
                    row.append(0)
            except:
                row.append(0)
        results.append(row)
    df = pd.DataFrame(results, columns=[f'Rule {i+1}' for i in range(len(rules))])
    return df
--------------------------------------------------
    Target Name: yield
    GPT Model: gpt-4o-2024-08-06
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: Modifiers containing both a carboxylic acid group and an amino group, particularly in the form of amino acids or their derivatives, tend to result in high yield. This is supported by entries such as (2S)-2-aminopentanedioic acid and 5-aminopentanoic acid.

- **Rule 2**: Modifiers with aromatic carboxylic acids, especially those with additional electron-withdrawing groups (e.g., nitro or bromo), tend to result in high yield. Examples include 4-nitrobenzoic acid and 4-(bromomethyl)benzoic acid.

- **Rule 3**: Modifiers with sulfur-containing groups (e.g., sulfanyl) in combination with a carboxylic acid group tend to result in high yield. This is supported by 3-sulfanylpropanoic acid.

- **Rule 4**: Modifiers with multiple hydroxyl groups, especially in a branched structure, tend to result in high yield. An example is 2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid.

- **Rule 5**: Modifiers with pyridine rings tend to result in low yield unless they are combined with strong electron-donating groups such as amino groups or hydroxyl groups, which can enhance yield. Examples of low yield include 4-pyridin-4-ylbenzoic acid, but high yield can be seen with pyridine-3-carboxylic acid.

- **Rule 6**: Modifiers with long aliphatic chains without additional functional groups tend to result in low yield. However, if these chains are branched or contain electron-donating groups, they may lead to higher yields. Examples of low yield include octanoic acid, but branching or additional functional groups can alter this outcome.

- **Rule 7**: Modifiers with fluorinated alkyl chains tend to result in low yield. This is supported by 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid.

- **Rule 8**: Modifiers with formyl groups tend to result in low yield unless combined with electron-donating groups such as hydroxyl or amino groups, which may counteract the electron-withdrawing effect of the formyl group. For example, 4-formylbenzoic acid results in low yield, but 5-formyl-2-hydroxybenzoic acid can result in higher yield.

- **Rule 9**: Modifiers with ether linkages in combination with other functional groups such as carboxylic acids tend to result in low yield. This is supported by 2-[2-(2-methoxyethoxy)ethoxy]acetic acid.

- **Rule 10**: Modifiers with amino acids or derivatives, especially those with additional aromatic or heteroaromatic groups (e.g., phenyl, indole), tend to result in high yield. Examples include (2S)-2-aminobutanedioic acid and (2R)-2-amino-3-(1H-indol-3-yl)propanoic acid.

- **Rule 11**: Modifiers with aromatic rings substituted with hydroxyl groups tend to result in high yield, as seen in 5-(4-hydroxyphenyl)pentanoic acid.

- **Rule 12**: Modifiers with benzofuran or pyrazole structures tend to result in high yield, supported by 1,3-dioxo-2-benzofuran-5-carboxylic acid and 1H-pyrazole-4-carboxylic acid.

- **Rule 13**: Modifiers with a combination of aromatic and aliphatic chains, where the aromatic ring is substituted with activating groups like methoxy, tend to result in high yield. An example is 4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid.

- **Rule 14**: Modifiers with aromatic rings that are unsubstituted or substituted with electron-donating groups (e.g., methyl) tend to result in low yield. This is supported by 4-methylbenzoic acid.

- **Rule 15**: Modifiers with amino groups in combination with ether linkages tend to result in low yield. An example is 3-[2-(2-aminoethoxy)ethoxy]propanoic acid.

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6285714285714286; Test Accuracy: 1.0
    Train Support: 0.02857142857142857; Test Support: 0.0
    Train Confidence: 0.4166666666666667; Test Confidence: 0.5
    Train Lift: 0.8197167755991286; Test Lift: NONE
    Train Leverage: -0.0043537414965986385; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    rules = [
        ['[NX3][CX3](=O)[OX2H1]', '[CX3](=O)[OX2H1]'],  # Rule 1
        ['[c][CX3](=O)[OX2H1]', '[c][N+](=O)[O-]', '[c][Br]'],  # Rule 2
        ['[SX2H][CX3](=O)[OX2H1]'],  # Rule 3
        ['[OX2H][CX4][OX2H]', '[OX2H][CX4][OX2H][CX4][OX2H]'],  # Rule 4
        ['[n][c]', '[n][c][NX3H2]', '[n][c][OX2H]'],  # Rule 5
        ['[CX4][CX4][CX4][CX4][CX4][CX4]', '[CX4][CX4][CX4][CX4][CX4][CX4][CX4]'],  # Rule 6
        ['[CX4](F)(F)F'],  # Rule 7
        ['[CX3H]=[OX1]', '[CX3H]=[OX1][OX2H]', '[CX3H]=[OX1][NX3H2]'],  # Rule 8
        ['[OX2][CX4][OX2]'],  # Rule 9
        ['[NX3H2+0][CX3](=O)[OX2H1]', '[c][NX3H2+0][CX3](=O)[OX2H1]'],  # Rule 10
        ['[c][OX2H]'],  # Rule 11
        ['[c]1oc2ccccc2c1'],  # Rule 12
        ['[c][CX4][OX2H]', '[c][CX4][OX2H][c][O][CX4]'],  # Rule 13
        ['[c][CH3]'],  # Rule 14
        ['[NX3H2+0][OX2][CX4]']  # Rule 15
    ]
    results = []
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            results.append([0] * len(rules))
            continue
        row = []
        for i, rule in enumerate(rules):
            try:
                if all(mol.HasSubstructMatch(Chem.MolFromSmarts(r)) for r in rule):
                    if i in [0, 1, 2, 3, 10, 11, 12, 13]:  # High yield rules
                        row.append(1)
                    else:  # Low yield rules
                        row.append(-1)
                else:
                    row.append(0)
            except:
                row.append(0)
        results.append(row)
    df = pd.DataFrame(results, columns=[f'Rule {i+1}' for i in range(len(rules))])
    return df
--------------------------------------------------