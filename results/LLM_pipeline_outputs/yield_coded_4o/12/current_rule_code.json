{
    "prefix": "This code converts a list of SMILES strings into a feature matrix using RDkit. Each rule is represented by a SMARTS pattern, and the matrix indicates whether the rule matches the SMILES and predicts a high or low yield.",
    "imports": "import pandas as pd\nfrom rdkit import Chem",
    "code": "def rule2matrix(smiles_list):\n    rules = [\n        ['[NX3H2,NX4H3;!$([N][!C])][CX3;$([R0][#6]),$([H1R0])](=[OX1])'],  # Rule 1\n        ['[c][CX3;$([R0][#6]),$([H1R0])](=[OX1])[OX2H]'],  # Rule 2\n        ['[OX2H][CX4;!$(C(O)(O)[!#6])][OX2]'],  # Rule 3\n        ['[SX2H;$([SX2H][CX4;!$(C([SX2H])~[O,S,#7,#15])])]'],  # Rule 4\n        ['[n][c][CX3;$([R0][#6]),$([H1R0])](=[OX1])'],  # Rule 5\n        ['[c][NX3+](=O)-[OX-]'],  # Rule 6\n        ['[c][CX3H]=[OX1]'],  # Rule 7\n        ['[CX4](F)(F)F'],  # Rule 8\n        ['[CX3;$([R0][#6]),$([H1R0])](=[OX1])[#6]'],  # Rule 9\n        ['[c][OX2][c]'],  # Rule 10\n        ['[CX4][CX4][CX4][CX4][CX4][CX4]'],  # Rule 11\n        ['[o][c]1[c][c][c][c][c]1'],  # Rule 12\n        ['[NX3H2,NX4H3;!$([N][!C])][CX3;$([R0][#6]),$([H1R0])](=[OX1])'],  # Rule 13\n        ['[CX4][OX2H]'],  # Rule 14\n        ['[NX3H2,NX4H3;!$([N][!C])][CX3;$([R0][#6]),$([H1R0])](=[OX1])[CX3;$([R0][#6]),$([H1R0])](=[OX1])']  # Rule 15\n    ]\n    results = []\n    for smi in smiles_list:\n        mol = Chem.MolFromSmiles(smi)\n        if mol is None:\n            results.append([0] * len(rules))\n            continue\n        row = []\n        for i, rule in enumerate(rules):\n            try:\n                if all(mol.HasSubstructMatch(Chem.MolFromSmarts(r)) for r in rule):\n                    if i in [0, 1, 2, 3, 4, 5, 10, 12]:  # Rules with high prediction\n                        row.append(1)\n                    else:\n                        row.append(-1)\n                else:\n                    row.append(0)\n            except:\n                row.append(0)\n        results.append(row)\n    df = pd.DataFrame(results, columns=[f'Rule {i+1}' for i in range(len(rules))])\n    return df"
}