def rule2matrix(smiles_list):
    rules = [
        ['$([NX3H2][CX3](=O)[OX2H1])', '$([CX3](=O)[OX2H1][NX3H2])'],  # Rule 1: Amino and carboxylic acid group
        ['$([c1ccccc1C(=O)O])', '$([c1ccccc1C(=O)O][Br,F,Cl,I,N+](=O)[O-])'],  # Rule 2: Phenyl with carboxylic acid and EWG
        ['$([c1ccncc1C(=O)O])', '$([c1ccncc1C(=O)O][OH])'],  # Rule 3: Pyridine with carboxylic acid
        ['$([SX2H][CX3](=O)[OX2H1])'],  # Rule 4: Sulfanyl with carboxylic acid
        ['O=C1OCc2ccccc2C1=O'],  # Rule 5: Benzofuranone structure
        ['$([c1ccccc1C(=O)C=O])'],  # Rule 6: Formyl on benzoic acid
        ['COC'],  # Rule 7: Methoxy on ether chain
        ['$([CX3](=O)[CX4](F)(F)F)'],  # Rule 8: Trifluoroacetyl group
        ['$([c1ccccc1C[C@@H](N)C(=O)O])'],  # Rule 9: Phenyl on amino acid backbone
        ['CCCCCCCO'],  # Rule 10: Long aliphatic chain with terminal OH
        ['$([c1ccccc1[N+](=O)[O-])'],  # Rule 11: Benzene with EWG
        ['$([c1ccc(cc1)O])'],  # Rule 12: Hydroxyl on phenyl ring
        ['$([c1ccncc1C=O])'],  # Rule 13: Pyridine with formyl group
        ['$([c1ccccc1S])'],  # Rule 14: Benzene with sulfanyl group
    ]
    results = []
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            results.append([0] * len(rules))
            continue
        row = []
        for i, rule in enumerate(rules):
            try:
                if all(mol.HasSubstructMatch(Chem.MolFromSmarts(r)) for r in rule):
                    if i in [0, 1, 2, 3, 4, 10]:  # Rules with high prediction
                        row.append(1)
                    else:  # Rules with low prediction
                        row.append(-1)
                else:
                    row.append(0)
            except:
                row.append(0)
        results.append(row)
    df = pd.DataFrame(results, columns=[f'Rule {i+1}' for i in range(len(rules))])
    return df