{
    "prefix": "This code converts a list of SMILES strings into a feature matrix using RDkit, based on specific chemical rules.",
    "imports": "import pandas as pd\nfrom rdkit import Chem\nfrom rdkit.Chem import AllChem",
    "code": "def rule2matrix(smiles_list):\n    rules = [\n        ['[CX3](=O)[OX2H1]', '[NX3;H2]'],  # Rule 1: Carboxylic acid and amino group\n        ['[c][CX3](=O)[OX2H1]', '[c][C;X4][C;X4]'],  # Rule 2: Phenyl with carboxylic acid and methyl\n        ['[OX2H][C;R5][C;R5][C;R5][C;R5]'],  # Rule 3: Sugar-like structure with hydroxyl groups\n        ['[SX2][CX3](=O)[OX2H1]'],  # Rule 4: Sulfur-containing group and carboxylic acid\n        ['[c][NX3+](=O)[O-]'],  # Rule 5: Nitro group on aromatic ring\n        ['[C;X4][C;X4][C;X4][C;X4][C;X4][C;X4][C;X4]'],  # Rule 6: Long aliphatic chains\n        ['[n][c][CX3](=O)[OX2H1]'],  # Rule 7: Pyridine with carboxylic acid\n        ['[c][CX3H]=O'],  # Rule 8: Formyl group on aromatic ring\n        ['[OX2][C;X4][OX2][C;X4][OX2]'],  # Rule 9: Multiple ether linkages\n        ['[c][OX2H]'],  # Rule 10: Hydroxyl group on aromatic ring\n        ['[c][CX4](F)(F)F'],  # Rule 11: Trifluoromethyl group\n        ['[n][c][NX3;H2]'],  # Rule 12: Pyridine with amino group\n        ['[c][nH]'],  # Rule 13: Indole group\n        ['[c][CH2Br]'],  # Rule 14: Bromomethyl group on aromatic ring\n        ['[c][OX2H][CX3](=O)[OX2H1]']  # Rule 15: Hydroxyl and carboxylic acid on phenyl\n    ]\n    results = []\n    for smi in smiles_list:\n        mol = Chem.MolFromSmiles(smi)\n        if mol is None:\n            results.append([0] * len(rules))\n            continue\n        row = []\n        for i, rule in enumerate(rules):\n            try:\n                if all(mol.HasSubstructMatch(Chem.MolFromSmarts(r)) for r in rule):\n                    if i in [0, 3, 4, 7, 12, 13, 14]:  # Rules predicting high yield\n                        row.append(1)\n                    else:\n                        row.append(-1)\n                else:\n                    row.append(0)\n            except:\n                row.append(0)\n        results.append(row)\n    df = pd.DataFrame(results, columns=[f'Rule {i+1}' for i in range(len(rules))])\n    return df"
}