{
    "prefix": "This code converts a list of SMILES strings into a feature matrix using RDkit. Each rule is represented by a SMARTS pattern, and the matrix indicates whether the rule matches the SMILES and predicts a high or low yield.",
    "imports": "import pandas as pd\nfrom rdkit import Chem",
    "code": "def rule2matrix(smiles_list):\n    rules = [\n        ['[NX3H2][CX3](=O)[OX2H1]'],  # Rule 1: Amino and carboxylic acid group\n        ['[c][CX3](=O)[OX2H1]', '[c][NX3H2]', '[c][OX2H]'],  # Rule 2: Phenyl with carboxylic acid and electron-donating groups\n        ['[SX2H]', '[SX2]'],  # Rule 3: Sulfur groups\n        ['[OX2H][CX4][OX2H][CX4][OX2H]'],  # Rule 4: Multiple hydroxyl groups\n        ['[c][NX3+](=O)[OX-]', '[c][CX4](F)(F)F'],  # Rule 5: Electron-withdrawing groups on aromatic ring\n        ['[CX4][CX4][CX4][CX4][CX4][CX4]'],  # Rule 6: Long aliphatic chains\n        ['[n]1ccccc1'],  # Rule 7: Pyridine ring\n        ['[c][CX3](=O)[#6]'],  # Rule 8: Aromatic ring with ketone\n        ['[c][CX3H]=O'],  # Rule 9: Formyl group on aromatic ring\n        ['[CX4][OX2][CX4]'],  # Rule 10: Methoxy group on aliphatic chain\n        ['[c]1c[nH]c2c1cccc2'],  # Rule 11: Indole moiety\n        ['[n]1cncc1'],  # Rule 12: Pyrazole ring\n        ['[c]1oc2ccccc2c1=O'],  # Rule 13: Benzofuran moiety\n        ['[n]1ccccc1C(=O)[OX2H1]'],  # Rule 14: Pyridine with carboxylic acid\n        ['[c][OX2H]']  # Rule 15: Aromatic ring with hydroxyl group\n    ]\n    results = []\n    for smi in smiles_list:\n        mol = Chem.MolFromSmiles(smi)\n        if mol is None:\n            results.append([0] * len(rules))\n            continue\n        row = []\n        for i, rule in enumerate(rules):\n            try:\n                if all(mol.HasSubstructMatch(Chem.MolFromSmarts(r)) for r in rule):\n                    if i in [0, 1, 2, 3, 6, 7, 11, 12, 13, 14]:  # Rules with high prediction\n                        row.append(1)\n                    else:\n                        row.append(-1)\n                else:\n                    row.append(0)\n            except:\n                row.append(0)\n        results.append(row)\n    df = pd.DataFrame(results, columns=[f'Rule {i+1}' for i in range(len(rules))])\n    return df"
}