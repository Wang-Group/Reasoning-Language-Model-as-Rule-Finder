def rule2matrix(smiles_list):
    rules = [
        ['[NX3H2][CX3](=O)[OX2H1]'],  # Rule 1: Amino and carboxylic acid group
        ['[c][CX3](=O)[OX2H1]', '[c][NX3H2]', '[c][OX2H]'],  # Rule 2: Phenyl with carboxylic acid and electron-donating groups
        ['[SX2H]', '[SX2]'],  # Rule 3: Sulfur groups
        ['[OX2H][CX4][OX2H][CX4][OX2H]'],  # Rule 4: Multiple hydroxyl groups
        ['[c][NX3+](=O)[OX-]', '[c][CX4](F)(F)F'],  # Rule 5: Electron-withdrawing groups on aromatic ring
        ['[CX4][CX4][CX4][CX4][CX4][CX4]'],  # Rule 6: Long aliphatic chains
        ['[n]1ccccc1'],  # Rule 7: Pyridine ring
        ['[c][CX3](=O)[#6]'],  # Rule 8: Aromatic ring with ketone
        ['[c][CX3H]=O'],  # Rule 9: Formyl group on aromatic ring
        ['[CX4][OX2][CX4]'],  # Rule 10: Methoxy group on aliphatic chain
        ['[c]1c[nH]c2c1cccc2'],  # Rule 11: Indole moiety
        ['[n]1cncc1'],  # Rule 12: Pyrazole ring
        ['[c]1oc2ccccc2c1=O'],  # Rule 13: Benzofuran moiety
        ['[n]1ccccc1C(=O)[OX2H1]'],  # Rule 14: Pyridine with carboxylic acid
        ['[c][OX2H]']  # Rule 15: Aromatic ring with hydroxyl group
    ]
    results = []
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            results.append([0] * len(rules))
            continue
        row = []
        for i, rule in enumerate(rules):
            try:
                if all(mol.HasSubstructMatch(Chem.MolFromSmarts(r)) for r in rule):
                    if i in [0, 1, 2, 3, 6, 7, 11, 12, 13, 14]:  # Rules with high prediction
                        row.append(1)
                    else:
                        row.append(-1)
                else:
                    row.append(0)
            except:
                row.append(0)
        results.append(row)
    df = pd.DataFrame(results, columns=[f'Rule {i+1}' for i in range(len(rules))])
    return df