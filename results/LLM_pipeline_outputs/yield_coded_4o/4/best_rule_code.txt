def rule2matrix(smiles_list):
    rules = [
        ['[CX3](=O)[OX2H1]', '[NX3;H2]'],  # Rule 1: Carboxylic acid and amino group
        ['c1ccccc1[OX2H]'],  # Rule 2: Phenyl group and hydroxyl group directly attached
        ['[SX2H]', '[CX3](=O)[OX2H1]'],  # Rule 3: Sulfanyl group and carboxylic acid
        ['n1ccccc1'],  # Rule 4: Pyridine ring
        ['[CX3H1]=O'],  # Rule 5: Formyl group
        ['[OX2][CX4][CX4][OX2]'],  # Rule 6: Multiple ether linkages
        ['[NX3](=O)[OX1-]'],  # Rule 7: Nitro group
        ['[CX4](F)(F)(F)'],  # Rule 8: Fluorinated alkyl chain
        ['O=C1OC2=CC=CC=C2C1=O'],  # Rule 9: Benzofuranone structure
        ['c1c[nH]c2c1cccc2']  # Rule 10: Indole structure
    ]
    results = []
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            results.append([0] * len(rules))
            continue
        row = []
        for i, rule in enumerate(rules):
            try:
                if all(mol.HasSubstructMatch(Chem.MolFromSmarts(r)) for r in rule):
                    if i in [0, 1, 2, 3, 6, 8, 9]:  # Rules predicting high yield
                        row.append(1)
                    else:  # Rules predicting low yield
                        row.append(-1)
                else:
                    row.append(0)
            except:
                row.append(0)
        results.append(row)
    df = pd.DataFrame(results, columns=[f'Rule {i+1}' for i in range(len(rules))])
    return df