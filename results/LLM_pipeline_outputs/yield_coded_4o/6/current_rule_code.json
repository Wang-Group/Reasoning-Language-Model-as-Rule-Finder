{
    "prefix": "This code converts a list of SMILES strings into a feature matrix using RDkit, based on specific chemical rules.",
    "imports": "import pandas as pd\nfrom rdkit import Chem",
    "code": "def rule2matrix(smiles_list):\n    rules = [\n        ['[$([NX3;$([N]([c])[c])][C@H])]'],  # Rule 1: Aromatic amine with specific stereochemistry\n        ['[$([CX3](=O)[OX2H1][c][c][c][c][c][c][NX3;$([N]([c])[c])])]'],  # Rule 2: Carboxylic acid adjacent to aromatic ring with EWG\n        ['[$([C@H](O)[C@H](O)[C@H](O)[C@H](O)[C@H](O)[C@H](O))]'],  # Rule 3: Sugar-like structure with hydroxyl groups\n        ['[SX2H]', '[SX2]'],  # Rule 4: Sulfanyl group or thioether\n        ['[n][c][c][c][c][c][c][OX2H]'],  # Rule 5: Pyridine ring with electron-donating groups\n        ['[c][OCH3]'],  # Rule 6: Methoxy group adjacent to aromatic ring\n        ['[c]1oc2ccccc2c1'],  # Rule 7: Benzofuran structure\n        ['[CX4][CX4][CX4][CX4][CX4][CX4][CX4]'],  # Rule 8: Simple aliphatic chain\n        ['[c][CX3H]=O'],  # Rule 9: Formyl group on aromatic ring\n        ['[OX2][CX4][OX2][CX4][OX2][CX4]'],  # Rule 10: Ether linkage with EWG\n        ['[CX4](F)(F)F'],  # Rule 11: Trifluoromethyl group\n        ['[OX2H][CX4][CX4][CX4][CX4][CX4][CX4][CX4]'],  # Rule 12: Hydroxy group on long aliphatic chain\n        ['[c][CH3]'],  # Rule 13: Methyl group on aromatic ring\n        ['[c][OX2H][c][CX3H]=O'],  # Rule 14: Hydroxy and formyl group on aromatic ring\n        ['[n][c][c][CX3](=O)[OX2H1]']  # Rule 15: Carboxylic acid and pyridine ring\n    ]\n    results = []\n    for smi in smiles_list:\n        mol = Chem.MolFromSmiles(smi)\n        if mol is None:\n            results.append([0] * len(rules))\n            continue\n        row = []\n        for i, rule in enumerate(rules):\n            try:\n                if all(mol.HasSubstructMatch(Chem.MolFromSmarts(r)) for r in rule):\n                    if i in [0, 1, 2, 3, 4, 5, 6]:  # Rules with high prediction\n                        row.append(1)\n                    else:  # Rules with low prediction\n                        row.append(-1)\n                else:\n                    row.append(0)\n            except:\n                row.append(0)\n        results.append(row)\n    df = pd.DataFrame(results, columns=[f'Rule {i+1}' for i in range(len(rules))])\n    return df"
}