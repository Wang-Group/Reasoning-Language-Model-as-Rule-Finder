def rule2matrix(smiles_list):
    rules = [
        ['[NX3H2]', '[CX3](=O)[OX2H1]'],  # Rule 1: Amino and carboxylic acid group
        ['[SX2H]', '[CX3](=O)[OX2H1]'],  # Rule 2: Sulfanyl and carboxylic acid group
        ['c1ccncc1[NX3H2]'],  # Rule 3: Pyridine with amino group
        ['[NX3+](=O)[O-]'],  # Rule 4: Nitro group
        ['[CX3H]=O'],  # Rule 5: Formyl group
        ['[OX2H][CX4][OX2H]'],  # Rule 6: Multiple hydroxyl groups
        ['c1ccccc1OC'],  # Rule 7: Benzene with methoxy group
        ['[CX4](F)(F)F'],  # Rule 8: Fluorinated alkyl chain
        ['c1c[nH]c2c1cccc2'],  # Rule 9: Indole group
        ['[CX4][CX4][CX4][CX4][CX4][CX4][CX3](=O)[OX2H1]'],  # Rule 10: Long alkyl chain with carboxylic acid
        ['c1cc([NX3H2])[CX3H]=O'],  # Rule 11: Electron-donating and withdrawing groups on aromatic ring
        ['[OX2][CX4][OX2H1]'],  # Rule 12: Ether linkage with carboxylic acid
        ['c1ccccc1[SX2H]'],  # Rule 13: Benzene with sulfanyl group
        ['c1ccncc1[CX3](=O)[OX2H1]'],  # Rule 14: Pyridine with carboxylic acid
        ['c1ccccc1[CX3H]=O']  # Rule 15: Benzene with formyl group
    ]
    results = []
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            results.append([0] * len(rules))
            continue
        row = []
        for i, rule in enumerate(rules):
            try:
                if all(mol.HasSubstructMatch(Chem.MolFromSmarts(r)) for r in rule):
                    if i in [0, 1, 2, 3, 5, 9, 11, 14]:  # Rules predicting high yield
                        row.append(1)
                    else:  # Rules predicting low yield
                        row.append(-1)
                else:
                    row.append(0)
            except:
                row.append(0)
        results.append(row)
    df = pd.DataFrame(results, columns=[f'Rule {i+1}' for i in range(len(rules))])
    return df