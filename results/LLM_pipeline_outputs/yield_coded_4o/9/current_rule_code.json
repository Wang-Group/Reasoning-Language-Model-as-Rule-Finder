{
    "prefix": "This code converts a list of SMILES strings into a feature matrix using RDkit, based on specific structural rules that predict high or low yield.",
    "imports": "import pandas as pd\nfrom rdkit import Chem",
    "code": "def rule2matrix(smiles_list):\n    rules = [\n        ['[CX3](=O)[OX2H1]', '[NX3H2]', '[C;X4][C;X4][C;X4][C;X4]'],  # Rule 1\n        ['[c][CX3](=O)[OX2H1]', '[c][NX3H2]', '[c][OX2H]'],  # Rule 2\n        ['[C;X4][SX2H]', '[C;X4][SX2]'],  # Rule 3\n        ['[C;X4][OX2H]', '[C;X4][OX2H]', '[C;X4][OX2H]', '[C;X4][OX2H]'],  # Rule 4\n        ['[n][CX3](=O)[OX2H1]'],  # Rule 5\n        ['[C;X4](F)(F)(F)'],  # Rule 6\n        ['[c][CX3H]=O'],  # Rule 7\n        ['[C;X4][OX2][C;X4][OX2]'],  # Rule 8\n        ['[c][nH][C;X4][NX3H2]'],  # Rule 9\n        ['[c][NX3+](=O)[O-]'],  # Rule 10\n        ['[c][CH3]'],  # Rule 11\n        ['[c]1oc2ccccc2c1[CX3](=O)[OX2H1]'],  # Rule 12\n        ['[C;X4][CX3](=O)[OX2H1]', '[C;X4][OX2H]'],  # Rule 13\n        ['[c][SX2H]'],  # Rule 14\n        ['[c][OX2][CH3]']  # Rule 15\n    ]\n    results = []\n    for smi in smiles_list:\n        mol = Chem.MolFromSmiles(smi)\n        if mol is None:\n            results.append([0] * len(rules))\n            continue\n        row = []\n        for i, rule in enumerate(rules):\n            try:\n                if all(mol.HasSubstructMatch(Chem.MolFromSmarts(r)) for r in rule):\n                    if i in [0, 1, 2, 3, 9, 11]:  # Rules with high prediction\n                        row.append(1)\n                    else:  # Rules with low prediction\n                        row.append(-1)\n                else:\n                    row.append(0)\n            except:\n                row.append(0)\n        results.append(row)\n    df = pd.DataFrame(results, columns=[f'Rule {i+1}' for i in range(len(rules))])\n    return df"
}