
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: **Modifiers that are amino acids with acidic side chains containing carboxylic acid groups**, such as aspartic acid and glutamic acid, will lead to **high yield**.
  - *Rationale*: The additional carboxylic acid groups can coordinate with the metal center, enhancing catalyst activity.

- **Rule 2**: **Modifiers that are straight-chain saturated fatty acids with six to eight carbons**, like octanoic acid, will lead to **high yield**.
  - *Rationale*: These modifiers can provide optimal hydrophobic interactions without introducing steric hindrance or interfering functional groups.

- **Rule 3**: **Modifiers with long aliphatic chains (seven carbons or more) bearing terminal amino or hydroxy groups**, such as 7-aminoheptanoic acid and 7-hydroxyheptanoic acid, will lead to **low yield**.
  - *Rationale*: Terminal amino or hydroxy groups can interfere with catalyst coordination or create unfavorable interactions.

- **Rule 4**: **Modifiers containing sulfhydryl (–SH) groups on short aliphatic chains**, like 3-sulfanylpropanoic acid, will lead to **high yield**.
  - *Rationale*: Sulfhydryl groups can strongly interact with metal centers, enhancing catalyst stabilization.

- **Rule 5**: **Modifiers containing perfluorinated alkyl chains**, such as 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid, will lead to **low yield**.
  - *Rationale*: Highly electronegative fluorinated chains can create a repulsive environment, hindering catalyst activity.

- **Rule 6**: **Modifiers that are aromatic heterocycles with carboxylic acid groups**, such as pyridine-3-carboxylic acid and 1H-pyrazole-4-carboxylic acid, will lead to **high yield**.
  - *Rationale*: Heterocyclic rings with nitrogen can coordinate with metal centers, enhancing catalyst performance.

- **Rule 7**: **Modifiers that are para-substituted benzoic acids with functional groups capable of strong metal coordination**, such as amino or nitro groups (e.g., 4-aminobenzoic acid, 4-nitrobenzoic acid), will lead to **high yield**.
  - *Rationale*: These groups can form coordination bonds with the metal center, improving catalyst efficiency.

- **Rule 8**: **Modifiers that are para-substituted benzoic acids with non-coordinating substituents**, such as formyl or methyl groups (e.g., 4-formylbenzoic acid, 4-methylbenzoic acid), will lead to **low yield**.
  - *Rationale*: Lack of coordination ability results in less effective catalyst modification.

- **Rule 9**: **Modifiers that are amino acids with bulky hydrophobic side chains**, like phenylalanine, will lead to **low yield**.
  - *Rationale*: Bulky side chains can cause steric hindrance, reducing catalyst accessibility.

- **Rule 10**: **Modifiers with aromatic rings connected to the carboxylic acid via a short aliphatic chain**, such as 5-(4-hydroxyphenyl)pentanoic acid, will lead to **high yield**.
  - *Rationale*: The flexible linker allows favorable interactions without steric clash, and the aromatic ring can engage in π-interactions.

- **Rule 11**: **Modifiers with hydroxyphenyl groups attached directly to short aliphatic chains**, like 3-(4-hydroxyphenyl)propanoic acid, will lead to **low yield**.
  - *Rationale*: Direct attachment may cause steric hindrance and reduce effective catalyst interaction.

- **Rule 12**: **Modifiers that are multifunctional carboxylic acids containing multiple hydroxyl groups**, such as 2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid, will lead to **high yield**.
  - *Rationale*: Multiple hydroxyl groups can enhance coordination with the catalyst and increase solubility.

- **Rule 13**: **Modifiers that are amino acids with terminal N-acetyl groups or extended amino chains**, such as (2S)-6-acetamido-2-aminohexanoic acid, will lead to **low yield**.
  - *Rationale*: N-acetylation or extended chains can prevent effective coordination due to steric and electronic effects.

- **Rule 14**: **Modifiers containing trifluoroacetylamino groups**, like 4-[(2,2,2-trifluoroacetyl)amino]butanoic acid, will lead to **low yield**.
  - *Rationale*: Trifluoromethyl groups are highly electron-withdrawing, which can disrupt catalyst interactions.

- **Rule 15**: **Modifiers with aromatic rings directly attached to the carboxylic acid and containing electron-donating substituents capable of coordination**, such as 2-[(4-hydroxybenzoyl)amino]acetic acid, will lead to **low yield** if steric hindrance is significant.
  - *Rationale*: Steric hindrance from direct attachment may outweigh coordination benefits, reducing yield.

**End of Rules**

---

These rules capture the relationships between the structural features of the molecular modifiers and the observed yields, considering underlying chemical principles:

- **Coordination Ability**: Functional groups capable of coordinating to the metal center (amino, nitro, thiol, hydroxyl groups) generally enhance yield by stabilizing the catalyst.
- **Steric Effects**: Bulky groups or rigid structures can hinder effective interaction with the catalyst, leading to lower yields.
- **Electronic Properties**: Electron-withdrawing groups like perfluoroalkyl chains can create unfavorable electronic environments, decreasing yield.
- **Chain Length and Flexibility**: Optimal chain lengths and flexible linkers facilitate better interactions without causing steric clashes.

These rules balance coverage and specificity, providing clear guidelines for predicting the yield based on the structural features of new modifiers.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6; Test Accuracy: 1.0
    Train Support: 0.05714285714285714; Test Support: 0.0
    Train Confidence: 0.9166666666666666; Test Confidence: 0.5
    Train Lift: 1.7824074074074077; Test Lift: NONE
    Train Leverage: 0.022857142857142864; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    
    carboxylic_acid = '[CX3](=O)[OX1H1]'
    amino_group = '[NX3H2]'
    thiol_group = '[SX2H]'
    hydroxyl_group = '[OX2H]'
    aromatic_heterocycle = '[a;!c]'
    benzene_ring = 'c1ccccc1'
    nitro_group = '[NX3](=O)[O-]'
    amino_aromatic = '[NX3H2][c]'
    perfluoroalkyl = '[CX4](F)(F)F'
    trifluoroacetylamino_group = '[NX3][CX3](=O)[CX4](F)(F)F'
    n_acetyl = '[NX3][CX3](=O)'
    aromatic_hydroxyl = '[c][OX2H]'
    
    # Define the rules
    rules = [
        # Rule 1
        {
            'number': 1,
            'description': 'High yield: Modifiers that are amino acids with acidic side chains containing carboxylic acid groups.',
            'patterns': [
                ['[NX3H2][CX4][CX3](=O)[OX1H1]'],  # Amino acid backbone
                ['[CX3](=O)[OX1H1]']  # Additional carboxylic acid group
            ],
            'count_threshold': {'[CX3](=O)[OX1H1]': 2},  # At least 2 carboxylic acid groups
            'prediction': 1
        },
        # Rule 2
        {
            'number': 2,
            'description': 'High yield: Modifiers that are straight-chain saturated fatty acids with six to eight carbons.',
            'patterns': [
                ['[CX3](=O)[OX1H1]']  # Carboxylic acid group
            ],
            'chain_length_range': (6, 8),
            'prediction': 1
        },
        # Rule 3
        {
            'number': 3,
            'description': 'Low yield: Modifiers with long aliphatic chains (seven carbons or more) bearing terminal amino or hydroxy groups.',
            'patterns': [
                ['[CX3](=O)[OX1H1]'],  # Carboxylic acid group
                ['[NX3H2]', '[OX2H]']  # Terminal amino or hydroxy group
            ],
            'chain_length_min': 7,
            'prediction': -1
        },
        # Rule 4
        {
            'number': 4,
            'description': 'High yield: Modifiers containing sulfhydryl (–SH) groups on short aliphatic chains.',
            'patterns': [
                ['[SX2H]'],  # Thiol group
                ['[CX3](=O)[OX1H1]']  # Carboxylic acid group
            ],
            'chain_length_max': 4,
            'prediction': 1
        },
        # Rule 5
        {
            'number': 5,
            'description': 'Low yield: Modifiers containing perfluorinated alkyl chains.',
            'patterns': [
                ['[CX4](F)(F)F']  # Trifluoromethyl group
            ],
            'prediction': -1
        },
        # Rule 6
        {
            'number': 6,
            'description': 'High yield: Modifiers that are aromatic heterocycles with carboxylic acid groups.',
            'patterns': [
                ['[a;!c]'],  # Aromatic heteroatom
                ['[CX3](=O)[OX1H1]']  # Carboxylic acid group
            ],
            'prediction': 1
        },
        # Rule 7
        {
            'number': 7,
            'description': 'High yield: Modifiers that are para-substituted benzoic acids with functional groups capable of strong metal coordination.',
            'patterns': [
                ['c1ccc(cc1)[CX3](=O)[OX1H1]'],  # Benzoic acid
                ['[c][NX3H2]', '[c][NX3+](=O)[O-]']  # Amino or nitro group attached to aromatic ring
            ],
            'prediction': 1
        },
        # Rule 8
        {
            'number': 8,
            'description': 'Low yield: Modifiers that are para-substituted benzoic acids with non-coordinating substituents.',
            'patterns': [
                ['c1ccc(cc1)[CX3](=O)[OX1H1]'],  # Benzoic acid
                ['[c][CH3]', '[c][CX3H]=O']  # Methyl or formyl group on aromatic ring
            ],
            'prediction': -1
        },
        # Rule 9
        {
            'number': 9,
            'description': 'Low yield: Modifiers that are amino acids with bulky hydrophobic side chains.',
            'patterns': [
                ['[NX3H2][CX4][CX3](=O)[OX1H1]'],  # Amino acid backbone
                ['[CX4][c]']  # Bulky hydrophobic side chain (aromatic ring)
            ],
            'prediction': -1
        },
        # Rule 10
        {
            'number': 10,
            'description': 'High yield: Modifiers with aromatic rings connected to the carboxylic acid via a short aliphatic chain.',
            'patterns': [
                ['[c][CX2][CX3](=O)[OX1H1]']  # Aromatic ring connected via short chain to carboxylic acid
            ],
            'chain_length_max': 5,
            'prediction': 1
        },
        # Rule 11
        {
            'number': 11,
            'description': 'Low yield: Modifiers with hydroxyphenyl groups attached directly to short aliphatic chains.',
            'patterns': [
                ['[c][OX2H]', '[CX2][CX3](=O)[OX1H1]']  # Hydroxyphenyl group connected directly to chain with carboxylic acid
            ],
            'chain_length_max': 3,
            'prediction': -1
        },
        # Rule 12
        {
            'number': 12,
            'description': 'High yield: Modifiers that are multifunctional carboxylic acids containing multiple hydroxyl groups.',
            'patterns': [
                ['[CX3](=O)[OX1H1]'],  # Carboxylic acid group
                ['[OX2H]']  # Hydroxyl group
            ],
            'count_threshold': {'[OX2H]': 2},  # At least 2 hydroxyl groups
            'prediction': 1
        },
        # Rule 13
        {
            'number': 13,
            'description': 'Low yield: Modifiers that are amino acids with terminal N-acetyl groups or extended amino chains.',
            'patterns': [
                ['[NX3][CX3](=O)[CX3](=O)[OX1H1]']  # N-acetylated amino acid
            ],
            'prediction': -1
        },
        # Rule 14
        {
            'number': 14,
            'description': 'Low yield: Modifiers containing trifluoroacetylamino groups.',
            'patterns': [
                ['[NX3][CX3](=O)[CX4](F)(F)F']  # Trifluoroacetylamino group
            ],
            'prediction': -1
        },
        # Rule 15
        {
            'number': 15,
            'description': 'Low yield: Modifiers with aromatic rings directly attached to the carboxylic acid and containing electron-donating substituents.',
            'patterns': [
                ['[c][CX3](=O)[OX1H1]'],  # Aromatic ring directly attached to carboxylic acid
                ['[c][OX2H]', '[c][NX3H2]']  # Electron-donating groups on aromatic ring
            ],
            'prediction': -1
        }
    ]

    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(p) for p in group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        matches = mol.GetSubstructMatches(pat)
                        if matches:
                            # If a count threshold is specified for this pattern
                            if 'count_threshold' in rule and pat.GetSmarts() in rule['count_threshold']:
                                threshold = rule['count_threshold'][pat.GetSmarts()]
                                if len(matches) >= threshold:
                                    group_match = True
                                    break
                            else:
                                group_match = True
                                break
                    if not group_match:
                        match = False
                        break
                # Additional checks for chain lengths
                if match:
                    if 'chain_length_range' in rule or 'chain_length_min' in rule or 'chain_length_max' in rule:
                        chain_lengths = []
                        for bond in mol.GetBonds():
                            if bond.GetBondType() == Chem.rdchem.BondType.SINGLE:
                                atom1 = bond.GetBeginAtom()
                                atom2 = bond.GetEndAtom()
                                if atom1.GetAtomicNum() == 6 and atom2.GetAtomicNum() == 6:
                                    path = Chem.rdmolops.GetShortestPath(mol, atom1.GetIdx(), atom2.GetIdx())
                                    chain_lengths.append(len(path))
                        if chain_lengths:
                            max_chain_length = max(chain_lengths)
                        else:
                            max_chain_length = 0
                        if 'chain_length_range' in rule:
                            min_len, max_len = rule['chain_length_range']
                            if not (min_len <= max_chain_length <= max_len):
                                match = False
                        if 'chain_length_min' in rule:
                            if max_chain_length < rule['chain_length_min']:
                                match = False
                        if 'chain_length_max' in rule:
                            if max_chain_length > rule['chain_length_max']:
                                match = False
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: **Modifiers that are amino acids with side chains containing additional carboxylic acid groups**, such as **aspartic acid** and **glutamic acid**, will lead to **high yield**.
  - *Rationale*: The extra carboxylate groups can coordinate with metal centers, enhancing catalyst activity through improved stabilization.

- **Rule 2**: **Modifiers that are para-substituted benzoic acids with amino groups**, like **4-aminobenzoic acid**, will lead to **high yield**.
  - *Rationale*: Amino groups can act as coordinating sites to the metal, promoting better catalyst interaction and performance.

- **Rule 3**: **Modifiers that are straight-chain saturated fatty acids with six to eight carbons**, such as **octanoic acid**, will lead to **high yield**.
  - *Rationale*: These chains provide hydrophobic interactions without steric hindrance or interfering functional groups, facilitating favorable catalyst environments.

- **Rule 4**: **Modifiers that are aromatic heterocycles with carboxylic acid groups**, including **pyridine-3-carboxylic acid** and **1H-pyrazole-4-carboxylic acid**, will lead to **high yield**.
  - *Rationale*: Nitrogen-containing heterocycles can coordinate with metal centers, enhancing catalyst stability and reactivity.

- **Rule 5**: **Modifiers with short aliphatic chains bearing sulfhydryl (–SH) groups**, such as **3-sulfanylpropanoic acid**, will lead to **high yield**.
  - *Rationale*: Sulfhydryl groups have strong affinity for metals, aiding in catalyst stabilization through coordination.

- **Rule 6**: **Modifiers that are aromatic carboxylic acids with electron-withdrawing groups incapable of coordination**, like **4-sulfanylbenzoic acid** and **4-formylbenzoic acid**, will lead to **low yield**.
  - *Rationale*: Electron-withdrawing groups reduce electron density available for coordination, and lack of coordinating ability diminishes catalyst effectiveness.

- **Rule 7**: **Modifiers that are amino acids with bulky hydrophobic side chains**, such as **phenylalanine**, will lead to **low yield**.
  - *Rationale*: Bulky side chains cause steric hindrance, impeding access to the catalytic site and reducing yield.

- **Rule 8**: **Modifiers containing perfluorinated alkyl chains**, including **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**, will lead to **low yield**.
  - *Rationale*: Highly electronegative fluorinated chains create a repulsive electronic environment, hindering catalyst interaction.

- **Rule 9**: **Modifiers that are amino acids with side chains containing indole groups**, like **tryptophan**, will lead to **high yield**.
  - *Rationale*: The indole ring can engage in π-stacking and coordinate with metal centers, enhancing catalytic activity.

- **Rule 10**: **Modifiers with long aliphatic chains (seven carbons or more) bearing terminal amino or hydroxy groups**, such as **7-aminoheptanoic acid** and **7-hydroxyheptanoic acid**, will lead to **low yield**.
  - *Rationale*: Terminal functional groups on long chains can interfere with catalyst coordination due to steric factors and reduced solubility.

- **Rule 11**: **Modifiers with flexible linkers connecting aromatic groups to carboxylic acids**, such as **5-(4-hydroxyphenyl)pentanoic acid**, will lead to **high yield**.
  - *Rationale*: Flexible linkers allow the aromatic group to interact favorably without causing steric clashes, improving catalyst interaction.

- **Rule 12**: **Modifiers that are para-substituted benzoic acids with nitro groups**, like **4-nitrobenzoic acid**, will lead to **high yield**.
  - *Rationale*: Nitro groups, though electron-withdrawing, can participate in coordination and enhance catalyst performance.

- **Rule 13**: **Modifiers with multiple hydroxyl groups capable of metal coordination**, such as **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid**, will lead to **high yield**.
  - *Rationale*: Multiple hydroxyl groups provide several coordination sites, strengthening interaction with the catalyst.

- **Rule 14**: **Modifiers that are aromatic carboxylic acids with methyl substituents**, like **4-methylbenzoic acid**, will lead to **low yield**.
  - *Rationale*: Methyl groups are non-coordinating and can cause slight steric hindrance, reducing catalyst effectiveness.

- **Rule 15**: **Modifiers with bulky substituents adjacent to potential coordination sites**, such as **(2S)-6-acetamido-2-aminohexanoic acid**, will lead to **low yield**.
  - *Rationale*: Bulky groups near coordination sites can prevent effective catalyst interaction due to steric hindrance.

**End of Rules**

---

These rules establish clear relationships between the structural features of molecular modifiers and their influence on the reaction yield:

- **Coordination Ability**: Functional groups like amino, hydroxyl, sulfhydryl, and heterocyclic nitrogens enhance yield by coordinating with the metal center, stabilizing the catalyst.

- **Steric Effects**: Bulky groups and long aliphatic chains can cause steric hindrance, impeding effective interaction with the catalyst and leading to lower yields.

- **Electronic Properties**: Electron-withdrawing groups that cannot coordinate, such as perfluorinated chains, create unfavorable electronic environments, decreasing catalyst efficiency. However, some electron-withdrawing groups like nitro can participate in coordination, enhancing yield.

- **Chain Length and Flexibility**: Optimal chain lengths and flexible linkers improve interactions by balancing hydrophobic effects and minimizing steric clashes.

By considering these principles, the rules prioritize broader coverage of the dataset while maintaining specificity. They provide a practical framework to predict whether new molecular modifiers will lead to high or low yields based on their structural features. This aids in the design and selection of effective modifiers for optimizing the reaction.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,1,0,0,0,0,0,0,0,0,0,1,0,-1
1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1
0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1
0,1,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0,0,0,-1
0,0,0,0,0,0,0,0,0,0,0,0,1,0,-1
0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1
0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1
0,0,0,0,0,0,-1,0,1,0,0,0,0,0,-1
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0,0,-1
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,1,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1
0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1
0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0,0,0,-1
0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1
0,0,1,0,0,0,0,0,0,0,0,0,0,0,-1
0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1
0,0,1,0,0,0,0,0,0,0,0,0,0,0,-1
0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1
0,0,1,0,0,0,0,0,0,0,0,0,0,0,-1
0,0,1,0,0,0,0,0,0,0,0,0,0,0,-1

---------------------------------------------------------------


    Train Accuracy: 0.6; Test Accuracy: 0.0
    Train Support: 0.02857142857142857; Test Support: 1.0
    Train Confidence: 0.16666666666666666; Test Confidence: 1.0
    Train Lift: 0.3431372549019608; Test Lift: NONE
    Train Leverage: -0.05469387755102041; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups, refining as per suggestions
    
    # Carboxylic acid group (includes both neutral carboxylic acid and carboxylate anion)
    carboxylic_acid = '[CX3](=O)[O;H1,-]'
    
    # Primary amine group
    primary_amine = '[NX3;H2,H1;!$(N-C=O)]'
    
    # Aromatic carboxylic acid
    aromatic_carboxylic_acid = '[c][CX3](=O)[O;H1,-]'
    
    # Aromatic amine
    aromatic_amine = '[NX3;H2,H1][c]'
    
    # Thiol group
    thiol = '[SX2H]'
    
    # Heteroaromatic carboxylic acid (refined as per Suggestion 3)
    heteroaromatic_carboxylic_acid = '[c,n,o,s]1[c,n,o,s][c,n,o,s][c,n,o,s][c,n,o,s][c,n,o,s]1[CX3](=O)[O;H1,-]'
    
    # Indole group
    indole_group = 'c1cc2ccccc2[nH]1'
    
    # Nitro group
    nitro_group = '[NX3](=O)[O-]'
    
    # Perfluoroalkyl chain (generalized for varying lengths)
    perfluoro_alkyl_recursive = '[CX4](F)(F)F-[CX4](F)(F)F'
    
    # Hydroxyl group, refined to exclude carboxylic acids and ethers (Suggestion 4)
    hydroxyl_group = '[OX2H][#6;!$(C=O);!$(C[OX2][#6])]'  
    
    # Bulky substituent adjacent to potential coordination sites (Suggestion 5)
    bulky_substituent = '[CX4;R0;!$(C([#6])[#1])][C;!$(C=O)]'
    
    # Define rules with updated patterns and logic
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are amino acids with side chains containing additional carboxylic acid groups, such as aspartic acid and glutamic acid, will lead to high yield.',
            'patterns': [primary_amine, carboxylic_acid],
            'count_thresholds': { carboxylic_acid: 2 },  # At least two carboxylic acid groups
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers that are para-substituted benzoic acids with amino groups, like 4-aminobenzoic acid, will lead to high yield.',
            'patterns': ['c1cc([NX3;H2,H1])ccc1[CX3](=O)[O;H1,-]'],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers that are straight-chain saturated fatty acids with six to eight carbons, such as octanoic acid, will lead to high yield.',
            'patterns': [carboxylic_acid],
            'chain_length_range': (6, 8),
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers that are aromatic heterocycles with carboxylic acid groups, including pyridine-3-carboxylic acid and 1H-pyrazole-4-carboxylic acid, will lead to high yield.',
            'patterns': [heteroaromatic_carboxylic_acid],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers with short aliphatic chains bearing sulfhydryl (–SH) groups, such as 3-sulfanylpropanoic acid, will lead to high yield.',
            'patterns': [carboxylic_acid, thiol],
            'max_chain_length': 4,  # Max chain length is 4 carbons
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers that are aromatic carboxylic acids with electron-withdrawing groups incapable of coordination, like 4-sulfanylbenzoic acid and 4-formylbenzoic acid, will lead to low yield.',
            'patterns': [aromatic_carboxylic_acid],
            'ewg_patterns': ['[c][CX3](=O)[OX1]', '[c][CX3](=O)[#6]', '[c][SX2][#6]', '[c][F,Cl,Br,I]', '[c][N+](=O)[O-]'],
            'exclude_patterns': ['[c][NX3;!$(N+)]', '[c][OX2H]', '[c][SX2H]', '[c][n,o,s]'],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Modifiers that are amino acids with bulky hydrophobic side chains, such as phenylalanine, will lead to low yield.',
            'patterns': [primary_amine, carboxylic_acid, '[CH2][c]'],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Modifiers containing perfluorinated alkyl chains, including 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid, will lead to low yield.',
            'patterns': [carboxylic_acid, perfluoro_alkyl_recursive],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers that are amino acids with side chains containing indole groups, like tryptophan, will lead to high yield.',
            'patterns': [primary_amine, carboxylic_acid, indole_group],
            'prediction': 1
        },
        {
            'number': 10,
            'description': 'Modifiers with long aliphatic chains (seven carbons or more) bearing terminal amino or hydroxy groups, such as 7-aminoheptanoic acid and 7-hydroxyheptanoic acid, will lead to low yield.',
            'patterns': [carboxylic_acid],
            'long_chain_patterns': ['[NX3;H2,H1][CH2]{6,}[CX3](=O)[O;H1,-]', '[OX2H][CH2]{6,}[CX3](=O)[O;H1,-]'],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Modifiers with flexible linkers connecting aromatic groups to carboxylic acids, such as 5-(4-hydroxyphenyl)pentanoic acid, will lead to high yield.',
            'patterns': [carboxylic_acid, '[#6]-[#6]-[#6]-[#6]-[#6][c][OX2H]'],
            'prediction': 1
        },
        {
            'number': 12,
            'description': 'Modifiers that are para-substituted benzoic acids with nitro groups, like 4-nitrobenzoic acid, will lead to high yield.',
            'patterns': ['c1cc([N+](=O)[O-])ccc1[CX3](=O)[O;H1,-]'],
            'prediction': 1
        },
        {
            'number': 13,
            'description': 'Modifiers with multiple hydroxyl groups capable of metal coordination, such as 2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid, will lead to high yield.',
            'patterns': [carboxylic_acid],
            'hydroxyl_pattern': hydroxyl_group,
            'hydroxyl_count': 2,  # At least two hydroxyl groups
            'prediction': 1
        },
        {
            'number': 14,
            'description': 'Modifiers that are aromatic carboxylic acids with methyl substituents, like 4-methylbenzoic acid, will lead to low yield.',
            'patterns': [aromatic_carboxylic_acid, '[c][CH3]'],
            'prediction': -1
        },
        {
            'number': 15,
            'description': 'Modifiers with bulky substituents adjacent to potential coordination sites, such as (2S)-6-acetamido-2-aminohexanoic acid, will lead to low yield.',
            'patterns': [carboxylic_acid, bulky_substituent],
            'prediction': -1
        }
    ]
    # Compile SMARTS patterns
    for rule in rules:
        rule['compiled_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule.get('patterns', [])]
        if 'exclude_patterns' in rule:
            rule['compiled_exclude_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule['exclude_patterns']]
        if 'long_chain_patterns' in rule:
            rule['compiled_long_chain_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule['long_chain_patterns']]
        if 'ewg_patterns' in rule:
            rule['compiled_ewg_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule['ewg_patterns']]
        if 'hydroxyl_pattern' in rule:
            rule['compiled_hydroxyl_pattern'] = Chem.MolFromSmarts(rule['hydroxyl_pattern'])
    # Helper function to find longest aliphatic chain length (Suggestion 2)
    def get_longest_aliphatic_chain_length(mol):
        from collections import deque
        max_length = 0
        for atom in mol.GetAtoms():
            if atom.GetAtomicNum() == 6 and not atom.GetIsAromatic():
                visited = set()
                queue = deque()
                queue.append((atom, 1))
                visited.add(atom.GetIdx())
                while queue:
                    current_atom, length = queue.popleft()
                    max_length = max(max_length, length)
                    for neighbor in current_atom.GetNeighbors():
                        neighbor_idx = neighbor.GetIdx()
                        neighbor_atom = mol.GetAtomWithIdx(neighbor_idx)
                        if neighbor_atom.GetAtomicNum() == 6 and not neighbor_atom.GetIsAromatic() and neighbor_idx not in visited:
                            visited.add(neighbor_idx)
                            queue.append((neighbor_atom, length + 1))
        return max_length
    # Process SMILES
    results = []
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Exclude patterns
                if 'compiled_exclude_patterns' in rule:
                    for pat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Required patterns
                for pat in rule['compiled_patterns']:
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Count thresholds
                if 'count_thresholds' in rule:
                    for smarts, threshold in rule['count_thresholds'].items():
                        pattern = Chem.MolFromSmarts(smarts)
                        matches = mol.GetSubstructMatches(pattern)
                        if len(matches) < threshold:
                            match = False
                            break
                if not match:
                    row.append(0)
                    continue
                # Hydroxyl count
                if 'hydroxyl_pattern' in rule and 'hydroxyl_count' in rule:
                    hydroxyl_matches = mol.GetSubstructMatches(rule['compiled_hydroxyl_pattern'])
                    if len(hydroxyl_matches) < rule['hydroxyl_count']:
                        match = False
                if not match:
                    row.append(0)
                    continue
                # Chain length range
                if 'chain_length_range' in rule:
                    min_len, max_len = rule['chain_length_range']
                    longest_chain = get_longest_aliphatic_chain_length(mol)
                    if not (min_len <= longest_chain <= max_len):
                        match = False
                if not match:
                    row.append(0)
                    continue
                # Max chain length
                if 'max_chain_length' in rule:
                    longest_chain = get_longest_aliphatic_chain_length(mol)
                    if longest_chain > rule['max_chain_length']:
                        match = False
                if not match:
                    row.append(0)
                    continue
                # Long chain patterns
                if 'compiled_long_chain_patterns' in rule:
                    long_chain_match = False
                    for pat in rule['compiled_long_chain_patterns']:
                        if mol.HasSubstructMatch(pat):
                            long_chain_match = True
                            break
                    if not long_chain_match:
                        match = False
                if not match:
                    row.append(0)
                    continue
                # Electron-withdrawing groups (ewg_patterns)
                if 'compiled_ewg_patterns' in rule:
                    ewg_match = False
                    for pat in rule['compiled_ewg_patterns']:
                        if mol.HasSubstructMatch(pat):
                            ewg_match = True
                            break
                    if not ewg_match:
                        match = False
                if not match:
                    row.append(0)
                    continue
                # If still matches, append prediction
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                row.append(0)
        results.append(row)
    df = pd.DataFrame(results, columns=[f"Rule {r['number']}" for r in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: **Modifiers that are amino acids with side chains containing additional carboxylate groups**, such as **(2S)-2-aminobutanedioic acid (aspartic acid)** and **(2S)-2-aminopentanedioic acid (glutamic acid)**, will lead to **high yield**.
  - *Rationale*: The extra carboxylate groups provide additional coordination sites with the metal center, enhancing catalyst stabilization and activity.

- **Rule 2**: **Modifiers that are aromatic carboxylic acids with para-position amino or nitro groups**, like **4-aminobenzoic acid** and **4-nitrobenzoic acid**, will lead to **high yield**.
  - *Rationale*: Amino and nitro groups can act as coordinating ligands or influence electronic properties, promoting better catalyst interaction.

- **Rule 3**: **Modifiers that are nitrogen-containing heterocyclic carboxylic acids**, including **pyridine-3-carboxylic acid** and **1H-pyrazole-4-carboxylic acid**, will lead to **high yield**.
  - *Rationale*: Nitrogen atoms in heterocycles can coordinate with metal centers, enhancing catalyst stability and reactivity.

- **Rule 4**: **Modifiers that are aromatic carboxylic acids with electron-donating substituents incapable of coordination**, such as **4-methylbenzoic acid**, will lead to **low yield**.
  - *Rationale*: Electron-donating groups without coordination ability do not enhance interaction with the metal center and may cause steric hindrance.

- **Rule 5**: **Modifiers with sulfhydryl (–SH) groups attached to aliphatic chains**, like **3-sulfanylpropanoic acid**, will lead to **high yield**, whereas **sulfhydryl groups on aromatic rings**, such as **4-sulfanylbenzoic acid**, will lead to **low yield**.
  - *Rationale*: Aliphatic thiols effectively coordinate with metals, enhancing catalyst stability, while aromatic thiols may have reduced coordination due to resonance stabilization and steric hindrance.

- **Rule 6**: **Modifiers that are aromatic carboxylic acids with formyl (aldehyde) groups**, including **4-formylbenzoic acid** and **5-formyl-2-hydroxybenzoic acid**, will lead to **low yield**.
  - *Rationale*: Aldehyde groups are electron-withdrawing and may hinder coordination with the metal center.

- **Rule 7**: **Modifiers containing perfluorinated alkyl chains**, such as **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**, will lead to **low yield**.
  - *Rationale*: Highly electronegative fluorinated chains create an unfavorable electronic environment, decreasing interaction with the catalyst.

- **Rule 8**: **Modifiers that are long-chain aliphatic carboxylic acids (seven carbons or more) with terminal amino or hydroxy groups**, like **7-aminoheptanoic acid**, **8-aminooctanoic acid**, and **7-hydroxyheptanoic acid**, will lead to **low yield**.
  - *Rationale*: Long chains with terminal polar groups may cause steric hindrance and reduce solubility, impeding effective catalyst interaction.

- **Rule 9**: **Modifiers with multiple hydroxyl groups capable of coordinating with metals**, such as **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid**, will lead to **high yield**.
  - *Rationale*: Multiple hydroxyl groups provide several coordination sites, enhancing catalyst stability and performance.

- **Rule 10**: **Modifiers that are amino acids with bulky, non-coordinating hydrophobic side chains**, like **(2S)-2-amino-3-phenylpropanoic acid (phenylalanine)**, will lead to **low yield**.
  - *Rationale*: Bulky hydrophobic groups may cause steric hindrance, reducing accessibility to the catalytic site.

- **Rule 11**: **Modifiers that are amino acids with side chains containing heterocycles capable of coordination**, such as **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid (tryptophan)**, will lead to **high yield**.
  - *Rationale*: Heterocycles with nitrogen atoms can coordinate with the metal center, enhancing catalyst performance.

- **Rule 12**: **Modifiers with flexible ether linkages and terminal amino groups**, like **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**, will lead to **low yield**.
  - *Rationale*: High conformational flexibility and terminal polar groups may prevent effective coordination with the metal center.

- **Rule 13**: **Modifiers that are medium-chain aliphatic carboxylic acids (six to eight carbons) without terminal substituents**, such as **octanoic acid**, will lead to **high yield**.
  - *Rationale*: These chains provide hydrophobic interactions without significant steric hindrance, favoring catalyst activity.

- **Rule 14**: **Modifiers that are aromatic or heteroaromatic carboxylic acids connected to aromatic rings via flexible aliphatic linkers**, like **5-(4-hydroxyphenyl)pentanoic acid** and **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid**, will lead to **high yield**.
  - *Rationale*: Flexible linkers allow for favorable interactions and coordination without steric clashes.

- **Rule 15**: **Modifiers that are biaryl systems (directly connected aromatic rings) with carboxylic acid groups**, such as **4-pyridin-4-ylbenzoic acid**, will lead to **low yield**, whereas those with flexible linkers between rings, like **4-pyridin-4-ylbutanoic acid**, will lead to **high yield**.
  - *Rationale*: Direct biaryl connections can cause steric hindrance and rigidity, reducing catalyst interaction, while flexible linkers enhance accessibility to the metal center.

**End of Rules**

---

These rules establish clear relationships between the structural features of molecular modifiers and their influence on the reaction yield:

- **Coordination Ability**: Functional groups such as amino, nitro, hydroxyl, sulfhydryl, and heterocyclic nitrogens enhance yield by coordinating with the metal center, stabilizing the catalyst, and facilitating the reaction.

- **Steric Effects**: Bulky substituents, direct biaryl connections, and long aliphatic chains with terminal functional groups can cause steric hindrance. This impedes effective interaction with the catalyst and leads to lower yields.

- **Electronic Properties**: Electron-withdrawing groups like formyl or perfluorinated chains can reduce electron density, hindering coordination. Electron-donating groups incapable of coordination may not enhance catalyst interaction and can even cause steric hindrance.

- **Chain Length and Flexibility**: Optimal chain lengths (six to eight carbons) and flexible linkers improve interactions by balancing hydrophobic effects and minimizing steric clashes, leading to higher yields.

By considering these principles, the rules provide a practical framework to predict whether new molecular modifiers will lead to high or low yields based on their structural features. This aids in the design and selection of effective modifiers for optimizing the reaction.

---

**Application of Rules to Dataset**:

Applying these rules to the provided dataset:

- **High Yield Modifiers**:

  - **(2S)-2-aminopentanedioic acid**: Fits **Rule 1**.
  - **(2S)-2-aminobutanedioic acid**: Fits **Rule 1**.
  - **4-aminobenzoic acid**: Fits **Rule 2**.
  - **4-nitrobenzoic acid**: Fits **Rule 2**.
  - **Pyridine-3-carboxylic acid**: Fits **Rule 3**.
  - **1H-pyrazole-4-carboxylic acid**: Fits **Rule 3**.
  - **3-sulfanylpropanoic acid**: Fits **Rule 5**.
  - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid**: Fits **Rule 11**.
  - **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid**: Fits **Rule 9**.
  - **Octanoic acid**: Fits **Rule 13**.
  - **5-(4-hydroxyphenyl)pentanoic acid**: Fits **Rule 14**.
  - **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid**: Fits **Rule 14**.
  - **4-pyridin-4-ylbutanoic acid**: Fits **Rule 15**.

- **Low Yield Modifiers**:

  - **4-methylbenzoic acid**: Fits **Rule 4**.
  - **4-sulfanylbenzoic acid**: Fits **Rule 5**.
  - **4-formylbenzoic acid**: Fits **Rule 6**.
  - **5-formyl-2-hydroxybenzoic acid**: Fits **Rule 6**.
  - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**: Fits **Rule 7**.
  - **7-aminoheptanoic acid**: Fits **Rule 8**.
  - **8-aminooctanoic acid**: Fits **Rule 8**.
  - **7-hydroxyheptanoic acid**: Fits **Rule 8**.
  - **(2S)-2-amino-3-phenylpropanoic acid**: Fits **Rule 10**.
  - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**: Fits **Rule 12**.
  - **4-pyridin-4-ylbenzoic acid**: Fits **Rule 15**.

---

**Note on Rule Development**:

In developing these rules, the following considerations were made:

- **Combination of Substructures**: Rules combine multiple functional groups and structural features to accurately predict outcomes.

- **Physicochemical Properties**: Underlying properties such as coordination ability, electronic effects, steric hindrance, and flexibility were central to rule formulation.

- **Coverage and Balance**: The rules cover a broad range of the dataset, with a balance between simple high-coverage rules and more complex rules targeting specific cases.

- **Refinement**: The rules were refined to avoid redundancy and improve specificity based on the dataset and chemical reasoning.

---

By following these refined rules, researchers can effectively predict and select molecular modifiers that are likely to enhance the yield of the radical-mediated remote δ-C(sp³)–H bond functionalization reaction. This systematic approach streamlines the catalyst optimization process and aids in the design of new, effective modifiers.

------------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 5 (Low),Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15 (Low),Rule 15 (High)
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,1,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,-1,1,-1,-1,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0
1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0
1,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0
1,1,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.5714285714285714; Test Accuracy: 0.0
    Train Support: 0.05714285714285714; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 2.0016339869281046; Test Lift: NONE
    Train Leverage: 0.028571428571428574; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and substructures
    
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    
    # Amino acid backbone (alpha-amino acid): N-C-C(=O)-O
    amino_acid_backbone = '[NX3H2][CX4H][CX3](=O)[OX1H]'
    
    # Additional carboxylic acid group in side chain
    additional_carboxylic_acid = '[CX3](=O)[OX2H1]'
    
    # Aromatic ring with para amino group
    para_amino_benzoic_acid = 'c1ccc(cc1)[NX3H2]'
    
    # Aromatic ring with para nitro group
    para_nitro_benzoic_acid = 'c1ccc(cc1)[N+](=O)[O-]'
    
    # Nitrogen-containing heterocyclic carboxylic acid
    pyridine_carboxylic_acid = 'n1cccc1C(=O)[OH]'
    pyrazole_carboxylic_acid = 'n1nccc1C(=O)[OH]'
    
    # Electron-donating substituents incapable of coordination (e.g., methyl group)
    para_methyl_benzoic_acid = 'c1ccc(cc1)C(=O)[OH]'
    
    # Aliphatic thiol (-SH) attached to aliphatic chain
    aliphatic_thiol = '[#6][#6][#16X2H]'
    
    # Aromatic thiol (-SH) attached to aromatic ring
    aromatic_thiol = 'c[SX2H]'
    
    # Aromatic carboxylic acids with formyl (aldehyde) groups
    aromatic_aldehyde = 'c1ccc(cc1)C=O'
    
    # Perfluorinated alkyl chain
    perfluoro_alkyl_chain = '[CX4]([F])(F)C(F)(F)C(F)(F)F'
    
    # Long-chain aliphatic carboxylic acids (seven carbons or more) with terminal amino or hydroxy groups
    long_chain_amino = '[NX3H2][CH2][CH2][CH2][CH2][CH2][CH2]C(=O)[OH]'
    long_chain_hydroxy = '[OX2H][CH2][CH2][CH2][CH2][CH2][CH2]C(=O)[OH]'
    
    # Multiple hydroxyl groups capable of coordinating with metals
    polyol = '[CX4]([OX2H])([OX2H])[OX2H]'
    
    # Amino acids with bulky, non-coordinating hydrophobic side chains (e.g., phenylalanine)
    bulky_hydrophobic_side_chain = '[NX3H2][CX4H][CX3](=O)[OX1H]c1ccccc1'
    
    # Amino acids with side chains containing heterocycles capable of coordination (e.g., tryptophan)
    heterocycle_side_chain = '[NX3H2][CX4H][CX3](=O)[OX1H]c1c[nH]c2c1cccc2'
    
    # Flexible ether linkages and terminal amino groups
    flexible_ether_amino = '[NX3H2][CH2][O][CH2][CH2][O][CH2]C(=O)[OH]'
    
    # Medium-chain aliphatic carboxylic acids (six to eight carbons) without terminal substituents
    medium_chain_acid = '[CH3][CH2][CH2][CH2][CH2][CH2]C(=O)[OH]'
    
    # Aromatic or heteroaromatic carboxylic acids connected to aromatic rings via flexible aliphatic linkers
    flexible_linker_aromatic_acid = 'c1ccc(cc1)[CH2][CH2][CH2]C(=O)[OH]'
    
    # Biaryl systems with carboxylic acid groups
    biaryl_carboxylic_acid = 'c1ccc(cc1)c2ccccc2C(=O)[OH]'
    
    # Biaryl with flexible linker
    biaryl_flexible_linker = 'c1ccc(cc1)[CH2][CH2][CH2]c2ccccc2C(=O)[OH]'
    
    # Compile SMARTS patterns
    patterns = {
        'Rule 1': {
            'patterns': [amino_acid_backbone, additional_carboxylic_acid],
            'count_threshold': {additional_carboxylic_acid: 2},
            'prediction': 1
        },
        'Rule 2': {
            'patterns': [para_amino_benzoic_acid, para_nitro_benzoic_acid],
            'prediction': 1
        },
        'Rule 3': {
            'patterns': [pyridine_carboxylic_acid, pyrazole_carboxylic_acid],
            'prediction': 1
        },
        'Rule 4': {
            'patterns': [para_methyl_benzoic_acid],
            'prediction': -1
        },
        'Rule 5': {
            'patterns': [aliphatic_thiol],
            'prediction': 1
        },
        'Rule 5 (Low)': {
            'patterns': [aromatic_thiol],
            'prediction': -1
        },
        'Rule 6': {
            'patterns': [aromatic_aldehyde],
            'prediction': -1
        },
        'Rule 7': {
            'patterns': [perfluoro_alkyl_chain],
            'prediction': -1
        },
        'Rule 8': {
            'patterns': [long_chain_amino, long_chain_hydroxy],
            'prediction': -1
        },
        'Rule 9': {
            'patterns': [polyol],
            'prediction': 1
        },
        'Rule 10': {
            'patterns': [bulky_hydrophobic_side_chain],
            'prediction': -1
        },
        'Rule 11': {
            'patterns': [heterocycle_side_chain],
            'prediction': 1
        },
        'Rule 12': {
            'patterns': [flexible_ether_amino],
            'prediction': -1
        },
        'Rule 13': {
            'patterns': [medium_chain_acid],
            'prediction': 1
        },
        'Rule 14': {
            'patterns': [flexible_linker_aromatic_acid],
            'prediction': 1
        },
        'Rule 15 (Low)': {
            'patterns': [biaryl_carboxylic_acid],
            'prediction': -1
        },
        'Rule 15 (High)': {
            'patterns': [biaryl_flexible_linker],
            'prediction': 1
        },
    }
    
    # Compile patterns
    for rule in patterns:
        compiled_patterns = []
        for smarts in patterns[rule]['patterns']:
            compiled_patterns.append(Chem.MolFromSmarts(smarts))
        patterns[rule]['compiled_patterns'] = compiled_patterns
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(patterns))
            continue
        row = []
        for rule in patterns:
            try:
                match = False
                for pat in patterns[rule]['compiled_patterns']:
                    if mol.HasSubstructMatch(pat):
                        # Check count threshold if specified
                        if 'count_threshold' in patterns[rule] and pat in patterns[rule]['count_threshold']:
                            threshold = patterns[rule]['count_threshold'][pat]
                            matches = mol.GetSubstructMatches(pat)
                            if len(matches) >= threshold:
                                match = True
                                break
                        else:
                            match = True
                            break
                if match:
                    row.append(patterns[rule]['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=list(patterns.keys()))
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

1. **Rule 1**: **Modifiers that are amino acids with side chains containing carboxyl groups**, such as **(2S)-2-aminobutanedioic acid (aspartic acid)** and **(2S)-2-aminopentanedioic acid (glutamic acid)**, will lead to **high yield**.
   - *Rationale*: The presence of both amino and carboxyl groups enhances coordination with metal centers, improving catalyst stability and activity.

2. **Rule 2**: **Modifiers that are aliphatic carboxylic acids with terminal amino groups and chain lengths of five carbons or fewer**, like **5-aminopentanoic acid** and **4-aminobenzoic acid**, will lead to **high yield**.
   - *Rationale*: Short-chain amino acids effectively coordinate with the metal catalyst without significant steric hindrance.

3. **Rule 3**: **Modifiers that are aromatic carboxylic acids with electron-donating groups capable of metal coordination at the para position**, such as **4-hydroxybenzoic acid** and **4-aminobenzoic acid**, will lead to **high yield**.
   - *Rationale*: Electron-donating groups with coordination ability enhance interaction with the metal center.

4. **Rule 4**: **Modifiers that are nitrogen-containing heterocyclic carboxylic acids**, like **pyridine-3-carboxylic acid** and **1H-pyrazole-4-carboxylic acid**, will lead to **high yield**.
   - *Rationale*: Nitrogen atoms in heterocycles can coordinate with metals, enhancing catalyst interaction.

5. **Rule 5**: **Modifiers that are aliphatic carboxylic acids with sulfhydryl (–SH) groups**, such as **3-sulfanylpropanoic acid**, will lead to **high yield**.
   - *Rationale*: Sulfhydryl groups are strong ligands for metal coordination, improving catalyst performance.

6. **Rule 6**: **Modifiers that are aromatic carboxylic acids with electron-withdrawing groups at the para position**, like **4-nitrobenzoic acid**, will lead to **high yield**.
   - *Rationale*: Electron-withdrawing groups may enhance metal coordination under certain conditions by increasing the acidity of the carboxyl group.

7. **Rule 7**: **Modifiers that are amino acids with side chains containing coordinating heterocycles**, such as **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid (tryptophan)**, will lead to **high yield**.
   - *Rationale*: Heterocyclic side chains can coordinate with the metal catalyst, enhancing reactivity.

8. **Rule 8**: **Modifiers that are aromatic carboxylic acids with aldehyde (–CHO) groups**, such as **4-formylbenzoic acid** and **5-formyl-2-hydroxybenzoic acid**, will lead to **low yield**.
   - *Rationale*: Aldehyde groups may engage in side reactions or deactivate coordination sites, reducing catalyst efficiency.

9. **Rule 9**: **Modifiers that are long-chain aliphatic carboxylic acids (chain length greater than six carbons)**, such as **octanoic acid** and **7-hydroxyheptanoic acid**, will lead to **low yield**.
   - *Rationale*: Long aliphatic chains can cause steric hindrance and reduce solubility, impeding effective metal coordination.

10. **Rule 10**: **Modifiers that are amino acids with bulky hydrophobic side chains**, like **(2S)-2-amino-3-phenylpropanoic acid (phenylalanine)**, will lead to **low yield**.
    - *Rationale*: Bulky side chains can hinder coordination to the metal center, decreasing catalyst activity.

11. **Rule 11**: **Modifiers containing perfluorinated alkyl chains**, such as **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**, will lead to **low yield**.
    - *Rationale*: Highly electronegative fluorinated chains reduce interaction with the metal catalyst due to strong electron-withdrawing effects.

12. **Rule 12**: **Modifiers that are aromatic carboxylic acids with non-coordinating substituents at the para position**, such as **4-methylbenzoic acid**, will lead to **low yield**.
    - *Rationale*: Non-coordinating groups do not enhance metal interaction and may introduce steric hindrance.

13. **Rule 13**: **Modifiers that are biaryl carboxylic acids without flexible linkers**, like **4-pyridin-4-ylbenzoic acid**, will lead to **low yield**.
    - *Rationale*: Rigid structures may prevent effective coordination due to steric constraints between the biaryl rings and the metal center.

14. **Rule 14**: **Modifiers that are aromatic carboxylic acids connected to additional aromatic rings via flexible aliphatic linkers**, such as **5-(4-hydroxyphenyl)pentanoic acid** and **4-pyridin-4-ylbutanoic acid**, will lead to **high yield**.
    - *Rationale*: Flexible linkers allow the coordinating groups to effectively interact with the metal center, enhancing catalyst performance.

15. **Rule 15**: **Modifiers with multiple hydroxyl (–OH) groups capable of metal coordination**, like **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid**, will lead to **high yield**.
    - *Rationale*: Multiple hydroxyl groups provide additional coordination sites, stabilizing the metal catalyst.

**End of Rules**

---

**Explanation and Rationale:**

These rules are crafted to capture the relationships between the functional groups present in the molecular modifiers and their impact on the reaction yield, based on underlying physicochemical principles:

- **Coordination Ability**: Functional groups capable of coordinating with metal centers, such as amino, hydroxyl, sulfhydryl, and nitrogen-containing heterocycles, enhance catalyst stability and activity. This coordination facilitates effective electron transfer and activation of substrates.

- **Steric Effects**: Bulky substituents, long aliphatic chains, and rigid structures can introduce steric hindrance, reducing the accessibility of the modifiers to the metal site and diminishing catalyst efficiency.

- **Electronic Effects**: Electron-donating groups increase electron density and can enhance metal coordination through better orbital overlap. Conversely, electron-withdrawing groups can either enhance or inhibit coordination depending on the overall electronic environment and the metal's electronic requirements.

- **Functional Group Interactions**: The presence of reactive groups like aldehydes can lead to side reactions or deactivate coordination sites, negatively affecting yield.

- **Molecular Flexibility**: Flexible linkers in modifiers alleviate steric hindrance, allowing coordinating groups to effectively interact with the metal center, which enhances catalytic activity.

---

**Application of Rules to Dataset:**

- **High Yield Modifiers:**

  - **(2S)-2-aminopentanedioic acid**: Fits **Rule 1**.
  - **(2S)-2-aminobutanedioic acid**: Fits **Rule 1**.
  - **5-aminopentanoic acid**: Fits **Rule 2**.
  - **4-aminobenzoic acid**: Fits **Rules 2** and **3**.
  - **4-hydroxybenzoic acid**: Fits **Rule 3**.
  - **Pyridine-3-carboxylic acid**: Fits **Rule 4**.
  - **1H-pyrazole-4-carboxylic acid**: Fits **Rule 4**.
  - **4-nitrobenzoic acid**: Fits **Rule 6**.
  - **3-sulfanylpropanoic acid**: Fits **Rule 5**.
  - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid**: Fits **Rule 7**.
  - **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid**: Fits **Rule 15**.
  - **5-(4-hydroxyphenyl)pentanoic acid**: Fits **Rule 14**.
  - **4-pyridin-4-ylbutanoic acid**: Fits **Rule 14**.
  - **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid**: Fits **Rule 14**.

- **Low Yield Modifiers:**

  - **4-formylbenzoic acid**: Fits **Rule 8**.
  - **5-formyl-2-hydroxybenzoic acid**: Fits **Rule 8**.
  - **Octanoic acid**: Fits **Rule 9**.
  - **7-hydroxyheptanoic acid**: Fits **Rule 9**.
  - **7-aminoheptanoic acid**: Fits **Rule 9**.
  - **8-aminooctanoic acid**: Fits **Rule 9**.
  - **(2S)-2-amino-3-phenylpropanoic acid**: Fits **Rule 10**.
  - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**: Fits **Rule 11**.
  - **4-methylbenzoic acid**: Fits **Rule 12**.
  - **4-pyridin-4-ylbenzoic acid**: Fits **Rule 13**.
  
---

**Considerations in Rule Development:**

1. **Combination of Functional Groups**: Each rule combines multiple substructures to accurately predict the yield outcomes, aligning with the requirement to combine substructures.

2. **Physicochemical Properties**: The rules are grounded in coordination chemistry, electronic effects, steric hindrance, and molecular flexibility.

3. **Coverage and Balance**: The 15 rules provide comprehensive coverage of the dataset, balancing simple rules with broader applicability and complex rules that capture specific cases.

4. **Rule Refinement**: Overlapping or redundant rules have been refined to improve clarity and avoid redundancy, ensuring each rule adds unique value.

---

**Conclusion:**

The generated rules offer a strategic framework for predicting the impact of molecular modifiers on the yield of the radical-mediated remote δ-C(sp³)–H bond functionalization reaction. By understanding and applying these rules, researchers can design and select modifiers that are more likely to enhance reaction yields. This approach streamlines catalyst optimization and accelerates the development of more efficient catalytic systems.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,0,1
1,1,0,0,0,0,0,0,0,0,0,0,0,0,1
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,1,0,0,0,0,0,0,0,0,0,0,0,0,1
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,1
0,0,0,0,0,0,0,0,0,0,0,0,0,0,1
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,1,0,0,0,0,1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,1
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,1
0,0,0,0,0,0,0,0,0,0,0,0,0,0,1
0,1,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,1
0,0,0,0,0,0,0,0,0,0,0,0,0,0,1
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6857142857142857; Test Accuracy: 0.0
    Train Support: 0.05238095238095238; Test Support: 0.16666666666666666
    Train Confidence: 0.9074074074074074; Test Confidence: 0.5833333333333334
    Train Lift: 1.8110021786492376; Test Lift: NONE
    Train Leverage: 0.014829931972789118; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:

def rule2matrix(smiles_list):
    from rdkit import Chem
    from rdkit.Chem import AllChem
    from rdkit.Chem import rdMolDescriptors
    import pandas as pd
    
    # Disable RDKit warnings
    from rdkit import RDLogger
    RDLogger.DisableLog('rdApp.*')

    # Define SMARTS patterns for functional groups and substructures
    patterns = {
        'carboxylic_acid': '[CX3](=O)[O-,OH]',
        'amino_group': '[NX3;H2,H1,H0+]',  # Primary or secondary amines, including protonated
        'thiol_group': '[SX2H]',
        'hydroxyl_group': '[OX2H]',
        'para_hydroxyl': 'c1ccc(O)cc1C(=O)[O-,OH]',  # Phenol at para position
        'para_amino': 'c1ccc(N)cc1C(=O)[O-,OH]',  # Aniline at para position
        'para_nitro': 'c1ccc([N+](=O)[O-])cc1C(=O)[O-,OH]',  # Nitro group at para position
        'pyridine_ring': 'c1ccncc1C(=O)[O-,OH]',  # Pyridine ring connected to carboxylic acid
        'pyrazole_ring': 'c1c[nH]ncc1C(=O)[O-,OH]',  # Pyrazole ring connected to carboxylic acid
        'indole_ring': 'c1ccc2c(c1)[nH]cc2C(=O)[O-,OH]',  # Indole ring connected to carboxylic acid
        'phenylalanine_side_chain': 'CC(Cc1ccccc1)N',  # Phenylalanine side chain
        'perfluoro_alkyl_chain': 'C(F)(F)F',  # Trifluoromethyl group
        'para_methyl': 'c1ccc(C)cc1C(=O)[O-,OH]',  # Methyl group at para position
        'biaryl_no_linker': 'c1ccc(cc1)c2ccccc2C(=O)[O-,OH]',  # Biaryl connected directly
        'aromatic_linker_acid': 'c1ccc(cc1)-[CX4]-[CX4]-[CX4]-C(=O)[O-,OH]',  # Aromatic ring connected by aliphatic linker to carboxylic acid
        'aldehyde_group': '[CX3H](=O)',
        'long_aliphatic_chain': '[CH2][CH2][CH2][CH2][CH2][CH2][CH2]',  # Aliphatic chain of 7 CH2 units
        'coordinating_heterocycle': '[nH]',  # Heterocycles with coordinating N
        'multiple_hydroxyls': '[OX2H]',
    }

    # Compile SMARTS patterns
    compiled_patterns = {name: Chem.MolFromSmarts(smarts) for name, smarts in patterns.items()}

    # Define the rules
    rules = [
        {   # Rule 1
            'number': 1,
            'description': 'Modifiers that are amino acids with side chains containing carboxyl groups',
            'patterns': [
                {'pattern': 'amino_group', 'min_count': 1},
                {'pattern': 'carboxylic_acid', 'min_count': 2},  # At least two carboxylic acid groups
            ],
            'prediction': 1
        },
        {   # Rule 2
            'number': 2,
            'description': 'Modifiers that are aliphatic carboxylic acids with terminal amino groups and chain lengths of five carbons or fewer',
            'patterns': [
                {'pattern': 'amino_group'},
                {'pattern': 'carboxylic_acid'},
            ],
            'chain_length': {'max_length': 5},
            'prediction': 1
        },
        {   # Rule 3
            'number': 3,
            'description': 'Modifiers that are aromatic carboxylic acids with electron-donating groups capable of metal coordination at the para position',
            'patterns': [
                {'pattern': 'aromatic_carboxylic_acid'},
                {'pattern': 'para_hydroxyl'},
                {'pattern': 'para_amino'},
            ],
            'prediction': 1
        },
        {   # Rule 4
            'number': 4,
            'description': 'Modifiers that are nitrogen-containing heterocyclic carboxylic acids',
            'patterns': [
                {'pattern': 'carboxylic_acid'},
                {'pattern': 'pyridine_ring'},
                {'pattern': 'pyrazole_ring'},
            ],
            'prediction': 1
        },
        {   # Rule 5
            'number': 5,
            'description': 'Modifiers that are aliphatic carboxylic acids with sulfhydryl (–SH) groups',
            'patterns': [
                {'pattern': 'carboxylic_acid'},
                {'pattern': 'thiol_group'},
            ],
            'prediction': 1
        },
        {   # Rule 6
            'number': 6,
            'description': 'Modifiers that are aromatic carboxylic acids with electron-withdrawing groups at the para position',
            'patterns': [
                {'pattern': 'aromatic_carboxylic_acid'},
                {'pattern': 'para_nitro'},
            ],
            'prediction': 1
        },
        {   # Rule 7
            'number': 7,
            'description': 'Modifiers that are amino acids with side chains containing coordinating heterocycles',
            'patterns': [
                {'pattern': 'amino_group'},
                {'pattern': 'carboxylic_acid'},
                {'pattern': 'coordinating_heterocycle'},
            ],
            'prediction': 1
        },
        {   # Rule 8
            'number': 8,
            'description': 'Modifiers that are aromatic carboxylic acids with aldehyde (–CHO) groups',
            'patterns': [
                {'pattern': 'aromatic_carboxylic_acid'},
                {'pattern': 'aldehyde_group'},
            ],
            'prediction': -1
        },
        {   # Rule 9
            'number': 9,
            'description': 'Modifiers that are long-chain aliphatic carboxylic acids (chain length greater than six carbons)',
            'patterns': [
                {'pattern': 'carboxylic_acid'},
                {'pattern': 'long_aliphatic_chain'},
            ],
            'prediction': -1
        },
        {   # Rule 10
            'number': 10,
            'description': 'Modifiers that are amino acids with bulky hydrophobic side chains',
            'patterns': [
                {'pattern': 'amino_group'},
                {'pattern': 'carboxylic_acid'},
                {'pattern': 'phenylalanine_side_chain'},
            ],
            'prediction': -1
        },
        {   # Rule 11
            'number': 11,
            'description': 'Modifiers containing perfluorinated alkyl chains',
            'patterns': [
                {'pattern': 'perfluoro_alkyl_chain'},
            ],
            'prediction': -1
        },
        {   # Rule 12
            'number': 12,
            'description': 'Modifiers that are aromatic carboxylic acids with non-coordinating substituents at the para position',
            'patterns': [
                {'pattern': 'aromatic_carboxylic_acid'},
                {'pattern': 'para_methyl'},
            ],
            'prediction': -1
        },
        {   # Rule 13
            'number': 13,
            'description': 'Modifiers that are biaryl carboxylic acids without flexible linkers',
            'patterns': [
                {'pattern': 'biaryl_no_linker'},
            ],
            'prediction': -1
        },
        {   # Rule 14
            'number': 14,
            'description': 'Modifiers that are aromatic carboxylic acids connected to additional aromatic rings via flexible aliphatic linkers',
            'patterns': [
                {'pattern': 'aromatic_linker_acid'},
            ],
            'prediction': 1
        },
        {   # Rule 15
            'number': 15,
            'description': 'Modifiers with multiple hydroxyl (–OH) groups capable of metal coordination',
            'patterns': [
                {'pattern': 'carboxylic_acid'},
                {'pattern': 'multiple_hydroxyls', 'min_count': 2},
            ],
            'prediction': 1
        },
    ]

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check required patterns
                for pat_dict in rule['patterns']:
                    smarts_name = pat_dict['pattern']
                    pattern = compiled_patterns[smarts_name]
                    if pattern is None:
                        match = False
                        break
                    matches = mol.GetSubstructMatches(pattern)
                    count = len(matches)
                    min_count = pat_dict.get('min_count', 1)
                    if count < min_count:
                        match = False
                        break
                # If patterns match, check chain length conditions if any
                if match and 'chain_length' in rule:
                    chain_length_match = False
                    max_length = rule['chain_length'].get('max_length', None)
                    min_length = rule['chain_length'].get('min_length', None)
                    # For Rule 2, find shortest path between amino group and carboxylic acid
                    amino_matches = mol.GetSubstructMatches(compiled_patterns['amino_group'])
                    carboxy_matches = mol.GetSubstructMatches(compiled_patterns['carboxylic_acid'])
                    for amino_match in amino_matches:
                        amino_atom_idx = amino_match[0]
                        for carboxy_match in carboxy_matches:
                            # Carboxylic acid carbon is the carbonyl carbon
                            carboxy_atom_idx = carboxy_match[0]
                            path = Chem.rdmolops.GetShortestPath(mol, amino_atom_idx, carboxy_atom_idx)
                            # Count the number of carbon atoms in the path, excluding the terminal atoms
                            chain_length = sum(1 for idx in path[1:-1] if mol.GetAtomWithIdx(idx).GetAtomicNum() == 6)
                            if max_length is not None and chain_length <= max_length:
                                chain_length_match = True
                                break
                            if min_length is not None and chain_length >= min_length:
                                chain_length_match = True
                                break
                        if chain_length_match:
                            break
                    if not chain_length_match:
                        match = False
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0 and continue
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f"Rule {rule['number']}" for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

1. **Rule 1**: **Modifiers that are small aliphatic amino acids with an amino group and two carboxylic acid groups** will lead to **high yield**.
   - *Examples*: **(2S)-2-aminobutanedioic acid** (Entry 2), **(2S)-2-aminopentanedioic acid** (Entry 0).
   - *Rationale*: These molecules can act as bidentate ligands, chelating the metal center and enhancing catalyst activity through strong coordination.

2. **Rule 2**: **Modifiers that are aromatic carboxylic acids with amino or hydroxyl groups in the para or meta positions** will lead to **high yield**.
   - *Examples*: **4-aminobenzoic acid** (Entry 4), **5-(4-hydroxyphenyl)pentanoic acid** (Entry 7).
   - *Rationale*: Electron-donating groups increase electron density on the aromatic ring, enhancing coordination with the metal center. Flexible linkers (as in Entry 7) allow better interaction with the catalyst.

3. **Rule 3**: **Modifiers that are nitrogen-containing heterocyclic carboxylic acids** will lead to **high yield**.
   - *Examples*: **Pyridine-3-carboxylic acid** (Entry 21), **1H-pyrazole-4-carboxylic acid** (Entry 15), **2-oxo-1H-pyridine-4-carboxylic acid** (Entry 8).
   - *Rationale*: Nitrogen heterocycles can coordinate through nitrogen lone pairs, stabilizing the metal complex and enhancing catalyst performance.

4. **Rule 4**: **Modifiers that are amino acids with aromatic side chains containing additional heteroatoms (e.g., indole in tryptophan)** will lead to **high yield**.
   - *Example*: **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (Entry 14).
   - *Rationale*: Aromatic side chains with heteroatoms can provide extra coordination sites, improving interaction with the metal catalyst.

5. **Rule 5**: **Modifiers that have a flexible aliphatic linker (3 to 5 carbons) connecting an aromatic ring to a carboxylic acid** will lead to **high yield**.
   - *Examples*: **5-(4-hydroxyphenyl)pentanoic acid** (Entry 7), **4-pyridin-4-ylbutanoic acid** (Entry 24), **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid** (Entry 25).
   - *Rationale*: The flexible linker allows optimal orientation of the coordinating groups with the metal center, enhancing catalyst activity.

6. **Rule 6**: **Modifiers that are aromatic carboxylic acids with electron-withdrawing groups (e.g., formyl) at the para position** will lead to **low yield**, with some exceptions.
   - *Examples*: **4-formylbenzoic acid** (Entry 19) leads to **low yield**; however, **4-nitrobenzoic acid** (Entry 20) leads to **high yield**.
   - *Rationale*: Electron-withdrawing groups typically decrease electron density, reducing coordination ability. Exceptions suggest other factors may influence the outcome.

7. **Rule 7**: **Modifiers that are long-chain aliphatic carboxylic acids (chain length ≥ 7 carbons) without additional coordinating groups** will lead to **low yield**.
   - *Examples*: **7-hydroxyheptanoic acid** (Entry 29), **7-aminoheptanoic acid** (Entry 31), **8-aminooctanoic acid** (Entry 34).
   - *Rationale*: Longer chains increase steric hindrance and decrease solubility, hindering effective coordination with the metal center.

8. **Rule 8**: **Modifiers with rigid biaryl structures (aromatic rings connected without flexible linkers)** will lead to **low yield**.
   - *Example*: **4-pyridin-4-ylbenzoic acid** (Entry 11).
   - *Rationale*: Rigid structures may prevent effective coordination due to steric constraints between rings and the metal center.

9. **Rule 9**: **Modifiers that are aromatic carboxylic acids with small non-coordinating substituents at the para position (e.g., methyl groups)** will lead to **low yield**.
   - *Example*: **4-methylbenzoic acid** (Entry 22).
   - *Rationale*: Non-coordinating groups do not enhance metal binding and may not favorably affect electronic properties for coordination.

10. **Rule 10**: **Modifiers with multiple ether linkages in aliphatic chains leading to a carboxylic acid** will lead to **low yield**.
    - *Examples*: **2-[2-(2-methoxyethoxy)ethoxy]acetic acid** (Entry 10), **3-[2-(2-aminoethoxy)ethoxy]propanoic acid** (Entry 32).
    - *Rationale*: Ether oxygens may not facilitate effective coordination due to increased flexibility and potential solubility issues.

11. **Rule 11**: **Modifiers with perfluorinated alkyl chains** will lead to **low yield**.
    - *Example*: **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid** (Entry 13).
    - *Rationale*: Highly electronegative fluorine atoms withdraw electron density, reducing the coordinating ability of functional groups.

12. **Rule 12**: **Modifiers with thiol (–SH) groups in small aliphatic carboxylic acids** will lead to **high yield**; however, **thiol groups in aromatic carboxylic acids may lead to low yield**.
    - *Examples*: **3-sulfanylpropanoic acid** (Entry 17) leads to **high yield**; **4-sulfanylbenzoic acid** (Entry 9) leads to **low yield**.
    - *Rationale*: In aliphatic contexts, thiol groups can coordinate effectively with metals. In aromatic systems, steric hindrance or propensity for oxidation may reduce effectiveness.

13. **Rule 13**: **Modifiers that are amino acids with aliphatic side chains lacking additional coordinating groups** will lead to **low yield**.
    - *Example*: **(2S)-6-acetamido-2-aminohexanoic acid** (Entry 33).
    - *Rationale*: Without functional groups that can coordinate well with metal centers, these modifiers have limited impact on catalyst performance.

14. **Rule 14**: **Modifiers that are aromatic carboxylic acids with amide-linked substituents** will lead to **low yield**.
    - *Example*: **2-[(4-hydroxybenzoyl)amino]acetic acid** (Entry 26).
    - *Rationale*: Amide bonds can reduce the availability of lone pairs for coordination and introduce steric hindrance, hindering effective interaction with the metal catalyst.

15. **Rule 15**: **Modifiers that are aliphatic carboxylic acids with chain lengths of 3 to 8 carbons without additional functional groups** will lead to **variable yield** that cannot be predicted solely by chain length.
    - *Examples*: **Octanoic acid** (Entry 5) leads to **high yield**; **heptanoic acids** with substitutions at the terminal positions (Entries 29, 31) lead to **low yield**.
    - *Rationale*: Chain length alone is insufficient to predict yield. Other factors, such as the presence of functional groups and overall molecular interactions, play significant roles.

**End of Rules**

---

**Explanation and Rationale:**

The refined rules above result from a detailed analysis of the dataset, aiming to accurately predict the impact of modifier structures on the reaction yield. They consider the combination of substructures, underlying physicochemical properties, and observed exceptions to provide reliable guidelines.

---

**Detailed Analysis:**

1. **Rule 1** emphasizes the importance of chelating ligands in small aliphatic amino acids, which can form stable complexes with metal centers, enhancing catalysis.

2. **Rule 2** focuses on electron-donating substituents on aromatic rings that increase coordination with metals, particularly when positioned to optimize interaction.

3. **Rule 3** highlights the effectiveness of nitrogen heterocycles in coordination chemistry due to their lone pairs, aiding in catalyst stabilization.

4. **Rule 4** recognizes the role of heteroatoms in aromatic side chains of amino acids, which can provide additional coordination sites and enhance catalyst performance.

5. **Rule 5** addresses the benefit of molecular flexibility, where linkers allow for better orientation and interaction with the metal center.

6. **Rule 6** acknowledges that while electron-withdrawing groups typically reduce yield, exceptions exist (e.g., **4-nitrobenzoic acid**) indicating that other molecular features may counteract the electron-withdrawing effects.

7. **Rule 7** correlates longer aliphatic chains without coordinating groups with lower yields due to steric hindrance and decreased solubility, which impede effective coordination.

8. **Rule 8** specifies that rigid structures can hinder effective coordination, reducing the catalyst's efficiency due to steric constraints.

9. **Rule 9** points out that non-coordinating substituents do not contribute positively to metal coordination and may not enhance catalyst performance.

10. **Rule 10** addresses the issue of flexibility and coordination in molecules with ether linkages, where increased flexibility may reduce the stability of metal complexes.

11. **Rule 11** underlines the negative impact of highly electronegative substituents like fluorine, which withdraw electron density and weaken coordination capability.

12. **Rule 12** distinguishes between the effectiveness of thiol groups in different contexts, noting that small aliphatic thiols enhance yield, whereas aromatic thiols may lead to lower yields due to steric or electronic factors.

13. **Rule 13** explains that amino acids lacking additional coordinating groups have minimal impact on catalyst activity and thus result in lower yields.

14. **Rule 14** highlights that amide-linked substituents can introduce steric hindrance and reduce the availability of coordinating groups, leading to lower yields.

15. **Rule 15** acknowledges that chain length alone does not determine yield and that other molecular features must be considered for accurate predictions.

---

**Conclusion:**

By carefully analyzing the dataset and considering the physicochemical properties of the modifiers, the refined set of rules provides a more accurate and predictive framework for understanding how different molecular structures influence reaction yield. The rules balance simplicity and complexity, covering broad trends while accounting for observed exceptions.

---

**Application:**

These rules can serve as a valuable tool for chemists in selecting or designing molecular modifiers to optimize reaction yields. They provide guidance on which structural features to incorporate or avoid, facilitating more efficient catalyst development.

---

**Final Note:**

Chemical interactions are multifaceted, and while these rules offer a solid foundation for prediction, experimental validation remains essential. Ongoing analysis and refinement of rules based on new data will continue to enhance our understanding of catalytic systems.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.5714285714285714; Test Accuracy: 1.0
    Train Support: 0.06666666666666667; Test Support: 0.0
    Train Confidence: 0.8181818181818182; Test Confidence: 0.5
    Train Lift: 1.6082392552980789; Test Lift: NONE
    Train Leverage: 0.005986394557823128; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns and associated rules
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are small aliphatic amino acids with an amino group and two carboxylic acid groups (high yield).',
            'patterns': [
                '[NX3H2]',  # Primary amino group (-NH2)
                '[CX3](=O)[OX1H0-,OX2H1]',  # Carboxylic acid group (-COOH or -COO-)
            ],
            'count_thresholds': {'[CX3](=O)[OX1H0-,OX2H1]': 2},  # At least two carboxylic acid groups
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers that are aromatic carboxylic acids with amino or hydroxyl groups in the para or meta positions (high yield).',
            'patterns': [
                '[c][c](\[NX3H2])[c][c][c][CX3](=O)[OX1H0-,OX2H1]',  # Para amino group
                '[c][c](\[OX2H])[c][c][c][CX3](=O)[OX1H0-,OX2H1]',    # Para hydroxyl group
                '[c][c](\[NX3H2])[c][c][c][CX3](=O)[OX1H0-,OX2H1]',  # Meta amino group
                '[c][c](\[OX2H])[c][c][c][CX3](=O)[OX1H0-,OX2H1]',    # Meta hydroxyl group
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers that are nitrogen-containing heterocyclic carboxylic acids (high yield).',
            'patterns': [
                '[n][c][c][c][c][CX3](=O)[OX1H0-,OX2H1]',  # Pyridine carboxylic acid
                '[n][n][c][c][CX3](=O)[OX1H0-,OX2H1]',       # Pyrazole carboxylic acid
                '[n][c](=O)[c][c][CX3](=O)[OX1H0-,OX2H1]',    # Pyridone carboxylic acid
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers that are amino acids with aromatic side chains containing additional heteroatoms (e.g., indole) (high yield).',
            'patterns': [
                '[NX3H2][CX4][CX3](=O)[OX1H0-,OX2H1]',  # Amino acid backbone
                '[c]1[c][n][c][c][c]1',  # Indole ring
            ],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers that have a flexible aliphatic linker (3 to 5 carbons) connecting an aromatic ring to a carboxylic acid (high yield).',
            'patterns': [
                '[c][C][C][C][CX3](=O)[OX1H0-,OX2H1]',  # 3-carbon linker
                '[c][C][C][C][C][CX3](=O)[OX1H0-,OX2H1]',  # 4-carbon linker
                '[c][C][C][C][C][C][CX3](=O)[OX1H0-,OX2H1]',  # 5-carbon linker
            ],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers that are aromatic carboxylic acids with electron-withdrawing groups at the para position (low yield, some exceptions).',
            'patterns': [
                '[c][c](\[CX3](=O)[CX3](=O)[OX1H0-,OX2H1])[c][c][c][CX3](=O)[OX1H0-,OX2H1]',  # Para formyl group
            ],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Modifiers that are long-chain aliphatic carboxylic acids (chain length ≥ 7 carbons) without additional coordinating groups (low yield).',
            'patterns': [
                '[C][C][C][C][C][C][C][CX3](=O)[OX1H0-,OX2H1]',  # Chain of 7 carbons
            ],
            'exclude_patterns': [
                '[!#6]',  # Exclude molecules with other heteroatoms
            ],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Modifiers with rigid biaryl structures (aromatic rings connected without flexible linkers) (low yield).',
            'patterns': [
                '[c][c][c][c][c][c][c][c][c]',  # Biaryl without linker
            ],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers that are aromatic carboxylic acids with small non-coordinating substituents at the para position (e.g., methyl groups) (low yield).',
            'patterns': [
                '[c][c](\[CH3])[c][c][c][CX3](=O)[OX1H0-,OX2H1]',  # Para methyl group
            ],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers with multiple ether linkages in aliphatic chains leading to a carboxylic acid (low yield).',
            'patterns': [
                '[#6][OX2][#6][OX2][#6][CX3](=O)[OX1H0-,OX2H1]',  # Multiple ethers
            ],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Modifiers with perfluorinated alkyl chains (low yield).',
            'patterns': [
                '[CF3][CF2][CF2][CX3](=O)[OX1H0-,OX2H1]',  # Perfluoroalkyl chain
            ],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'Modifiers with thiol groups in small aliphatic carboxylic acids (high yield); thiol groups in aromatic carboxylic acids may lead to low yield.',
            'patterns': [
                '[SX2H][C][CX3](=O)[OX1H0-,OX2H1]',  # Aliphatic thiol with carboxylic acid
            ],
            'exclude_patterns': [
                '[c][SX2H]',  # Exclude aromatic thiols
            ],
            'prediction': 1
        },
        {
            'number': 13,
            'description': 'Modifiers that are amino acids with aliphatic side chains lacking additional coordinating groups (low yield).',
            'patterns': [
                '[NX3H2][CX4][CX3](=O)[OX1H0-,OX2H1]',  # Amino acid backbone
                '[CX4][CX4][CX3](=O)[OX1H0-,OX2H1]',     # Aliphatic side chain
            ],
            'exclude_patterns': [
                '[n,o,s]',  # Exclude heteroatoms in side chain
            ],
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'Modifiers that are aromatic carboxylic acids with amide-linked substituents (low yield).',
            'patterns': [
                '[c][CX3](=O)[NX3][CX3](=O)[OX1H0-,OX2H1]',  # Amide linked to aromatic ring
            ],
            'prediction': -1
        },
        {
            'number': 15,
            'description': 'Modifiers that are aliphatic carboxylic acids with chain lengths of 3 to 8 carbons without additional functional groups (variable yield).',
            'patterns': [
                '[C][C][C][CX3](=O)[OX1H0-,OX2H1]',     # Chain of 3 carbons
                '[C][C][C][C][CX3](=O)[OX1H0-,OX2H1]',   # Chain of 4 carbons
                '[C][C][C][C][C][CX3](=O)[OX1H0-,OX2H1]', # Chain of 5 carbons
                '[C][C][C][C][C][C][CX3](=O)[OX1H0-,OX2H1]', # Chain of 6 carbons
                '[C][C][C][C][C][C][C][CX3](=O)[OX1H0-,OX2H1]', # Chain of 7 carbons
                '[C][C][C][C][C][C][C][C][CX3](=O)[OX1H0-,OX2H1]', # Chain of 8 carbons
            ],
            'prediction': 0  # Variable yield, cannot predict
        },
    ]

    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for smarts in rule.get('patterns', []):
            mol = Chem.MolFromSmarts(smarts)
            if mol is not None:
                compiled_patterns.append(mol)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for smarts in rule['exclude_patterns']:
                mol = Chem.MolFromSmarts(smarts)
                if mol is not None:
                    compiled_excludes.append(mol)
            rule['compiled_exclude_patterns'] = compiled_excludes
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for pat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for pat in rule['compiled_patterns']:
                    matches = mol.GetSubstructMatches(pat)
                    if not matches:
                        match = False
                        break
                    # Check count thresholds if any
                    if 'count_thresholds' in rule:
                        smarts = Chem.MolToSmarts(pat)
                        threshold = rule['count_thresholds'].get(smarts, 1)
                        if len(matches) < threshold:
                            match = False
                            break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    column_names = [f'Rule {rule["number"]}' for rule in rules]
    df = pd.DataFrame(results, columns=column_names)
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

1. **Rule 1**: **Modifiers that are small aliphatic carboxylic acids (chain length ≤ 5 carbons) containing an amino group (-NH₂)** will lead to **high yield**.
   - *Examples*: **(2S)-2-aminobutanedioic acid** (Entry 2), **(2S)-2-aminopentanedioic acid** (Entry 0), **5-aminopentanoic acid** (Entry 3).
   - *Rationale*: The presence of amino and carboxyl groups on short chains facilitates chelation with the metal center, enhancing catalytic activity.

2. **Rule 2**: **Modifiers that are aromatic carboxylic acids with an amino (-NH₂) or hydroxyl (-OH) group at the para position** will lead to **high yield**.
   - *Examples*: **4-aminobenzoic acid** (Entry 4), **5-(4-hydroxyphenyl)pentanoic acid** (Entry 7), **4-nitrobenzoic acid** (Entry 20)\*.
   - *Exception*: While **4-nitrobenzoic acid** contains an electron-withdrawing group, it still leads to high yield, indicating other factors may contribute.
   - *Rationale*: Electron-donating groups increase electron density on the aromatic ring, enhancing coordination with the metal catalyst.

3. **Rule 3**: **Modifiers containing nitrogen heterocycles with a carboxylic acid group** will lead to **high yield**.
   - *Examples*: **Pyridine-3-carboxylic acid** (Entry 21), **1H-pyrazole-4-carboxylic acid** (Entry 15), **2-oxo-1H-pyridine-4-carboxylic acid** (Entry 8), **4-pyridin-4-ylbutanoic acid** (Entry 24).
   - *Rationale*: Nitrogen atoms in heterocycles can coordinate with metal centers, providing additional binding sites that enhance catalyst performance.

4. **Rule 4**: **Modifiers that are amino acids with aromatic or heteroaromatic side chains containing heteroatoms** will lead to **high yield**.
   - *Examples*: **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (Entry 14).
   - *Counter-Example*: **(2S)-2-amino-3-phenylpropanoic acid** (Entry 12) leads to **low yield**, suggesting the absence of heteroatoms in the side chain reduces effectiveness.
   - *Rationale*: Heteroatoms in side chains offer extra coordination points, improving interaction with the metal catalyst.

5. **Rule 5**: **Modifiers that are aliphatic carboxylic acids with chain lengths greater than 6 carbons without additional coordinating functional groups** will lead to **low yield**.
   - *Examples*: **7-aminoheptanoic acid** (Entry 31), **8-aminooctanoic acid** (Entry 34), **7-hydroxyheptanoic acid** (Entry 29).
   - *Exception*: **Octanoic acid** (Entry 5) leads to **high yield**, indicating other factors like solubility may influence the outcome.
   - *Rationale*: Longer chains may cause steric hindrance and reduce solubility, impeding effective coordination with the catalyst.

6. **Rule 6**: **Modifiers with ether linkages in flexible aliphatic chains terminating with a carboxylic acid group** will lead to **low yield**.
   - *Examples*: **2-[2-(2-methoxyethoxy)ethoxy]acetic acid** (Entry 10), **3-[2-(2-aminoethoxy)ethoxy]propanoic acid** (Entry 32).
   - *Rationale*: Ether linkages increase flexibility and may reduce effective coordination due to conformational entropy; ether oxygen atoms may not coordinate strongly with metals.

7. **Rule 7**: **Modifiers that are aromatic carboxylic acids with electron-withdrawing groups (-CHO, -CF₃) at the para position** will lead to **low yield**.
   - *Examples*: **4-formylbenzoic acid** (Entry 19), **5-formyl-2-hydroxybenzoic acid** (Entry 18).
   - *Exception*: **4-nitrobenzoic acid** (Entry 20) leads to **high yield**, suggesting nitro groups may interact differently.
   - *Rationale*: Electron-withdrawing groups decrease electron density, reducing coordination ability with the metal center.

8. **Rule 8**: **Modifiers with perfluorinated alkyl chains** will lead to **low yield**.
   - *Example*: **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid** (Entry 13).
   - *Rationale*: Highly electronegative fluorine atoms withdraw electron density, weakening coordination with the metal catalyst.

9. **Rule 9**: **Modifiers with thiol (-SH) groups on small aliphatic chains** will lead to **high yield**.
   - *Example*: **3-sulfanylpropanoic acid** (Entry 17).
   - *Rationale*: Thiol groups can strongly coordinate with metals, enhancing catalyst activity.

10. **Rule 10**: **Modifiers with thiol (-SH) groups attached directly to aromatic rings** will lead to **low yield**.
    - *Example*: **4-sulfanylbenzoic acid** (Entry 9).
    - *Rationale*: In aromatic systems, thiol groups may be less available for coordination due to resonance stabilization or steric factors.

11. **Rule 11**: **Modifiers with bulky substituents or sterically hindered functional groups near the coordinating sites** will lead to **low yield**.
    - *Examples*: **4-pyridin-4-ylbenzoic acid** (Entry 11), **(2S)-6-acetamido-2-aminohexanoic acid** (Entry 33).
    - *Rationale*: Steric hindrance can impede effective coordination to the metal center.

12. **Rule 12**: **Modifiers that are amino acids with non-polar aliphatic side chains lacking additional coordinating groups** will lead to **low yield**.
    - *Example*: **(2S)-6-acetamido-2-aminohexanoic acid** (Entry 33).
    - *Rationale*: Absence of side-chain functional groups capable of coordination limits interaction with the metal catalyst.

13. **Rule 13**: **Modifiers that are aromatic carboxylic acids with methoxy (-OCH₃) groups on the ring** will lead to **variable yield** depending on additional functional groups.
    - *Example*: **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid** (Entry 25) leads to **high yield**; **2-[(4-hydroxybenzoyl)amino]acetic acid** (Entry 26) leads to **low yield**.
    - *Rationale*: Methoxy groups can be electron-donating, but their effect depends on position and molecular context.

14. **Rule 14**: **Modifiers containing keto groups adjacent to carboxylic acid groups** will lead to **low yield**.
    - *Example*: **4-oxoheptanedioic acid** (Entry 27).
    - *Rationale*: Ketone groups may interfere with coordination or alter the electronic structure unfavorably for metal interaction.

15. **Rule 15**: **Modifiers that are small aliphatic carboxylic acids without additional coordinating functional groups** will have **variable yield**.
    - *Example*: **Octanoic acid** (Entry 5) leads to **high yield**.
    - *Rationale*: While lacking coordinating groups, factors such as solubility and chain length may influence the ability to interact with the catalyst.

**End of Rules**

---

**Explanation and Rationale:**

The above rules are crafted based on the analysis of the provided dataset and aim to showcase how combinations of functional groups influence the yield of the reaction.

- **Combination of Sub-Structures**: Each rule combines multiple functional groups and structural features, such as amino groups on aliphatic chains, aromatic rings with specific substituents, and the presence of heterocycles.

- **Physicochemical Considerations**: The rules consider electronic effects (electron-donating vs. electron-withdrawing groups), coordination ability, steric hindrance, and flexibility—all of which are critical factors in metal-catalyzed reactions.

- **Predictive Clarity**: Each rule clearly states whether modifiers fitting the description will lead to high or low yield, providing guidance for predicting the outcome based on molecular structure.

- **Coverage Balance**: The rules cover a broad range of the dataset, balancing between simpler rules with higher coverage (e.g., Rules 1-3) and more complex, lower-coverage rules (e.g., Rules 13-15).

- **Number of Rules**: Fifteen rules have been provided, meeting the requirement of generating between 5 and 15 rules.

---

**Detailed Analysis:**

- **High Yield Modifiers**:
  - **Rules 1-4, 9** identify modifiers with functional groups that enhance coordination with the metal center. The presence of amino, hydroxyl, thiol groups, and nitrogen heterocycles increases electron density and provides lone pairs for effective metal coordination.
  - **Flexibility** in molecular structure (Rule 2) allows optimal orientation of functional groups for coordination.
  
- **Low Yield Modifiers**:
  - **Rules 5-8, 10-12, 14** highlight modifiers with features that decrease coordination ability, such as electron-withdrawing groups, steric hindrance from bulky substituents, high flexibility due to ether linkages, and resonance delocalization in aromatic thiols.
  - **Steric Effects** (Rules 11, 12) can prevent effective coordination due to increased size or lack of coordinating functional groups.
  
- **Variable Yield Modifiers**:
  - **Rule 13** acknowledges that modifiers with methoxy groups on aromatic rings do not have a consistent effect on yield, indicating that additional factors influence the outcome.
  - **Rule 15** suggests that small aliphatic carboxylic acids without additional functional groups may have variable yields depending on other properties like solubility.

---

**Conclusion:**

By focusing on the combination of functional groups and their physicochemical properties, these rules provide a framework for predicting the impact of molecular modifiers on the reaction yield. Modifiers that enhance coordination to the metal center through suitable functional groups and structural features tend to result in higher yields. Conversely, modifiers that hinder coordination due to electronic effects, steric hindrance, or lack of coordinating groups tend to result in lower yields.

---

**Final Note:**

Chemical systems are complex, and while these rules offer valuable insights, they are based on the current dataset and observed trends. Experimental validation and further data collection are essential to refine these rules and enhance their predictive power for broader applications.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6285714285714286; Test Accuracy: 0.0
    Train Support: 0.14285714285714285; Test Support: 0.0
    Train Confidence: 0.8333333333333334; Test Confidence: 0.5
    Train Lift: 1.715686274509804; Test Lift: NONE
    Train Leverage: 0.05959183673469387; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and substructures
    # Rule 1: Small aliphatic carboxylic acids (chain length ≤ 5 carbons) containing an amino group (-NH2)
    rule1_patterns = {
        'primary_aliphatic_amine': '[NX3;H2][CX4]',  # Primary aliphatic amine (-NH2)
        'carboxylic_acid': '[CX3](=O)[OX2H1]',       # Carboxylic acid group (-COOH)
    }

    # Rule 2: Aromatic carboxylic acids with an amino (-NH2) or hydroxyl (-OH) group at the para position
    rule2_patterns = {
        'aromatic_carboxylic_acid': 'c1ccc(cc1)C(=O)[O,H]',   # Aromatic carboxylic acid
        'para_amino_hydroxyl': 'c1cc([NX3;H2,H1])[cH][cH]c1', # Para amino or hydroxyl group
    }

    # Rule 3: Nitrogen heterocycles with a carboxylic acid group
    rule3_patterns = {
        'nitrogen_heterocycle': '[n;R]',               # Nitrogen in a ring (heterocycle)
        'carboxylic_acid': '[CX3](=O)[OX2H1]',        # Carboxylic acid group (-COOH)
    }

    # Rule 4: Amino acids with aromatic or heteroaromatic side chains containing heteroatoms
    rule4_patterns = {
        'amino_acid': '[NX3;H2][CX4H]([*])[CX3](=O)[OX2H1]',  # General amino acid structure
        'aromatic_heteroatom': '[c,n,o,s]',                   # Aromatic ring with heteroatoms
    }

    # Rule 5: Aliphatic carboxylic acids with chain lengths >6 carbons without additional coordinating groups
    rule5_patterns = {
        'long_aliphatic_chain': '[CH2]' * 6,          # Chain of at least 6 carbons
        'carboxylic_acid': '[CX3](=O)[OX2H1]',       # Carboxylic acid group (-COOH)
    }

    # Rule 6: Ether linkages in flexible aliphatic chains terminating with a carboxylic acid group
    rule6_patterns = {
        'ether_linkage': '[#6][OX2][#6]',            # Ether linkage (-O-)
        'carboxylic_acid': '[CX3](=O)[OX2H1]',      # Carboxylic acid group (-COOH)
    }

    # Rule 7: Aromatic carboxylic acids with electron-withdrawing groups (-CHO, -CF3) at the para position
    rule7_patterns = {
        'aromatic_carboxylic_acid': 'c1ccc(cc1)C(=O)[O,H]',        # Aromatic carboxylic acid
        'para_electron_withdrawing': 'c1cc([CX3](=O)[H,C,F])c[cH]c1',  # Para EWG
    }

    # Rule 8: Perfluorinated alkyl chains
    rule8_patterns = {
        'perfluoro_alkyl': '[CX4]([F])[F]',         # Carbon attached to fluorines
    }

    # Rule 9: Thiol (-SH) groups on small aliphatic chains
    rule9_patterns = {
        'thiol_group': '[SX2H]',                    # Thiol group (-SH)
        'small_aliphatic_chain': '[CX4][CX4]',      # Small aliphatic chain
    }

    # Rule 10: Thiol (-SH) groups attached directly to aromatic rings
    rule10_patterns = {
        'aromatic_thiol': '[c][SX2H]',              # Thiol group attached to aromatic ring
    }

    # Rule 11: Bulky substituents or sterically hindered functional groups near coordinating sites
    rule11_patterns = {
        'bulky_substituents': '[CX4]([CX4])([CX4])[CX4]',  # Tertiary carbon
    }

    # Rule 12: Amino acids with non-polar aliphatic side chains lacking additional coordinating groups
    rule12_patterns = {
        'amino_acid': '[NX3;H2][CX4H]([*])[CX3](=O)[OX2H1]',  # General amino acid structure
        'non_polar_side_chain': '[CX4][CX4][CX4]',            # Aliphatic side chain
    }

    # Rule 13: Aromatic carboxylic acids with methoxy (-OCH3) groups on the ring
    rule13_patterns = {
        'aromatic_carboxylic_acid': 'c1ccc(cc1)C(=O)[O,H]',   # Aromatic carboxylic acid
        'methoxy_group': 'c[OX2][CH3]',                       # Methoxy group on aromatic ring
    }

    # Rule 14: Keto groups adjacent to carboxylic acid groups
    rule14_patterns = {
        'keto_group_adjacent': '[CX3](=O)[CX3](=O)[OX2H1]',   # Ketone adjacent to carboxylic acid
    }

    # Rule 15: Small aliphatic carboxylic acids without additional coordinating functional groups
    rule15_patterns = {
        'small_carboxylic_acid': '[CX3](=O)[OX2H1]',          # Carboxylic acid group
    }

    # List of all rules with their patterns and predictions
    rules = [
        {'number': 1, 'patterns': rule1_patterns, 'prediction': 1},
        {'number': 2, 'patterns': rule2_patterns, 'prediction': 1},
        {'number': 3, 'patterns': rule3_patterns, 'prediction': 1},
        {'number': 4, 'patterns': rule4_patterns, 'prediction': 1},
        {'number': 5, 'patterns': rule5_patterns, 'prediction': -1},
        {'number': 6, 'patterns': rule6_patterns, 'prediction': -1},
        {'number': 7, 'patterns': rule7_patterns, 'prediction': -1},
        {'number': 8, 'patterns': rule8_patterns, 'prediction': -1},
        {'number': 9, 'patterns': rule9_patterns, 'prediction': 1},
        {'number': 10, 'patterns': rule10_patterns, 'prediction': -1},
        {'number': 11, 'patterns': rule11_patterns, 'prediction': -1},
        {'number': 12, 'patterns': rule12_patterns, 'prediction': -1},
        {'number': 13, 'patterns': rule13_patterns, 'prediction': None},  # Variable yield
        {'number': 14, 'patterns': rule14_patterns, 'prediction': -1},
        {'number': 15, 'patterns': rule15_patterns, 'prediction': None},  # Variable yield
    ]

    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = {}
        for key, pattern in rule['patterns'].items():
            try:
                compiled_patterns[key] = Chem.MolFromSmarts(pattern)
            except Exception:
                compiled_patterns[key] = None
        rule['compiled_patterns'] = compiled_patterns

    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check each pattern in the rule
                for key, pat in rule['compiled_patterns'].items():
                    if pat is None:
                        match = False
                        break
                    matches = mol.GetSubstructMatches(pat)
                    if not matches:
                        match = False
                        break
                    # Special checks for certain rules
                    if rule['number'] == 1:
                        # Ensure molecule is small and aliphatic
                        if mol.GetNumHeavyAtoms() > 15:
                            match = False
                            break
                        if mol.GetRingInfo().NumRings() > 0:
                            match = False
                            break
                    if rule['number'] == 2:
                        # Check if amino/hydroxyl group is at para position to carboxylic acid
                        carboxy_matches = mol.GetSubstructMatches(rule['compiled_patterns']['aromatic_carboxylic_acid'])
                        para_matches = mol.GetSubstructMatches(rule['compiled_patterns']['para_amino_hydroxyl'])
                        if not carboxy_matches or not para_matches:
                            match = False
                            break
                        # Additional logic can be added here if needed
                    if rule['number'] == 5:
                        # Check for long aliphatic chain
                        chain_pat = Chem.MolFromSmarts(rule5_patterns['long_aliphatic_chain'])
                        chain_matches = mol.GetSubstructMatches(chain_pat)
                        if not chain_matches:
                            match = False
                            break
                    # Additional specific logic for other rules can be implemented similarly
                if match:
                    # Assign prediction value
                    if rule['prediction'] is not None:
                        row.append(rule['prediction'])
                    else:
                        row.append(0)
                else:
                    row.append(0)
            except Exception:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

1. **Rule 1**: Modifiers that are **small aliphatic amino-dicarboxylic acids** (amino acids with an extra carboxylic acid group) will lead to **high yield**.
   - *Examples*: **(2S)-2-aminobutanedioic acid** (Aspartic acid), **(2S)-2-aminopentanedioic acid** (Glutamic acid).
   - *Rationale*: The presence of multiple carboxylate groups and an amino group enhances metal coordination through multiple interaction sites, improving catalyst performance.

2. **Rule 2**: Modifiers that are **aromatic carboxylic acids with para-substituted amino (-NH₂) or hydroxyl (-OH) groups** will lead to **high yield**.
   - *Examples*: **4-aminobenzoic acid**, **4-hydroxybenzoic acid**.
   - *Counter-Example*: **4-methylbenzoic acid** lacks coordinating groups and leads to **low yield**.
   - *Rationale*: Electron-donating groups at the para position enhance metal coordination by increasing electron density on the aromatic ring and coordinating atoms.

3. **Rule 3**: Modifiers that are **pyridine carboxylic acids with the carboxyl group directly attached to the pyridine ring** will lead to **high yield**.
   - *Examples*: **Pyridine-3-carboxylic acid** (Niacin), **Pyridine-4-carboxylic acid**.
   - *Counter-Example*: **4-pyridin-4-ylbenzoic acid** has a pyridine ring attached via a linker and leads to **low yield**.
   - *Rationale*: The pyridine nitrogen provides an additional coordination site when directly connected, enhancing metal binding and catalyst activity.

4. **Rule 4**: Modifiers that are **small aliphatic carboxylic acids with a thiol (-SH) group** will lead to **high yield**.
   - *Example*: **3-sulfanylpropanoic acid**.
   - *Counter-Example*: **4-sulfanylbenzoic acid** has the thiol group on an aromatic ring and leads to **low yield**.
   - *Rationale*: Thiol groups are strong ligands for metal ions. In small aliphatic chains, they facilitate effective metal coordination without steric hindrance.

5. **Rule 5**: Modifiers that are **simple aliphatic carboxylic acids with chain lengths between 6 to 8 carbons and no additional polar groups** will lead to **high yield**.
   - *Example*: **Octanoic acid**.
   - *Counter-Examples*: **7-hydroxyheptanoic acid**, **7-aminoheptanoic acid** contain polar groups and lead to **low yield**.
   - *Rationale*: Optimal chain length allows effective interaction with the catalyst surface without steric hindrance or interference from additional polar functionalities.

6. **Rule 6**: Modifiers with **long aliphatic chains (more than 6 carbons) containing polar functional groups** (e.g., hydroxyl (-OH) or amino (-NH₂)) will lead to **low yield**.
   - *Examples*: **7-hydroxyheptanoic acid**, **8-aminooctanoic acid**, **7-aminoheptanoic acid**.
   - *Rationale*: Polar groups in long chains can introduce steric hindrance and disrupt effective metal coordination, impairing catalyst performance.

7. **Rule 7**: Modifiers containing **multiple ether linkages in aliphatic chains terminating with a carboxylic acid group** will lead to **low yield**.
   - *Examples*: **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**, **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**.
   - *Rationale*: Increased molecular flexibility due to ether linkages can reduce effective metal coordination through entropic factors and diminished interaction with the catalyst.

8. **Rule 8**: Modifiers that are **carboxylic acids with electron-withdrawing groups (e.g., formyl (-CHO)) directly attached to the aromatic ring** will lead to **low yield**.
   - *Examples*: **4-formylbenzoic acid**, **5-formyl-2-hydroxybenzoic acid**.
   - *Note*: **4-nitrobenzoic acid** is an exception, leading to **high yield**.
   - *Rationale*: Electron-withdrawing groups decrease electron density on coordinating atoms, weakening metal-ligand interactions. However, some electron-withdrawing groups like nitro (-NO₂) may participate differently in coordination.

9. **Rule 9**: Modifiers with **highly fluorinated aliphatic chains** will lead to **low yield**.
   - *Example*: **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**.
   - *Rationale*: Fluorine's strong electron-withdrawing effect reduces electron density available for metal coordination, diminishing catalytic activity.

10. **Rule 10**: Modifiers that are **aromatic carboxylic acids with bulky substituents near coordinating groups** will lead to **low yield**.
    - *Example*: **2-[(4-hydroxybenzoyl)amino]acetic acid**.
    - *Rationale*: Bulky groups introduce steric hindrance, obstructing access to the metal center and interfering with effective coordination.

11. **Rule 11**: Modifiers that are **amino acids with large hydrophobic side chains lacking coordinating heteroatoms** will lead to **low yield**.
    - *Example*: **(2S)-2-amino-3-phenylpropanoic acid** (Phenylalanine).
    - *Counter-Example*: **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (Tryptophan) contains a heteroatom and leads to **high yield**.
    - *Rationale*: Side chains without heteroatoms provide fewer coordination sites, reducing interaction with the metal catalyst.

12. **Rule 12**: Modifiers containing **nitrogen heterocycles directly attached to the carboxyl group** will lead to **high yield**.
    - *Examples*: **1H-pyrazole-4-carboxylic acid**, **2-oxo-1H-pyridine-4-carboxylic acid**.
    - *Rationale*: Nitrogen atoms in heterocycles act as additional coordination sites, enhancing metal binding and catalytic efficiency.

**End of Rules**

---

**Explanation and Rationale:**

The rules above were developed through a systematic analysis of the provided dataset, focusing on the relationship between the molecular structures of modifiers and their impact on reaction yield. The key considerations include coordination chemistry, electronic effects, steric factors, and molecular flexibility, which influence the interaction between the modifier and the metal catalyst.

- **Combination of Sub-Structures**: Each rule identifies specific combinations of functional groups and structural features. For example, **Rule 2** combines an aromatic ring, a carboxylic acid group, and a para-substituted amino or hydroxyl group to predict high yield.

- **Physicochemical Properties**: The rules are grounded in chemical principles:
  - **Metal Coordination**: Functional groups like amino (-NH₂), hydroxyl (-OH), thiol (-SH), and nitrogen-containing heterocycles provide lone pairs of electrons capable of coordinating with metal ions, enhancing catalyst activity.
  - **Electron Donation and Withdrawal**: Electron-donating groups increase electron density on coordinating atoms, strengthening metal-ligand interactions. Electron-withdrawing groups have the opposite effect, potentially reducing catalytic efficiency.
  - **Steric Hindrance**: Bulky substituents near coordination sites can impede access to the metal center, diminishing catalyst performance.
  - **Molecular Flexibility**: Excessive flexibility from ether linkages can decrease effective metal coordination due to entropic factors.

- **Predictive Clarity**: Each rule clearly states whether modifiers fitting its description will lead to high or low yield, facilitating the prediction of outcomes for new modifiers.

- **Coverage and Balance**: The rules cover a broad spectrum of modifiers in the dataset, including both high-yield and low-yield cases, and represent a balance between simple, broadly applicable rules and more complex ones that capture specific nuances.

---

**Conclusion:**

By integrating combinations of functional groups and considering underlying physicochemical properties, these rules provide valuable insights into how molecular modifiers influence the yield of the radical-mediated remote δ-C(sp³)–H bond functionalization reaction. This understanding can guide the selection or design of new modifiers to optimize reaction outcomes, thereby advancing the objectives of the research program.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12
0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,-1,-1,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.8285714285714286; Test Accuracy: 1.0
    Train Support: 0.09285714285714286; Test Support: 0.0
    Train Confidence: 0.9722222222222222; Test Confidence: 0.5
    Train Lift: 1.9190268700072624; Test Lift: NONE
    Train Leverage: 0.041632653061224496; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define the rules with their associated patterns and predictions
    # Import necessary RDKit functions
    from rdkit.Chem import rdMolDescriptors
    
    # Define SMARTS patterns used across rules
    carboxylic_acid = Chem.MolFromSmarts('[CX3](=O)[OX2H1]')
    amino_group = Chem.MolFromSmarts('[NX3;H2]')
    aromatic_carboxylic_acid = Chem.MolFromSmarts('[c][CX3](=O)[OX2H1]')
    thiol_group = Chem.MolFromSmarts('[SX2H]')
    hydroxyl_group = Chem.MolFromSmarts('[OX2H]')
    ether_linkage = Chem.MolFromSmarts('[CX4][OX2][CX4]')
    pyridine_ring = Chem.MolFromSmarts('n1ccccc1')
    
    rules = []
    
    # Define rule functions
    
    # Rule 1
    def rule1(mol):
        # Check for at least two carboxylic acid groups
        ca_matches = mol.GetSubstructMatches(carboxylic_acid)
        if len(ca_matches) < 2:
            return 0
        # Check for amino group
        if not mol.HasSubstructMatch(amino_group):
            return 0
        # Check if molecule is aliphatic (no aromatic atoms)
        if any(atom.GetIsAromatic() for atom in mol.GetAtoms()):
            return 0
        # Check if molecule is small (heavy atom count ≤ 10)
        if mol.GetNumHeavyAtoms() > 10:
            return 0
        return 1
    rules.append(('Rule 1', rule1))
    
    # Rule 2
    def rule2(mol):
        # Check for aromatic carboxylic acid
        if not mol.HasSubstructMatch(aromatic_carboxylic_acid):
            return 0
        # Check for para-substituted amino or hydroxyl group
        # Complex logic needed here
        # For simplicity, we can attempt to match para-aminobenzoic acid or para-hydroxybenzoic acid
        pattern1 = Chem.MolFromSmarts('c1ccc(cc1)[C](=O)[OH]')
        if not mol.HasSubstructMatch(pattern1):
            return 0
        # Now, check for amino or hydroxyl group para to carboxylic acid
        pattern2 = Chem.MolFromSmarts('c1cc([NX3;H2])ccc1C(=O)O')
        pattern3 = Chem.MolFromSmarts('c1cc([OX2H])ccc1C(=O)O')
        if mol.HasSubstructMatch(pattern2) or mol.HasSubstructMatch(pattern3):
            return 1
        return 0
    rules.append(('Rule 2', rule2))
    
    # Rule 3
    def rule3(mol):
        # Check for pyridine carboxylic acid
        pyridine_carboxylic_acid = Chem.MolFromSmarts('[n]1ccccc1C(=O)O')
        if mol.HasSubstructMatch(pyridine_carboxylic_acid):
            return 1
        return 0
    rules.append(('Rule 3', rule3))
    
    # Rule 4
    def rule4(mol):
        if not mol.HasSubstructMatch(thiol_group):
            return 0
        if not mol.HasSubstructMatch(carboxylic_acid):
            return 0
        # Molecule is aliphatic
        if any(atom.GetIsAromatic() for atom in mol.GetAtoms()):
            return 0
        # Molecule is small
        if mol.GetNumHeavyAtoms() > 10:
            return 0
        return 1
    rules.append(('Rule 4', rule4))
    
    # Rule 5
    def rule5(mol):
        # Check for carboxylic acid
        if not mol.HasSubstructMatch(carboxylic_acid):
            return 0
        # Molecule is aliphatic
        if any(atom.GetIsAromatic() for atom in mol.GetAtoms()):
            return 0
        # Count number of carbons in chain
        # Simplifying assumption: total number of carbons between 6 and 8
        num_carbons = sum(1 for atom in mol.GetAtoms() if atom.GetAtomicNum()==6)
        if num_carbons >=6 and num_carbons <=8:
            # Check for no additional polar groups beyond carboxylic acid
            num_o = sum(1 for atom in mol.GetAtoms() if atom.GetAtomicNum()==8)
            num_n = sum(1 for atom in mol.GetAtoms() if atom.GetAtomicNum()==7)
            num_s = sum(1 for atom in mol.GetAtoms() if atom.GetAtomicNum()==16)
            # Subtract oxygens in carboxylic acid
            num_o -=2
            if num_o == 0 and num_n == 0 and num_s == 0:
                return 1
        return 0
    rules.append(('Rule 5', rule5))
    
    # Rule 6
    def rule6(mol):
        # Check if molecule has long aliphatic chain (>6 carbons)
        num_carbons = sum(1 for atom in mol.GetAtoms() if atom.GetAtomicNum()==6 and not atom.GetIsAromatic())
        if num_carbons > 6:
            # Check for polar functional groups (OH or NH2)
            if mol.HasSubstructMatch(hydroxyl_group) or mol.HasSubstructMatch(amino_group):
                return -1
        return 0
    rules.append(('Rule 6', rule6))
    
    # Rule 7
    def rule7(mol):
        # Check for multiple ether linkages
        ether_matches = mol.GetSubstructMatches(ether_linkage)
        if len(ether_matches) >=2:
            # Check for carboxylic acid
            if mol.HasSubstructMatch(carboxylic_acid):
                return -1
        return 0
    rules.append(('Rule 7', rule7))
    
    # Rule 8
    def rule8(mol):
        # Check for aromatic carboxylic acid
        if not mol.HasSubstructMatch(aromatic_carboxylic_acid):
            return 0
        # Check for electron-withdrawing groups attached to ring
        # Formyl group attached to aromatic ring
        formyl_group = Chem.MolFromSmarts('[c][CX3H](=O)')
        if mol.HasSubstructMatch(formyl_group):
            # Exception: 4-nitrobenzoic acid
            nitrobenzoic_acid = Chem.MolFromSmarts('c1ccc(cc1)[N+](=O)[O-]')
            if mol.HasSubstructMatch(nitrobenzoic_acid):
                return 0
            return -1
        return 0
    rules.append(('Rule 8', rule8))
    
    # Rule 9
    def rule9(mol):
        # Check for multiple fluorine atoms
        num_F = sum(1 for atom in mol.GetAtoms() if atom.GetAtomicNum()==9)
        if num_F >=3:
            return -1
        return 0
    rules.append(('Rule 9', rule9))
    
    # Rule 10
    def rule10(mol):
        # Check for aromatic carboxylic acid
        if not mol.HasSubstructMatch(aromatic_carboxylic_acid):
            return 0
        # Check for bulky substituents near coordinating groups
        bulky_substituents = Chem.MolFromSmarts('[c][C](C)(C)C')
        if mol.HasSubstructMatch(bulky_substituents):
            return -1
        return 0
    rules.append(('Rule 10', rule10))
    
    # Rule 11
    def rule11(mol):
        # Check for amino acid backbone
        amino_acid = Chem.MolFromSmarts('[NX3;H2][CX4][CX3](=O)[OX2H1]')
        if not mol.HasSubstructMatch(amino_acid):
            return 0
        # Check for large hydrophobic side chain lacking heteroatoms
        # For simplicity, check for phenylalanine
        phenylalanine = Chem.MolFromSmarts('[NX3;H2][CX4][CH2][c]1[cH][cH][cH][cH][cH]1[C](=O)[OH]')
        if mol.HasSubstructMatch(phenylalanine):
            return -1
        # Exception: Tryptophan leads to high yield
        tryptophan = Chem.MolFromSmarts('[NX3;H2][CX4][CH2]c1c[nH]c2c1cccc2[C](=O)[OH]')
        if mol.HasSubstructMatch(tryptophan):
            return 0
        return 0
    rules.append(('Rule 11', rule11))
    
    # Rule 12
    def rule12(mol):
        # Check for nitrogen heterocycle attached to carboxyl group
        nitrogen_heterocycle_ca = Chem.MolFromSmarts('[n][c][C](=O)[OH]')
        if mol.HasSubstructMatch(nitrogen_heterocycle_ca):
            return 1
        return 0
    rules.append(('Rule 12', rule12))
    
    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule_name, rule_func in rules:
            try:
                res = rule_func(mol)
                row.append(res)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[rule_name for rule_name, _ in rules])
    return df
--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

1. **Rule 1**: Modifiers that are **aliphatic amino dicarboxylic acids** (amino acids with an additional carboxylic acid group) lead to **high yield**.
   - *Examples*: **(2S)-2-aminobutanedioic acid** (Aspartic acid), **(2S)-2-aminopentanedioic acid** (Glutamic acid).
   - *Rationale*: The combination of two carboxyl groups and an amino group provides multiple coordination sites for metal ions, enhancing metal-ligand interactions and improving catalytic performance.

2. **Rule 2**: Modifiers that are **aromatic carboxylic acids with a para-substituted amino (-NH₂) group** result in **high yield**.
   - *Examples*: **4-aminobenzoic acid**, **4-pyridin-4-ylbutanoic acid**.
   - *Counter-Example*: **4-methylbenzoic acid** lacks the amino group and leads to **low yield**.
   - *Rationale*: The amino group serves as an additional coordination site, strengthening the interaction with metal centers and enhancing catalyst activity.

3. **Rule 3**: Modifiers that are **aromatic carboxylic acids with para-substituted electron-withdrawing groups** such as nitro (-NO₂) or bromomethyl (-CH₂Br) lead to **high yield**.
   - *Examples*: **4-nitrobenzoic acid**, **4-(bromomethyl)benzoic acid**.
   - *Counter-Example*: **4-formylbenzoic acid** has a formyl group and leads to **low yield**.
   - *Rationale*: Electron-withdrawing groups increase the acidity of the carboxylic acid, enhancing its ability to coordinate with metal ions and improving catalytic efficiency.

4. **Rule 4**: Modifiers that are **small aliphatic carboxylic acids with a thiol (-SH) group** result in **high yield**.
   - *Example*: **3-sulfanylpropanoic acid**.
   - *Counter-Example*: **4-sulfanylbenzoic acid** has the thiol group on an aromatic ring and leads to **low yield**.
   - *Rationale*: Thiol groups are strong ligands for metal coordination. In small aliphatic chains, they offer minimal steric hindrance, facilitating effective metal-thiol interactions.

5. **Rule 5**: Modifiers that are **unsubstituted aliphatic carboxylic acids with medium-length chains (around eight carbons)** lead to **high yield**.
   - *Example*: **Octanoic acid**.
   - *Counter-Examples*: **7-hydroxyheptanoic acid**, **7-aminoheptanoic acid**, and **8-aminooctanoic acid** contain polar groups and lead to **low yield**.
   - *Rationale*: Medium-chain aliphatic acids without additional polar groups can interact favorably with the catalyst surface, enhancing catalytic activity without steric or electronic interference.

6. **Rule 6**: Modifiers that are **aromatic carboxylic acids connected via an aliphatic chain to a para-substituted hydroxyl (-OH) group** result in **high yield** when the chain length mitigates steric hindrance.
   - *Example*: **5-(4-hydroxyphenyl)pentanoic acid**.
   - *Counter-Example*: **3-(4-hydroxyphenyl)propanoic acid** has a shorter chain and leads to **low yield**.
   - *Rationale*: Adequate chain length allows the hydroxyl group to participate in metal coordination without causing steric clashes, enhancing the catalyst's effectiveness.

7. **Rule 7**: Modifiers that are **heterocyclic carboxylic acids with nitrogen atoms in the ring adjacent to the carboxyl group** lead to **high yield**.
   - *Examples*: **1H-pyrazole-4-carboxylic acid**, **pyridine-3-carboxylic acid**.
   - *Counter-Example*: **4-pyridin-4-ylbenzoic acid** has the nitrogen atom further from the carboxyl group and leads to **low yield**.
   - *Rationale*: Nitrogen atoms adjacent to the carboxyl group enhance coordination with metal ions, improving catalytic performance through stronger metal-ligand interactions.

8. **Rule 8**: Modifiers containing **multiple ether linkages in aliphatic chains terminating with a carboxylic acid group** result in **low yield**.
   - *Examples*: **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**, **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**.
   - *Rationale*: Ether linkages increase molecular flexibility, reducing effective metal coordination due to entropic factors and diminishing catalyst efficiency.

9. **Rule 9**: Modifiers that are **heavily fluorinated aliphatic carboxylic acids** lead to **low yield**.
   - *Example*: **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**.
   - *Rationale*: The strong electron-withdrawing effect of fluorine atoms decreases electron density on coordinating atoms, weakening metal-ligand interactions and reducing catalytic activity.

10. **Rule 10**: Modifiers that are **aromatic carboxylic acids with ortho-substituted hydroxyl (-OH) groups** result in **low yield**.
    - *Example*: **5-formyl-2-hydroxybenzoic acid**.
    - *Rationale*: Ortho-hydroxyl groups can engage in intramolecular hydrogen bonding or form stable chelate rings, decreasing the availability of coordination sites for metal binding and impairing catalyst performance.

11. **Rule 11**: Modifiers that are **aromatic carboxylic acids with bulky substituents near coordinating groups** lead to **low yield**.
    - *Examples*: **2-[(4-hydroxybenzoyl)amino]acetic acid**, **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid**.
    - *Rationale*: Bulky groups introduce steric hindrance, obstructing access to the metal center and interfering with effective metal-ligand coordination.

12. **Rule 12**: Modifiers that are **amino acids or peptides with acylated amino groups or additional amide linkages** result in **low yield**.
    - *Examples*: **(2S)-6-acetamido-2-aminohexanoic acid**, **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid**.
    - *Rationale*: Acylation and additional amide bonds reduce the availability of lone pairs on nitrogen atoms for metal coordination, diminishing catalytic effectiveness.

13. **Rule 13**: Modifiers that are **aromatic carboxylic acids with para-substituted formyl (-CHO) groups** lead to **low yield**.
    - *Examples*: **4-formylbenzoic acid**, **5-formyl-2-hydroxybenzoic acid**.
    - *Rationale*: Formyl groups withdraw electron density and may participate in competing intramolecular interactions, weakening metal-ligand coordination and reducing catalytic efficiency.

14. **Rule 14**: Modifiers that are **aromatic carboxylic acids with para-substituted electron-donating groups** such as methyl (-CH₃) or methoxy (-OCH₃) lead to **low yield**.
    - *Examples*: **4-methylbenzoic acid**, **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid**.
    - *Rationale*: Electron-donating groups decrease the acidity of the carboxylic acid, reducing its ability to coordinate effectively with metal ions and impairing catalytic performance.

15. **Rule 15**: Modifiers that are **aliphatic carboxylic acids with chain lengths exceeding seven carbons and containing polar functional groups** (e.g., hydroxyl (-OH) or amino (-NH₂)) result in **low yield**.
    - *Examples*: **7-hydroxyheptanoic acid**, **7-aminoheptanoic acid**, **8-aminooctanoic acid**.
    - *Rationale*: Longer aliphatic chains with polar groups can introduce steric hindrance and disrupt effective metal coordination, leading to decreased catalyst activity.

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1
0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1

---------------------------------------------------------------


    Train Accuracy: 0.6857142857142857; Test Accuracy: 1.0
    Train Support: 0.09523809523809523; Test Support: 0.0
    Train Confidence: 0.9333333333333332; Test Confidence: 0.5
    Train Lift: 1.852941176470588; Test Lift: NONE
    Train Leverage: 0.04190476190476191; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups using corrected patterns from suggestions
    
    # Carboxylic acid group (-COOH) (both neutral and deprotonated forms)
    carboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1]'
    
    # Primary amine group (-NH2)
    primary_amine = '[NX3H2]'
    
    # Exclude aromatic atoms pattern
    exclude_aromatic = '[a]'
    
    # Aromatic carboxylic acid
    aromatic_carboxylic_acid = '[c][CX3](=O)[OX1H0-,OX2H1]'
    
    # Aromatic para-substituted amino group
    aromatic_para_amino_carboxylic_acid = 'c1ccc([NX3H2])cc1C(=O)[OX1H0-,OX2H1]'
    
    # Aromatic para-substituted nitro group
    aromatic_para_nitro = 'c1ccc([N+](=O)[O-])cc1C(=O)[OX1H0-,OX2H1]'
    
    # Aromatic para-substituted bromomethyl group
    aromatic_para_bromomethyl = 'c1ccc(CBr)cc1C(=O)[OX1H0-,OX2H1]'
    
    # Thiol group (-SH)
    thiol_group = '[SX2H]'
    
    # Multiple ether linkages (two or more)
    multiple_ethers = '[#6][OX2][#6][OX2][#6]'
    
    # Heavily fluorinated chain
    heavily_fluorinated = '[#6][F][F][F]'
    
    # Ortho-hydroxyl aromatic carboxylic acid
    ortho_hydroxyl_acid = 'c1c([OX2H])cccc1C(=O)[OX1H0-,OX2H1]'
    
    # Bulky substituent near coordinating group (tert-butyl example)
    bulky_substituent = '[#6][C](C)(C)C'
    
    # Acylated amino group (amide bond)
    acylated_amino_group = '[NX3][CX3](=O)[#6]'
    
    # Aromatic para-substituted formyl group
    aromatic_para_formyl = 'c1ccc(C=O)cc1C(=O)[OX1H0-,OX2H1]'
    
    # Aromatic para-substituted electron-donating groups (methyl and methoxy)
    aromatic_para_methyl = 'c1ccc(C)cc1C(=O)[OX1H0-,OX2H1]'
    aromatic_para_methoxy = 'c1ccc(OC)cc1C(=O)[OX1H0-,OX2H1]'
    
    # Long aliphatic chain with polar functional groups
    long_chain_polar = '[#6]-' + ('[#6]-' * 6) + '[OX2H,NX3H2]'
    
    # Heterocyclic carboxylic acid with nitrogen adjacent to carboxyl group
    heterocyclic_carboxylic_acid = '[n][c]([CX3](=O)[OX1H0-,OX2H1])'
    
    # Aromatic carboxylic acid connected via aliphatic chain to para-hydroxyl group
    aromatic_carboxylic_acid_long_chain_para_hydroxyl = 'c1ccc(cc1C(=O)[OX1H0-,OX2H1])CCCC[OX2H]'
    
    # Define the rules with corrections from suggestions
    rules = [
        {
            'number': 1,
            'description': 'High yield: Modifiers that are aliphatic amino dicarboxylic acids (amino acids with an additional carboxylic acid group).',
            'patterns': [
                [primary_amine],
                [carboxylic_acid]
            ],
            'exclude_patterns': [[exclude_aromatic]],
            'count_threshold': {carboxylic_acid: 2},
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'High yield: Modifiers that are aromatic carboxylic acids with a para-substituted amino (-NH2) group.',
            'patterns': [
                [aromatic_para_amino_carboxylic_acid]
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'High yield: Modifiers that are aromatic carboxylic acids with para-substituted electron-withdrawing groups such as nitro (-NO2) or bromomethyl (-CH2Br).',
            'patterns': [
                [aromatic_para_nitro, aromatic_para_bromomethyl]
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'High yield: Modifiers that are small aliphatic carboxylic acids with a thiol (-SH) group.',
            'patterns': [
                [carboxylic_acid],
                [thiol_group]
            ],
            'exclude_patterns': [[exclude_aromatic]],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'High yield: Modifiers that are unsubstituted aliphatic carboxylic acids with medium-length chains (around eight carbons).',
            'patterns': [
                [carboxylic_acid]
            ],
            'exclude_patterns': [
                ['[OX2H1]', '[NX3H2]'],  # Exclude polar groups
                [exclude_aromatic]  # Exclude aromatic atoms
            ],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'High yield: Modifiers that are aromatic carboxylic acids connected via an aliphatic chain to a para-substituted hydroxyl (-OH) group.',
            'patterns': [
                [aromatic_carboxylic_acid_long_chain_para_hydroxyl]
            ],
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'High yield: Modifiers that are heterocyclic carboxylic acids with nitrogen atoms in the ring adjacent to the carboxyl group.',
            'patterns': [
                [heterocyclic_carboxylic_acid]
            ],
            'prediction': 1
        },
        {
            'number': 8,
            'description': 'Low yield: Modifiers containing multiple ether linkages in aliphatic chains terminating with a carboxylic acid group.',
            'patterns': [
                [multiple_ethers],
                [carboxylic_acid]
            ],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Low yield: Modifiers that are heavily fluorinated aliphatic carboxylic acids.',
            'patterns': [
                [heavily_fluorinated],
                [carboxylic_acid]
            ],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Low yield: Modifiers that are aromatic carboxylic acids with ortho-substituted hydroxyl (-OH) groups.',
            'patterns': [
                [ortho_hydroxyl_acid]
            ],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Low yield: Modifiers that are aromatic carboxylic acids with bulky substituents near coordinating groups.',
            'patterns': [
                [aromatic_carboxylic_acid],
                [bulky_substituent]
            ],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'Low yield: Modifiers that are amino acids or peptides with acylated amino groups or additional amide linkages.',
            'patterns': [
                [acylated_amino_group],
                [carboxylic_acid]
            ],
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Low yield: Modifiers that are aromatic carboxylic acids with para-substituted formyl (-CHO) groups.',
            'patterns': [
                [aromatic_para_formyl]
            ],
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'Low yield: Modifiers that are aromatic carboxylic acids with para-substituted electron-donating groups such as methyl (-CH3) or methoxy (-OCH3).',
            'patterns': [
                [aromatic_para_methyl, aromatic_para_methoxy]
            ],
            'prediction': -1
        },
        {
            'number': 15,
            'description': 'Low yield: Modifiers that are aliphatic carboxylic acids with chain lengths exceeding seven carbons and containing polar functional groups.',
            'patterns': [
                [long_chain_polar],
                [carboxylic_acid]
            ],
            'exclude_patterns': [[exclude_aromatic]],
            'prediction': -1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = [{'pat': Chem.MolFromSmarts(p), 'smarts': p} for p in group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for group in rule['exclude_patterns']:
                compiled_group = [{'pat': Chem.MolFromSmarts(p), 'smarts': p} for p in group]
                compiled_excludes.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_excludes
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        for pat_dict in group:
                            if mol.HasSubstructMatch(pat_dict['pat']):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat_dict in compiled_group:
                        pat = pat_dict['pat']
                        pattern_smarts = pat_dict['smarts']
                        matches = mol.GetSubstructMatches(pat)
                        if matches:
                            # If a count threshold is specified for this pattern
                            if 'count_threshold' in rule and pattern_smarts in rule['count_threshold']:
                                threshold = rule['count_threshold'][pattern_smarts]
                                if len(matches) >= threshold:
                                    group_match = True
                                    break
                            else:
                                group_match = True
                                break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

1. **Rule 1**: Modifiers that are **aliphatic amino acids with two carboxyl groups (dicarboxylic amino acids)** lead to **high yield**.
   - *Examples*: **(2S)-2-aminobutanedioic acid** (Aspartic acid), **(2S)-2-aminopentanedioic acid** (Glutamic acid).
   - *Rationale*: The presence of two carboxyl groups provides multiple coordination sites for metal ions, enhancing metal-ligand interactions and improving catalytic performance.

2. **Rule 2**: Modifiers that are **aromatic carboxylic acids with a para-substituted amino (-NH₂) group** result in **high yield**.
   - *Example*: **4-aminobenzoic acid**.
   - *Counter-Example*: **4-methylbenzoic acid** lacks the amino group and leads to **low yield**.
   - *Rationale*: The amino group acts as an additional coordination site, strengthening interactions with metal centers and enhancing catalyst activity.

3. **Rule 3**: Modifiers that are **aromatic carboxylic acids with para-substituted electron-withdrawing groups** such as nitro (-NO₂) or bromomethyl (-CH₂Br) lead to **high yield**.
   - *Examples*: **4-nitrobenzoic acid**, **4-(bromomethyl)benzoic acid**.
   - *Counter-Example*: **4-methylbenzoic acid** has an electron-donating group and leads to **low yield**.
   - *Rationale*: Electron-withdrawing groups increase the acidity of the carboxylic acid, enhancing its ability to coordinate with metal ions and improving catalytic efficiency.

4. **Rule 4**: Modifiers that are **small aliphatic carboxylic acids with a thiol (-SH) group** result in **high yield**.
   - *Example*: **3-sulfanylpropanoic acid**.
   - *Counter-Example*: **4-sulfanylbenzoic acid** has the thiol group on an aromatic ring and leads to **low yield**.
   - *Rationale*: Thiol groups are strong ligands for metal coordination. In small aliphatic chains, they offer minimal steric hindrance, facilitating effective metal-thiol interactions.

5. **Rule 5**: Modifiers that are **medium-chain aliphatic carboxylic acids (7-8 carbons) without additional polar groups** lead to **high yield**.
   - *Example*: **Octanoic acid**.
   - *Counter-Examples*: **7-hydroxyheptanoic acid**, **7-aminoheptanoic acid**, and **8-aminooctanoic acid** contain polar groups and lead to **low yield**.
   - *Rationale*: Medium-chain aliphatic acids without polar substituents can interact favorably with the catalyst surface, enhancing catalytic activity without steric or electronic interference.

6. **Rule 6**: Modifiers that are **aromatic carboxylic acids connected via an aliphatic chain (four or more carbons) to a para-substituted hydroxyl (-OH) group** result in **high yield**.
   - *Example*: **5-(4-hydroxyphenyl)pentanoic acid**.
   - *Counter-Example*: **3-(4-hydroxyphenyl)propanoic acid** has a shorter chain and leads to **low yield**.
   - *Rationale*: Adequate chain length allows the hydroxyl group to participate in metal coordination without causing steric clashes, enhancing the catalyst's effectiveness.

7. **Rule 7**: Modifiers that are **nitrogen-containing heterocyclic carboxylic acids where the nitrogen atom is adjacent to the carboxyl group** lead to **high yield**.
   - *Examples*: **Pyridine-3-carboxylic acid**, **1H-pyrazole-4-carboxylic acid**, **2-oxo-1H-pyridine-4-carboxylic acid**.
   - *Rationale*: Nitrogen atoms adjacent to the carboxyl group enhance coordination with metal ions, improving catalytic performance through stronger metal-ligand interactions.

8. **Rule 8**: Modifiers containing **multiple ether linkages in aliphatic chains terminating with a carboxylic acid group** result in **low yield**.
   - *Examples*: **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**, **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**.
   - *Rationale*: Ether linkages increase molecular flexibility, reducing effective metal coordination due to entropic factors and diminishing catalyst efficiency.

9. **Rule 9**: Modifiers that are **heavily fluorinated aliphatic carboxylic acids** lead to **low yield**.
   - *Example*: **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**.
   - *Rationale*: The strong electron-withdrawing effect of fluorine atoms decreases electron density on coordinating atoms, weakening metal-ligand interactions and reducing catalytic activity.

10. **Rule 10**: Modifiers that are **aromatic carboxylic acids with ortho-substituted polar groups** such as hydroxyl (-OH) or formyl (-CHO) result in **low yield**.
    - *Examples*: **5-formyl-2-hydroxybenzoic acid**, **4-formylbenzoic acid**.
    - *Rationale*: Ortho-substituted polar groups can engage in intramolecular hydrogen bonding or form stable chelate rings, decreasing the availability of coordination sites for metal binding and impairing catalyst performance.

11. **Rule 11**: Modifiers that are **amino acids or peptides with acylated amino groups or additional amide linkages** result in **low yield**.
    - *Examples*: **(2S)-6-acetamido-2-aminohexanoic acid**, **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid**.
    - *Rationale*: Acylation and additional amide bonds reduce the availability of lone pairs on nitrogen atoms for metal coordination, diminishing catalytic effectiveness.

12. **Rule 12**: Modifiers that are **aromatic carboxylic acids with para-substituted methyl (-CH₃) groups** lead to **low yield**.
    - *Example*: **4-methylbenzoic acid**.
    - *Rationale*: Electron-donating groups like methyl decrease the acidity of the carboxylic acid, reducing its ability to coordinate effectively with metal ions and impairing catalytic performance.

13. **Rule 13**: Modifiers that are **long-chain aliphatic carboxylic acids (seven or more carbons) containing polar functional groups** (e.g., hydroxyl (-OH) or amino (-NH₂)) result in **low yield**.
    - *Examples*: **7-hydroxyheptanoic acid**, **7-aminoheptanoic acid**, **8-aminooctanoic acid**.
    - *Rationale*: Longer aliphatic chains with polar groups can introduce steric hindrance and disrupt effective metal coordination, leading to decreased catalyst activity.

14. **Rule 14**: Modifiers that are **aromatic carboxylic acids bonded to bulky substituents through amide linkages** lead to **low yield**.
    - *Example*: **2-[(4-hydroxybenzoyl)amino]acetic acid**.
    - *Rationale*: Bulky groups connected via amide bonds introduce steric hindrance, obstructing access to the metal center and interfering with effective metal-ligand coordination.

15. **Rule 15**: Modifiers that are **amino acids with aromatic side chains without additional coordinating groups** result in **low yield**.
    - *Example*: **(2S)-2-amino-3-phenylpropanoic acid** (Phenylalanine).
    - *Counter-Example**: **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (Tryptophan) has an indole ring capable of coordination and leads to **high yield**.
    - *Rationale*: Aromatic side chains without extra coordination sites may hinder effective metal interaction unless compensated by functional groups capable of coordination.

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 9
0,0,0,0,0
1,0,0,0,0
0,0,1,0,0
1,0,0,0,0
0,0,0,0,0
0,1,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,-1
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,1,0
0,0,0,0,0
0,0,0,0,0
0,0,1,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6857142857142857; Test Accuracy: 0.0
    Train Support: 0.04285714285714286; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 2.058823529411765; Test Lift: NONE
    Train Leverage: 0.02204081632653061; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    patterns = {
        'carboxylic_acid': Chem.MolFromSmarts('[CX3](=O)[OX2H1]'),
        'primary_aliphatic_amine': Chem.MolFromSmarts('[NX3;H2][CX4]'),
        'aromatic_atom': Chem.MolFromSmarts('[a]'),
        'thiol': Chem.MolFromSmarts('[SX2H]'),
        'aromatic_carboxylic_acid': Chem.MolFromSmarts('[c][CX3](=O)[OX2H1]'),
        'amino_on_aromatic': Chem.MolFromSmarts('[c][NX3;H2]'),
        'nitro_on_aromatic': Chem.MolFromSmarts('[c][NX3](=O)[O-]'),
        'bromomethyl_on_aromatic': Chem.MolFromSmarts('[c][CH2][Br]'),
        'fluorine': Chem.MolFromSmarts('[F]'),
        # Add more patterns as needed
    }
    # Define the rules
    rules = []

    # Rule 1
    rules.append({
        'number': 1,
        'description': 'High yield: Aliphatic amino acids with two carboxyl groups',
        'patterns': [
            {'name': 'primary_aliphatic_amine', 'min_count':1},
            {'name': 'carboxylic_acid', 'min_count':2}
        ],
        'exclude': [
            {'name': 'aromatic_atom'}
        ],
        'prediction': 1
    })

    # Rule 2
    rules.append({
        'number': 2,
        'description': 'High yield: Aromatic carboxylic acids with a para-substituted amino group',
        'patterns': [
            {'name': 'aromatic_carboxylic_acid'},
            {'name': 'amino_on_aromatic'}
        ],
        # Note: Para-substitution not enforced due to complexity
        'prediction': 1
    })

    # Rule 3
    rules.append({
        'number': 3,
        'description': 'High yield: Aromatic carboxylic acids with para-substituted electron-withdrawing groups such as nitro (-NO₂) or bromomethyl (-CH₂Br)',
        'patterns': [
            {'name': 'aromatic_carboxylic_acid'}
        ],
        'alternative_patterns': [
            {'name': 'nitro_on_aromatic'},
            {'name': 'bromomethyl_on_aromatic'}
        ],
        'prediction': 1
    })

    # Rule 4
    rules.append({
        'number': 4,
        'description': 'High yield: Small aliphatic carboxylic acids with a thiol (-SH) group',
        'patterns': [
            {'name': 'carboxylic_acid'},
            {'name': 'thiol'}
        ],
        'exclude': [
            {'name': 'aromatic_atom'}
        ],
        'prediction': 1
    })

    # Rule 9
    rules.append({
        'number': 9,
        'description': 'Low yield: Heavily fluorinated aliphatic carboxylic acids',
        'patterns': [
            {'name': 'carboxylic_acid'},
            {'name': 'fluorine', 'min_count':5}
        ],
        'exclude': [
            {'name': 'aromatic_atom'}
        ],
        'prediction': -1
    })

    # Process SMILES list
    results = []

    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Exclude patterns
                if 'exclude' in rule:
                    for ex_pat in rule['exclude']:
                        pattern = patterns[ex_pat['name']]
                        if mol.HasSubstructMatch(pattern):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Required patterns
                for pat in rule['patterns']:
                    pattern = patterns[pat['name']]
                    matches = mol.GetSubstructMatches(pattern)
                    min_count = pat.get('min_count', 1)
                    if len(matches) < min_count:
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Alternative patterns
                if 'alternative_patterns' in rule:
                    alt_match = False
                    for pat in rule['alternative_patterns']:
                        pattern = patterns[pat['name']]
                        matches = mol.GetSubstructMatches(pattern)
                        min_count = pat.get('min_count', 1)
                        if len(matches) >= min_count:
                            alt_match = True
                            break
                    if not alt_match:
                        match = False
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception:
                row.append(0)
        results.append(row)
    # Create DataFrame
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

1. **Rule 1**: Modifiers that are **medium-chain aliphatic carboxylic acids (5 to 8 carbons) without additional polar functional groups** lead to **high yield**.
   - *Example*: **Octanoic acid**.
   - *Counter-Examples*: **7-hydroxyheptanoic acid**, **7-aminoheptanoic acid**, **8-aminooctanoic acid** (contain polar groups and result in **low yield**).
   - *Rationale*: Unsubstituted aliphatic chains interact favorably with the catalyst surface, enhancing activity without steric hindrance or interference from polar substituents.

2. **Rule 2**: Modifiers that are **α-amino acids with side chains containing additional carboxyl groups (dicarboxylic amino acids)** lead to **high yield**.
   - *Examples*: **(2S)-2-aminobutanedioic acid** (Aspartic acid), **(2S)-2-aminopentanedioic acid** (Glutamic acid).
   - *Rationale*: The extra carboxyl group in the side chain enhances coordination with metal centers, improving catalytic performance through stronger metal-ligand interactions.

3. **Rule 3**: Modifiers that are **carboxylic acids where the carboxyl group is directly attached to a nitrogen-containing heterocycle** lead to **high yield**.
   - *Examples*: **Pyridine-3-carboxylic acid**, **1H-pyrazole-4-carboxylic acid**, **2-oxo-1H-pyridine-4-carboxylic acid**.
   - *Counter-Example*: **4-pyridin-4-ylbenzoic acid** (carboxyl group attached to a benzene ring connected to the heterocycle; results in **low yield**).
   - *Rationale*: Nitrogen atoms in heterocycles adjacent to the carboxyl group enhance chelation with metal ions, strengthening metal-ligand interactions and improving catalytic activity.

4. **Rule 4**: Modifiers that are **small aliphatic carboxylic acids containing thiol (-SH) groups** lead to **high yield**.
   - *Example*: **3-sulfanylpropanoic acid**.
   - *Counter-Example*: **4-sulfanylbenzoic acid** (aromatic thiol; results in **low yield**).
   - *Rationale*: Thiol groups are strong ligands for metal coordination. In small aliphatic chains, they provide effective metal-thiol interactions without significant steric hindrance.

5. **Rule 5**: Modifiers that are **compounds with multiple ether linkages in aliphatic chains terminating with a carboxylic acid group** result in **low yield**.
   - *Examples*: **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**, **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**.
   - *Rationale*: Ether linkages increase molecular flexibility and reduce effective metal-ligand interactions, diminishing catalyst efficiency.

6. **Rule 6**: Modifiers that are **heavily fluorinated aliphatic carboxylic acids** lead to **low yield**.
   - *Example*: **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**.
   - *Rationale*: Fluorine's strong electron-withdrawing effect decreases electron density on coordinating atoms, weakening metal-ligand interactions and reducing catalytic activity.

7. **Rule 7**: Modifiers that are **aromatic carboxylic acids with para-substituted amino (-NH₂) or nitro (-NO₂) groups** lead to **high yield**.
   - *Examples*: **4-aminobenzoic acid**, **4-nitrobenzoic acid**.
   - *Rationale*: These groups can coordinate with metal centers or enhance the acidity of the carboxyl group, improving catalytic performance through stronger metal-ligand interactions.

8. **Rule 8**: Modifiers that are **long-chain aliphatic carboxylic acids (7 or more carbons) containing polar functional groups** (e.g., hydroxyl (-OH) or amino (-NH₂)) result in **low yield**.
   - *Examples*: **7-hydroxyheptanoic acid**, **7-aminoheptanoic acid**, **8-aminooctanoic acid**.
   - *Rationale*: Polar groups on long aliphatic chains can introduce steric hindrance and disrupt effective metal coordination, leading to decreased catalyst activity.

9. **Rule 9**: Modifiers that are **amino acids or peptides with acylated amino groups or additional amide linkages** lead to **low yield**.
   - *Examples*: **(2S)-6-acetamido-2-aminohexanoic acid**, **2-[[(2S)-2-amino-4-(methylsulfanyl)butanoyl]amino]acetic acid**.
   - *Rationale*: Acylation and additional amide bonds reduce the availability of lone pairs on nitrogen atoms for metal coordination, diminishing catalytic effectiveness.

10. **Rule 10**: Modifiers that are **aromatic carboxylic acids with orthro-substituted hydroxyl (-OH) or formyl (-CHO) groups capable of intramolecular hydrogen bonding or chelation** lead to **low yield**.
    - *Examples*: **5-formyl-2-hydroxybenzoic acid**, **2-[(4-hydroxybenzoyl)amino]acetic acid**.
    - *Rationale*: These groups can form intramolecular hydrogen bonds or stable chelate rings, decreasing the availability of coordination sites for metal binding and impairing catalyst performance.

11. **Rule 11**: Modifiers that are **compounds with multiple adjacent carbonyl groups capable of chelation** result in **high yield**.
    - *Example*: **1,3-dioxo-2-benzofuran-5-carboxylic acid**.
    - *Rationale*: Multiple carbonyl groups can coordinate with metal ions, enhancing binding strength and catalytic efficiency through chelation effects.

12. **Rule 12**: Modifiers that are **aromatic carboxylic acids connected via an aliphatic chain (four or more carbons) to an aromatic ring with a para-substituted hydroxyl (-OH) group** lead to **high yield**.
    - *Example*: **5-(4-hydroxyphenyl)pentanoic acid**.
    - *Counter-Example*: **3-(4-hydroxyphenyl)propanoic acid** (shorter chain; results in **low yield**).
    - *Rationale*: Adequate chain length allows the hydroxyl group to participate in metal coordination without causing steric clashes, enhancing the catalyst's effectiveness.

13. **Rule 13**: Modifiers that are **aromatic carboxylic acids with para-substituted electron-donating alkyl groups** (e.g., methyl) lead to **low yield**.
    - *Example*: **4-methylbenzoic acid**.
    - *Rationale*: Alkyl groups do not enhance metal coordination and may decrease the acidity of the carboxyl group, reducing its ability to interact effectively with the catalyst.

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13
0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0
1,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,-1,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,-1,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,-1,-1,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.7428571428571429; Test Accuracy: 1.0
    Train Support: 0.2571428571428571; Test Support: 0.0
    Train Confidence: 0.8200000000000001; Test Confidence: 0.5
    Train Lift: 1.5944444444444446; Test Lift: NONE
    Train Leverage: 0.058775510204081644; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and substructures
    carboxylic_acid = Chem.MolFromSmarts('[CX3](=O)[OX2H1]')  # Carboxylic acid group
    amino_group = Chem.MolFromSmarts('[NX3;H2,H1]')  # Primary or secondary amine group
    thiol_group = Chem.MolFromSmarts('[SX2H]')  # Thiol group
    ether_linkage = Chem.MolFromSmarts('[CX4][OX2][CX4]')  # Ether linkage
    fluorine_atom = Chem.MolFromSmarts('[F]')  # Fluorine atom
    hydroxyl_group = Chem.MolFromSmarts('[OX2H]')  # Hydroxyl group
    amino_acid_backbone = Chem.MolFromSmarts('[NX3][CX4H]([*])[CX3](=O)[OX2H1]')  # Alpha-amino acid backbone
    amide_group = Chem.MolFromSmarts('[CX3](=O)[NX3]')  # Amide group
    aromatic_ring = Chem.MolFromSmarts('a1aaaaa1')  # Aromatic ring
    aromatic_nitrogen = Chem.MolFromSmarts('[a][n]')  # Aromatic nitrogen atom
    nitro_group = Chem.MolFromSmarts('[NX3](=O)[O-]')  # Nitro group
    alkyl_group = Chem.MolFromSmarts('[CX4H3,CX4H2][#6]')  # Alkyl group (e.g., methyl)
    formyl_group = Chem.MolFromSmarts('[CX3H](=O)')  # Formyl group
    carbonyl_group = Chem.MolFromSmarts('[CX3]=[OX1]')  # Carbonyl group
    
    # Initialize results list
    results = []
    
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*13)
            continue
        
        row = []
        
        # Rule 1: Medium-chain aliphatic carboxylic acids (5 to 8 carbons) without additional polar functional groups
        try:
            match = False
            if mol.HasSubstructMatch(carboxylic_acid):
                num_carbons = sum(1 for atom in mol.GetAtoms() if atom.GetAtomicNum() == 6)
                num_oxygen = sum(1 for atom in mol.GetAtoms() if atom.GetAtomicNum() == 8)
                num_nitrogen = sum(1 for atom in mol.GetAtoms() if atom.GetAtomicNum() == 7)
                num_sulfur = sum(1 for atom in mol.GetAtoms() if atom.GetAtomicNum() == 16)
                num_halogens = sum(1 for atom in mol.GetAtoms() if atom.GetAtomicNum() in [9, 17, 35, 53])
                if 5 <= num_carbons <= 8 and num_oxygen == 2 and num_nitrogen == 0 and num_sulfur == 0 and num_halogens == 0:
                    match = True
            row.append(1 if match else 0)
        except:
            row.append(0)
        
        # Rule 2: Alpha-amino acids with side chains containing additional carboxyl groups (dicarboxylic amino acids)
        try:
            match = False
            if mol.HasSubstructMatch(amino_acid_backbone):
                matches = mol.GetSubstructMatches(carboxylic_acid)
                if len(matches) >= 2:
                    match = True
            row.append(1 if match else 0)
        except:
            row.append(0)
        
        # Rule 3: Carboxylic acids where the carboxyl group is directly attached to a nitrogen-containing heterocycle
        try:
            match = False
            if mol.HasSubstructMatch(carboxylic_acid):
                for carboxy_match in mol.GetSubstructMatches(carboxylic_acid):
                    carboxy_carbon = mol.GetAtomWithIdx(carboxy_match[0])
                    if carboxy_carbon.IsInRing() and any(atom.GetAtomicNum() == 7 for atom in carboxy_carbon.GetNeighbors() if atom.IsInRing()):
                        match = True
                        break
            row.append(1 if match else 0)
        except:
            row.append(0)
        
        # Rule 4: Small aliphatic carboxylic acids containing thiol (-SH) groups
        try:
            match = False
            if mol.HasSubstructMatch(carboxylic_acid) and mol.HasSubstructMatch(thiol_group):
                num_carbons = sum(1 for atom in mol.GetAtoms() if atom.GetAtomicNum() == 6)
                if num_carbons <= 6 and mol.GetRingInfo().NumRings() == 0:
                    match = True
            row.append(1 if match else 0)
        except:
            row.append(0)
        
        # Rule 5: Compounds with multiple ether linkages in aliphatic chains terminating with a carboxylic acid group
        try:
            match = False
            if mol.HasSubstructMatch(carboxylic_acid):
                ether_matches = mol.GetSubstructMatches(ether_linkage)
                if len(ether_matches) >= 2:
                    match = True
            row.append(-1 if match else 0)
        except:
            row.append(0)
        
        # Rule 6: Heavily fluorinated aliphatic carboxylic acids
        try:
            match = False
            if mol.HasSubstructMatch(carboxylic_acid):
                num_fluorine = sum(1 for atom in mol.GetAtoms() if atom.GetAtomicNum() == 9)
                if num_fluorine >= 3:
                    match = True
            row.append(-1 if match else 0)
        except:
            row.append(0)
        
        # Rule 7: Aromatic carboxylic acids with para-substituted amino (-NH2) or nitro (-NO2) groups
        try:
            match = False
            if mol.HasSubstructMatch(carboxylic_acid) and mol.HasSubstructMatch(aromatic_ring):
                # Find the carboxylic acid connected to an aromatic ring
                for carboxy_match in mol.GetSubstructMatches(carboxylic_acid):
                    carboxy_carbon = mol.GetAtomWithIdx(carboxy_match[0])
                    if carboxy_carbon.GetIsAromatic():
                        ring = mol.GetRingInfo().AtomRings()[0]
                        idx_in_ring = ring.index(carboxy_carbon.GetIdx())
                        para_idx = ring[(idx_in_ring + 3) % len(ring)]
                        para_atom = mol.GetAtomWithIdx(para_idx)
                        for neighbor in para_atom.GetNeighbors():
                            if neighbor.GetAtomicNum() == 7:
                                match = True
                                break
                        if match:
                            break
            row.append(1 if match else 0)
        except:
            row.append(0)
        
        # Rule 8: Long-chain aliphatic carboxylic acids (7 or more carbons) containing polar functional groups
        try:
            match = False
            if mol.HasSubstructMatch(carboxylic_acid):
                num_carbons = sum(1 for atom in mol.GetAtoms() if atom.GetAtomicNum() == 6)
                if num_carbons >=7 and (mol.HasSubstructMatch(hydroxyl_group) or mol.HasSubstructMatch(amino_group)):
                    match = True
            row.append(-1 if match else 0)
        except:
            row.append(0)
        
        # Rule 9: Amino acids or peptides with acylated amino groups or additional amide linkages
        try:
            match = False
            if mol.HasSubstructMatch(amino_acid_backbone) and mol.HasSubstructMatch(amide_group):
                match = True
            row.append(-1 if match else 0)
        except:
            row.append(0)
        
        # Rule 10: Aromatic carboxylic acids with ortho-substituted hydroxyl (-OH) or formyl (-CHO) groups
        try:
            match = False
            if mol.HasSubstructMatch(carboxylic_acid) and mol.HasSubstructMatch(aromatic_ring):
                # Find the carboxylic acid connected to an aromatic ring
                for carboxy_match in mol.GetSubstructMatches(carboxylic_acid):
                    carboxy_carbon = mol.GetAtomWithIdx(carboxy_match[0])
                    if carboxy_carbon.GetIsAromatic():
                        ring = mol.GetRingInfo().AtomRings()[0]
                        idx_in_ring = ring.index(carboxy_carbon.GetIdx())
                        ortho_positions = [(idx_in_ring + 1) % len(ring), (idx_in_ring - 1) % len(ring)]
                        for ortho_idx in ortho_positions:
                            ortho_atom = mol.GetAtomWithIdx(ring[ortho_idx])
                            if ortho_atom.HasSubstructMatch(hydroxyl_group) or ortho_atom.HasSubstructMatch(formyl_group):
                                match = True
                                break
                        if match:
                            break
            row.append(-1 if match else 0)
        except:
            row.append(0)
        
        # Rule 11: Compounds with multiple adjacent carbonyl groups capable of chelation
        try:
            match = False
            dicarbonyl_pattern = Chem.MolFromSmarts('[CX3](=O)[CX2][CX3](=O)')
            if mol.HasSubstructMatch(dicarbonyl_pattern):
                match = True
            row.append(1 if match else 0)
        except:
            row.append(0)
        
        # Rule 12: Aromatic carboxylic acids connected via an aliphatic chain (4 or more carbons) to an aromatic ring with a para-substituted hydroxyl (-OH) group
        try:
            match = False
            if mol.HasSubstructMatch(carboxylic_acid):
                # Find paths from carboxylic acid to hydroxyl-substituted aromatic ring
                for carboxy_match in mol.GetSubstructMatches(carboxylic_acid):
                    carboxy_carbon = mol.GetAtomWithIdx(carboxy_match[0])
                    paths = Chem.rdmolops.FindAllPathsOfLengthN(mol, 5, useBonds=False)
                    for path in paths:
                        if carboxy_match[0] in path:
                            atom_sequence = [mol.GetAtomWithIdx(idx) for idx in path]
                            if atom_sequence[-1].GetIsAromatic():
                                # Check for para-substituted hydroxyl group
                                ring = mol.GetRingInfo().AtomRings()[0]
                                if atom_sequence[-1].GetIdx() in ring:
                                    idx_in_ring = ring.index(atom_sequence[-1].GetIdx())
                                    para_idx = ring[(idx_in_ring + 3) % len(ring)]
                                    para_atom = mol.GetAtomWithIdx(para_idx)
                                    if para_atom.HasSubstructMatch(hydroxyl_group):
                                        match = True
                                        break
                    if match:
                        break
            row.append(1 if match else 0)
        except:
            row.append(0)
        
        # Rule 13: Aromatic carboxylic acids with para-substituted electron-donating alkyl groups (e.g., methyl)
        try:
            match = False
            if mol.HasSubstructMatch(carboxylic_acid) and mol.HasSubstructMatch(aromatic_ring):
                # Find the carboxylic acid connected to an aromatic ring
                for carboxy_match in mol.GetSubstructMatches(carboxylic_acid):
                    carboxy_carbon = mol.GetAtomWithIdx(carboxy_match[0])
                    if carboxy_carbon.GetIsAromatic():
                        ring = mol.GetRingInfo().AtomRings()[0]
                        idx_in_ring = ring.index(carboxy_carbon.GetIdx())
                        para_idx = ring[(idx_in_ring + 3) % len(ring)]
                        para_atom = mol.GetAtomWithIdx(para_idx)
                        if para_atom.HasSubstructMatch(alkyl_group):
                            match = True
                            break
            row.append(-1 if match else 0)
        except:
            row.append(0)
        
        results.append(row)
    
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {i+1}' for i in range(13)])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

1. **Rule 1**: Modifiers that are **α-amino acids with two carboxyl groups (dicarboxylic amino acids)** lead to **high yield**.
   - *Examples*: **(2S)-2-aminobutanedioic acid (Aspartic acid)**, **(2S)-2-aminopentanedioic acid (Glutamic acid)**.
   - *Counter-Example*: **(2S)-2-amino-3-phenylpropanoic acid (Phenylalanine)** (monocarboxylic amino acid; results in **low yield**).
   - *Rationale*: The presence of two carboxyl groups provides multiple coordination sites for metal ions, enhancing metal-ligand interactions and improving catalytic activity.

2. **Rule 2**: Modifiers that are **para-substituted benzoic acids with electron-donating amino (–NH₂) or hydroxyl (–OH) groups** lead to **high yield**.
   - *Examples*: **4-aminobenzoic acid**, **5-(4-hydroxyphenyl)pentanoic acid**.
   - *Counter-Examples*: **4-methylbenzoic acid** (para methyl group; results in **low yield**), **4-formylbenzoic acid** (para formyl group; results in **low yield**).
   - *Rationale*: Electron-donating groups increase electron density on the aromatic ring, enhancing coordination of the carboxylate group with metal centers.

3. **Rule 3**: Modifiers that are **heteroaromatic carboxylic acids with nitrogen atoms in the ring adjacent to the carboxyl group** lead to **high yield**.
   - *Examples*: **Pyridine-3-carboxylic acid (nicotinic acid)**, **1H-pyrazole-4-carboxylic acid**, **2-oxo-1H-pyridine-4-carboxylic acid**.
   - *Counter-Example*: **4-pyridin-4-ylbenzoic acid** (carboxyl group attached to a separate benzene ring; results in **low yield**).
   - *Rationale*: Nitrogen atoms adjacent to the carboxyl group can chelate metal ions, strengthening metal-ligand interactions and enhancing catalytic efficiency.

4. **Rule 4**: Modifiers that are **aliphatic carboxylic acids with thiol (–SH) groups** lead to **high yield**.
   - *Example*: **3-sulfanylpropanoic acid**.
   - *Counter-Example*: **4-sulfanylbenzoic acid** (thiol group on an aromatic ring; results in **low yield**).
   - *Rationale*: Thiol groups are strong ligands for metal coordination. In aliphatic chains, they provide effective metal-sulfur interactions without significant steric hindrance.

5. **Rule 5**: Modifiers that are **aromatic carboxylic acids with electron-withdrawing nitro (–NO₂) or halomethyl (–CH₂Hal) groups at the para position** lead to **high yield**.
   - *Examples*: **4-nitrobenzoic acid**, **4-(bromomethyl)benzoic acid**.
   - *Counter-Example*: **4-methylbenzoic acid** (electron-donating methyl group; results in **low yield**).
   - *Rationale*: Electron-withdrawing groups increase the acidity of the carboxylic acid, enhancing its ability to coordinate with metal ions and improving catalytic performance.

6. **Rule 6**: Modifiers that are **medium-chain aliphatic carboxylic acids (6 to 8 carbons) without additional polar functional groups** lead to **high yield**.
   - *Example*: **Octanoic acid**.
   - *Counter-Examples*: **7-hydroxyheptanoic acid**, **8-aminooctanoic acid** (contain polar groups; result in **low yield**).
   - *Rationale*: Unsubstituted aliphatic chains interact favorably with the catalyst surface, promoting efficient metal-ligand interactions without steric hindrance from polar substituents.

7. **Rule 7**: Modifiers that are **aromatic carboxylic acids with ortho-substituted hydroxyl (–OH) and formyl (–CHO) groups capable of intramolecular hydrogen bonding** result in **low yield**.
   - *Examples*: **5-formyl-2-hydroxybenzoic acid**, **2-[(4-hydroxybenzoyl)amino]acetic acid**.
   - *Rationale*: Intramolecular hydrogen bonding reduces the availability of the carboxylate group for coordination with metal ions, weakening metal-ligand interactions and decreasing catalytic activity.

8. **Rule 8**: Modifiers that are **amino acids or peptides with acylated amino groups or additional amide linkages** lead to **low yield**.
   - *Examples*: **(2S)-6-acetamido-2-aminohexanoic acid**, **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid**.
   - *Rationale*: Acylation and additional amide bonds decrease the availability of lone pairs on nitrogen atoms for metal coordination, weakening ligand interactions and diminishing catalytic effectiveness.

9. **Rule 9**: Modifiers that are **compounds with multiple ether linkages in aliphatic chains terminating with a carboxylic acid group** result in **low yield**.
   - *Examples*: **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**, **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**.
   - *Rationale*: Ether linkages increase molecular flexibility and solubility but may hinder effective metal-ligand coordination due to conformational variability, reducing catalyst efficiency.

10. **Rule 10**: Modifiers that are **heavily fluorinated aliphatic carboxylic acids** lead to **low yield**.
    - *Example*: **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**.
    - *Rationale*: Fluorine's strong electron-withdrawing effect decreases electron density on coordinating atoms, weakening metal-ligand interactions and reducing catalytic activity.

11. **Rule 11**: Modifiers that are **aromatic carboxylic acids connected through short aliphatic chains (3 carbons or fewer) to hydroxy-substituted aromatic rings** result in **low yield**.
    - *Example*: **3-(4-hydroxyphenyl)propanoic acid**.
    - *Counter-Example*: **5-(4-hydroxyphenyl)pentanoic acid** (longer chain; results in **high yield**).
    - *Rationale*: Short chains may not provide sufficient flexibility for optimal interaction with the catalyst surface, while longer chains allow better alignment and coordination.

12. **Rule 12**: Modifiers that are **α-amino acids with large aromatic side chains containing heterocycles (e.g., indole ring)** lead to **high yield**.
    - *Example*: **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid (Tryptophan)**.
    - *Counter-Example*: **(2S)-2-amino-3-phenylpropanoic acid (Phenylalanine)** (results in **low yield**).
    - *Rationale*: The presence of heterocyclic aromatic side chains may enhance stacking interactions or coordinate with metal centers, improving catalytic activity.

13. **Rule 13**: Modifiers that are **compounds with carbonyl groups (e.g., ketones, aldehydes) adjacent to the carboxylic acid** lead to **low yield**.
    - *Examples*: **4-oxoheptanedioic acid**, **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid**.
    - *Rationale*: Adjacent carbonyl groups can participate in intramolecular resonance or hydrogen bonding, reducing the availability of the carboxylate for metal coordination and diminishing catalytic performance.

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13
0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6; Test Accuracy: 1.0
    Train Support: 0.11428571428571428; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 1.9444444444444446; Test Lift: NONE
    Train Leverage: 0.05551020408163266; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and substructures
    
    carboxylic_acid = '[CX3](=O)[OX1H0,H1]'  # Carboxylic acid group
    
    amino_group = '[NX3H2]'  # Primary amine group
    
    alpha_amino_acid = '[NX3H2][CX4H][CX3](=O)[OX1H0,H1]'  # Pattern for α-amino acid
    
    # Patterns for Rule 1
    # α-amino acids with two carboxyl groups (dicarboxylic amino acids)
    # We will check for the alpha amino acid pattern and that there are at least two carboxylic acid groups
    
    # Patterns for Rule 2
    # Para-substituted benzoic acids with electron-donating amino (–NH₂) or hydroxyl (–OH) groups
    para_amino_benzoic_acid = 'c1ccc(cc1[NH2])C(=O)[OH]'  # Para-amino benzoic acid
    
    para_hydroxy_benzoic_acid = 'c1ccc(cc1[OH])C(=O)[OH]'  # Para-hydroxy benzoic acid
    
    # Patterns for Rule 3
    # Heteroaromatic carboxylic acids with nitrogen atoms in the ring adjacent to the carboxyl group
    heteroaromatic_nitrogen_ring = '[n][c]1[c,c][c,c][c,c][c,c]1C(=O)[OH]'  # Simplified heteroaromatic ring with nitrogen adjacent to carboxyl group
    
    # Patterns for Rule 4
    # Aliphatic carboxylic acids with thiol (–SH) groups
    thiol_group = '[SX2H]'  # Thiol group
    
    # Patterns for Rule 5
    # Aromatic carboxylic acids with electron-withdrawing nitro (–NO₂) or halomethyl (–CH₂Hal) groups at the para position
    para_nitro_benzoic_acid = 'c1ccc(cc1[N+](=O)[O-])C(=O)[OH]'  # Para-nitro benzoic acid
    
    halomethyl = 'c1ccc(cc1C[Hal])C(=O)[OH]'  # Halomethyl group on aromatic ring
    halogen = '[F,Cl,Br,I]'  # Halogens
    
    # Patterns for Rule 6
    # Medium-chain aliphatic carboxylic acids (6 to 8 carbons) without additional polar functional groups
    aliphatic_chain_6 = 'CCCCCC(=O)[OH]'  # Hexanoic acid
    aliphatic_chain_7 = 'CCCCCCC(=O)[OH]'  # Heptanoic acid
    aliphatic_chain_8 = 'CCCCCCCC(=O)[OH]'  # Octanoic acid
    
    # Exclude patterns for Rule 6
    exclude_polar_groups = '[#6][!#6;!#1][#6]'  # Exclude if there are atoms other than carbon and hydrogen
    
    # Patterns for Rule 7
    # Aromatic carboxylic acids with ortho-substituted hydroxyl (–OH) and formyl (–CHO) groups
    ortho_hydroxy_formyl_benzoic_acid = 'c1cc(O)c(C=O)cc1C(=O)[OH]'  # Simplified pattern
    
    # Patterns for Rule 8
    # Amino acids or peptides with acylated amino groups or additional amide linkages
    acylated_amino_group = '[NX3][CX3](=O)'  # Amide linkage
    
    # Patterns for Rule 9
    # Compounds with multiple ether linkages in aliphatic chains terminating with a carboxylic acid group
    multiple_ether_linkages = '[#6][OX2][#6][OX2][#6][OX2][#6](=O)[OH]'  # Multiple ethers ending with carboxylic acid
    
    # Patterns for Rule 10
    # Heavily fluorinated aliphatic carboxylic acids
    heavily_fluorinated = '[CX4](F)(F)(F)[CF]'  # Example pattern
    
    # Patterns for Rule 11
    # Aromatic carboxylic acids connected through short aliphatic chains (3 carbons or fewer) to hydroxy-substituted aromatic rings
    short_chain_hydroxy_aromatic = 'c1ccc(cc1)CCCc2ccc(O)cc2'  # Simplified pattern
    
    # Patterns for Rule 12
    # α-Amino acids with large aromatic side chains containing heterocycles (e.g., indole ring)
    indole_side_chain = '[CX3](=O)[OX1H][CX4H][CX3](c1c[cH]c2c1cccc2)[NX3H2]'  # Simplified pattern for tryptophan
    
    # Patterns for Rule 13
    # Compounds with carbonyl groups adjacent to the carboxylic acid
    carbonyl_adjacent_carboxylic_acid = '[CX3](=O)[CX3](=O)[OX1H0,H1]'  # Two carbonyls adjacent
    
    # Now, compile the SMARTS patterns
    rules = [
        {
            'number': 1,
            'description': 'α-Amino acids with two carboxyl groups (dicarboxylic amino acids)',
            'patterns': [
                alpha_amino_acid
            ],
            'conditions': {
                'carboxylic_acid_count': 2
            },
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Para-substituted benzoic acids with electron-donating amino (–NH₂) or hydroxyl (–OH) groups',
            'patterns': [
                para_amino_benzoic_acid,
                para_hydroxy_benzoic_acid
            ],
            'prediction':1
        },
        {
            'number': 3,
            'description': 'Heteroaromatic carboxylic acids with nitrogen atoms in the ring adjacent to the carboxyl group',
            'patterns': [
                heteroaromatic_nitrogen_ring
            ],
            'prediction':1
        },
        {
            'number': 4,
            'description': 'Aliphatic carboxylic acids with thiol (–SH) groups',
            'patterns': [
                thiol_group,
                carboxylic_acid
            ],
            'prediction':1
        },
        {
            'number':5,
            'description':'Aromatic carboxylic acids with electron-withdrawing nitro (–NO₂) or halomethyl (–CH₂Hal) groups at the para position',
            'patterns':[
                para_nitro_benzoic_acid,
                halomethyl
            ],
            'prediction':1
        },
        {
            'number':6,
            'description':'Medium-chain aliphatic carboxylic acids (6 to 8 carbons) without additional polar functional groups',
            'patterns':[
                aliphatic_chain_6,
                aliphatic_chain_7,
                aliphatic_chain_8
            ],
            'exclude_patterns':[
                exclude_polar_groups
            ],
            'prediction':1
        },
        {
            'number':7,
            'description':'Aromatic carboxylic acids with ortho-substituted hydroxyl (–OH) and formyl (–CHO) groups',
            'patterns':[
                ortho_hydroxy_formyl_benzoic_acid
            ],
            'prediction': -1
        },
        {
            'number':8,
            'description':'Amino acids or peptides with acylated amino groups or additional amide linkages',
            'patterns':[
                acylated_amino_group
            ],
            'prediction': -1
        },
        {
            'number':9,
            'description':'Compounds with multiple ether linkages in aliphatic chains terminating with a carboxylic acid group',
            'patterns':[
                multiple_ether_linkages
            ],
            'prediction': -1
        },
        {
            'number':10,
            'description':'Heavily fluorinated aliphatic carboxylic acids',
            'patterns':[
                heavily_fluorinated
            ],
            'prediction': -1
        },
        {
            'number':11,
            'description':'Aromatic carboxylic acids connected through short aliphatic chains (3 carbons or fewer) to hydroxy-substituted aromatic rings',
            'patterns':[
                short_chain_hydroxy_aromatic
            ],
            'prediction': -1
        },
        {
            'number':12,
            'description':'α-Amino acids with large aromatic side chains containing heterocycles (e.g., indole ring)',
            'patterns':[
                alpha_amino_acid,
                indole_side_chain
            ],
            'prediction':1
        },
        {
            'number':13,
            'description':'Compounds with carbonyl groups adjacent to the carboxylic acid',
            'patterns':[
                carbonyl_adjacent_carboxylic_acid
            ],
            'prediction': -1
        }
    ]
    
    # Compile the SMARTS patterns
    for rule in rules:
        compiled_patterns = [Chem.MolFromSmarts(pat) for pat in rule.get('patterns',[])]
        rule['compiled_patterns'] = compiled_patterns
        
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_exclude_patterns = [Chem.MolFromSmarts(pat) for pat in rule.get('exclude_patterns',[])]
            rule['compiled_exclude_patterns'] = compiled_exclude_patterns
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for pat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for pat in rule['compiled_patterns']:
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                # Additional conditions
                if match and 'conditions' in rule:
                    conditions = rule['conditions']
                    # For example, check carboxylic acid count
                    if 'carboxylic_acid_count' in conditions:
                        carboxylic_acid_pat = Chem.MolFromSmarts(carboxylic_acid)
                        matches = mol.GetSubstructMatches(carboxylic_acid_pat)
                        if len(matches) < conditions['carboxylic_acid_count']:
                            match = False
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

1. **Rule 1**: Modifiers that are **α-amino acids without bulky hydrophobic side chains or acyl modifications** lead to **high yield**.
   - *Examples*:
     - **(2S)-2-aminobutanedioic acid** (Aspartic acid)
     - **(2S)-2-aminopentanedioic acid** (Glutamic acid)
     - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (Tryptophan)
     - **5-aminopentanoic acid**
   - *Counter-Examples*:
     - **(2S)-2-amino-3-phenylpropanoic acid** (Phenylalanine; bulky hydrophobic side chain; results in **low yield**)
     - **(2S)-6-acetamido-2-aminohexanoic acid** (Acylated amino group; results in **low yield**)
   - *Rationale*: α-Amino acids provide both amino and carboxyl groups for effective metal coordination, enhancing catalytic activity. Bulky hydrophobic side chains or acyl modifications can hinder metal-ligand interactions.

2. **Rule 2**: Modifiers that are **aromatic carboxylic acids with functional groups capable of metal coordination (e.g., amino, nitro, hydroxyl) at the para position** lead to **high yield**.
   - *Examples*:
     - **4-aminobenzoic acid**
     - **4-nitrobenzoic acid**
     - **5-(4-hydroxyphenyl)pentanoic acid**
   - *Counter-Example*:
     - **4-methylbenzoic acid** (Methyl group lacks coordination ability; results in **low yield**)
   - *Rationale*: Functional groups like amino, nitro, and hydroxyl can coordinate with metal centers, enhancing catalyst performance. Electron-donating or withdrawing nature affects coordination but is less critical than the group's ability to interact with metals.

3. **Rule 3**: Modifiers that are **heterocyclic carboxylic acids containing nitrogen atoms in the ring directly attached to the carboxyl group** lead to **high yield**.
   - *Examples*:
     - **Pyridine-3-carboxylic acid** (Nicotinic acid)
     - **1H-pyrazole-4-carboxylic acid**
     - **2-oxo-1H-pyridine-4-carboxylic acid**
   - *Counter-Example*:
     - **4-pyridin-4-ylbenzoic acid** (Pyridine ring not directly connected to carboxyl group; results in **low yield**)
   - *Rationale*: Nitrogen atoms in heterocycles can serve as additional coordination sites, strengthening metal-ligand interactions and enhancing catalytic efficiency.

4. **Rule 4**: Modifiers that are **unsubstituted medium-chain aliphatic carboxylic acids (6 to 8 carbons)** without additional polar groups lead to **high yield**.
   - *Example*:
     - **Octanoic acid**
   - *Counter-Examples*:
     - **7-hydroxyheptanoic acid** (Hydroxyl group; results in **low yield**)
     - **7-aminoheptanoic acid** (Amino group; results in **low yield**)
   - *Rationale*: Unsubstituted aliphatic chains interact favorably with the catalyst surface, promoting efficient metal-ligand interactions. Polar groups can interfere with metal coordination due to competitive binding or steric hindrance.

5. **Rule 5**: Modifiers that are **aliphatic carboxylic acids with thiol (–SH) groups** lead to **high yield** when the thiol group is on an aliphatic chain.
   - *Example*:
     - **3-sulfanylpropanoic acid**
   - *Counter-Example*:
     - **4-sulfanylbenzoic acid** (Thiol group on aromatic ring; results in **low yield**)
   - *Rationale*: Thiol groups are strong ligands for metal coordination. In aliphatic chains, they provide effective metal-sulfur interactions without significant steric hindrance from aromatic structures.

6. **Rule 6**: Modifiers that are **compounds with multiple ether linkages in aliphatic chains terminating with a carboxylic acid group** result in **low yield**.
   - *Examples*:
     - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**
     - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**
   - *Rationale*: Ether linkages increase molecular flexibility and solubility but may hinder effective metal-ligand coordination due to conformational variability and the electron-donating nature of oxygen atoms, which can interfere with metal binding sites.

7. **Rule 7**: Modifiers that are **amino acids or peptides with acylated amino groups or additional amide linkages** lead to **low yield**.
   - *Examples*:
     - **(2S)-6-acetamido-2-aminohexanoic acid**
     - **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid**
   - *Rationale*: Acylation of amino groups and the presence of additional amide bonds decrease the availability of lone pairs on nitrogen atoms for metal coordination, weakening ligand interactions and diminishing catalytic effectiveness.

8. **Rule 8**: Modifiers that are **heavily fluorinated aliphatic carboxylic acids** result in **low yield**.
   - *Example*:
     - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**
   - *Rationale*: The strong electron-withdrawing effect of fluorine reduces electron density on coordinating atoms, weakening metal-ligand interactions and reducing catalytic activity.

9. **Rule 9**: Modifiers that are **aromatic carboxylic acids with formyl (–CHO) groups adjacent to the carboxyl group** lead to **low yield**.
   - *Examples*:
     - **4-formylbenzoic acid**
     - **5-formyl-2-hydroxybenzoic acid**
   - *Rationale*: The presence of a formyl group adjacent to the carboxyl group can participate in intramolecular resonance or hydrogen bonding, reducing the availability of the carboxylate for coordination with metal ions and decreasing catalytic performance.

10. **Rule 10**: Modifiers that are **aromatic carboxylic acids connected through aliphatic chains of four or more carbons to additional functional groups** lead to **high yield**.
    - *Example*:
      - **5-(4-hydroxyphenyl)pentanoic acid**
    - *Counter-Example*:
      - **3-(4-hydroxyphenyl)propanoic acid** (Shorter chain; results in **low yield**)
    - *Rationale*: Longer aliphatic chains offer greater flexibility and optimal spatial orientation for the functional groups to interact with the catalyst, enhancing metal-ligand coordination.

**End of Rules**

---

**Explanation and Rationale**:

- **Coverage and Balance**: The above rules are designed to cover a broad range of the dataset while maintaining a balance between simplicity and specificity. They collectively account for the majority of the observed outcomes in yield based on modifier structure.

- **Rule Modifications**:
  - **Rule 1** has been refined to exclude modifiers with bulky hydrophobic side chains or acyl modifications, providing clarity on exceptions like phenylalanine.
  - **Rule 2** emphasizes the presence of functional groups capable of metal coordination at the para position, regardless of their electron-donating or withdrawing nature, aligning with observed data (e.g., both amino and nitro groups lead to high yield).
  - **Rule 5** specifies that thiol groups on aliphatic chains lead to high yield, distinguishing from aromatic thiol compounds that result in low yield.
  - **Rule 9** focuses on aromatic carboxylic acids with adjacent formyl groups, which consistently lead to low yield due to decreased availability of the carboxylate group for coordination.
  - **Rule 10** introduces the importance of chain length in aliphatic linkers between functional groups and the carboxylic acid, explaining variations in yield based on spatial considerations.

- **Abandoned/Improved Rules**:
  - Rules with inconsistencies or poor coverage have been modified or replaced to enhance predictive accuracy. For instance, previous rules attempting to generalize the effect of electron-withdrawing groups were found to be inconsistent with the dataset and thus adjusted.

- **Physical-Chemical Considerations**:
  - The rules take into account underlying physical-chemical properties such as metal coordination potential, steric hindrance, electron density, and molecular flexibility.
  - Functional groups capable of acting as ligands (e.g., amino, hydroxyl, nitro, thiol) are highlighted for their role in enhancing metal-ligand interactions.
  - Structural features that impede coordination (e.g., bulky side chains, acylation, heavy fluorination) are associated with low yield.

---

By applying these refined rules, one can predict whether a given modifier is likely to result in a high or low yield in the reaction, based on its structural features. The rules prioritize clear and direct relationships between substructures and yield outcomes, aiming for practical applicability in selecting effective modifiers for the catalyst system.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10
0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,1
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0
1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,-1,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0
1,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6571428571428571; Test Accuracy: 1.0
    Train Support: 0.047619047619047616; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 2.0016339869281046; Test Lift: NONE
    Train Leverage: 0.023537414965986398; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for common functional groups
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    amino_group = '[NX3H2]'
    n_acylated_amino = '[NX3][CX3](=O)'
    aromatic_ring = 'a'
    thiol_group = '[SX2H]'
    ether_linkage = '[#6][OX2][#6]'
    aldehyde_group = '[CX3H1](=O)'
    fluorine_atom = '[F]'
    # Compile SMARTS patterns
    carboxylic_acid_pat = Chem.MolFromSmarts(carboxylic_acid)
    amino_group_pat = Chem.MolFromSmarts(amino_group)
    n_acylated_amino_pat = Chem.MolFromSmarts(n_acylated_amino)
    aromatic_ring_pat = Chem.MolFromSmarts(aromatic_ring)
    thiol_group_pat = Chem.MolFromSmarts(thiol_group)
    ether_linkage_pat = Chem.MolFromSmarts(ether_linkage)
    aldehyde_group_pat = Chem.MolFromSmarts(aldehyde_group)
    fluorine_atom_pat = Chem.MolFromSmarts(fluorine_atom)
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'High yield: α-amino acids without bulky hydrophobic side chains or acyl modifications',
            'patterns': [
                carboxylic_acid_pat,
                amino_group_pat
            ],
            'exclude_patterns': [
                n_acylated_amino_pat,
                Chem.MolFromSmarts('[CX4H]([NX3H2])([CX3](=O)[OX2H1])[a]')  # α-carbon attached to aromatic ring
            ],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'High yield: Aromatic carboxylic acids with metal-coordinating groups at para position',
            'patterns': [
                Chem.MolFromSmarts('[c]1ccc([NX3H2,NX3+0](=O)[O-,OX1-,OX2])cc1[CX3](=O)[OX1H0-,OX2H1]'),  # Aromatic ring with para amino or nitro group and carboxylic acid
                Chem.MolFromSmarts('[c]1ccc([OX2H])cc1[CX3](=O)[OX1H0-,OX2H1]')  # Aromatic ring with para hydroxyl group and carboxylic acid
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'High yield: Heterocyclic carboxylic acids with ring nitrogen directly attached to carboxyl group',
            'patterns': [
                Chem.MolFromSmarts('[n][c][c][c][c][CX3](=O)[OX1H0-,OX2H1]'),  # Heterocycle with nitrogen and carboxylic acid directly attached
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'High yield: Unsubstituted medium-chain aliphatic carboxylic acids (6 to 8 carbons) without additional polar groups',
            'patterns': [
                Chem.MolFromSmarts('[CH3][CH2]{4,6}[CX3](=O)[OX1H0-,OX2H1]')  # Aliphatic chain of 5-7 carbons ending with carboxylic acid
            ],
            'exclude_patterns': [
                amino_group_pat,
                thiol_group_pat,
                ether_linkage_pat
            ],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'High yield: Aliphatic carboxylic acids with thiol groups on the aliphatic chain',
            'patterns': [
                carboxylic_acid_pat,
                thiol_group_pat
            ],
            'exclude_patterns': [
                aromatic_ring_pat  # Exclude aromatic rings
            ],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Low yield: Compounds with multiple ether linkages in aliphatic chains terminating with a carboxylic acid group',
            'patterns': [
                carboxylic_acid_pat,
                Chem.MolFromSmarts('([#6][OX2]){2,}[#6]')  # At least two ether linkages in a chain
            ],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Low yield: Amino acids or peptides with acylated amino groups or additional amide linkages',
            'patterns': [
                carboxylic_acid_pat,
                Chem.MolFromSmarts('[NX3][CX3](=O)')  # Acylated amino group
            ],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Low yield: Heavily fluorinated aliphatic carboxylic acids',
            'patterns': [
                carboxylic_acid_pat,
                fluorine_atom_pat
            ],
            'count_threshold': {fluorine_atom: 3},  # At least 3 fluorine atoms
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Low yield: Aromatic carboxylic acids with formyl groups adjacent to the carboxyl group',
            'patterns': [
                Chem.MolFromSmarts('c1cc([CX3H](=O))ccc1[CX3](=O)[OX1H0-,OX2H1]')  # Aromatic ring with aldehyde and carboxylic acid adjacent
            ],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'High yield: Aromatic carboxylic acids connected through aliphatic chains of four or more carbons to additional functional groups',
            'patterns': [
                Chem.MolFromSmarts('[c][C][CH2][CH2][CH2][CX3](=O)[OX1H0-,OX2H1]')  # Aromatic ring connected via 4-carbon chain to carboxylic acid
            ],
            'prediction': 1
        }
    ]
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for pat in rule['exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for pat in rule['patterns']:
                    matches = mol.GetSubstructMatches(pat)
                    if not matches:
                        match = False
                        break
                    # If a count threshold is specified for this pattern
                    if 'count_threshold' in rule and pat in rule['count_threshold']:
                        threshold = rule['count_threshold'][pat]
                        if len(matches) < threshold:
                            match = False
                            break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------