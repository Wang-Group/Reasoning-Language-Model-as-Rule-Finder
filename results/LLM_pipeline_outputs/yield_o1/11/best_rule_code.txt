def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    
    # Carboxylic acid group (-COOH)
    carboxylic_acid_smarts = '[CX3](=O)[OX2H1]'
    carboxylic_acid_pat = Chem.MolFromSmarts(carboxylic_acid_smarts)

    # Amino group (-NH2 or -NH-), excluding amides
    amine_smarts = '[NX3;!$(N-C=O)]'
    amine_pat = Chem.MolFromSmarts(amine_smarts)

    # Aldehyde group (-CHO)
    aldehyde_smarts = '[CX3H1](=O)'
    aldehyde_pat = Chem.MolFromSmarts(aldehyde_smarts)
    
    # Amide linkage
    amide_smarts = '[NX3][CX3](=O)[#6]'
    amide_pat = Chem.MolFromSmarts(amide_smarts)

    # Heterocyclic aromatic ring with nitrogen directly attached to carboxylic acid
    hetero_aromatic_carboxylic_acid_smarts = '[n][C](=O)[O;H1]'
    hetero_aromatic_carboxylic_acid_pat = Chem.MolFromSmarts(hetero_aromatic_carboxylic_acid_smarts)

    # Thiol group (-SH)
    thiol_smarts = '[SX2H]'
    thiol_pat = Chem.MolFromSmarts(thiol_smarts)

    # Perfluoroalkyl chain
    perfluoroalkyl_smarts = '[CX4;R0][CX4;R0](F)(F)(F)'
    perfluoroalkyl_pat = Chem.MolFromSmarts(perfluoroalkyl_smarts)

    # Ether linkage
    ether_smarts = '[#6][OX2;!$(O=C)][#6]'
    ether_pat = Chem.MolFromSmarts(ether_smarts)

    # Ketone adjacent to carboxylic acid attached to aromatic ring
    ketone_adjacent_aromatic_carboxylic_acid_smarts = 'c[C](=O)[C](=O)[O;H1]'
    ketone_adjacent_aromatic_carboxylic_acid_pat = Chem.MolFromSmarts(ketone_adjacent_aromatic_carboxylic_acid_smarts)

    # Electron-withdrawing groups (EWGs) on aromatic ring
    ewg_smarts_list = [
        '[N+](=O)[O-]',  # Nitro group
        '[F,Cl,Br,I]'
    ]
    ewg_pats = [Chem.MolFromSmarts(smarts) for smarts in ewg_smarts_list]

    # Electron-donating groups (EDGs) on aromatic ring
    edg_smarts_list = [
        '[OX2H]',      # Hydroxy group
        '[OX2][CH3]',  # Methoxy group
        '[CH3]'
    ]
    edg_pats = [Chem.MolFromSmarts(smarts) for smarts in edg_smarts_list]

    # Aromatic carboxylic acid group attached to aromatic ring
    aromatic_carboxylic_acid_smarts = 'c[C](=O)[O;H1]'
    aromatic_carboxylic_acid_pat = Chem.MolFromSmarts(aromatic_carboxylic_acid_smarts)

    # Simple aliphatic carboxylic acid without additional functional groups
    simple_aliphatic_carboxylic_acid_smarts = '[CX3](=O)[OX2H1]'
    simple_aliphatic_carboxylic_acid_pat = Chem.MolFromSmarts(simple_aliphatic_carboxylic_acid_smarts)

    # Other functional groups to exclude in Rule 12
    other_functional_groups_smarts = ['[NX3;!$(N-C=O)]', '[SX2H]', '[OX2H]', '[#7]']
    other_functional_groups_pats = [Chem.MolFromSmarts(smarts) for smarts in other_functional_groups_smarts]

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*12)
            continue
        row = []
        try:
            # Rule 1: Modifiers containing a carboxylic acid group and an amino group within four carbons of the carboxyl group tend to give a high yield.
            rule1_match = 0
            carboxy_matches = mol.GetSubstructMatches(carboxylic_acid_pat)
            amine_matches = mol.GetSubstructMatches(amine_pat)
            if carboxy_matches and amine_matches:
                for c_match in carboxy_matches:
                    c_idx = c_match[0]
                    for a_match in amine_matches:
                        a_idx = a_match[0]
                        # Check if the amine is an amide nitrogen
                        is_amide = False
                        a_atom = mol.GetAtomWithIdx(a_idx)
                        for nbr in a_atom.GetNeighbors():
                            bond = mol.GetBondBetweenAtoms(a_idx, nbr.GetIdx())
                            if bond.GetBondType() == Chem.rdchem.BondType.DOUBLE and nbr.GetAtomicNum() == 6:
                                is_amide = True
                                break
                        if is_amide:
                            continue
                        # Calculate the shortest path length between c_idx and a_idx
                        path = Chem.GetShortestPath(mol, c_idx, a_idx)
                        # Count the number of carbon atoms in the path (excluding start and end atoms)
                        carbon_count = sum(1 for idx in path[1:-1] if mol.GetAtomWithIdx(idx).GetAtomicNum() == 6)
                        if 0 <= carbon_count <= 4:
                            rule1_match = 1
                            break
                    if rule1_match == 1:
                        break
            row.append(rule1_match)

            # Rule 2: Modifiers containing a carboxylic acid group attached directly to an aromatic ring with an electron-withdrawing substituent tend to give a high yield.
            rule2_match = 0
            aromatic_carboxy_matches = mol.GetSubstructMatches(aromatic_carboxylic_acid_pat)
            if aromatic_carboxy_matches:
                for ac_match in aromatic_carboxy_matches:
                    c_idx = ac_match[0]
                    # Get the aromatic ring that contains the carboxyl carbon
                    ring_info = mol.GetRingInfo()
                    rings = ring_info.AtomRings()
                    aromatic_ring = None
                    for ring in rings:
                        if c_idx in ring and all(mol.GetAtomWithIdx(idx).GetIsAromatic() for idx in ring):
                            aromatic_ring = ring
                            break
                    if aromatic_ring:
                        # Check if any atom in the ring has an EWG substituent
                        ewg_found = False
                        for ewg_pat in ewg_pats:
                            ewg_matches = mol.GetSubstructMatches(ewg_pat)
                            for ewg_match in ewg_matches:
                                ewg_idx = ewg_match[0]
                                if ewg_idx in aromatic_ring:
                                    ewg_found = True
                                    break
                            if ewg_found:
                                break
                        if ewg_found:
                            rule2_match = 1
                            break
            row.append(rule2_match)
            
            # Rule 3: Modifiers containing a carboxylic acid group and an aldehyde group tend to give a low yield.
            rule3_match = 0
            aldehyde_matches = mol.GetSubstructMatches(aldehyde_pat)
            if carboxy_matches and aldehyde_matches:
                rule3_match = -1
            row.append(rule3_match)

            # Rule 4: Modifiers containing amide linkages or peptide bonds tend to give a low yield.
            rule4_match = 0
            amide_matches = mol.GetSubstructMatches(amide_pat)
            if amide_matches:
                rule4_match = -1
            row.append(rule4_match)

            # Rule 5: Modifiers containing heterocyclic aromatic rings with nitrogen atoms directly attached to a carboxylic acid group tend to give a high yield.
            rule5_match = 0
            hetero_aromatic_ca_matches = mol.GetSubstructMatches(hetero_aromatic_carboxylic_acid_pat)
            if hetero_aromatic_ca_matches:
                rule5_match = 1
            row.append(rule5_match)

            # Rule 6: Modifiers containing a carboxylic acid group and a thiol group in close proximity tend to give a high yield.
            rule6_match = 0
            thiol_matches = mol.GetSubstructMatches(thiol_pat)
            if carboxy_matches and thiol_matches:
                for c_match in carboxy_matches:
                    c_idx = c_match[0]
                    for s_match in thiol_matches:
                        s_idx = s_match[0]
                        path = Chem.GetShortestPath(mol, c_idx, s_idx)
                        if path and len(path)-1 <= 5:
                            rule6_match = 1
                            break
                    if rule6_match == 1:
                        break
            row.append(rule6_match)

            # Rule 7: Modifiers containing perfluoroalkyl chains attached to a carboxylic acid group tend to give a low yield.
            rule7_match = 0
            perfluoroalkyl_matches = mol.GetSubstructMatches(perfluoroalkyl_pat)
            if perfluoroalkyl_matches:
                rule7_match = -1
            row.append(rule7_match)

            # Rule 8: Modifiers with long aliphatic chains that have terminal amino or hydroxyl groups distant from the carboxylic acid group tend to give a low yield.
            hydroxyl_smarts = '[OX2H]'
            hydroxyl_pat = Chem.MolFromSmarts(hydroxyl_smarts)
            hydroxyl_matches = mol.GetSubstructMatches(hydroxyl_pat)

            rule8_match = 0
            if carboxy_matches:
                terminal_groups = []
                for a_match in amine_matches:
                    a_idx = a_match[0]
                    a_atom = mol.GetAtomWithIdx(a_idx)
                    if len(a_atom.GetNeighbors()) == 1:
                        terminal_groups.append(a_idx)
                for h_match in hydroxyl_matches:
                    h_idx = h_match[0]
                    h_atom = mol.GetAtomWithIdx(h_idx)
                    if len(h_atom.GetNeighbors()) == 1:
                        terminal_groups.append(h_idx)
                for c_match in carboxy_matches:
                    c_idx = c_match[0]
                    for tg_idx in terminal_groups:
                        path = Chem.GetShortestPath(mol, c_idx, tg_idx)
                        if path and len(path)-1 > 6:
                            rule8_match = -1
                            break
                    if rule8_match == -1:
                        break
            row.append(rule8_match)

            # Rule 9: Modifiers containing ether linkages within their structure tend to give a low yield.
            rule9_match = 0
            ether_matches = mol.GetSubstructMatches(ether_pat)
            if ether_matches:
                rule9_match = -1
            row.append(rule9_match)

            # Rule 10: Modifiers containing a ketone group adjacent to a carboxylic acid group attached to an aromatic ring tend to give a high yield.
            rule10_match = 0
            ketone_adjacent_aromatic_ca_matches = mol.GetSubstructMatches(ketone_adjacent_aromatic_carboxylic_acid_pat)
            if ketone_adjacent_aromatic_ca_matches:
                rule10_match = 1
            row.append(rule10_match)

            # Rule 11: Modifiers containing an aromatic ring with electron-donating substituents attached to a carboxylic acid group tend to give a low yield.
            rule11_match = 0
            if aromatic_carboxy_matches:
                edg_found = False
                for ac_match in aromatic_carboxy_matches:
                    c_idx = ac_match[0]
                    ring_info = mol.GetRingInfo()
                    rings = ring_info.AtomRings()
                    aromatic_ring = None
                    for ring in rings:
                        if c_idx in ring and all(mol.GetAtomWithIdx(idx).GetIsAromatic() for idx in ring):
                            aromatic_ring = ring
                            break
                    if aromatic_ring:
                        for edg_pat in edg_pats:
                            edg_matches = mol.GetSubstructMatches(edg_pat)
                            for edg_match in edg_matches:
                                edg_idx = edg_match[0]
                                if edg_idx in aromatic_ring:
                                    edg_found = True
                                    break
                            if edg_found:
                                break
                    if edg_found:
                        break
                if edg_found:
                    rule11_match = -1
            row.append(rule11_match)

            # Rule 12: Modifiers that are simple aliphatic carboxylic acids without additional functional groups tend to give a high yield.
            rule12_match = 0
            simple_carboxy_matches = mol.GetSubstructMatches(simple_aliphatic_carboxylic_acid_pat)
            if simple_carboxy_matches:
                other_fg_present = False
                for pat in other_functional_groups_pats:
                    if mol.HasSubstructMatch(pat):
                        other_fg_present = True
                        break
                if not other_fg_present:
                    rule12_match = 1
            row.append(rule12_match)

        except Exception:
            # In case of any error, append zeros for all rules
            row = [0]*12
        results.append(row)

    df = pd.DataFrame(results, columns=[f'Rule {i+1}' for i in range(12)])
    return df