def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and structures
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    
    # Amino group (-NH2)
    amino_group = '[NX3;H2]'
    
    # Alpha amino acid backbone: N-C-C(=O)O
    alpha_amino_acid = '[NX3;H2][CX4][CX3](=O)[OX2H1]'
    
    # Second carboxylic acid group not connected to alpha carbon
    second_carboxylic_acid = '[CX3](=O)[OX2H1]'
    
    # Aromatic ring (benzene)
    benzene_ring = '[c]1[c][c][c][c][c]1'
    
    # Electron-withdrawing groups (EWGs)
    nitro_group = '[NX3](=O)=O'
    halogen = '[F,Cl,Br,I]'
    trifluoromethyl = '[CX4](F)(F)F'
    
    # Electron-donating groups (EDGs)
    methoxy_group = '[OX2][CH3]'
    methyl_group = '[CH3]'
    hydroxyl_group = '[OX2H]'
    
    # Aldehyde group
    aldehyde_group = '[CX3H1](=O)'
    
    # Long hydrophobic chain (6 or more carbons)
    long_hydrophobic_chain = '[CH2][CH2][CH2][CH2][CH2][CH2]'
    
    # Polar functional groups on chain
    chain_hydroxyl = '[CH2][CH2][CH2][CH2][CH2][OX2H]'
    chain_amino = '[CH2][CH2][CH2][CH2][CH2][NX3;H2]'
    chain_thiol = '[CH2][CH2][CH2][CH2][CH2][SX2H]'
    short_chain_polar = '[CH2][CH2][CH2][OX2H,NX3;H2,SX2H]'
    
    # Fluorinated alkyl chains
    fluorinated_alkyl_chain = '[CX4](F)(F)(F)'
    
    # Pyridine ring directly attached to carboxylic acid
    pyridine_carboxylic_acid = 'n1ccccc1C(=O)[OX2H1]'
    
    # Pyridine ring attached via additional aromatic ring
    extended_pyridine = 'n1cccc1[c]cC(=O)[OX2H1]'
    
    # Thiol group on aromatic ring
    aromatic_thiol = '[c][SX2H]'
    
    # Thiol group on short aliphatic chain
    aliphatic_thiol = '[CH2][CH2][CH2][SX2H]'
    
    # Fused aromatic systems with carboxylic acid
    fused_aromatic_carboxylic_acid = '[c]1[c][c][c2][c][c][c][c2][c]1C(=O)[OX2H1]'
    
    # Aromatic acid with EDG separated by aliphatic chain
    edg_aromatic_chain = '[c][CH2][CH2][CH2][OX2H,NX3;H2]'
    
    # Acylated amino group
    acylated_amino_group = '[NX3][CX3](=O)'
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are Î±-amino dicarboxylic acids (amino acids with two carboxylic acid groups).',
            'patterns': [
                alpha_amino_acid,  # Alpha amino acid backbone
            ],
            'count_patterns': {
                second_carboxylic_acid: 2  # At least two carboxylic acid groups
            },
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers that are para-substituted benzoic acids with electron-withdrawing groups.',
            'patterns': [
                benzene_ring + 'C(=O)[OX2H1]',  # Benzoic acid
                '[c][c](c[c][c][c])[$(F),$(Cl),$(Br),$(I),' + nitro_group + ',' + trifluoromethyl + ']',  # EWG at para position
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers that are para-substituted benzoic acids with electron-donating groups.',
            'patterns': [
                benzene_ring + 'C(=O)[OX2H1]',  # Benzoic acid
                '[c][c](c[c][c][c])[$(O[CH3]),$(CH3),' + hydroxyl_group + ']',  # EDG at para position
            ],
            'prediction': -1
        },
        {
            'number': 4,
            'description': 'Modifiers that are aromatic carboxylic acids with aldehyde (formyl) groups.',
            'patterns': [
                benzene_ring + 'C(=O)[OX2H1]',  # Benzoic acid
                '[c]' + aldehyde_group,  # Aldehyde group attached to aromatic ring
            ],
            'prediction': -1
        },
        {
            'number': 5,
            'description': 'Modifiers that are aliphatic carboxylic acids with long hydrophobic chains (six carbons or more) without additional polar groups.',
            'patterns': [
                carboxylic_acid,  # Carboxylic acid group
                long_hydrophobic_chain,  # Long hydrophobic chain
            ],
            'exclude_patterns': [
                chain_hydroxyl, chain_amino, chain_thiol  # Exclude polar groups on chain
            ],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers that are aliphatic carboxylic acids with polar functional groups on longer chains (six carbons or more).',
            'patterns': [
                carboxylic_acid,  # Carboxylic acid group
                long_hydrophobic_chain,  # Long chain
                chain_hydroxyl + ',' + chain_amino + ',' + chain_thiol  # Polar groups on chain
            ],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Modifiers that are aliphatic carboxylic acids with polar functional groups on shorter chains (five carbons or fewer).',
            'patterns': [
                carboxylic_acid,  # Carboxylic acid group
                short_chain_polar  # Polar group on short chain
            ],
            'prediction': 1
        },
        {
            'number': 8,
            'description': 'Modifiers containing heavily fluorinated alkyl chains or trifluoromethyl groups.',
            'patterns': [
                fluorinated_alkyl_chain  # Heavily fluorinated groups
            ],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers with pyridine rings directly attached to the carboxylic acid group.',
            'patterns': [
                pyridine_carboxylic_acid  # Pyridine ring with carboxylic acid
            ],
            'prediction': 1
        },
        {
            'number': 10,
            'description': 'Modifiers with pyridine rings attached via an additional aromatic ring.',
            'patterns': [
                extended_pyridine  # Extended pyridine system
            ],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Modifiers with thiol groups on short aliphatic chains (high yield) or thiol groups on aromatic rings (low yield).',
            'patterns': [
                aliphatic_thiol + ',' + carboxylic_acid  # Aliphatic thiol with carboxylic acid
            ],
            'prediction': 1
        },
        {
            'number': 11.1,
            'description': 'Modifiers with thiol groups on aromatic rings.',
            'patterns': [
                aromatic_thiol + ',' + carboxylic_acid  # Aromatic thiol with carboxylic acid
            ],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'Modifiers that are aromatic amino acids with electron-rich heterocyclic side chains (e.g., indole ring).',
            'patterns': [
                '[c][c]n1c([c][c]1)[CX3](=O)[OX2H1]',  # Indole ring with carboxylic acid
            ],
            'prediction': 1
        },
        {
            'number': 12.1,
            'description': 'Modifiers that are aromatic amino acids with simple aromatic side chains.',
            'patterns': [
                '[c][c][c][c][c][c][CX3](=O)[OX2H1]',  # Phenyl ring with carboxylic acid
            ],
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Modifiers with fused aromatic systems containing carboxylic acid groups.',
            'patterns': [
                fused_aromatic_carboxylic_acid  # Fused aromatic carboxylic acid
            ],
            'prediction': 1
        },
        {
            'number': 14,
            'description': 'Modifiers that are aromatic acids with electron-donating groups separated from the carboxylic acid by an aliphatic chain.',
            'patterns': [
                edg_aromatic_chain + ',' + carboxylic_acid  # EDG aromatic chain with carboxylic acid
            ],
            'prediction': 1
        },
        {
            'number': 15,
            'description': 'Modifiers that are amino acids with free amino groups (high yield) vs. acylated amino groups (low yield).',
            'patterns': [
                amino_group + ',' + carboxylic_acid  # Free amino group with carboxylic acid
            ],
            'exclude_patterns': [
                acylated_amino_group  # Exclude acylated amino groups
            ],
            'prediction': 1
        },
        {
            'number': 15.1,
            'description': 'Modifiers with acylated (modified) amino groups.',
            'patterns': [
                acylated_amino_group + ',' + carboxylic_acid  # Acylated amino group with carboxylic acid
            ],
            'prediction': -1
        },
    ]

    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for smarts in rule.get('patterns', []):
            if ',' in smarts:
                group = [Chem.MolFromSmarts(s.strip()) for s in smarts.split(',')]
            else:
                group = [Chem.MolFromSmarts(smarts.strip())]
            compiled_patterns.append(group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for smarts in rule['exclude_patterns']:
                if ',' in smarts:
                    group = [Chem.MolFromSmarts(s.strip()) for s in smarts.split(',')]
                else:
                    group = [Chem.MolFromSmarts(smarts.strip())]
                compiled_excludes.append(group)
            rule['compiled_exclude_patterns'] = compiled_excludes
        # Compile count patterns if any
        if 'count_patterns' in rule:
            compiled_counts = {}
            for smarts, count in rule['count_patterns'].items():
                pat = Chem.MolFromSmarts(smarts.strip())
                compiled_counts[pat] = count
            rule['compiled_count_patterns'] = compiled_counts

    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'compiled_exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check count patterns if any
                if 'compiled_count_patterns' in rule:
                    for pat, count in rule['compiled_count_patterns'].items():
                        matches = mol.GetSubstructMatches(pat)
                        if len(matches) < count:
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for group in rule['compiled_patterns']:
                    group_match = False
                    for pat in group:
                        if mol.HasSubstructMatch(pat):
                            group_match = True
                            break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df
