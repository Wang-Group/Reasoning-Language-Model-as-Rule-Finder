
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: Modifiers that are **α-amino dicarboxylic acids** (amino acids with an amino group on the α-carbon and two carboxyl groups), such as **L-aspartic acid** and **L-glutamic acid**, lead to **high yield**. These compounds can chelate metal ions effectively due to their multiple coordinating sites.

- **Rule 2**: Modifiers that are **ω-amino acids** with a carbon chain length of **5 or fewer carbons** (e.g., **5-aminopentanoic acid**) lead to **high yield**. The proximity of the amino and carboxyl groups allows efficient metal coordination. Those with **chain lengths longer than 5 carbons** (e.g., **7-aminoheptanoic acid**, **8-aminooctanoic acid**) lead to **low yield** due to decreased coordination efficiency and increased flexibility hindering effective binding.

- **Rule 3**: Modifiers that are **aromatic carboxylic acids** with **para-substituents capable of coordinating with metal ions**, such as **amino**, **nitro**, or **bromomethyl** groups (e.g., **4-aminobenzoic acid**, **4-nitrobenzoic acid**, **4-(bromomethyl)benzoic acid**), lead to **high yield**. These substituents enhance metal coordination through additional donor atoms. Modifiers with **non-coordinating substituents** at the para position (e.g., **methyl** or **formyl** groups, as in **4-methylbenzoic acid**, **4-formylbenzoic acid**) lead to **low yield**.

- **Rule 4**: Modifiers that are **heterocyclic carboxylic acids** where the heterocycle contains a **nitrogen atom capable of metal coordination** and is **directly attached** to the carboxyl group (e.g., **pyridine-3-carboxylic acid**, **1H-pyrazole-4-carboxylic acid**) lead to **high yield**. If the heterocycle is connected via additional rings or linkers (e.g., **4-pyridin-4-ylbenzoic acid**), the yield is **low** due to steric hindrance and reduced coordination efficiency.

- **Rule 5**: Modifiers containing **aldehyde functional groups** (e.g., **4-formylbenzoic acid**, **5-formyl-2-hydroxybenzoic acid**) lead to **low yield**. Aldehyde groups can interact unfavorably with the catalyst or interfere with metal coordination.

- **Rule 6**: Modifiers with **thiol (sulfhydryl) groups** on **short aliphatic chains** (e.g., **3-sulfanylpropanoic acid**) lead to **high yield**. The thiol group effectively coordinates with metal ions. Modifiers with **thiol groups on aromatic rings** (e.g., **4-sulfanylbenzoic acid**) lead to **low yield**, likely due to reduced thiol reactivity and steric hindrance.

- **Rule 7**: Modifiers that are **simple saturated aliphatic carboxylic acids** without additional functional groups (e.g., **octanoic acid**) lead to **high yield**. These modifiers do not interfere with metal coordination. In contrast, **long-chain aliphatic carboxylic acids with distal polar functional groups** (e.g., **7-hydroxyheptanoic acid**, **7-aminoheptanoic acid**) lead to **low yield** due to potential intramolecular interactions and steric effects hindering coordination.

- **Rule 8**: Modifiers that are **polyhydroxy carboxylic acids** (e.g., **gluconic acid**) lead to **high yield**. The multiple hydroxyl groups enable strong chelation with metal ions, stabilizing the catalyst.

- **Rule 9**: Modifiers that are **α-amino acids with aromatic side chains lacking additional coordinating groups** (e.g., **L-phenylalanine**) lead to **low yield**. In contrast, those with **heteroaromatic side chains capable of coordination** (e.g., **L-tryptophan** with an indole ring) lead to **high yield** due to additional coordination sites.

- **Rule 10**: Modifiers that are **amino acids with acylated amino groups** (e.g., **N-acetylated amino acids** like **N-acetyllysine**) lead to **low yield**. Acylation blocks the amino group's ability to coordinate with metal ions.

- **Rule 11**: Modifiers containing **trifluoromethyl groups** or other **strong electron-withdrawing groups** (e.g., **4-[(2,2,2-trifluoroacetyl)amino]butanoic acid**) lead to **low yield**. These groups reduce electron density on potential coordinating atoms, hindering effective metal coordination.

- **Rule 12**: Modifiers that are **aliphatic diacids with ketone groups** within the carbon chain (e.g., **4-oxoheptanedioic acid**) lead to **low yield**. The ketone group can interfere with metal coordination or create unfavorable interactions with the catalyst.

- **Rule 13**: Modifiers with **bulky substituents near the carboxyl group** causing **steric hindrance** (e.g., **4-pyridin-4-ylbenzoic acid**, where a bulky pyridyl group is at the para position) lead to **low yield**. Steric effects can impede optimal coordination with the metal center.

- **Rule 14**: Modifiers with **flexible ether linkages and amino groups** (e.g., **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**, **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**) lead to **low yield**. The flexibility and electron-rich ether oxygens may disrupt coordination by forming unintended interactions or causing conformational issues.

- **Rule 15**: Modifiers that are **aromatic carboxylic acids with hydroxyl groups on the aromatic ring adjacent to the carboxyl group** (e.g., **2-[(4-hydroxybenzoyl)amino]acetic acid**, **3-(4-hydroxyphenyl)propanoic acid**) lead to **low yield**. The hydroxyl groups can form strong intramolecular hydrogen bonds or interfere with metal coordination sites.

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6; Test Accuracy: 0.0
    Train Support: 0.0380952380952381; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 2.0588235294117645; Test Lift: NONE
    Train Leverage: 0.019591836734693873; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Initialize results list
    results = []

    # Define the rules with their associated SMARTS patterns and predictions
    rules = [
        # Rule 1: α-amino dicarboxylic acids (e.g., L-aspartic acid, L-glutamic acid) - High yield
        {
            'number': 1,
            'description': 'Modifiers that are α-amino dicarboxylic acids',
            'patterns': ['[NX3H2][CX4H]([*])[CX3](=O)[OX1H]', '[CX3](=O)[OX1H]'],  # Amino acid backbone and additional carboxyl group
            'logic': 'match_amino_dicarboxylic_acid',
            'prediction': 1
        },
        # Rule 2: ω-amino acids with chain length ≤ 5 carbons - High yield; > 5 carbons - Low yield
        # This rule requires counting the chain length between amino and carboxyl groups
        {
            'number': 2,
            'description': 'ω-amino acids with chain length ≤ 5 carbons',
            'patterns': ['[NX3H2]', '[CX3](=O)[OX1H]'],
            'logic': 'omega_amino_acids',
            'prediction': 1,
            'negative_prediction': -1  # For chain length > 5
        },
        # Rule 3: Aromatic carboxylic acids with para-substituents capable of metal coordination - High yield
        {
            'number': 3,
            'description': 'Aromatic carboxylic acids with coordinating para-substituents',
            'patterns': ['c1cc([NX3H2,NX3H1,NX3])ccc1C(=O)O',  # Para-amino benzoic acid
                         'c1cc([NX3+](=O)[O-])ccc1C(=O)O',      # Para-nitro benzoic acid
                         'c1cc(CBr)ccc1C(=O)O'],                # Para-bromomethyl benzoic acid
            'prediction': 1
        },
        # Rule 4: Heterocyclic carboxylic acids with coordinating nitrogen directly attached - High yield
        {
            'number': 4,
            'description': 'Heterocyclic carboxylic acids with coordinating nitrogen',
            'patterns': ['n1cc(C(=O)O)ccc1',   # Pyridine-3-carboxylic acid
                         'n1c(C(=O)O)ccc1'],  # Other heterocycles
            'prediction': 1
        },
        # Rule 5: Modifiers containing aldehyde groups - Low yield
        {
            'number': 5,
            'description': 'Modifiers containing aldehyde functional groups',
            'patterns': ['[CX3H1](=O)[#6]'],  # Aldehyde group
            'prediction': -1
        },
        # Rule 6: Modifiers with thiol groups on short aliphatic chains - High yield; on aromatic rings - Low yield
        {
            'number': 6,
            'description': 'Modifiers with thiol groups on short aliphatic chains',
            'patterns': ['[SX2H][CX4][CX3](=O)[OX1H]'],  # Thiol group connected to aliphatic chain
            'prediction': 1,
            'alternative_patterns': ['[c][SX2H]'],  # Thiol on aromatic ring
            'alternative_prediction': -1
        },
        # Rule 7: Simple saturated aliphatic carboxylic acids without additional functional groups - High yield
        {
            'number': 7,
            'description': 'Simple saturated aliphatic carboxylic acids without additional functional groups',
            'patterns': ['[CX3](=O)[OX1H]'],
            'exclude_patterns': ['[NX3]', '[OX2H]', '[SX2]', '[#7]', '[#8]', '[#16]'],  # Exclude amines, alcohols, thiols
            'prediction': 1,
            'alternative_patterns': ['[CX3](=O)[OX1H].*[#6][#6][#6][#6][#6][#6,Cl,Br,N,O,S]'],  # Long-chain acids with distal polar groups
            'alternative_prediction': -1
        },
        # Rule 8: Polyhydroxy carboxylic acids - High yield
        {
            'number': 8,
            'description': 'Modifiers that are polyhydroxy carboxylic acids',
            'patterns': ['[CX3](=O)[OX1H]', '[OX2H][CX4][OX2H]'],  # Carboxylic acid and multiple hydroxyl groups
            'logic': 'polyhydroxy_acid',
            'prediction': 1
        },
        # Rule 9: α-Amino acids with aromatic side chains lacking additional coordinating groups - Low yield
        {
            'number': 9,
            'description': 'α-Amino acids with aromatic side chains lacking additional coordinating groups',
            'patterns': ['[NX3H2][CX4H]([CX3](=O)[OX1H])[CH2][c]'],  # Phenylalanine-like
            'prediction': -1,
            'alternative_patterns': ['[NX3H2][CX4H]([CX3](=O)[OX1H])[CX3](=[CX3])[c]'],  # Heteroaromatic side chain (e.g., tryptophan)
            'alternative_prediction': 1
        },
        # Rule 10: Amino acids with acylated amino groups - Low yield
        {
            'number': 10,
            'description': 'Amino acids with acylated amino groups',
            'patterns': ['[NX3][CX3](=O)[CX4][CX3](=O)[OX1H]'],  # N-acetylated amino acids
            'prediction': -1
        },
        # Rule 11: Modifiers containing trifluoromethyl groups or other strong EWGs - Low yield
        {
            'number': 11,
            'description': 'Modifiers containing trifluoromethyl groups or strong electron-withdrawing groups',
            'patterns': ['[CX4][F][F][F]'],  # Trifluoromethyl group
            'prediction': -1
        },
        # Rule 12: Aliphatic diacids with ketone groups within the chain - Low yield
        {
            'number': 12,
            'description': 'Aliphatic diacids with ketone groups within the carbon chain',
            'patterns': ['[CX3](=O)[#6][#6][CX3](=O)[#6][CX3](=O)[OX1H]'],  # 4-oxoheptanedioic acid pattern
            'prediction': -1
        },
        # Rule 13: Modifiers with bulky substituents near the carboxyl group - Low yield
        {
            'number': 13,
            'description': 'Modifiers with bulky substituents near the carboxyl group causing steric hindrance',
            'patterns': ['[CX3](=O)[OX1H][CX4]([#6])[#6][c]'],  # Bulky group near carboxyl
            'prediction': -1
        },
        # Rule 14: Modifiers with flexible ether linkages and amino groups - Low yield
        {
            'number': 14,
            'description': 'Modifiers with flexible ether linkages and amino groups',
            'patterns': ['[OX2][CX4][OX2][CX4][OX2][CX3](=O)[OX1H]'],  # Multiple ether linkages
            'prediction': -1
        },
        # Rule 15: Aromatic carboxylic acids with hydroxyl groups adjacent to the carboxyl group - Low yield
        {
            'number': 15,
            'description': 'Aromatic carboxylic acids with hydroxyl groups adjacent to the carboxyl group',
            'patterns': ['c1cc(O)c(C(=O)O)cc1'],  # Hydroxyl adjacent to carboxyl group
            'prediction': -1
        }
    ]

    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = [Chem.MolFromSmarts(p) for p in rule.get('patterns', [])]
        rule['compiled_patterns'] = compiled_patterns
        # Compile alternative patterns if any
        if 'alternative_patterns' in rule:
            compiled_alternatives = [Chem.MolFromSmarts(p) for p in rule.get('alternative_patterns', [])]
            rule['compiled_alternative_patterns'] = compiled_alternatives
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = [Chem.MolFromSmarts(p) for p in rule.get('exclude_patterns', [])]
            rule['compiled_exclude_patterns'] = compiled_excludes

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = False
                # Apply rule logic if specified
                if 'logic' in rule:
                    if rule['logic'] == 'match_amino_dicarboxylic_acid':
                        # Rule 1 logic
                        match = match_amino_dicarboxylic_acid(mol)
                    elif rule['logic'] == 'omega_amino_acids':
                        # Rule 2 logic
                        chain_length = get_chain_length(mol)
                        if chain_length is not None:
                            if chain_length <= 5:
                                match = True
                                prediction = rule['prediction']
                            else:
                                match = True
                                prediction = rule['negative_prediction']
                        else:
                            match = False
                    elif rule['logic'] == 'polyhydroxy_acid':
                        # Rule 8 logic
                        hydroxyl_count = mol.GetSubstructMatches(Chem.MolFromSmarts('[OX2H]'))
                        if len(hydroxyl_count) >= 2 and mol.HasSubstructMatch(Chem.MolFromSmarts('[CX3](=O)[OX1H]')):
                            match = True
                        else:
                            match = False
                else:
                    # Check exclude patterns if any
                    if 'compiled_exclude_patterns' in rule:
                        exclude = False
                        for pat in rule['compiled_exclude_patterns']:
                            if mol.HasSubstructMatch(pat):
                                exclude = True
                                break
                        if exclude:
                            row.append(0)
                            continue
                    # Check required patterns
                    for pat in rule['compiled_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = True
                        else:
                            match = False
                            break
                    # Check alternative patterns if any
                    if not match and 'compiled_alternative_patterns' in rule:
                        for pat in rule['compiled_alternative_patterns']:
                            if mol.HasSubstructMatch(pat):
                                match = True
                                if 'alternative_prediction' in rule:
                                    prediction = rule['alternative_prediction']
                                break
                if match:
                    if 'prediction' in locals():
                        row.append(prediction)
                    else:
                        row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)

    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

# Helper functions for specific rules

def match_amino_dicarboxylic_acid(mol):
    # Rule 1: Check for α-amino acid backbone and additional carboxyl group
    amino_acid_pattern = Chem.MolFromSmarts('[NX3H2][CX4H]([#6])[CX3](=O)[OX1H]')
    carboxyl_pattern = Chem.MolFromSmarts('[CX3](=O)[OX1H]')
    if mol.HasSubstructMatch(amino_acid_pattern):
        matches = mol.GetSubstructMatches(carboxyl_pattern)
        if len(matches) >= 2:
            return True
    return False

def get_chain_length(mol):
    # Rule 2: Calculate chain length between amino nitrogen and carboxyl carbon
    nitrogen = [atom.GetIdx() for atom in mol.GetAtoms() if atom.GetAtomicNum() == 7 and atom.GetTotalDegree() == 1]
    carboxyl_carbon = [atom.GetIdx() for atom in mol.GetAtoms() if atom.GetAtomicNum() == 6 and any([nbr.GetAtomicNum() == 8 and nbr.GetHybridization() == Chem.rdchem.HybridizationType.SP2 for nbr in atom.GetNeighbors()])]
    if nitrogen and carboxyl_carbon:
        path_lengths = []
        for n in nitrogen:
            for c in carboxyl_carbon:
                length = Chem.rdmolops.GetShortestPath(mol, n, c)
                path_lengths.append(len(length)-1)
        if path_lengths:
            return min(path_lengths)
    return None

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: Modifiers that are **α-amino dicarboxylic acids**, such as **L-aspartic acid** and **L-glutamic acid**, lead to **high yield**. The presence of an amino group on the α-carbon and two carboxyl groups allows effective chelation with metal ions, enhancing catalyst stability and activity.

- **Rule 2**: Modifiers that are **ω-amino acids** with a carbon chain length of **five or fewer carbons** (e.g., **5-aminopentanoic acid**) lead to **high yield**. The close proximity of the amino and carboxyl groups facilitates chelation with metal ions. In contrast, ω-amino acids with **longer chains** (e.g., **7-aminoheptanoic acid**, **8-aminooctanoic acid**) lead to **low yield** due to decreased coordination efficiency from increased chain length and flexibility.

- **Rule 3**: Modifiers that are **aromatic carboxylic acids** with **para-substituents capable of coordinating with metal ions**, such as **amino**, **nitro**, or **bromomethyl** groups (e.g., **4-aminobenzoic acid**, **4-nitrobenzoic acid**, **4-(bromomethyl)benzoic acid**), lead to **high yield**. These substituents provide additional coordination sites. Modifiers with **non-coordinating or electron-donating para-substituents** (e.g., **methyl**, **formyl**, as in **4-methylbenzoic acid**, **4-formylbenzoic acid**) lead to **low yield** due to less effective metal binding.

- **Rule 4**: Modifiers that are **heterocyclic carboxylic acids** containing **nitrogen atoms capable of metal coordination** and are either **directly attached** to the carboxyl group or connected via a short aliphatic chain (e.g., **pyridine-3-carboxylic acid**, **1H-pyrazole-4-carboxylic acid**, **4-pyridin-4-ylbutanoic acid**) lead to **high yield**. If the heterocycle is connected through an **aromatic linker** (e.g., **4-pyridin-4-ylbenzoic acid**), the yield is **low** due to steric hindrance and reduced flexibility for effective coordination.

- **Rule 5**: Modifiers containing **small-chain thiol groups (-SH)** on **short aliphatic chains** (e.g., **3-sulfanylpropanoic acid**) lead to **high yield** due to strong metal coordination by sulfur atoms. Modifiers with thiol groups on **aromatic rings** (e.g., **4-sulfanylbenzoic acid**) lead to **low yield**, likely due to steric hindrance and reduced thiol reactivity in aromatic systems.

- **Rule 6**: Modifiers that are **simple saturated aliphatic carboxylic acids** without additional functional groups (e.g., **octanoic acid**) lead to **high yield**. These compounds allow unobstructed coordination with the metal center. Aliphatic carboxylic acids with **polar substituents at distal positions** (e.g., **7-hydroxyheptanoic acid**, **7-aminoheptanoic acid**) lead to **low yield**, possibly due to intramolecular interactions and steric effects hindering metal coordination.

- **Rule 7**: Modifiers that are **polyhydroxy carboxylic acids** (e.g., **gluconic acid**, **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid**) lead to **high yield**. Multiple hydroxyl groups enhance chelation with metal ions, stabilizing the catalyst complex and improving reactivity.

- **Rule 8**: Modifiers that are **α-amino acids with aromatic side chains lacking additional coordinating groups** (e.g., **L-phenylalanine**) lead to **low yield** due to limited coordination sites and potential steric hindrance. In contrast, those with **heteroaromatic side chains capable of coordination** (e.g., **L-tryptophan** with an indole ring) lead to **high yield**, as the heteroatoms provide additional coordination opportunities.

- **Rule 9**: Modifiers containing **aldehyde functional groups** adjacent to the aromatic ring or carboxyl group (e.g., **4-formylbenzoic acid**, **5-formyl-2-hydroxybenzoic acid**) lead to **low yield**. Aldehyde groups can interfere with metal coordination or participate in undesirable side reactions, diminishing catalyst effectiveness.

- **Rule 10**: Modifiers with strong **electron-withdrawing groups**, such as **trifluoroacetyl** groups (e.g., **4-[(2,2,2-trifluoroacetyl)amino]butanoic acid**), lead to **low yield**. These groups reduce electron density on coordinating atoms, weakening their ability to effectively bind metal ions.

- **Rule 11**: Modifiers with **flexible ether chains and polar functional groups** (e.g., **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**, **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**) lead to **low yield**. The flexibility and multiple ether oxygens may disrupt coordination by forming non-ideal interactions or hindering proper alignment with the metal center.

- **Rule 12**: Modifiers with **aliphatic chains linking aromatic rings and carboxyl groups** where the chain length is **five carbons or more** (e.g., **5-(4-hydroxyphenyl)pentanoic acid**) lead to **high yield**. The extended chain reduces steric hindrance and allows better orientation for coordination. Shorter chains (e.g., **3-(4-hydroxyphenyl)propanoic acid**) lead to **low yield** due to increased steric hindrance and less effective metal interaction.

- **Rule 13**: Modifiers that are **aromatic carboxylic acids with hydroxyl groups adjacent to the carboxyl group** on the aromatic ring (e.g., **2-[(4-hydroxybenzoyl)amino]acetic acid**) lead to **low yield**. Intramolecular hydrogen bonding or competition for coordination sites may reduce their effectiveness in metal binding.

- **Rule 14**: Modifiers containing **ketone functional groups** near the carboxyl group (e.g., **4-oxoheptanedioic acid**) lead to **low yield**. The ketone can interfere with metal coordination or alter the electronic properties of the coordinating atoms, negatively impacting the catalyst performance.

- **Rule 15**: Modifiers that are **N-acetylated amino acids** (e.g., **(2S)-6-acetamido-2-aminohexanoic acid**) lead to **low yield**. Acetylation of the amino group reduces its ability to coordinate with metal ions, diminishing the modifier's effectiveness in catalyst formation.

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6; Test Accuracy: 0.0
    Train Support: 0.04285714285714286; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 2.0588235294117645; Test Lift: NONE
    Train Leverage: 0.02204081632653061; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:

def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    
    # Amino group on alpha carbon (alpha-amino acid)
    alpha_amino_acid = '[NX3H2][CX4H]'
    
    # Second carboxyl group in alpha-amino dicarboxylic acids
    second_carboxylic_acid = '[C;X4H2][C;X4H2][CX3](=O)[OX2H1]'
    
    # Omega-amino acid with chain length <= 5 carbons
    omega_amino_acid_short = '[NX3H2][C;X4H2]{0,4}[CX3](=O)[OX2H1]'
    
    # Omega-amino acid with chain length > 5 carbons
    omega_amino_acid_long = '[NX3H2][C;X4H2]{5,}[CX3](=O)[OX2H1]'
    
    # Aromatic carboxylic acids with coordinating para-substituents
    aromatic_carboxylic_acid = '[c][c](cc[c][CX3](=O)[OX2H1])[c][*]'
    para_amino = '[c][c](cc[c][NX3H2])[c]'
    para_nitro = '[c][c](cc[c][NX3](=O)=O)[c]'
    para_bromomethyl = '[c][c](cc[c]CBr)[c]'
    
    # Aromatic carboxylic acids with non-coordinating or electron-donating para-substituents
    para_methyl = '[c][c](cc[c]C)[c]'
    para_formyl = '[c][c](cc[c][CX3H]=O)[c]'
    
    # Heterocyclic carboxylic acids with nitrogen capable of coordination
    heterocycle_nitrogen = '[n]'
    heterocycle_carboxylic_acid = '[n][c][c][c][c][CX3](=O)[OX2H1]'
    
    # Heterocycle connected via aromatic linker
    heterocycle_aromatic_linker = '[n][c][c][c][c][c][CX3](=O)[OX2H1]'
    
    # Thiol groups on short aliphatic chains
    short_chain_thiol = '[SX2H][C;X4H2][CX3](=O)[OX2H1]'
    
    # Thiol groups on aromatic rings
    aromatic_thiol = '[c][SX2H]'
    
    # Simple saturated aliphatic carboxylic acids without additional functional groups
    saturated_aliphatic_carboxylic_acid = '[C;X4H2][C;X4H2][C;X4H2][C;X4H2][CX3](=O)[OX2H1]'
    
    # Polar substituents at distal positions
    distal_hydroxy = '[C;X4H2]{0,5}[OX2H]'
    distal_amino = '[C;X4H2]{0,5}[NX3H2]'
    
    # Polyhydroxy carboxylic acids
    polyhydroxy_carboxylic_acid = '[CX3](=O)[OX2H1][C;X4H2][C;X4H2][C;X4H2][OX2H]'
    
    # Alpha-amino acids with aromatic side chains
    alpha_amino_acid_aromatic_side_chain = '[NX3H2][CX4H][CX4](c1ccccc1)[CX3](=O)[OX2H1]'
    
    # Alpha-amino acids with heteroaromatic side chains
    alpha_amino_acid_heteroaromatic_side_chain = '[NX3H2][CX4H][CX4](c1c[n, o, s]c[c]1)[CX3](=O)[OX2H1]'
    
    # Aldehyde functional groups adjacent to aromatic ring or carboxyl group
    aldehyde_adjacent = '[c][CX3H]=O'
    
    # Ketone functional groups near carboxyl group
    ketone_near_carboxyl = '[CX3](=O)[C;X4H2][CX3](=O)[OX2H1]'
    
    # N-acetylated amino acids
    n_acetylated_amino_acid = '[NX3][CX3](=O)[CX4H][CX3](=O)[OX2H1]'
    
    # Trifluoroacetyl groups
    trifluoroacetyl_group = '[CX3](=O)[CX4](F)(F)F'
    
    # Flexible ether chains with polar functional groups
    flexible_ether_chain = '[OX2][CX4][CX4][OX2][CX4][CX4][OX2]'
    
    # Aliphatic chains linking aromatic rings and carboxyl groups (chain length >=5)
    long_chain_aromatic_linker = '[c][C;X4H2]{5,}[CX3](=O)[OX2H1]'
    
    # Aliphatic chains linking aromatic rings and carboxyl groups (chain length <5)
    short_chain_aromatic_linker = '[c][C;X4H2]{1,4}[CX3](=O)[OX2H1]'
    
    # Aromatic carboxylic acids with hydroxyl groups adjacent to carboxyl group
    adjacent_hydroxyl = '[c][c](O)[c][CX3](=O)[OX2H1]'
    
    # Compile SMARTS patterns
    patterns = {
        'Rule 1': {
            'patterns': [alpha_amino_acid, second_carboxylic_acid],
            'prediction': 1
        },
        'Rule 2': {
            'patterns': [omega_amino_acid_short],
            'exclude_patterns': [omega_amino_acid_long],
            'prediction': 1
        },
        'Rule 3': {
            'patterns': [aromatic_carboxylic_acid],
            'sub_patterns': [para_amino, para_nitro, para_bromomethyl],
            'exclude_sub_patterns': [para_methyl, para_formyl],
            'prediction': 1
        },
        'Rule 4': {
            'patterns': [heterocycle_carboxylic_acid],
            'exclude_patterns': [heterocycle_aromatic_linker],
            'prediction': 1
        },
        'Rule 5': {
            'patterns': [short_chain_thiol],
            'exclude_patterns': [aromatic_thiol],
            'prediction': 1
        },
        'Rule 6': {
            'patterns': [saturated_aliphatic_carboxylic_acid],
            'exclude_patterns': [distal_hydroxy, distal_amino],
            'prediction': 1
        },
        'Rule 7': {
            'patterns': [polyhydroxy_carboxylic_acid],
            'prediction': 1
        },
        'Rule 8': {
            'patterns': [alpha_amino_acid_heteroaromatic_side_chain],
            'exclude_patterns': [alpha_amino_acid_aromatic_side_chain],
            'prediction': 1
        },
        'Rule 9': {
            'patterns': [aldehyde_adjacent],
            'prediction': -1
        },
        'Rule 10': {
            'patterns': [trifluoroacetyl_group],
            'prediction': -1
        },
        'Rule 11': {
            'patterns': [flexible_ether_chain],
            'prediction': -1
        },
        'Rule 12': {
            'patterns': [long_chain_aromatic_linker],
            'exclude_patterns': [short_chain_aromatic_linker],
            'prediction': 1
        },
        'Rule 13': {
            'patterns': [adjacent_hydroxyl],
            'prediction': -1
        },
        'Rule 14': {
            'patterns': [ketone_near_carboxyl],
            'prediction': -1
        },
        'Rule 15': {
            'patterns': [n_acetylated_amino_acid],
            'prediction': -1
        }
    }
    
    # Compile all SMARTS patterns
    for rule in patterns.values():
        rule['compiled_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule.get('patterns', [])]
        rule['compiled_sub_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule.get('sub_patterns', [])]
        rule['compiled_exclude_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule.get('exclude_patterns', [])]
        rule['compiled_exclude_sub_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule.get('exclude_sub_patterns', [])]
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(patterns))
            continue
        row = []
        for rule_name, rule in patterns.items():
            try:
                match = True
                
                # Check exclude patterns
                for exclude_pat in rule.get('compiled_exclude_patterns', []):
                    if mol.HasSubstructMatch(exclude_pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                
                # Check main patterns
                for pat in rule['compiled_patterns']:
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                
                # Check sub-patterns (if any)
                if 'compiled_sub_patterns' in rule and rule['compiled_sub_patterns']:
                    sub_match = False
                    for sub_pat in rule['compiled_sub_patterns']:
                        if mol.HasSubstructMatch(sub_pat):
                            sub_match = True
                            break
                    if not sub_match:
                        match = False
                
                # Check exclude sub-patterns
                if 'compiled_exclude_sub_patterns' in rule and rule['compiled_exclude_sub_patterns']:
                    for exclude_sub_pat in rule['compiled_exclude_sub_patterns']:
                        if mol.HasSubstructMatch(exclude_sub_pat):
                            match = False
                            break
                if not match:
                    row.append(0)
                    continue
                
                # Assign prediction
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=patterns.keys())
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: Modifiers that are **α-amino dicarboxylic acids** (e.g., **L-aspartic acid**, **L-glutamic acid**) lead to **high yield**. The presence of an amino group on the α-carbon and two carboxyl groups enhances coordination with metal ions, improving catalyst activity.

- **Rule 2**: Modifiers that are **ω-amino acids** with carbon chain lengths of **five carbons or fewer** (e.g., **5-aminopentanoic acid**) lead to **high yield**. The shorter chain length allows effective chelation with metal ions. Those with **longer chains** (more than five carbons), such as **7-aminoheptanoic acid** and **8-aminooctanoic acid**, lead to **low yield** due to reduced coordination efficiency.

- **Rule 3**: Modifiers that are **aromatic carboxylic acids** with **electron-withdrawing para-substituents capable of metal coordination** (e.g., **4-aminobenzoic acid**, **4-nitrobenzoic acid**, **4-(bromomethyl)benzoic acid**) lead to **high yield**. These substituents enhance coordination with metal ions. Modifiers with **electron-donating or non-coordinating para-substituents** (e.g., **4-methylbenzoic acid**, **4-formylbenzoic acid**) lead to **low yield**.

- **Rule 4**: Modifiers that are **heterocyclic carboxylic acids** containing **nitrogen heteroatoms** capable of metal coordination (e.g., **pyridine-3-carboxylic acid**, **1H-pyrazole-4-carboxylic acid**) lead to **high yield**. If the heterocycle is connected via an **aromatic linker** (e.g., **4-pyridin-4-ylbenzoic acid**), the yield is **low** due to steric hindrance affecting coordination.

- **Rule 5**: Modifiers with **thiol (-SH) groups** on **short aliphatic chains** (e.g., **3-sulfanylpropanoic acid**) lead to **high yield**. Sulfur atoms form strong bonds with metal ions. Modifiers with thiol groups on **aromatic rings** (e.g., **4-sulfanylbenzoic acid**) lead to **low yield** due to reduced reactivity of aromatic thiols.

- **Rule 6**: Modifiers that are **polyhydroxy carboxylic acids** (e.g., **gluconic acid**) lead to **high yield**. Multiple hydroxyl groups enhance chelation with metal ions, stabilizing the catalyst.

- **Rule 7**: Modifiers that are **simple saturated aliphatic carboxylic acids** without additional functional groups (e.g., **octanoic acid**) lead to **high yield**. Lack of interfering groups allows effective coordination. However, aliphatic carboxylic acids with **distal polar substituents** (e.g., **7-hydroxyheptanoic acid**, **7-aminoheptanoic acid**) lead to **low yield** due to potential steric hindrance or intramolecular interactions.

- **Rule 8**: Modifiers that are **α-amino acids with side chains containing coordinating heteroatoms** (e.g., **L-tryptophan**) lead to **high yield**. Those with side chains lacking coordinating groups (e.g., **L-phenylalanine**) lead to **low yield** due to limited coordination sites.

- **Rule 9**: Modifiers containing **aldehyde groups** adjacent to aromatic rings or carboxyl groups (e.g., **4-formylbenzoic acid**, **5-formyl-2-hydroxybenzoic acid**) lead to **low yield**. Aldehyde groups may interfere with metal coordination.

- **Rule 10**: Modifiers with **strong electron-withdrawing groups**, such as **trifluoroacetyl** (e.g., **4-[(2,2,2-trifluoroacetyl)amino]butanoic acid**), lead to **low yield**. These groups reduce electron density on coordinating atoms, weakening metal binding.

- **Rule 11**: Modifiers with **flexible ether chains** and polar functional groups (e.g., **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**) lead to **low yield**. Flexibility and multiple ether oxygens may disrupt coordination.

- **Rule 12**: Modifiers that are **N-acetylated amino acids** (e.g., **(2S)-6-acetamido-2-aminohexanoic acid**) lead to **low yield**. Acetylation decreases coordination ability of amino groups.

- **Rule 13**: Modifiers that are **aromatic carboxylic acids with extended aliphatic chains** (five carbons or more) linking the aromatic ring and carboxyl group (e.g., **5-(4-hydroxyphenyl)pentanoic acid**) lead to **high yield**. The extended chain reduces steric hindrance, improving coordination. Similar modifiers with **shorter chains** (e.g., **3-(4-hydroxyphenyl)propanoic acid**) lead to **low yield**.

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5
0,0,0,0,0
1,1,0,0,0
0,0,0,0,0
1,1,0,0,0
0,1,0,0,0
0,1,0,0,0
0,0,0,0,0
0,1,0,0,0
0,0,0,0,0
0,0,0,-1,0
0,0,0,0,0
0,0,0,0,-1
0,0,0,0,0
0,0,0,0,0
0,1,0,0,0
0,1,0,0,0
0,0,0,-1,0
0,0,0,0,0
0,0,0,0,1
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,1,0,0,0
0,0,0,0,0
0,0,0,0,0
0,1,0,0,0
0,0,0,0,0
0,1,0,0,0
0,0,0,0,0
0,0,0,0,0
0,-1,0,0,0
0,-1,0,0,0
0,1,0,0,0
0,-1,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6; Test Accuracy: 0.0
    Train Support: 0.2571428571428571; Test Support: 0.0
    Train Confidence: 0.6428571428571429; Test Confidence: 0.5
    Train Lift: 1.2745098039215685; Test Lift: NONE
    Train Leverage: 0.05387755102040819; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    """
    This function takes a list of SMILES strings and returns a feature matrix as a pandas DataFrame.
    Each column corresponds to a rule, and each row corresponds to a SMILES string.
    A value of 0 if the structural description of the rule does not match the SMILES.
    A value of 1 if the structural description of the rule matches the SMILES and predicts a high target value.
    A value of -1 if the structural description of the rule matches the SMILES and predicts a low target value.
    """
    import pandas as pd
    from rdkit import Chem

    # Define the rules
    rules = []

    # Rule 1: α-amino dicarboxylic acids (e.g., L-aspartic acid, L-glutamic acid) lead to high yield.
    rule1 = {
        'number': 1,
        'description': 'Modifiers that are α-amino dicarboxylic acids lead to high yield.',
        'patterns': [
            {'smarts': '[NX3;H2,H1][CX4][CX3](=O)[OX2H1]', 'min_count': 1},  # α-amino acid backbone
            {'smarts': '[CX3](=O)[OX2H1]', 'min_count': 2}  # At least two carboxylic acid groups
        ],
        'prediction': 1
    }
    rules.append(rule1)

    # Rule 2: ω-amino acids with chain lengths <=5 carbons lead to high yield, >5 carbons lead to low yield.
    rule2 = {
        'number': 2,
        'description': 'Modifiers that are ω-amino acids with chain lengths <=5 carbons lead to high yield, >5 carbons lead to low yield.',
        'smarts_amino': '[NX3;H2,H1]',
        'smarts_acid': '[CX3](=O)[OX2H1]',
        'max_chain_length': 5,
        'prediction_high': 1,
        'prediction_low': -1
    }
    rules.append(rule2)

    # Rule 3: Aromatic carboxylic acids with electron-withdrawing para-substituents capable of metal coordination lead to high yield.
    rule3 = {
        'number': 3,
        'description': 'Aromatic carboxylic acids with electron-withdrawing para-substituents capable of metal coordination lead to high yield.',
        'patterns': [
            {'smarts': 'c1ccc(cc1)[CX3](=O)[OX2H1]', 'min_count': 1},  # Aromatic carboxylic acid
            {'smarts': 'c1ccc([NX3;H2,H1,NX3](=O)=O,F,Cl,Br,I)cc1', 'min_count': 1}  # EWGs at para position
        ],
        'prediction': 1
    }
    rules.append(rule3)

    # Rule 4: Heterocyclic carboxylic acids containing nitrogen heteroatoms lead to high yield.
    rule4 = {
        'number': 4,
        'description': 'Modifiers that are heterocyclic carboxylic acids containing nitrogen heteroatoms lead to high yield. If connected via an aromatic linker, lead to low yield.',
        'patterns_high': [
            {'smarts': '[n,N][r][CX3](=O)[OX2H1]', 'min_count': 1}  # Nitrogen heterocycle connected to carboxylic acid
        ],
        'patterns_low': [
            {'smarts': '[n,N][r][a][r][CX3](=O)[OX2H1]', 'min_count': 1}  # Heterocycle connected via aromatic linker
        ],
        'prediction_high': 1,
        'prediction_low': -1
    }
    rules.append(rule4)

    # Rule 5: Thiol groups on short aliphatic chains lead to high yield; thiol groups on aromatic rings lead to low yield.
    rule5 = {
        'number': 5,
        'description': 'Modifiers with thiol (-SH) groups on short aliphatic chains lead to high yield; thiol groups on aromatic rings lead to low yield.',
        'patterns_high': [
            {'smarts': '[SX2H][CH2][CH2][CX3](=O)[OX2H1]', 'min_count': 1}  # Thiol on short chain connected to carboxylic acid
        ],
        'patterns_low': [
            {'smarts': '[c][SX2H]', 'min_count': 1}  # Thiol on aromatic ring
        ],
        'prediction_high': 1,
        'prediction_low': -1
    }
    rules.append(rule5)

    # Initialize results list
    results = []

    # Compile patterns
    for rule in rules:
        if 'patterns' in rule:
            compiled_patterns = []
            for pat_dict in rule['patterns']:
                if 'smarts' in pat_dict:
                    compiled_pat = Chem.MolFromSmarts(pat_dict['smarts'])
                    pat_dict['compiled'] = compiled_pat
            rule['patterns_compiled'] = rule['patterns']
        if 'patterns_high' in rule:
            for pat_dict in rule['patterns_high']:
                if 'smarts' in pat_dict:
                    compiled_pat = Chem.MolFromSmarts(pat_dict['smarts'])
                    pat_dict['compiled'] = compiled_pat
        if 'patterns_low' in rule:
            for pat_dict in rule['patterns_low']:
                if 'smarts' in pat_dict:
                    compiled_pat = Chem.MolFromSmarts(pat_dict['smarts'])
                    pat_dict['compiled'] = compiled_pat

    # Process each SMILES
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            if rule['number'] == 1:
                # Rule 1
                try:
                    match = True
                    for pat_dict in rule['patterns']:
                        matches = mol.GetSubstructMatches(pat_dict['compiled'])
                        if len(matches) < pat_dict['min_count']:
                            match = False
                            break
                    if match:
                        row.append(rule['prediction'])
                    else:
                        row.append(0)
                except:
                    row.append(0)
            elif rule['number'] == 2:
                # Rule 2
                try:
                    amino_pat = Chem.MolFromSmarts(rule['smarts_amino'])
                    acid_pat = Chem.MolFromSmarts(rule['smarts_acid'])
                    amino_atoms = [a[0] for a in mol.GetSubstructMatches(amino_pat)]
                    acid_atoms = [a[0] for a in mol.GetSubstructMatches(acid_pat)]
                    prediction = 0
                    for amino_idx in amino_atoms:
                        for acid_idx in acid_atoms:
                            path = Chem.rdmolops.GetShortestPath(mol, amino_idx, acid_idx)
                            # Count carbons in the path excluding amino nitrogen and carboxylic acid carbon
                            carbon_count = 0
                            for atom_idx in path:
                                atom = mol.GetAtomWithIdx(atom_idx)
                                if atom.GetAtomicNum() == 6 and atom_idx != amino_idx and atom_idx != acid_idx:
                                    carbon_count +=1
                            if carbon_count <= rule['max_chain_length']:
                                prediction = rule['prediction_high']
                                break
                            elif carbon_count > rule['max_chain_length']:
                                prediction = rule['prediction_low']
                        if prediction != 0:
                            break
                    row.append(prediction)
                except:
                    row.append(0)
            elif rule['number'] == 3:
                # Rule 3
                try:
                    match = True
                    for pat_dict in rule['patterns']:
                        matches = mol.GetSubstructMatches(pat_dict['compiled'])
                        if len(matches) < pat_dict.get('min_count',1):
                            match = False
                            break
                    if match:
                        row.append(rule['prediction'])
                    else:
                        row.append(0)
                except:
                    row.append(0)
            elif rule['number'] == 4:
                # Rule 4
                try:
                    # First, check for patterns that lead to low yield
                    low_match = False
                    for pat_dict in rule.get('patterns_low', []):
                        matches = mol.GetSubstructMatches(pat_dict['compiled'])
                        if len(matches) >= pat_dict.get('min_count',1):
                            low_match = True
                            break
                    if low_match:
                        row.append(rule['prediction_low'])
                        continue
                    # Then, check for patterns that lead to high yield
                    high_match = False
                    for pat_dict in rule.get('patterns_high', []):
                        matches = mol.GetSubstructMatches(pat_dict['compiled'])
                        if len(matches) >= pat_dict.get('min_count',1):
                            high_match = True
                            break
                    if high_match:
                        row.append(rule['prediction_high'])
                    else:
                        row.append(0)
                except:
                    row.append(0)
            elif rule['number'] == 5:
                # Rule 5
                try:
                    # Check for low yield pattern first
                    low_match = False
                    for pat_dict in rule.get('patterns_low', []):
                        matches = mol.GetSubstructMatches(pat_dict['compiled'])
                        if len(matches) >= pat_dict.get('min_count',1):
                            low_match = True
                            break
                    if low_match:
                        row.append(rule['prediction_low'])
                        continue
                    # Check for high yield pattern
                    high_match = False
                    for pat_dict in rule.get('patterns_high', []):
                        matches = mol.GetSubstructMatches(pat_dict['compiled'])
                        if len(matches) >= pat_dict.get('min_count',1):
                            high_match = True
                            break
                    if high_match:
                        row.append(rule['prediction_high'])
                    else:
                        row.append(0)
                except:
                    row.append(0)
            else:
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df
--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: Modifiers that are **α-amino acids with side chains containing carboxylic acid groups** (e.g., **L-aspartic acid**, **L-glutamic acid**) lead to **high yield**. The additional carboxyl group enhances coordination with metal ions, improving catalyst activity.

- **Rule 2**: Modifiers that are **ω-amino acids with short aliphatic chains** of **five carbons or fewer** (e.g., **5-aminopentanoic acid**) lead to **high yield**. Shorter chains allow effective chelation with metal ions. Those with **longer chains** (more than five carbons), such as **7-aminoheptanoic acid** and **8-aminooctanoic acid**, lead to **low yield** due to decreased coordination efficiency.

- **Rule 3**: Modifiers that are **aromatic carboxylic acids** with **electron-withdrawing para-substituents capable of metal coordination** (e.g., **4-aminobenzoic acid**, **4-nitrobenzoic acid**, **4-(bromomethyl)benzoic acid**) lead to **high yield**. These substituents enhance coordination with metal ions. Modifiers with **electron-donating groups** or groups that hinder coordination at the para position (e.g., **4-methylbenzoic acid**, **4-formylbenzoic acid**) lead to **low yield**.

- **Rule 4**: Modifiers that are **heterocyclic carboxylic acids containing nitrogen heteroatoms** capable of metal coordination (e.g., **pyridine-3-carboxylic acid**, **1H-pyrazole-4-carboxylic acid**) lead to **high yield**. Modifiers where the heterocycle is connected via an **aromatic linker** (e.g., **4-pyridin-4-ylbenzoic acid**) lead to **low yield** due to steric hindrance affecting coordination.

- **Rule 5**: Modifiers with **thiol (-SH) groups** on **short aliphatic chains** (e.g., **3-sulfanylpropanoic acid**) lead to **high yield**. Sulfur atoms form strong bonds with metal ions. Modifiers with thiol groups on **aromatic rings** (e.g., **4-sulfanylbenzoic acid**) lead to **low yield** due to reduced reactivity of aromatic thiols.

- **Rule 6**: Modifiers that are **polyhydroxy carboxylic acids** or contain **multiple hydroxyl groups** (e.g., **gluconic acid**, **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid**) lead to **high yield**. Multiple hydroxyl groups enhance chelation with metal ions, stabilizing the catalyst.

- **Rule 7**: Modifiers that are **simple saturated aliphatic carboxylic acids** without additional functional groups (e.g., **octanoic acid**) lead to **high yield**. Lack of interfering groups allows effective coordination. However, aliphatic carboxylic acids with **distal polar substituents** (e.g., **7-hydroxyheptanoic acid**, **7-aminoheptanoic acid**) lead to **low yield** due to potential steric hindrance or intramolecular interactions.

- **Rule 8**: Modifiers that are **α-amino acids with side chains containing coordinating heteroatoms** (e.g., **L-tryptophan**) lead to **high yield**. Those with side chains **lacking coordinating groups** (e.g., **L-phenylalanine**) lead to **low yield** due to limited coordination sites.

- **Rule 9**: Modifiers containing **aldehyde groups** adjacent to aromatic rings or carboxyl groups (e.g., **4-formylbenzoic acid**, **5-formyl-2-hydroxybenzoic acid**) lead to **low yield**. Aldehyde groups may interfere with metal coordination.

- **Rule 10**: Modifiers with **strong electron-withdrawing groups**, such as **trifluoroacetyl** (e.g., **4-[(2,2,2-trifluoroacetyl)amino]butanoic acid**), lead to **low yield**. These groups reduce electron density on coordinating atoms, weakening metal binding.

- **Rule 11**: Modifiers with **flexible ether chains** and polar functional groups (e.g., **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**) lead to **low yield**. Flexibility and multiple ether oxygens may disrupt coordination.

- **Rule 12**: Modifiers that are **N-acetylated amino acids** or amino acids with **acylated side chains** (e.g., **(2S)-6-acetamido-2-aminohexanoic acid**, **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid**) lead to **low yield**. Acetylation decreases coordination ability of amino groups.

- **Rule 13**: Modifiers that are **aromatic carboxylic acids linked via an aliphatic chain** longer than three carbons (e.g., **5-(4-hydroxyphenyl)pentanoic acid**) lead to **high yield**. The extended chain reduces steric hindrance, enhancing coordination. Similar modifiers with **shorter chains** (e.g., **3-(4-hydroxyphenyl)propanoic acid**) lead to **low yield** due to increased steric hindrance near the coordinating site.

- **Rule 14**: Modifiers containing **fused aromatic systems with coordinating heteroatoms** (e.g., **1,3-dioxo-2-benzofuran-5-carboxylic acid**) lead to **high yield**. The rigid structure and heteroatoms promote strong metal coordination.

- **Rule 15**: Modifiers containing **ketone groups adjacent to carboxyl groups** or within the molecule (e.g., **4-oxoheptanedioic acid**) lead to **low yield**. Ketone groups may compete for metal binding or introduce steric hindrance.

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,1,0,0,0,1,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,1,0,0
1,1,0,0,0,1,0,-1,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,0,1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,1,0,0
0,1,0,0,0,0,0,-1,0,0,0,0,1,0,0
0,1,0,0,0,0,0,-1,0,0,0,0,1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,0,1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,1,0,0
0,1,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,1,0,0
0,0,0,0,0,1,0,0,0,0,0,-1,1,0,0
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,0,1,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,1,0,0,0,0,0,1,0,0,0,-1,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6857142857142857; Test Accuracy: 0.0
    Train Support: 0.12857142857142856; Test Support: 0.0
    Train Confidence: 0.6666666666666666; Test Confidence: 0.5
    Train Lift: 1.3572984749455337; Test Lift: NONE
    Train Leverage: -0.007755102040816319; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Set up logging
    logging.basicConfig(level=logging.WARNING)
    
    # Define SMARTS patterns for functional groups using corrected patterns from suggestions
    patterns = {
        # Carboxylic acid group (-COOH)
        'carboxylic_acid': Chem.MolFromSmarts('[CX3](=O)[OX1H0-,OX2H1]'),
        
        # Alpha-amino acid backbone (NH2-C-C(=O)-OH)
        'alpha_amino_acid_backbone': Chem.MolFromSmarts('[NX3;H2][CX4H]([*])[CX3](=O)[OX1H0-,OX2H1]'),
        
        # Side chain carboxylic acid group
        'side_chain_carboxylic_acid': Chem.MolFromSmarts('[CX3](=O)[OX1H0-,OX2H1]'),
        
        # Primary amine group at the end of an aliphatic chain (omega-amino acid)
        'omega_primary_amino': Chem.MolFromSmarts('[NX3;H2][CX4][CX4][CX4][CX4][CX3](=O)[OX1H0-,OX2H1]'),
        
        # Amino group (-NH2)
        'primary_amino_group': Chem.MolFromSmarts('[NX3;H2]'),
        
        # Aliphatic chain with n carbons
        'aliphatic_chain': Chem.MolFromSmarts('[C]' + ('-[C]' * 4)),  # 5 carbons chain
        
        # Aromatic carboxylic acid
        'aromatic_carboxylic_acid': Chem.MolFromSmarts('c1ccccc1C(=O)[O-]'),
        
        # Para-substituted EWGs on aromatic carboxylic acid
        'para_ewg_aromatic_carboxylic_acid': [
            Chem.MolFromSmarts('c1cc([N,O,S])ccc1C(=O)[O-]'),  # Nitrogen, Oxygen, Sulfur at para position
            Chem.MolFromSmarts('c1cc([F,Cl,Br,I])ccc1C(=O)[O-]'),  # Halogens at para position
            Chem.MolFromSmarts('c1cc([C](=O)[O,N])ccc1C(=O)[O-]')  # Carbonyl groups at para position
        ],
        
        # Para-substituted EDGs on aromatic carboxylic acid
        'para_edg_aromatic_carboxylic_acid': [
            Chem.MolFromSmarts('c1cc([CH3,OCH3,NH2])ccc1C(=O)[O-]'),
        ],
        
        # Heterocyclic carboxylic acid containing nitrogen
        'nitrogen_heterocycle_carboxylic_acid': Chem.MolFromSmarts('[nH0]1cccc1C(=O)[O-]'),
        
        # Heterocycle connected via aromatic linker
        'heterocycle_aromatic_linker': Chem.MolFromSmarts('[nH0]1cccc1-c2ccccc2C(=O)[O-]'),
        
        # Thiol group on aliphatic chain
        'thiol_aliphatic': Chem.MolFromSmarts('[CX4][CX4][SX2H]'),
        
        # Thiol group on aromatic ring
        'thiol_aromatic': Chem.MolFromSmarts('c1ccccc1[SX2H]'),
        
        # Hydroxyl group (-OH)
        'hydroxyl_group': Chem.MolFromSmarts('[OX2H]'),
        
        # Aldehyde group adjacent to aromatic ring or carboxyl group
        'aldehyde_adjacent_aromatic': Chem.MolFromSmarts('c1ccc(cc1)[CX3H](=O)'),
        'aldehyde_adjacent_carboxyl': Chem.MolFromSmarts('[CX3](=O)[CX3H](=O)'),
        
        # Trifluoroacetyl group
        'trifluoroacetyl': Chem.MolFromSmarts('[CX3](=O)[CX4]([F])([F])[F]'),
        
        # Ether linkage
        'ether_linkage': Chem.MolFromSmarts('[#6][OX2][#6]'),
        
        # N-acetylated amino group
        'acetylated_amino_group': Chem.MolFromSmarts('[NX3][CX3](=O)[#6]'),
        
        # Fused aromatic system with coordinating heteroatoms
        'fused_aromatic_with_heteroatom': Chem.MolFromSmarts('[n,o,s]1ccc2c1cccc2C(=O)[O-]'),
        
        # Ketone adjacent to carboxyl group
        'ketone_adjacent_to_carboxyl': Chem.MolFromSmarts('[CX3](=O)[CX2](=O)[#6]'),
        
        # Saturated aliphatic carboxylic acid without additional functional groups
        'simple_aliphatic_carboxylic_acid': Chem.MolFromSmarts('[CX3](=O)[OX1H0-,OX2H1][CX4H2][CX4H2][CX4H2][CX4H3]'),
        
        # Polar substituents (hydroxyl, amino, halogen) away from carboxyl group
        'distal_polar_substituents': [
            Chem.MolFromSmarts('[C][C][C][C][OX2H]'),
            Chem.MolFromSmarts('[C][C][C][C][NX3;H2]'),
            Chem.MolFromSmarts('[C][C][C][C][F,Cl,Br,I]'),
        ],
        
        # Side chain coordinating heteroatoms (N, O, S) in alpha-amino acids
        'side_chain_heteroatoms': Chem.MolFromSmarts('[NX3;H2][CX4H]([#6])[CX3](=O)[OX1H0-,OX2H1]'),  # Captured in side chain
        'coordinating_heteroatoms': Chem.MolFromSmarts('[#6][!#1][N,O,S][!#1][#6]'),
        
        # Aromatic ring
        'aromatic_ring': Chem.MolFromSmarts('c1ccccc1'),
        
        # Aliphatic chain between aromatic ring and carboxylic acid
        'aliphatic_chain_linker': Chem.MolFromSmarts('c1ccccc1CCCC[CX3](=O)[OX1H0-,OX2H1]'),
    }

    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are α-amino acids with side chains containing carboxylic acid groups lead to high yield.',
            'patterns': [
                patterns['alpha_amino_acid_backbone'],
            ],
            'check_side_chain_carboxylic_acid': True,
            'prediction': 1,
        },
        {
            'number': 2,
            'description': 'Modifiers that are ω-amino acids with short aliphatic chains of five carbons or fewer lead to high yield. Longer chains lead to low yield.',
            'patterns': [
                patterns['primary_amino_group'],
                patterns['carboxylic_acid'],
            ],
            'chain_length_rule': {
                'max_length': 5,
                'prediction_short': 1,
                'prediction_long': -1,
            },
        },
        {
            'number': 3,
            'description': 'Modifiers that are aromatic carboxylic acids with electron-withdrawing para-substituents capable of metal coordination lead to high yield. Those with electron-donating groups or groups that hinder coordination at the para position lead to low yield.',
            'patterns': [
                patterns['aromatic_carboxylic_acid'],
            ],
            'para_substituent_rule': {
                'ewg_patterns': patterns['para_ewg_aromatic_carboxylic_acid'],
                'edg_patterns': patterns['para_edg_aromatic_carboxylic_acid'],
                'prediction_ewg': 1,
                'prediction_edg': -1,
            },
        },
        {
            'number': 4,
            'description': 'Modifiers that are heterocyclic carboxylic acids containing nitrogen heteroatoms lead to high yield. Modifiers where the heterocycle is connected via an aromatic linker lead to low yield.',
            'patterns': [
                patterns['nitrogen_heterocycle_carboxylic_acid'],
            ],
            'aromatic_linker_pattern': patterns['heterocycle_aromatic_linker'],
            'prediction': 1,
            'alternative_prediction': -1,
        },
        {
            'number': 5,
            'description': 'Modifiers with thiol (-SH) groups on short aliphatic chains lead to high yield. Modifiers with thiol groups on aromatic rings lead to low yield.',
            'patterns': [
                patterns['thiol_aliphatic'],
            ],
            'alternative_patterns': [
                patterns['thiol_aromatic'],
            ],
            'prediction': 1,
            'alternative_prediction': -1,
        },
        {
            'number': 6,
            'description': 'Modifiers that are polyhydroxy carboxylic acids or contain multiple hydroxyl groups lead to high yield.',
            'patterns': [
                patterns['carboxylic_acid'],
            ],
            'hydroxyl_count': 2,
            'prediction': 1,
        },
        {
            'number': 7,
            'description': 'Modifiers that are simple saturated aliphatic carboxylic acids without additional functional groups lead to high yield. Aliphatic carboxylic acids with distal polar substituents lead to low yield.',
            'patterns': [
                patterns['simple_aliphatic_carboxylic_acid'],
            ],
            'exclude_patterns': patterns['distal_polar_substituents'],
            'prediction': 1,
            'alternative_prediction': -1,
        },
        {
            'number': 8,
            'description': 'Modifiers that are α-amino acids with side chains containing coordinating heteroatoms lead to high yield. Those with side chains lacking coordinating groups lead to low yield.',
            'patterns': [
                patterns['alpha_amino_acid_backbone'],
            ],
            'side_chain_heteroatoms_pattern': patterns['coordinating_heteroatoms'],
            'prediction': 1,
            'alternative_prediction': -1,
        },
        {
            'number': 9,
            'description': 'Modifiers containing aldehyde groups adjacent to aromatic rings or carboxyl groups lead to low yield.',
            'patterns': [
                patterns['aldehyde_adjacent_aromatic'],
                patterns['aldehyde_adjacent_carboxyl'],
            ],
            'prediction': -1,
        },
        {
            'number': 10,
            'description': 'Modifiers with strong electron-withdrawing groups, such as trifluoroacetyl, lead to low yield.',
            'patterns': [
                patterns['trifluoroacetyl'],
            ],
            'prediction': -1,
        },
        {
            'number': 11,
            'description': 'Modifiers with flexible ether chains and polar functional groups lead to low yield.',
            'patterns': [
                patterns['ether_linkage'],
            ],
            'prediction': -1,
        },
        {
            'number': 12,
            'description': 'Modifiers that are N-acetylated amino acids or amino acids with acylated side chains lead to low yield.',
            'patterns': [
                patterns['acetylated_amino_group'],
            ],
            'prediction': -1,
        },
        {
            'number': 13,
            'description': 'Modifiers that are aromatic carboxylic acids linked via an aliphatic chain longer than three carbons lead to high yield. Similar modifiers with shorter chains lead to low yield.',
            'patterns': [
                patterns['aromatic_ring'],
                patterns['carboxylic_acid'],
            ],
            'chain_length_rule': {
                'min_length': 4,
                'prediction_long': 1,
                'prediction_short': -1,
            },
        },
        {
            'number': 14,
            'description': 'Modifiers containing fused aromatic systems with coordinating heteroatoms lead to high yield.',
            'patterns': [
                patterns['fused_aromatic_with_heteroatom'],
            ],
            'prediction': 1,
        },
        {
            'number': 15,
            'description': 'Modifiers containing ketone groups adjacent to carboxyl groups or within the molecule lead to low yield.',
            'patterns': [
                patterns['ketone_adjacent_to_carboxyl'],
            ],
            'prediction': -1,
        },
    ]

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check required patterns
                for pat in rule.get('patterns', []):
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Additional checks based on rule specifics
                # Rule 1: Check for side chain carboxylic acid
                if rule['number'] == 1 and rule.get('check_side_chain_carboxylic_acid'):
                    carboxy_matches = mol.GetSubstructMatches(patterns['carboxylic_acid'])
                    if len(carboxy_matches) > 1:
                        prediction = rule['prediction']
                    else:
                        prediction = 0
                    row.append(prediction)
                    continue
                # Rule 2 and 13: Chain length calculations
                if rule['number'] in [2, 13] and 'chain_length_rule' in rule:
                    if rule['number'] == 2:
                        # Find all paths between amino group and carboxylic acid
                        amino_matches = mol.GetSubstructMatches(patterns['primary_amino_group'])
                        carboxy_matches = mol.GetSubstructMatches(patterns['carboxylic_acid'])
                    else:
                        # Between aromatic ring and carboxylic acid
                        amino_matches = mol.GetSubstructMatches(patterns['aromatic_ring'])
                        carboxy_matches = mol.GetSubstructMatches(patterns['carboxylic_acid'])
                    min_chain_length = None
                    for amino_match in amino_matches:
                        amino_atom_idx = amino_match[0]
                        for carboxy_match in carboxy_matches:
                            carboxy_atom_idx = carboxy_match[0]
                            path = Chem.rdmolops.GetShortestPath(mol, amino_atom_idx, carboxy_atom_idx)
                            chain_length = sum(1 for idx in path if mol.GetAtomWithIdx(idx).GetSymbol()=='C')
                            if min_chain_length is None or chain_length < min_chain_length:
                                min_chain_length = chain_length
                    if min_chain_length is not None:
                        if 'max_length' in rule['chain_length_rule'] and min_chain_length <= rule['chain_length_rule']['max_length']:
                            prediction = rule['chain_length_rule']['prediction_short']
                        elif 'min_length' in rule['chain_length_rule'] and min_chain_length >= rule['chain_length_rule']['min_length']:
                            prediction = rule['chain_length_rule']['prediction_long']
                        else:
                            prediction = rule['chain_length_rule'].get('prediction_short', 0)
                    else:
                        prediction = 0
                    row.append(prediction)
                    continue
                # Rule 3: Para-substituent effects
                if rule['number'] == 3 and 'para_substituent_rule' in rule:
                    ewg_match = any(mol.HasSubstructMatch(pat) for pat in rule['para_substituent_rule']['ewg_patterns'])
                    edg_match = any(mol.HasSubstructMatch(pat) for pat in rule['para_substituent_rule']['edg_patterns'])
                    if ewg_match:
                        prediction = rule['para_substituent_rule']['prediction_ewg']
                    elif edg_match:
                        prediction = rule['para_substituent_rule']['prediction_edg']
                    else:
                        prediction = 0
                    row.append(prediction)
                    continue
                # Rule 4: Check for aromatic linker
                if rule['number'] == 4 and 'aromatic_linker_pattern' in rule:
                    if mol.HasSubstructMatch(rule['aromatic_linker_pattern']):
                        prediction = rule['alternative_prediction']
                    else:
                        prediction = rule['prediction']
                    row.append(prediction)
                    continue
                # Rule 5: Thiol on aromatic ring
                if rule['number'] == 5:
                    if any(mol.HasSubstructMatch(pat) for pat in rule.get('alternative_patterns', [])):
                        prediction = rule['alternative_prediction']
                    else:
                        prediction = rule['prediction']
                    row.append(prediction)
                    continue
                # Rule 6: Count hydroxyl groups
                if rule['number'] == 6 and 'hydroxyl_count' in rule:
                    hydroxyl_matches = mol.GetSubstructMatches(patterns['hydroxyl_group'])
                    num_hydroxyl = len(hydroxyl_matches)
                    if num_hydroxyl >= rule['hydroxyl_count']:
                        prediction = rule['prediction']
                    else:
                        prediction = 0
                    row.append(prediction)
                    continue
                # Rule 7: Exclude molecules with distal polar substituents
                if rule['number'] == 7 and 'exclude_patterns' in rule:
                    exclude_match = any(mol.HasSubstructMatch(pat) for pat in rule['exclude_patterns'])
                    if exclude_match:
                        prediction = rule['alternative_prediction']
                    else:
                        prediction = rule['prediction']
                    row.append(prediction)
                    continue
                # Rule 8: Check for coordinating heteroatoms in side chain
                if rule['number'] == 8 and 'side_chain_heteroatoms_pattern' in rule:
                    side_chain_match = mol.HasSubstructMatch(rule['side_chain_heteroatoms_pattern'])
                    if side_chain_match:
                        prediction = rule['prediction']
                    else:
                        prediction = rule['alternative_prediction']
                    row.append(prediction)
                    continue
                # Default prediction
                prediction = rule.get('prediction', 0)
                row.append(prediction)
            except Exception as e:
                logging.warning(f'Error processing rule {rule['number']} for SMILES {smi}: {e}')
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: Modifiers that are **amino acids with side-chain carboxyl groups**, such as **L-aspartic acid** (`(2S)-2-aminobutanedioic acid`) and **L-glutamic acid** (`(2S)-2-aminopentanedioic acid`), lead to **high yield**. The presence of both **amino** and multiple **carboxyl groups** allows for **multidentate chelation** with metal ions, enhancing catalyst stability and reactivity through the formation of stable chelate complexes.

- **Rule 2**: Modifiers that are **aromatic carboxylic acids** with **electron-withdrawing substituents** at the **para position**, such as **4-nitrobenzoic acid** and **4-(bromomethyl)benzoic acid**, result in **high yield**. Electron-withdrawing groups increase the acidity of the carboxyl group, improving its ability to coordinate with metal ions and form stable catalytic complexes through stronger metal-ligand interactions.

- **Rule 3**: Modifiers that are **aromatic carboxylic acids** with **electron-donating substituents** at the **para position**, such as **4-methylbenzoic acid** and **4-hydroxybenzoic acid**, lead to **low yield**. Electron-donating groups decrease the acidity of the carboxyl group, weakening metal coordination interactions and reducing catalyst effectiveness.

- **Rule 4**: Modifiers containing **nitrogen-containing heterocycles** capable of metal coordination, such as **pyridine-3-carboxylic acid**, **1H-pyrazole-4-carboxylic acid**, and **2-oxo-1H-pyridine-4-carboxylic acid**, lead to **high yield**. Nitrogen atoms in heterocycles serve as additional **coordination sites**, strengthening metal-ligand interactions and enhancing catalytic efficiency.

- **Rule 5**: Modifiers that are **ω-amino acids** with chain lengths of **five carbons or fewer**, like **5-aminopentanoic acid**, lead to **high yield**. The proximity of the **amino** and **carboxyl** groups allows for effective **bidentate coordination**, forming stable chelate rings with metal ions and enhancing catalyst activity. Conversely, longer-chain ω-amino acids (six carbons or more), such as **7-aminoheptanoic acid** and **8-aminooctanoic acid**, result in **low yield** due to decreased coordination efficiency caused by increased chain flexibility and distance between functional groups.

- **Rule 6**: Modifiers containing **multiple hydroxyl groups** near the carboxyl group, such as **gluconic acid** (`(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid`), lead to **high yield**. The multiple hydroxyl groups provide **multidentate coordination sites**, increasing catalyst stability and reactivity through stronger and more numerous metal-ligand bonds.

- **Rule 7**: Modifiers with **aldehyde groups** adjacent to aromatic rings or carboxyl groups, such as **4-formylbenzoic acid** and **5-formyl-2-hydroxybenzoic acid**, result in **low yield**. Aldehyde groups can interfere with metal coordination by forming competing complexes or undergoing side reactions, diminishing catalyst performance.

- **Rule 8**: Modifiers that are **aliphatic carboxylic acids** without additional functional groups, such as **octanoic acid**, lead to **high yield**. The unbranched aliphatic chain allows for favorable **hydrophobic interactions** with the catalyst surface, potentially enhancing catalyst-modifier binding and activity through increased proximity and orientation.

- **Rule 9**: Modifiers containing **sulfanyl (-SH) groups** in an **aliphatic chain**, such as **3-sulfanylpropanoic acid**, result in **high yield**. Thiol groups have a strong affinity for metal ions, forming stable complexes through effective **sulfur-metal coordination**. However, when the sulfanyl group is on an **aromatic ring**, as in **4-sulfanylbenzoic acid**, the yield is **low**, possibly due to steric hindrance or decreased sulfur reactivity in the aromatic system.

- **Rule 10**: Modifiers with **shielded or blocked coordination sites**, such as **N-acetylated amino acids** like **(2S)-6-acetamido-2-aminohexanoic acid**, lead to **low yield**. Blocking groups prevent amino functionalities from coordinating with metal ions, limiting chelation and decreasing catalyst efficiency.

- **Rule 11**: Modifiers that are **hydrophilic polyether carboxylic acids**, such as **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**, result in **low yield**. The presence of long **ether chains** may reduce the ability of the carboxyl group to coordinate with metal ions due to solvation effects and increased steric hindrance, weakening metal-ligand interactions.

- **Rule 12**: Modifiers that are **aromatic amino acids** with **electron-rich side chains**, such as **L-phenylalanine** (`(2S)-2-amino-3-phenylpropanoic acid`), lead to **low yield**. The electron-rich aromatic side chain can decrease the acidity of the carboxyl group and compete with metal coordination, reducing catalyst effectiveness.

- **Rule 13**: Modifiers containing both **hydroxy** and **methoxy** groups on an aromatic ring, such as **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid**, lead to **high yield**. The combination of these groups can enhance metal coordination through multiple interactions and stabilize the catalyst via **chelation** and **π-π stacking**.

- **Rule 14**: Modifiers that are **pyridine-substituted aliphatic acids**, such as **4-pyridin-4-ylbutanoic acid**, result in **high yield**. The **pyridine nitrogen** offers an additional coordination site, enhancing metal-ligand interactions and catalyst reactivity.

- **Rule 15**: Modifiers with **long-chain hydroxy acids**, such as **7-hydroxyheptanoic acid**, lead to **low yield**. The increased chain length and hydrophilicity may impede effective coordination with metal ions and interfere with catalyst-modifier interactions due to steric factors and reduced binding affinity.

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 9.1,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6285714285714286; Test Accuracy: 0.0
    Train Support: 0.11428571428571428; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 2.0588235294117645; Test Lift: NONE
    Train Leverage: 0.05877551020408162; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and features
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    amino_acid_backbone = '[NX3][CX4]'
    side_chain_carboxyl = '[CX3](=O)[OX2H1]'
    aromatic_ring = 'a1aaaaa1'
    electron_withdrawing_groups = ['[NX3+](=O)[O-]', '[F,Cl,Br,I]', '[C](F)(F)F']  # Nitro group, halogens, trifluoromethyl
    electron_donating_groups = ['[OX2H]', '[OX2][CH3]', '[NX3H2]']  # Hydroxyl, methoxy, amino
    nitrogen_heterocycles = ['n1ccccc1', 'n1ccncc1', 'n1ccccn1']  # Pyridine, pyrazole, pyrimidine
    omega_amino_acid_chain = '[NX3H2][CH2]{n}[CX3](=O)[OX2H1]'  # n = variable number of CH2 units
    hydroxyl_group = '[OX2H]'
    aldehyde_adjacent_aromatic = '[#6]=[CX3H1][CX3](=O)[OX2H1]'
    sulfanyl_aliphatic = '[SX2H][CH2][CX3](=O)[OX2H1]'
    sulfanyl_aromatic = '[SX2H][c]'
    blocked_amino = '[NX3][C](=O)'  # Acetylated amine
    ether_chain = '[OX2][CX4]'  # Ether linkage in polyethers
    aromatic_amino_acid = '[c][CX3](=O)[OX2H1]'  # Phenylalanine
    hydroxy_methoxy_aromatic = '[c][OX2H,OX2][CX4][CX3](=O)[OX2H1]'
    pyridine_aliphatic_acid = 'n1cccc1[CX3](=O)[OX2H1]'
    long_chain_hydroxy_acid = '[CX3](=O)[OX2H1][CH2]{n}[OX2H1]'  # n >= 5
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'High yield: Amino acids with side-chain carboxyl groups (e.g., L-aspartic acid, L-glutamic acid).',
            'patterns': [
                amino_acid_backbone,
                side_chain_carboxyl
            ],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'High yield: Aromatic carboxylic acids with electron-withdrawing substituents at the para position.',
            'patterns': [
                '[cH]1ccc([CX3](=O)[OX2H1])cc1',
                '[cH]1ccc([NX3+](=O)[O-;X1])cc1',  # Nitro group at para position
                '[cH]1ccc([F,Cl,Br,I])cc1'  # Halogen at para position
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Low yield: Aromatic carboxylic acids with electron-donating substituents at the para position.',
            'patterns': [
                '[cH]1ccc([CX3](=O)[OX2H1])cc1',
                '[cH]1ccc([OX2H,OX2][CH3,NX3H2])cc1'  # Hydroxyl or methoxy at para position
            ],
            'prediction': -1
        },
        {
            'number': 4,
            'description': 'High yield: Nitrogen-containing heterocycles capable of metal coordination (e.g., pyridine-3-carboxylic acid).',
            'patterns': [
                '[n][c][c][c][c][CX3](=O)[OX2H1]',  # Pyridine carboxylic acid
                '[n][n][c][c][CX3](=O)[OX2H1]',      # Pyrazole carboxylic acid
                '[n][c](=O)[c][c][CX3](=O)[OX2H1]'   # 2-oxo-1H-pyridine-4-carboxylic acid
            ],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'High yield: ω-Amino acids with chain lengths of five carbons or fewer.',
            'patterns': [
                '[NX3H2][CH2]{,5}[CX3](=O)[OX2H1]',  # n ≤ 5
            ],
            'exclude_patterns': [
                '[NX3H2][CH2]{6,}[CX3](=O)[OX2H1]'  # Exclude n ≥ 6
            ],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'High yield: Modifiers containing multiple hydroxyl groups near the carboxyl group.',
            'patterns': [
                '[CX3](=O)[OX2H1][CH](O)[CH](O)[CH](O)[CH](O)[CH2]O',  # Gluconic acid
            ],
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'Low yield: Modifiers with aldehyde groups adjacent to aromatic rings or carboxyl groups.',
            'patterns': [
                '[c][CX3H1](=O)',  # Aldehyde adjacent to aromatic ring
                '[CX3H1](=O)[CX3](=O)[OX2H1]'  # Aldehyde adjacent to carboxyl group
            ],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'High yield: Aliphatic carboxylic acids without additional functional groups.',
            'patterns': [
                '[CX3](=O)[OX2H1][CX4][CX4][CX4][CX4][CX4]'  # Aliphatic chain of at least 5 carbons
            ],
            'exclude_patterns': [
                '[OX2H]',  # Exclude if hydroxyl group is present
                '[NX3]',   # Exclude if amine group is present
                '[#16]',   # Exclude if sulfur is present
                '[OX2][CX4]',  # Exclude ethers
                '[F,Cl,Br,I]',  # Exclude halogens
            ],
            'prediction': 1
        },
        {
            'number': 9,
            'description': 'High yield: Modifiers containing sulfanyl (-SH) groups in an aliphatic chain.',
            'patterns': [
                '[SX2H][CH2][CX3](=O)[OX2H1]',  # Thiol in aliphatic chain
            ],
            'exclude_patterns': [
                '[SX2H][c]',  # Exclude if thiol is on aromatic ring
            ],
            'prediction': 1
        },
        {
            'number': 9.1,
            'description': 'Low yield: Modifiers containing sulfanyl (-SH) groups on an aromatic ring.',
            'patterns': [
                '[SX2H][c]',  # Thiol on aromatic ring
            ],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Low yield: Modifiers with shielded or blocked coordination sites (e.g., N-acetylated amino acids).',
            'patterns': [
                '[NX3][C](=O)',  # Acetylated amine
            ],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Low yield: Hydrophilic polyether carboxylic acids.',
            'patterns': [
                '[OX2][CX4][CX4][OX2][CX4][CX4][OX2][CX3](=O)[OX2H1]',  # Polyether chain ending with carboxylic acid
            ],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'Low yield: Aromatic amino acids with electron-rich side chains (e.g., L-phenylalanine).',
            'patterns': [
                '[NX3][CX4][CX4][c]',  # Amino acid with aromatic side chain
                '[CX3](=O)[OX2H1]'  # Carboxylic acid group
            ],
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'High yield: Modifiers containing both hydroxy and methoxy groups on an aromatic ring.',
            'patterns': [
                '[c][OX2H][c][OX2][CH3]',  # Aromatic ring with OH and OCH3
                '[CX3](=O)[OX2H1]'  # Carboxylic acid group
            ],
            'prediction': 1
        },
        {
            'number': 14,
            'description': 'High yield: Pyridine-substituted aliphatic acids.',
            'patterns': [
                '[n][c][c][c][c][c][CX4][CX3](=O)[OX2H1]',  # Pyridine ring connected to aliphatic acid
            ],
            'prediction': 1
        },
        {
            'number': 15,
            'description': 'Low yield: Long-chain hydroxy acids.',
            'patterns': [
                '[CX3](=O)[OX2H1][CH2]{6,}[OX2H]',  # n ≥ 6
            ],
            'prediction': -1
        },
    ]

    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for pat in rule.get('patterns', []):
            compiled_patterns.append(Chem.MolFromSmarts(pat))
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for pat in rule['exclude_patterns']:
                compiled_excludes.append(Chem.MolFromSmarts(pat))
            rule['compiled_exclude_patterns'] = compiled_excludes

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for pat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for pat in rule['compiled_patterns']:
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)

    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: Modifiers that are **amino acids with side-chain carboxyl groups**, such as **L-aspartic acid** (`(2S)-2-aminobutanedioic acid`) and **L-glutamic acid** (`(2S)-2-aminopentanedioic acid`), lead to **high yield**. The presence of both **amino** and multiple **carboxyl groups** allows for effective **multidentate chelation** with metal ions, enhancing catalyst stability and reactivity through the formation of stable chelate complexes.

- **Rule 2**: Modifiers that are **ω-amino acids** with a carbon chain length of **five carbons or fewer**, like **5-aminopentanoic acid**, result in **high yield**. The proximity of the **amino** and **carboxyl** groups enables efficient **bidentate coordination** with metal ions, forming stable chelate rings that enhance catalyst activity. Conversely, longer-chain ω-amino acids (six carbons or more), such as **7-aminoheptanoic acid** and **8-aminooctanoic acid**, lead to **low yield** due to decreased coordination efficiency caused by increased chain flexibility and distance between functional groups.

- **Rule 3**: Modifiers that are **aromatic carboxylic acids** with **electron-withdrawing substituents** at the **para position**, such as **4-nitrobenzoic acid** and **4-(bromomethyl)benzoic acid**, lead to **high yield**. Electron-withdrawing groups increase the acidity of the carboxyl group, improving its ability to coordinate with metal ions and form stable catalytic complexes through stronger **metal-ligand interactions**.

- **Rule 4**: Modifiers that are **aromatic carboxylic acids** with **electron-donating substituents** at the **para position**, such as **4-methylbenzoic acid** and **4-hydroxybenzoic acid**, result in **low yield**. Electron-donating groups decrease the acidity of the carboxyl group, weakening metal coordination interactions and reducing catalyst effectiveness due to less favorable **metal-ligand bonding**.

- **Rule 5**: Modifiers containing **amino groups** capable of coordinating with metal ions, such as **4-aminobenzoic acid** and **5-aminopentanoic acid**, lead to **high yield** even if they possess electron-donating substituents. The additional **coordination site** provided by the amino group enhances **chelation**, strengthening the metal-modifier complex and improving catalytic efficiency.

- **Rule 6**: Modifiers containing **nitrogen heterocycles** that can coordinate with metal ions, such as **pyridine-3-carboxylic acid**, **1H-pyrazole-4-carboxylic acid**, and **2-oxo-1H-pyridine-4-carboxylic acid**, result in **high yield**. Nitrogen atoms in heterocycles serve as effective **coordination sites**, enhancing **metal-ligand interactions** and promoting catalyst reactivity.

- **Rule 7**: Modifiers that are **aliphatic carboxylic acids** without additional functional groups, such as **octanoic acid**, lead to **high yield**. The unbranched aliphatic chains may facilitate favorable **hydrophobic interactions** with the catalyst surface, potentially enhancing catalyst-modifier binding and activity through increased **proximity** and optimal **orientation**.

- **Rule 8**: Modifiers containing **multiple hydroxyl groups** near the carboxyl group, such as **gluconic acid** (`(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid`), lead to **high yield**. The multiple hydroxyl groups provide **multidentate coordination sites**, increasing catalyst stability and reactivity through stronger and more numerous **metal-ligand bonds**.

- **Rule 9**: Modifiers with **aldehyde groups** adjacent to aromatic rings or carboxyl groups, such as **4-formylbenzoic acid** and **5-formyl-2-hydroxybenzoic acid**, result in **low yield**. Aldehyde groups can interfere with metal coordination by forming competing complexes or undergoing side reactions, diminishing catalyst performance due to **unfavorable interactions**.

- **Rule 10**: Modifiers containing **sulfhydryl (-SH) groups** in an **aliphatic chain**, such as **3-sulfanylpropanoic acid**, lead to **high yield**. Thiol groups have a strong affinity for metal ions, forming stable complexes through effective **sulfur-metal coordination**. However, when the sulfhydryl group is on an **aromatic ring**, as in **4-sulfanylbenzoic acid**, the yield is **low**, possibly due to steric hindrance or decreased sulfur reactivity in the aromatic system affecting **coordination efficiency**.

- **Rule 11**: Modifiers with **blocked or sterically hindered coordination sites**, such as **N-acetylated amino acids** like **(2S)-6-acetamido-2-aminohexanoic acid**, result in **low yield**. Blocking groups prevent amino functionalities from coordinating with metal ions, limiting **chelation** and decreasing catalyst effectiveness due to reduced **metal-ligand interactions**.

- **Rule 12**: Modifiers that are **hydrophilic polyether carboxylic acids**, such as **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**, lead to **low yield**. The presence of long **ether chains** may reduce the ability of the carboxyl group to coordinate with metal ions because of **solvation effects** and increased **steric hindrance**, weakening the **metal-ligand bonding** necessary for effective catalysis.

- **Rule 13**: Modifiers that are **aromatic amino acids** with **electron-rich side chains**, such as **L-phenylalanine** (`(2S)-2-amino-3-phenylpropanoic acid`), result in **low yield**. The electron-rich aromatic side chain can compete with the carboxyl group for coordination with metal ions or decrease the overall acidity, reducing catalyst effectiveness due to **competitive binding** or **weakened metal coordination**.

- **Rule 14**: Modifiers that are **pyridine-substituted aliphatic acids**, such as **4-pyridin-4-ylbutanoic acid**, lead to **high yield**. The **pyridine nitrogen** offers an additional **coordination site**, enhancing **metal-ligand interactions** and improving catalyst reactivity through strengthened **chelation**.

- **Rule 15**: Modifiers with **long-chain hydroxy acids**, such as **7-hydroxyheptanoic acid**, result in **low yield**. The increased chain length and hydrophilicity may impede effective coordination with metal ions and interfere with catalyst-modifier interactions due to **steric factors** and reduced **binding affinity**, leading to less efficient catalysis.

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10
0,0,0,0,0,0,0,0,0,0
0,1,0,0,1,0,0,1,0,0
0,0,0,0,0,0,0,0,0,-1
0,1,0,0,1,0,0,1,0,0
0,1,0,0,1,0,0,0,0,0
0,1,0,0,1,0,0,0,0,-1
0,0,0,0,0,0,0,0,0,0
0,1,0,0,1,0,0,1,0,0
0,0,0,0,0,0,0,1,0,-1
0,0,0,0,0,0,0,0,0,-1
0,0,0,0,0,0,0,1,0,0
0,0,0,0,0,0,0,0,0,-1
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1
0,1,0,0,1,0,0,0,0,-1
0,1,0,0,1,0,0,0,0,-1
0,0,0,0,0,0,0,0,0,-1
0,0,0,0,0,0,0,0,0,-1
0,0,0,0,0,0,0,0,0,1
0,0,0,0,0,0,0,1,-1,-1
0,0,0,0,0,0,0,0,-1,-1
0,0,0,0,0,0,0,0,0,-1
0,0,0,0,0,0,0,0,0,-1
0,0,0,0,0,0,0,0,0,-1
0,1,0,0,1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1
0,0,0,0,0,0,0,0,0,-1
0,1,0,0,1,0,0,1,0,-1
0,0,0,0,0,0,0,1,0,0
0,1,0,0,1,0,0,0,0,0
0,0,0,0,0,0,0,1,0,0
0,0,0,0,0,0,0,1,0,-1
0,-1,0,0,1,0,0,0,0,0
0,-1,0,0,1,0,0,0,0,0
0,1,0,0,1,0,0,0,0,0
0,-1,0,0,1,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.7714285714285715; Test Accuracy: 1.0
    Train Support: 0.17714285714285713; Test Support: 0.0
    Train Confidence: 0.6042857142857143; Test Confidence: 0.5
    Train Lift: 1.2119281045751635; Test Lift: NONE
    Train Leverage: 0.004734693877551027; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups with corrections and improvements from suggestions
    
    # Amino group attached to any carbon
    amino_group_any = '[NX3;H2,H1][#6]'
    
    # Carboxylic acid group (-COOH) including carboxylate anion
    carboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1]'
    
    # Side-chain carboxylic acid (excluding alpha-carboxyl group)
    side_chain_carboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1][#6]'
    
    # Electron-withdrawing groups (EWGs)
    ewg_patterns = ['[F,Cl,Br,I]', '[CX3](=O)[OX1H0-,OX2H1]', '[NX3+](=O)[O-]', '[CX4][F][F][F]']
    
    # Electron-donating groups (EDGs)
    edg_patterns = ['[OX2H]', '[OX2][#6]', '[NX3;H2,H1][#6]']
    
    # Aromatic carboxylic acid
    aromatic_carboxylic_acid = '[c][CX3](=O)[OX1H0-,OX2H1]'
    
    # Aromatic ring
    aromatic_ring = '[a]'
    
    # Nitrogen heterocycles
    nitrogen_heterocycles = ['[n]1cccc1', '[n]1ccccc1', '[n]1cccnc1', '[n]1ccncc1', '[nH]1cccc1', '[n]1cnccc1']
    
    # Thiol group (-SH)
    thiol_group = '[SX2H]'
    
    # Ether linkage (-O-)
    ether_linkage = '[#6][OX2][#6]'
    
    # Hydroxyl group (-OH)
    hydroxyl_group = '[OX2H]'
    
    # Aldehyde group adjacent to aromatic rings or carboxyl group
    aldehyde_group = '[CX3H1](=O)[#6]'
    
    # Blocked amino group (e.g., N-acetylated amino group)
    blocked_amino_group = '[NX3;!H0][CX3](=O)'
    
    # Polyether chain (e.g., hydrophilic polyether carboxylic acids)
    polyether_chain = '[OX2H][CX2][CX2][OX2][CX2][CX2][OX2]'
    
    # Aromatic amino acid with electron-rich side chain (e.g., L-phenylalanine)
    aromatic_amino_acid = '[NX3;H2,H1][CX4][CX3](=O)[OX1H0-,OX2H1][CX4][c]'
    
    # Pyridine-substituted aliphatic acid
    pyridine_aliphatic_acid = '[#6][NX2][c]'
    
    # Long-chain hydroxy acid (length will be checked in code)
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are amino acids with side-chain carboxyl groups, leading to high yield.',
            'patterns': [
                amino_group_any,
                side_chain_carboxylic_acid,
                carboxylic_acid,
            ],
            'count_threshold': {carboxylic_acid: 2},  # At least 2 carboxylic acid groups
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers that are ω-amino acids with a carbon chain length of five carbons or fewer, leading to high yield. Longer chains lead to low yield.',
            'patterns': [
                amino_group_any,
                carboxylic_acid,
            ],
            'chain_length': 5,
            'prediction': 1,
            'negative_prediction': -1  # For longer chains
        },
        {
            'number': 3,
            'description': 'Modifiers that are aromatic carboxylic acids with electron-withdrawing substituents at the para position, leading to high yield.',
            'patterns': [
                aromatic_carboxylic_acid,
            ],
            'para_substituent_patterns': ewg_patterns,
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers that are aromatic carboxylic acids with electron-donating substituents at the para position, leading to low yield.',
            'patterns': [
                aromatic_carboxylic_acid,
            ],
            'para_substituent_patterns': edg_patterns,
            'prediction': -1
        },
        {
            'number': 5,
            'description': 'Modifiers containing amino groups capable of coordinating with metal ions, leading to high yield.',
            'patterns': [
                amino_group_any,
            ],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers containing nitrogen heterocycles that can coordinate with metal ions, leading to high yield.',
            'patterns': nitrogen_heterocycles,
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'Modifiers that are aliphatic carboxylic acids without additional functional groups, leading to high yield.',
            'patterns': [
                carboxylic_acid,
            ],
            'exclude_patterns': [
                amino_group_any,
                thiol_group,
                ether_linkage,
                aromatic_ring,
                hydroxyl_group,  # Added per Suggestion 7
                '[F,Cl,Br,I]',   # Exclude halogens
                '[CX3]=[CX3]',   # Exclude alkenes
                '[CX2]#[CX2]',   # Exclude alkynes
            ],
            'prediction': 1
        },
        {
            'number': 8,
            'description': 'Modifiers containing multiple hydroxyl groups near the carboxyl group, leading to high yield.',
            'patterns': [
                carboxylic_acid,
                hydroxyl_group,
            ],
            'count_threshold': {hydroxyl_group: 2},  # At least 2 hydroxyl groups
            'check_proximity': True,
            'prediction': 1
        },
        {
            'number': 9,
            'description': 'Modifiers with aldehyde groups adjacent to aromatic rings or carboxyl groups, leading to low yield.',
            'patterns': [
                aldehyde_group,
            ],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers containing sulfhydryl (-SH) groups in an aliphatic chain, leading to high yield. When the sulfhydryl group is on an aromatic ring, the yield is low.',
            'patterns': [
                thiol_group,
            ],
            'exclude_patterns': [
                aromatic_ring,
            ],
            'prediction': 1,
            'negative_prediction': -1
        },
        # Additional rules can be added here following the same structure
    ]

    # Compile SMARTS patterns, storing both the compiled pattern and the SMARTS string
    for rule in rules:
        compiled_patterns = []
        for patt in rule.get('patterns', []):
            mol_pat = Chem.MolFromSmarts(patt)
            if mol_pat is not None:
                compiled_patterns.append({'pattern': mol_pat, 'smarts': patt})
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_exclude_patterns = []
            for patt in rule.get('exclude_patterns', []):
                mol_pat = Chem.MolFromSmarts(patt)
                if mol_pat is not None:
                    compiled_exclude_patterns.append({'pattern': mol_pat, 'smarts': patt})
            rule['compiled_exclude_patterns'] = compiled_exclude_patterns
        # Compile para substituent patterns if any (for Rules 3 and 4)
        if 'para_substituent_patterns' in rule:
            compiled_para_patterns = []
            for patt in rule['para_substituent_patterns']:
                mol_pat = Chem.MolFromSmarts(patt)
                if mol_pat is not None:
                    compiled_para_patterns.append({'pattern': mol_pat, 'smarts': patt})
            rule['compiled_para_patterns'] = compiled_para_patterns
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'compiled_exclude_patterns' in rule:
                    for pat_dict in rule['compiled_exclude_patterns']:
                        pat = pat_dict['pattern']
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        if 'negative_prediction' in rule:
                            row.append(rule['negative_prediction'])
                        else:
                            row.append(0)
                        continue
                # Check required patterns
                matches_dict = {}
                for pat_dict in rule['compiled_patterns']:
                    pat = pat_dict['pattern']
                    smarts = pat_dict['smarts']
                    matches = mol.GetSubstructMatches(pat)
                    if not matches:
                        match = False
                        break
                    else:
                        matches_dict[smarts] = matches
                if not match:
                    row.append(0)
                    continue
                # Check count thresholds
                if 'count_threshold' in rule:
                    for smarts_key, threshold in rule['count_threshold'].items():
                        if smarts_key in matches_dict:
                            if len(matches_dict[smarts_key]) < threshold:
                                match = False
                                break
                        else:
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # For Rule 8, check proximity of hydroxyl groups to carboxyl group
                if rule.get('check_proximity', False):
                    hydroxyl_atoms = [match[0] for match in matches_dict.get(hydroxyl_group, [])]
                    carboxyl_atoms = [match[0] for match in matches_dict.get(carboxylic_acid, [])]
                    if not hydroxyl_atoms or not carboxyl_atoms:
                        match = False
                    else:
                        proximity = False
                        for h_idx in hydroxyl_atoms:
                            for c_idx in carboxyl_atoms:
                                path_length = Chem.rdmolops.GetShortestPath(mol, h_idx, c_idx)
                                if len(path_length) <= 4:  # Adjust the distance as needed
                                    proximity = True
                                    break
                            if proximity:
                                break
                        if not proximity:
                            match = False
                    if not match:
                        row.append(0)
                        continue
                # For Rules 3 and 4, check for para-substituent patterns
                if 'compiled_para_patterns' in rule:
                    para_match = False
                    # Implement matching code for para substituents
                    # For simplicity, we will check if any of the para substituent patterns match
                    for pat_dict in rule['compiled_para_patterns']:
                        pat = pat_dict['pattern']
                        # Define a query that matches the aromatic carboxylic acid with a substituent at the para position
                        para_pattern = Chem.MolFromSmarts('c1ccc([!H])cc1C(=O)[O,H]')
                        if mol.HasSubstructMatch(para_pattern):
                            # Now check if the substituent is the desired group
                            matches = mol.GetSubstructMatches(para_pattern)
                            for match_idxs in matches:
                                sub_atom_idx = match_idxs[3]  # Index of the substituent atom
                                neighbor = mol.GetAtomWithIdx(sub_atom_idx)
                                for para_pat_dict in rule['compiled_para_patterns']:
                                    para_pat = para_pat_dict['pattern']
                                    if mol.HasSubstructMatch(para_pat, atoms=neighbor.GetNeighbors()):
                                        para_match = True
                                        break
                                if para_match:
                                    break
                            if para_match:
                                break
                    if not para_match:
                        match = False
                # For chain length in Rule 2
                if 'chain_length' in rule:
                    # Find amino and carboxylic acid atoms
                    amino_matches = mol.GetSubstructMatches(Chem.MolFromSmarts(amino_group_any))
                    carboxy_matches = mol.GetSubstructMatches(Chem.MolFromSmarts(carboxylic_acid))
                    if not amino_matches or not carboxy_matches:
                        match = False
                    else:
                        min_chain_length = None
                        for a_match in amino_matches:
                            for c_match in carboxy_matches:
                                path = Chem.rdmolops.GetShortestPath(mol, a_match[0], c_match[0])
                                chain_atoms = [mol.GetAtomWithIdx(idx) for idx in path[1:-1]]
                                carbon_chain_length = sum(1 for atom in chain_atoms if atom.GetAtomicNum() == 6)
                                if min_chain_length is None or carbon_chain_length < min_chain_length:
                                    min_chain_length = carbon_chain_length
                        if min_chain_length is None:
                            match = False
                        elif min_chain_length > rule['chain_length']:
                            if 'negative_prediction' in rule:
                                row.append(rule['negative_prediction'])
                            else:
                                row.append(0)
                            continue
                # If match is still True, append prediction
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: Modifiers containing **both amino and carboxyl groups** in an **aliphatic chain**, such as **(2S)-2-aminopentanedioic acid** (L-glutamic acid), **(2S)-2-aminobutanedioic acid** (L-aspartic acid), and **5-aminopentanoic acid**, lead to **high yield**. The presence of these groups allows for effective **chelation with metal ions**, enhancing catalyst stability and reactivity through the formation of stable **metal-ligand complexes**.

- **Rule 2**: Modifiers that are **aliphatic carboxylic acids with unbranched chains of eight carbons or fewer**, such as **octanoic acid**, result in **high yield**. The hydrophobic aliphatic chains may facilitate favorable **interactions with the catalyst surface**, enhancing catalyst-modifier binding and activity through increased **proximity** and optimal **orientation**.

- **Rule 3**: Modifiers containing a **thiol (-SH) group** in an **aliphatic chain**, such as **3-sulfanylpropanoic acid**, lead to **high yield**. Thiol groups have a strong affinity for metal ions, forming stable complexes through effective **sulfur-metal coordination**, which enhances catalyst performance.

- **Rule 4**: Modifiers that are **aromatic carboxylic acids** with **electron-withdrawing substituents** at the **para position**, like **4-nitrobenzoic acid** and **4-(bromomethyl)benzoic acid**, result in **high yield**. Electron-withdrawing groups increase the acidity of the carboxyl group, improving its ability to coordinate with metal ions and form stable catalytic complexes through stronger **metal-ligand interactions**.

- **Rule 5**: Modifiers that are **aromatic carboxylic acids** with **electron-donating substituents** at the **para position**, such as **4-methylbenzoic acid**, lead to **low yield**. Electron-donating groups decrease the acidity of the carboxyl group, weakening metal coordination interactions and reducing catalyst effectiveness due to less favorable **metal-ligand bonding**. However, modifiers like **4-aminobenzoic acid** result in **high yield** because the amino group can also act as a coordination site, compensating for the electron-donating effect by enhancing **chelation** with the metal ion.

- **Rule 6**: Modifiers containing **nitrogen heterocycles** capable of coordinating with metal ions, such as **pyridine-3-carboxylic acid**, **1H-pyrazole-4-carboxylic acid**, and **2-oxo-1H-pyridine-4-carboxylic acid**, lead to **high yield**. Nitrogen atoms in heterocycles serve as effective **coordination sites**, enhancing **metal-ligand interactions** and promoting catalyst reactivity.

- **Rule 7**: Modifiers with **aldehyde groups** adjacent to aromatic rings or carboxyl groups, such as **4-formylbenzoic acid** and **5-formyl-2-hydroxybenzoic acid**, result in **low yield**. Aldehyde groups can interfere with metal coordination by forming competing complexes or undergoing side reactions, diminishing catalyst performance due to **unfavorable interactions**.

- **Rule 8**: Modifiers with **bulky aromatic side chains**, such as **(2S)-2-amino-3-phenylpropanoic acid** (L-phenylalanine), tend to result in **low yield**. The bulky side chains can cause **steric hindrance**, interfering with metal coordination and decreasing catalyst effectiveness due to obstructed **metal-ligand interactions**. However, modifiers like **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (L-tryptophan) lead to **high yield**, possibly because the indole ring participates in coordination, enhancing **binding affinity**.

- **Rule 9**: Modifiers containing **multiple hydroxyl groups** near the carboxyl group, such as **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (gluconic acid), lead to **high yield**. The multiple hydroxyl groups provide **multidentate coordination sites**, increasing catalyst stability and reactivity through stronger and more numerous **metal-ligand bonds**.

- **Rule 10**: Modifiers that are **long-chain hydroxy acids**, such as **7-hydroxyheptanoic acid**, result in **low yield**. The increased chain length and hydrophilicity may impede effective coordination with metal ions and interfere with catalyst-modifier interactions due to **steric factors** and reduced **binding affinity**, leading to less efficient catalysis.

- **Rule 11**: Modifiers that contain **ethoxy or polyether chains**, such as **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**, lead to **low yield**. The presence of long **ether chains** may reduce the ability of the carboxyl group to coordinate with metal ions because of **solvation effects** and increased **steric hindrance**, weakening the **metal-ligand bonding** necessary for effective catalysis.

- **Rule 12**: Modifiers containing **sulfhydryl (-SH) groups** attached to an **aromatic ring**, such as **4-sulfanylbenzoic acid**, result in **low yield**. The aromatic system may decrease sulfur reactivity or cause **steric hindrance**, affecting **coordination efficiency** and diminishing catalyst performance.

- **Rule 13**: Modifiers with **blocked or sterically hindered coordination sites**, such as **N-acetylated amino acids** like **(2S)-6-acetamido-2-aminohexanoic acid**, result in **low yield**. Blocking groups prevent amino functionalities from coordinating with metal ions, limiting **chelation** and decreasing catalyst effectiveness due to reduced **metal-ligand interactions**.

- **Rule 14**: Modifiers that combine **aromatic rings** with **flexible aliphatic linkers**, such as **4-pyridin-4-ylbutanoic acid**, lead to **high yield**. The flexible linker allows the aromatic ring containing a **nitrogen heterocycle** to effectively coordinate with the metal ion, enhancing catalyst reactivity through improved **binding orientation**.

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,1
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,-1,0
0,0,0,0,0,1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,1
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6857142857142857; Test Accuracy: 0.0
    Train Support: 0.04897959183673469; Test Support: 0.0
    Train Confidence: 0.7999999999999999; Test Confidence: 0.5
    Train Lift: 1.6013071895424835; Test Lift: NONE
    Train Leverage: 0.016209912536443154; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups, incorporating corrections from suggestions.

    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    carboxylate_anion = '[CX3](=O)[O-]'
    carboxylic_acids = [carboxylic_acid, carboxylate_anion]
    
    # Primary aliphatic amine (-NH2)
    primary_aliphatic_amine = '[NX3;H2][CX4;!$(C=[O,N,S]);!$(C[!#6])]'
    
    # Aromatic atom (any atom in an aromatic ring)
    aromatic_atom = '[a]'
    
    # Thiol group (-SH)
    thiol_group = '[SX2H]'

    # Exclude aromatic thiols
    aromatic_thiol = '[c][SX2H]'

    # Electron-withdrawing groups (EWG) at para position on aromatic ring
    para_halogen_benzene = ['c1cc(ccc1C(=O)[OX2H1])[F,Cl,Br,I]']
    para_nitro_benzene = ['c1cc(ccc1C(=O)[OX2H1])[N+](=O)[O-]']

    # Electron-donating groups (EDG) at para position on aromatic ring
    para_methyl_benzene = ['c1cc(ccc1C(=O)[OX2H1])C']
    para_methoxy_benzene = ['c1cc(ccc1C(=O)[OX2H1])OC']
    # Exclude para-amino benzoic acid from low yield
    para_amino_benzene = ['c1cc(ccc1C(=O)[OX2H1])N']
    
    # Nitrogen heterocycles
    pyridine_ring = ['c1ccncc1']  # pyridine
    pyrazole_ring = ['c1cn[nH]c1']  # pyrazole
    pyridone_ring = ['O=c1ccncc1']  # pyridone
    nitrogen_heterocycles = pyridine_ring + pyrazole_ring + pyridone_ring

    # Aldehyde group adjacent to aromatic ring
    aromatic_aldehyde = ['[cH]1[cH][cH][cH][cH][c]1C=O', '[cH]1[cH][cH][cH][cH][c]1[C]=O']

    # Bulky aromatic side chains (phenylalanine)
    phenylalanine = '[NX3;H2][CX4H]([CX4H])[CX3](=O)[OX2H1][CX4][CX4H](C)[c]1ccccc1'

    # Tryptophan
    tryptophan = '[NX3;H2][CX4H]([CX4H])[CX3](=O)[OX2H1][CX4][CX3H](C)[c]1c2ccccc2[nH]c1'

    # Multiple hydroxyl groups near carboxyl group (gluconic acid)
    multiple_hydroxyls_near_carboxyl = '[CX4]([OX2H])[CX4]([OX2H])[CX4]([OX2H])[CX4]([OX2H])[CX4]([OX2H])[CX3](=O)[OX2H1]'

    # Polyether chains (ethoxy or polyether)
    polyether_chain = '[CX4][OX2;R0][CX4][OX2;R0][CX4][OX2;R0][CX4][CX3](=O)[OX2H1]'

    # N-acetylated amino acids
    N_acetylated_amino_acid = 'O=C(C)[NX3][CX4][CX3](=O)[OX2H1]'

    # Aromatic ring with flexible aliphatic linker to carboxylic acid
    aromatic_flexible_linker = 'c1ccccc1[CX4][CX4][CX3](=O)[OX2H1]'
    
    # Define the rules
    rules = [
        {
            'number': 1,
            'description': 'Modifiers containing both amino and carboxyl groups in an aliphatic chain, leading to high yield.',
            'patterns': [
                [primary_aliphatic_amine],
                carboxylic_acids
            ],
            'exclude_patterns': [
                [aromatic_atom]  # Exclude aromatic atoms to ensure aliphatic chain
            ],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers that are aliphatic carboxylic acids with unbranched chains of eight carbons or fewer, leading to high yield.',
            'patterns': [
                carboxylic_acids
            ],
            'exclude_patterns': [
                [aromatic_atom],  # Exclude aromatic atoms
                ['[CX4](C)(C)C']  # Exclude branching
            ],
            'chain_length': 8,
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers containing a thiol (-SH) group in an aliphatic chain, leading to high yield.',
            'patterns': [
                [thiol_group],
                carboxylic_acids
            ],
            'exclude_patterns': [
                [aromatic_atom],
                [aromatic_thiol]  # Exclude aromatic thiols
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers that are aromatic carboxylic acids with electron-withdrawing substituents at the para position, leading to high yield.',
            'patterns': [
                para_nitro_benzene + para_halogen_benzene
            ],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers that are aromatic carboxylic acids with electron-donating substituents at the para position leading to low yield, unless the substituent is amino group.',
            'patterns': [
                para_methyl_benzene + para_methoxy_benzene
            ],
            'exclude_patterns': [
                para_amino_benzene  # Exclude amino group at para position
            ],
            'prediction': -1
        },
        {
            'number': 6,
            'description': 'Modifiers containing nitrogen heterocycles capable of coordinating with metal ions, leading to high yield.',
            'patterns': [
                nitrogen_heterocycles,
                carboxylic_acids
            ],
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'Modifiers with aldehyde groups adjacent to aromatic rings or carboxyl groups, resulting in low yield.',
            'patterns': [
                aromatic_aldehyde,
                carboxylic_acids
            ],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Modifiers with bulky aromatic side chains, resulting in low yield, except if the aromatic group participates in coordination.',
            'patterns': [
                [phenylalanine]
            ],
            'exclude_patterns': [
                [tryptophan]  # Exclude tryptophan which leads to high yield
            ],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers containing multiple hydroxyl groups near the carboxyl group, leading to high yield.',
            'patterns': [
                [multiple_hydroxyls_near_carboxyl]
            ],
            'prediction': 1
        },
        {
            'number': 10,
            'description': 'Modifiers that are long-chain hydroxy acids, resulting in low yield.',
            'patterns': [
                carboxylic_acids
            ],
            'chain_length': 7,
            'hydroxy_acid': True,
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Modifiers that contain ethoxy or polyether chains, leading to low yield.',
            'patterns': [
                [polyether_chain]
            ],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'Modifiers containing sulfhydryl (-SH) groups attached to an aromatic ring, resulting in low yield.',
            'patterns': [
                [aromatic_thiol],
                carboxylic_acids
            ],
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Modifiers with blocked or sterically hindered coordination sites, such as N-acetylated amino acids, resulting in low yield.',
            'patterns': [
                [N_acetylated_amino_acid]
            ],
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'Modifiers that combine aromatic rings with flexible aliphatic linkers, leading to high yield.',
            'patterns': [
                [aromatic_flexible_linker]
            ],
            'prediction': 1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        # Compile required patterns
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(p) for p in group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for group in rule['exclude_patterns']:
                compiled_group = [Chem.MolFromSmarts(p) for p in group]
                compiled_excludes.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_excludes
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            print(f"Warning: RDKit failed to parse SMILES {smi}")
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        if mol.HasSubstructMatch(pat):
                            group_match = True
                            break
                    if not group_match:
                        match = False
                        break
                # Special handling for Rule 2 and Rule 10
                if match:
                    if rule.get('number') == 2 and 'chain_length' in rule:
                        # Identify the carboxylic acid group
                        carboxylic_acid_mol = Chem.MolFromSmarts('[CX3](=O)[OX1H0-,OX2H1]')
                        matches_carb = mol.GetSubstructMatches(carboxylic_acid_mol)
                        max_chain_length = 0
                        for match_atom_indices in matches_carb:
                            # Get the carbon atom of the carboxylic acid
                            carboxyl_c_idx = match_atom_indices[0]
                            # Traverse the chain starting from the carboxyl carbon
                            chain_length = get_longest_aliphatic_chain_length(mol, carboxyl_c_idx, exclude_branching=True)
                            if chain_length > max_chain_length:
                                max_chain_length = chain_length
                        if max_chain_length > rule['chain_length']:
                            match = False
                    elif rule.get('number') == 10 and 'hydroxy_acid' in rule:
                        # Check if the molecule is a hydroxy acid with long chain
                        # Identify hydroxyl groups
                        hydroxy_mol = Chem.MolFromSmarts('[OX2H]')
                        hydroxyl_matches = mol.GetSubstructMatches(hydroxy_mol)
                        # Identify carboxylic acid groups
                        carboxylic_acid_mol = Chem.MolFromSmarts('[CX3](=O)[OX1H0-,OX2H1]')
                        carboxyl_matches = mol.GetSubstructMatches(carboxylic_acid_mol)
                        if hydroxyl_matches and carboxyl_matches:
                            # Get chain length between hydroxyl and carboxyl groups
                            chain_lengths = []
                            for h_idx in hydroxyl_matches:
                                for c_idx in carboxyl_matches:
                                    path = Chem.rdmolops.GetShortestPath(mol, h_idx[0], c_idx[0])
                                    chain_lengths.append(len(path) - 1)
                            if chain_lengths and max(chain_lengths) >= rule['chain_length']:
                                match = True
                            else:
                                match = False
                        else:
                            match = False
                row.append(rule['prediction'] if match else 0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df

def get_longest_aliphatic_chain_length(mol, start_atom_idx, exclude_branching=False):
    # BFS traversal to find the longest unbranched aliphatic chain starting from start_atom_idx
    visited = set()
    max_length = 0
    stack = [(start_atom_idx, 0)]  # Tuple of (atom_idx, chain_length)
    while stack:
        current_atom_idx, current_length = stack.pop()
        if current_atom_idx in visited:
            continue
        visited.add(current_atom_idx)
        atom = mol.GetAtomWithIdx(current_atom_idx)
        if atom.GetAtomicNum() != 6 or atom.IsAromatic():
            continue
        # Exclude branching if required
        if exclude_branching:
            heavy_neighbors = [n for n in atom.GetNeighbors() if n.GetAtomicNum() > 1]
            if len(heavy_neighbors) > 2:
                continue
        # Update maximum chain length
        if current_length > max_length:
            max_length = current_length
        # Add neighbors to stack
        for neighbor in atom.GetNeighbors():
            neighbor_idx = neighbor.GetIdx()
            if neighbor_idx not in visited:
                stack.append((neighbor_idx, current_length + 1))
    return max_length
--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: Modifiers that are **unbranched aliphatic carboxylic acids** containing an **amino group (-NH₂)** on the **alpha carbon** (forming simple amino acids), with no bulky side chains, result in a **high yield**. This configuration enables effective coordination with metal centers. Examples:
  - **(2S)-2-aminobutanedioic acid** (aspartic acid)
  - **(2S)-2-aminopentanedioic acid** (glutamic acid)
  - **5-aminopentanoic acid**

- **Rule 2**: Modifiers that are **aromatic carboxylic acids** with a **para-positioned amino (-NH₂)** or **hydroxy (-OH)** group, and no electron-withdrawing substituents, result in a **high yield**. These functional groups enhance metal coordination. Examples:
  - **4-aminobenzoic acid**
  - **5-(4-hydroxyphenyl)pentanoic acid**

- **Rule 3**: Modifiers that are **long unbranched aliphatic carboxylic acids** (chain length of **6 carbons or more**) without additional functional groups result in a **high yield**. The hydrophobic chain may facilitate interaction with the catalyst framework. Example:
  - **octanoic acid**

- **Rule 4**: Modifiers containing **thiol groups (-SH)** on **short aliphatic chains** near the **carboxyl group** result in a **high yield**, as thiol groups form strong bonds with metal ions. Example:
  - **3-sulfanylpropanoic acid**

- **Rule 5**: Modifiers that are **aromatic carboxylic acids** with **electron-withdrawing groups** such as **formyl (-CHO)** at the **para position** result in a **low yield**. Electron-withdrawing groups decrease electron density, weakening metal coordination. Examples:
  - **4-formylbenzoic acid**
  - **5-formyl-2-hydroxybenzoic acid**

- **Rule 6**: Modifiers containing **ether linkages (-O-)**, especially with **long polyether chains** adjacent to the **carboxyl group**, result in a **low yield**. Ether groups may introduce steric hindrance or interfere with metal coordination. Example:
  - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**

- **Rule 7**: Modifiers that are **amino acids** with **bulky aromatic side chains** may result in a **low yield** due to steric hindrance. However, exceptions may occur if side chains participate in coordination. Examples:
  - **Low Yield**: **(2S)-2-amino-3-phenylpropanoic acid** (phenylalanine)
  - **High Yield**: **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (tryptophan)

- **Rule 8**: Modifiers with **amide bonds** adjacent to the **carboxyl group**, such as N-acetylated or peptidic compounds, result in a **low yield**. Amide bonds may reduce the ability to coordinate with the metal center. Examples:
  - **(2S)-6-acetamido-2-aminohexanoic acid**
  - **2-[(4-hydroxybenzoyl)amino]acetic acid**

- **Rule 9**: Modifiers containing **multiple hydroxyl groups (-OH)** near the **carboxyl group** result in a **high yield**, as they provide multiple coordination sites. Example:
  - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (gluconic acid)

- **Rule 10**: Modifiers with **pyridine rings** directly attached to the **carboxyl group** result in a **high yield** due to the nitrogen atom in the ring enhancing coordination. Examples:
  - **pyridine-3-carboxylic acid**
  - **2-oxo-1H-pyridine-4-carboxylic acid**

- **Rule 11**: Modifiers that are **aromatic carboxylic acids** with **para-substituted alkyl groups** (e.g., methyl groups) result in a **low yield**. Alkyl substituents do not assist in coordination and may cause steric hindrance. Example:
  - **4-methylbenzoic acid**

- **Rule 12**: Modifiers with **electron-donating methoxy groups (-OCH₃)** on **aromatic rings**, particularly when multiple methoxy groups are present, can result in a **high yield** by increasing electron density and enhancing metal coordination. Example:
  - **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid**

- **Rule 13**: Modifiers with **additional hydroxyl (-OH)** or **amino (-NH₂)** groups on **long aliphatic chains** may result in a **low yield**. The distance between functional groups may prevent effective chelation. Examples:
  - **7-hydroxyheptanoic acid**
  - **7-aminoheptanoic acid**

- **Rule 14**: Modifiers containing **functional groups** that may form competing interactions or side reactions, such as **trifluoroacetyl groups**, result in a **low yield**. Example:
  - **4-[(2,2,2-trifluoroacetyl)amino]butanoic acid**

- **Rule 15**: Modifiers featuring **heterocyclic rings** with multiple coordination sites contribute to a **high yield** due to enhanced coordination with metal centers. Examples:
  - **1H-pyrazole-4-carboxylic acid**
  - **1,3-dioxo-2-benzofuran-5-carboxylic acid**

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.5428571428571428; Test Accuracy: 0.0
    Train Support: 0.02857142857142857; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 2.0588235294117645; Test Lift: NONE
    Train Leverage: 0.014693877551020406; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and substructures
    
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX1H1]'
    
    # Amino group (-NH2)
    amino_group = '[NX3H2]'
    
    # Hydroxyl group (-OH)
    hydroxy_group = '[OX2H]'
    
    # Thiol group (-SH)
    thiol_group = '[SX2H]'
    
    # Ether linkage (-O-)
    ether_linkage = '[!#1][OX2][!#1]'
    
    # Aromatic ring
    aromatic_ring = '[a]'
    
    # Electron-withdrawing groups (EWGs)
    ewg = ['[CX3](=O)[OX1H0]', '[CX3](=O)[#6]', '[NX3](=O)=O', '[F,Cl,Br,I]', '[CX4][F][F][F]']
    
    # Electron-donating methoxy group (-OCH3)
    methoxy_group = '[OX2][CH3]'
    
    # Bulky aromatic side chain (aromatic carbon attached to alpha carbon)
    bulky_aromatic_side_chain = '[CX4][c]'
    
    # Amide bond adjacent to carboxyl group
    amide_bond = '[NX3][CX3](=O)[#6]'
    
    # Pyridine ring directly attached to carboxyl group
    pyridine_carboxylic_acid = 'n1ccccc1C(=O)O'
    
    # Heterocyclic rings with multiple coordination sites
    heterocyclic_ring = '[n,o,s]1cccc1'
    
    # Multiple hydroxyl groups near carboxylic acid
    multiple_hydroxyls = '[OX2H][CX4]([OX2H])[CX3](=O)[OX1H1]'
    
    # Long unbranched aliphatic chain (6 or more carbons)
    long_unbranched_chain = '[CH3][CH2]{4,}[CX3](=O)[OX1H1]'
    
    # Additional hydroxyl or amino groups on long aliphatic chains
    additional_polar_groups = '[CH2]{5,}[NX3H2,OX2H]'
    
    # Trifluoroacetyl group
    trifluoroacetyl_group = '[CX3](=O)[CX4]([F])([F])[F]'
    
    # Formyl group (-CHO) at para position on aromatic ring
    formyl_para = '[c][c](C=O)[c][c][c][CX3](=O)[OX1H1]'
    
    # Para-substituted alkyl groups on aromatic carboxylic acids
    para_alkyl_substituent = '[c][c]([CX4H3])[c][c][c][CX3](=O)[OX1H1]'
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'High yield: Unbranched aliphatic carboxylic acids with amino group (-NH2) on alpha carbon, no bulky side chains.',
            'patterns': [[carboxylic_acid], [amino_group]],
            'exclude_patterns': [bulky_aromatic_side_chain],
            'extra_checks': 'alpha_amino_unbranched',
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'High yield: Aromatic carboxylic acids with para-positioned amino (-NH2) or hydroxy (-OH) group, no electron-withdrawing substituents.',
            'patterns': [[carboxylic_acid], [aromatic_ring]],
            'exclude_patterns': ewg,
            'extra_checks': 'para_amino_hydroxy',
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'High yield: Long unbranched aliphatic carboxylic acids (chain length of 6 carbons or more) without additional functional groups.',
            'patterns': [[long_unbranched_chain]],
            'exclude_patterns': [amino_group, hydroxy_group, thiol_group, ether_linkage],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'High yield: Modifiers containing thiol groups (-SH) on short aliphatic chains near the carboxyl group.',
            'patterns': [[carboxylic_acid], [thiol_group]],
            'extra_checks': 'short_chain_thiol',
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Low yield: Aromatic carboxylic acids with electron-withdrawing groups such as formyl (-CHO) at the para position.',
            'patterns': [[formyl_para]],
            'prediction': -1
        },
        {
            'number': 6,
            'description': 'Low yield: Modifiers containing ether linkages (-O-), especially with long polyether chains adjacent to the carboxyl group.',
            'patterns': [[carboxylic_acid], [ether_linkage]],
            'extra_checks': 'long_polyether_chain',
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Low yield: Amino acids with bulky aromatic side chains.',
            'patterns': [[carboxylic_acid], [amino_group], [bulky_aromatic_side_chain]],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Low yield: Modifiers with amide bonds adjacent to the carboxyl group.',
            'patterns': [[amide_bond], [carboxylic_acid]],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'High yield: Modifiers containing multiple hydroxyl groups (-OH) near the carboxyl group.',
            'patterns': [[multiple_hydroxyls]],
            'prediction': 1
        },
        {
            'number': 10,
            'description': 'High yield: Modifiers with pyridine rings directly attached to the carboxyl group.',
            'patterns': [[pyridine_carboxylic_acid]],
            'prediction': 1
        },
        {
            'number': 11,
            'description': 'Low yield: Aromatic carboxylic acids with para-substituted alkyl groups.',
            'patterns': [[para_alkyl_substituent]],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'High yield: Modifiers with electron-donating methoxy groups (-OCH3) on aromatic rings, particularly when multiple methoxy groups are present.',
            'patterns': [[carboxylic_acid], [methoxy_group]],
            'extra_checks': 'multiple_methoxy',
            'prediction': 1
        },
        {
            'number': 13,
            'description': 'Low yield: Additional hydroxyl (-OH) or amino (-NH2) groups on long aliphatic chains.',
            'patterns': [[carboxylic_acid], [additional_polar_groups]],
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'Low yield: Modifiers containing functional groups that may form competing interactions or side reactions, such as trifluoroacetyl groups.',
            'patterns': [[trifluoroacetyl_group]],
            'prediction': -1
        },
        {
            'number': 15,
            'description': 'High yield: Modifiers featuring heterocyclic rings with multiple coordination sites.',
            'patterns': [[heterocyclic_ring], [carboxylic_acid]],
            'prediction': 1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(p) for p in group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for p in rule['exclude_patterns']:
                if isinstance(p, list):
                    compiled_excludes.extend([Chem.MolFromSmarts(pat) for pat in p])
                else:
                    compiled_excludes.append(Chem.MolFromSmarts(p))
            rule['compiled_exclude_patterns'] = compiled_excludes
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'compiled_exclude_patterns' in rule:
                    for pat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        if mol.HasSubstructMatch(pat):
                            group_match = True
                            break
                    if not group_match:
                        match = False
                        break
                if match:
                    # Apply any extra checks
                    if 'extra_checks' in rule:
                        if rule['extra_checks'] == 'alpha_amino_unbranched':
                            if not check_alpha_amino_unbranched(mol):
                                match = False
                        elif rule['extra_checks'] == 'para_amino_hydroxy':
                            if not check_para_amino_hydroxy(mol):
                                match = False
                        elif rule['extra_checks'] == 'short_chain_thiol':
                            if not check_short_chain_thiol(mol):
                                match = False
                        elif rule['extra_checks'] == 'long_polyether_chain':
                            if not check_long_polyether_chain(mol):
                                match = False
                        elif rule['extra_checks'] == 'multiple_methoxy':
                            if not check_multiple_methoxy(mol):
                                match = False
                    if match:
                        row.append(rule['prediction'])
                    else:
                        row.append(0)
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

# Functions for extra checks
def check_alpha_amino_unbranched(mol):
    # Check if amino group is on alpha carbon and chain is unbranched
    try:
        patt = Chem.MolFromSmarts('[NX3H2][CX4H]([CH3])[CX3](=O)[OX1H1]')
        if mol.HasSubstructMatch(patt):
            return True
        # Check for longer unbranched chains
        for length in range(1, 5):
            smarts = f'[NX3H2][CH2]{{{length}}}[CX3](=O)[OX1H1]'
            patt = Chem.MolFromSmarts(smarts)
            if mol.HasSubstructMatch(patt):
                return True
        return False
    except:
        return False

def check_para_amino_hydroxy(mol):
    # Check for para-substituted amino or hydroxy group on aromatic ring with carboxylic acid
    try:
        patt = Chem.MolFromSmarts('c1cc([NX3H2,OX2H])ccc1C(=O)O')
        if mol.HasSubstructMatch(patt):
            return True
        return False
    except:
        return False

def check_short_chain_thiol(mol):
    # Check if thiol group is on short chain near carboxylic acid
    try:
        patt = Chem.MolFromSmarts('[SX2H][CH2][CX3](=O)[OX1H1]')
        if mol.HasSubstructMatch(patt):
            return True
        return False
    except:
        return False

def check_long_polyether_chain(mol):
    # Check for long polyether chains
    try:
        patt = Chem.MolFromSmarts('[OX2][CH2][OX2][CH2][OX2][CH2][OX2][CH2][OX2][CX3](=O)[OX1H1]')
        if mol.HasSubstructMatch(patt):
            return True
        return False
    except:
        return False

def check_multiple_methoxy(mol):
    # Check if multiple methoxy groups are present on aromatic ring
    try:
        patt = Chem.MolFromSmarts('c1cc(OC)c(OC)cc1')
        if mol.HasSubstructMatch(patt):
            return True
        return False
    except:
        return False

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: Modifiers that are **carboxylic acids** with an **amino group (-NH₂)** on the **alpha or beta carbon** (first or second carbon from the carboxyl group) result in a **high yield**. This configuration facilitates effective chelation with metal ions due to the proximity of the amino and carboxyl groups.

  - **High Yield Examples**:
    - **(2S)-2-aminobutanedioic acid** (aspartic acid)
    - **(2S)-2-aminopentanedioic acid** (glutamic acid)
    - **5-aminopentanoic acid**
    - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (tryptophan)

  - **Low Yield Exception**: If the side chain is a **bulky hydrophobic aromatic ring** without additional coordination sites, the yield is **low** due to steric hindrance interfering with metal coordination.
    - **Low Yield Example**:
      - **(2S)-2-amino-3-phenylpropanoic acid** (phenylalanine)

- **Rule 2**: Modifiers that are **aromatic carboxylic acids** with **electron-donating groups** such as **amino (-NH₂)** or **hydroxyl (-OH)** directly attached to the **aromatic ring** result in a **high yield**. These groups enhance metal coordination by increasing electron density and providing additional coordination sites.

  - **High Yield Examples**:
    - **4-aminobenzoic acid**
    - **5-(4-hydroxyphenyl)pentanoic acid**

  - **Low Yield Exception**: If the aromatic carboxylic acid with electron-donating groups is connected via a **short aliphatic chain (3 carbons or fewer)**, the yield is **low**, possibly due to less flexible coordination.
    - **Low Yield Example**:
      - **3-(4-hydroxyphenyl)propanoic acid**

- **Rule 3**: Modifiers that are **aliphatic carboxylic acids** with **long hydrocarbon chains** (chain length of **5 carbons or more**) without additional functional groups result in a **high yield**. The hydrophobic chain may influence catalyst solubility or facilitate beneficial interactions within the catalyst framework.

  - **High Yield Example**:
    - **octanoic acid**

  - **Low Yield Exception**: If there are **functional groups** like **amino (-NH₂)** or **hydroxyl (-OH)** located **more than four carbons away** from the **carboxyl group**, the yield is **low** due to reduced likelihood of effective chelation.
    - **Low Yield Examples**:
      - **7-aminoheptanoic acid**
      - **7-hydroxyheptanoic acid**
      - **8-aminooctanoic acid**

- **Rule 4**: Modifiers containing **thiol groups (-SH)** on **short aliphatic chains** near the **carboxyl group** (on the second or third carbon) result in a **high yield**. Thiol groups form strong coordinate bonds with metal ions, enhancing catalyst activity.

  - **High Yield Example**:
    - **3-sulfanylpropanoic acid**

  - **Low Yield Exception**: If the **thiol group (-SH)** is attached directly to an **aromatic ring**, the yield is **low** because aromatic thiols are less effective in metal coordination due to decreased nucleophilicity.
    - **Low Yield Example**:
      - **4-sulfanylbenzoic acid**

- **Rule 5**: Modifiers containing **multiple hydroxyl groups (-OH)** near the **carboxyl group** result in a **high yield**, as they provide multiple coordination sites for metal binding, enhancing chelation.

  - **High Yield Example**:
    - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (gluconic acid)

- **Rule 6**: Modifiers with **nitrogen-containing heterocycles** (e.g., **pyridine**, **pyrazole**) directly attached to the **carboxyl group** result in a **high yield** due to additional coordination through the nitrogen atom in the ring.

  - **High Yield Examples**:
    - **pyridine-3-carboxylic acid** (nicotinic acid)
    - **2-oxo-1H-pyridine-4-carboxylic acid**
    - **1H-pyrazole-4-carboxylic acid**

  - **Low Yield Exception**: If the **heterocycle** is connected via an **aromatic ring** or **long aliphatic chain**, the yield is **low** due to reduced effectiveness in coordination.
    - **Low Yield Example**:
      - **4-pyridin-4-ylbenzoic acid**

- **Rule 7**: Modifiers that are **aromatic carboxylic acids** with **aldehyde groups (-CHO)** attached to the ring result in a **low yield**. Aldehyde groups are electron-withdrawing and can decrease electron density on the ring, weakening coordination with the metal center.

  - **Low Yield Examples**:
    - **4-formylbenzoic acid**
    - **5-formyl-2-hydroxybenzoic acid**

- **Rule 8**: Modifiers containing **amide bonds (-CONH-)** adjacent to the **carboxyl group** result in a **low yield**. The amide linkage can delocalize electron density, reducing the availability of lone pairs for metal coordination.

  - **Low Yield Examples**:
    - **2-[(4-hydroxybenzoyl)amino]acetic acid**
    - **(2S)-6-acetamido-2-aminohexanoic acid**

- **Rule 9**: Modifiers with **ether linkages (-O-)** in the side chain, especially **polyether chains**, near the **carboxyl group** result in a **low yield**. Ether groups can introduce steric hindrance and reduce the modifier's ability to coordinate effectively.

  - **Low Yield Examples**:
    - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**
    - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**

- **Rule 10**: Modifiers containing **electron-withdrawing groups** such as **trifluoroacetyl groups (-COCF₃)** in the side chain result in a **low yield**. These groups reduce electron density and may hinder effective metal coordination.

  - **Low Yield Example**:
    - **4-[(2,2,2-trifluoroacetyl)amino]butanoic acid**

- **Rule 11**: Modifiers with **bulky aromatic side chains** directly attached to the **alpha carbon** of amino acids result in a **low yield** if the side chain lacks additional coordination sites. Steric hindrance interferes with effective coordination.

  - **Low Yield Example**:
    - **(2S)-2-amino-3-phenylpropanoic acid** (phenylalanine)

  - **High Yield Exception**: If the **bulky aromatic side chain** contains heteroatoms capable of coordination (e.g., **indole ring**), the yield is **high**.
    - **High Yield Example**:
      - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (tryptophan)

- **Rule 12**: Modifiers that are **aromatic carboxylic acids** with **methyl groups (-CH₃)** attached to the ring result in a **low yield**. Methyl groups are weakly electron-donating but can cause steric hindrance, affecting coordination negatively.

  - **Low Yield Example**:
    - **4-methylbenzoic acid**

- **Rule 13**: Modifiers with **ketone groups (-C=O)** in the carbon chain adjacent to the **carboxyl group** result in a **low yield**. Ketone groups can interfere with coordination due to electron-withdrawing effects and steric considerations.

  - **Low Yield Example**:
    - **4-oxoheptanedioic acid**

- **Rule 14**: Modifiers that are **dicarboxylic acids** with **electron-withdrawing groups** in the chain result in a **low yield**. Multiple acidic sites and electron-withdrawing groups can reduce the effectiveness of metal coordination.

  - **Low Yield Example**:
    - **4-oxoheptanedioic acid**

- **Rule 15**: Modifiers with **long aliphatic chains** that have **functional groups** like **amino (-NH₂)** or **hydroxyl (-OH)** at **distal positions** (more than four carbons from the carboxyl group) result in a **low yield**. The distance reduces the likelihood of these groups participating in effective chelation.

  - **Low Yield Examples**:
    - **7-aminoheptanoic acid**
    - **7-hydroxyheptanoic acid**
    - **8-aminooctanoic acid**

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0,0,-1
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.5714285714285714; Test Accuracy: 0.0
    Train Support: 0.05714285714285714; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 2.0588235294117645; Test Lift: NONE
    Train Leverage: 0.02938775510204081; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and structural features
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    
    # Amino group (-NH2) patterns
    primary_amino = '[NX3H2]'
    secondary_amino = '[NX3H1][#6]'
    
    # Alpha or beta carbon positions from the carboxyl group
    alpha_beta_amino = '[CX3](=O)[CX4][CX4][NX3H2]'
    
    # Aromatic ring patterns
    aromatic_ring = '[a]'
    
    # Bulky hydrophobic aromatic rings without additional coordination sites
    bulky_aromatic = '[c][c][c][c][c][c]'
    
    # Electron-donating groups (EDGs)
    amino_group = '[NX3H2]'
    hydroxyl_group = '[OX2H]'
    
    # EDGs attached directly to an aromatic ring
    edg_on_aromatic = '[c][$([NX3H2]),$([OX2H])]'
    
    # Long hydrocarbon chains (5 or more carbons)
    long_aliphatic_chain = '[CH2][CH2][CH2][CH2][CH2]'
    
    # Functional groups more than four carbons away from the carboxyl group
    distal_functional_group = '[CX3](=O)[CX4][CX4][CX4][CX4][*$([NX3H2]),$([OX2H])]'
    
    # Thiol groups (-SH) on short aliphatic chains near the carboxyl group
    thiol_near_carboxyl = '[CX3](=O)[CX4][CX4][SX2H]'
    
    # Thiol attached directly to an aromatic ring
    thiol_on_aromatic = '[c][SX2H]'
    
    # Multiple hydroxyl groups near the carboxyl group
    multiple_hydroxyls = '[CX3](=O)[CX4]([OX2H])[CX4]([OX2H])[CX4]([OX2H])[CX4]([OX2H])[CX4]([OX2H])'
    
    # Nitrogen-containing heterocycles directly attached to the carboxyl group
    nitrogen_heterocycle = '[nH0][c]1[c][c][c][c][c]1[C](=O)[O][H]'
    
    # Heterocycles connected via an aromatic ring or long aliphatic chain
    heterocycle_connected_via_chain = '[c][c][c][n][c][c][CX3](=O)[O][H]'
    
    # Aldehyde groups attached to aromatic rings
    aldehyde_on_aromatic = '[c][CX3H](=O)'
    
    # Amide bonds adjacent to the carboxyl group
    amide_adjacent_carboxyl = '[CX3](=O)[NX3][CX3](=O)[O][H]'
    
    # Ether linkages in the side chain near the carboxyl group
    ether_near_carboxyl = '[CX3](=O)[CX4][OX2][CX4][CX4]'
    
    # Electron-withdrawing groups like trifluoroacetyl groups in the side chain
    trifluoroacetyl_group = '[CX3](=O)[CX4][CF3]'
    
    # Bulky aromatic side chains directly attached to the alpha carbon of amino acids
    bulky_aromatic_alpha = '[CX3](=O)[CX4]([NX3H2])[CX4][c]'
    
    # Methyl groups attached to aromatic rings
    methyl_on_aromatic = '[c][CH3]'
    
    # Ketone groups in the carbon chain adjacent to the carboxyl group
    ketone_adjacent_carboxyl = '[CX3](=O)[CX4][CX3](=O)'
    
    # Dicarboxylic acids with electron-withdrawing groups in the chain
    dicarboxylic_with_ewg = '[CX3](=O)[CX4][CX3](=O)[CX4][CX3](=O)'
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are carboxylic acids with an amino group (-NH2) on the alpha or beta carbon result in a high yield.',
            'patterns': [carboxylic_acid, alpha_beta_amino],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers that are aromatic carboxylic acids with electron-donating groups such as amino (-NH2) or hydroxyl (-OH) directly attached to the aromatic ring result in a high yield.',
            'patterns': [carboxylic_acid, edg_on_aromatic],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers that are aliphatic carboxylic acids with long hydrocarbon chains (5 carbons or more) without additional functional groups result in a high yield.',
            'patterns': [carboxylic_acid, long_aliphatic_chain],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers containing thiol groups (-SH) on short aliphatic chains near the carboxyl group result in a high yield.',
            'patterns': [carboxylic_acid, thiol_near_carboxyl],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers containing multiple hydroxyl groups (-OH) near the carboxyl group result in a high yield.',
            'patterns': [carboxylic_acid, multiple_hydroxyls],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers with nitrogen-containing heterocycles directly attached to the carboxyl group result in a high yield.',
            'patterns': [carboxylic_acid, nitrogen_heterocycle],
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'Modifiers that are aromatic carboxylic acids with aldehyde groups (-CHO) attached to the ring result in a low yield.',
            'patterns': [carboxylic_acid, aldehyde_on_aromatic],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Modifiers containing amide bonds (-CONH-) adjacent to the carboxyl group result in a low yield.',
            'patterns': [amide_adjacent_carboxyl],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers with ether linkages (-O-) in the side chain near the carboxyl group result in a low yield.',
            'patterns': [carboxylic_acid, ether_near_carboxyl],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers containing electron-withdrawing groups such as trifluoroacetyl groups (-COCF3) in the side chain result in a low yield.',
            'patterns': [carboxylic_acid, trifluoroacetyl_group],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Modifiers with bulky aromatic side chains directly attached to the alpha carbon of amino acids result in a low yield if the side chain lacks additional coordination sites.',
            'patterns': [bulky_aromatic_alpha],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'Modifiers that are aromatic carboxylic acids with methyl groups (-CH3) attached to the ring result in a low yield.',
            'patterns': [carboxylic_acid, methyl_on_aromatic],
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Modifiers with ketone groups (-C=O) in the carbon chain adjacent to the carboxyl group result in a low yield.',
            'patterns': [carboxylic_acid, ketone_adjacent_carboxyl],
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'Modifiers that are dicarboxylic acids with electron-withdrawing groups in the chain result in a low yield.',
            'patterns': [dicarboxylic_with_ewg],
            'prediction': -1
        },
        {
            'number': 15,
            'description': 'Modifiers with long aliphatic chains that have functional groups like amino (-NH2) or hydroxyl (-OH) at distal positions (more than four carbons from the carboxyl group) result in a low yield.',
            'patterns': [distal_functional_group],
            'prediction': -1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for smarts in rule['patterns']:
            try:
                compiled_patterns.append(Chem.MolFromSmarts(smarts))
            except Exception as e:
                compiled_patterns.append(None)
        rule['compiled_patterns'] = compiled_patterns
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                for pat in rule['compiled_patterns']:
                    if pat is None or not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: Modifiers that are **alpha-amino dicarboxylic acids**—carboxylic acids with an **amino group (-NH₂)** on the **alpha carbon** and an additional **carboxyl group** on the side chain—result in a **high yield**. The additional carboxyl group provides extra coordination sites for metal binding.

  - **High Yield Examples**:
    - **(2S)-2-aminobutanedioic acid** (Aspartic acid)
    - **(2S)-2-aminopentanedioic acid** (Glutamic acid)

  - **Low Yield Example**:
    - **(2S)-2-amino-3-phenylpropanoic acid** (Phenylalanine) lacks the additional carboxyl group, resulting in a **low yield**.

- **Rule 2**: Modifiers that are **beta- or gamma-amino acids**—carboxylic acids with an **amino group** on the **beta or gamma carbon**—result in a **high yield**. The positioning of the amino group facilitates effective coordination with the metal center.

  - **High Yield Example**:
    - **5-aminopentanoic acid**

  - **Low Yield Examples**:
    - **7-aminoheptanoic acid**
    - **8-aminooctanoic acid**
  
    These have the amino group further from the carboxyl group (delta or epsilon position), leading to a **low yield** due to reduced coordination efficiency.

- **Rule 3**: Modifiers that are **aromatic carboxylic acids** with **electron-donating groups** such as **amino (-NH₂)** or **hydroxyl (-OH)** directly attached to the **aromatic ring** result in a **high yield**. These groups increase electron density and enhance coordination with metal ions.

  - **High Yield Examples**:
    - **4-aminobenzoic acid**
    - **5-(4-hydroxyphenyl)pentanoic acid**

  - **Low Yield Examples**:
    - **4-methylbenzoic acid**
    - **3-(4-hydroxyphenyl)propanoic acid**

    Although methyl and hydroxyl are electron-donating, the position and absence of additional coordinating groups reduce effectiveness, resulting in a **low yield**.

- **Rule 4**: Modifiers that are **aromatic carboxylic acids** with **electron-withdrawing groups** such as **aldehyde (-CHO)** or **formyl groups** attached to the ring result in a **low yield**. These groups decrease electron density and weaken metal coordination.

  - **Low Yield Examples**:
    - **4-formylbenzoic acid**
    - **5-formyl-2-hydroxybenzoic acid**

  - **High Yield Exception**:
    - **4-nitrobenzoic acid** results in a **high yield**, possibly due to the nitro group's ability to participate in coordination through resonance structures.

- **Rule 5**: Modifiers containing **nitrogenous heterocycles** directly attached to the **carboxyl group** result in a **high yield**. Nitrogen atoms in heterocycles can coordinate with metal ions, enhancing catalyst performance.

  - **High Yield Examples**:
    - **pyridine-3-carboxylic acid** (Nicotinic acid)
    - **1H-pyrazole-4-carboxylic acid**

  - **Low Yield Example**:
    - **4-pyridin-4-ylbenzoic acid** has the heterocycle connected via an additional aromatic ring, reducing nitrogen accessibility and resulting in a **low yield**.

- **Rule 6**: Modifiers with **thiol groups (-SH)** near the **carboxyl group** result in a **high yield**. Thiol groups form strong coordinate bonds with metals.

  - **High Yield Example**:
    - **3-sulfanylpropanoic acid**

  - **Low Yield Example**:
    - **4-sulfanylbenzoic acid** has the thiol group attached directly to an aromatic ring, which may hinder effective coordination, resulting in a **low yield**.

- **Rule 7**: Modifiers that are **aliphatic carboxylic acids** with **long hydrocarbon chains** (six or more carbons) and **no additional polar groups** result in a **high yield**. The hydrophobic chains may enhance interaction within the catalyst framework.

  - **High Yield Example**:
    - **octanoic acid**

  - **Low Yield Examples**:
    - **7-hydroxyheptanoic acid**
    - **8-aminooctanoic acid**

    The presence of polar groups far from the carboxyl group reduces coordination efficiency, leading to a **low yield**.

- **Rule 8**: Modifiers containing **multiple hydroxyl groups (-OH)** near the **carboxyl group** result in a **high yield**. Multiple hydroxyl groups provide additional sites for metal coordination.

  - **High Yield Examples**:
    - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (Gluconic acid)
    - **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid**

- **Rule 9**: Modifiers with **ether linkages (-O-)** in the side chain near the **carboxyl group** result in a **low yield**. Ether groups can introduce steric hindrance and decrease coordination efficiency.

  - **Low Yield Examples**:
    - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**
    - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**

- **Rule 10**: Modifiers with **amide bonds (-CONH-)** adjacent to the **carboxyl group** result in a **low yield**. The resonance stabilization in amide bonds reduces the availability of lone pairs for metal coordination.

  - **Low Yield Examples**:
    - **2-[(4-hydroxybenzoyl)amino]acetic acid**
    - **(2S)-6-acetamido-2-aminohexanoic acid**

- **Rule 11**: Modifiers that are **alpha-amino acids** with **bulky hydrophobic side chains** lacking additional coordinating groups result in a **low yield**. Steric hindrance interferes with metal coordination.

  - **Low Yield Example**:
    - **(2S)-2-amino-3-phenylpropanoic acid** (Phenylalanine)

  - **High Yield Exception**:
    - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (Tryptophan) contains a nitrogen in the indole ring capable of coordination, resulting in a **high yield**.

- **Rule 12**: Modifiers with **ketone groups (-C=O)** in the carbon chain adjacent to the **carboxyl group** result in a **low yield**. Ketone groups can act as competing coordination sites or disrupt the electronic environment.

  - **Low Yield Examples**:
    - **4-oxoheptanedioic acid**
    - **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid**

- **Rule 13**: Modifiers that are **dicarboxylic acids** with carboxyl groups separated by a short chain (up to three carbons) result in a **high yield**. The two carboxyl groups allow for bidentate coordination.

  - **High Yield Examples**:
    - **(2S)-2-aminobutanedioic acid** (Aspartic acid)
    - **(2S)-2-aminopentanedioic acid** (Glutamic acid)

- **Rule 14**: Modifiers with **electron-withdrawing groups** such as **trifluoromethyl (-CF₃)** groups near the **carboxyl group** result in a **low yield**. These groups decrease electron density, hindering effective metal coordination.

  - **Low Yield Example**:
    - **4-[(2,2,2-trifluoroacetyl)amino]butanoic acid**

- **Rule 15**: Modifiers containing **heteroatoms capable of coordination** (e.g., nitrogen, oxygen, sulfur) within a **flexible framework** result in a **high yield**. Flexibility allows the coordinating groups to effectively interact with the metal center.

  - **High Yield Examples**:
    - **4-pyridin-4-ylbutanoic acid**
    - **5-(4-hydroxyphenyl)pentanoic acid**

  - **Low Yield Examples**:
    - **4-pyridin-4-ylbenzoic acid** has a rigid structure due to the biaryl connection, reducing flexibility and resulting in a **low yield**.

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10
0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,1,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.5428571428571428; Test Accuracy: 1.0
    Train Support: 0.05714285714285714; Test Support: 0.0
    Train Confidence: 0.8; Test Confidence: 0.5
    Train Lift: 1.5555555555555558; Test Lift: NONE
    Train Leverage: 0.013061224489795922; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and substructures according to the rules
    
    # Common patterns
    carboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1]'
    amino_group = '[NX3H2,NX4H3+]'
    primary_amino = '[NX3H2]'
    hydroxyl_group = '[OX2H]'  # Hydroxyl group
    thiol_group = '[SX2H]'
    ether_linkage = '[#6][OX2][#6]'
    amide_group = '[NX3][CX3](=O)[#6]'
    ketone_group = '[CX3](=O)[#6]'
    # Electron-donating groups (EDGs)
    edg_groups = ['[OX2H]', '[OX2][#6]', '[NX3;H2,H1][#6]']
    # Electron-withdrawing groups (EWGs)
    ewg_groups = ['[CX3](=O)[OX1H0-,OX2H1]', '[CX3]=[OX1]', '[NX3+](=O)[O-]', '[F,Cl,Br,I]', '[CX4][F][F][F]']
    
    # Aromatic ring with electron-donating group attached
    aromatic_ring_with_edg = '[c][OX2H,NX3H2,NX3H1]'
    # Aromatic ring with electron-withdrawing group attached
    aromatic_ring_with_ewg = '[c][CX3](=O)[OX1H0-,OX2H1], [c][CX3]=[OX1], [c][NX3+](=O)[O-], [c][F,Cl,Br,I], [c][CX4][F][F][F]'
    
    # Rule-specific patterns
    # Rule 1: Alpha-amino dicarboxylic acids
    alpha_amino_dicarboxylic_acid = '[NX3H2][CX4H]([#6])[CX3](=O)[OX1H0-,OX2H1]'
    second_carboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1]'
    
    # Rule 2: Beta- or gamma-amino acids
    beta_gamma_amino_acid = '[NX3H2][CX4][CX4][CX3](=O)[OX1H0-,OX2H1]','[NX3H2][CX4][CX4][CX4][CX3](=O)[OX1H0-,OX2H1]'
    
    # Rule 3: Aromatic carboxylic acids with EDGs directly attached
    aromatic_carboxylic_acid = '[c][CX3](=O)[OX1H0-,OX2H1]'
    edg_on_aromatic = '[c][NX3H2,NX3H1,OX2H]'
    
    # Rule 4: Aromatic carboxylic acids with EWGs attached
    ewg_on_aromatic = '[c][CX3H0](=O),[c][F,Cl,Br,I]'
    
    # Rule 5: Nitrogenous heterocycles directly attached to carboxyl group
    nitrogen_heterocycle_carboxylic_acid = '[n][CX3](=O)[OX1H0-,OX2H1]'
    
    # Rule 6: Thiol groups near carboxyl group
    thiol_near_carboxyl = '[SX2H][CX4][CX3](=O)[OX1H0-,OX2H1]'
    
    # Rule 7: Aliphatic carboxylic acids with long hydrocarbon chains (6 or more carbons) and no additional polar groups
    long_aliphatic_chain = '[CX3](=O)[OX1H0-,OX2H1][CH2][CH2][CH2][CH2][CH3]'
    polar_groups = '[NX3H2,NX3H1,OX2H,SX2H]'
    
    # Rule 8: Multiple hydroxyl groups near carboxyl group
    multiple_hydroxyls = '[OX2H][CX4][CX4][CX3](=O)[OX1H0-,OX2H1]'
    
    # Rule 9: Ether linkages in side chain near carboxyl group
    ether_near_carboxyl = '[CX3](=O)[OX1H0-,OX2H1][CX4][OX2][CX4]'
    
    # Rule 10: Amide bonds adjacent to carboxyl group
    amide_adjacent_carboxyl = '[CX3](=O)[NX3][CX3](=O)[OX1H0-,OX2H1]'
    
    # Rule 11: Alpha-amino acids with bulky hydrophobic side chains lacking additional coordinating groups
    bulky_hydrophobic_side_chain = '[NX3H2][CX4H]([#6])[CX3](=O)[OX1H0-,OX2H1]'  # Side chain is aromatic ring
    
    # Rule 12: Ketone groups adjacent to carboxyl group
    ketone_adjacent_carboxyl = '[CX3](=O)[CX3](=O)[OX1H0-,OX2H1]'
    
    # Rule 13: Dicarboxylic acids with carboxyl groups separated by up to three carbons
    short_chain_dicarboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1][CX4][CX4]?[CX3](=O)[OX1H0-,OX2H1]'
    
    # Rule 14: Electron-withdrawing groups near carboxyl group
    ewg_near_carboxyl = '[CX3](=O)[OX1H0-,OX2H1][CX4][CX4][CX4][CX3](=O)[CF3]'
    
    # Rule 15: Heteroatoms capable of coordination within a flexible framework
    heteroatoms_flexible = '[#6][OX2H1,NX3H2,SX2H][#6][CX3](=O)[OX1H0-,OX2H1]'
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are alpha-amino dicarboxylic acids.',
            'patterns': [alpha_amino_dicarboxylic_acid, second_carboxylic_acid],
            'counts': [1, 2],  # Need at least 1 match of first pattern, 2 matches of second pattern
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers that are beta- or gamma-amino acids.',
            'patterns': beta_gamma_amino_acid,
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Aromatic carboxylic acids with electron-donating groups directly attached to the aromatic ring.',
            'patterns': [aromatic_carboxylic_acid, edg_on_aromatic],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Aromatic carboxylic acids with electron-withdrawing groups attached to the ring.',
            'patterns': [aromatic_carboxylic_acid, ewg_on_aromatic],
            'prediction': -1
        },
        {
            'number': 5,
            'description': 'Modifiers containing nitrogenous heterocycles directly attached to the carboxyl group.',
            'patterns': [nitrogen_heterocycle_carboxylic_acid],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers with thiol groups near the carboxyl group.',
            'patterns': [thiol_near_carboxyl],
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'Aliphatic carboxylic acids with long hydrocarbon chains and no additional polar groups.',
            'patterns': [long_aliphatic_chain],
            'exclude_patterns': [polar_groups],
            'prediction': 1
        },
        {
            'number': 8,
            'description': 'Modifiers with multiple hydroxyl groups near the carboxyl group.',
            'patterns': [multiple_hydroxyls],
            'prediction': 1
        },
        {
            'number': 9,
            'description': 'Modifiers with ether linkages in the side chain near the carboxyl group.',
            'patterns': [ether_near_carboxyl],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers with amide bonds adjacent to the carboxyl group.',
            'patterns': [amide_adjacent_carboxyl],
            'prediction': -1
        },
        # Additional rules can be added similarly...
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for pattern in rule.get('patterns', []):
            if isinstance(pattern, list):
                compiled_group = [Chem.MolFromSmarts(p) for p in pattern]
            else:
                compiled_group = [Chem.MolFromSmarts(pattern)]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for pattern in rule['exclude_patterns']:
                compiled_excludes.append(Chem.MolFromSmarts(pattern))
            rule['compiled_exclude_patterns'] = compiled_excludes
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for pat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for group in rule['compiled_patterns']:
                    group_match = False
                    for pat in group:
                        matches = mol.GetSubstructMatches(pat)
                        if matches:
                            group_match = True
                            break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: Modifiers that are **alpha-amino dicarboxylic acids**—specifically, **alpha-amino acids with an additional carboxyl group (-COOH) on the side chain**—result in a **high yield**. The presence of multiple coordination sites enhances binding to the metal center.

  - **High Yield Examples**:
    - **(2S)-2-aminobutanedioic acid** (Aspartic acid)
    - **(2S)-2-aminopentanedioic acid** (Glutamic acid)

  - **Low Yield Contrast**:
    - **(2S)-2-amino-3-phenylpropanoic acid** (Phenylalanine) lacks the additional carboxyl group, leading to a **low yield**.

---

- **Rule 2**: Modifiers that are **aromatic carboxylic acids** with **electron-donating groups** such as **amino (-NH₂)** or **hydroxyl (-OH)** in the **para position** of the aromatic ring result in a **high yield**. These groups increase electron density, enhancing interaction with metal centers.

  - **High Yield Examples**:
    - **4-aminobenzoic acid**
    - **5-(4-hydroxyphenyl)pentanoic acid**

  - **Low Yield Examples**:
    - **4-methylbenzoic acid** has a weakly donating methyl group but results in a **low yield**, possibly due to insufficient electron donation.
    - **3-(4-hydroxyphenyl)propanoic acid** has the hydroxyl group further from the carboxyl group, leading to a **low yield**.

---

- **Rule 3**: Modifiers that are **aliphatic carboxylic acids** with **functional groups** (**amino**, **hydroxyl**, or **thiol**) within **three carbons** of the **carboxyl group** result in a **high yield**. Close proximity of these groups facilitates effective chelation with metal centers.

  - **High Yield Examples**:
    - **5-aminopentanoic acid** (amino group three carbons away)
    - **3-sulfanylpropanoic acid** (thiol group adjacent to the carboxyl group)
    - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (Gluconic acid)

  - **Low Yield Examples**:
    - **7-aminoheptanoic acid** and **8-aminooctanoic acid** have amino groups too far from the carboxyl group (more than three carbons away), resulting in a **low yield**.
    - **7-hydroxyheptanoic acid** has a hydroxyl group distant from the carboxyl group, leading to a **low yield**.

---

- **Rule 4**: Modifiers that are **carboxylic acids** containing **nitrogenous heterocycles** directly attached to the **carboxyl group** result in a **high yield**. Nitrogen atoms in the ring enhance coordination with metal centers.

  - **High Yield Examples**:
    - **pyridine-3-carboxylic acid** (Nicotinic acid)
    - **1H-pyrazole-4-carboxylic acid**
    - **2-oxo-1H-pyridine-4-carboxylic acid**

  - **Low Yield Example**:
    - **4-pyridin-4-ylbenzoic acid** has the heterocycle connected via another ring, reducing nitrogen accessibility, resulting in a **low yield**.

---

- **Rule 5**: Modifiers that are **aromatic carboxylic acids** with **electron-withdrawing groups** such as **formyl (-CHO)** or **trifluoromethyl (-CF₃)** attached to the ring result in a **low yield**. Electron withdrawal decreases coordination ability with metal ions.

  - **Low Yield Examples**:
    - **4-formylbenzoic acid**
    - **5-formyl-2-hydroxybenzoic acid**
    - **4-[(2,2,2-trifluoroacetyl)amino]butanoic acid**

  - **High Yield Exception**:
    - **4-nitrobenzoic acid** results in a **high yield**, possibly due to the nitro group's unique ability to participate in coordination or influence metal oxidation states favorably.

---

- **Rule 6**: Modifiers with **amide bonds (-CONH-)** adjacent to the **carboxyl group** result in a **low yield**. Amide resonance stabilization reduces the availability of lone pairs on nitrogen for metal coordination.

  - **Low Yield Examples**:
    - **2-[(4-hydroxybenzoyl)amino]acetic acid**
    - **(2S)-6-acetamido-2-aminohexanoic acid**
    - **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid**

---

- **Rule 7**: Modifiers containing **ether linkages (-O-)** in the side chain near the **carboxyl group** result in a **low yield**. Ether oxygen atoms can create steric hindrance and reduce effective coordination with metal centers.

  - **Low Yield Examples**:
    - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**
    - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**

---

- **Rule 8**: Modifiers with **multiple hydroxyl groups (-OH)** in close proximity to the **carboxyl group** result in a **high yield**. Multiple hydroxyl groups enhance chelation with metal ions.

  - **High Yield Examples**:
    - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (Gluconic acid)
    - **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid**

---

- **Rule 9**: Modifiers with **thiol groups (-SH)** in close proximity to the **carboxyl group** result in a **high yield**. Thiol groups form strong bonds with metal centers due to their soft Lewis base character.

  - **High Yield Example**:
    - **3-sulfanylpropanoic acid**

  - **Low Yield Example**:
    - **4-sulfanylbenzoic acid** has the thiol group attached to an aromatic ring, which may hinder its ability to coordinate effectively, resulting in a **low yield**.

---

- **Rule 10**: Modifiers that are **alpha-amino acids** with **bulky hydrophobic side chains** and **no additional coordinating groups** result in a **low yield**. Steric hindrance interferes with effective metal coordination.

  - **Low Yield Example**:
    - **(2S)-2-amino-3-phenylpropanoic acid** (Phenylalanine)

  - **High Yield Exception**:
    - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (Tryptophan) contains an indole ring with a nitrogen atom that can participate in coordination, resulting in a **high yield**.

---

- **Rule 11**: Modifiers containing **ketone groups (-C=O)** in the carbon chain near the **carboxyl group** can result in a **low yield**. The ketone oxygen may compete with the carboxylate for metal coordination, disrupting the desired interaction.

  - **Low Yield Example**:
    - **4-oxoheptanedioic acid**

  - **High Yield Example**:
    - **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid** results in a **high yield**, possibly due to the presence of methoxy groups enhancing overall coordination despite the ketone.

---

- **Rule 12**: Modifiers with **multiple coordinating functional groups** (e.g., **amino** and **carboxyl**, **hydroxyl** and **carboxyl**) in close proximity result in a **high yield**. Chelation enhances binding strength to metal centers.

  - **High Yield Examples**:
    - **(2S)-2-aminopentanedioic acid** (Glutamic acid)
    - **(2S)-2-aminobutanedioic acid** (Aspartic acid)
    - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid**

---

- **Rule 13**: Modifiers that are **aliphatic carboxylic acids with medium-length carbon chains** (six to eight carbons) and **no additional polar functional groups** can result in a **high yield**. The hydrophobic chains may enhance interaction with the catalyst framework or solvent.

  - **High Yield Example**:
    - **octanoic acid**

  - **Low Yield Example**:
    - **7-hydroxyheptanoic acid** has a hydroxyl group disrupting the hydrophobic character, leading to a **low yield**.

---

- **Rule 14**: Modifiers containing **biaryl structures**—aromatic rings connected via a **single bond**—without additional coordinating groups result in a **low yield**. Reduced flexibility and steric hindrance limit effective coordination.

  - **Low Yield Example**:
    - **4-pyridin-4-ylbenzoic acid**

  - **High Yield Contrast**:
    - **4-pyridin-4-ylbutanoic acid** has a methylene spacer increasing flexibility, resulting in a **high yield**.

---

- **Rule 15**: Modifiers with **electron-donating methoxy groups (-OCH₃)** on the aromatic ring can result in a **high yield** by increasing electron density and facilitating coordination with metal centers.

  - **High Yield Example**:
    - **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid**

---

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0
1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,1
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.5428571428571428; Test Accuracy: 0.0
    Train Support: 0.02857142857142857; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 2.0588235294117645; Test Lift: NONE
    Train Leverage: 0.014693877551020406; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    # Amino group (-NH2)
    primary_amino = '[NX3H2]'
    # Secondary amino group (-NH-)
    secondary_amino = '[NX3H1]'
    # Alpha-amino acid backbone: amino group attached to alpha carbon, which is attached to carboxylic acid
    alpha_amino_acid = '[NX3H2][CX4H][CX3](=O)[OX2H1]'
    # Additional carboxylic acid group in side chain
    side_chain_carboxylic_acid = '[CX3](=O)[OX2H1]'
    # Aromatic ring
    aromatic_ring = '[a]'
    # Para-substituted electron-donating groups on aromatic ring
    para_amino_on_aromatic = 'c1ccc(N)cc1C(=O)O'
    para_hydroxyl_on_aromatic = 'c1ccc(O)cc1C(=O)O'
    # Aliphatic chain with functional group within three carbons of carboxyl group
    aliphatic_chain_amino = '[CX3](=O)[OX2H1][C;X4][C;X4][C;X4][NX3;H2,H1]'
    aliphatic_chain_hydroxyl = '[CX3](=O)[OX2H1][C;X4][C;X4][C;X4][OX2H]'
    aliphatic_chain_thiol = '[CX3](=O)[OX2H1][C;X4][C;X4][C;X4][SX2H]'
    # Nitrogenous heterocycles directly attached to carboxyl group
    pyridine_carboxylic_acid = '[n][c][c][c][c][c][CX3](=O)[OX2H1]'
    pyrazole_carboxylic_acid = '[n][n][c][c][c][CX3](=O)[OX2H1]'
    # Electron-withdrawing groups on aromatic ring
    aromatic_with_ewg = '[c]1[c][c][c]([CX3H]=O)[c][c]1C(=O)O'
    aromatic_with_cf3 = '[c]1[c][c][c](C(F)(F)F)[c][c]1C(=O)O'
    # Amide bond adjacent to carboxyl group
    amide_adjacent_to_carboxyl = '[CX3](=O)[NX3][CX3](=O)[OX2H1]'
    # Ether linkage near carboxyl group
    ether_near_carboxyl = '[CX3](=O)[OX2H1][CX4][OX2][CX4]'
    # Multiple hydroxyl groups near carboxyl group
    multiple_hydroxyls = '[CX3](=O)[OX2H1][CX4][OX2H]'
    # Ketone group near carboxyl group
    ketone_near_carboxyl = '[CX3](=O)[CX3](=O)[CX4][CX3](=O)[OX2H1]'
    # Biaryl structures without additional coordinating groups
    biaryl_structure = 'c1ccc(cc1)-c2ccc(cc2)C(=O)O'
    # Patterns for Rule 1
    rule1_patterns = [alpha_amino_acid, side_chain_carboxylic_acid]
    # Patterns for Rule 2
    rule2_patterns = [aromatic_ring, carboxylic_acid, [para_amino_on_aromatic, para_hydroxyl_on_aromatic]]
    # Patterns for Rule 3
    rule3_patterns = [carboxylic_acid, [aliphatic_chain_amino, aliphatic_chain_hydroxyl, aliphatic_chain_thiol]]
    # Patterns for Rule 4
    rule4_patterns = [carboxylic_acid, [pyridine_carboxylic_acid, pyrazole_carboxylic_acid]]
    # Patterns for Rule 5
    rule5_patterns = [aromatic_ring, carboxylic_acid, [aromatic_with_ewg, aromatic_with_cf3]]
    # Patterns for Rule 6
    rule6_patterns = [amide_adjacent_to_carboxyl]
    # Patterns for Rule 7
    rule7_patterns = [carboxylic_acid, ether_near_carboxyl]
    # Patterns for Rule 8
    rule8_patterns = [carboxylic_acid, multiple_hydroxyls]
    # Patterns for Rule 9
    rule9_patterns = [carboxylic_acid, '[SX2H]']
    # Patterns for Rule 10
    rule10_patterns = [alpha_amino_acid, '[!$([NX3][a])]', '[c]']
    # Patterns for Rule 11
    rule11_patterns = [carboxylic_acid, ketone_near_carboxyl]
    # Patterns for Rule 12
    rule12_patterns = [carboxylic_acid, '[NX3;H2,H1]', '[OX2H]', '[SX2H]']
    # Patterns for Rule 13
    rule13_patterns = ['[CX3](=O)[OX2H1][CC][CC][CC][C;!$(C[OX2H])]']
    # Patterns for Rule 14
    rule14_patterns = [biaryl_structure]
    # Patterns for Rule 15
    rule15_patterns = [carboxylic_acid, '[c][c](OC)[c]']
    # Define the rules
    rules = [
        {
            'number': 1,
            'description': 'Alpha-amino dicarboxylic acids result in a high yield.',
            'patterns': rule1_patterns,
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Aromatic carboxylic acids with electron-donating groups in the para position result in a high yield.',
            'patterns': rule2_patterns,
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Aliphatic carboxylic acids with functional groups within three carbons result in a high yield.',
            'patterns': rule3_patterns,
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Carboxylic acids containing nitrogenous heterocycles directly attached result in a high yield.',
            'patterns': rule4_patterns,
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Aromatic carboxylic acids with electron-withdrawing groups attached result in a low yield.',
            'patterns': rule5_patterns,
            'prediction': -1
        },
        {
            'number': 6,
            'description': 'Modifiers with amide bonds adjacent to the carboxyl group result in a low yield.',
            'patterns': rule6_patterns,
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Modifiers with ether linkages near the carboxyl group result in a low yield.',
            'patterns': rule7_patterns,
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Modifiers with multiple hydroxyl groups near the carboxyl group result in a high yield.',
            'patterns': rule8_patterns,
            'prediction': 1
        },
        {
            'number': 9,
            'description': 'Modifiers with thiol groups near the carboxyl group result in a high yield.',
            'patterns': rule9_patterns,
            'prediction': 1
        },
        {
            'number': 10,
            'description': 'Alpha-amino acids with bulky hydrophobic side chains and no additional coordinating groups result in a low yield.',
            'patterns': rule10_patterns,
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Modifiers with ketone groups near the carboxyl group result in a low yield.',
            'patterns': rule11_patterns,
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'Modifiers with multiple coordinating groups near the carboxyl group result in a high yield.',
            'patterns': rule12_patterns,
            'prediction': 1
        },
        {
            'number': 13,
            'description': 'Aliphatic carboxylic acids with medium-length chains and no polar groups result in a high yield.',
            'patterns': rule13_patterns,
            'prediction': 1
        },
        {
            'number': 14,
            'description': 'Modifiers containing biaryl structures without additional coordinating groups result in a low yield.',
            'patterns': rule14_patterns,
            'prediction': -1
        },
        {
            'number': 15,
            'description': 'Modifiers with methoxy groups on the aromatic ring result in a high yield.',
            'patterns': rule15_patterns,
            'prediction': 1
        }
    ]
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule['patterns']:
            if isinstance(group, list):
                compiled_group = [Chem.MolFromSmarts(pat) for pat in group]
                compiled_patterns.append(compiled_group)
            else:
                compiled_patterns.append([Chem.MolFromSmarts(group)])
        rule['compiled_patterns'] = compiled_patterns
    # Initialize results list
    results = []
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        if mol.HasSubstructMatch(pat):
                            group_match = True
                            break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------