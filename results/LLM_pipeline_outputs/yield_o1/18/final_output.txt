
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: **Modifiers that are unbranched aliphatic monocarboxylic acids without additional functional groups result in high yield**, while **those with terminal amino or hydroxyl groups on longer chains (7 or more carbons) result in low yield**.
  - *High Yield Example*:
    - Octanoic acid
  - *Low Yield Examples*:
    - 7-hydroxyheptanoic acid
    - 7-aminoheptanoic acid
    - 8-aminooctanoic acid

- **Rule 2**: **Modifiers that are α-amino dicarboxylic acids (amino acids with two carboxyl groups) result in high yield**.
  - *Examples*:
    - (2S)-2-aminopentanedioic acid (Glutamic acid)
    - (2S)-2-aminobutanedioic acid (Aspartic acid)

- **Rule 3**: **Modifiers that are aromatic carboxylic acids with an amino group at the para position result in high yield**, whereas **those with electron-withdrawing groups (e.g., formyl) at the para position result in low yield**.
  - *High Yield Example*:
    - 4-aminobenzoic acid
  - *Low Yield Examples*:
    - 4-formylbenzoic acid
    - 5-formyl-2-hydroxybenzoic acid

- **Rule 4**: **Modifiers that are aromatic carboxylic acids with nitro groups at the para position result in high yield**, but **those with methyl groups at the same position result in low yield**.
  - *High Yield Example*:
    - 4-nitrobenzoic acid
  - *Low Yield Example*:
    - 4-methylbenzoic acid

- **Rule 5**: **Modifiers containing heteroaromatic rings directly attached to the carboxylic acid group result in high yield**, especially when the ring nitrogen is positioned to interact with the carboxyl group.
  - *High Yield Examples*:
    - Pyridine-3-carboxylic acid (Nicotinic acid)
    - 2-oxo-1H-pyridine-4-carboxylic acid
    - 1H-pyrazole-4-carboxylic acid
  - *Low Yield Example*:
    - 4-pyridin-4-ylbenzoic acid (heteroaromatic ring not directly attached)

- **Rule 6**: **Modifiers that are amino acids with electron-rich aromatic heterocycles in their side chains result in high yield**, while **those with simple aromatic side chains result in low yield**.
  - *High Yield Example*:
    - (2R)-2-amino-3-(1H-indol-3-yl)propanoic acid (Tryptophan)
  - *Low Yield Example*:
    - (2S)-2-amino-3-phenylpropanoic acid (Phenylalanine)

- **Rule 7**: **Modifiers with sulfanyl (thiol) groups on aliphatic chains result in high yield**, whereas **sulfanyl groups on aromatic rings result in low yield**.
  - *High Yield Example*:
    - 3-sulfanylpropanoic acid (3-mercaptopropionic acid)
  - *Low Yield Example*:
    - 4-sulfanylbenzoic acid

- **Rule 8**: **Modifiers that are aliphatic polyhydroxy acids (containing multiple hydroxyl groups) result in high yield**, while **those with a single terminal hydroxyl group on longer chains result in low yield**.
  - *High Yield Examples*:
    - (2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid (Gluconic acid)
    - 2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid
  - *Low Yield Example*:
    - 7-hydroxyheptanoic acid

- **Rule 9**: **Modifiers containing perfluoroalkyl chains attached to a carboxylic acid group result in low yield**.
  - *Example*:
    - 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid

- **Rule 10**: **Modifiers with long ether chains ending with a carboxylic acid group result in low yield**.
  - *Examples*:
    - 2-[2-(2-methoxyethoxy)ethoxy]acetic acid
    - 3-[2-(2-aminoethoxy)ethoxy]propanoic acid

- **Rule 11**: **Modifiers that are aromatic carboxylic acids with methoxy or hydroxy groups on an extended aliphatic side chain result in high yield**, whereas **those with these groups directly on the aromatic ring may result in low yield**.
  - *High Yield Example*:
    - 5-(4-hydroxyphenyl)pentanoic acid
  - *Low Yield Example*:
    - 3-(4-hydroxyphenyl)propanoic acid

- **Rule 12**: **Modifiers that are aliphatic dicarboxylic acids containing internal ketone groups result in low yield**.
  - *Example*:
    - 4-oxoheptanedioic acid

- **Rule 13**: **Modifiers that are amino acids with long aliphatic side chains modified with acetamido groups result in low yield**.
  - *Example*:
    - (2S)-6-acetamido-2-aminohexanoic acid

- **Rule 14**: **Modifiers that are aromatic carboxylic acids substituted with electron-donating methoxy groups on an extended aliphatic chain result in high yield**.
  - *Example*:
    - 4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid

- **Rule 15**: **Modifiers containing electron-withdrawing trifluoroacetylamino groups result in low yield**.
  - *Example*:
    - 4-[(2,2,2-trifluoroacetyl)amino]butanoic acid

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 1.1,Rule 1.2,Rule 2,Rule 3,Rule 3.1,Rule 4,Rule 4.1,Rule 5,Rule 5.1,Rule 6,Rule 6.1,Rule 7,Rule 7.1,Rule 8,Rule 8.1,Rule 9,Rule 10,Rule 11,Rule 11.1,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6; Test Accuracy: 0.0
    Train Support: 0.04285714285714286; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 2.058823529411765; Test Lift: NONE
    Train Leverage: 0.022040816326530613; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups based on the rules
    
    # Rule 1: High Yield - Unbranched aliphatic monocarboxylic acids without additional functional groups
    # Pattern: Linear alkane chain ending with a carboxylic acid group, no branching, no other functional groups
    rule1_high_pattern = Chem.MolFromSmarts('[CH3][CH2]{3,}[C](=O)[OH]')
    
    # Rule 1 (Low Yield): Modifiers with terminal amino or hydroxyl groups on longer chains (7 or more carbons)
    rule1_low_pattern_amino = Chem.MolFromSmarts('[NH2][CH2]{5,}[C](=O)[OH]')
    rule1_low_pattern_hydroxy = Chem.MolFromSmarts('[OH][CH2]{5,}[C](=O)[OH]')
    
    # Rule 2: High Yield - α-Amino dicarboxylic acids (amino acids with two carboxyl groups)
    rule2_pattern = Chem.MolFromSmarts('[NH2][CH](C(=O)O)[CH2]{1,3}C(=O)O')
    
    # Rule 3: High Yield - Aromatic carboxylic acids with an amino group at the para position
    rule3_high_pattern = Chem.MolFromSmarts('c1cc(N)ccc1C(=O)O')
    # Rule 3 (Low Yield): Aromatic carboxylic acids with electron-withdrawing groups (e.g., formyl) at the para position
    rule3_low_pattern = Chem.MolFromSmarts('c1cc(C=O)ccc1C(=O)O')
    
    # Rule 4: High Yield - Aromatic carboxylic acids with nitro groups at the para position
    rule4_high_pattern = Chem.MolFromSmarts('c1cc([N+](=O)[O-])ccc1C(=O)O')
    # Rule 4 (Low Yield): Aromatic carboxylic acids with methyl groups at the para position
    rule4_low_pattern = Chem.MolFromSmarts('c1cc(C)ccc1C(=O)O')
    
    # Rule 5: High Yield - Heteroaromatic rings directly attached to the carboxylic acid group
    # Include multiple patterns for different heteroaromatic rings
    rule5_high_patterns = [
        Chem.MolFromSmarts('n1cccc1C(=O)O'),
        Chem.MolFromSmarts('n1ccccc1C(=O)O'),
        Chem.MolFromSmarts('c1ncccc1C(=O)O'),
        Chem.MolFromSmarts('c1ccncc1C(=O)O'),
        Chem.MolFromSmarts('c1ccnc(c1)C(=O)O'),
        Chem.MolFromSmarts('c1c[nH]c2ccccc12C(=O)O')  # For example, indole carboxylic acids
    ]
    # Rule 5 (Low Yield): Heteroaromatic ring not directly attached
    rule5_low_pattern = Chem.MolFromSmarts('c1ccc(-c2ccccn2)cc1C(=O)O')
    
    # Rule 6: High Yield - Amino acids with electron-rich aromatic heterocycles in their side chains
    rule6_high_pattern = Chem.MolFromSmarts('[NH2][CH](C(=O)[OH])[CH2][c]1c[nH]c2ccccc12')
    # Rule 6 (Low Yield): Amino acids with simple aromatic side chains
    rule6_low_pattern = Chem.MolFromSmarts('[NH2][CH](C(=O)[OH])[CH2][c]1ccccc1')
    
    # Rule 7: High Yield - Sulfanyl (thiol) groups on aliphatic chains
    rule7_high_pattern = Chem.MolFromSmarts('[SH][CH2]{1,5}C(=O)O')
    # Rule 7 (Low Yield): Sulfanyl groups on aromatic rings
    rule7_low_pattern = Chem.MolFromSmarts('c1ccc(S)cc1C(=O)O')
    
    # Rule 8: High Yield - Aliphatic polyhydroxy acids (containing multiple hydroxyl groups)
    rule8_high_pattern = Chem.MolFromSmarts('C(=O)O[CH2][CH](O)[CH](O)[CH](O)[CH2]O')
    # Rule 8 (Low Yield): Single terminal hydroxyl group on longer chains
    rule8_low_pattern = Chem.MolFromSmarts('[OH][CH2]{5,}[C](=O)[OH]')
    
    # Rule 9: Low Yield - Perfluoroalkyl chains attached to a carboxylic acid group
    # Adjusted pattern to match longer perfluoroalkyl chains
    rule9_pattern = Chem.MolFromSmarts('C(=O)O[CX4](F)(F)[CX2](F)(F)[CX3](F)')
    
    # Rule 10: Low Yield - Long ether chains ending with a carboxylic acid group
    # Generalized to match variable-length ether chains
    rule10_pattern = Chem.MolFromSmarts('C(=O)O[CH2]([O][CH2]){2,}[O][CH2]')
    
    # Rule 11: High Yield - Aromatic carboxylic acids with methoxy or hydroxy groups on an extended aliphatic side chain
    rule11_high_pattern = Chem.MolFromSmarts('C(=O)O[CH2][CH2][CH2]c1ccc(O)cc1')
    # Rule 11 (Low Yield): Methoxy or hydroxy groups directly on the aromatic ring
    rule11_low_pattern = Chem.MolFromSmarts('c1cc(O)ccc1[CH2][CH2]C(=O)O')
    
    # Rule 12: Low Yield - Aliphatic dicarboxylic acids containing internal ketone groups
    rule12_pattern = Chem.MolFromSmarts('C(=O)O[CH2][CX3](=O)[CH2]C(=O)O')
    
    # Rule 13: Low Yield - Amino acids with long aliphatic side chains modified with acetamido groups
    rule13_pattern = Chem.MolFromSmarts('[NH2][CH](C(=O)O)[CH2]{4}[NH][C](=O)C')
    
    # Rule 14: High Yield - Aromatic carboxylic acids substituted with methoxy groups on an extended aliphatic chain
    rule14_pattern = Chem.MolFromSmarts('C(=O)O[CH2][C](=O)[CH2]c1ccc(OC)c(OC)c1')
    
    # Rule 15: Low Yield - Electron-withdrawing trifluoroacetylamino groups
    rule15_pattern = Chem.MolFromSmarts('C(=O)O[CH2][CH2][NH][C](=O)C(F)(F)F')
    
    # Compile rules into a list with their predictions
    rules = [
        {'number': 1, 'pattern': rule1_high_pattern, 'prediction': 1},
        {'number': 1.1, 'pattern': rule1_low_pattern_amino, 'prediction': -1},
        {'number': 1.2, 'pattern': rule1_low_pattern_hydroxy, 'prediction': -1},
        {'number': 2, 'pattern': rule2_pattern, 'prediction': 1},
        {'number': 3, 'pattern': rule3_high_pattern, 'prediction': 1},
        {'number': 3.1, 'pattern': rule3_low_pattern, 'prediction': -1},
        {'number': 4, 'pattern': rule4_high_pattern, 'prediction': 1},
        {'number': 4.1, 'pattern': rule4_low_pattern, 'prediction': -1},
        # For Rule 5, since there are multiple patterns, we need to handle that
        {'number': 5, 'patterns': rule5_high_patterns, 'prediction': 1},
        {'number': 5.1, 'pattern': rule5_low_pattern, 'prediction': -1},
        {'number': 6, 'pattern': rule6_high_pattern, 'prediction': 1},
        {'number': 6.1, 'pattern': rule6_low_pattern, 'prediction': -1},
        {'number': 7, 'pattern': rule7_high_pattern, 'prediction': 1},
        {'number': 7.1, 'pattern': rule7_low_pattern, 'prediction': -1},
        {'number': 8, 'pattern': rule8_high_pattern, 'prediction': 1},
        {'number': 8.1, 'pattern': rule8_low_pattern, 'prediction': -1},
        {'number': 9, 'pattern': rule9_pattern, 'prediction': -1},
        {'number': 10, 'pattern': rule10_pattern, 'prediction': -1},
        {'number': 11, 'pattern': rule11_high_pattern, 'prediction': 1},
        {'number': 11.1, 'pattern': rule11_low_pattern, 'prediction': -1},
        {'number': 12, 'pattern': rule12_pattern, 'prediction': -1},
        {'number': 13, 'pattern': rule13_pattern, 'prediction': -1},
        {'number': 14, 'pattern': rule14_pattern, 'prediction': 1},
        {'number': 15, 'pattern': rule15_pattern, 'prediction': -1}
    ]
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                if 'patterns' in rule:
                    # If multiple patterns, check if any of them match
                    match_found = False
                    for pattern in rule['patterns']:
                        if mol.HasSubstructMatch(pattern):
                            match_found = True
                            break
                    if match_found:
                        row.append(rule['prediction'])
                    else:
                        row.append(0)
                else:
                    if mol.HasSubstructMatch(rule['pattern']):
                        row.append(rule['prediction'])
                    else:
                        row.append(0)
            except:
                # In case of error, assign 0
                row.append(0)
        results.append(row)
    
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f"Rule {rule['number']}" for rule in rules])
    return df
--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: **Modifiers that are unbranched aliphatic monocarboxylic acids with chain lengths up to eight carbons result in high yield, provided they do not have terminal amino or hydroxy groups on chains longer than six carbons.**
  - *Rationale*: Unbranched aliphatic acids can efficiently interact with the catalyst's active sites without steric hindrance. Terminal amino or hydroxy groups on longer chains may interfere with the catalyst or the reaction mechanism.
  - *High Yield Examples*:
    - **Octanoic acid**
    - **5-aminopentanoic acid**
  - *Low Yield Examples*:
    - **7-hydroxyheptanoic acid**
    - **7-aminoheptanoic acid**
    - **8-aminooctanoic acid**

- **Rule 2**: **Modifiers that are α-amino dicarboxylic acids or amino acids with polar side chains result in high yield, whereas those with hydrophobic or bulky aromatic side chains result in low yield.**
  - *Rationale*: Polar side chains can enhance interactions with the catalyst, promoting high yield. Hydrophobic or bulky side chains may cause steric hindrance or reduce catalyst compatibility.
  - *High Yield Examples*:
    - **(2S)-2-aminopentanedioic acid** (Glutamic acid)
    - **(2S)-2-aminobutanedioic acid** (Aspartic acid)
    - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (Tryptophan)
  - *Low Yield Examples*:
    - **(2S)-2-amino-3-phenylpropanoic acid** (Phenylalanine)
    - **(2S)-6-acetamido-2-aminohexanoic acid**

- **Rule 3**: **Modifiers that are aromatic carboxylic acids with electron-donating para-substituents (e.g., amino or hydroxy groups) result in high yield, while those with electron-withdrawing groups (e.g., aldehyde, trifluoromethyl, or methyl groups) at the para position result in low yield.**
  - *Rationale*: Electron-donating groups can enhance the π-electron density of the aromatic ring, improving interactions with the catalyst. Electron-withdrawing groups can decrease reactivity or interfere with the catalyst.
  - *High Yield Examples*:
    - **4-aminobenzoic acid**
    - **4-nitrobenzoic acid**
  - *Low Yield Examples*:
    - **4-formylbenzoic acid**
    - **4-methylbenzoic acid**
    - **4-[(2,2,2-trifluoroacetyl)amino]butanoic acid**

- **Rule 4**: **Modifiers where the carboxylic acid group is directly attached to a nitrogen-containing heteroaromatic ring result in high yield; those where the heteroaromatic ring is connected through an additional aromatic ring result in low yield.**
  - *Rationale*: Direct attachment allows for effective coordination with metal centers in the catalyst. Additional aromatic rings can introduce steric hindrance and reduce effective interaction.
  - *High Yield Examples*:
    - **Pyridine-3-carboxylic acid** (Nicotinic acid)
    - **1H-pyrazole-4-carboxylic acid**
    - **2-oxo-1H-pyridine-4-carboxylic acid**
  - *Low Yield Example*:
    - **4-pyridin-4-ylbenzoic acid**

- **Rule 5**: **Modifiers that are aliphatic carboxylic acids with thiol groups on short chains result in high yield, whereas those with thiol groups attached directly to an aromatic ring result in low yield due to potential catalyst poisoning.**
  - *Rationale*: Thiol groups on short aliphatic chains can act as ligands enhancing catalyst activity. Thiol groups directly attached to aromatic rings can strongly bind to metal centers, deactivating the catalyst.
  - *High Yield Example*:
    - **3-sulfanylpropanoic acid** (3-mercaptopropionic acid)
  - *Low Yield Example*:
    - **4-sulfanylbenzoic acid**

- **Rule 6**: **Modifiers containing multiple hydroxyl groups on an aliphatic chain result in high yield, while those with a single hydroxyl group on longer chains result in low yield.**
  - *Rationale*: Multiple hydroxyl groups can increase solubility and interaction with the catalyst. A single hydroxyl group on a long chain may not offer these benefits and can introduce unfavorable steric effects.
  - *High Yield Examples*:
    - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (Gluconic acid)
    - **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid**
  - *Low Yield Example*:
    - **7-hydroxyheptanoic acid**

- **Rule 7**: **Modifiers with perfluoroalkyl groups attached to the carboxylic acid result in low yield.**
  - *Rationale*: Perfluoroalkyl groups are highly electron-withdrawing and hydrophobic, which can hinder interactions with the catalyst and reduce solubility in the reaction medium.
  - *Low Yield Example*:
    - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**

- **Rule 8**: **Modifiers containing polyether chains ending with a carboxylic acid group result in low yield.**
  - *Rationale*: Polyether chains can increase flexibility and steric bulk, reducing the ability of the modifier to interact effectively with the catalyst.
  - *Low Yield Examples*:
    - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**
    - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**

- **Rule 9**: **Modifiers that are aromatic carboxylic acids with methoxy or hydroxy-substituted phenyl groups connected via an aliphatic chain result in high yield, whereas those with these substituents directly attached to the benzene ring result in low yield.**
  - *Rationale*: The aliphatic chain can provide flexibility and optimal positioning of functional groups for better catalyst interaction. Direct substitution on the aromatic ring may hinder effective binding due to steric factors.
  - *High Yield Examples*:
    - **5-(4-hydroxyphenyl)pentanoic acid**
    - **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid**
  - *Low Yield Examples*:
    - **3-(4-hydroxyphenyl)propanoic acid**
    - **2-[(4-hydroxybenzoyl)amino]acetic acid**

- **Rule 10**: **Modifiers with aldehyde or ketone groups attached to aromatic or aliphatic chains result in low yield.**
  - *Rationale*: Aldehyde and ketone groups can react with amino or hydroxyl groups in the system or coordinate with metal centers, disrupting catalyst activity.
  - *Low Yield Examples*:
    - **4-formylbenzoic acid**
    - **5-formyl-2-hydroxybenzoic acid**
    - **4-oxoheptanedioic acid**

- **Rule 11**: **Modifiers with electron-withdrawing trifluoroacetyl groups result in low yield.**
  - *Rationale*: Strong electron-withdrawing groups can decrease the electron density of the modifier, hindering interactions with the catalyst and possibly deactivating it.
  - *Low Yield Example*:
    - **4-[(2,2,2-trifluoroacetyl)amino]butanoic acid**

- **Rule 12**: **Modifiers that are long-chain aliphatic amino acids with bulky acetamido or modified side chains result in low yield.**
  - *Rationale*: Bulky side chains can create steric hindrance, reducing the modifier's ability to interact effectively with the catalyst.
  - *Low Yield Example*:
    - **(2S)-6-acetamido-2-aminohexanoic acid**

- **Rule 13**: **Modifiers containing terminal amino groups on long aliphatic chains (seven carbons or more) result in low yield.**
  - *Rationale*: Terminal amino groups on long chains may interfere with the catalyst, possibly through coordination that leads to catalyst deactivation.
  - *Low Yield Examples*:
    - **7-aminoheptanoic acid**
    - **8-aminooctanoic acid**

- **Rule 14**: **Modifiers that are amino acids with electron-rich heteroaromatic side chains result in high yield, whereas those with simple hydrophobic aromatic side chains result in low yield.**
  - *Rationale*: Electron-rich heteroaromatic rings can enhance interactions with the catalyst, while simple hydrophobic rings may not provide the necessary interaction for high yield.
  - *High Yield Example*:
    - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (Tryptophan)
  - *Low Yield Example*:
    - **(2S)-2-amino-3-phenylpropanoic acid** (Phenylalanine)

- **Rule 15**: **Modifiers containing groups that strongly coordinate to metals (e.g., thiol groups attached directly to an aromatic ring) may result in low yield due to potential catalyst poisoning.**
  - *Rationale*: Strongly coordinating groups can bind irreversibly to metal centers in the catalyst, reducing its availability and activity.
  - *Low Yield Example*:
    - **4-sulfanylbenzoic acid**

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2 High,Rule 2 Low,Rule 3 High,Rule 3 Low,Rule 4 High,Rule 4 Low,Rule 5 High,Rule 5 Low,Rule 6 High,Rule 6 Low,Rule 7 Low,Rule 8 Low,Rule 9 High,Rule 9 Low,Rule 10 Low,Rule 11 Low,Rule 12 Low,Rule 13 Low,Rule 14 High,Rule 14 Low,Rule 15 Low
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.5714285714285714; Test Accuracy: 1.0
    Train Support: 0.04285714285714286; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 1.9444444444444446; Test Lift: NONE
    Train Leverage: 0.020816326530612248; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    
    # Amino group (-NH2)
    amino_group = '[NX3][H2]'
    
    # Hydroxyl group (-OH)
    hydroxyl_group = '[OX2H]'
    
    # Unbranched aliphatic chain with up to 8 carbons
    unbranched_aliphatic_chain = '[CX4H2][CX4H2]{0,6}[CX4H2]'
    
    # Terminal amino or hydroxyl group on chains longer than 6 carbons
    terminal_amino_or_hydroxyl_long_chain = '[CX4H2][CX4H2]{5,}[C;!$(C([OX2H,NX3H2]))]'
    
    # Alpha amino dicarboxylic acid
    alpha_amino_dicarboxylic_acid = '[NX3][CX4H]([C])[CX3](=O)[OX2H1]'
    
    # Amino acids with polar side chains
    polar_side_chain = '[CX4H]([NX3])[CX3](=O)[OX2H1]'
    polar_groups = ['[OX2H]', '[SX2H]', '[NX3H2]', '[NX3H1]']
    
    # Amino acids with hydrophobic or bulky aromatic side chains
    hydrophobic_aromatic_side_chain = '[CX4H]([NX3])[CX3](=O)[OX2H1][C][c]'
    
    # Aromatic carboxylic acids
    aromatic_carboxylic_acid = 'c[c](=O)[OX2H1]'
    
    # Electron-donating para-substituents
    electron_donating_para = 'c1ccc(cc1)[NX3H2,OX2H]'
    
    # Electron-withdrawing para-substituents
    electron_withdrawing_para = 'c1ccc(cc1)[CX3H](=O),c1ccc(cc1)[CX4H3]'
    
    # Nitrogen-containing heteroaromatic ring directly attached to COOH
    heteroaromatic_carboxylic_acid = '[nH]1cccc1C(=O)O'
    
    # Heteroaromatic ring connected through an additional aromatic ring
    heteroaromatic_with_extra_ring = 'c1ccc(cc1)c2ccccn2C(=O)O'
    
    # Aliphatic carboxylic acids with thiol groups on short chains
    thiol_aliphatic_short_chain = '[CX4][CX4][SX2H]'
    
    # Thiol groups attached directly to aromatic ring
    thiol_on_aromatic = 'c[SH]'
    
    # Modifiers containing multiple hydroxyl groups on an aliphatic chain
    multiple_hydroxyl_on_chain = '[CX4H2][OX2H][CX4H2][OX2H][CX4H2][OX2H]'
    
    # Single hydroxyl group on longer chains
    single_hydroxyl_long_chain = '[CX4H2][CX4H2]{5,}[OX2H]'
    
    # Perfluoroalkyl groups attached to carboxylic acid
    perfluoroalkyl_carboxylic_acid = '[CX4](F)(F)(F)[CX3](=O)[OX2H1]'
    
    # Polyether chains ending with carboxylic acid
    polyether_chain_carboxylic_acid = '[C,O][C,O][C,O][CX3](=O)[OX2H1]'
    
    # Aromatic carboxylic acids with methoxy or hydroxy-substituted phenyl groups connected via aliphatic chain
    aromatic_methoxy_hydroxy_aliphatic_chain = '[cH][cH][CX4][CX3](=O)[OX2H1]'
    
    # Aldehyde or ketone groups attached to aromatic or aliphatic chains
    aldehyde_ketone = '[CX3H1](=O)[#6]'
    
    # Electron-withdrawing trifluoroacetyl groups
    trifluoroacetyl_group = '[CX3](=O)[CX4](F)(F)F'
    
    # Long-chain aliphatic amino acids with bulky acetamido or modified side chains
    bulky_acetamido_side_chain = '[CX4H][NX3][CX3](=O)[CX4H][CX4H]'
    
    # Terminal amino groups on long aliphatic chains (seven carbons or more)
    terminal_amino_long_chain = '[NX3H2][CX4H2][CX4H2][CX4H2][CX4H2][CX4H2][CX4H2][CX3](=O)[OX2H1]'
    
    # Amino acids with electron-rich heteroaromatic side chains
    electron_rich_heteroaromatic_side_chain = '[NX3][CX4H]([c])[CX3](=O)[OX2H1]'
    
    # Amino acids with simple hydrophobic aromatic side chains
    hydrophobic_aromatic_amino_acid = '[NX3][CX4H]([c])[CX3](=O)[OX2H1]'
    
    # Compile SMARTS patterns
    patterns = {
        'Rule 1': Chem.MolFromSmarts(f'[{unbranched_aliphatic_chain}][CX3](=O)[OX2H1]'),
        'Rule 2 High': [Chem.MolFromSmarts(alpha_amino_dicarboxylic_acid)] + [Chem.MolFromSmarts(polar) for polar in polar_groups],
        'Rule 2 Low': Chem.MolFromSmarts(hydrophobic_aromatic_side_chain),
        'Rule 3 High': Chem.MolFromSmarts(f'{aromatic_carboxylic_acid}.{electron_donating_para}'),
        'Rule 3 Low': Chem.MolFromSmarts(f'{aromatic_carboxylic_acid}.{electron_withdrawing_para}'),
        'Rule 4 High': Chem.MolFromSmarts(heteroaromatic_carboxylic_acid),
        'Rule 4 Low': Chem.MolFromSmarts(heteroaromatic_with_extra_ring),
        'Rule 5 High': Chem.MolFromSmarts(f'{thiol_aliphatic_short_chain}[CX3](=O)[OX2H1]'),
        'Rule 5 Low': Chem.MolFromSmarts(f'{thiol_on_aromatic}[CX3](=O)[OX2H1]'),
        'Rule 6 High': Chem.MolFromSmarts(multiple_hydroxyl_on_chain),
        'Rule 6 Low': Chem.MolFromSmarts(single_hydroxyl_long_chain),
        'Rule 7 Low': Chem.MolFromSmarts(perfluoroalkyl_carboxylic_acid),
        'Rule 8 Low': Chem.MolFromSmarts(polyether_chain_carboxylic_acid),
        'Rule 9 High': Chem.MolFromSmarts(f'{aromatic_methoxy_hydroxy_aliphatic_chain}[OX2H1]'),
        'Rule 9 Low': Chem.MolFromSmarts(f'{aromatic_methoxy_hydroxy_aliphatic_chain}[c][OX2H1]'),
        'Rule 10 Low': Chem.MolFromSmarts(aldehyde_ketone),
        'Rule 11 Low': Chem.MolFromSmarts(trifluoroacetyl_group),
        'Rule 12 Low': Chem.MolFromSmarts(bulky_acetamido_side_chain),
        'Rule 13 Low': Chem.MolFromSmarts(terminal_amino_long_chain),
        'Rule 14 High': Chem.MolFromSmarts(electron_rich_heteroaromatic_side_chain),
        'Rule 14 Low': Chem.MolFromSmarts(hydrophobic_aromatic_amino_acid),
        'Rule 15 Low': Chem.MolFromSmarts(f'{thiol_on_aromatic}[CX3](=O)[OX2H1]'),
    }
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(patterns))
            continue
        row = []
        for rule_name, pattern in patterns.items():
            try:
                if isinstance(pattern, list):
                    # For patterns that are lists (e.g., Rule 2 High)
                    match = any(mol.HasSubstructMatch(pat) for pat in pattern)
                else:
                    match = mol.HasSubstructMatch(pattern)
                if match:
                    if 'High' in rule_name:
                        row.append(1)
                    elif 'Low' in rule_name:
                        row.append(-1)
                    else:
                        row.append(1)
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=list(patterns.keys()))
    return df
--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: **Modifiers that are linear aliphatic monocarboxylic acids with chain lengths up to eight carbons result in high yield. Terminal amino or hydroxy groups are acceptable on chains with five carbons or fewer; however, if the chain is six carbons or longer, terminal amino or hydroxy groups lead to low yield.**
  - *Rationale*: Unbranched aliphatic acids can efficiently interact with the catalyst without steric hindrance. Terminal functional groups on longer chains may interfere with catalyst interaction or the reaction mechanism.
  - *High Yield Examples*:
    - **Octanoic acid**
    - **5-aminopentanoic acid**
  - *Low Yield Examples*:
    - **7-hydroxyheptanoic acid**
    - **7-aminoheptanoic acid**
    - **8-aminooctanoic acid**

- **Rule 2**: **Modifiers that are α-amino dicarboxylic acids (e.g., aspartic acid, glutamic acid) result in high yield, while amino acids with hydrophobic or bulky aromatic side chains result in low yield.**
  - *Rationale*: Polar side chains enhance interactions with the catalyst, promoting high yield. Hydrophobic or bulky side chains may cause steric hindrance or reduce catalyst compatibility.
  - *High Yield Examples*:
    - **(2S)-2-aminobutanedioic acid** (Aspartic acid)
    - **(2S)-2-aminopentanedioic acid** (Glutamic acid)
  - *Low Yield Examples*:
    - **(2S)-2-amino-3-phenylpropanoic acid** (Phenylalanine)
    - **(2S)-6-acetamido-2-aminohexanoic acid**

- **Rule 3**: **Modifiers that are aromatic carboxylic acids with polar substituents (e.g., amino, nitro groups) at the para position result in high yield, whereas those with non-polar substituents (e.g., methyl groups) or electron-withdrawing aldehyde groups at the para position result in low yield.**
  - *Rationale*: Polar substituents can enhance the electronic interaction with the catalyst, improving reactivity. Non-polar or electron-withdrawing groups may decrease reactivity or hinder catalyst interaction.
  - *High Yield Examples*:
    - **4-aminobenzoic acid**
    - **4-nitrobenzoic acid**
  - *Low Yield Examples*:
    - **4-methylbenzoic acid**
    - **4-formylbenzoic acid**

- **Rule 4**: **Modifiers where the carboxylic acid group is directly attached to a nitrogen-containing heteroaromatic ring result in high yield; those where the heteroaromatic ring is connected through an additional aromatic ring result in low yield.**
  - *Rationale*: Direct attachment allows effective coordination with metal centers in the catalyst. Additional aromatic rings can introduce steric hindrance and reduce effective interaction.
  - *High Yield Examples*:
    - **Pyridine-3-carboxylic acid** (Nicotinic acid)
    - **1H-pyrazole-4-carboxylic acid**
  - *Low Yield Example*:
    - **4-pyridin-4-ylbenzoic acid**

- **Rule 5**: **Modifiers that are aliphatic carboxylic acids with thiol groups on short chains (three carbons) result in high yield, whereas those with thiol groups attached directly to an aromatic ring result in low yield due to potential catalyst poisoning.**
  - *Rationale*: Thiol groups on short aliphatic chains can act as ligands enhancing catalyst activity. Thiol groups directly attached to aromatic rings can strongly bind to metal centers, deactivating the catalyst.
  - *High Yield Example*:
    - **3-sulfanylpropanoic acid**
  - *Low Yield Example*:
    - **4-sulfanylbenzoic acid**

- **Rule 6**: **Modifiers containing multiple hydroxyl groups on an aliphatic chain result in high yield, while those with a single hydroxyl group on longer chains result in low yield.**
  - *Rationale*: Multiple hydroxyl groups increase solubility and interaction with the catalyst. A single hydroxyl group on a long chain may not offer these benefits and can introduce unfavorable steric effects.
  - *High Yield Examples*:
    - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (Gluconic acid)
    - **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid**
  - *Low Yield Example*:
    - **7-hydroxyheptanoic acid**

- **Rule 7**: **Modifiers containing polyether chains ending with a carboxylic acid group result in low yield.**
  - *Rationale*: Polyether chains can increase flexibility and steric bulk, reducing the ability of the modifier to interact effectively with the catalyst.
  - *Low Yield Examples*:
    - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**
    - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**

- **Rule 8**: **Modifiers with perfluoroalkyl groups attached to the carboxylic acid result in low yield.**
  - *Rationale*: Perfluoroalkyl groups are highly electron-withdrawing and hydrophobic, which can hinder interactions with the catalyst and reduce solubility in the reaction medium.
  - *Low Yield Example*:
    - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**

- **Rule 9**: **Modifiers with aldehyde or ketone groups attached to aromatic rings result in low yield.**
  - *Rationale*: Aldehyde and ketone groups can react with active sites or coordinate with metal centers in the catalyst, disrupting its activity.
  - *Low Yield Examples*:
    - **4-formylbenzoic acid**
    - **5-formyl-2-hydroxybenzoic acid**

- **Rule 10**: **Modifiers that are amino acids with electron-rich heteroaromatic side chains result in high yield, whereas those with simple hydrophobic aromatic side chains result in low yield.**
  - *Rationale*: Electron-rich heteroaromatic rings can enhance interactions with the catalyst, while simple hydrophobic rings may not provide the necessary interaction for high yield.
  - *High Yield Example*:
    - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (Tryptophan)
  - *Low Yield Example*:
    - **(2S)-2-amino-3-phenylpropanoic acid** (Phenylalanine)

- **Rule 11**: **Modifiers containing functional groups that strongly coordinate to metals (e.g., trifluoroacetyl groups) result in low yield due to potential catalyst deactivation.**
  - *Rationale*: Strongly coordinating groups can bind to metal centers in the catalyst, reducing its availability and activity.
  - *Low Yield Example*:
    - **4-[(2,2,2-trifluoroacetyl)amino]butanoic acid**

- **Rule 12**: **Modifiers that are aromatic carboxylic acids with methoxy or hydroxy-substituted phenyl groups connected via a short aliphatic chain result in high yield, while those with these substituents directly attached to the benzene ring result in low yield.**
  - *Rationale*: The aliphatic chain can provide flexibility and optimal positioning of functional groups for better catalyst interaction. Direct substitution on the aromatic ring may hinder effective binding due to steric factors.
  - *High Yield Examples*:
    - **5-(4-hydroxyphenyl)pentanoic acid**
    - **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid**
  - *Low Yield Examples*:
    - **3-(4-hydroxyphenyl)propanoic acid**
    - **2-[(4-hydroxybenzoyl)amino]acetic acid**

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12
0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
1,1,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0
1,0,1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,1,0,0,0,0,0,0
1,0,0,0,-1,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,-1,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,-1,0,0,0,0
0,-1,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
1,0,1,0,0,0,0,0,0,0,0,0
1,0,0,1,0,0,0,0,0,0,0,0
0,0,-1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0
-1,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,-1,0,0,-1,0
1,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6571428571428571; Test Accuracy: 0.0
    Train Support: 0.0761904761904762; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 2.0143427741466957; Test Lift: NONE
    Train Leverage: 0.038367346938775505; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define functions for each rule
    
    def check_rule1(mol):
        # Rule 1: Linear aliphatic monocarboxylic acids with chain lengths up to eight carbons result in high yield.
        # Terminal amino or hydroxy groups are acceptable on chains with five carbons or fewer;
        # however, if the chain is six carbons or longer, terminal amino or hydroxy groups lead to low yield.
        try:
            # Find carboxylic acid group
            carboxylic_acid = Chem.MolFromSmarts('[CX3](=O)[OX2H1]')
            if not mol.HasSubstructMatch(carboxylic_acid):
                return 0
            # Get the carbon atom of the carboxylic acid
            matches = mol.GetSubstructMatches(carboxylic_acid)
            ca_c_index = matches[0][0]
            ca_c = mol.GetAtomWithIdx(ca_c_index)
            # Traverse the aliphatic chain
            visited = set([ca_c_index])
            queue = []
            # Add all carbon neighbors of the carboxylic acid carbon to the queue
            for nbr in ca_c.GetNeighbors():
                if nbr.GetAtomicNum() == 6:
                    queue.append((nbr, 1))  # (atom, chain length)
            chain_length = 0
            terminal_amino = False
            terminal_hydroxy = False
            is_unbranched = True
            while queue:
                atom, length = queue.pop(0)
                atom_idx = atom.GetIdx()
                if atom_idx in visited:
                    continue
                visited.add(atom_idx)
                if atom.GetAtomicNum() != 6:
                    continue
                chain_length = length
                # Check if the carbon is connected to more than 2 carbons (excluding the carboxylic carbon)
                num_carbon_neighbors = 0
                for nbr in atom.GetNeighbors():
                    if nbr.GetAtomicNum() == 6:
                        if nbr.GetIdx() != ca_c_index:
                            num_carbon_neighbors +=1
                    elif nbr.GetAtomicNum() == 7 and nbr.GetDegree() ==1:
                        terminal_amino = True
                    elif nbr.GetAtomicNum() ==8 and nbr.GetDegree() ==1:
                        terminal_hydroxy = True
                if num_carbon_neighbors > 2:
                    is_unbranched = False
                    break
                # Get neighbors to continue traversal
                for nbr in atom.GetNeighbors():
                    nbr_idx = nbr.GetIdx()
                    if nbr_idx in visited:
                        continue
                    if nbr.GetAtomicNum() == 6:
                        queue.append((nbr, length +1))
            if not is_unbranched:
                return 0
            if chain_length <=8:
                if chain_length <=5:
                    return 1
                else:
                    if terminal_amino or terminal_hydroxy:
                        return -1
                    else:
                        return 1
            else:
                return 0
        except Exception as e:
            return 0

    def check_rule2(mol):
        # Rule 2: α-amino dicarboxylic acids result in high yield,
        # while amino acids with hydrophobic or bulky aromatic side chains result in low yield.
        try:
            # High yield: α-amino dicarboxylic acids
            alpha_amino_acid = Chem.MolFromSmarts('[NX3][CX4H]([CH2][CX3](=O)[OX2H1])[CX3](=O)[OX2H1]')
            if mol.HasSubstructMatch(alpha_amino_acid):
                return 1
            # Low yield: amino acids with hydrophobic or bulky aromatic side chains
            aromatic_side_chain = Chem.MolFromSmarts('[NX3][CX4H]([CH2][c])[CX3](=O)[OX2H1]')
            if mol.HasSubstructMatch(aromatic_side_chain):
                return -1
            else:
                return 0
        except Exception as e:
            return 0

    def check_rule3(mol):
        # Rule 3: Aromatic carboxylic acids with polar substituents at the para position result in high yield,
        # whereas those with non-polar substituents or electron-withdrawing aldehyde groups at the para position result in low yield.
        try:
            # High yield patterns: amino, nitro, hydroxyl, methoxy at para position
            high_yield_patterns = [
                Chem.MolFromSmarts('c1cc([NX3H2,NX3H1,NX3+0,NX4+])ccc1C(=O)[OX2H1]'),
                Chem.MolFromSmarts('c1cc([NX3+](=O)[O-])ccc1C(=O)[OX2H1]'),
                Chem.MolFromSmarts('c1cc([OX2H])ccc1C(=O)[OX2H1]'),
                Chem.MolFromSmarts('c1cc([OX2][CH3])ccc1C(=O)[OX2H1]')
            ]
            # Low yield patterns: methyl, aldehyde, halogens, cyano at para position
            low_yield_patterns = [
                Chem.MolFromSmarts('c1cc([CH3])ccc1C(=O)[OX2H1]'),
                Chem.MolFromSmarts('c1cc([CX3H=O])ccc1C(=O)[OX2H1]'),
                Chem.MolFromSmarts('c1cc([F,Cl,Br,I])ccc1C(=O)[OX2H1]'),
                Chem.MolFromSmarts('c1cc([CX2]#N)ccc1C(=O)[OX2H1]')
            ]
            for pat in high_yield_patterns:
                if mol.HasSubstructMatch(pat):
                    return 1
            for pat in low_yield_patterns:
                if mol.HasSubstructMatch(pat):
                    return -1
            return 0
        except Exception as e:
            return 0

    def check_rule4(mol):
        # Rule 4: Modifiers where the carboxylic acid group is directly attached to a nitrogen-containing heteroaromatic ring result in high yield;
        # those where the heteroaromatic ring is connected through an additional aromatic ring result in low yield.
        try:
            # High yield pattern: carboxylic acid attached directly to nitrogen-containing heteroaromatic ring
            pattern_high = Chem.MolFromSmarts('[n][c]cc[c][C](=O)[OX2H1]')
            # Low yield pattern: heteroaromatic ring connected via additional aromatic ring
            pattern_low = Chem.MolFromSmarts('c1ccc(-c2[n][c]ccc2)cc1C(=O)[OX2H1]')
            if mol.HasSubstructMatch(pattern_high):
                return 1
            elif mol.HasSubstructMatch(pattern_low):
                return -1
            else:
                return 0
        except Exception as e:
            return 0

    def check_rule5(mol):
        # Rule 5: Modifiers that are aliphatic carboxylic acids with thiol groups on short chains (three carbons) result in high yield,
        # whereas those with thiol groups attached directly to an aromatic ring result in low yield.
        try:
            # High yield pattern: aliphatic chain with thiol group of 3 carbons
            pattern_high = Chem.MolFromSmarts('[#6]-[#6]-[#6]-[SX2H]')
            carboxylic_acid = Chem.MolFromSmarts('[CX3](=O)[OX2H1]')
            if mol.HasSubstructMatch(pattern_high) and mol.HasSubstructMatch(carboxylic_acid):
                return 1
            # Low yield pattern: thiol attached directly to aromatic ring
            pattern_low = Chem.MolFromSmarts('[c][SX2H]')
            if mol.HasSubstructMatch(pattern_low):
                return -1
            return 0
        except Exception as e:
            return 0

    def check_rule6(mol):
        # Rule 6: Modifiers containing multiple hydroxyl groups on an aliphatic chain result in high yield,
        # while those with a single hydroxyl group on longer chains result in low yield.
        try:
            # Count hydroxyl groups attached to aliphatic carbons
            hydroxyl_aliphatic = Chem.MolFromSmarts('[OX2H][CX4]')
            matches = mol.GetSubstructMatches(hydroxyl_aliphatic)
            num_hydroxyls = len(matches)
            if num_hydroxyls >= 2:
                return 1
            elif num_hydroxyls == 1:
                # Check chain length; if chain is longer than 6 carbons, return -1
                # Find the longest aliphatic chain
                ri = mol.GetRingInfo()
                aliphatic_carbons = [atom.GetIdx() for atom in mol.GetAtoms() if atom.GetAtomicNum() == 6 and not atom.IsInRing()]
                emol = Chem.rdmolops.GetDistanceMatrix(mol)
                max_chain_length = 0
                for i in aliphatic_carbons:
                    for j in aliphatic_carbons:
                        if j > i:
                            path_length = emol[i][j]
                            if path_length > max_chain_length:
                                max_chain_length = path_length
                if max_chain_length >=6:
                    return -1
                else:
                    return 0  # Not specified, return 0
            else:
                return 0
        except Exception as e:
            return 0

    def check_rule7(mol):
        # Rule 7: Modifiers containing polyether chains ending with a carboxylic acid group result in low yield.
        try:
            # Polyether chain ending with carboxylic acid
            pattern = Chem.MolFromSmarts('[$([#6][OX2][#6][OX2][#6][CX3](=O)[OX2H1]),$([#6][OX2][#6][OX2][#6][OX2][#6][CX3](=O)[OX2H1])]')
            if mol.HasSubstructMatch(pattern):
                return -1
            else:
                return 0
        except Exception as e:
            return 0

    def check_rule8(mol):
        # Rule 8: Modifiers with perfluoroalkyl groups attached to the carboxylic acid result in low yield.
        try:
            # Generalized perfluoroalkyl group attached to carboxylic acid
            pattern = Chem.MolFromSmarts('[CX4]([CX4](F)(F)F)(F)(F)C(=O)[OX2H1]')
            perfluoroalkyl = Chem.MolFromSmarts('[CX4]([F,Cl,Br,I])([F,Cl,Br,I])[F,Cl,Br,I]')
            carboxylic_acid = Chem.MolFromSmarts('[CX3](=O)[OX2H1]')
            if mol.HasSubstructMatch(perfluoroalkyl) and mol.HasSubstructMatch(carboxylic_acid):
                return -1
            else:
                return 0
        except Exception as e:
            return 0

    def check_rule9(mol):
        # Rule 9: Modifiers with aldehyde or ketone groups attached to aromatic rings result in low yield.
        try:
            # Aldehyde or ketone attached to aromatic ring
            pattern = Chem.MolFromSmarts('[c][CX3](=O)[CH]')
            pattern2 = Chem.MolFromSmarts('[c][CX3](=O)[#6]')
            if mol.HasSubstructMatch(pattern) or mol.HasSubstructMatch(pattern2):
                return -1
            else:
                return 0
        except Exception as e:
            return 0

    def check_rule10(mol):
        # Rule 10: Modifiers that are amino acids with electron-rich heteroaromatic side chains result in high yield,
        # whereas those with simple hydrophobic aromatic side chains result in low yield.
        try:
            # High yield: amino acids with electron-rich heteroaromatic side chains (e.g., tryptophan)
            pattern_high = Chem.MolFromSmarts('[NX3][CX4H]([CX4H][c]1[n][c]2[c][c][c][c]2[c]1)[CX3](=O)[OX2H1]')
            # Low yield: amino acids with hydrophobic aromatic side chains (e.g., phenylalanine)
            pattern_low = Chem.MolFromSmarts('[NX3][CX4H]([CX4H][c]1[c][c][c][c][c]1)[CX3](=O)[OX2H1]')
            if mol.HasSubstructMatch(pattern_high):
                return 1
            elif mol.HasSubstructMatch(pattern_low):
                return -1
            else:
                return 0
        except Exception as e:
            return 0

    def check_rule11(mol):
        # Rule 11: Modifiers containing functional groups that strongly coordinate to metals (e.g., trifluoroacetyl groups) result in low yield.
        try:
            # Trifluoroacetyl group
            pattern = Chem.MolFromSmarts('[CX3](=O)[CX4]([F])([F])[F]')
            if mol.HasSubstructMatch(pattern):
                return -1
            else:
                return 0
        except Exception as e:
            return 0

    def check_rule12(mol):
        # Rule 12: Modifiers that are aromatic carboxylic acids with methoxy or hydroxy-substituted phenyl groups connected via a short aliphatic chain result in high yield,
        # while those with these substituents directly attached to the benzene ring result in low yield.
        try:
            # High yield: methoxy or hydroxy-substituted phenyl group connected via short aliphatic chain
            pattern_high = Chem.MolFromSmarts('[#6]-[#6]-c1ccc([OX2H,OX2][CH3])cc1C(=O)[OX2H1]')
            # Low yield: methoxy or hydroxy-substituted phenyl ring directly attached to carboxylic acid
            pattern_low = Chem.MolFromSmarts('c1ccc([OX2H,OX2][CH3])cc1C(=O)[OX2H1]')
            if mol.HasSubstructMatch(pattern_high):
                return 1
            elif mol.HasSubstructMatch(pattern_low):
                return -1
            else:
                return 0
        except Exception as e:
            return 0

    # List of rule functions
    rules = [
        {'number': 1, 'func': check_rule1},
        {'number': 2, 'func': check_rule2},
        {'number': 3, 'func': check_rule3},
        {'number': 4, 'func': check_rule4},
        {'number': 5, 'func': check_rule5},
        {'number': 6, 'func': check_rule6},
        {'number': 7, 'func': check_rule7},
        {'number': 8, 'func': check_rule8},
        {'number': 9, 'func': check_rule9},
        {'number': 10, 'func': check_rule10},
        {'number': 11, 'func': check_rule11},
        {'number': 12, 'func': check_rule12},
    ]
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        # Sanitize molecule and add explicit hydrogens
        mol = Chem.AddHs(mol)
        Chem.SanitizeMol(mol)
        row = []
        for rule in rules:
            try:
                result = rule['func'](mol)
                row.append(result)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f"Rule {rule['number']}" for rule in rules])
    return df
--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

1. **Rule 1**: **Modifiers that are aliphatic carboxylic acids with chain lengths of five carbons or fewer and containing an amino group result in high yield; those with longer chains may result in low yield.**
   - *Rationale*: Short aliphatic chains with amino groups can effectively interact with the catalyst without significant steric hindrance, enhancing coordination and reactivity.
   - *High Yield Examples*:
     - **5-aminopentanoic acid**
     - **3-sulfanylpropanoic acid**
   - *Low Yield Examples*:
     - **7-aminoheptanoic acid**
     - **8-aminooctanoic acid**

2. **Rule 2**: **Modifiers that are aromatic carboxylic acids where the carboxyl group is directly attached to an aromatic ring, and the ring has substituents capable of coordination (e.g., amino, hydroxy, nitro) at the ortho or para position result in high yield.**
   - *Rationale*: Functional groups that can engage in coordination with metal centers enhance catalyst interaction and activity. Electron-donating or withdrawing nature is less significant than the ability to coordinate.
   - *High Yield Examples*:
     - **4-aminobenzoic acid**
     - **4-nitrobenzoic acid**
   - *Low Yield Examples*:
     - **4-formylbenzoic acid**
     - **4-methylbenzoic acid**

3. **Rule 3**: **Modifiers that are amino acids with side chains containing additional carboxyl groups (e.g., aspartic acid, glutamic acid) result in high yield, while those with nonpolar aromatic side chains result in low yield.**
   - *Rationale*: Additional carboxyl groups enhance coordination with the catalyst's metal centers, increasing reactivity. Nonpolar aromatic side chains may not effectively interact with the catalyst.
   - *High Yield Examples*:
     - **(2S)-2-aminobutanedioic acid** (Aspartic acid)
     - **(2S)-2-aminopentanedioic acid** (Glutamic acid)
   - *Low Yield Example*:
     - **(2S)-2-amino-3-phenylpropanoic acid** (Phenylalanine)

4. **Rule 4**: **Modifiers that are heteroaromatic carboxylic acids with nitrogen atoms in the ring, and the carboxyl group is directly attached to the ring, result in high yield.**
   - *Rationale*: Nitrogen atoms in heteroaromatic rings can coordinate with metal centers, enhancing catalyst interaction and facilitating electron transfer.
   - *High Yield Examples*:
     - **Pyridine-3-carboxylic acid** (Nicotinic acid)
     - **1H-pyrazole-4-carboxylic acid**
     - **2-oxo-1H-pyridine-4-carboxylic acid**

5. **Rule 5**: **Modifiers containing sulfur groups (thiols) attached to short aliphatic chains result in high yield; those with sulfur groups directly attached to aromatic rings result in low yield due to potential catalyst poisoning.**
   - *Rationale*: Thiol groups on short chains act as flexible ligands, enhancing catalyst activity. Thiol groups on aromatic rings can bind strongly and irreversibly to metal centers, deactivating the catalyst.
   - *High Yield Example*:
     - **3-sulfanylpropanoic acid**
   - *Low Yield Example*:
     - **4-sulfanylbenzoic acid**

6. **Rule 6**: **Modifiers with multiple hydroxyl groups on a short aliphatic chain result in high yield; those with only one hydroxyl group on longer chains result in low yield.**
   - *Rationale*: Multiple hydroxyl groups enhance solubility and enable hydrogen bonding with the catalyst, promoting reactivity. Single hydroxyl groups on long chains may not interact effectively.
   - *High Yield Example*:
     - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (Gluconic acid)
   - *Low Yield Example*:
     - **7-hydroxyheptanoic acid**

7. **Rule 7**: **Modifiers that are aliphatic carboxylic acids with medium-length chains (around eight carbons) without additional polar groups result in high yield; similar acids with additional polar end groups result in low yield due to steric and electronic effects.**
   - *Rationale*: Medium-length chains can balance hydrophobic and hydrophilic interactions, optimizing catalyst interaction. Additional polar groups may introduce steric hindrance or unfavorable interactions.
   - *High Yield Example*:
     - **Octanoic acid**
   - *Low Yield Example*:
     - **8-aminooctanoic acid**

8. **Rule 8**: **Modifiers containing flexible polyether chains ending with a carboxylic acid group result in low yield.**
   - *Rationale*: Polyether chains introduce flexibility and steric bulk, hindering effective coordination with the catalyst's active sites and reducing reactivity.
   - *Low Yield Examples*:
     - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**
     - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**

9. **Rule 9**: **Modifiers that are aromatic carboxylic acids with aldehyde or ketone substituents at the ortho or para position result in low yield due to potential side reactions or catalyst deactivation.**
   - *Rationale*: Aldehyde and ketone groups can coordinate with metal centers or undergo side reactions, disrupting catalyst activity and decreasing yield.
   - *Low Yield Examples*:
     - **4-formylbenzoic acid**
     - **5-formyl-2-hydroxybenzoic acid**

10. **Rule 10**: **Modifiers that are perfluoroalkyl carboxylic acids result in low yield.**
    - *Rationale*: Perfluoroalkyl groups are highly hydrophobic and electron-withdrawing, decreasing solubility in the reaction medium and reducing interaction with the catalyst.
    - *Low Yield Example*:
      - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**

11. **Rule 11**: **Modifiers that are aromatic carboxylic acids with methoxy-substituted phenyl groups connected via a short aliphatic chain result in high yield.**
    - *Rationale*: Methoxy groups increase electron density and can enhance interactions with the catalyst through electron donation and optimal positioning.
    - *High Yield Example*:
      - **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid**

12. **Rule 12**: **Modifiers with N-acetylated amino groups result in low yield due to reduced coordination ability.**
    - *Rationale*: Acetylation blocks the amino group's ability to coordinate with the catalyst, decreasing effective interaction and yield.
    - *Low Yield Example*:
      - **(2S)-6-acetamido-2-aminohexanoic acid**

13. **Rule 13**: **Modifiers that are amino acids with indole side chains result in high yield.**
    - *Rationale*: The indole nitrogen can coordinate with metal centers, enhancing interaction with the catalyst.
    - *High Yield Example*:
      - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (Tryptophan)

14. **Rule 14**: **Modifiers with bromomethyl groups on aromatic carboxylic acids result in high yield.**
    - *Rationale*: The bromomethyl group may participate in halogen bonding or enhance the reactivity of the modifier, promoting catalyst activity.
    - *High Yield Example*:
      - **4-(bromomethyl)benzoic acid**

15. **Rule 15**: **Modifiers that are aliphatic dicarboxylic acids with ketone groups result in low yield due to potential side reactions or interference with catalyst coordination.**
    - *Rationale*: Ketone groups may interact unfavorably with the catalyst or participate in side reactions, reducing yield.
    - *Low Yield Example*:
      - **4-oxoheptanedioic acid**

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 5,Rule 10
0,0,0,0
0,0,0,0
0,0,0,0
0,0,0,0
0,0,0,0
0,0,0,0
0,0,0,0
0,0,0,0
0,0,0,0
0,0,0,0
0,0,0,0
0,0,0,0
0,0,0,0
0,0,0,0
0,0,0,0
0,0,0,0
0,0,0,0
0,0,0,0
0,0,0,0
0,0,0,0
0,0,0,0
0,0,0,0
0,0,0,0
0,0,0,0
0,0,0,0
0,0,0,0
0,0,0,0
0,0,0,0
0,0,0,0
0,0,0,0
0,0,0,0
0,0,0,0
0,0,0,0
0,0,0,0
0,0,0,0
0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.5142857142857142; Test Accuracy: 0.0
    Train Support: 0.0; Test Support: 0.0
    Train Confidence: 0.5; Test Confidence: 0.5
    Train Lift: 1.0; Test Lift: NONE
    Train Leverage: 0.0; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:

def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX1H1]'
    carboxylate_anion = '[CX3](=O)[O-]'
    carboxylic_acid_group = [carboxylic_acid, carboxylate_anion]
    
    # Amino group (-NH2)
    amino_group = '[NX3H2]'
    
    # Hydroxyl group (-OH)
    hydroxyl_group = '[OX2H]'
    
    # Aromatic carboxylic acid group
    aromatic_carboxylic_acid = '[c][CX3](=O)[OX1H1]'
    
    # Nitro group attached to aromatic ring
    nitro_group_on_aromatic = '[c][NX3](=O)=O'
    
    # Halogen substituent on aromatic ring
    halogen_on_aromatic = '[c][F,Cl,Br,I]'
    
    # Amino group attached to aromatic ring (aniline type)
    aromatic_amino_group = '[c][NX3H2]'
    
    # Hydroxyl group attached to aromatic ring (phenol)
    phenol_group = '[c][OX2H]'
    
    # Thiol group (-SH)
    thiol_group = '[SX2H]'
    
    # Indole ring
    indole = 'c1cc2c(c1)[nH]cc2'
    
    # Bromomethyl group on aromatic ring
    bromomethyl_on_aromatic = '[c][CH2Br]'
    
    # N-Acetylated amino group
    n_acetylated_amino_group = '[NX3][CX3](=O)[CH3]'
    
    # Ketone group on aliphatic chain
    ketone_on_chain = '[#6][CX3](=O)[#6]'
    
    # Polyether chain ending with carboxylic acid
    polyether_chain = '[#6][OX2][#6][OX2][#6][CX3](=O)[OX1H1]'
    
    # Perfluoroalkyl carboxylic acid
    perfluoroalkyl_carboxylic_acid = '[CX4]([F,Cl,Br,I])[CX4]([F,Cl,Br,I])[CX3](=O)[OX1H1]'
    
    # Define the rules
    rules = [
        {
            'number': 1,
            'description': 'High Yield: Aliphatic carboxylic acids with chain lengths of five carbons or fewer and containing an amino group.',
            'patterns': [
                carboxylic_acid_group,
                amino_group
            ],
            'additional_checks': 'chain_length<=5',
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'High Yield: Aromatic carboxylic acids with carboxyl group directly attached to an aromatic ring, with coordinating substituents (amino, hydroxy, nitro) at ortho or para positions.',
            'patterns': [
                aromatic_carboxylic_acid,
                '[c][c](X)[c][c](Y)[c][c](Z)',  # Placeholder pattern
            ],
            'substituent_patterns': [
                amino_group,
                nitro_group_on_aromatic,
                phenol_group
            ],
            'positions': ['ortho', 'para'],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'High Yield: Modifiers containing sulfur groups (thiols) attached to short aliphatic chains.',
            'patterns': [
                carboxylic_acid_group,
                thiol_group
            ],
            'additional_checks': 'short_chain_with_thiol',
            'prediction': 1
        },
        {
            'number': 10,
            'description': 'Low Yield: Modifiers that are perfluoroalkyl carboxylic acids.',
            'patterns': [
                perfluoroalkyl_carboxylic_acid
            ],
            'prediction': -1
        },
        # Other rules would be added here similarly
    ]
    
    # Compile patterns
    for rule in rules:
        compiled_patterns = []
        for pat in rule.get('patterns', []):
            if isinstance(pat, list):
                compiled_group = [Chem.MolFromSmarts(p) for p in pat]
            else:
                compiled_group = Chem.MolFromSmarts(pat)
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile substituent patterns if any
        if 'substituent_patterns' in rule:
            rule['compiled_substituents'] = [Chem.MolFromSmarts(p) for p in rule['substituent_patterns']]
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # Molecule could not be parsed, append a row of zeros
            results.append([0] * len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check patterns
                for pat in rule['compiled_patterns']:
                    if isinstance(pat, list):
                        # Group of patterns, match if any match
                        group_match = False
                        for subpat in pat:
                            if mol.HasSubstructMatch(subpat):
                                group_match = True
                                break
                        if not group_match:
                            match = False
                            break
                    else:
                        if not mol.HasSubstructMatch(pat):
                            match = False
                            break
                if match:
                    # Additional checks for certain rules
                    if rule.get('additional_checks') == 'chain_length<=5':
                        # Implement chain length check between amino group and carboxylic acid
                        amino_atoms = mol.GetSubstructMatches(Chem.MolFromSmarts(amino_group))
                        carboxy_atoms = []
                        for pat in carboxylic_acid_group:
                            carboxy_atoms.extend(mol.GetSubstructMatches(Chem.MolFromSmarts(pat)))
                        shortest_chain_length = None
                        for amino in amino_atoms:
                            amino_atom_idx = amino[0]
                            for carboxy in carboxy_atoms:
                                carboxy_atom_idx = carboxy[0]
                                path = Chem.rdmolops.GetShortestPath(mol, amino_atom_idx, carboxy_atom_idx)
                                carbons_in_path = 0
                                for idx in path:
                                    atom = mol.GetAtomWithIdx(idx)
                                    if atom.GetAtomicNum() == 6:
                                        carbons_in_path += 1
                                if shortest_chain_length is None or carbons_in_path < shortest_chain_length:
                                    shortest_chain_length = carbons_in_path
                        if shortest_chain_length is not None and shortest_chain_length <= 5:
                            row.append(rule['prediction'])
                        else:
                            row.append(0)
                    elif rule.get('additional_checks') == 'short_chain_with_thiol':
                        # Check if thiol is on a short chain
                        thiol_matches = mol.GetSubstructMatches(Chem.MolFromSmarts(thiol_group))
                        carboxy_matches = []
                        for pat in carboxylic_acid_group:
                            carboxy_matches.extend(mol.GetSubstructMatches(Chem.MolFromSmarts(pat)))
                        short_chain = False
                        for thiol in thiol_matches:
                            thiol_atom_idx = thiol[0]
                            for carboxy in carboxy_matches:
                                carboxy_atom_idx = carboxy[0]
                                path = Chem.rdmolops.GetShortestPath(mol, thiol_atom_idx, carboxy_atom_idx)
                                if len(path) <= 7:  # Adjust length as needed
                                    short_chain = True
                                    break
                            if short_chain:
                                break
                        if short_chain:
                            row.append(rule['prediction'])
                        else:
                            row.append(0)
                    else:
                        row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                row.append(0)
        results.append(row)
    # Create DataFrame
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

1. **Rule 1**: **Modifiers that are amino acids with side chains capable of chelation (e.g., carboxylate, hydroxyl, indole groups) result in high yield; amino acids with non-coordinating side chains (e.g., phenyl groups) result in low yield.**
   - *Rationale*: Side chains with chelating groups enhance coordination with the metal center of the catalyst, improving its activity.
   - *High Yield Examples*:
     - **(2S)-2-aminopentanedioic acid** (Glutamic acid)
     - **(2S)-2-aminobutanedioic acid** (Aspartic acid)
     - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (Tryptophan)
   - *Low Yield Example*:
     - **(2S)-2-amino-3-phenylpropanoic acid** (Phenylalanine)

2. **Rule 2**: **Modifiers that are aromatic carboxylic acids with electron-withdrawing substituents (e.g., nitro, bromo, amino) at the para position result in high yield; those with electron-donating substituents (e.g., methyl) result in low yield.**
   - *Rationale*: Electron-withdrawing groups increase the acidity and coordination ability of the carboxylate group, enhancing interaction with the catalyst.
   - *High Yield Examples*:
     - **4-nitrobenzoic acid**
     - **4-(bromomethyl)benzoic acid**
     - **4-aminobenzoic acid**
   - *Low Yield Example*:
     - **4-methylbenzoic acid**

3. **Rule 3**: **Modifiers that are aliphatic carboxylic acids with coordinating functional groups (e.g., amino, hydroxy, thiol) on short aliphatic chains (five carbons or fewer) result in high yield; those with longer chains result in low yield due to steric hindrance.**
   - *Rationale*: Short chains with functional groups effectively coordinate with the catalyst; longer chains introduce steric bulk that hinders interaction.
   - *High Yield Examples*:
     - **5-aminopentanoic acid**
     - **3-sulfanylpropanoic acid**
     - **5-(4-hydroxyphenyl)pentanoic acid**
   - *Low Yield Examples*:
     - **7-aminoheptanoic acid**
     - **8-aminooctanoic acid**

4. **Rule 4**: **Modifiers with multiple hydroxyl groups on aliphatic chains result in high yield due to enhanced coordination and solubility; those with bulky protective groups result in low yield.**
   - *Rationale*: Multiple hydroxyl groups provide additional coordination sites and improve solubility, while bulky groups hinder interaction.
   - *High Yield Examples*:
     - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (Gluconic acid)
     - **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid**
   - *Low Yield Example*:
     - **(2S)-6-acetamido-2-aminohexanoic acid**

5. **Rule 5**: **Modifiers that are heteroaromatic carboxylic acids with nitrogen atoms capable of coordination (e.g., pyridine, pyrazole rings) result in high yield; those with additional aromatic rings or steric hindrance result in low yield.**
   - *Rationale*: Nitrogen atoms in heterocycles coordinate effectively with the catalyst unless steric factors interfere.
   - *High Yield Examples*:
     - **Pyridine-3-carboxylic acid** (Nicotinic acid)
     - **1H-pyrazole-4-carboxylic acid**
     - **2-oxo-1H-pyridine-4-carboxylic acid**
   - *Low Yield Example*:
     - **4-pyridin-4-ylbenzoic acid**

6. **Rule 6**: **Modifiers containing aldehyde or ketone groups directly attached to an aromatic ring result in low yield due to potential catalyst inhibition.**
   - *Rationale*: Aldehyde and ketone groups can bind strongly to the metal center, potentially deactivating the catalyst or leading to side reactions.
   - *Low Yield Examples*:
     - **4-formylbenzoic acid**
     - **5-formyl-2-hydroxybenzoic acid**
     - **4-oxoheptanedioic acid**

7. **Rule 7**: **Modifiers with perfluoroalkyl chains result in low yield due to strong electron-withdrawing effects and hydrophobicity interfering with catalyst coordination.**
   - *Rationale*: Perfluoroalkyl groups decrease the electron density and solubility, hindering effective interaction with the catalyst.
   - *Low Yield Example*:
     - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**

8. **Rule 8**: **Modifiers containing flexible bulky side chains, such as polyether chains or long aliphatic chains with polar end groups, result in low yield due to steric hindrance reducing coordination efficiency.**
   - *Rationale*: Bulky and flexible chains impede the modifier's ability to interact properly with the catalyst's active site.
   - *Low Yield Examples*:
     - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**
     - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**
     - **7-hydroxyheptanoic acid**

9. **Rule 9**: **Modifiers with thiol groups on short aliphatic chains result in high yield; those with thiol groups directly attached to an aromatic ring result in low yield due to potential catalyst poisoning.**
   - *Rationale*: Aliphatic thiols can coordinate effectively without deactivating the catalyst, whereas aromatic thiols may bind too strongly and inhibit catalytic activity.
   - *High Yield Example*:
     - **3-sulfanylpropanoic acid**
   - *Low Yield Example*:
     - **4-sulfanylbenzoic acid**

10. **Rule 10**: **Modifiers that are simple aliphatic carboxylic acids without additional functional groups result in high yield due to minimal steric hindrance and sufficient flexibility for coordination.**
    - *Rationale*: Simple structures allow easy access to the catalyst without interference.
    - *High Yield Example*:
      - **Octanoic acid**

11. **Rule 11**: **Modifiers with electron-rich aromatic rings connected via short aliphatic chains (four carbons or more) result in high yield; those with shorter chains or additional steric bulk result in low yield.**
    - *Rationale*: Optimal chain length positions the aromatic ring for effective coordination without steric hindrance.
    - *High Yield Example*:
      - **5-(4-hydroxyphenyl)pentanoic acid**
    - *Low Yield Example*:
      - **3-(4-hydroxyphenyl)propanoic acid**

12. **Rule 12**: **Modifiers containing multiple aromatic rings directly attached (e.g., biphenyl structures) result in low yield due to increased steric hindrance and reduced flexibility.**
    - *Rationale*: Multiple rings increase steric bulk, hindering the modifier's ability to coordinate with the catalyst.
    - *Low Yield Example*:
      - **4-pyridin-4-ylbenzoic acid**

**End of Rules**

---

These rules have been carefully crafted to reflect the relationships between the structural features of the molecular modifiers and the observed yields in the reaction. By focusing on combinations of functional groups and considering underlying physicochemical properties, the rules aim to:

- **Maximize Coverage**: Prioritize rules that apply to a broader range of the dataset.
- **Balance Complexity**: Maintain a suitable balance between simple rules with higher coverage and complex rules with lower coverage.
- **Enhance Predictive Power**: Ensure each rule clearly predicts whether the yield will be high or low for any modifier fitting its description.
- **Provide Clear Rationale**: Include underlying reasons based on chemical principles to explain why certain structural features influence the yield.

These rules can be used as guidelines for selecting or designing new modifiers to optimize the yield of the radical-mediated remote δ-C(sp³)–H bond functionalization reaction.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 1.1,Rule 2,Rule 2.1,Rule 3,Rule 3.1,Rule 4,Rule 4.1,Rule 5,Rule 5.1,Rule 6,Rule 7,Rule 9,Rule 9.1,Rule 10,Rule 12
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,1,0,0,0,0,0,0,0
0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6; Test Accuracy: 1.0
    Train Support: 0.11428571428571428; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 1.9444444444444446; Test Lift: NONE
    Train Leverage: 0.05551020408163266; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and features
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1]'
    
    # Amino acid backbone (simplified)
    amino_acid_backbone = '[NX3H2][CX4H]([#6])[CX3](=O)[OX1H0-,OX2H1]'
    
    # Chelating side chains: carboxylate, hydroxyl, indole groups
    chelating_groups = [
        '[CX3](=O)[OX1H0-,OX2H1]',  # Carboxylic acid
        '[OX2H]',  # Hydroxyl group
        'c1ccc2[cH][nH]c2c1'  # Indole group
    ]
    
    # Non-coordinating side chains: phenyl group
    phenyl_group = 'c1ccccc1'
    
    # Electron-withdrawing groups (EWGs)
    ewgs = [
        '[NX3](=O)=O',  # Nitro group
        '[Br]',  # Bromine
        '[NX3;H2,H1;!$(N-C=O)]'  # Amino group
    ]
    
    # Electron-donating groups (EDGs)
    edgs = [
        '[CH3]',  # Methyl group
        '[OX2H]',  # Hydroxyl group
        '[OX2][CH3]'  # Methoxy group
    ]
    
    # Aromatic carboxylic acid
    aromatic_carboxylic_acid = 'c1ccc([CX3](=O)[OX1H0-,OX2H1])cc1'
    
    # Heteroaromatic rings with nitrogen atoms
    heteroaromatic_nitrogen = [
        'n1ccccc1',  # Pyridine ring
        'c1cnc[nH]1',  # Pyrazole ring
        'O=c1ccncc1'  # 2-oxo-pyridine ring
    ]
    
    # Aldehyde or ketone groups attached to aromatic rings
    aromatic_aldehyde_ketone = '[#6][CX3](=O)[#6]'
    
    # Perfluoroalkyl chains
    perfluoroalkyl = 'C(F)(F)F'
    
    # Thiol groups attached to aliphatic and aromatic chains
    aliphatic_thiol = '[SX2H][CX4][CX4]'
    aromatic_thiol = '[SX2H][c]'
    
    # Short aliphatic chains (<=5 carbons)
    short_chain = '[CX4][CX4][CX4][CX4][CX4]'
    
    # Long aliphatic chains (>5 carbons)
    long_chain = '[CX4][CX4][CX4][CX4][CX4][CX4, CX4][*]'
    
    # Polyhydroxylated aliphatic chains
    polyhydroxy_chain = '[CX4;!$(C=O)]([OX2H])[CX4;!$(C=O)]([OX2H])[CX4;!$(C=O)]([OX2H])[CX4;!$(C=O)]([OX2H])[CX4;!$(C=O)]([OX2H])'
    
    # Bulky protective groups (acetamido)
    bulky_protective = 'C(=O)N'
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'High yield if amino acid with chelating side chains; low yield if amino acid with non-coordinating side chains.',
            'patterns': [
                [amino_acid_backbone],  # Amino acid backbone
                chelating_groups  # Chelating groups in side chain
            ],
            'exclude_patterns': [
                [phenyl_group]  # Non-coordinating phenyl side chain
            ],
            'prediction': 1
        },
        {
            'number': 1.1,
            'description': 'Low yield if amino acid with non-coordinating side chains.',
            'patterns': [
                [amino_acid_backbone],
                [phenyl_group]
            ],
            'prediction': -1
        },
        {
            'number': 2,
            'description': 'High yield if aromatic carboxylic acids with EWGs; low yield if with EDGs.',
            'patterns': [
                [aromatic_carboxylic_acid],
                ewgs
            ],
            'exclude_patterns': [
                edgs
            ],
            'prediction': 1
        },
        {
            'number': 2.1,
            'description': 'Low yield if aromatic carboxylic acids with EDGs.',
            'patterns': [
                [aromatic_carboxylic_acid],
                edgs
            ],
            'prediction': -1
        },
        {
            'number': 3,
            'description': 'High yield if aliphatic carboxylic acids with coordinating functional groups on short chains; low yield if on longer chains (>5 carbons).',
            'patterns': [
                [carboxylic_acid],
                ['[NX3;H2,H1][#6]', '[OX2H]', '[SX2H]'],  # Amino, hydroxyl, thiol groups
                [short_chain]
            ],
            'exclude_patterns': [
                [long_chain]
            ],
            'prediction': 1
        },
        {
            'number': 3.1,
            'description': 'Low yield if coordinating groups on long aliphatic chains.',
            'patterns': [
                [carboxylic_acid],
                ['[NX3;H2,H1][#6]', '[OX2H]', '[SX2H]'],
                [long_chain]
            ],
            'prediction': -1
        },
        {
            'number': 4,
            'description': 'High yield if modifiers with multiple hydroxyl groups on aliphatic chains; low yield if bulky protective groups present.',
            'patterns': [
                [polyhydroxy_chain]
            ],
            'exclude_patterns': [
                [bulky_protective]
            ],
            'prediction': 1
        },
        {
            'number': 4.1,
            'description': 'Low yield if bulky protective groups present.',
            'patterns': [
                [bulky_protective]
            ],
            'prediction': -1
        },
        {
            'number': 5,
            'description': 'High yield if heteroaromatic carboxylic acids with coordinating nitrogen atoms; low yield if additional aromatic rings or steric hindrance.',
            'patterns': [
                [aromatic_carboxylic_acid],
                heteroaromatic_nitrogen
            ],
            'prediction': 1
        },
        {
            'number': 5.1,
            'description': 'Low yield if additional aromatic rings or steric hindrance.',
            'patterns': [
                ['c1ccc(-c2ccccn2)cc1']  # Example pattern for additional aromatic ring
            ],
            'prediction': -1
        },
        {
            'number': 6,
            'description': 'Low yield if modifiers containing aldehyde or ketone groups directly attached to aromatic ring.',
            'patterns': [
                [aromatic_aldehyde_ketone]
            ],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Low yield if modifiers with perfluoroalkyl chains.',
            'patterns': [
                [perfluoroalkyl]
            ],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'High yield if thiol groups on short aliphatic chains; low yield if thiol groups attached to aromatic rings.',
            'patterns': [
                [aliphatic_thiol]
            ],
            'exclude_patterns': [
                [aromatic_thiol]
            ],
            'prediction': 1
        },
        {
            'number': 9.1,
            'description': 'Low yield if thiol groups attached to aromatic rings.',
            'patterns': [
                [aromatic_thiol]
            ],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'High yield if simple aliphatic carboxylic acids without additional functional groups.',
            'patterns': [
                [carboxylic_acid],
                [short_chain]
            ],
            'exclude_patterns': [
                ['[NX3]', '[OX2H]', '[SX2H]']  # Exclude other functional groups
            ],
            'prediction': 1
        },
        {
            'number': 12,
            'description': 'Low yield if modifiers containing multiple aromatic rings directly attached.',
            'patterns': [
                ['c1ccccc1c2ccccc2']  # Biphenyl structure
            ],
            'prediction': -1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(p) for p in group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for group in rule['exclude_patterns']:
                compiled_group = [Chem.MolFromSmarts(p) for p in group]
                compiled_excludes.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_excludes
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        matches = mol.GetSubstructMatches(pat)
                        if matches:
                            group_match = True
                            break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

1. **Rule 1**: **Modifiers that are amino acids with side chains containing heteroatoms capable of metal coordination (e.g., amino, carboxyl, hydroxyl, indole rings) result in high yield; those with hydrophobic or non-coordinating side chains result in low yield.**
   - *Rationale*: Side chains with heteroatoms can coordinate with the metal center, enhancing catalyst activity. Hydrophobic side chains lack these interactions, reducing effectiveness.
   - *High Yield Examples*:
     - **(2S)-2-aminobutanedioic acid** (Aspartic acid, Entry 2)
     - **(2S)-2-aminopentanedioic acid** (Glutamic acid, Entry 0)
     - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (Tryptophan, Entry 15)
   - *Low Yield Examples*:
     - **(2S)-2-amino-3-phenylpropanoic acid** (Phenylalanine, Entry 13)
     - **(2S)-6-acetamido-2-aminohexanoic acid** (Entry 33)

2. **Rule 2**: **Modifiers that are aromatic carboxylic acids with para-substituted electron-withdrawing groups (e.g., nitro, bromo) or coordinating groups (e.g., amino) result in high yield; those with electron-donating groups (e.g., methyl) or non-coordinating groups result in low yield.**
   - *Rationale*: Electron-withdrawing and coordinating groups enhance the acidity and coordination ability of the carboxylate, improving interaction with the catalyst. Electron-donating groups reduce these effects.
   - *High Yield Examples*:
     - **4-nitrobenzoic acid** (Entry 20)
     - **4-(bromomethyl)benzoic acid** (Entry 1)
     - **4-aminobenzoic acid** (Entry 4)
   - *Low Yield Examples*:
     - **4-methylbenzoic acid** (Entry 22)
     - **4-formylbenzoic acid** (Entry 19)

3. **Rule 3**: **Modifiers that are aliphatic carboxylic acids with coordinating functional groups (e.g., amino, hydroxyl, thiol) within four carbon atoms of the carboxyl group result in high yield; those where the functional group is further away result in low yield.**
   - *Rationale*: Close proximity of coordinating groups to the carboxyl enhances effective chelation with the metal center. Distant groups reduce coordination efficiency.
   - *High Yield Examples*:
     - **5-aminopentanoic acid** (Entry 3)
     - **3-sulfanylpropanoic acid** (Entry 17)
   - *Low Yield Examples*:
     - **7-aminoheptanoic acid** (Entry 31)
     - **8-aminooctanoic acid** (Entry 34)

4. **Rule 4**: **Modifiers that are heteroaromatic carboxylic acids containing nitrogen atoms capable of coordination (e.g., pyridine, pyrazole rings) result in high yield; those substituted with bulky groups or additional aromatic rings result in low yield due to steric hindrance.**
   - *Rationale*: Nitrogen atoms in heteroaromatics can coordinate with the metal center, enhancing catalyst activity. Bulky substituents hinder this interaction.
   - *High Yield Examples*:
     - **Pyridine-3-carboxylic acid** (Nicotinic acid, Entry 21)
     - **1H-pyrazole-4-carboxylic acid** (Entry 16)
     - **2-oxo-1H-pyridine-4-carboxylic acid** (Entry 8)
   - *Low Yield Example*:
     - **4-pyridin-4-ylbenzoic acid** (Entry 12)

5. **Rule 5**: **Modifiers with thiol groups in short aliphatic chains (up to four carbons) result in high yield; those with thiol groups directly attached to aromatic rings result in low yield due to potential catalyst poisoning.**
   - *Rationale*: Aliphatic thiols coordinate effectively without strongly deactivating the catalyst. Aromatic thiols may bind too tightly, inhibiting catalysis.
   - *High Yield Example*:
     - **3-sulfanylpropanoic acid** (Entry 17)
   - *Low Yield Example*:
     - **4-sulfanylbenzoic acid** (Entry 10)

6. **Rule 6**: **Modifiers that are aliphatic carboxylic acids with multiple hydroxyl groups adjacent to the carboxyl group result in high yield; those with hydroxyl groups further from the carboxyl or with protective groups result in low yield.**
   - *Rationale*: Adjacent hydroxyl groups increase coordination sites and solubility, enhancing catalyst interaction. Distant hydroxyls or protected hydroxyls are less effective.
   - *High Yield Example*:
     - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (Gluconic acid, Entry 9)
   - *Low Yield Examples*:
     - **7-hydroxyheptanoic acid** (Entry 29)
     - **(2S)-6-acetamido-2-aminohexanoic acid** (Entry 33)

7. **Rule 7**: **Modifiers featuring ether linkages in aliphatic chains result in low yield due to increased flexibility and reduced ability to coordinate effectively with the catalyst.**
   - *Rationale*: Ether linkages introduce flexibility, preventing proper alignment and reducing coordination efficiency.
   - *Low Yield Examples*:
     - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid** (Entry 11)
     - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid** (Entry 32)

8. **Rule 8**: **Modifiers containing bulky aromatic systems or multiple fused rings (e.g., biphenyls, indole) result in high yield if the functional groups allow coordination and steric hindrance is minimal; excessive bulk without coordinating benefits results in low yield.**
   - *Rationale*: Bulky systems can participate effectively if they enhance coordination. Without coordinating functionality, steric hindrance dominates, reducing yield.
   - *High Yield Example*:
     - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (Tryptophan, Entry 15)
   - *Low Yield Examples*:
     - **4-pyridin-4-ylbenzoic acid** (Entry 12)
     - **(2S)-2-amino-3-phenylpropanoic acid** (Phenylalanine, Entry 13)

9. **Rule 9**: **Modifiers with aldehyde or ketone groups adjacent to the aromatic ring or coordination site result in low yield due to potential catalyst deactivation or side reactions.**
   - *Rationale*: Aldehydes and ketones can bind irreversibly to the metal center or participate in unwanted reactions, inhibiting catalysis.
   - *Low Yield Examples*:
     - **4-formylbenzoic acid** (Entry 19)
     - **5-formyl-2-hydroxybenzoic acid** (Entry 18)
     - **4-oxoheptanedioic acid** (Entry 27)

10. **Rule 10**: **Modifiers containing perfluoroalkyl chains or strongly electron-withdrawing groups that significantly reduce electron density at coordinating sites result in low yield.**
    - *Rationale*: Strong electron-withdrawing groups diminish the ability of coordinating atoms to donate electron density to the metal center, weakening coordination.
    - *Low Yield Examples*:
      - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid** (Entry 14)
      - **4-[(2,2,2-trifluoroacetyl)amino]butanoic acid** (Entry 28)

11. **Rule 11**: **Modifiers that are simple aliphatic carboxylic acids without additional functional groups result in high yield up to a chain length of eight carbons; longer chains or those lacking coordinating groups result in low yield due to decreased solubility and coordination.**
    - *Rationale*: Medium-chain aliphatic acids maintain solubility and can interact with the catalyst. Longer chains become too hydrophobic, reducing effectiveness.
    - *High Yield Example*:
      - **Octanoic acid** (Entry 5)
    - *Low Yield Example*:
      - **No longer-chain acids present in the dataset for direct comparison**

12. **Rule 12**: **Modifiers with electron-rich aromatic rings connected via short aliphatic chains (three carbons or fewer) result in low yield due to suboptimal positioning for coordination; increasing the chain length to four or five carbons results in high yield by optimizing spatial arrangement.**
    - *Rationale*: Optimal chain length allows coordinating groups to interact effectively with the catalyst without steric hindrance.
    - *High Yield Example*:
      - **5-(4-hydroxyphenyl)pentanoic acid** (Entry 7)
    - *Low Yield Example*:
      - **3-(4-hydroxyphenyl)propanoic acid** (Entry 30)

**End of Rules**

---

These rules have been carefully developed to capture the relationships between molecular modifiers' structural features and their impact on the yield of the radical-mediated remote δ-C(sp³)–H bond functionalization reaction. The focus has been on:

- **Direct Combinations of Functional Groups**: Each rule examines how specific functional groups and their positions within the molecule influence the yield, often combining multiple features.

- **Underlying Physicochemical Properties**: Consideration of electronic effects, steric hindrance, coordination ability, and solubility that affect catalyst interaction and reaction efficiency.

- **Clear Predictions**: Each rule provides a definitive outcome (high or low yield) for any modifier that fits its description, facilitating straightforward application.

- **Maximizing Dataset Coverage**: The rules are designed to apply to as many entries in the dataset as possible, ensuring broad applicability and practicality.

- **Balanced Complexity**: A mix of general rules with wider coverage and more specific rules that address particular cases or exceptions, achieving a suitable balance.

By applying these rules, researchers can predict the effectiveness of existing modifiers and guide the design of new ones to optimize and control the yield of the target reaction. These insights are grounded in chemical principles and the observed data, making them reliable tools for advancing the research program.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12
0,0,1,0,0,0,-1,0,0,0,0,0
1,0,1,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0
1,0,1,0,0,0,0,0,0,0,0,0
1,0,1,0,0,0,0,0,0,0,0,0
1,0,1,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,1,0
1,0,1,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,-1
0,0,1,1,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0
0,0,1,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0
0,0,1,1,0,0,0,0,0,0,0,0
1,0,1,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,-1,0,0
1,0,1,0,0,0,0,0,0,0,0,0
0,0,1,1,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0
0,0,1,1,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0
0,0,1,1,0,0,0,0,0,0,0,-1
0,0,1,0,0,0,-1,0,0,0,0,0
1,0,1,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0
1,0,1,0,0,0,0,0,0,-1,0,0
0,0,1,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0
1,0,1,0,0,0,0,0,0,0,0,0
1,0,1,0,0,0,-1,0,0,0,0,0
1,0,1,0,0,0,0,0,0,0,0,0
1,0,1,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6285714285714286; Test Accuracy: 0.0
    Train Support: 0.16428571428571428; Test Support: 0.25
    Train Confidence: 0.5787878787878789; Test Confidence: 0.625
    Train Lift: 1.1630273321449793; Test Lift: NONE
    Train Leverage: 0.017755102040816328; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and substructures
    
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    
    # Amino group (-NH2)
    primary_amino = '[NX3H2]'
    secondary_amino = '[NX3H1][CX4]'
    
    # Hydroxyl group (-OH)
    hydroxyl_group = '[OX2H]'
    
    # Indole ring
    indole_ring = 'c1cc2c(c1)cc[nH]2'
    
    # Aromatic ring
    aromatic_ring = '[a]'
    
    # Electron-withdrawing groups (EWGs)
    nitro_group = '[NX3](=O)=O'
    halogen = '[F,Cl,Br,I]'
    bromo_group = '[Br]'
    amino_group = '[NX3H2,NX3H1][#6]'
    
    # Electron-donating groups (EDGs)
    methyl_group = '[CH3]'
    methoxy_group = '[OX2][CH3]'
    
    # Thiol group (-SH)
    thiol_group = '[SX2H]'
    
    # Ether linkage (-O-)
    ether_linkage = '[#6][OX2][#6]'
    
    # Pyridine ring
    pyridine_ring = 'n1ccccc1'
    
    # Pyrazole ring
    pyrazole_ring = 'n1nccc1'
    
    # Aldehyde group
    aldehyde_group = '[CX3H1](=O)'
    
    # Ketone group
    ketone_group = '[CX3](=O)[#6]'
    
    # Long aliphatic chain (chain of more than 8 carbons)
    long_chain = '[CH2]CCCCCCCC'
    
    # Exclude patterns
    
    # Bulky aromatic systems (e.g., biphenyls)
    bulky_aromatic = 'c1ccccc1c2ccccc2'
    
    # Protected hydroxyl groups (e.g., acetylated hydroxyl)
    protected_hydroxyl = '[OX2][CX3](=O)'
    
    # Disallowed aldehyde or ketone adjacent to aromatic ring
    aryl_aldehyde = '[#6][CX3H](=O)'  # Aldehyde adjacent to aromatic
    aryl_ketone = '[#6][CX3](=O)[#6]'  # Ketone adjacent to aromatic
    
    # Perfluoroalkyl chains
    perfluoro_alkyl = '[CX4]([F,Cl,Br,I])([F,Cl,Br,I])[F,Cl,Br,I]'
    
    # Aliphatic chain of four carbons
    short_aliphatic_chain = '[CH2][CH2][CH2][CH2]'
    
    # Define the rules
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are amino acids with side chains containing heteroatoms capable of metal coordination (e.g., amino, carboxyl, hydroxyl, indole rings) result in high yield; those with hydrophobic or non-coordinating side chains result in low yield.',
            'patterns': [
                [primary_amino, secondary_amino],  # Amino group
                [carboxylic_acid],  # Carboxylic acid group
                [hydroxyl_group, primary_amino, carboxylic_acid, indole_ring],  # Side chain with heteroatoms
            ],
            'prediction': 1,
            'alternative_prediction': -1
        },
        {
            'number': 2,
            'description': 'Modifiers that are aromatic carboxylic acids with para-substituted electron-withdrawing groups (e.g., nitro, bromo) or coordinating groups (e.g., amino) result in high yield; those with electron-donating groups (e.g., methyl) or non-coordinating groups result in low yield.',
            'patterns': [
                [aromatic_ring],  # Aromatic ring
                [carboxylic_acid],  # Carboxylic acid group
                [
                    '[c][CX3](=O)[OX2H1][c][c][c][c][c][NX3H2,NX3H1]',  # Para-substituted amino
                    '[c][CX3](=O)[OX2H1][c][c][c][c][c][NX3](=O)=O',  # Para-substituted nitro
                    '[c][CX3](=O)[OX2H1][c][c][c][c][c][Br]',  # Para-substituted bromo
                ],  # EWG at para position
            ],
            'prediction': 1,
            'alternative_prediction': -1
        },
        {
            'number': 3,
            'description': 'Modifiers that are aliphatic carboxylic acids with coordinating functional groups (e.g., amino, hydroxyl, thiol) within four carbon atoms of the carboxyl group result in high yield; those where the functional group is further away result in low yield.',
            'patterns': [
                [carboxylic_acid],  # Carboxylic acid group
                [
                    '[#6][#6][#6][#6][NX3H2]',  # Amino within 4 carbons
                    '[#6][#6][#6][OX2H]',  # Hydroxyl within 4 carbons
                    '[#6][#6][#6][SX2H]',  # Thiol within 4 carbons
                ],
            ],
            'prediction': 1,
            'alternative_prediction': -1
        },
        {
            'number': 4,
            'description': 'Modifiers that are heteroaromatic carboxylic acids containing nitrogen atoms capable of coordination (e.g., pyridine, pyrazole rings) result in high yield; those substituted with bulky groups or additional aromatic rings result in low yield due to steric hindrance.',
            'patterns': [
                [
                    'n1ccccc1',  # Pyridine ring
                    'n1nccc1',  # Pyrazole ring
                ],
                [carboxylic_acid],
            ],
            'prediction': 1,
            'alternative_patterns': [
                [bulky_aromatic],
            ],
            'alternative_prediction': -1
        },
        {
            'number': 5,
            'description': 'Modifiers with thiol groups in short aliphatic chains (up to four carbons) result in high yield; those with thiol groups directly attached to aromatic rings result in low yield due to potential catalyst poisoning.',
            'patterns': [
                [thiol_group],  # Thiol group
                [short_aliphatic_chain],  # Chain up to 4 carbons
                [carboxylic_acid],
            ],
            'prediction': 1,
            'alternative_patterns': [
                [thiol_group, aromatic_ring],  # Thiol attached to aromatic ring
            ],
            'alternative_prediction': -1
        },
        {
            'number': 6,
            'description': 'Modifiers that are aliphatic carboxylic acids with multiple hydroxyl groups adjacent to the carboxyl group result in high yield; those with hydroxyl groups further from the carboxyl or with protective groups result in low yield.',
            'patterns': [
                [carboxylic_acid],
                [hydroxyl_group],
            ],
            'count_threshold': {'[OX2H]': 2},  # At least 2 hydroxyl groups adjacent
            'prediction': 1,
            'alternative_patterns': [
                [protected_hydroxyl],  # Protected hydroxyl groups
            ],
            'alternative_prediction': -1
        },
        {
            'number': 7,
            'description': 'Modifiers featuring ether linkages in aliphatic chains result in low yield due to increased flexibility and reduced ability to coordinate effectively with the catalyst.',
            'patterns': [
                [ether_linkage],
            ],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Modifiers containing bulky aromatic systems or multiple fused rings (e.g., biphenyls, indole) result in high yield if the functional groups allow coordination and steric hindrance is minimal; excessive bulk without coordinating benefits results in low yield.',
            'patterns': [
                [indole_ring],
                [carboxylic_acid],
            ],
            'prediction': 1,
            'alternative_patterns': [
                [bulky_aromatic],
            ],
            'alternative_prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers with aldehyde or ketone groups adjacent to the aromatic ring or coordination site result in low yield due to potential catalyst deactivation or side reactions.',
            'patterns': [
                [aryl_aldehyde],
                [aryl_ketone],
            ],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers containing perfluoroalkyl chains or strongly electron-withdrawing groups that significantly reduce electron density at coordinating sites result in low yield.',
            'patterns': [
                [perfluoro_alkyl],
            ],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Modifiers that are simple aliphatic carboxylic acids without additional functional groups result in high yield up to a chain length of eight carbons; longer chains or those lacking coordinating groups result in low yield due to decreased solubility and coordination.',
            'patterns': [
                [carboxylic_acid],
                [
                    '[CH3][CH2][CH2][CH2][CH2][CH2][CH2][C](=O)[OH]',  # Octanoic acid
                ],
            ],
            'prediction': 1,
            'alternative_patterns': [
                [long_chain],  # Longer aliphatic chains
            ],
            'alternative_prediction': -1
        },
        {
            'number': 12,
            'description': 'Modifiers with electron-rich aromatic rings connected via short aliphatic chains (three carbons or fewer) result in low yield due to suboptimal positioning for coordination; increasing the chain length to four or five carbons results in high yield by optimizing spatial arrangement.',
            'patterns': [
                [aromatic_ring],
                [carboxylic_acid],
                [
                    '[CH2][CH2][CH2][c]',  # Chain of 3 carbons to aromatic ring
                ],
            ],
            'prediction': -1,
            'alternative_patterns': [
                [
                    '[CH2][CH2][CH2][CH2][c]',  # Chain of 4 carbons to aromatic ring
                    '[CH2][CH2][CH2][CH2][CH2][c]',  # Chain of 5 carbons to aromatic ring
                ],
            ],
            'alternative_prediction': 1
        },
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(pat) for pat in group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile alternative patterns if any
        if 'alternative_patterns' in rule:
            compiled_alternatives = []
            for group in rule['alternative_patterns']:
                compiled_group = [Chem.MolFromSmarts(pat) for pat in group]
                compiled_alternatives.append(compiled_group)
            rule['compiled_alternative_patterns'] = compiled_alternatives
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for group in rule['exclude_patterns']:
                compiled_group = [Chem.MolFromSmarts(pat) for pat in group]
                compiled_excludes.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_excludes
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        matches = mol.GetSubstructMatches(pat)
                        if matches:
                            # If a count threshold is specified for this pattern
                            if 'count_threshold' in rule and pat.GetSmarts() in rule['count_threshold']:
                                threshold = rule['count_threshold'][pat.GetSmarts()]
                                if len(matches) >= threshold:
                                    group_match = True
                                    break
                            else:
                                group_match = True
                                break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                    continue
                # Check alternative patterns if any
                if 'compiled_alternative_patterns' in rule:
                    alt_match = False
                    for compiled_group in rule['compiled_alternative_patterns']:
                        group_match = True
                        for pat in compiled_group:
                            if not mol.HasSubstructMatch(pat):
                                group_match = False
                                break
                        if group_match:
                            alt_match = True
                            break
                    if alt_match:
                        row.append(rule['alternative_prediction'])
                        continue
                # If no matches
                row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

1. **Rule 1**: **Modifiers that are amino acids or amino acid derivatives with side-chain coordinating groups (e.g., carboxyl, amino, hydroxyl, or heteroaromatic rings containing nitrogen or oxygen) within three carbon atoms from the alpha carbon result in **high yield**; those with hydrophobic or non-coordinating side chains result in **low yield**.**
   - *Rationale*: Coordinating side-chain groups enhance interactions with the metal center, improving catalyst activity.
   - *High Yield Examples*:
     - **(2S)-2-aminobutanedioic acid** (Aspartic acid, Entry 2)
     - **(2S)-2-aminopentanedioic acid** (Glutamic acid, Entry 0)
     - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (Tryptophan, Entry 15)
     - **5-aminopentanoic acid** (Entry 3)
   - *Low Yield Examples*:
     - **(2S)-2-amino-3-phenylpropanoic acid** (Phenylalanine, Entry 13)
     - **(2S)-6-acetamido-2-aminohexanoic acid** (Entry 33)
     - **7-aminoheptanoic acid** (Entry 31)
     - **8-aminooctanoic acid** (Entry 34)

2. **Rule 2**: **Modifiers that are aromatic carboxylic acids with para-substituted coordinating groups (e.g., amino, nitro) result in **high yield**; those with non-coordinating or electron-donating substituents (e.g., methyl) result in **low yield**.**
   - *Rationale*: Para-substituted coordinating groups enhance interaction with the catalyst through coordination.
   - *High Yield Examples*:
     - **4-aminobenzoic acid** (Entry 4)
     - **4-nitrobenzoic acid** (Entry 20)
   - *Low Yield Examples*:
     - **4-methylbenzoic acid** (Entry 22)
     - **4-formylbenzoic acid** (Entry 19)

3. **Rule 3**: **Modifiers that are heteroaromatic carboxylic acids containing nitrogen atoms capable of coordination (e.g., pyridine, pyrazole rings) result in **high yield**; those with additional aromatic rings or bulky substituents causing steric hindrance result in **low yield**.**
   - *Rationale*: Nitrogen atoms in heteroaromatic rings coordinate with the metal center, enhancing catalysis; steric hindrance reduces interaction.
   - *High Yield Examples*:
     - **Pyridine-3-carboxylic acid** (Nicotinic acid, Entry 21)
     - **1H-pyrazole-4-carboxylic acid** (Entry 16)
     - **2-oxo-1H-pyridine-4-carboxylic acid** (Entry 8)
   - *Low Yield Example*:
     - **4-pyridin-4-ylbenzoic acid** (Entry 12)

4. **Rule 4**: **Modifiers that are aliphatic carboxylic acids with coordinating functional groups (e.g., amino, thiol, hydroxyl) within three carbon atoms of the carboxyl group result in **high yield**; if the coordinating group is further away (more than four carbons), they result in **low yield**.**
   - *Rationale*: Close proximity of coordinating groups facilitates effective binding to the metal center.
   - *High Yield Examples*:
     - **3-sulfanylpropanoic acid** (Entry 17)
     - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (Gluconic acid, Entry 9)
   - *Low Yield Examples*:
     - **7-hydroxyheptanoic acid** (Entry 29)
     - **7-aminoheptanoic acid** (Entry 31)

5. **Rule 5**: **Modifiers containing electron-withdrawing groups that can coordinate (e.g., nitro, bromomethyl) result in **high yield**; those with electron-withdrawing groups that do not coordinate or potentially deactivate the catalyst (e.g., formyl, perfluoroalkyl) result in **low yield**.**
   - *Rationale*: Electron-withdrawing groups can enhance coordination unless they deactivate the catalyst or lack coordinating ability.
   - *High Yield Examples*:
     - **4-nitrobenzoic acid** (Entry 20)
     - **4-(bromomethyl)benzoic acid** (Entry 1)
   - *Low Yield Examples*:
     - **4-formylbenzoic acid** (Entry 19)
     - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid** (Entry 14)

6. **Rule 6**: **Modifiers with thiol or hydroxyl groups directly attached to short aliphatic chains (up to three carbons) result in **high yield**; when these groups are directly attached to an aromatic ring, they result in **low yield** due to potential catalyst poisoning or reduced coordination.**
   - *Rationale*: Aliphatic thiol or hydroxyl groups can coordinate effectively; aromatic counterparts may inhibit catalysis.
   - *High Yield Examples*:
     - **3-sulfanylpropanoic acid** (Entry 17)
     - **5-(4-hydroxyphenyl)pentanoic acid** (Entry 7)
   - *Low Yield Examples*:
     - **4-sulfanylbenzoic acid** (Entry 10)
     - **3-(4-hydroxyphenyl)propanoic acid** (Entry 30)

7. **Rule 7**: **Modifiers featuring ether linkages in aliphatic chains result in **low yield** due to increased flexibility and reduced effective coordination with the catalyst.**
   - *Rationale*: Flexible ether chains may not align properly for optimal catalyst interaction.
   - *Low Yield Examples*:
     - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid** (Entry 11)
     - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid** (Entry 32)

8. **Rule 8**: **Modifiers with aldehyde or ketone groups adjacent to the carboxyl group or aromatic ring result in **low yield** due to potential catalyst deactivation or side reactions with the catalyst.**
   - *Rationale*: Aldehyde and ketone groups can bind irreversibly to the metal center, inhibiting catalysis.
   - *Low Yield Examples*:
     - **4-formylbenzoic acid** (Entry 19)
     - **5-formyl-2-hydroxybenzoic acid** (Entry 18)
     - **4-oxoheptanedioic acid** (Entry 27)

9. **Rule 9**: **Simple aliphatic carboxylic acids up to eight carbons in length without additional functional groups result in **high yield**; longer chains or increased hydrophobicity may result in **low yield** due to decreased solubility and coordination efficiency.**
   - *Rationale*: Medium-length aliphatic acids maintain solubility and can interact effectively with the catalyst.
   - *High Yield Example*:
     - **Octanoic acid** (Entry 5)
   - *Low Yield Example*:
     - **No longer-chain acids present in the dataset for direct comparison**

10. **Rule 10**: **Modifiers that are amino acids or derivatives with sulfur-containing side chains (e.g., methionine derivatives) result in **low yield** due to possible catalyst poisoning or steric hindrance.**
    - *Rationale*: Sulfur-containing side chains may bind too strongly or hinder the catalyst, reducing its activity.
    - *Low Yield Example*:
      - **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid** (Entry 23)

**End of Rules**

---

These revised rules have been developed to closely align with the dataset and fulfill the specified requirements:

- **Direct Combinations of Functional Groups**: Each rule focuses on specific structural features and combinations of functional groups, such as coordinating groups within certain distances, types of substituents on aromatic rings, or the presence of flexible linkers.

- **Underlying Physicochemical Properties**: The rules are grounded in chemical principles, considering factors like coordination ability, steric hindrance, electronic effects, solubility, and potential catalyst interactions.

- **Clear Predictions**: Each rule clearly states whether modifiers fitting the description will lead to high or low yield, facilitating straightforward application to new structures.

- **Broad Dataset Coverage**: The rules are designed to collectively cover a wide range of the dataset entries, balancing specificity with applicability.

- **Balanced Complexity**: A mixture of simple rules with broad coverage (e.g., Rule 1 on amino acids) and more complex rules addressing specific cases (e.g., Rule 7 on ether linkages) ensures a comprehensive yet practical set of guidelines.

- **Refinement Based on Data**: Existing rules were refined to better match the dataset, correcting inconsistencies (e.g., re-examining entries like **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid**) and ensuring that exceptions are accounted for.

By applying these improved rules, researchers can more effectively predict and influence the yield of the radical-mediated remote δ-C(sp³)–H bond functionalization reaction. The rules serve as a valuable tool for guiding the selection and design of molecular modifiers based on their structural features and expected interactions with the catalyst system.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3
-1,-1,-1
-1,-1,-1
-1,-1,-1
-1,-1,-1
-1,-1,-1
-1,-1,-1
-1,-1,-1
-1,-1,-1
-1,-1,-1
-1,-1,-1
-1,-1,-1
-1,-1,-1
-1,-1,-1
-1,-1,-1
-1,-1,-1
-1,-1,-1
-1,-1,-1
-1,-1,-1
-1,-1,-1
-1,-1,-1
-1,-1,-1
-1,-1,-1
-1,-1,-1
-1,-1,-1
-1,-1,-1
-1,-1,-1
-1,-1,-1
-1,-1,-1
-1,-1,-1
-1,-1,-1
-1,-1,-1
-1,-1,-1
-1,-1,-1
-1,-1,-1
-1,-1,-1
-1,-1,-1

---------------------------------------------------------------


    Train Accuracy: 0.5142857142857142; Test Accuracy: 0.0
    Train Support: 0.5142857142857142; Test Support: 0.0
    Train Confidence: 0.5142857142857142; Test Confidence: 0.0
    Train Lift: 1.0; Test Lift: NONE
    Train Leverage: 0.0; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    from rdkit import Chem
    
    # Rule 1: Amino acids or derivatives with coordinating side-chain groups within three carbons of the alpha carbon
    # Coordinating groups: carboxyl (-COOH), amino (-NH2), hydroxyl (-OH), heteroaromatic rings containing N or O
    
    # Alpha amino acid pattern (simplified)
    alpha_amino_acid = Chem.MolFromSmarts('[NX3;H2][CX4;H][CX3](=O)[OX1H1]')
    
    # Coordinating groups patterns
    carboxyl_group = Chem.MolFromSmarts('[CX3](=O)[OX1H0]')
    amino_group = Chem.MolFromSmarts('[NX3;H2,H1]')
    hydroxyl_group = Chem.MolFromSmarts('[OX2H]')
    heteroaromatic_ring = Chem.MolFromSmarts('[a;!c;$(n),$(o)]')  # Heteroaromatic N or O
    
    # Rule 2: Aromatic carboxylic acids with para-substituted coordinating groups (amino, nitro)
    para_amino_benzoic_acid = Chem.MolFromSmarts('c1ccc(cc1)[CX3](=O)[OX1H]')  # Base structure
    para_amino = Chem.MolFromSmarts('c1ccc(N)cc1')
    para_nitro = Chem.MolFromSmarts('c1ccc([N+](=O)[O-])cc1')
    
    # Rule 3: Heteroaromatic carboxylic acids containing nitrogen atoms capable of coordination
    heteroaromatic_carboxylic_acid = Chem.MolFromSmarts('[n,o]1cccc1[CX3](=O)[OX1H]')
    
    # Rule 4: Aliphatic carboxylic acids with coordinating groups within three carbons of carboxyl group
    aliphatic_carboxylic_acid = Chem.MolFromSmarts('[CX3](=O)[OX1H]')
    
    # Rule 5: Electron-withdrawing coordinating groups (nitro, bromomethyl)
    nitro_group = Chem.MolFromSmarts('[NX3](=O)=O')
    bromomethyl_group = Chem.MolFromSmarts('[CH2][Br]')
    
    # Rule 6: Thiol or hydroxyl groups directly attached to short aliphatic chains (up to three carbons)
    short_aliphatic_thiol = Chem.MolFromSmarts('[CX4][CX4][SX2H]')
    short_aliphatic_hydroxyl = Chem.MolFromSmarts('[CX4][CX4][OX2H]')
    
    # Rule 7: Ether linkages in aliphatic chains
    ether_linkage = Chem.MolFromSmarts('[CX4][OX2][CX4]')
    
    # Rule 8: Aldehyde or ketone groups adjacent to carboxyl group or aromatic ring
    aldehyde_adjacent = Chem.MolFromSmarts('[CX3H1](=O)[#6]')
    ketone_adjacent = Chem.MolFromSmarts('[#6][CX3](=O)[#6]')
    
    # Rule 9: Simple aliphatic carboxylic acids up to eight carbons without additional functional groups
    simple_aliphatic_acid = Chem.MolFromSmarts('CCCCCCCC(=O)[OX1H]')
    
    # Rule 10: Amino acids or derivatives with sulfur-containing side chains
    sulfur_side_chain = Chem.MolFromSmarts('[#16][#6]')  # Sulfur attached to carbon (simplified)
    
    # Compile patterns into rules
    rules = [
        {
            'number': 1,
            'description': 'Rule 1: Amino acids or derivatives with coordinating side-chain groups within three carbons of the alpha carbon (High Yield).',
            'patterns': [
                {'name': 'alpha_amino_acid', 'pattern': alpha_amino_acid},
                {'name': 'coordinating_groups', 'patterns': [carboxyl_group, amino_group, hydroxyl_group, heteroaromatic_ring], 'within_bonds': 3}
            ],
            'prediction': 1,
            'else_prediction': -1
        },
        {
            'number': 2,
            'description': 'Rule 2: Aromatic carboxylic acids with para-substituted coordinating groups (High Yield); with non-coordinating substituents (Low Yield).',
            'patterns': [
                {'name': 'para_amino_nitro', 'patterns': [para_amino, para_nitro]},
                {'name': 'aromatic_carboxylic_acid', 'pattern': para_amino_benzoic_acid}
            ],
            'prediction': 1,
            'else_prediction': -1
        },
        {
            'number': 3,
            'description': 'Rule 3: Heteroaromatic carboxylic acids containing nitrogen atoms capable of coordination (High Yield).',
            'patterns': [
                {'name': 'heteroaromatic_carboxylic_acid', 'pattern': heteroaromatic_carboxylic_acid}
            ],
            'prediction': 1,
            'else_prediction': -1
        },
        # Additional rules can be added similarly...
    ]

    # Initialize results list
    results = []

    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If parsing fails, append zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = False
                # Check required patterns
                for pat in rule['patterns']:
                    if 'pattern' in pat:
                        # Single pattern
                        if not mol.HasSubstructMatch(pat['pattern']):
                            match = False
                            break
                        else:
                            match = True
                    elif 'patterns' in pat:
                        # Multiple patterns
                        sub_match = False
                        for sub_pat in pat['patterns']:
                            if mol.HasSubstructMatch(sub_pat):
                                sub_match = True
                                break
                        if not sub_match:
                            match = False
                            break
                        else:
                            match = True
                    if 'within_bonds' in pat and match:
                        # Check distance from alpha carbon
                        alpha_matches = mol.GetSubstructMatches(alpha_amino_acid)
                        if alpha_matches:
                            for alpha_match in alpha_matches:
                                alpha_c_idx = alpha_match[1]  # Index of alpha carbon
                                found = False
                                for atom in mol.GetAtoms():
                                    if atom.GetIdx() != alpha_c_idx:
                                        path_length = Chem.GetShortestPath(mol, alpha_c_idx, atom.GetIdx())
                                        if len(path_length)-1 <= pat['within_bonds']:
                                            for coord_pat in pat['patterns']:
                                                if mol.GetSubstructMatch(coord_pat):
                                                    found = True
                                                    break
                                        if found:
                                            break
                                if not found:
                                    match = False
                                    break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(rule.get('else_prediction', 0))
            except Exception as e:
                # On error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f"Rule {rule['number']}" for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

1. **Rule 1**: Modifiers that are **amino acids or amino acid derivatives** with side-chain **coordinating groups** (e.g., carboxyl, amino, hydroxyl) within **three carbons** from the alpha carbon result in **high yield**; those with **hydrophobic side chains** or side chains extending beyond **four carbons** result in **low yield**.
   - *Rationale*: Proximal coordinating groups enhance interaction with the metal center, improving catalyst activity; extended hydrophobic chains reduce solubility and hinder binding.
   - **High Yield Examples**:
     - **(2S)-2-aminopentanedioic acid** (Glutamic acid, Entry 0)
     - **(2S)-2-aminobutanedioic acid** (Aspartic acid, Entry 2)
     - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (Tryptophan, Entry 15)
   - **Low Yield Examples**:
     - **(2S)-2-amino-3-phenylpropanoic acid** (Phenylalanine, Entry 13)
     - **(2S)-6-acetamido-2-aminohexanoic acid** (Entry 33)
     - **8-aminooctanoic acid** (Entry 34)

2. **Rule 2**: Modifiers that are **aromatic carboxylic acids** with **para-substituted coordinating electron-withdrawing groups** (e.g., amino, nitro) result in **high yield**; those with **electron-donating groups** (e.g., methyl, methoxy) or non-coordinating substituents result in **low yield**.
   - *Rationale*: Electron-withdrawing and coordinating substituents enhance metal coordination; electron-donating groups decrease coordination efficiency.
   - **High Yield Examples**:
     - **4-aminobenzoic acid** (Entry 4)
     - **4-nitrobenzoic acid** (Entry 20)
   - **Low Yield Examples**:
     - **4-methylbenzoic acid** (Entry 22)
     - **4-formylbenzoic acid** (Entry 19)

3. **Rule 3**: Modifiers that are **aliphatic carboxylic acids** with **hydroxyl** or **thiol groups** within **three carbons** of the carboxyl group result in **high yield**; if such groups are further than **four carbons** away, they result in **low yield**.
   - *Rationale*: Close proximity of coordinating groups enables effective metal binding.
   - **High Yield Examples**:
     - **3-sulfanylpropanoic acid** (Entry 17)
     - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (Gluconic acid, Entry 9)
   - **Low Yield Examples**:
     - **7-hydroxyheptanoic acid** (Entry 29)

4. **Rule 4**: Modifiers containing **heteroaromatic rings** with **nitrogen atoms** capable of coordination (e.g., pyridine, pyrazole) result in **high yield**; those with **additional aromatic rings directly attached** (increasing steric hindrance) result in **low yield**.
   - *Rationale*: Nitrogen heterocycles coordinate effectively with metals; steric hindrance reduces accessibility to the metal center.
   - **High Yield Examples**:
     - **Pyridine-3-carboxylic acid** (Entry 21)
     - **1H-pyrazole-4-carboxylic acid** (Entry 16)
     - **2-oxo-1H-pyridine-4-carboxylic acid** (Entry 8)
   - **Low Yield Examples**:
     - **4-pyridin-4-ylbenzoic acid** (Entry 12)

5. **Rule 5**: Modifiers that are **aliphatic carboxylic acids** with **ether linkages** in the chain result in **low yield**.
   - *Rationale*: Ether linkages increase chain flexibility and reduce effective coordination with the catalyst.
   - **Low Yield Examples**:
     - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid** (Entry 11)
     - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid** (Entry 32)

6. **Rule 6**: Modifiers with **aldehyde** or **ketone groups** adjacent to the **carboxyl group** or **aromatic ring** result in **low yield** due to potential catalyst deactivation or side reactions.
   - *Rationale*: Carbonyl groups may bind irreversibly to the metal center, inhibiting catalysis.
   - **Low Yield Examples**:
     - **4-formylbenzoic acid** (Entry 19)
     - **5-formyl-2-hydroxybenzoic acid** (Entry 18)
     - **4-oxoheptanedioic acid** (Entry 27)

7. **Rule 7**: Modifiers that are **aromatic carboxylic acids linked by aliphatic chains** (three or more carbons) to additional **aromatic rings with coordinating substituents** result in **high yield**; those without such linkers result in **low yield**.
   - *Rationale*: Aliphatic linkers increase flexibility, allowing coordinating groups to interact effectively with the catalyst.
   - **High Yield Examples**:
     - **4-pyridin-4-ylbutanoic acid** (Entry 24)
     - **5-(4-hydroxyphenyl)pentanoic acid** (Entry 7)
   - **Low Yield Examples**:
     - **4-pyridin-4-ylbenzoic acid** (Entry 12)
     - **3-(4-hydroxyphenyl)propanoic acid** (Entry 30)

8. **Rule 8**: Modifiers that are **perfluorinated carboxylic acids** result in **low yield**.
   - *Rationale*: Perfluoroalkyl groups are highly electron-withdrawing and hydrophobic, reducing solubility and coordination efficiency.
   - **Low Yield Example**:
     - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid** (Entry 14)

9. **Rule 9**: Modifiers that are **simple aliphatic carboxylic acids** without additional functional groups and with chain lengths of **eight carbons or less** result in **high yield**.
   - *Rationale*: Adequate solubility and minimal steric hindrance facilitate interaction with the catalyst.
   - **High Yield Example**:
     - **Octanoic acid** (Entry 5)

10. **Rule 10**: Modifiers containing **sulfur in coordinating functional groups** (e.g., thiol) result in **high yield**, but those with sulfur in **non-coordinating groups** (e.g., thioether) result in **low yield**.
    - *Rationale*: Thiol groups can coordinate with the metal center; non-coordinating sulfur groups may interfere with catalysis.
    - **High Yield Example**:
      - **3-sulfanylpropanoic acid** (Entry 17)
    - **Low Yield Example**:
      - **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid** (Entry 23)

**End of Rules**

---

These rules have been meticulously crafted to align with the dataset and meet the specified requirements:

- **Direct Combinations of Functional Groups**: Each rule focuses on specific combinations of substructures, such as coordinating groups within certain distances, types of substituents, and the presence of specific linkers or substituents, enhancing predictive power.

- **Underlying Physicochemical Properties**: The rules are grounded in chemical principles, considering coordination ability, electronic effects, steric hindrance, and solubility, which influence the catalyst's performance.

- **Clear Predictions**: Each rule explicitly states whether modifiers fitting the description will result in high or low yield, facilitating straightforward application to new structures.

- **Broad Dataset Coverage**: The rules collectively cover a wide range of entries in the dataset, balancing specificity with applicability to ensure meaningful guidance.

- **Balanced Complexity**: A mix of simple rules with broad coverage and more complex rules addressing specific cases ensures a comprehensive yet practical set of guidelines.

By applying these rules, researchers can effectively predict and influence the yield of the radical-mediated remote δ-C(sp³)–H bond functionalization reaction. The rules serve as a valuable tool for guiding the selection and design of molecular modifiers based on their structural features and expected interactions with the catalyst system.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,1
0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,1
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1
0,0,0,1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6285714285714286; Test Accuracy: 0.0
    Train Support: 0.14285714285714285; Test Support: 0.0
    Train Confidence: 0.8333333333333334; Test Confidence: 0.5
    Train Lift: 1.715686274509804; Test Lift: NONE
    Train Leverage: 0.05959183673469387; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns and compile them
    carboxyl_group = Chem.MolFromSmarts('[CX3](=O)[O-]')
    carboxylic_acid = Chem.MolFromSmarts('[CX3](=O)[OX1H0]')
    amino_group = Chem.MolFromSmarts('[NX3;H2]')
    hydroxyl_group = Chem.MolFromSmarts('[OX2H]')
    thiol_group = Chem.MolFromSmarts('[SX2H]')
    thioether_group = Chem.MolFromSmarts('[SX2][#6]')
    ether_linkage = Chem.MolFromSmarts('[#6][OX2][#6]')
    aldehyde_group = Chem.MolFromSmarts('[CX3H1](=O)')
    ketone_group = Chem.MolFromSmarts('[#6][CX3](=O)[#6]')
    aromatic_ring = Chem.MolFromSmarts('a1aaaaa1')
    para_substituted_aromatic = Chem.MolFromSmarts('c1ccc([*:1])cc1')
    electron_withdrawing_groups = [
        Chem.MolFromSmarts('[NX3+](=O)[O-]'),  # Nitro group
        Chem.MolFromSmarts('[NX3][CX3](=O)[OX1]'),  # Amide group
        Chem.MolFromSmarts('[CX3](=O)[OX1H0]'),  # Carboxylic acid
        Chem.MolFromSmarts('[F,Cl,Br,I]'),  # Halogens
    ]
    electron_donating_groups = [
        Chem.MolFromSmarts('[OX2H]'),  # Hydroxyl group
        Chem.MolFromSmarts('[OX2][#6]'),  # Methoxy group
        Chem.MolFromSmarts('[NX3;H2,H1][#6]'),  # Amino group
        Chem.MolFromSmarts('[CX4H3]'),  # Methyl group
    ]
    perfluorinated_chain = Chem.MolFromSmarts('[CX4](F)(F)(F)')
    heteroaromatic_nitrogen = Chem.MolFromSmarts('[n]')
    additional_aromatic_ring = Chem.MolFromSmarts('c1ccc(cc1)-c2ccccc2')
    aliphatic_chain_five_or_more = Chem.MolFromSmarts('[CH2][CH2][CH2][CH2][CH2]')
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*10)
            continue
        row = [0]*10  # Initialize the row with zeros for 10 rules
        try:
            # Rule 1: Amino acids or amino acid derivatives with side-chain coordinating groups within three carbons from the alpha carbon result in high yield; those with hydrophobic side chains extending beyond four carbons result in low yield.
            rule1_high = False
            rule1_low = False
            # Identify alpha carbon: carbon attached to both amino group and carboxyl group
            matches = mol.GetSubstructMatches(Chem.MolFromSmarts('[NX3;H2][CHX4][CX3](=O)[OX1H0,-1]'))
            if matches:
                for match in matches:
                    alpha_c_idx = match[1]
                    alpha_c_atom = mol.GetAtomWithIdx(alpha_c_idx)
                    # Search for coordinating groups within 3 bonds from alpha carbon
                    coordinating_group_found = False
                    for neighbor in Chem.IterateNeighbors(mol, alpha_c_atom):
                        path = Chem.GetShortestPath(mol, alpha_c_idx, neighbor.GetIdx())
                        if len(path) > 3:
                            continue
                        neighbor_atom = neighbor
                        if neighbor_atom.HasSubstructMatch(carboxyl_group) or neighbor_atom.HasSubstructMatch(amino_group) or neighbor_atom.HasSubstructMatch(hydroxyl_group):
                            coordinating_group_found = True
                            break
                    if coordinating_group_found:
                        rule1_high = True
                        break
                    # Check for hydrophobic side chains extending beyond four carbons
                    for neighbor in Chem.IterateNeighbors(mol, alpha_c_atom):
                        if neighbor.GetAtomicNum() == 6 and not neighbor.IsInRing():
                            chain_length = 1
                            current_idx = neighbor.GetIdx()
                            visited = set([alpha_c_idx])
                            stack = [(current_idx, chain_length)]
                            while stack:
                                curr_idx, curr_length = stack.pop()
                                if curr_length > 4:
                                    rule1_low = True
                                    break
                                visited.add(curr_idx)
                                curr_atom = mol.GetAtomWithIdx(curr_idx)
                                for nbr in curr_atom.GetNeighbors():
                                    nbr_idx = nbr.GetIdx()
                                    if nbr_idx not in visited and nbr.GetAtomicNum() == 6 and not nbr.IsInRing():
                                        stack.append((nbr_idx, curr_length+1))
                            if rule1_low:
                                break
                if rule1_high:
                    row[0] = 1
                elif rule1_low:
                    row[0] = -1
        except Exception:
            row[0] = 0
        try:
            # Rule 2: Aromatic carboxylic acids with para-substituted coordinating electron-withdrawing groups result in high yield; those with electron-donating groups result in low yield.
            rule2_high = False
            rule2_low = False
            # Check for para-substituted aromatic carboxylic acid
            for match in mol.GetSubstructMatches(para_substituted_aromatic):
                substituent_atom = mol.GetAtomWithIdx(match[1])
                # Check for electron-withdrawing groups
                for ewg in electron_withdrawing_groups:
                    if substituent_atom.HasSubstructMatch(ewg):
                        rule2_high = True
                        break
                # Check for electron-donating groups
                for edg in electron_donating_groups:
                    if substituent_atom.HasSubstructMatch(edg):
                        rule2_low = True
                        break
                if rule2_high or rule2_low:
                    break
            if rule2_high:
                row[1] = 1
            elif rule2_low:
                row[1] = -1
        except Exception:
            row[1] = 0
        try:
            # Rule 3: Aliphatic carboxylic acids with hydroxyl or thiol groups within three carbons of the carboxyl group result in high yield; if such groups are further than four carbons away, they result in low yield.
            rule3_high = False
            rule3_low = False
            carboxylic_acid_atoms = mol.GetSubstructMatches(carboxylic_acid)
            if carboxylic_acid_atoms:
                for match in carboxylic_acid_atoms:
                    ca_idx = match[0]
                    ca_atom = mol.GetAtomWithIdx(ca_idx)
                    # Search for hydroxyl or thiol groups within 3 bonds
                    bfs = Chem.FindAtomEnvironmentOfRadiusN(mol, 3, ca_idx)
                    amap = {}
                    submol = Chem.PathToSubmol(mol, bfs, atomMap=amap)
                    for atom in submol.GetAtoms():
                        if atom.HasSubstructMatch(hydroxyl_group) or atom.HasSubstructMatch(thiol_group):
                            rule3_high = True
                            break
                    # Check if hydroxyl or thiol groups are further than 4 bonds away
                    if not rule3_high:
                        dfs_visited = set()
                        stack = [(ca_idx, 0)]
                        while stack:
                            current_idx, depth = stack.pop()
                            if depth > 4:
                                break
                            dfs_visited.add(current_idx)
                            current_atom = mol.GetAtomWithIdx(current_idx)
                            if current_atom.HasSubstructMatch(hydroxyl_group) or current_atom.HasSubstructMatch(thiol_group):
                                if depth <= 3:
                                    rule3_high = True
                                else:
                                    rule3_low = True
                                break
                            for neighbor in current_atom.GetNeighbors():
                                nbr_idx = neighbor.GetIdx()
                                if nbr_idx not in dfs_visited:
                                    stack.append((nbr_idx, depth+1))
                    if rule3_high or rule3_low:
                        break
            if rule3_high:
                row[2] = 1
            elif rule3_low:
                row[2] = -1
        except Exception:
            row[2] = 0
        try:
            # Rule 4: Modifiers containing heteroaromatic rings with nitrogen atoms capable of coordination result in high yield; those with additional aromatic rings directly attached result in low yield.
            rule4_high = False
            rule4_low = False
            if mol.HasSubstructMatch(heteroaromatic_nitrogen):
                rule4_high = True
                if mol.HasSubstructMatch(additional_aromatic_ring):
                    rule4_low = True
                    rule4_high = False
            if rule4_high:
                row[3] = 1
            elif rule4_low:
                row[3] = -1
        except Exception:
            row[3] = 0
        try:
            # Rule 5: Modifiers that are aliphatic carboxylic acids with ether linkages in the chain result in low yield.
            if mol.HasSubstructMatch(carboxylic_acid) and mol.HasSubstructMatch(ether_linkage):
                row[4] = -1
        except Exception:
            row[4] = 0
        try:
            # Rule 6: Modifiers with aldehyde or ketone groups adjacent to the carboxyl group or aromatic ring result in low yield.
            if mol.HasSubstructMatch(aliphatic_chain_five_or_more) and (mol.HasSubstructMatch(aldehyde_group) or mol.HasSubstructMatch(ketone_group)):
                row[5] = -1
        except Exception:
            row[5] = 0
        try:
            # Rule 7: Aromatic carboxylic acids linked by aliphatic chains (three or more carbons) to additional aromatic rings with coordinating substituents result in high yield; those without such linkers result in low yield.
            rule7_high = False
            rule7_low = False
            if mol.HasSubstructMatch(aromatic_ring) and mol.HasSubstructMatch(carboxylic_acid):
                # Check for aliphatic chain linker of three or more carbons to another aromatic ring with coordinating substituents
                linker = Chem.MolFromSmarts('c1aaaaa1CCCc2aaaaa2')
                if mol.HasSubstructMatch(linker):
                    rule7_high = True
                else:
                    rule7_low = True
            if rule7_high:
                row[6] = 1
            elif rule7_low:
                row[6] = -1
        except Exception:
            row[6] = 0
        try:
            # Rule 8: Modifiers that are perfluorinated carboxylic acids result in low yield.
            if mol.HasSubstructMatch(perfluorinated_chain) and mol.HasSubstructMatch(carboxylic_acid):
                row[7] = -1
        except Exception:
            row[7] = 0
        try:
            # Rule 9: Modifiers that are simple aliphatic carboxylic acids without additional functional groups and with chain lengths of eight carbons or less result in high yield.
            rule9_high = False
            aliphatic_chain = Chem.MolFromSmarts('[CX4H2][CX4H2][CX4H2][CX4H2][CX4H2][CX4H2][CX4H2][CX4H2][CX3](=O)[OX1H0]')
            if mol.HasSubstructMatch(aliphatic_chain):
                num_atoms = mol.GetNumAtoms()
                if num_atoms <= 50:  # Adjust maximum number of atoms as needed
                    rule9_high = True
            if rule9_high:
                row[8] = 1
        except Exception:
            row[8] = 0
        try:
            # Rule 10: Modifiers containing sulfur in coordinating functional groups (e.g., thiol) result in high yield, but those with sulfur in non-coordinating groups (e.g., thioether) result in low yield.
            if mol.HasSubstructMatch(thiol_group):
                row[9] = 1
            elif mol.HasSubstructMatch(thioether_group):
                row[9] = -1
        except Exception:
            row[9] = 0
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {i+1}' for i in range(10)])
    return df

--------------------------------------------------