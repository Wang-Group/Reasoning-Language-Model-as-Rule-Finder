def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    patterns = {}
    
    # Common SMARTS patterns
    patterns['carboxylic_acid'] = '[CX3](=O)[OX2H1]'
    patterns['primary_amine'] = '[NX3;H2][#6]'
    patterns['secondary_amine'] = '[NX3;H1][#6][#6]'
    patterns['amide'] = '[CX3](=O)[NX3H1,H0]'
    patterns['ether'] = '[#6][OX2][#6]'
    patterns['thiol'] = '[#16X2H]'  # -SH group
    patterns['aliphatic_chain'] = '[C;X4H2][C;X4H2][C;X4H2][C;X4H2][C;X4H2]'
    patterns['long_aliphatic_chain'] = '[C;X4H2][C;X4H2][C;X4H2][C;X4H2][C;X4H2][C;X4H2]'  # 6 or more carbons
    patterns['aromatic_ring'] = '[a]'
    patterns['para_substituted_benzoic_acid'] = 'c1ccc(cc1)C(=O)O'
    patterns['para_amino_group'] = 'c1ccc(N)cc1'
    patterns['para_hydroxy_group'] = 'c1ccc(O)cc1'
    patterns['para_methyl_group'] = 'c1ccc(C)cc1'
    patterns['para_nitro_group'] = 'c1ccc([N+](=O)[O-])cc1'
    patterns['pyridine_carboxylic_acid'] = 'n1cccc1C(=O)O'
    patterns['pyrazole_carboxylic_acid'] = 'n1nccc1C(=O)O'
    patterns['thiol_aliphatic_chain'] = '[#16X2H][C;X4H2][C;X4H2][C;X4H2][C;X4H2]'
    patterns['ether_linkage_aliphatic'] = '[C;X4][OX2][C;X4]'
    patterns['amide_bond'] = '[CX3](=O)[NX3][C]'
    patterns['perfluoroalkyl'] = '[CX4](F)(F)F'
    patterns['trifluoroacetyl'] = 'CC(=O)C(F)(F)F'
    patterns['ketone_adjacent_carboxylic'] = '[CX3](=O)[CX3](=O)'
    patterns['aldehyde_adjacent_carboxylic'] = '[CX3H1](=O)[CX3](=O)'
    patterns['multiple_hydroxyl'] = '[OX2H][CX4][OX2H]'
    patterns['heteroaromatic_para_substituent'] = 'c1ccc([a])cc1'
    patterns['phenolic_propanoic_acid'] = 'OCc1ccc(CC(=O)O)cc1'
    patterns['bulky_hydrophobic_side_chain'] = '[CX3](C)[CX3](C)[CX3](C)'
    
    # Compile the patterns
    compiled_patterns = {}
    for key, smarts in patterns.items():
        compiled_patterns[key] = Chem.MolFromSmarts(smarts)
    
    # Define the rules
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are amino acids with an additional carboxylic acid group (amino dicarboxylic acids) result in high yield.',
            'smarts': [patterns['carboxylic_acid'], patterns['primary_amine'], patterns['carboxylic_acid']],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers with a carboxylic acid group and a primary amino group located on a short aliphatic chain of five carbons or fewer result in high yield. Similar amino acids with longer aliphatic chains (more than five carbons) result in low yield.',
            'smarts': [patterns['carboxylic_acid'], patterns['primary_amine'], patterns['aliphatic_chain']],
            'exclude_smarts': [patterns['long_aliphatic_chain']],
            'prediction': 1,
            'inverse_prediction': -1
        },
        {
            'number': 3,
            'description': 'Modifiers that are para-substituted aromatic carboxylic acids with electron-donating coordinating groups such as amino (-NH2) or hydroxy (-OH) groups at the para position result in high yield. Substituents that are non-coordinating groups result in low yield.',
            'smarts': [patterns['para_substituted_benzoic_acid'], [patterns['para_amino_group'], patterns['para_hydroxy_group']]],
            'exclude_smarts': [patterns['para_methyl_group']],
            'prediction': 1,
            'inverse_prediction': -1
        },
        {
            'number': 4,
            'description': 'Modifiers that are para-substituted aromatic carboxylic acids with electron-withdrawing groups such as nitro (-NO2) at the para position result in high yield.',
            'smarts': [patterns['para_substituted_benzoic_acid'], patterns['para_nitro_group']],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers that are heterocyclic carboxylic acids containing nitrogen heteroatoms adjacent to the carboxyl group result in high yield.',
            'smarts': [[patterns['pyridine_carboxylic_acid'], patterns['pyrazole_carboxylic_acid']]],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers containing both a carboxylic acid group and a thiol (-SH) group on a short aliphatic chain (three carbons or fewer) result in high yield.',
            'smarts': [patterns['carboxylic_acid'], patterns['thiol_aliphatic_chain']],
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'Modifiers that are long-chain aliphatic carboxylic acids without additional functional groups result in high yield.',
            'smarts': [patterns['carboxylic_acid'], patterns['long_aliphatic_chain']],
            'exclude_smarts': [patterns['primary_amine'], patterns['secondary_amine'], patterns['amide'], patterns['thiol'], patterns['ether']],
            'prediction': 1
        },
        {
            'number': 8,
            'description': 'Modifiers containing ether linkages, especially polyether chains extending from the carboxylic acid, result in low yield.',
            'smarts': [patterns['carboxylic_acid'], patterns['ether_linkage_aliphatic']],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers with amide bonds linking functional groups or amino acids (containing amide linkages) result in low yield.',
            'smarts': [patterns['carboxylic_acid'], patterns['amide_bond']],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers containing highly electron-withdrawing groups attached to the carboxylic acid, such as perfluoroalkyl or trifluoroacetyl groups result in low yield.',
            'smarts': [patterns['carboxylic_acid'], [patterns['perfluoroalkyl'], patterns['trifluoroacetyl']]],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Modifiers with additional carbonyl groups (ketone or aldehyde) adjacent to the carboxylic acid group result in low yield.',
            'smarts': [patterns['carboxylic_acid'], [patterns['ketone_adjacent_carboxylic'], patterns['aldehyde_adjacent_carboxylic']]],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'Modifiers with multiple hydroxyl (-OH) groups along with a carboxylic acid group on an aliphatic chain result in high yield.',
            'smarts': [patterns['carboxylic_acid'], patterns['multiple_hydroxyl']],
            'prediction': 1
        },
        {
            'number': 13,
            'description': 'Modifiers that are aromatic carboxylic acids with heteroaromatic substituents at the para position result in low yield.',
            'smarts': [patterns['para_substituted_benzoic_acid'], patterns['heteroaromatic_para_substituent']],
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'Modifiers with phenolic groups attached to a propanoic acid chain result in low yield.',
            'smarts': [patterns['carboxylic_acid'], patterns['phenolic_propanoic_acid']],
            'prediction': -1
        },
        {
            'number': 15,
            'description': 'Modifiers that are amino acids with bulky hydrophobic side chains (aromatic rings) result in low yield.',
            'smarts': [patterns['carboxylic_acid'], patterns['bulky_hydrophobic_side_chain']],
            'prediction': -1
        }
    ]
    
    # Initialize the result list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_smarts' in rule:
                    for ex_smarts in rule['exclude_smarts']:
                        ex_pattern = compiled_patterns[ex_smarts]
                        if mol.HasSubstructMatch(ex_pattern):
                            match = False
                            break
                    if not match:
                        if 'inverse_prediction' in rule:
                            row.append(rule['inverse_prediction'])
                        else:
                            row.append(0)
                        continue
                # Check required patterns
                for smarts in rule['smarts']:
                    if isinstance(smarts, list):
                        sub_match = False
                        for s in smarts:
                            pattern = compiled_patterns[s]
                            if mol.HasSubstructMatch(pattern):
                                sub_match = True
                                break
                        if not sub_match:
                            match = False
                            break
                    else:
                        pattern = compiled_patterns[smarts]
                        if not mol.HasSubstructMatch(pattern):
                            match = False
                            break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df
