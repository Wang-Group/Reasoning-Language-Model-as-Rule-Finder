def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups used in rules
    
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    
    # Amino group (-NH2)
    primary_amino = '[NX3H2]'
    secondary_amino = '[NX3H1][CX4]'
    
    # Aliphatic chain (non-aromatic carbons)
    aliphatic_chain = '[C;X4]'
    
    # Aromatic ring with carboxylic acid
    aromatic_carboxylic_acid = '[c][CX3](=O)[OX2H1]'
    
    # Electron-donating groups (EDG) at para position on aromatic ring
    edg_para = '[cH]-[c](:[cH]):[c]([OX2H,NX3H2,OX2][CX4H3])-[cH]:[cH]-[CX3](=O)[OX2H1]'
    
    # Electron-withdrawing groups (EWG) at para position on aromatic ring
    ewg_para = '[cH]-[c](:[cH]):[c]([CX3](=O)[H],C(F)(F)F,C=O)-[cH]:[cH]-[CX3](=O)[OX2H1]'
    
    # Nitrogenous heterocycles directly attached to carboxylic acid
    nitrogen_heterocycle_acid = '[n,c][n,c][C](=O)[OX2H1]'
    
    # Nitrogenous heterocycles indirectly attached to carboxylic acid
    nitrogen_heterocycle = '[n,c][n,c]'
    benzene_carboxylic_acid = 'c1ccccc1C(=O)[OX2H1]'
    
    # Long-chain aliphatic carboxylic acids (6 or more carbons)
    long_chain_acid = '[CH3][CH2][CH2][CH2][CH2][CH2][CX3](=O)[OX2H1]'
    
    # Polar groups (hydroxyl, amino)
    hydroxyl_group = '[OX2H]'
    amino_group = '[NX3H2,NX3H1]'
    
    # Modifiers with multiple hydroxyl groups adjacent to carboxyl group
    adjacent_hydroxyls = '[CX4](O)(O)[CX3](=O)[OX2H1]'
    
    # Thiol group on short aliphatic chain
    thiol_aliphatic = '[CH3][CH2][SX2H]'
    # Thiol group on aromatic ring
    thiol_aromatic = 'c[SX2H]'
    
    # Bulky, electron-rich aromatic systems with electron-donating substituents
    electron_rich_aromatic = '[c][c]([OX2H,NX3H2,OC])[c][c][c][CX3](=O)[OX2H1]'
    # Bulky aromatic without electron-donating substituents
    bulky_aromatic = 'c1ccccc1C(=O)[OX2H1]'
    
    # Flexible ether chains resembling PEG with terminal carboxyl groups
    peg_chain = '[OX2][CX4][CX4][OX2][CX4][CX4][OX2][CX3](=O)[OX2H1]'
    
    # Perfluorinated alkyl chains
    perfluoro_alkyl = '[CX4](F)(F)(F)[CX2][CX3](=O)[OX2H1]'
    
    # Aldehyde groups on aromatic rings
    aldehyde_aromatic = 'c1ccc(C=O)cc1'
    
    # N-acetylated amino acids or peptides
    n_acetylated_amino_acid = '[NX3][CX3](=O)[CX3](C)[CX3](=O)[OX2H1]'
    
    # Ketone groups adjacent to carboxyl group
    ketone_adjacent_carboxyl = '[CX3](=O)[CX3](=O)[OX2H1]'
    
    # Strong electron-withdrawing groups
    trifluoroacetyl = '[CX3](=O)C(F)(F)F'
    nitro_group = '[NX3](=O)=O'
    
    # Hydrophobic aromatic side chains on aliphatic backbones
    hydrophobic_aromatic_sidechain = '[CX4][CX4][c]'
    extended_chain = '[CX4][CX4][CX4][CX4][CX4]'
    
    # Halomethyl groups on aromatic rings
    halomethyl_aromatic = 'c[CH2][Br,I,F,Cl]'
    
    # Compile SMARTS patterns
    patterns = {
        'carboxylic_acid': Chem.MolFromSmarts(carboxylic_acid),
        'primary_amino': Chem.MolFromSmarts(primary_amino),
        'aromatic_carboxylic_acid': Chem.MolFromSmarts(aromatic_carboxylic_acid),
        'edg_para': Chem.MolFromSmarts(edg_para),
        'ewg_para': Chem.MolFromSmarts(ewg_para),
        'nitrogen_heterocycle_acid': Chem.MolFromSmarts(nitrogen_heterocycle_acid),
        'nitrogen_heterocycle': Chem.MolFromSmarts(nitrogen_heterocycle),
        'benzene_carboxylic_acid': Chem.MolFromSmarts(benzene_carboxylic_acid),
        'long_chain_acid': Chem.MolFromSmarts(long_chain_acid),
        'hydroxyl_group': Chem.MolFromSmarts(hydroxyl_group),
        'adjacent_hydroxyls': Chem.MolFromSmarts(adjacent_hydroxyls),
        'thiol_aliphatic': Chem.MolFromSmarts(thiol_aliphatic),
        'thiol_aromatic': Chem.MolFromSmarts(thiol_aromatic),
        'electron_rich_aromatic': Chem.MolFromSmarts(electron_rich_aromatic),
        'bulky_aromatic': Chem.MolFromSmarts(bulky_aromatic),
        'peg_chain': Chem.MolFromSmarts(peg_chain),
        'perfluoro_alkyl': Chem.MolFromSmarts(perfluoro_alkyl),
        'aldehyde_aromatic': Chem.MolFromSmarts(aldehyde_aromatic),
        'n_acetylated_amino_acid': Chem.MolFromSmarts(n_acetylated_amino_acid),
        'ketone_adjacent_carboxyl': Chem.MolFromSmarts(ketone_adjacent_carboxyl),
        'trifluoroacetyl': Chem.MolFromSmarts(trifluoroacetyl),
        'nitro_group': Chem.MolFromSmarts(nitro_group),
        'hydrophobic_aromatic_sidechain': Chem.MolFromSmarts(hydrophobic_aromatic_sidechain),
        'extended_chain': Chem.MolFromSmarts(extended_chain),
        'halomethyl_aromatic': Chem.MolFromSmarts(halomethyl_aromatic)
    }
    
    # Define the rules
    rules = [
        {
            'number': 1,
            'description': 'Short-chain aliphatic amino acids (2 to 5 carbon backbone) containing both amino and carboxyl groups result in high yield.',
            'patterns': ['primary_amino', 'carboxylic_acid'],
            'carbon_range': (2,5),
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Aromatic carboxylic acids with electron-donating groups at the para position lead to high yield.',
            'patterns': ['aromatic_carboxylic_acid', 'edg_para'],
            'prediction': 1
        },
        {
            'number': 2.1,
            'description': 'Aromatic carboxylic acids with electron-withdrawing groups at the para position result in low yield.',
            'patterns': ['aromatic_carboxylic_acid', 'ewg_para'],
            'prediction': -1
        },
        {
            'number': 3,
            'description': 'Modifiers containing nitrogenous heterocycles directly attached to the carboxylic acid group result in high yield.',
            'patterns': ['nitrogen_heterocycle_acid'],
            'prediction': 1
        },
        {
            'number': 3.1,
            'description': 'Nitrogenous heterocycles indirectly attached to the carboxylic acid group result in low yield.',
            'patterns': ['nitrogen_heterocycle', 'benzene_carboxylic_acid'],
            'prediction': -1
        },
        {
            'number': 4,
            'description': 'Long-chain aliphatic carboxylic acids (6 or more carbons) without polar functional groups result in high yield.',
            'patterns': ['long_chain_acid'],
            'exclude_patterns': ['hydroxyl_group', 'amino_group'],
            'prediction': 1
        },
        {
            'number': 4.1,
            'description': 'Introducing polar groups onto the chain decreases the yield.',
            'patterns': ['long_chain_acid', 'hydroxyl_group'],
            'prediction': -1
        },
        {
            'number': 5,
            'description': 'Modifiers with multiple hydroxyl groups adjacent to the carboxyl group result in high yield.',
            'patterns': ['adjacent_hydroxyls'],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers with thiol groups on short aliphatic chains yield high results.',
            'patterns': ['thiol_aliphatic'],
            'prediction': 1
        },
        {
            'number': 6.1,
            'description': 'Thiol groups on aromatic rings lead to low yield.',
            'patterns': ['thiol_aromatic'],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Modifiers containing bulky, electron-rich aromatic systems directly attached to the carboxylic acid enhance yield when they have electron-donating substituents.',
            'patterns': ['electron_rich_aromatic'],
            'prediction': 1
        },
        {
            'number': 7.1,
            'description': 'Absence of electron-donating substituents results in low yield.',
            'patterns': ['bulky_aromatic'],
            'exclude_patterns': ['electron_rich_aromatic'],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Modifiers with flexible ether chains resembling PEG and terminal carboxyl groups result in low yield.',
            'patterns': ['peg_chain'],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers with perfluorinated alkyl chains result in low yield.',
            'patterns': ['perfluoro_alkyl'],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers containing aldehyde groups on aromatic rings result in low yield.',
            'patterns': ['aldehyde_aromatic'],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Modifiers that are N-acetylated amino acids or peptides result in low yield.',
            'patterns': ['n_acetylated_amino_acid'],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'Modifiers with ketone groups adjacent to the carboxyl group result in low yield.',
            'patterns': ['ketone_adjacent_carboxyl'],
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Modifiers with strong electron-withdrawing groups result in low yield.',
            'patterns': ['trifluoroacetyl', 'nitro_group'],
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'Modifiers with hydrophobic aromatic side chains on aliphatic backbones result in low yield unless they contain electron-donating substituents or extended chains.',
            'patterns': ['hydrophobic_aromatic_sidechain'],
            'exclude_patterns': ['electron_rich_aromatic', 'extended_chain'],
            'prediction': -1
        },
        {
            'number': 14.1,
            'description': 'Hydrophobic aromatic side chains with electron-donating substituents or extended chains result in high yield.',
            'patterns': ['hydrophobic_aromatic_sidechain', 'electron_rich_aromatic'],
            'prediction': 1
        },
        {
            'number': 15,
            'description': 'Modifiers containing halomethyl groups on aromatic rings result in high yield.',
            'patterns': ['halomethyl_aromatic'],
            'prediction': 1
        }
    ]
    
    # Process each SMILES
    results = []
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for pat_name in rule['exclude_patterns']:
                        pat = patterns[pat_name]
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for pat_name in rule['patterns']:
                    pat = patterns[pat_name]
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                # Check any additional conditions
                if match:
                    # Check for carbon count for Rule 1 and 4
                    if 'carbon_range' in rule:
                        num_carbons = sum(1 for atom in mol.GetAtoms() if atom.GetAtomicNum() == 6)
                        min_carbons, max_carbons = rule['carbon_range']
                        if not (min_carbons <= num_carbons <= max_carbons):
                            match = False
                    # Other conditions can be added here
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df
