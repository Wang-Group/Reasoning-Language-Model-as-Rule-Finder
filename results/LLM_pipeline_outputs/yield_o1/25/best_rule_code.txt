def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and structural features
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1]'
    
    # Amino acid backbone (alpha amino acid: N-C-C(=O)OH)
    amino_acid_backbone = '[NX3;H2][CX4][CX3](=O)[OX1H0-,OX2H1]'
    
    # Amino group (-NH2 or -NH-)
    amino_group = '[NX3;H2,H1]'
    
    # Aromatic ring
    aromatic_ring = '[a]'
    
    # Aromatic carboxylic acid
    aromatic_carboxylic_acid = '[c][CX3](=O)[OX1H0-,OX2H1]'
    
    # Para-substituted coordinating groups on aromatic ring
    para_coord_substituents = {
        'amino': 'c1ccc([NX3;H2,H1])cc1',
        'nitro': 'c1ccc([NX3](=O)=O)cc1',
        'bromomethyl': 'c1ccc(CBr)cc1'
    }
    
    # Non-coordinating or electron-withdrawing substituents on aromatic ring
    para_noncoord_substituents = {
        'methyl': 'c1ccc(C)cc1',
        'formyl': 'c1ccc(C=O)cc1',
        'sulfanyl': 'c1ccc(S)cc1'
    }
    
    # Nitrogen-containing heterocyclic carboxylic acid with ring directly attached
    nitrogen_heterocycle_carboxylic_acid = '[nH0r5,r6][CX3](=O)[OX1H0-,OX2H1]'
    
    # Nitrogen-containing heterocycle connected through another ring
    connected_through_aromatic = '[nH0r5,r6][c][CX3](=O)[OX1H0-,OX2H1]'
    
    # Aliphatic chain of five or more carbons
    long_aliphatic_chain = '[CH2][CH2][CH2][CH2][CH2]'
    
    # Polar substituents (hydroxy, amino)
    polar_substituents = ['[OX2H]', amino_group]
    
    # Aliphatic thiol (-SH)
    aliphatic_thiol = '[#6][SX2H]'
    
    # Aromatic thiol (-SH attached to aromatic ring)
    aromatic_thiol = '[c][SX2H]'
    
    # Polyhydroxylated aliphatic carboxylic acids (multiple -OH on adjacent carbons)
    polyhydroxylated_chain = '[CX4H1,CX4H0]([OX2H])[CX4H1,CX4H0]([OX2H])[CX4H1,CX4H0]([OX2H])'
    
    # Hydroxyl groups on aromatic rings
    aromatic_hydroxyl = '[c][OX2H]'
    
    # Electron-withdrawing groups (EWGs)
    electron_withdrawing_groups = ['[CX3](=O)[OX1H0-,OX2H1]', '[CX3](=O)[#6]', '[NX3](=O)=O', '[F,Cl,Br,I]', '[CX4]([F])[F][F]']
    
    # Electron-donating groups (EDGs)
    electron_donating_groups = ['[OX2H]', '[OX2][#6]', amino_group]
    
    # Perfluoroalkyl or trifluoroacetyl groups
    perfluoroalkyl = '[CX4]([F])([F])[F]'
    
    # Flexible polyether chains
    polyether_chain = '([#6][OX2])+[#6]'
    
    # Aldehyde group on aromatic ring
    aldehyde_on_aromatic = '[c][CX3H](=O)'
    
    # Flexible aliphatic chains of four or more carbons
    flexible_chain_four_more = '[#6]([#6])[#6][#6][#6]'
    
    # Chains of three carbons or fewer
    chain_three_or_fewer = '[#6][#6][#6]'
    
    # Bulky acyl or acetamido groups adjacent to carboxyl group
    bulky_adjacent_groups = '[CX3](=O)[NX3][#6]'
    
    # Methoxy-substituted aromatic rings
    methoxy_substituted_aromatic = 'c[OX2][CH3]'
    
    # Multiple conjugated carbonyl groups within an aromatic system
    conjugated_carbonyls = '[OX1]=[CX3]-[c]-[CX3]=[OX1]'
    
    # Small nitrogen-containing heterocycles with carboxyl group directly attached
    small_nitrogen_heterocycle = '[nR5][CX3](=O)[OX1H0-,OX2H1]'
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'High Yield (True): Modifiers that are amino acids with side chains capable of coordinating through carboxylate or amino groups. Low Yield (False) if side chains are bulky or aromatic.',
            'high_yield_patterns': [amino_acid_backbone, '[#6][CX3](=O)[OX1H0-,OX2H1]', '[#6][NX3;H2,H1]'],
            'low_yield_patterns': [amino_acid_backbone, '[#6][a]'],
            'prediction': None  # Will be set dynamically
        },
        {
            'number': 2,
            'description': 'High Yield (True): Aromatic carboxylic acids with para-substituted coordinating groups (e.g., amino, nitro, bromomethyl). Low Yield (False) if substituents are non-coordinating or electron-withdrawing (e.g., methyl, formyl, sulfanyl).',
            'high_yield_patterns': list(para_coord_substituents.values()),
            'low_yield_patterns': list(para_noncoord_substituents.values()),
            'prediction': None  # Will be set dynamically
        },
        {
            'number': 3,
            'description': 'High Yield (True): Nitrogen-containing heterocyclic carboxylic acids with the ring directly attached to the carboxyl group. Low Yield (False) if the nitrogen-containing ring is connected through another aromatic ring or substituents.',
            'high_yield_patterns': [nitrogen_heterocycle_carboxylic_acid],
            'low_yield_patterns': [connected_through_aromatic],
            'prediction': None  # Will be set dynamically
        },
        {
            'number': 4,
            'description': 'High Yield (True): Aliphatic carboxylic acids with aliphatic chains of five carbons or more. Low Yield (False) if polar substituents (e.g., hydroxy, amino) are introduced into the chain.',
            'high_yield_patterns': [long_aliphatic_chain, carboxylic_acid],
            'low_yield_patterns': polar_substituents,
            'prediction': None  # Will be set dynamically
        },
        {
            'number': 5,
            'description': 'High Yield (True): Modifiers containing aliphatic thiol (sulfanyl) groups. Low Yield (False) if thiol groups are attached to aromatic rings.',
            'high_yield_patterns': [aliphatic_thiol],
            'low_yield_patterns': [aromatic_thiol],
            'prediction': None  # Will be set dynamically
        },
        {
            'number': 6,
            'description': 'High Yield (True): Modifiers that are polyhydroxylated aliphatic carboxylic acids. Low Yield (False) if hydroxyl groups are on aromatic rings.',
            'high_yield_patterns': [polyhydroxylated_chain, carboxylic_acid],
            'low_yield_patterns': [aromatic_hydroxyl],
            'prediction': None  # Will be set dynamically
        },
        {
            'number': 7,
            'description': 'Low Yield (False): Modifiers containing strong electron-withdrawing groups such as perfluoroalkyl or trifluoroacetyl.',
            'patterns': [perfluoroalkyl],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Low Yield (False): Modifiers with flexible polyether chains.',
            'patterns': [polyether_chain],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Low Yield (False): Modifiers that are aromatic carboxylic acids with aldehyde groups on the aromatic ring.',
            'patterns': [aldehyde_on_aromatic, aromatic_carboxylic_acid],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'High Yield (True): Aromatic carboxylic acids linked to substituted aromatic rings via flexible aliphatic chains of four or more carbons. Low Yield (False) if chains are three carbons or fewer.',
            'high_yield_patterns': [flexible_chain_four_more, aromatic_carboxylic_acid],
            'low_yield_patterns': [chain_three_or_fewer, aromatic_carboxylic_acid],
            'prediction': None  # Will be set dynamically
        },
        {
            'number': 11,
            'description': 'Low Yield (False): Modifiers containing bulky acyl or acetamido groups adjacent to the carboxyl group.',
            'patterns': [bulky_adjacent_groups],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'High Yield (True): Modifiers with methoxy-substituted aromatic rings attached via flexible aliphatic chains.',
            'patterns': [methoxy_substituted_aromatic, flexible_chain_four_more],
            'prediction': 1
        },
        {
            'number': 13,
            'description': 'High Yield (True): Modifiers with multiple conjugated carbonyl groups within an aromatic system.',
            'patterns': [conjugated_carbonyls],
            'prediction': 1
        },
        {
            'number': 14,
            'description': 'High Yield (True): Modifiers that are small nitrogen-containing heterocycles with a carboxyl group directly attached.',
            'patterns': [small_nitrogen_heterocycle],
            'prediction': 1
        },
        {
            'number': 15,
            'description': 'Low Yield (False): Modifiers where polar substituents are introduced into long-chain aliphatic acids.',
            'patterns': [long_aliphatic_chain] + polar_substituents,
            'prediction': -1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        # Compile high yield patterns if applicable
        if 'high_yield_patterns' in rule:
            rule['compiled_high_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule['high_yield_patterns']]
        # Compile low yield patterns if applicable
        if 'low_yield_patterns' in rule:
            rule['compiled_low_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule['low_yield_patterns']]
        # Compile general patterns
        if 'patterns' in rule:
            rule['compiled_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule['patterns']]
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = False
                # Check for high yield patterns
                if 'compiled_high_patterns' in rule:
                    high_matches = all(mol.HasSubstructMatch(pat) for pat in rule['compiled_high_patterns'])
                    # Exclude if low yield patterns also match
                    if 'compiled_low_patterns' in rule:
                        low_matches = any(mol.HasSubstructMatch(pat) for pat in rule['compiled_low_patterns'])
                        if high_matches and not low_matches:
                            row.append(1)
                            continue
                        elif low_matches:
                            row.append(-1)
                            continue
                        else:
                            row.append(0)
                            continue
                    else:
                        if high_matches:
                            row.append(1)
                            continue
                # Check for low yield patterns
                if 'compiled_low_patterns' in rule and not match:
                    low_matches = any(mol.HasSubstructMatch(pat) for pat in rule['compiled_low_patterns'])
                    if low_matches:
                        row.append(-1)
                        continue
                # Check for general patterns
                if 'compiled_patterns' in rule and rule['prediction'] is not None:
                    matches = all(mol.HasSubstructMatch(pat) for pat in rule['compiled_patterns'])
                    if matches:
                        row.append(rule['prediction'])
                        continue
                row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df
