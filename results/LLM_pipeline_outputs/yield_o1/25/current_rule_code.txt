def rule2matrix(smiles_list):
    # Define SMARTS patterns for the rules
    
    # Rule 1: Modifiers that are alpha-amino acids with a side chain carboxylate group (dicarboxylic amino acids) result in a high yield.
    # Patterns:
    # - Alpha-amino acid backbone: N-C-C(=O)-O
    # - Additional carboxylate group in the side chain
    amino_acid_backbone_smarts = '[NX3H2][CX4][CX3](=O)[OX1-,OX2H]'
    carboxylate_group_smarts = '[CX3](=O)[OX1-,OX2H]'
    
    # Rule 2: Modifiers that are alpha-amino acids with heteroaromatic side chains result in a high yield.
    # Patterns:
    # - Alpha-amino acid backbone
    # - Heteroaromatic ring in the side chain
    heteroaromatic_ring_smarts = '[a;!#6]'
    
    # Rule 2 (Low Yield): Modifiers that are alpha-amino acids with non-heteroaromatic side chains result in a low yield.
    # Patterns:
    # - Alpha-amino acid backbone
    # - Aromatic ring in the side chain
    # - Exclude heteroaromatic rings
    aromatic_ring_smarts = '[a]'
    
    # Rule 3: Linear aliphatic carboxylic acids with amino, sulfhydryl, or hydroxyl groups within three carbons of the carboxylate result in a high yield.
    # Patterns:
    # - Linear aliphatic carboxylic acid
    # - Amino, sulfhydryl, or hydroxyl group within three carbons of the carboxylate
    near_functional_group_smarts = ['[NX3H2][CX4][CX4][CX3](=O)[OX1-,OX2H]',  # Amino within 3 carbons
                                    '[OX2H][CX4][CX4][CX3](=O)[OX1-,OX2H]',  # Hydroxyl within 3 carbons
                                    '[SX2H][CX4][CX4][CX3](=O)[OX1-,OX2H]']  # Sulfhydryl within 3 carbons
    
    # Rule 3 (Low Yield): Functional groups more than five carbons away from carboxylate result in a low yield.
    far_functional_group_smarts = ['[NX3H2][CX4][CX4][CX4][CX4][CX3](=O)[OX1-,OX2H]',
                                   '[OX2H][CX4][CX4][CX4][CX4][CX3](=O)[OX1-,OX2H]',
                                   '[SX2H][CX4][CX4][CX4][CX4][CX3](=O)[OX1-,OX2H]']
    
    # Rule 4: Aromatic carboxylic acids with para-substituted amino or nitro groups result in a high yield.
    # Patterns:
    # - Aromatic carboxylic acid
    # - Para-substituted amino or nitro group
    aromatic_carboxylic_acid_smarts = 'c1ccccc1C(=O)[OX1-,OX2H]'
    para_amino_smarts = 'c1cc([NX3H2])ccc1C(=O)[OX1-,OX2H]'
    para_nitro_smarts = 'c1cc([NX3](=O)=O)ccc1C(=O)[OX1-,OX2H]'
    
    # Rule 4 (Low Yield): Aromatic carboxylic acids with non-coordinating substituents or electron-donating groups result in a low yield.
    para_methyl_smarts = 'c1cc(C)ccc1C(=O)[OX1-,OX2H]'
    para_formyl_smarts = 'c1cc(C=O)ccc1C(=O)[OX1-,OX2H]'
    
    # Compile SMARTS patterns
    compiled_patterns = {
        'Rule 1': {
            'patterns': [Chem.MolFromSmarts(amino_acid_backbone_smarts)],
            'additional': {
                'pattern': Chem.MolFromSmarts(carboxylate_group_smarts),
                'min_count': 2
            },
            'prediction': 1
        },
        'Rule 2 High': {
            'patterns': [Chem.MolFromSmarts(amino_acid_backbone_smarts), Chem.MolFromSmarts(heteroaromatic_ring_smarts)],
            'prediction': 1
        },
        'Rule 2 Low': {
            'patterns': [Chem.MolFromSmarts(amino_acid_backbone_smarts), Chem.MolFromSmarts(aromatic_ring_smarts)],
            'exclude': [Chem.MolFromSmarts(heteroaromatic_ring_smarts)],
            'prediction': -1
        },
        'Rule 3 High': {
            'patterns': [Chem.MolFromSmarts(p) for p in near_functional_group_smarts],
            'prediction': 1
        },
        'Rule 3 Low': {
            'patterns': [Chem.MolFromSmarts(p) for p in far_functional_group_smarts],
            'prediction': -1
        },
        'Rule 4 High': {
            'patterns': [Chem.MolFromSmarts(para_amino_smarts), Chem.MolFromSmarts(para_nitro_smarts)],
            'prediction': 1
        },
        'Rule 4 Low': {
            'patterns': [Chem.MolFromSmarts(para_methyl_smarts), Chem.MolFromSmarts(para_formyl_smarts)],
            'prediction': -1
        }
    }
    
    # Initialize results list
    results = []
    rule_names = list(compiled_patterns.keys())
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(compiled_patterns))
            continue
        row = []
        for rule_name in rule_names:
            try:
                rule = compiled_patterns[rule_name]
                match = False
                # Check patterns
                if 'patterns' in rule:
                    for pat in rule['patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = True
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check additional patterns
                if 'additional' in rule:
                    additional_pat = rule['additional']['pattern']
                    matches = mol.GetSubstructMatches(additional_pat)
                    if len(matches) < rule['additional'].get('min_count', 1):
                        match = False
                    else:
                        match = True
                    if not match:
                        row.append(0)
                        continue
                # Check exclude patterns
                if 'exclude' in rule:
                    for pat in rule['exclude']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=rule_names)
    return df
