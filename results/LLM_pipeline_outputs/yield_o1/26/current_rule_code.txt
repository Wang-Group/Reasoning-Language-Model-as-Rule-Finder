def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    
    # Primary amine group (-NH2)
    primary_amine = '[NX3H2]'
    
    # Alpha carbon attached to carboxylic acid
    alpha_amino_acid = '[NX3H2][CX4H][CX3](=O)[OX2H1]'
    
    # Beta carbon attached to carboxylic acid
    beta_amino_acid = '[NX3H2][CX4H][CX4][CX3](=O)[OX2H1]'
    
    # Aromatic carboxylic acid with EWG or coordinating group at para position
    aromatic_carboxylic_acid = '[c][c](=O)[OX2H1]'
    para_substituted_aromatic = '[c]1[c][c][c][c][c]1[CX3](=O)[OX2H1]'
    ewg_para = '[c]1[c][c][c]([$(c[F,Cl,Br,I]),$(c[NX3](=O)=O),$(c[OX2H]),$(c[NX3H2])])[c][c]1[CX3](=O)[OX2H1]'
    
    # Heterocyclic carboxylic acid containing nitrogen
    heterocyclic_carboxylic_acid = '[n][c][c](=O)[OX2H1]'
    
    # Polyol near carboxylic acid
    polyol = '[CX4][OX2H][CX4][OX2H][CX3](=O)[OX2H1]'
    
    # Thiol group (-SH) adjacent to carboxylic acid
    thiol_adjacent = '[SX2H][CX4][CX3](=O)[OX2H1]'
    
    # Thiol group attached to aromatic ring
    aromatic_thiol = '[SX2H][c]'
    
    # Medium-chain aliphatic carboxylic acids (6 to 8 carbons)
    medium_chain_acid = '[CX3](=O)[OX2H1][CX4][CX4][CX4][CX4][CX4][CX4][CX4]'
    
    # Para-substituted EDG on aromatic carboxylic acid
    edg_para = '[c]1[c][c][c]([$(c[CH3]),$(c[OX2][CH3]),$(c[OX2H])])[c][c]1[CX3](=O)[OX2H1]'
    
    # Functional groups distant from carboxyl group
    distant_functional_group = '[CX3](=O)[OX2H1][CX4][CX4][CX4][NX3H2,OX2H]'
    
    # Bulky substituents near carboxyl group
    bulky_substituent = '[CX3](=O)[OX2H1][CX4]([CX4][OX2][CX4])[CX4]'
    
    # Carbonyl groups adjacent to carboxylic acid
    adjacent_carbonyl = '[CX3](=O)[CX3](=O)[OX2H1]'
    
    # Perfluorinated carboxylic acid
    perfluorinated_acid = '[CX3](=O)[OX2H1][CX4]([F])[CX4]([F])[CX4]([F])'
    
    # Amino acids with non-coordinating side chains
    non_coordinating_amino_acid = '[NX3H2][CX4][CX3](=O)[OX2H1]'
    
    # Amide linkage near carboxyl group
    amide_near_carboxyl = '[NX3][CX3](=O)[CX3](=O)[OX2H1]'
    
    # Highly conjugated aromatic systems
    conjugated_system = '[c]=[c]-[c]=[c][CX3](=O)[OX2H1]'
    
    # Electron-withdrawing groups with coordinating groups
    ewg_coordinating = '[c]1[c][c][c]([$(c[F,Cl,Br,I]),$(c[NX3](=O)=O),$(c[NX3H2])])[c][c]1[CX3](=O)[OX2H1]'
    
    # Compile SMARTS patterns
    patterns = {
        'Rule 1': [alpha_amino_acid, beta_amino_acid],
        'Rule 2': [ewg_para],
        'Rule 3': [heterocyclic_carboxylic_acid],
        'Rule 4': [polyol],
        'Rule 5 High': [thiol_adjacent],
        'Rule 5 Low': [aromatic_thiol],
        'Rule 6': [medium_chain_acid],
        'Rule 7': [edg_para],
        'Rule 8': [distant_functional_group],
        'Rule 9': [bulky_substituent],
        'Rule 10': [adjacent_carbonyl],
        'Rule 11': [perfluorinated_acid],
        'Rule 12': [non_coordinating_amino_acid],
        'Rule 13': [amide_near_carboxyl],
        'Rule 14': [conjugated_system],
        'Rule 15': [ewg_coordinating]
    }
    
    # Predictions for each rule
    predictions = {
        'Rule 1': 1,
        'Rule 2': 1,
        'Rule 3': 1,
        'Rule 4': 1,
        'Rule 5 High': 1,
        'Rule 5 Low': -1,
        'Rule 6': 1,
        'Rule 7': -1,
        'Rule 8': -1,
        'Rule 9': -1,
        'Rule 10': -1,
        'Rule 11': -1,
        'Rule 12': -1,
        'Rule 13': -1,
        'Rule 14': -1,
        'Rule 15': 1
    }
    
    # Compile SMARTS patterns into RDKit mol objects
    compiled_patterns = {}
    for key, smarts_list in patterns.items():
        compiled_patterns[key] = [Chem.MolFromSmarts(s) for s in smarts_list]
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(patterns))
            continue
        row = []
        for key in patterns.keys():
            try:
                match = False
                for pat in compiled_patterns[key]:
                    if mol.HasSubstructMatch(pat):
                        match = True
                        break
                if match:
                    row.append(predictions[key])
                else:
                    row.append(0)
            except Exception:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=patterns.keys())
    return df
