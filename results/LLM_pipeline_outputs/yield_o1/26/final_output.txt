
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: **Modifiers that are aromatic carboxylic acids with electron-withdrawing substituents in the para position result in high yield.**  
  Examples (High Yield):  
  - **4-aminobenzoic acid**
  - **4-nitrobenzoic acid**
  - **4-(bromomethyl)benzoic acid**  
  Examples (Low Yield):  
  - **4-methylbenzoic acid** (electron-donating methyl group)
  - **4-formylbenzoic acid** (aldehyde substituent)  
  **Rationale**: Electron-withdrawing groups increase the acidity of the carboxylic acid and enhance coordination with metal centers, improving catalyst interaction.

- **Rule 2**: **Modifiers that are nitrogen-containing heterocyclic carboxylic acids result in high yield.**  
  Examples:  
  - **Pyridine-3-carboxylic acid**
  - **2-oxo-1H-pyridine-4-carboxylic acid**
  - **1H-pyrazole-4-carboxylic acid**  
  **Rationale**: Nitrogen heterocycles can coordinate with metal centers through the nitrogen atom, stabilizing the catalyst and enhancing reactivity.

- **Rule 3**: **Modifiers that are short-chain aliphatic amino acids or aminocarboxylic acids with chain lengths of five carbons or fewer result in high yield.**  
  Examples (High Yield):  
  - **(2S)-2-aminobutanedioic acid** (Aspartic acid)
  - **(2S)-2-aminopentanedioic acid** (Glutamic acid)
  - **5-aminopentanoic acid**  
  Examples (Low Yield):  
  - **7-aminoheptanoic acid**
  - **8-aminooctanoic acid**  
  **Rationale**: Short-chain amino acids efficiently coordinate with metal centers due to minimal steric hindrance, enhancing catalytic activity.

- **Rule 4**: **Modifiers that are long-chain aliphatic carboxylic acids without additional functional groups result in high yield.**  
  Example:  
  - **Octanoic acid**  
  **Rationale**: Long-chain fatty acids can interact hydrophobically with the catalyst matrix, potentially improving catalyst stability and dispersion.

- **Rule 5**: **Modifiers that are aliphatic carboxylic acids with thiol groups result in high yield, whereas those with aromatic thiol groups result in low yield.**  
  Examples (High Yield):  
  - **3-sulfanylpropanoic acid**  
  Examples (Low Yield):  
  - **4-sulfanylbenzoic acid**  
  **Rationale**: Aliphatic thiols effectively coordinate with metal centers without the steric and electronic delocalization effects present in aromatic systems.

- **Rule 6**: **Modifiers containing multiple hydroxyl groups along with a carboxylic acid group result in high yield.**  
  Examples:  
  - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (Gluconic acid)
  - **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid**  
  **Rationale**: Multiple hydroxyl groups facilitate chelation with metal centers, enhancing catalyst performance through stronger coordination.

- **Rule 7**: **Modifiers containing electron-withdrawing aldehyde groups adjacent to aromatic rings result in low yield.**  
  Examples:  
  - **4-formylbenzoic acid**
  - **5-formyl-2-hydroxybenzoic acid**  
  **Rationale**: Aldehyde groups can participate in side reactions or reduce the electron density available for coordination, hindering effective catalyst interaction.

- **Rule 8**: **Modifiers with ether linkages and carboxylic acid groups result in low yield.**  
  Examples:  
  - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**
  - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**  
  **Rationale**: Ether oxygens are poor ligands compared to carboxylates and may not coordinate effectively with the metal centers, reducing catalytic activity.

- **Rule 9**: **Modifiers with heavily fluorinated alkyl chains result in low yield.**  
  Example:  
  - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**  
  **Rationale**: Fluorinated chains are highly electronegative and hydrophobic, which can impede interaction with the catalyst and decrease yield.

- **Rule 10**: **Modifiers that are amino acids with bulky hydrophobic side chains lacking coordinating heteroatoms result in low yield; however, if the side chain contains heteroatoms capable of coordination, the yield is high.**  
  Examples (Low Yield):  
  - **(2S)-2-amino-3-phenylpropanoic acid** (Phenylalanine)  
  Examples (High Yield):  
  - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (Tryptophan)  
  **Rationale**: Bulky hydrophobic side chains without coordinating groups hinder effective interaction with the catalyst, whereas heteroatoms in the side chain can enhance coordination.

- **Rule 11**: **Modifiers containing amide linkages adjacent to carboxylic acid groups result in low yield.**  
  Examples:  
  - **2-[(4-hydroxybenzoyl)amino]acetic acid**
  - **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid**  
  **Rationale**: Amide groups can compete with carboxylate groups for coordination sites or alter the geometry needed for effective catalyst interaction.

- **Rule 12**: **Modifiers with para-substituted phenolic hydroxyl groups and an extended aliphatic chain (four or more carbons) result in high yield; shorter chains result in low yield.**  
  Examples (High Yield):  
  - **5-(4-hydroxyphenyl)pentanoic acid**  
  Examples (Low Yield):  
  - **3-(4-hydroxyphenyl)propanoic acid**  
  **Rationale**: Longer aliphatic chains may enhance hydrophobic interactions with the catalyst, facilitating better positioning for coordination.

- **Rule 13**: **Modifiers with electron-donating alkoxy groups on aromatic rings result in variable yields depending on chain length and additional functional groups.**  
  Example (High Yield):  
  - **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid**  
  **Rationale**: Electron-donating groups can increase electron density but may still allow for effective coordination if other structural features compensate.

- **Rule 14**: **Modifiers containing multiple coordinating functional groups (e.g., amino, hydroxyl, carboxylate) in configurations that promote chelation to the metal center result in high yield.**  
  Examples:  
  - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid**
  - **2-oxo-1H-pyridine-4-carboxylic acid**  
  **Rationale**: Chelation increases the stability of the modifier-metal complex, enhancing catalytic efficiency.

- **Rule 15**: **Modifiers with secondary or tertiary amines linked through flexible chains to carboxylic acid groups result in low yield.**  
  Example:  
  - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**  
  **Rationale**: Flexible chains may reduce the effective coordination of functional groups due to conformational freedom, decreasing interaction with the catalyst.

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 10,Rule 11,Rule 12,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6285714285714286; Test Accuracy: 1.0
    Train Support: 0.047619047619047616; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 1.9444444444444446; Test Lift: NONE
    Train Leverage: 0.023129251700680278; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:

def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and structural features
    # Carboxylic acid group attached to aromatic ring
    aromatic_carboxylic_acid = '[c][CX3](=O)[OX1H]'  # Aromatic carboxylic acid
    # Electron-withdrawing groups (EWGs) in para position
    para_EWG = '[c][c](X)[c][c](C(=O)O)[c][cX]'  # Simplified representation
    EWG = ['[F,Cl,Br,I]', '[NX3;(=O)]=O', '[CX3](=O)[OX1H0-,OX2H1]']
    
    # Nitrogen-containing heterocyclic carboxylic acid
    nitrogen_heterocycle_carboxylic_acid = '[nH0;R][cH1,$(c([#6])[#6])][c][c][c][C](=O)[OH]'  # Simplified pattern
    
    # Short-chain aliphatic amino acids (5 carbons or fewer)
    short_chain_amino_acid = '[NX3;H2][CX4][CX4;!$(C(C(=O)[OX1H]))][C](=O)[OX1H]'  # Chain length ≤ 5
    
    # Long-chain aliphatic carboxylic acids without additional functional groups (chain length ≥ 7)
    long_chain_carboxylic_acid = '[CX4]'+('[CX4]'*5)+'[C](=O)[OX1H]'  # Chain length ≥ 7
    
    # Aliphatic carboxylic acids with thiol groups
    aliphatic_thiol_carboxylic_acid = '[#6][SX2H][CX4][C](=O)[OX1H]'  # Aliphatic thiol with carboxylic acid
    
    # Aromatic thiol
    aromatic_thiol = '[c][SX2H]'
    
    # Multiple hydroxyl groups and carboxylic acid
    multi_hydroxyl_carboxylic_acid = '[CX4][OX2H][CX4][OX2H][CX4][OX2H][C](=O)[OX1H]'  # Simplified pattern
    
    # Aldehyde groups adjacent to aromatic rings
    aldehyde_adjacent_aromatic = '[c][CX3H](=O)'  # Aromatic aldehyde
    
    # Ether linkages with carboxylic acid groups
    ether_with_carboxylic_acid = '[#6][OX2][#6][C](=O)[OX1H]'  # Ether linkage to carboxylic acid
    
    # Heavily fluorinated alkyl chains
    fluorinated_alkyl_chain = '[#6][CX4]([F])([F])[F]'  # CF3 group
    
    # Amino acids with bulky hydrophobic side chains lacking coordinating heteroatoms
    bulky_non_coordinating_amino_acid = '[NX3;H2][CX4][CX4][CX4][c]'  # E.g., Phenylalanine
    
    # Amino acids with bulky side chains containing coordinating heteroatoms
    bulky_coordinating_amino_acid = '[NX3;H2][CX4][CX4][CX4][c][n,o,s]'  # E.g., Tryptophan
    
    # Amide linkages adjacent to carboxylic acid groups
    amide_adjacent_carboxylic_acid = '[C](=O)[NX3][CX4][C](=O)[OX1H]'  # Amide next to carboxylic acid
    
    # Para-substituted phenolic hydroxyl groups with extended aliphatic chain (≥4 carbons)
    para_phenolic_long_chain = '[c][c](O)[c][c][CX4]'+('[CX4]'*2)+'[C](=O)[OX1H]'  # Chain length ≥ 4
    
    # Para-substituted phenolic hydroxyl groups with short aliphatic chain (<4 carbons)
    para_phenolic_short_chain = '[c][c](O)[c][c][CX4][C](=O)[OX1H]'  # Chain length < 4
    
    # Electron-donating alkoxy groups on aromatic rings
    alkoxy_on_aromatic = '[c][OX2][CX4][C](=O)[OX1H]'  # Alkoxy attached to aromatic ring
    
    # Multiple coordinating functional groups promoting chelation
    multiple_coordination_sites = '[NX3;H2][CX4][OX2H][CX4][C](=O)[OX1H]'  # Amino, hydroxyl, carboxylate
    
    # Secondary or tertiary amines linked through flexible chains to carboxylic acid groups
    secondary_tertiary_amine_flexible_chain = '[NX3;!H2][CX4][CX4][C](=O)[OX1H]'  # Sec/Tert amine with chain
    
    # Define rules with their SMARTS patterns and predictions
    rules = [
        {  # Rule 1
            'number': 1,
            'description': 'Aromatic carboxylic acids with electron-withdrawing substituents in the para position result in high yield.',
            'patterns': [aromatic_carboxylic_acid],
            'ewg_patterns': EWG,
            'prediction': 1
        },
        {  # Rule 2
            'number': 2,
            'description': 'Modifiers that are nitrogen-containing heterocyclic carboxylic acids result in high yield.',
            'patterns': [nitrogen_heterocycle_carboxylic_acid],
            'prediction': 1
        },
        {  # Rule 3
            'number': 3,
            'description': 'Short-chain aliphatic amino acids or aminocarboxylic acids with chain lengths of five carbons or fewer result in high yield.',
            'patterns': [short_chain_amino_acid],
            'max_chain_length': 5,
            'prediction': 1
        },
        {  # Rule 4
            'number': 4,
            'description': 'Long-chain aliphatic carboxylic acids without additional functional groups result in high yield.',
            'patterns': [long_chain_carboxylic_acid],
            'functional_group_exclusions': [aromatic_carboxylic_acid, '[O,N,S]'],
            'prediction': 1
        },
        {  # Rule 5
            'number': 5,
            'description': 'Aliphatic carboxylic acids with thiol groups result in high yield; aromatic thiol groups result in low yield.',
            'patterns': [aliphatic_thiol_carboxylic_acid],
            'prediction': 1
        },
        {  # Rule 5 Negative
            'number': 5,
            'description': 'Aromatic thiol groups result in low yield.',
            'patterns': [aromatic_thiol],
            'prediction': -1
        },
        {  # Rule 6
            'number': 6,
            'description': 'Modifiers containing multiple hydroxyl groups along with a carboxylic acid group result in high yield.',
            'patterns': [multi_hydroxyl_carboxylic_acid],
            'prediction': 1
        },
        {  # Rule 7
            'number': 7,
            'description': 'Modifiers containing electron-withdrawing aldehyde groups adjacent to aromatic rings result in low yield.',
            'patterns': [aldehyde_adjacent_aromatic],
            'prediction': -1
        },
        {  # Rule 8
            'number': 8,
            'description': 'Modifiers with ether linkages and carboxylic acid groups result in low yield.',
            'patterns': [ether_with_carboxylic_acid],
            'prediction': -1
        },
        {  # Rule 9
            'number': 9,
            'description': 'Modifiers with heavily fluorinated alkyl chains result in low yield.',
            'patterns': [fluorinated_alkyl_chain],
            'prediction': -1
        },
        {  # Rule 10 Negative
            'number': 10,
            'description': 'Amino acids with bulky hydrophobic side chains lacking coordinating heteroatoms result in low yield.',
            'patterns': [bulky_non_coordinating_amino_acid],
            'prediction': -1
        },
        {  # Rule 10 Positive
            'number': 10,
            'description': 'Amino acids with side chains containing heteroatoms capable of coordination result in high yield.',
            'patterns': [bulky_coordinating_amino_acid],
            'prediction': 1
        },
        {  # Rule 11
            'number': 11,
            'description': 'Modifiers containing amide linkages adjacent to carboxylic acid groups result in low yield.',
            'patterns': [amide_adjacent_carboxylic_acid],
            'prediction': -1
        },
        {  # Rule 12 Positive
            'number': 12,
            'description': 'Modifiers with para-substituted phenolic hydroxyl groups and an extended aliphatic chain (four or more carbons) result in high yield.',
            'patterns': [para_phenolic_long_chain],
            'prediction': 1
        },
        {  # Rule 12 Negative
            'number': 12,
            'description': 'Modifiers with para-substituted phenolic hydroxyl groups and a short aliphatic chain (less than four carbons) result in low yield.',
            'patterns': [para_phenolic_short_chain],
            'prediction': -1
        },
        {  # Rule 13
            'number': 13,
            'description': 'Modifiers with electron-donating alkoxy groups on aromatic rings result in high yield.',
            'patterns': [alkoxy_on_aromatic],
            'prediction': 1
        },
        {  # Rule 14
            'number': 14,
            'description': 'Modifiers containing multiple coordinating functional groups that promote chelation result in high yield.',
            'patterns': [multiple_coordination_sites],
            'prediction': 1
        },
        {  # Rule 15
            'number': 15,
            'description': 'Modifiers with secondary or tertiary amines linked through flexible chains to carboxylic acid groups result in low yield.',
            'patterns': [secondary_tertiary_amine_flexible_chain],
            'prediction': -1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for smarts in rule.get('patterns', []):
            pat = Chem.MolFromSmarts(smarts)
            if pat is not None:
                compiled_patterns.append(pat)
        rule['compiled_patterns'] = compiled_patterns
        
        # Compile EWG patterns for Rule 1
        if rule.get('ewg_patterns'):
            compiled_ewg_patterns = [Chem.MolFromSmarts(p) for p in rule['ewg_patterns']]
            rule['compiled_ewg_patterns'] = compiled_ewg_patterns
        
        # Compile exclusion patterns if any
        if rule.get('functional_group_exclusions'):
            compiled_exclusions = [Chem.MolFromSmarts(p) for p in rule['functional_group_exclusions']]
            rule['compiled_exclusions'] = compiled_exclusions
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check all patterns
                for pat in rule['compiled_patterns']:
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Additional checks for Rule 1 (EWG in para position)
                if rule.get('compiled_ewg_patterns'):
                    ewg_match = False
                    for ewg_pat in rule['compiled_ewg_patterns']:
                        if mol.HasSubstructMatch(ewg_pat):
                            ewg_match = True
                            break
                    if not ewg_match:
                        match = False
                # Exclusions for Rule 4
                if rule.get('compiled_exclusions'):
                    for excl_pat in rule['compiled_exclusions']:
                        if mol.HasSubstructMatch(excl_pat):
                            match = False
                            break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: **Modifiers that are aromatic carboxylic acids with para-substituted groups capable of coordination (e.g., amino, nitro, halogens like bromo) result in high yield.**  
  Examples (High Yield):  
  - **4-aminobenzoic acid**  
  - **4-nitrobenzoic acid**  
  - **4-(bromomethyl)benzoic acid**  
  Examples (Low Yield):  
  - **4-methylbenzoic acid** (electron-donating methyl group)  
  - **4-formylbenzoic acid** (aldehyde group)  
  **Rationale**: Substituents capable of coordinating with metal centers enhance interaction with the catalyst, increasing the yield. Electron-withdrawing groups also increase acidity, improving coordination.

- **Rule 2**: **Modifiers that are aliphatic amino acids or aminocarboxylic acids with chain lengths of five carbons or fewer result in high yield; longer chains result in low yield.**  
  Examples (High Yield):  
  - **(2S)-2-aminobutanedioic acid** (Aspartic acid)  
  - **(2S)-2-aminopentanedioic acid** (Glutamic acid)  
  - **5-aminopentanoic acid**  
  Examples (Low Yield):  
  - **7-aminoheptanoic acid**  
  - **8-aminooctanoic acid**  
  **Rationale**: Short-chain amino acids effectively coordinate with metal centers due to minimal steric hindrance, enhancing catalytic activity. Longer chains may hinder coordination due to increased flexibility and steric effects.

- **Rule 3**: **Modifiers that are aromatic carboxylic acids with aldehyde substituents result in low yield.**  
  Examples:  
  - **4-formylbenzoic acid**  
  - **5-formyl-2-hydroxybenzoic acid**  
  **Rationale**: Aldehyde groups can participate in side reactions or reduce the electron density available for coordination, hindering effective catalyst interaction.

- **Rule 4**: **Modifiers that are carboxylic acids containing nitrogen heterocycles result in high yield.**  
  Examples:  
  - **Pyridine-3-carboxylic acid** (Niacin)  
  - **2-oxo-1H-pyridine-4-carboxylic acid**  
  - **1H-pyrazole-4-carboxylic acid**  
  **Rationale**: Nitrogen heterocycles coordinate with metal centers through the nitrogen atom, stabilizing the catalyst and enhancing reactivity.

- **Rule 5**: **Modifiers that are aliphatic carboxylic acids with thiol groups result in high yield; aromatic thiol-containing acids result in low yield.**  
  Examples (High Yield):  
  - **3-sulfanylpropanoic acid**  
  Examples (Low Yield):  
  - **4-sulfanylbenzoic acid**  
  **Rationale**: Aliphatic thiols effectively coordinate with metal centers without the steric and electronic delocalization present in aromatic systems.

- **Rule 6**: **Modifiers that are carboxylic acids with multiple hydroxyl groups on an aliphatic chain result in high yield.**  
  Examples:  
  - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (Gluconic acid)  
  - **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid**  
  **Rationale**: Multiple hydroxyl groups facilitate chelation with metal centers, enhancing catalyst performance through stronger coordination.

- **Rule 7**: **Modifiers that are long-chain aliphatic carboxylic acids without additional functional groups result in high yield; addition of polar groups leads to low yield.**  
  Examples (High Yield):  
  - **Octanoic acid**  
  Examples (Low Yield):  
  - **7-hydroxyheptanoic acid** (hydroxyl group)  
  - **7-aminoheptanoic acid** (amino group)  
  - **8-aminooctanoic acid**  
  **Rationale**: Unsubstituted long-chain fatty acids interact hydrophobically with the catalyst matrix, improving stability. Polar functional groups may interfere with catalyst interactions.

- **Rule 8**: **Modifiers containing ether linkages and carboxylic acid groups result in low yield.**  
  Examples:  
  - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**  
  - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**  
  **Rationale**: Ether oxygens are poor ligands compared to carboxylates and may not coordinate effectively with metal centers, reducing catalytic activity.

- **Rule 9**: **Modifiers with heavily fluorinated alkyl chains result in low yield.**  
  Example:  
  - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**  
  **Rationale**: Fluorinated chains are highly electronegative and hydrophobic, which can impede interaction with the catalyst and decrease yield.

- **Rule 10**: **Modifiers that are amino acids with bulky hydrophobic side chains lacking coordinating heteroatoms result in low yield; side chains containing heteroatoms capable of coordination result in high yield.**  
  Examples (Low Yield):  
  - **(2S)-2-amino-3-phenylpropanoic acid** (Phenylalanine)  
  - **(2S)-6-acetamido-2-aminohexanoic acid** (N-Acetyllysine)  
  Example (High Yield):  
  - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (Tryptophan)  
  **Rationale**: Bulky hydrophobic side chains without coordinating groups hinder effective interaction with the catalyst. Heteroatoms in side chains can enhance coordination.

- **Rule 11**: **Modifiers containing amide linkages adjacent to carboxylic acid groups result in low yield.**  
  Examples:  
  - **2-[(4-hydroxybenzoyl)amino]acetic acid**  
  - **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid**  
  **Rationale**: Amide groups can compete with carboxylate groups for coordination sites or alter the geometry needed for effective catalyst interaction.

- **Rule 12**: **Modifiers with aromatic rings bearing multiple methoxy groups and a ketone in the aliphatic chain result in high yield.**  
  Example:  
  - **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid**  
  **Rationale**: Electron-donating methoxy groups increase electron density, and the ketone can participate in coordination, enhancing catalytic activity.

- **Rule 13**: **Modifiers with terminal hydroxyl or amino groups on long aliphatic chains (more than five carbons) result in low yield.**  
  Examples:  
  - **7-hydroxyheptanoic acid**  
  - **7-aminoheptanoic acid**  
  - **8-aminooctanoic acid**  
  **Rationale**: Polar terminal groups increase solubility in the reaction medium and may interfere with catalyst interactions or reduce effective coordination.

- **Rule 14**: **Modifiers with electron-donating alkyl groups on aromatic carboxylic acids result in low yield.**  
  Example:  
  - **4-methylbenzoic acid**  
  **Rationale**: Electron-donating groups decrease the acidity and coordinating ability of the carboxylic acid, reducing interaction with the catalyst.

- **Rule 15**: **Modifiers containing multiple coordinating functional groups (e.g., amino, hydroxyl, carboxylate) in configurations that promote chelation to the metal center result in high yield.**  
  Examples:  
  - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (Gluconic acid)  
  - **2-oxo-1H-pyridine-4-carboxylic acid**  
  **Rationale**: Chelation increases the stability of the modifier-metal complex, enhancing catalytic efficiency through stronger and multidentate coordination.

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,-1,0,0,-1,0,-1,0,0,1,0,0,0,0,0
0,1,0,0,-1,0,-1,0,0,1,0,0,0,0,1
0,-1,0,0,-1,0,-1,0,0,1,0,0,0,0,0
0,1,0,0,-1,0,-1,0,0,1,0,0,0,0,1
0,1,0,0,-1,0,-1,0,0,1,0,0,0,0,1
0,-1,0,0,-1,0,-1,0,0,1,0,0,0,0,0
0,-1,0,0,-1,0,-1,0,0,1,0,0,0,0,0
0,-1,0,0,-1,1,-1,0,0,1,0,0,0,0,1
0,-1,0,0,-1,0,-1,0,0,1,0,0,0,0,1
0,-1,0,0,-1,0,-1,0,0,1,0,0,0,0,0
0,-1,0,0,-1,1,-1,0,0,1,0,0,0,0,1
0,-1,0,0,-1,0,-1,0,0,1,0,0,0,0,0
0,-1,0,0,-1,0,-1,-1,0,1,0,0,0,0,0
0,-1,0,0,-1,0,-1,0,0,1,0,0,0,0,0
0,1,0,0,-1,0,-1,0,0,-1,0,0,0,0,1
0,-1,0,0,-1,0,-1,0,0,1,0,0,0,0,0
0,1,0,0,-1,0,-1,0,0,-1,0,0,0,0,1
0,-1,0,0,-1,0,-1,0,0,1,0,0,0,0,0
0,-1,0,0,-1,0,-1,-1,0,1,0,0,0,-1,0
0,-1,0,0,1,0,-1,0,0,1,0,0,0,0,0
0,-1,0,0,-1,0,-1,0,0,1,0,0,0,-1,0
0,-1,0,0,-1,0,-1,0,0,1,0,0,0,0,0
0,-1,0,0,-1,0,-1,0,0,1,0,0,0,0,0
0,-1,0,0,-1,0,-1,0,0,1,0,0,0,0,0
0,-1,0,0,-1,0,-1,0,0,1,0,0,0,0,0
0,1,0,0,-1,0,-1,0,0,1,-1,0,0,0,1
0,-1,0,0,-1,0,-1,-1,0,1,0,0,0,0,0
0,-1,0,0,-1,0,-1,0,0,1,-1,0,0,0,1
0,-1,0,0,-1,0,-1,0,0,1,0,0,0,0,1
0,-1,0,0,-1,0,-1,0,0,1,0,0,0,0,1
0,-1,0,0,-1,0,-1,0,0,1,0,0,0,0,1
0,-1,0,0,-1,0,-1,0,0,1,0,0,0,0,1
0,-1,0,0,-1,0,-1,0,0,1,0,0,0,0,1
0,1,0,0,-1,0,-1,-1,0,1,0,0,0,0,1
0,-1,0,0,-1,0,-1,0,0,1,0,0,0,0,1
0,-1,0,0,-1,0,-1,0,0,1,0,0,0,0,1

---------------------------------------------------------------


    Train Accuracy: 0.7142857142857143; Test Accuracy: 1.0
    Train Support: 0.21428571428571427; Test Support: 0.0
    Train Confidence: 0.7329365079365079; Test Confidence: 0.375
    Train Lift: 1.468137254901961; Test Lift: NONE
    Train Leverage: 0.01040816326530613; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define the rules with their associated SMARTS patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are aromatic carboxylic acids with para-substituted groups capable of coordination (e.g., amino, nitro, halogens like bromo) result in high yield.',
            'patterns': [
                'c1ccc([NX3;H2])cc1C(=O)[O;H1]',  # Para-substituted amino group
                'c1ccc([N+](=O)[O-])cc1C(=O)[O;H1]',  # Para-substituted nitro group
                'c1ccc([F,Cl,Br,I])cc1C(=O)[O;H1]',  # Para-substituted halogens
            ],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers that are aliphatic amino acids or aminocarboxylic acids with chain lengths of five carbons or fewer result in high yield; longer chains result in low yield.',
            'patterns': [
                '[NX3;H2][CX4]',  # Primary amine attached to aliphatic carbon
                '[CX3](=O)[O;H1,O-]',  # Carboxylic acid group
            ],
            'max_chain_length': 5,
            'prediction': 1,
            'alternative_prediction': -1  # For longer chains
        },
        {
            'number': 3,
            'description': 'Modifiers that are aromatic carboxylic acids with aldehyde substituents result in low yield.',
            'patterns': [
                '[#6]C(=O)[H]',  # Aldehyde group
                'cC(=O)[O;H1]',  # Aromatic carboxylic acid
            ],
            'prediction': -1
        },
        {
            'number': 4,
            'description': 'Modifiers that are carboxylic acids containing nitrogen heterocycles result in high yield.',
            'patterns': [
                'n1cccc1C(=O)[O;H1]',  # Nitrogen heterocycle with carboxylic acid
            ],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers that are aliphatic carboxylic acids with thiol groups result in high yield; aromatic thiol-containing acids result in low yield.',
            'patterns': [
                '[CX4][SX2H]',  # Aliphatic thiol
                '[CX3](=O)[O;H1,O-]',  # Carboxylic acid
            ],
            'exclude_patterns': [
                '[c][SX2H]',  # Exclude aromatic thiol
            ],
            'prediction': 1,
            'alternative_prediction': -1
        },
        {
            'number': 6,
            'description': 'Modifiers that are carboxylic acids with multiple hydroxyl groups on an aliphatic chain result in high yield.',
            'patterns': [
                '[CX3](=O)[O;H1,O-]',  # Carboxylic acid
            ],
            'hydroxyl_pattern': '[OX2H][CX4]',  # Hydroxyl group attached to sp3 carbon
            'min_hydroxyls': 2,
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'Modifiers that are long-chain aliphatic carboxylic acids without additional functional groups result in high yield; addition of polar groups leads to low yield.',
            'patterns': [
                '[CX3](=O)[O;H1,O-]',  # Carboxylic acid
            ],
            'min_chain_length': 7,
            'exclude_patterns': [
                '[#6][OX2H]',  # Hydroxyl group
                '[#6][NX3;H2,H1]',  # Amino group
                '[#6][SX2H]',  # Thiol group
            ],
            'prediction': 1,
            'alternative_prediction': -1
        },
        {
            'number': 8,
            'description': 'Modifiers containing ether linkages and carboxylic acid groups result in low yield.',
            'patterns': [
                '[#6][OX2][#6]',  # Ether linkage
                '[CX3](=O)[O;H1,O-]',  # Carboxylic acid
            ],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers with heavily fluorinated alkyl chains result in low yield.',
            'patterns': [
                '[CX4][CF3]',  # CF3 group
                '[CX3](=O)[O;H1,O-]',  # Carboxylic acid
            ],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers that are amino acids with bulky hydrophobic side chains lacking coordinating heteroatoms result in low yield; side chains containing heteroatoms capable of coordination result in high yield.',
            'patterns': [
                '[NX3;H2][CX4][CX3](=O)[O;H1,O-]',  # Amino acid backbone
            ],
            'bulky_side_chains': [
                '[CX4][CH](C)[CH3]',  # Isopropyl group
                '[CX4][C](C)(C)C',  # Tert-butyl group
                '[CX4][c]',  # Aromatic ring
            ],
            'exclude_patterns': [
                '[CX4][c][n,o,s]',  # Side chains with heteroatoms
            ],
            'prediction': -1,
            'alternative_prediction': 1
        },
        {
            'number': 11,
            'description': 'Modifiers containing amide linkages adjacent to carboxylic acid groups result in low yield.',
            'patterns': [
                '[CX3](=O)[NX3][#6][CX3](=O)[O;H1,O-]',  # Amide adjacent to carboxylic acid
            ],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'Modifiers with aromatic rings bearing multiple methoxy groups and a ketone in the aliphatic chain result in high yield.',
            'patterns': [
                'c1c(OC)ccc(OC)c1',  # Aromatic ring with methoxy groups
                '[CX3](=O)[CX4][CX3](=O)[O;H1,O-]',  # Ketone and carboxylic acid
            ],
            'prediction': 1
        },
        {
            'number': 13,
            'description': 'Modifiers with terminal hydroxyl or amino groups on long aliphatic chains (more than five carbons) result in low yield.',
            'patterns': [
                '[CH3][CH2]{5,}[OX2H,NX3;H2]',  # Terminal hydroxyl or amino group on long chain
            ],
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'Modifiers with electron-donating alkyl groups on aromatic carboxylic acids result in low yield.',
            'patterns': [
                'c1ccc(C)cc1C(=O)[O;H1]',  # Alkyl group on aromatic ring with carboxylic acid
            ],
            'prediction': -1
        },
        {
            'number': 15,
            'description': 'Modifiers containing multiple coordinating functional groups (e.g., amino, hydroxyl, carboxylate) in configurations that promote chelation to the metal center result in high yield.',
            'patterns': [
                '[CX3](=O)[O;H1,O-]',  # Carboxylic acid
            ],
            'coordinating_groups': ['[OX2H]', '[NX3;H2]', '[O-]', '[NX3;H1]'],
            'min_coordinating_groups': 2,
            'exclude_patterns': [
                '[c][CX3](=O)[O;H1,O-]',  # Exclude aromatic carboxylic acids
            ],
            'prediction': 1
        }
    ]

    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for smarts in rule.get('patterns', []):
            compiled_patterns.append(Chem.MolFromSmarts(smarts))
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_exclude = []
            for smarts in rule['exclude_patterns']:
                compiled_exclude.append(Chem.MolFromSmarts(smarts))
            rule['compiled_exclude'] = compiled_exclude
        # Compile coordinating groups if any (for Rule 15)
        if 'coordinating_groups' in rule:
            compiled_coordinating = []
            for smarts in rule['coordinating_groups']:
                compiled_coordinating.append(Chem.MolFromSmarts(smarts))
            rule['compiled_coordinating_groups'] = compiled_coordinating
        # Compile hydroxyl pattern if any (for Rule 6)
        if 'hydroxyl_pattern' in rule:
            rule['compiled_hydroxyl'] = Chem.MolFromSmarts(rule['hydroxyl_pattern'])
        # Compile bulky side chains if any (for Rule 10)
        if 'bulky_side_chains' in rule:
            compiled_side_chains = []
            for smarts in rule['bulky_side_chains']:
                compiled_side_chains.append(Chem.MolFromSmarts(smarts))
            rule['compiled_side_chains'] = compiled_side_chains

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'compiled_exclude' in rule:
                    for pat in rule['compiled_exclude']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        if 'alternative_prediction' in rule:
                            row.append(rule['alternative_prediction'])
                        else:
                            row.append(0)
                        continue
                # Check required patterns
                for pat in rule['compiled_patterns']:
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                # Additional checks
                if match:
                    # Rule-specific checks
                    # For Rule 2: Check chain length
                    if rule['number'] == 2:
                        amino_matches = mol.GetSubstructMatches(Chem.MolFromSmarts('[NX3;H2][CX4;$([C][C][C][C][C])]'))
                        chain_length = None
                        if amino_matches:
                            amino_atom_idx = amino_matches[0][1]  # Index of the carbon attached to amino group
                            # Use distance matrix to find longest path from amino carbon to any carbon
                            dm = rdmolops.GetDistanceMatrix(mol)
                            carbon_indices = [atom.GetIdx() for atom in mol.GetAtoms() if atom.GetAtomicNum() == 6]
                            distances = dm[amino_atom_idx, carbon_indices]
                            chain_length = int(distances.max()) + 1  # Add 1 to include the start atom
                        if chain_length is not None:
                            if chain_length > rule['max_chain_length']:
                                match = False
                                row.append(rule.get('alternative_prediction', -1))
                                continue
                    # For Rule 6: Check for minimum number of hydroxyl groups
                    if rule['number'] == 6:
                        hydroxyl_matches = mol.GetSubstructMatches(rule['compiled_hydroxyl'])
                        hydroxyl_count = len(hydroxyl_matches)
                        if hydroxyl_count < rule['min_hydroxyls']:
                            match = False
                    # For Rule 7: Check chain length and presence of polar groups
                    if rule['number'] == 7:
                        # Determine longest carbon chain length
                        frags = Chem.GetMolFrags(mol, asMols=True)
                        max_chain_length = 0
                        for frag in frags:
                            if all(atom.GetAtomicNum() == 6 for atom in frag.GetAtoms()):
                                max_chain_length = max(max_chain_length, frag.GetNumAtoms())
                        if max_chain_length < rule['min_chain_length']:
                            match = False
                        else:
                            # Check exclude patterns
                            for pat in rule['compiled_exclude']:
                                if mol.HasSubstructMatch(pat):
                                    match = False
                                    row.append(rule.get('alternative_prediction', -1))
                                    break
                    # For Rule 10: Check side chains
                    if rule['number'] == 10:
                        side_chain_match = False
                        for pat in rule['compiled_side_chains']:
                            if mol.HasSubstructMatch(pat):
                                side_chain_match = True
                                break
                        if not side_chain_match:
                            match = False
                        else:
                            # Exclude patterns (e.g., side chains with heteroatoms)
                            if 'compiled_exclude' in rule:
                                for pat in rule['compiled_exclude']:
                                    if mol.HasSubstructMatch(pat):
                                        match = False
                                        break
                    # For Rule 15: Check for multiple coordinating functional groups
                    if rule['number'] == 15:
                        total_matches = set()
                        for cg_pat in rule['compiled_coordinating_groups']:
                            matches = mol.GetSubstructMatches(cg_pat, uniquify=True)
                            for match_idx in matches:
                                total_matches.update(match_idx)
                        if len(total_matches) < rule['min_coordinating_groups']:
                            match = False
                if match:
                    prediction = rule['prediction']
                else:
                    # Check for alternative prediction
                    if 'alternative_prediction' in rule:
                        prediction = rule['alternative_prediction']
                    else:
                        prediction = 0
                row.append(prediction)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

---

- **Rule 1**: **Modifiers that are *long-chain aliphatic carboxylic acids* (six carbons or more) *without polar substituents* result in **high yield**; introduction of polar groups such as hydroxyl or amino leads to **low yield**.**

  - **Examples (High Yield)**:
    - **Octanoic acid**

  - **Examples (Low Yield)**:
    - **7-hydroxyheptanoic acid**
    - **7-aminoheptanoic acid**
    - **8-aminooctanoic acid**

  - **Rationale**: Unsubstituted long-chain acids can interact hydrophobically with the catalyst matrix, enhancing catalyst stability and activity. Polar substituents introduce hydrogen bonding and steric effects that can disrupt these interactions and hinder effective coordination with the metal center.

---

- **Rule 2**: **Modifiers that are *aromatic carboxylic acids* with *para-position substituents* capable of coordinating with metal centers (e.g., amino, nitro, bromomethyl groups) result in **high yield**; those with electron-donating groups or non-coordinating substituents result in **low yield**.**

  - **Examples (High Yield)**:
    - **4-aminobenzoic acid**
    - **4-nitrobenzoic acid**
    - **4-(bromomethyl)benzoic acid**

  - **Examples (Low Yield)**:
    - **4-methylbenzoic acid**
    - **4-formylbenzoic acid**

  - **Rationale**: Substituents with lone pairs or electron-withdrawing properties enhance the ability to coordinate with the metal center, improving catalyst performance. Electron-donating groups without coordinating ability do not facilitate this interaction and may inhibit effective binding.

---

- **Rule 3**: **Modifiers that are *short-chain aliphatic amino acids* or *aminodicarboxylic acids* (chain lengths of five carbons or fewer) with side-chain coordinating groups (e.g., amino, sulfhydryl) result in **high yield**; longer-chain amino acids or those lacking coordinating side chains result in **low yield**.**

  - **Examples (High Yield)**:
    - **(2S)-2-aminobutanedioic acid** (Aspartic acid)
    - **(2S)-2-aminopentanedioic acid** (Glutamic acid)
    - **5-aminopentanoic acid**
    - **3-sulfanylpropanoic acid**

  - **Examples (Low Yield)**:
    - **(2S)-6-acetamido-2-aminohexanoic acid**
    - **8-aminooctanoic acid**

  - **Rationale**: Short chains with coordinating groups in proximity to the carboxylate enhance chelation with metal centers. Longer chains increase flexibility and distance between functional groups, reducing coordination efficiency.

---

- **Rule 4**: **Modifiers containing *multiple hydroxyl groups* on an aliphatic chain (polyhydroxy acids) attached to a carboxylic acid result in **high yield**; modifiers with ether linkages or single hydroxyl groups result in **low yield**.**

  - **Examples (High Yield)**:
    - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (Gluconic acid)

  - **Examples (Low Yield)**:
    - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**
    - **7-hydroxyheptanoic acid**

  - **Rationale**: Multiple hydroxyl groups provide several coordination sites for metal binding, enhancing catalyst stability and activity. Ether linkages and single hydroxyl groups offer limited coordination, reducing effectiveness.

---

- **Rule 5**: **Modifiers that are *heteroaromatic carboxylic acids* with the carboxyl group directly attached to a nitrogen-containing ring (e.g., pyridine, pyrazole) result in **high yield**; those where the carboxyl group is separated from the heterocycle result in **low yield**.**

  - **Examples (High Yield)**:
    - **Pyridine-3-carboxylic acid** (Nicotinic acid)
    - **1H-pyrazole-4-carboxylic acid**

  - **Examples (Low Yield)**:
    - **4-pyridin-4-ylbenzoic acid**

  - **Rationale**: Direct attachment allows the nitrogen atom to effectively coordinate with the metal center. Separation by additional rings or linkers diminishes this interaction, reducing catalytic efficiency.

---

- **Rule 6**: **Modifiers that are *amino acids with aromatic side chains* containing heteroatoms capable of coordination (e.g., indole group in tryptophan) result in **high yield**; those lacking such heteroatoms result in **low yield**.**

  - **Examples (High Yield)**:
    - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (Tryptophan)

  - **Examples (Low Yield)**:
    - **(2S)-2-amino-3-phenylpropanoic acid** (Phenylalanine)

  - **Rationale**: Heteroatoms in the aromatic side chain can coordinate with the metal center, enhancing catalytic activity. Aromatic side chains without coordinating heteroatoms do not contribute to metal binding and may introduce steric hindrance.

---

- **Rule 7**: **Modifiers possessing *multiple functional groups capable of chelation* (e.g., hydroxyl and carboxyl groups) in close proximity result in **high yield**; similar compounds lacking coordinating groups result in **low yield**.**

  - **Examples (High Yield)**:
    - **5-(4-hydroxyphenyl)pentanoic acid**

  - **Examples (Low Yield)**:
    - **3-(4-hydroxyphenyl)propanoic acid**

  - **Rationale**: Multiple coordinating groups enhance binding to the metal center through chelation, increasing catalyst effectiveness. Without these groups, coordination is less effective.

---

- **Rule 8**: **Modifiers with *sterically hindered functional groups* near coordinating sites result in **low yield** due to reduced coordination efficiency.**

  - **Examples (Low Yield)**:
    - **(2S)-6-acetamido-2-aminohexanoic acid**
    - **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid**

  - **Rationale**: Bulky substituents can obstruct access to coordination sites on the metal center, decreasing catalytic activity by hindering effective ligand-metal interactions.

---

- **Rule 9**: **Modifiers containing *fluorinated alkyl chains* result in **low yield** due to decreased coordination ability and increased hydrophobicity, which hinders interaction with the metal center.**

  - **Example (Low Yield)**:
    - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**

  - **Rationale**: Fluorination increases electronegativity and hydrophobic character, reducing the ability of the modifier to coordinate with the metal center and interact effectively within the catalyst system.

---

- **Rule 10**: **Modifiers that are *cyclic dicarboxylic acids* with multiple carbonyl groups (e.g., cyclic anhydrides or lactones) result in **high yield** due to enhanced chelation properties.**

  - **Example (High Yield)**:
    - **1,3-dioxo-2-benzofuran-5-carboxylic acid**

  - **Rationale**: Multiple carbonyl groups in a cyclic structure offer several points of coordination, facilitating strong multidentate binding to the metal center and improving catalytic performance.

---

- **Rule 11**: **Modifiers with *amide bonds adjacent to carboxyl groups* result in **low yield** due to altered electronic properties and reduced ability to coordinate with the metal center.**

  - **Example (Low Yield)**:
    - **2-[(4-hydroxybenzoyl)amino]acetic acid**

  - **Rationale**: The presence of an amide linkage can delocalize electron density and interfere with the carboxylate's ability to effectively coordinate with the metal, diminishing catalytic efficiency.

---

- **Rule 12**: **Modifiers containing *ether linkages* in aliphatic chains without additional coordinating groups result in **low yield**.**

  - **Examples (Low Yield)**:
    - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**
    - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**

  - **Rationale**: Ether oxygens are weaker ligands compared to hydroxyl or carboxylate groups. Ether linkages increase flexibility and can reduce the effectiveness of coordination with the metal center due to unfavorable conformations.

---

- **Rule 13**: **Modifiers that are *aromatic carboxylic acids* with *electron-withdrawing substituents* capable of coordination (e.g., nitro, bromomethyl groups) result in **high yield**; those with electron-donating substituents result in **low yield**.**

  - **Examples (High Yield)**:
    - **4-nitrobenzoic acid**
    - **4-(bromomethyl)benzoic acid**

  - **Examples (Low Yield)**:
    - **4-methylbenzoic acid**
    - **4-methoxybenzoic acid** (if present)

  - **Rationale**: Electron-withdrawing groups increase the acidity of the carboxylate and enhance its ability to coordinate with the metal center. Electron-donating groups decrease this ability, reducing catalytic effectiveness.

---

- **Rule 14**: **Modifiers with *aldehyde or ketone substituents* on the aromatic ring result in **low yield** due to potential side reactions with the metal center and reduced coordination ability.**

  - **Examples (Low Yield)**:
    - **4-formylbenzoic acid**
    - **5-formyl-2-hydroxybenzoic acid**

  - **Rationale**: Aldehyde and ketone groups can participate in undesired side reactions or chelation that competes with the intended coordination, leading to decreased catalyst activity.

---

- **Rule 15**: **Modifiers possessing *bulky hydrophobic groups in combination with coordinating substituents* result in **high yield** due to enhanced interactions with both the metal center and the hydrophobic regions of the catalyst.**

  - **Example (High Yield)**:
    - **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid**

  - **Rationale**: Bulky hydrophobic groups can interact with the catalyst's framework, while coordinating substituents (e.g., methoxy, ketone) enhance metal binding, synergistically improving catalytic performance.

---

**End of Rules**

---

These rules illustrate how combinations of specific functional groups and structural features within the molecular modifiers influence the yield of the reaction. By focusing on multiple sub-structures—such as chain length, presence of coordinating groups, and steric factors—the rules capture the underlying physical-chemical properties affecting catalytic activity. The rules aim to cover a broad range of the dataset while balancing simplicity and complexity, helping predict whether a given modifier will result in a high or low yield.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0

---------------------------------------------------------------


    Train Accuracy: 0.5142857142857142; Test Accuracy: 0.0
    Train Support: 0.0; Test Support: 0.0
    Train Confidence: 0.5; Test Confidence: 0.5
    Train Lift: 1.0; Test Lift: NONE
    Train Leverage: 0.0; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define the SMARTS patterns for each rule
    rules = [
        {
            'number': 1,
            'description': 'Rule 1: Long-chain aliphatic carboxylic acids (six carbons or more) without polar substituents result in high yield; introduction of polar groups such as hydroxyl or amino leads to low yield.',
            'patterns': {
                'high_yield': ['C{6,}[CX3](=O)[OX2H1]'],  # Long-chain aliphatic carboxylic acid (6 or more carbons)
                'low_yield': [
                    '[#6]{5,}[OX2H]',  # Hydroxyl group on chain of 5 or more carbons
                    '[#6]{5,}[NX3;H2,H1;!$(NC=O)]',  # Amino group on chain of 5 or more carbons
                ]
            },
            'prediction': {'high_yield': 1, 'low_yield': -1}
        },
        {
            'number': 2,
            'description': 'Rule 2: Aromatic carboxylic acids with para-position substituents capable of coordinating with metal centers result in high yield; those with electron-donating groups or non-coordinating substituents result in low yield.',
            'patterns': {
                'high_yield': [
                    'c1ccc([CX3](=O)[OX1H])cc1[NX3;H2,H1;!$(NC=O)]',  # Para-amino benzoic acid
                    'c1ccc([CX3](=O)[OX1H])cc1[N+](=O)[O-]',  # Para-nitro benzoic acid
                    'c1ccc([CX3](=O)[OX1H])cc1CBr',  # Para-bromomethyl benzoic acid
                ],
                'low_yield': [
                    'c1ccc([CX3](=O)[OX1H])cc1C',  # Para-methyl benzoic acid
                    'c1ccc([CX3](=O)[OX1H])cc1C=O',  # Para-formyl benzoic acid
                ]
            },
            'prediction': {'high_yield': 1, 'low_yield': -1}
        },
        # Additional rules can be added here following the same structure
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = {}
        for key in rule['patterns']:
            compiled_patterns[key] = [Chem.MolFromSmarts(p) for p in rule['patterns'][key]]
        rule['compiled_patterns'] = compiled_patterns
    
    # Initialize the result matrix
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                rule_match = 0
                match_found = False
                # Check high yield patterns
                for pat in rule['compiled_patterns'].get('high_yield', []):
                    if mol.HasSubstructMatch(pat):
                        rule_match = rule['prediction']['high_yield']
                        match_found = True
                        break
                # Check low yield patterns if no high yield match found
                if not match_found:
                    for pat in rule['compiled_patterns'].get('low_yield', []):
                        if mol.HasSubstructMatch(pat):
                            rule_match = rule['prediction']['low_yield']
                            match_found = True
                            break
                row.append(rule_match)
            except Exception:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

---

- **Rule 1**: **Modifiers that are *short-chain aliphatic amino acids* or *aminodicarboxylic acids* with chain lengths of five carbons or fewer and side-chain functional groups (e.g., amino, carboxyl) result in **high yield**; similar longer-chain amino acids or those lacking side-chain functional groups result in **low yield**.**

  - **Examples (High Yield)**:
    - **(2S)-2-aminobutanedioic acid** (Aspartic acid)
    - **(2S)-2-aminopentanedioic acid** (Glutamic acid)
    - **5-aminopentanoic acid**

  - **Examples (Low Yield)**:
    - **(2S)-6-acetamido-2-aminohexanoic acid**
    - **7-aminoheptanoic acid**
    - **8-aminooctanoic acid**

  - **Rationale**: Short-chain amino acids with coordinating side-chain groups are better positioned to chelate metal centers due to proximity and reduced flexibility. This enhances catalyst activity by promoting strong ligand-metal interactions. Longer chains increase flexibility and distance between functional groups, reducing coordination efficiency and catalytic performance.

---

- **Rule 2**: **Modifiers that are *aromatic carboxylic acids* substituted at the *para-position* with strongly electron-withdrawing groups capable of coordination (e.g., nitro, bromomethyl) result in **high yield**; those with electron-donating groups or groups that hinder coordination result in **low yield**.**

  - **Examples (High Yield)**:
    - **4-(bromomethyl)benzoic acid**
    - **4-nitrobenzoic acid**

  - **Examples (Low Yield)**:
    - **4-methylbenzoic acid**
    - **3-(4-hydroxyphenyl)propanoic acid**

  - **Rationale**: Electron-withdrawing groups increase the acidity of the carboxyl group and may facilitate stronger coordination with metal centers. They can also participate directly in coordination if they possess lone pairs (e.g., nitro groups). Electron-donating groups decrease acidity and may introduce steric hindrance, reducing the efficiency of metal-ligand interactions.

---

- **Rule 3**: **Modifiers that are *heteroaromatic carboxylic acids* with nitrogen atoms in the ring capable of coordinating to metal centers result in **high yield**; those lacking coordinating heteroatoms or with the carboxyl group disconnected from the heterocycle result in **low yield**.**

  - **Examples (High Yield)**:
    - **Pyridine-3-carboxylic acid** (Nicotinic acid)
    - **1H-pyrazole-4-carboxylic acid**
    - **2-oxo-1H-pyridine-4-carboxylic acid**

  - **Examples (Low Yield)**:
    - **4-pyridin-4-ylbenzoic acid**

  - **Rationale**: Nitrogen atoms in heteroaromatic rings can act as additional coordination sites, enhancing chelation with metal centers. This dual coordination strengthens metal-ligand interactions, improving catalyst performance. If the carboxyl group is not directly attached to the heterocycle, the potential for such synergistic coordination is diminished.

---

- **Rule 4**: **Modifiers that are *long-chain aliphatic carboxylic acids* (six carbons or more) *without polar functional groups* result in **high yield**; introduction of polar groups such as hydroxyl or amino leads to **low yield**.**

  - **Examples (High Yield)**:
    - **Octanoic acid**

  - **Examples (Low Yield)**:
    - **7-hydroxyheptanoic acid**
    - **7-aminoheptanoic acid**
    - **8-aminooctanoic acid**

  - **Rationale**: Non-polar long-chain acids can enhance hydrophobic interactions with the catalyst framework, potentially stabilizing the active metal center and facilitating substrate access. Polar substituents introduce hydrogen bonding and can disrupt these hydrophobic interactions, possibly leading to catalyst deactivation or reduced activity.

---

- **Rule 5**: **Modifiers containing *multiple hydroxyl groups* on a carbohydrate backbone (polyhydroxy acids) result in **high yield**; modifiers with ether linkages or single hydroxyl groups result in **low yield**.**

  - **Examples (High Yield)**:
    - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (Gluconic acid)

  - **Examples (Low Yield)**:
    - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**
    - **7-hydroxyheptanoic acid**

  - **Rationale**: Multiple hydroxyl groups provide several coordination sites for metal binding, enhancing catalyst stability and activity through multidentate chelation. Ether linkages introduce chain flexibility and are weaker ligands, reducing effective coordination due to entropic factors and less favorable conformations.

---

- **Rule 6**: **Modifiers that are *amino acids with aromatic side chains* containing heteroatoms capable of coordination (e.g., indole nitrogen in tryptophan) result in **high yield**; those with non-coordinating aromatic side chains result in **low yield**.**

  - **Examples (High Yield)**:
    - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (Tryptophan)

  - **Examples (Low Yield)**:
    - **(2S)-2-amino-3-phenylpropanoic acid** (Phenylalanine)

  - **Rationale**: Heteroatoms in the side chain (like the nitrogen in indole) can coordinate with metal centers, enhancing the overall chelation and stability of the catalyst. Aromatic side chains lacking heteroatoms do not contribute additional coordination sites and may not enhance catalytic activity.

---

- **Rule 7**: **Modifiers containing *aldehyde or ketone groups* adjacent to aromatic rings result in **low yield** due to potential side reactions and interference with coordination.**

  - **Examples (Low Yield)**:
    - **4-formylbenzoic acid**
    - **5-formyl-2-hydroxybenzoic acid**

  - **Rationale**: Aldehyde and ketone groups can undergo side reactions, such as imine formation with amines present in the reaction mixture, reducing the effective concentration of the modifier. Additionally, these groups may interfere with metal coordination by competing for binding sites or altering electronic properties unfavorably.

---

- **Rule 8**: **Modifiers containing *sulfur atoms*, especially *thiol groups* in aromatic systems, result in **low yield** due to potential poisoning of the metal catalyst.**

  - **Examples (Low Yield)**:
    - **4-sulfanylbenzoic acid**

  - **Rationale**: Sulfur-containing groups, particularly thiols, have a high affinity for metal centers and can bind irreversibly, deactivating the catalyst by forming stable metal-sulfur bonds. This diminishes the availability of active sites necessary for the desired catalytic reaction.

---

- **Rule 9**: **Modifiers with *fluorinated alkyl chains* result in **low yield** due to decreased coordination ability and increased hydrophobicity, which can hinder interaction with the metal center.**

  - **Example (Low Yield)**:
    - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**

  - **Rationale**: Fluorination enhances the electron-withdrawing nature of the alkyl chain, reducing the electron density on potential coordinating atoms. This weakens ligand-metal interactions. Additionally, highly fluorinated chains are exceptionally hydrophobic, which may impede effective integration into a mostly organic catalyst framework.

---

- **Rule 10**: **Modifiers that are *aromatic carboxylic acids* with *bulky electron-donating groups* at the *para-position* (e.g., methyl, methoxy) result in **low yield** due to steric hindrance and reduced coordination efficiency.**

  - **Examples (Low Yield)**:
    - **4-methylbenzoic acid**
    - **3-(4-hydroxyphenyl)propanoic acid**

  - **Rationale**: Bulky electron-donating substituents can sterically hinder the approach of the modifier to the metal center and decrease the acidity of the carboxyl group, making metal coordination less favorable. This reduces the effectiveness of the modifier in enhancing catalyst performance.

---

- **Rule 11**: **Modifiers with *ether linkages* in aliphatic chains and lacking additional strong coordinating groups result in **low yield**.**

  - **Examples (Low Yield)**:
    - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**
    - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**

  - **Rationale**: Ether oxygens are relatively weak ligands, and the flexibility introduced by ether linkages leads to entropic disadvantages in forming stable metal-ligand complexes. Without stronger coordinating groups to compensate, these modifiers are less effective in enhancing catalyst activity.

---

- **Rule 12**: **Modifiers that are *cyclic compounds with multiple carbonyl groups* capable of chelation (e.g., cyclic anhydrides or lactones) result in **high yield** due to enhanced multidentate coordination.**

  - **Example (High Yield)**:
    - **1,3-dioxo-2-benzofuran-5-carboxylic acid**

  - **Rationale**: Rigid cyclic structures with multiple carbonyl groups can act as chelating ligands, forming strong and stable complexes with metal centers. This multidentate binding enhances catalyst stability and activity by firmly anchoring the metal within the catalyst framework.

---

- **Rule 13**: **Modifiers combining *ketone functional groups* with neighboring carboxylic acids in aliphatic chains result in **low yield** due to potential interference with coordination and increased chain flexibility.**

  - **Example (Low Yield)**:
    - **4-oxoheptanedioic acid**

  - **Rationale**: The presence of ketone groups adjacent to carboxylic acids may form intramolecular hydrogen bonds or interact unfavorably with the metal center, reducing effective coordination. The increased flexibility of the aliphatic chain can also decrease the likelihood of simultaneous coordination of both functional groups.

---

**End of Rules**

---

These rules have been generated by analyzing the dataset and identifying patterns in how specific combinations of sub-structures and functional groups within the molecular modifiers influence the yield of the reaction. The rules consider underlying physical and chemical properties such as coordination ability, electronic effects, steric factors, and ligand-metal interactions. They aim to cover a broad range of the dataset while balancing simplicity and complexity, helping predict whether a given modifier will result in a high or low yield. Each rule integrates multiple functional group features to provide clear guidance on the expected catalytic outcome for modifiers fitting the described structural criteria.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13
0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6857142857142857; Test Accuracy: 0.0
    Train Support: 0.045714285714285714; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 2.035947712418301; Test Lift: NONE
    Train Leverage: 0.023183673469387756; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and features needed
    
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    # Primary amine group (-NH2)
    primary_amine = '[NX3H2]'
    # Amino group (-NH2 or -NH-)
    amino_group = '[NX3H2,NX3H1]'
    
    # Hydroxyl group (-OH)
    hydroxyl_group = '[OX2H]'
    # Ether linkage (-O-)
    ether_linkage = '[#6][OX2][#6]'
    
    # Aldehyde group (-CHO)
    aldehyde_group = '[CX3H1](=O)[#6]'
    # Ketone group (>C=O)
    ketone_group = '[CX3](=O)[#6]'
    # Nitro group (-NO2)
    nitro_group = '[NX3](=O)[O-]'
    
    # Halogen atom
    halogen = '[F,Cl,Br,I]'
    # Halogen attached to aromatic ring
    halogen_on_aromatic = '[c][F,Cl,Br,I]'
    # Electron-donating group (methoxy)
    methoxy_on_aromatic = '[c][OX2][CH3]'
    
    # Aromatic carboxylic acid
    aromatic_carboxylic_acid = '[c][CX3](=O)[OX2H1]'
    
    # Heteroaromatic ring containing nitrogen
    heteroaromatic_nitrogen = '[n]'
    
    # Thiol group (-SH)
    thiol_group = '[SX2H]'
    # Thioether (-S-)
    thioether_group = '[#16X2][#6]'
    
    # Fluorinated alkyl chain (with multiple C-F bonds)
    fluorinated_alkyl_chain = '[CX4]([F,Cl,Br,I])([F,Cl,Br,I])([F,Cl,Br,I])[#6]'
    
    # Multiple hydroxyl groups (polyol)
    polyol = '[OX2H]'
    
    # Patterns for side-chain functional groups
    side_chain_func_groups = [amino_group, carboxylic_acid]
    
    # Patterns for Rule 1
    rule1_patterns = [primary_amine, carboxylic_acid]
    rule1_side_chain_patterns = side_chain_func_groups
    
    # Patterns for Rule 2
    rule2_patterns = [aromatic_carboxylic_acid]
    rule2_EWG_patterns = [nitro_group, '[c][CH2Br]']  # Bromomethyl
    
    # Patterns for Rule 3
    rule3_patterns = ['[n][c][c][c][c][CX3](=O)[OX2H1]']
    
    # Patterns for Rule 4
    rule4_patterns = [carboxylic_acid]
    rule4_polar_groups = [hydroxyl_group, amino_group]
    
    # Patterns for Rule 5
    rule5_patterns = [carboxylic_acid, hydroxyl_group]
    
    # Patterns for Rule 6
    indole_ring = 'c1cc2c(c1)cc[nH]2'
    rule6_patterns = [primary_amine, carboxylic_acid, indole_ring]
    
    # Patterns for Rule 7
    aromatic_aldehyde = '[c][CX3H1](=O)'
    aromatic_ketone = '[c][CX3](=O)[#6]'
    rule7_patterns = [aromatic_aldehyde, aromatic_ketone]
    
    # Patterns for Rule 8
    aromatic_thiol = '[c][SX2H]'
    rule8_patterns = [aromatic_thiol]
    
    # Patterns for Rule 9
    rule9_patterns = [fluorinated_alkyl_chain]
    
    # Patterns for Rule 10
    para_methyl = '[c][CH3]'
    para_methoxy = '[c][OX2][CH3]'
    rule10_patterns = [aromatic_carboxylic_acid, para_methyl, para_methoxy]
    
    # Patterns for Rule 11
    rule11_patterns = [ether_linkage]
    
    # Patterns for Rule 12
    cyclic_anhydride = '[O]=[CX3]1[OX2][CX3](=O)[OX2]1'
    rule12_patterns = [cyclic_anhydride]
    
    # Patterns for Rule 13
    ketone_adjacent_carboxylic_acid = '[CX3](=O)[#6][CX3](=O)[OX2H1]'
    rule13_patterns = [ketone_adjacent_carboxylic_acid]
    
    # Compile patterns
    pattern_dict = {
        'Rule 1': {
            'patterns': rule1_patterns,
            'side_chain_patterns': rule1_side_chain_patterns,
            'max_carbons': 5,
            'prediction': 1
        },
        'Rule 2': {
            'patterns': rule2_patterns,
            'ewg_patterns': rule2_EWG_patterns,
            'prediction': 1
        },
        'Rule 3': {
            'patterns': rule3_patterns,
            'prediction': 1
        },
        'Rule 4': {
            'patterns': rule4_patterns,
            'exclude_patterns': rule4_polar_groups,
            'min_carbons':6,
            'prediction':1
        },
        'Rule 5': {
            'patterns': rule5_patterns,
            'hydroxyl_threshold':4,
            'prediction':1
        },
        'Rule 6': {
            'patterns': rule6_patterns,
            'prediction':1
        },
        'Rule 7': {
            'patterns': rule7_patterns,
            'prediction':-1
        },
        'Rule 8': {
            'patterns': rule8_patterns,
            'prediction':-1
        },
        'Rule 9': {
            'patterns': rule9_patterns,
            'prediction':-1
        },
        'Rule 10': {
            'patterns': rule10_patterns,
            'prediction':-1
        },
        'Rule 11': {
            'patterns': rule11_patterns,
            'prediction':-1
        },
        'Rule 12': {
            'patterns': rule12_patterns,
            'prediction':1
        },
        'Rule 13': {
            'patterns': rule13_patterns,
            'prediction':-1
        }
    }

    # Compile SMARTS patterns
    for rule in pattern_dict.values():
        compiled_patterns = [Chem.MolFromSmarts(pat) for pat in rule.get('patterns', [])]
        rule['compiled_patterns'] = compiled_patterns
        # Compile sub-patterns if any
        if 'ewg_patterns' in rule:
            rule['compiled_ewg_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule['ewg_patterns']]
        if 'side_chain_patterns' in rule:
            rule['compiled_side_chain_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule['side_chain_patterns']]
        if 'exclude_patterns' in rule:
            rule['compiled_exclude_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule['exclude_patterns']]

    # Initialize results list
    results = []
    rule_names = list(pattern_dict.keys())

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rule_names))
            continue
        row = []
        for rule_name in rule_names:
            rule = pattern_dict[rule_name]
            try:
                match = True
                # Apply exclude patterns
                if 'compiled_exclude_patterns' in rule:
                    for pat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for pat in rule['compiled_patterns']:
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Additional checks
                # For Rule 1: check for side-chain functional groups and chain length
                if rule_name == 'Rule 1':
                    num_carbons = sum(1 for atom in mol.GetAtoms() if atom.GetAtomicNum()==6)
                    if num_carbons > rule['max_carbons']:
                        match = False
                    else:
                        # Check for side-chain functional groups
                        side_chain_match = False
                        for pat in rule['compiled_side_chain_patterns']:
                            matches = mol.GetSubstructMatches(pat)
                            if len(matches) > 1:  # More than one occurrence implies side-chain
                                side_chain_match = True
                                break
                        if not side_chain_match:
                            match = False
                # For Rule 2: check for EWG attached to aromatic ring
                elif rule_name == 'Rule 2':
                    ewg_match = False
                    for pat in rule['compiled_ewg_patterns']:
                        if mol.HasSubstructMatch(pat):
                            ewg_match = True
                            break
                    if not ewg_match:
                        match = False
                # For Rule 4: check for minimum number of carbons and absence of polar groups
                elif rule_name == 'Rule 4':
                    num_carbons = sum(1 for atom in mol.GetAtoms() if atom.GetAtomicNum()==6)
                    if num_carbons < rule['min_carbons']:
                        match = False
                # For Rule 5: check for multiple hydroxyl groups
                elif rule_name == 'Rule 5':
                    hydroxyl_count = len(mol.GetSubstructMatches(Chem.MolFromSmarts(hydroxyl_group)))
                    if hydroxyl_count < rule['hydroxyl_threshold']:
                        match = False
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=rule_names)
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

---

- **Rule 1**: **Modifiers that are *short-chain aliphatic carboxylic acids* (3 to 6 carbons) with additional *strong coordinating groups* such as *amino*, *carboxyl*, or *thiol groups* result in **high yield**.**

  - **Examples (High Yield)**:
    - **(2S)-2-aminobutanedioic acid** (Aspartic acid)
    - **(2S)-2-aminopentanedioic acid** (Glutamic acid)
    - **5-aminopentanoic acid**
    - **3-sulfanylpropanoic acid** (3-Mercaptopropionic acid)

  - **Rationale**: Short-chain aliphatic acids with additional coordinating functional groups enhance metal-ligand interactions through effective chelation, improving catalyst activity and stability.

---

- **Rule 2**: **Modifiers that are *aromatic carboxylic acids* substituted at the *para-position* with *electron-withdrawing groups* capable of coordination (e.g., *amino*, *nitro*, *bromomethyl*) result in **high yield**.**

  - **Examples (High Yield)**:
    - **4-aminobenzoic acid**
    - **4-nitrobenzoic acid**
    - **4-(bromomethyl)benzoic acid**

  - **Rationale**: Electron-withdrawing substituents increase the acidity of the carboxyl group and introduce additional coordination sites, enhancing metal-ligand interactions and catalyst performance.

---

- **Rule 3**: **Modifiers that are *heteroaromatic carboxylic acids* with *nitrogen atoms in the ring* capable of coordination result in **high yield**.**

  - **Examples (High Yield)**:
    - **Pyridine-3-carboxylic acid** (Nicotinic acid)
    - **2-oxo-1H-pyridine-4-carboxylic acid**
    - **1H-pyrazole-4-carboxylic acid**

  - **Rationale**: Nitrogen heterocycles serve as effective ligands, donating electron density to metal centers and stabilizing the catalyst through strong coordination.

---

- **Rule 4**: **Modifiers that are *polyhydroxy carboxylic acids* result in **high yield** due to multiple coordination sites.**

  - **Example (High Yield)**:
    - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (Gluconic acid)

  - **Rationale**: Multiple hydroxyl groups provide several chelation points, enhancing metal binding and improving catalyst efficiency through multidentate coordination.

---

- **Rule 5**: **Modifiers that are *aromatic carboxylic acids* substituted with *aldehyde or ketone groups* result in **low yield** due to potential side reactions and interference with coordination.**

  - **Examples (Low Yield)**:
    - **4-formylbenzoic acid**
    - **5-formyl-2-hydroxybenzoic acid**

  - **Rationale**: Aldehyde and ketone groups can undergo side reactions or compete with the carboxyl group for metal coordination, reducing catalyst effectiveness.

---

- **Rule 6**: **Modifiers that are *perfluorinated carboxylic acids* result in **low yield** due to poor coordination ability.**

  - **Example (Low Yield)**:
    - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**

  - **Rationale**: Strong electron-withdrawing fluorine atoms decrease electron density on coordinating atoms, weakening metal-ligand interactions and diminishing catalytic activity.

---

- **Rule 7**: **Modifiers that are *amino acids with non-coordinating aromatic side chains* (e.g., *phenylalanine*) result in **low yield**.**

  - **Example (Low Yield)**:
    - **(2S)-2-amino-3-phenylpropanoic acid** (Phenylalanine)

  - **Rationale**: Aromatic side chains lacking coordinating heteroatoms do not enhance metal binding, leading to less effective catalyst modification and lower yield.

---

- **Rule 8**: **Modifiers that are *long-chain aliphatic carboxylic acids* (more than six carbons) with *terminal amino or hydroxyl groups* result in **low yield**.**

  - **Examples (Low Yield)**:
    - **7-aminoheptanoic acid**
    - **7-hydroxyheptanoic acid**
    - **8-aminooctanoic acid**

  - **Rationale**: Longer aliphatic chains increase flexibility and steric hindrance, reducing coordination efficiency and weakening metal-ligand interactions.

---

- **Rule 9**: **Modifiers that are *aromatic carboxylic acids* substituted at the *para-position* with *electron-donating groups* (e.g., *methyl groups*) result in **low yield**.**

  - **Example (Low Yield)**:
    - **4-methylbenzoic acid**

  - **Rationale**: Electron-donating groups decrease the acidity of the carboxyl group and do not provide additional coordination sites, leading to weaker metal-ligand interactions and diminished catalyst performance.

---

- **Rule 10**: **Modifiers with *aromatic thiol groups* result in **low yield** due to catalyst poisoning.**

  - **Example (Low Yield)**:
    - **4-sulfanylbenzoic acid**

  - **Rationale**: Aromatic thiol groups can bind irreversibly to metal centers, deactivating the catalyst through strong metal-sulfur bonds and inhibiting catalytic activity.

---

- **Rule 11**: **Modifiers that are *aliphatic carboxylic acids* with *ether linkages* and lacking strong coordinating groups result in **low yield**.**

  - **Example (Low Yield)**:
    - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**

  - **Rationale**: Ether oxygens are weak ligands, and the flexibility introduced by ether linkages reduces effective coordination due to entropic factors, decreasing catalytic efficiency.

---

- **Rule 12**: **Modifiers that are *amino acids with aromatic side chains* containing *coordinating heteroatoms* (e.g., the indole nitrogen in *tryptophan*) result in **high yield**.**

  - **Example (High Yield)**:
    - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (Tryptophan)

  - **Rationale**: Heteroatoms in the side chain can coordinate with metal centers, enhancing ligand-metal interactions and improving catalyst activity through additional binding sites.

---

- **Rule 13**: **Modifiers with *complex or bulky structures* that may interfere with coordination or cause steric hindrance result in **low yield**.**

  - **Examples (Low Yield)**:
    - **4-oxoheptanedioic acid**
    - **2-[(4-hydroxybenzoyl)amino]acetic acid**

  - **Rationale**: Bulky substituents and complex structures may hinder effective coordination with metal centers, reducing catalyst performance due to steric effects.

---

- **Rule 14**: **Modifiers that are *aromatic carboxylic acids* with *hydroxyl groups* on the aromatic ring result in variable yield depending on *chain length* and *positioning* of the hydroxyl group.**

  - **Examples**:
    - **High Yield**:
      - **5-(4-hydroxyphenyl)pentanoic acid**
    - **Low Yield**:
      - **3-(4-hydroxyphenyl)propanoic acid**

  - **Rationale**: The distance between the carboxyl group and the aromatic ring influences coordination efficiency; longer linkers may facilitate better interaction with the metal center, enhancing yield.

---

- **Rule 15**: **Modifiers that are *simple aliphatic carboxylic acids* without additional functional groups result in **high yield**.**

  - **Example (High Yield)**:
    - **Octanoic acid**

  - **Rationale**: Simple aliphatic acids may provide optimal spacing and minimal steric hindrance, allowing effective coordination with the metal center and promoting catalytic activity.

---

**End of Rules**

---

These rules illustrate the relationships between the structural features of molecular modifiers and the resulting yield of the reaction. Each rule combines multiple functional group features and considers underlying physicochemical properties such as coordination ability, electronic effects, and steric factors.

By following these rules, one can predict whether a given molecular modifier is likely to result in a high or low yield based on its structural characteristics. The rules prioritize broad coverage of the dataset while maintaining a balance between simplicity and complexity, providing clear guidance for selecting or designing modifiers to optimize the reaction yield.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,1,0,0,0,0,-1,0,0,0,0,0,0,0
1,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,-1,0,0,-1,-1,0,0,0,0,0,0
1,0,0,1,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,-1,0,-1,-1,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
1,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,1,0,1,-1,0,0,-1,-1,0,0,0,0,0,0
1,0,1,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,-1,0,0,-1,-1,-1,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0
0,1,1,0,-1,0,0,-1,-1,0,0,0,0,0,0
0,1,0,0,-1,0,-1,-1,-1,0,0,0,0,0,0
1,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0
0,1,1,0,-1,0,0,-1,-1,0,0,0,0,0,0
1,0,1,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,-1,0,0,-1,-1,0,-1,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,1,-1,0,0,-1,-1,0,0,0,0,0,0
0,1,0,0,-1,0,0,-1,-1,0,0,0,0,0,0
0,1,0,0,-1,0,0,-1,-1,0,0,0,0,0,0
1,0,1,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,-1,0,0,-1,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,1,0,0,-1,0,0,-1,-1,0,-1,0,-1,0,0
0,1,0,1,-1,0,-1,-1,-1,0,0,0,0,0,0
0,0,0,1,0,0,0,-1,0,0,0,0,0,0,0
1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,-1,0,0,0,0,0,0,0
0,1,0,1,-1,0,0,-1,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.8; Test Accuracy: 0.0
    Train Support: 0.2; Test Support: 0.0
    Train Confidence: 0.6903030303030303; Test Confidence: 0.4
    Train Lift: 1.371647851059616; Test Lift: NONE
    Train Leverage: 0.045551020408163265; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define the rules with SMARTS patterns and predictions
    # Each rule is a dictionary with keys: 'number', 'description', 'patterns', 'prediction'
    
    # SMARTS patterns for functional groups
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    amino_group = '[NX3;H2,H1][#6]'
    thiol_group = '[SX2H]'
    nitro_group = '[NX3](=O)=O'
    bromomethyl_group = '[CH2Br]'
    aromatic_ring = 'c1ccccc1'
    heteroaromatic_nitrogen = '[n]'
    hydroxyl_group = '[OX2H]'
    aldehyde_or_ketone = '[CX3]=[OX1]'
    perfluorinated_chain = '[CX4]([F])[F]'
    aromatic_thiol = '[c][SX2H]'
    ether_linkage = '[#6][OX2][#6]'
    indole_group = 'c1ccc2c(c1)[nH]c3c2cccc3'
    
    # Compile SMARTS patterns
    patterns = {
        'carboxylic_acid': Chem.MolFromSmarts(carboxylic_acid),
        'amino_group': Chem.MolFromSmarts(amino_group),
        'thiol_group': Chem.MolFromSmarts(thiol_group),
        'nitro_group': Chem.MolFromSmarts(nitro_group),
        'bromomethyl_group': Chem.MolFromSmarts(bromomethyl_group),
        'aromatic_ring': Chem.MolFromSmarts(aromatic_ring),
        'heteroaromatic_nitrogen': Chem.MolFromSmarts(heteroaromatic_nitrogen),
        'hydroxyl_group': Chem.MolFromSmarts(hydroxyl_group),
        'aldehyde_or_ketone': Chem.MolFromSmarts(aldehyde_or_ketone),
        'perfluorinated_chain': Chem.MolFromSmarts(perfluorinated_chain),
        'aromatic_thiol': Chem.MolFromSmarts(aromatic_thiol),
        'ether_linkage': Chem.MolFromSmarts(ether_linkage),
        'indole_group': Chem.MolFromSmarts(indole_group),
    }
    
    # Define the rules
    rules = [
        {
            'number': 1,
            'description': 'High Yield: Short-chain aliphatic carboxylic acids (3 to 6 carbons) with additional amino, carboxyl, or thiol groups.',
            'required': ['carboxylic_acid'],
            'additional': ['amino_group', 'thiol_group', 'carboxylic_acid'],
            'constraints': {'num_carbons': (3, 6)},
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'High Yield: Aromatic carboxylic acids substituted at the para-position with electron-withdrawing groups capable of coordination (amino, nitro, bromomethyl).',
            'required': ['aromatic_ring', 'carboxylic_acid'],
            'substituents': ['amino_group', 'nitro_group', 'bromomethyl_group'],
            'position': 'para',
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'High Yield: Heteroaromatic carboxylic acids with nitrogen atoms in the ring.',
            'required': ['heteroaromatic_nitrogen', 'carboxylic_acid'],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'High Yield: Polyhydroxy carboxylic acids (multiple hydroxyl groups).',
            'required': ['carboxylic_acid'],
            'additional': ['hydroxyl_group'],
            'min_count': {'hydroxyl_group': 2},
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Low Yield: Aromatic carboxylic acids substituted with aldehyde or ketone groups.',
            'required': ['aromatic_ring', 'carboxylic_acid', 'aldehyde_or_ketone'],
            'prediction': -1
        },
        {
            'number': 6,
            'description': 'Low Yield: Perfluorinated carboxylic acids.',
            'required': ['carboxylic_acid', 'perfluorinated_chain'],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Low Yield: Amino acids with non-coordinating aromatic side chains (e.g., phenylalanine).',
            'required': ['carboxylic_acid', 'aromatic_ring', 'amino_group'],
            'exclude': ['heteroaromatic_nitrogen'],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Low Yield: Long-chain aliphatic carboxylic acids (more than six carbons) with terminal amino or hydroxyl groups.',
            'required': ['carboxylic_acid'],
            'additional': ['amino_group', 'hydroxyl_group'],
            'constraints': {'num_carbons': (7, 100)},
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Low Yield: Aromatic carboxylic acids substituted at the para-position with electron-donating groups (e.g., methyl groups).',
            'required': ['aromatic_ring', 'carboxylic_acid'],
            'substituents': ['[CH3]'],
            'position': 'para',
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Low Yield: Modifiers with aromatic thiol groups.',
            'required': ['carboxylic_acid', 'aromatic_thiol'],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Low Yield: Aliphatic carboxylic acids with ether linkages lacking strong coordinating groups.',
            'required': ['carboxylic_acid', 'ether_linkage'],
            'exclude': ['amino_group', 'thiol_group'],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'High Yield: Amino acids with aromatic side chains containing coordinating heteroatoms (e.g., indole nitrogen in tryptophan).',
            'required': ['carboxylic_acid', 'indole_group', 'amino_group'],
            'prediction': 1
        },
        {
            'number': 13,
            'description': 'Low Yield: Modifiers with complex or bulky structures that may interfere with coordination.',
            'constraints': {'complexity': 'high'},
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'Variable Yield: Aromatic carboxylic acids with hydroxyl groups on the aromatic ring; yield depends on chain length and positioning.',
            'required': ['carboxylic_acid', 'aromatic_ring', 'hydroxyl_group'],
            'constraints': {'chain_length_effect': True},
            'prediction': 0  # Variable yield
        },
        {
            'number': 15,
            'description': 'High Yield: Simple aliphatic carboxylic acids without additional functional groups.',
            'required': ['carboxylic_acid'],
            'exclude': ['amino_group', 'thiol_group', 'hydroxyl_group', 'aromatic_ring'],
            'prediction': 1
        },
    ]
    
    # Compile required and exclude patterns for each rule
    for rule in rules:
        rule['compiled_required'] = [patterns[p] if p in patterns else Chem.MolFromSmarts(p) for p in rule.get('required', [])]
        rule['compiled_additional'] = [patterns[p] if p in patterns else Chem.MolFromSmarts(p) for p in rule.get('additional', [])]
        rule['compiled_exclude'] = [patterns[p] if p in patterns else Chem.MolFromSmarts(p) for p in rule.get('exclude', [])]
        if 'substituents' in rule:
            rule['compiled_substituents'] = [patterns[p] if p in patterns else Chem.MolFromSmarts(p) for p in rule['substituents']]
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns
                for pat in rule.get('compiled_exclude', []):
                    if mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Check required patterns
                for pat in rule.get('compiled_required', []):
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Check additional patterns (at least one must match)
                additional_patterns = rule.get('compiled_additional', [])
                if additional_patterns:
                    additional_match = any(mol.HasSubstructMatch(pat) for pat in additional_patterns)
                    if not additional_match:
                        match = False
                if not match:
                    row.append(0)
                    continue
                # Check constraints
                constraints = rule.get('constraints', {})
                # Number of carbons constraint
                if 'num_carbons' in constraints:
                    num_carbons = sum(1 for atom in mol.GetAtoms() if atom.GetAtomicNum() == 6)
                    min_c, max_c = constraints['num_carbons']
                    if num_carbons < min_c or num_carbons > max_c:
                        match = False
                # Minimum count of functional groups
                if 'min_count' in rule:
                    for group, count in rule['min_count'].items():
                        pat = patterns[group]
                        matches = mol.GetSubstructMatches(pat)
                        if len(matches) < count:
                            match = False
                            break
                if not match:
                    row.append(0)
                    continue
                # Position-specific substituents (e.g., para-position)
                if 'compiled_substituents' in rule and 'position' in rule:
                    # Implement position-specific matching if possible
                    # This is complex; for simplicity, we assume a match here
                    pass  # Placeholder for position-specific logic
                # Complexity constraint
                if constraints.get('complexity') == 'high':
                    # Placeholder: assume molecules with more than 15 heavy atoms are complex
                    heavy_atoms = mol.GetNumHeavyAtoms()
                    if heavy_atoms <= 15:
                        match = False
                # Chain length effect
                if constraints.get('chain_length_effect'):
                    # Placeholder: skip for now
                    pass
                # Append prediction if all checks passed
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df
--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

---

- **Rule 1**: **Modifiers that are *aliphatic dicarboxylic acids* with an additional *amino group* on the alpha carbon result in **high yield**.**

  - **Examples (High Yield)**:
    - **(2S)-2-aminobutanedioic acid** (Aspartic acid)
    - **(2S)-2-aminopentanedioic acid** (Glutamic acid)

  - **Rationale**: The presence of two carboxylate groups and an amino group allows for tridentate coordination with metal centers. This multidentate binding enhances the stability and activity of the catalyst by forming strong complexes with the metal ion, facilitating efficient electron transfer during the reaction.

---

- **Rule 2**: **Modifiers that are *aromatic carboxylic acids* substituted at the *para-position* with an *amino* or *nitro* group result in **high yield**.**

  - **Examples (High Yield)**:
    - **4-aminobenzoic acid**
    - **4-nitrobenzoic acid**

  - **Rationale**: Amino and nitro groups can coordinate with metal centers or influence the electronic properties of the aromatic ring. The para-substitution positions these groups optimally for interaction, enhancing metal-ligand coordination, and increasing the acidity of the carboxyl group, which strengthens binding to the metal ion.

---

- **Rule 3**: **Modifiers that are *heterocyclic carboxylic acids* containing *nitrogen atoms* in the ring capable of coordination result in **high yield**.**

  - **Examples (High Yield)**:
    - **Pyridine-3-carboxylic acid** (Nicotinic acid)
    - **1H-pyrazole-4-carboxylic acid**

  - **Rationale**: Nitrogen atoms in heterocycles can act as electron donors, coordinating with metal centers. This coordination enhances the electron density at the metal ion, improving catalytic activity. The rigidity of the heterocycle also contributes to the stability of the metal-ligand complex.

---

- **Rule 4**: **Modifiers that are *aliphatic carboxylic acids* with multiple *hydroxyl groups* (polyhydroxy acids) result in **high yield**.**

  - **Example (High Yield)**:
    - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (Gluconic acid)

  - **Rationale**: Multiple hydroxyl groups provide several coordination sites for metal binding. This multidentate interaction increases the strength and stability of the metal complex, enhancing catalytic efficiency by facilitating effective electron transfer processes.

---

- **Rule 5**: **Modifiers that are *short-chain aliphatic carboxylic acids* with a *thiol group* result in **high yield**.**

  - **Example (High Yield)**:
    - **3-sulfanylpropanoic acid** (3-Mercaptopropionic acid)

  - **Rationale**: Thiol groups have a high affinity for metal ions, forming strong metal-sulfur bonds. In short-chain acids, the minimal steric hindrance allows the thiol and carboxyl groups to coordinate simultaneously with the metal center, enhancing catalyst performance.

---

- **Rule 6**: **Modifiers that are *simple aliphatic carboxylic acids* with chain lengths up to 8 carbons and no additional functional groups result in **high yield**.**

  - **Example (High Yield)**:
    - **Octanoic acid**

  - **Rationale**: These acids can effectively coordinate with metal centers through their carboxyl group without interference from other functional groups. The optimal chain length balances hydrophobic interactions and solubility, maintaining catalyst activity.

---

- **Rule 7**: **Modifiers that are *aromatic carboxylic acids* substituted with *aldehyde groups* result in **low yield**.**

  - **Examples (Low Yield)**:
    - **4-formylbenzoic acid**
    - **5-formyl-2-hydroxybenzoic acid**

  - **Rationale**: Aldehyde groups are reactive and can undergo side reactions, such as condensation or oxidation, which may deactivate the catalyst. They can also interfere with metal coordination by competing with the carboxyl group, reducing effective metal-ligand interactions.

---

- **Rule 8**: **Modifiers that are *aromatic carboxylic acids* with *para-substituted methyl or methoxy groups* result in **low yield**.**

  - **Examples (Low Yield)**:
    - **4-methylbenzoic acid**
    - **3-(4-hydroxyphenyl)propanoic acid**

  - **Rationale**: Electron-donating groups like methyl and methoxy decrease the acidity of the carboxyl group, weakening its ability to coordinate with metal ions. They do not provide additional coordination sites, resulting in less effective catalyst modification.

---

- **Rule 9**: **Modifiers that are *long-chain aliphatic carboxylic acids* (more than 6 carbons) with *terminal amino or hydroxyl groups* result in **low yield**.**

  - **Examples (Low Yield)**:
    - **7-aminoheptanoic acid**
    - **7-hydroxyheptanoic acid**
    - **8-aminooctanoic acid**

  - **Rationale**: Long aliphatic chains increase flexibility and steric hindrance, reducing the likelihood of simultaneous coordination of functional groups to the metal center. This results in weaker metal-ligand interactions and diminished catalytic activity.

---

- **Rule 10**: **Modifiers that are *perfluorinated carboxylic acids* result in **low yield**.**

  - **Example (Low Yield)**:
    - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**

  - **Rationale**: Fluorine's strong electronegativity withdraws electron density from the carboxylate group, decreasing its ability to coordinate with metal ions. The resultant weak metal-ligand interactions lead to poor catalyst performance.

---

- **Rule 11**: **Modifiers that are *aromatic carboxylic acids* with *thiol groups* on the aromatic ring result in **low yield** due to catalyst poisoning.**

  - **Example (Low Yield)**:
    - **4-sulfanylbenzoic acid**

  - **Rationale**: Aromatic thiol groups can form very strong bonds with metal centers, potentially leading to irreversible binding that deactivates the catalyst by blocking active sites needed for the reaction.

---

- **Rule 12**: **Modifiers that are *aliphatic carboxylic acids* with long *polyether chains* result in **low yield**.**

  - **Example (Low Yield)**:
    - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**

  - **Rationale**: The ether oxygen atoms have lone pairs but are poor ligands due to the electron-withdrawing effect of adjacent oxygen atoms. The flexibility and steric bulk of polyether chains hinder effective coordination with the metal center.

---

- **Rule 13**: **Modifiers that are *amino acids* with *non-coordinating side chains*, such as a *phenyl group*, result in **low yield**.**

  - **Example (Low Yield)**:
    - **(2S)-2-amino-3-phenylpropanoic acid** (Phenylalanine)

  - **Rationale**: Side chains lacking coordinating heteroatoms do not contribute to metal binding. The phenyl group is hydrophobic and does not facilitate additional interactions with the metal center, resulting in weaker overall coordination.

---

- **Rule 14**: **Modifiers that are *amino acids* with side chains containing *thioether groups* result in **low yield**.**

  - **Example (Low Yield)**:
    - **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid**

  - **Rationale**: Thioether sulfur atoms are less effective at coordinating with metal ions compared to thiol sulfur. Additionally, the bulkiness of the thioether side chain can introduce steric hindrance, reducing effective metal-ligand interactions.

---

- **Rule 15**: **Modifiers that are *dicarboxylic acids* with *keto groups* in the chain result in **low yield**.**

  - **Example (Low Yield)**:
    - **4-oxoheptanedioic acid**

  - **Rationale**: Ketone groups can participate in keto-enol tautomerism and may interfere with metal coordination by engaging in intramolecular hydrogen bonding or forming enolates. This reduces the availability of coordination sites for the metal ion.

---

**End of Rules**

---

These rules describe the relationships between the structural features of molecular modifiers and their influence on the yield of the reaction. Each rule combines multiple functional group features and considers underlying physicochemical properties such as coordination ability, electronic effects, and steric factors.

By following these rules, one can predict whether a given molecular modifier is likely to result in a high or low yield based on its structural characteristics. The rules prioritize broad coverage of the dataset while maintaining a balance between simplicity and complexity, providing clear guidance for selecting or designing modifiers to optimize the reaction yield.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,1,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.5428571428571428; Test Accuracy: 0.0
    Train Support: 0.02857142857142857; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 2.058823529411765; Test Lift: NONE
    Train Leverage: 0.014693877551020407; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and structural features
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    
    # Amino group (-NH2)
    primary_amino = '[NX3H2]'
    
    # Dicarboxylic acid (two carboxylic acid groups)
    dicarboxylic_acid = '[#6][CX3](=O)[OX2H1]'  # Simplified pattern
    
    # Aliphatic chain with amino group on alpha carbon
    amino_on_alpha = '[NX3H2][CX4H]'
    
    # Aromatic ring with carboxylic acid
    aromatic_carboxylic_acid = 'c[C](=O)[O]'
    
    # Para-substituted amino group on aromatic ring
    para_amino_substituted_ring = 'c1ccc([NX3H2])cc1C(=O)[O]'  # Simplified pattern
    
    # Para-substituted nitro group on aromatic ring
    para_nitro_substituted_ring = 'c1ccc([NX3](=O)=O)cc1C(=O)[O]'
    
    # Heterocyclic ring containing nitrogen atoms with carboxylic acid
    heterocyclic_nitrogen_ring = '[n][c][c][c][c][C](=O)[O]'
    
    # Polyhydroxy aliphatic carboxylic acid (multiple hydroxyl groups)
    polyhydroxy_acid = '[CX4;!$(C([OX2H])[OX2H])][OX2H]'
    
    # Thiol group (-SH)
    thiol_group = '[SX2H]'
    
    # Long aliphatic chain (more than 6 carbons)
    long_aliphatic_chain = '[CH2]' * 6
    
    # Aldehyde group attached to aromatic ring
    aromatic_aldehyde = 'c[C](=O)[H]'
    
    # Para-substituted methyl or methoxy groups on aromatic ring
    para_methyl_on_ring = 'c1ccc(C)cc1C(=O)[O]'
    para_methoxy_on_ring = 'c1ccc(OC)cc1C(=O)[O]'
    
    # Perfluorinated carboxylic acid
    perfluoro_acid = '[CX4]([F])([F])([F])[C](=O)[OX2H1]'
    
    # Aromatic thiol group
    aromatic_thiol = 'c[S][H]'
    
    # Polyether chain in aliphatic carboxylic acid
    polyether_chain = '[OX2][CX4][CX4][OX2][CX4][CX4][OX2][CX4][CX4][C](=O)[O]'
    
    # Amino acids with non-coordinating side chains (e.g., phenyl group)
    amino_acid_non_coord_side_chain = '[NX3H2][CX4H]([CX3](=O)[OX2H1])[CX4][c]'
    
    # Amino acids with thioether side chains
    amino_acid_thioether = '[NX3H2][CX4H]([CX3](=O)[OX2H1])[CX4][CX4][SX2][CX4]'
    
    # Dicarboxylic acids with keto groups in the chain
    keto_dicarboxylic_acid = '[CX3](=O)[CX4][CX3](=O)[CX4][CX3](=O)[OX2H1]'
    
    # Compile SMARTS patterns
    patterns = {
        'carboxylic_acid': Chem.MolFromSmarts(carboxylic_acid),
        'primary_amino': Chem.MolFromSmarts(primary_amino),
        'dicarboxylic_acid': Chem.MolFromSmarts(dicarboxylic_acid),
        'amino_on_alpha': Chem.MolFromSmarts(amino_on_alpha),
        'aromatic_carboxylic_acid': Chem.MolFromSmarts(aromatic_carboxylic_acid),
        'para_amino_substituted_ring': Chem.MolFromSmarts(para_amino_substituted_ring),
        'para_nitro_substituted_ring': Chem.MolFromSmarts(para_nitro_substituted_ring),
        'heterocyclic_nitrogen_ring': Chem.MolFromSmarts(heterocyclic_nitrogen_ring),
        'polyhydroxy_acid': Chem.MolFromSmarts(polyhydroxy_acid),
        'thiol_group': Chem.MolFromSmarts(thiol_group),
        'long_aliphatic_chain': Chem.MolFromSmarts(long_aliphatic_chain),
        'aromatic_aldehyde': Chem.MolFromSmarts(aromatic_aldehyde),
        'para_methyl_on_ring': Chem.MolFromSmarts(para_methyl_on_ring),
        'para_methoxy_on_ring': Chem.MolFromSmarts(para_methoxy_on_ring),
        'perfluoro_acid': Chem.MolFromSmarts(perfluoro_acid),
        'aromatic_thiol': Chem.MolFromSmarts(aromatic_thiol),
        'polyether_chain': Chem.MolFromSmarts(polyether_chain),
        'amino_acid_non_coord_side_chain': Chem.MolFromSmarts(amino_acid_non_coord_side_chain),
        'amino_acid_thioether': Chem.MolFromSmarts(amino_acid_thioether),
        'keto_dicarboxylic_acid': Chem.MolFromSmarts(keto_dicarboxylic_acid)
    }
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are aliphatic dicarboxylic acids with an additional amino group on the alpha carbon result in high yield.',
            'patterns': ['dicarboxylic_acid', 'amino_on_alpha'],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers that are aromatic carboxylic acids substituted at the para-position with an amino or nitro group result in high yield.',
            'patterns': ['para_amino_substituted_ring', 'para_nitro_substituted_ring'],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers that are heterocyclic carboxylic acids containing nitrogen atoms in the ring capable of coordination result in high yield.',
            'patterns': ['heterocyclic_nitrogen_ring'],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers that are aliphatic carboxylic acids with multiple hydroxyl groups (polyhydroxy acids) result in high yield.',
            'patterns': ['polyhydroxy_acid'],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers that are short-chain aliphatic carboxylic acids with a thiol group result in high yield.',
            'patterns': ['carboxylic_acid', 'thiol_group'],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers that are simple aliphatic carboxylic acids with chain lengths up to 8 carbons and no additional functional groups result in high yield.',
            'patterns': ['carboxylic_acid'],
            'exclude_patterns': ['long_aliphatic_chain', 'primary_amino', 'thiol_group', 'polyhydroxy_acid'],
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'Modifiers that are aromatic carboxylic acids substituted with aldehyde groups result in low yield.',
            'patterns': ['aromatic_aldehyde'],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Modifiers that are aromatic carboxylic acids with para-substituted methyl or methoxy groups result in low yield.',
            'patterns': ['para_methyl_on_ring', 'para_methoxy_on_ring'],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers that are long-chain aliphatic carboxylic acids (more than 6 carbons) with terminal amino or hydroxyl groups result in low yield.',
            'patterns': ['long_aliphatic_chain', 'primary_amino', 'polyhydroxy_acid'],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers that are perfluorinated carboxylic acids result in low yield.',
            'patterns': ['perfluoro_acid'],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Modifiers that are aromatic carboxylic acids with thiol groups on the aromatic ring result in low yield due to catalyst poisoning.',
            'patterns': ['aromatic_thiol'],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'Modifiers that are aliphatic carboxylic acids with long polyether chains result in low yield.',
            'patterns': ['polyether_chain'],
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Modifiers that are amino acids with non-coordinating side chains, such as a phenyl group, result in low yield.',
            'patterns': ['amino_acid_non_coord_side_chain'],
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'Modifiers that are amino acids with side chains containing thioether groups result in low yield.',
            'patterns': ['amino_acid_thioether'],
            'prediction': -1
        },
        {
            'number': 15,
            'description': 'Modifiers that are dicarboxylic acids with keto groups in the chain result in low yield.',
            'patterns': ['keto_dicarboxylic_acid'],
            'prediction': -1
        }
    ]
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = False
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for excl in rule['exclude_patterns']:
                        excl_pat = patterns[excl]
                        if mol.HasSubstructMatch(excl_pat):
                            match = False
                            break
                    else:
                        match = True
                else:
                    match = True
                if match:
                    # Check required patterns
                    for pat_name in rule['patterns']:
                        pat = patterns[pat_name]
                        if not mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if match:
                        row.append(rule['prediction'])
                    else:
                        row.append(0)
                else:
                    row.append(0)
            except:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

---

- **Rule 1**: **Modifiers containing multiple coordinating groups (e.g., carboxylate, amino, hydroxyl) in proximity result in **high yield**.**

  - **Examples (High Yield)**:
    - **(2S)-2-aminobutanedioic acid** (Aspartic acid)
    - **(2S)-2-aminopentanedioic acid** (Glutamic acid)
    - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (Gluconic acid)

  - **Rationale**: The presence of multiple coordinating groups close to each other enhances the ability to chelate the metal center, improving catalyst efficiency through stronger and more stable metal-ligand complexes.

---

- **Rule 2**: **Modifiers that are aromatic carboxylic acids with strong electron-withdrawing groups (e.g., nitro, halogens) at the para position result in **high yield**.**

  - **Examples (High Yield)**:
    - **4-nitrobenzoic acid**
    - **4-(bromomethyl)benzoic acid**

  - **Rationale**: Electron-withdrawing groups increase the acidity of the carboxyl group, strengthening its ability to coordinate with metal ions and enhancing catalytic activity through improved electron acceptance.

---

- **Rule 3**: **Modifiers that are heterocyclic carboxylic acids containing nitrogen atoms capable of coordination result in **high yield**.**

  - **Examples (High Yield)**:
    - **Pyridine-3-carboxylic acid** (Nicotinic acid)
    - **1H-pyrazole-4-carboxylic acid**

  - **Rationale**: Nitrogen atoms in heterocycles act as additional coordination sites, forming strong complexes with metal centers and enhancing electron density at the metal ion, which improves catalytic reactivity.

---

- **Rule 4**: **Modifiers that are aromatic carboxylic acids with electron-donating groups (e.g., methyl, methoxy) at the para position result in **low yield** unless they have additional functional groups capable of coordination.**

  - **Examples (Low Yield)**:
    - **4-methylbenzoic acid**
    - **3-(4-hydroxyphenyl)propanoic acid**

  - **Counterexample (High Yield)**:
    - **4-aminobenzoic acid**

  - **Rationale**: Electron-donating groups decrease the acidity of the carboxyl group, weakening coordination with metal ions. However, additional coordinating groups like an amino group can compensate by providing alternative coordination sites.

---

- **Rule 5**: **Modifiers with functional groups that interfere with metal coordination, such as aldehydes or perfluoroalkyl chains, result in **low yield**.**

  - **Examples (Low Yield)**:
    - **4-formylbenzoic acid**
    - **5-formyl-2-hydroxybenzoic acid**
    - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**

  - **Rationale**: Aldehyde groups may undergo side reactions or inhibit coordination, while perfluoroalkyl chains are strongly electron-withdrawing, reducing the electron density of the carboxylate and weakening metal-ligand interactions.

---

- **Rule 6**: **Modifiers that are aliphatic carboxylic acids with long carbon chains (>6 carbons) and no additional functional groups result in **high yield**; the presence of distal functional groups may reduce yield.**

  - **Example (High Yield)**:
    - **Octanoic acid**

  - **Examples (Low Yield)**:
    - **7-hydroxyheptanoic acid**
    - **8-aminooctanoic acid**

  - **Rationale**: Long-chain aliphatic acids without interfering groups coordinate effectively via the carboxyl group. Additional functional groups may not assist in coordination and could introduce steric hindrance or reduce solubility, affecting catalyst interaction.

---

- **Rule 7**: **Modifiers with sulfur-containing groups in aliphatic chains result in **high yield** if the sulfur atom can coordinate without causing catalyst deactivation.**

  - **Example (High Yield)**:
    - **3-sulfanylpropanoic acid**

  - **Example (Low Yield)**:
    - **4-sulfanylbenzoic acid**

  - **Rationale**: Sulfur atoms can act as soft ligands for metal coordination. When attached to aliphatic chains, they enhance coordination without poisoning the catalyst. In contrast, aromatic thiols may bind too strongly, blocking active sites.

---

- **Rule 8**: **Modifiers that are amino acids with side chains containing coordinating heteroatoms (e.g., nitrogen in indole rings) result in **high yield**.**

  - **Example (High Yield)**:
    - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (Tryptophan)

  - **Rationale**: Side chains with heteroatoms provide additional coordination sites, forming more stable and active metal-ligand complexes, improving catalytic performance.

---

- **Rule 9**: **Modifiers with flexible polyether chains or bulky substituents near coordinating groups result in **low yield** due to steric hindrance and reduced effective coordination.**

  - **Example (Low Yield)**:
    - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**

  - **Rationale**: Steric hindrance from bulky or flexible chains can impede the approach of the coordinating groups to the metal center, decreasing catalyst efficiency.

---

- **Rule 10**: **Modifiers containing keto groups adjacent to the carboxyl group in aliphatic chains result in **low yield** due to potential interference with coordination.**

  - **Example (Low Yield)**:
    - **4-oxoheptanedioic acid**

  - **Rationale**: Keto groups near carboxyl groups may form intramolecular interactions or enolize, reducing the availability of the carboxylate for effective metal coordination.

---

- **Rule 11**: **Modifiers that are amino acids with hydrophobic side chains lacking additional coordinating groups tend to result in **low yield**.**

  - **Example (Low Yield)**:
    - **(2S)-2-amino-3-phenylpropanoic acid** (Phenylalanine)

  - **Rationale**: Hydrophobic side chains without heteroatoms do not offer additional coordination sites, leading to weaker metal-ligand interactions and less effective catalysis.

---

- **Rule 12**: **Modifiers that are aromatic carboxylic acids with ortho-hydroxyl groups result in **variable yield**, influenced by their ability to form chelating rings with metal centers.**

  - **Example (High Yield)**:
    - **1,3-dioxo-2-benzofuran-5-carboxylic acid**

  - **Example (Low Yield)**:
    - **2-[(4-hydroxybenzoyl)amino]acetic acid**

  - **Rationale**: Ortho-hydroxyl groups can facilitate chelation, but the overall molecular structure and additional substituents affect their coordination effectiveness and thus the yield.

---

**End of Rules**

---

These rules illustrate the relationships between structural features of molecular modifiers and their impact on the yield of the radical-mediated remote δ-C(sp³)–H bond functionalization reaction. By combining multiple substructures and considering physicochemical properties such as coordination ability, electronic effects, and steric factors, the rules provide clear predictions for whether a modifier will result in high or low yield.

**Summary of Key Insights:**

- **Coordination Enhancement**: Modifiers with multiple coordinating groups in close proximity (e.g., carboxylate, amino, hydroxyl, heterocyclic nitrogen) enhance metal-ligand interactions, leading to higher yields due to stronger and more stable catalyst complexes.

- **Electronic Effects**: Electron-withdrawing groups increase carboxylate acidity and coordination strength, improving yield. Electron-donating groups can decrease coordination ability unless compensated by additional coordinating sites.

- **Steric and Structural Factors**: Modifiers with bulky substituents or flexible chains near coordinating groups hinder effective coordination, resulting in lower yields. The overall molecular geometry influences the ability to form stable chelates with the metal center.

- **Functional Group Interference**: Certain functional groups like aldehydes, perfluoroalkyl chains, or aromatic thiols may interfere with metal coordination or deactivate the catalyst, leading to low yields.

- **Position of Functional Groups**: The location of coordinating or interfering functional groups (e.g., sulfur atoms, hydroxyl groups) within the molecule affects their impact on the yield.

By applying these rules, researchers can predict the potential effectiveness of new modifiers and inform the selection or design of molecular modifiers to optimize and control the reaction yield based on their structural characteristics.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12
1,0,1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0
1,0,1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,-1,0,0,0
1,0,1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0
1,0,1,0,0,0,0,1,0,0,0,0
1,0,1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0
1,0,1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,-1,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6; Test Accuracy: 1.0
    Train Support: 0.08571428571428572; Test Support: 0.5
    Train Confidence: 0.9; Test Confidence: 0.75
    Train Lift: 1.7957516339869284; Test Lift: NONE
    Train Leverage: 0.036326530612244896; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and substructures
    
    # Coordinating groups
    carboxylate = Chem.MolFromSmarts('[CX3](=O)[OX1-,OX2H1]')
    amino_group = Chem.MolFromSmarts('[NX3;H2,H1;!$([N][!C])]')  # Primary or secondary amines
    hydroxyl_group = Chem.MolFromSmarts('[OX2H]')
    
    coordinating_groups = [carboxylate, amino_group, hydroxyl_group]
    
    # Electron-withdrawing groups
    nitro_group = Chem.MolFromSmarts('[NX3+](=O)[OX1-]')
    halogen = Chem.MolFromSmarts('[F,Cl,Br,I]')
    
    # Aromatic carboxylic acid
    aromatic_carboxylic_acid = Chem.MolFromSmarts('c1ccc([CX3](=O)[OX1-,OX2H1])cc1')
    
    # Heterocyclic ring containing nitrogen
    heterocyclic_nitrogen = Chem.MolFromSmarts('[n]')
    
    # Electron-donating groups (EDGs)
    methyl_group = Chem.MolFromSmarts('C')
    methoxy_group = Chem.MolFromSmarts('CO')
    
    # Aldehyde group
    aldehyde = Chem.MolFromSmarts('[CX3H](=O)')
    
    # Perfluoroalkyl chain
    perfluoroalkyl = Chem.MolFromSmarts('C([F,Cl,Br,I])([F,Cl,Br,I])[F,Cl,Br,I]')  # Simplified pattern
    
    # Aliphatic carboxylic acid with long carbon chain (>6 carbons)
    aliphatic_carboxylic_acid = Chem.MolFromSmarts('C{6,}[CX3](=O)[OX1-,OX2H1]')  # Chain of at least 6 carbons
    
    # Sulfur-containing groups in aliphatic chains
    aliphatic_thiol = Chem.MolFromSmarts('C[CX4][SX2H]')
    aliphatic_thioether = Chem.MolFromSmarts('C[CX4][SX2][CX4]C')
    
    # Amino acids with coordinating heteroatoms in side chains
    indole_group = Chem.MolFromSmarts('c1cc2ccccc2[nH]1')
    
    # Polyether chains
    polyether_chain = Chem.MolFromSmarts('[OX2H0][CX4][CX4][OX2H0]')
    
    # Keto group adjacent to carboxyl group
    keto_adjacent_carboxyl = Chem.MolFromSmarts('[CX3](=O)[CX3](=O)')
    
    # Hydrophobic side chains without additional coordinating groups
    hydrophobic_side_chain = Chem.MolFromSmarts('C(C)C')  # Simplified pattern
    
    # Aromatic carboxylic acid with ortho-hydroxyl groups
    ortho_hydroxyl_aromatic_acid = Chem.MolFromSmarts('c1c(O)cccc1[C](=O)[OX1-,OX2H1]')
    
    # Define rules with patterns and predictions
    rules = [
        {   # Rule 1
            'number': 1,
            'description': 'High yield: Modifiers containing multiple coordinating groups (e.g., carboxylate, amino, hydroxyl) in proximity.',
            'func': 'rule1',
            'prediction': 1
        },
        {   # Rule 2
            'number': 2,
            'description': 'High yield: Aromatic carboxylic acids with strong electron-withdrawing groups at the para position.',
            'patterns': [aromatic_carboxylic_acid],
            'additional_checks': 'rule2_additional_checks',
            'prediction': 1
        },
        {   # Rule 3
            'number': 3,
            'description': 'High yield: Heterocyclic carboxylic acids containing nitrogen atoms capable of coordination.',
            'patterns': [carboxylate, heterocyclic_nitrogen],
            'prediction': 1
        },
        {   # Rule 4
            'number': 4,
            'description': 'Low yield: Aromatic carboxylic acids with electron-donating groups at the para position without additional coordinating groups.',
            'patterns': [aromatic_carboxylic_acid],
            'additional_checks': 'rule4_additional_checks',
            'prediction': -1
        },
        {   # Rule 5
            'number': 5,
            'description': 'Low yield: Modifiers with functional groups that interfere with metal coordination, such as aldehydes or perfluoroalkyl chains.',
            'patterns': [aldehyde, perfluoroalkyl],
            'prediction': -1
        },
        {   # Rule 6
            'number': 6,
            'description': 'High yield: Aliphatic carboxylic acids with long carbon chains (>6 carbons) and no additional functional groups.',
            'patterns': [aliphatic_carboxylic_acid],
            'exclude_patterns': [amino_group, hydroxyl_group, halogen],
            'prediction': 1
        },
        {   # Rule 7
            'number': 7,
            'description': 'High yield: Sulfur-containing groups in aliphatic chains if sulfur can coordinate without causing catalyst deactivation.',
            'patterns': [aliphatic_thiol, aliphatic_thioether],
            'prediction': 1
        },
        {   # Rule 8
            'number': 8,
            'description': 'High yield: Amino acids with side chains containing coordinating heteroatoms.',
            'patterns': [carboxylate, amino_group, indole_group],
            'prediction': 1
        },
        {   # Rule 9
            'number': 9,
            'description': 'Low yield: Modifiers with flexible polyether chains or bulky substituents near coordinating groups.',
            'patterns': [polyether_chain],
            'prediction': -1
        },
        {   # Rule 10
            'number': 10,
            'description': 'Low yield: Modifiers containing keto groups adjacent to the carboxyl group in aliphatic chains.',
            'patterns': [keto_adjacent_carboxyl],
            'prediction': -1
        },
        {   # Rule 11
            'number': 11,
            'description': 'Low yield: Amino acids with hydrophobic side chains lacking additional coordinating groups.',
            'patterns': [carboxylate, amino_group, hydrophobic_side_chain],
            'exclude_patterns': [hydroxyl_group, heterocyclic_nitrogen],
            'prediction': -1
        },
        {   # Rule 12
            'number': 12,
            'description': 'Variable yield: Aromatic carboxylic acids with ortho-hydroxyl groups.',
            'patterns': [ortho_hydroxyl_aromatic_acid],
            'prediction': 0  # Variable yield
        }
    ]
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = False
                # Rule-specific functions
                if rule.get('func') == 'rule1':
                    # Rule 1: Multiple coordinating groups in proximity
                    coord_atoms = []
                    for patt in coordinating_groups:
                        matches = mol.GetSubstructMatches(patt)
                        for match_atoms in matches:
                            coord_atoms.append(match_atoms[0])
                    # Check if there are at least two coordinating atoms
                    if len(coord_atoms) >= 2:
                        # Check proximity (within 3 bonds)
                        found = False
                        for i in range(len(coord_atoms)):
                            for j in range(i+1, len(coord_atoms)):
                                path_length = Chem.rdmolops.GetShortestPath(mol, coord_atoms[i], coord_atoms[j])
                                if len(path_length)-1 <= 3:
                                    found = True
                                    break
                            if found:
                                break
                        if found:
                            row.append(rule['prediction'])
                        else:
                            row.append(0)
                    else:
                        row.append(0)
                    continue
                # Additional checks for rules
                elif rule.get('additional_checks') == 'rule2_additional_checks':
                    # Rule 2: EWG at para position
                    # Find aromatic carboxylic acid matches
                    matches = mol.GetSubstructMatches(aromatic_carboxylic_acid)
                    if matches:
                        match = False
                        # For each match, check for EWG at para position
                        for match_atoms in matches:
                            ring_info = mol.GetRingInfo()
                            ring_atoms = ring_info.AtomRings()
                            for ring in ring_atoms:
                                if set(match_atoms).intersection(ring):
                                    # Get atom indices in the ring
                                    ring_atom_indices = list(ring)
                                    # Find carboxylate attachment point
                                    carboxylate_atom = match_atoms[match_atoms.index(match_atoms[-1])-1]
                                    # Find para position
                                    idx = ring_atom_indices.index(carboxylate_atom)
                                    para_idx = ring_atom_indices[(idx+3)%len(ring_atom_indices)]
                                    # Check for EWG at para position
                                    ewg_match = False
                                    for neighbor in mol.GetAtomWithIdx(para_idx).GetNeighbors():
                                        if neighbor.GetAtomicNum() in [9,17,35,53]:  # Halogens
                                            ewg_match = True
                                        elif neighbor.GetAtomicNum() == 7:  # Nitrogen (for nitro group)
                                            # Check if it's a nitro group
                                            for bond in neighbor.GetBonds():
                                                if bond.GetBondType() == Chem.rdchem.BondType.DOUBLE and bond.GetOtherAtomIdx(neighbor.GetIdx()) == para_idx:
                                                    ewg_match = True
                                        if ewg_match:
                                            break
                                    if ewg_match:
                                        match = True
                                        break
                            if match:
                                break
                        if match:
                            row.append(rule['prediction'])
                        else:
                            row.append(0)
                    else:
                        row.append(0)
                    continue
                elif rule.get('additional_checks') == 'rule4_additional_checks':
                    # Rule 4: Aromatic carboxylic acids with EDGs at para position without additional coordinating groups
                    matches = mol.GetSubstructMatches(aromatic_carboxylic_acid)
                    if matches:
                        match = False
                        for match_atoms in matches:
                            ring_info = mol.GetRingInfo()
                            ring_atoms = ring_info.AtomRings()
                            for ring in ring_atoms:
                                if set(match_atoms).intersection(ring):
                                    # Get atom indices in the ring
                                    ring_atom_indices = list(ring)
                                    # Find carboxylate attachment point
                                    carboxylate_atom = match_atoms[match_atoms.index(match_atoms[-1])-1]
                                    # Find para position
                                    idx = ring_atom_indices.index(carboxylate_atom)
                                    para_idx = ring_atom_indices[(idx+3)%len(ring_atom_indices)]
                                    # Check for EDG at para position
                                    edg_match = False
                                    para_atom = mol.GetAtomWithIdx(para_idx)
                                    for neighbor in para_atom.GetNeighbors():
                                        if neighbor.GetAtomicNum() == 6 and neighbor.GetDegree() == 1:  # Methyl group
                                            edg_match = True
                                        elif neighbor.GetAtomicNum() == 8:  # Oxygen (for methoxy group)
                                            edg_match = True
                                    if edg_match:
                                        # Check for additional coordinating groups
                                        has_additional_coordination = False
                                        for patt in coordinating_groups:
                                            if mol.HasSubstructMatch(patt):
                                                has_additional_coordination = True
                                                break
                                        if not has_additional_coordination:
                                            match = True
                                            break
                            if match:
                                break
                        if match:
                            row.append(rule['prediction'])
                        else:
                            row.append(0)
                    else:
                        row.append(0)
                    continue
                
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    excluded = False
                    for pat in rule['exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            excluded = True
                            break
                    if excluded:
                        row.append(0)
                        continue
                # Check required patterns
                for pat in rule.get('patterns', []):
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                    else:
                        match = True
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

---

1. **Modifiers containing both an amino group and at least one carboxylic acid group attached to an aliphatic chain of up to 6 carbons result in **high yield**.**

   - **Examples (High Yield)**:
     - **(2S)-2-aminobutanedioic acid** (Aspartic acid)
     - **(2S)-2-aminopentanedioic acid** (Glutamic acid)
     - **5-aminopentanoic acid**
     - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (Tryptophan)

   - **Rationale**: The presence of an amino group and carboxylate(s) allows for multiple coordination sites with the metal center. This enhances catalyst efficiency through strong chelation and stabilization of the active site.

---

2. **Modifiers that are aromatic carboxylic acids with strong electron-withdrawing groups at the para position result in **high yield**.**

   - **Examples (High Yield)**:
     - **4-nitrobenzoic acid**
     - **4-(bromomethyl)benzoic acid**

   - **Rationale**: Electron-withdrawing substituents increase the acidity of the carboxyl group, strengthening its ability to coordinate with metal ions. This enhances catalytic activity through improved electron acceptance at the metal center.

---

3. **Modifiers that are aromatic carboxylic acids with electron-donating groups (e.g., methyl, methoxy) at the para position result in **low yield**.**

   - **Examples (Low Yield)**:
     - **4-methylbenzoic acid**
     - **3-(4-hydroxyphenyl)propanoic acid**

   - **Rationale**: Electron-donating groups decrease the acidity of the carboxyl group, weakening metal-ligand coordination. This reduction in coordination strength leads to less effective catalyst performance.

---

4. **Modifiers that are heterocyclic carboxylic acids containing nitrogen atoms in the ring result in **high yield**.**

   - **Examples (High Yield)**:
     - **Pyridine-3-carboxylic acid** (Nicotinic acid)
     - **1H-pyrazole-4-carboxylic acid**

   - **Rationale**: Nitrogen atoms in heterocycles serve as strong coordinating sites, forming stable complexes with metal centers. This additional coordination enhances electron density at the metal ion, improving catalytic reactivity.

---

5. **Modifiers that are amino acids with side chains lacking coordinating heteroatoms result in **low yield**.**

   - **Examples (Low Yield)**:
     - **(2S)-2-amino-3-phenylpropanoic acid** (Phenylalanine)
     - **(2S)-6-acetamido-2-aminohexanoic acid**

   - **Rationale**: Side chains without coordinating groups do not contribute to metal binding, resulting in weaker overall coordination and decreased catalyst performance.

---

6. **Modifiers that are aliphatic carboxylic acids with a thiol group in the chain (e.g., mercaptoalkanoic acids) result in **high yield**.**

   - **Example (High Yield)**:
     - **3-sulfanylpropanoic acid**

   - **Rationale**: Thiol groups act as soft Lewis bases and can form strong bonds with metal ions, providing additional coordination that enhances the catalytic activity of the metal center.

---

7. **Modifiers that contain aldehyde or ketone groups adjacent to the carboxyl group result in **low yield**.**

   - **Examples (Low Yield)**:
     - **4-formylbenzoic acid**
     - **4-oxoheptanedioic acid**

   - **Rationale**: Carbonyl groups near the carboxylate can form intramolecular interactions or engage in side reactions, hindering the ability of the carboxylate to effectively coordinate with the metal center.

---

8. **Modifiers that are perfluorinated carboxylic acids result in **low yield**.**

   - **Example (Low Yield)**:
     - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**

   - **Rationale**: The strong electron-withdrawing effect of fluorine atoms reduces the electron density on the carboxylate oxygen, weakening its coordination ability with metal ions and diminishing catalytic efficiency.

---

9. **Modifiers that are polyhydroxylated aliphatic carboxylic acids result in **high yield**.**

   - **Example (High Yield)**:
     - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (Gluconic acid)

   - **Rationale**: Multiple hydroxyl groups provide additional hydrogen bonding and coordination sites with the metal center, enhancing catalyst stability and reactivity.

---

10. **Modifiers that are aliphatic carboxylic acids with remote amino or hydroxyl groups (on carbons beyond C-4) result in **low yield**.**

    - **Examples (Low Yield)**:
      - **7-aminoheptanoic acid**
      - **8-aminooctanoic acid**
      - **7-hydroxyheptanoic acid**

    - **Rationale**: Remote functional groups may not effectively coordinate with the metal center and can introduce steric hindrance, reducing the efficiency of metal-ligand interactions.

---

11. **Modifiers with bulky substituents (e.g., polyether chains) near the carboxyl group result in **low yield**.**

    - **Example (Low Yield)**:
      - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**

    - **Rationale**: Bulky groups can sterically hinder the approach and binding of the carboxylate group to the metal center, reducing the effectiveness of coordination and catalysis.

---

**End of Rules**

---

These rules capture the relationships between specific structural features of molecular modifiers and their impact on the yield of the radical-mediated remote δ-C(sp³)–H bond functionalization reaction. By considering combinations of functional groups and underlying physicochemical properties, the rules provide clear predictions for whether a modifier will result in high or low yield:

- **Coordination Enhancement**: Modifiers with multiple or strong coordinating groups (e.g., carboxylate, amino, heterocyclic nitrogen or sulfur atoms) increase coordination with metal centers, leading to higher yields.

- **Electronic Effects**: Electron-withdrawing groups enhance the acidity and coordination ability of carboxylate groups, improving catalyst performance. Electron-donating groups have the opposite effect, reducing yield.

- **Steric Hindrance**: Bulky substituents or flexible chains near coordinating groups can hinder effective metal-ligand interactions, resulting in lower yields due to decreased coordination efficiency.

- **Functional Group Interference**: Functional groups like aldehydes, ketones, or perfluoroalkyl chains can interfere with metal coordination or alter electronic properties, leading to lower yields.

- **Hydrophobicity and Coordination Sites**: Modifiers lacking coordinating heteroatoms in their side chains or those with remote functional groups generally result in lower yields due to weaker metal interactions or steric hindrance.

By applying these rules, researchers can predict the potential effectiveness of new modifiers based on their structural characteristics. This enables the selection or design of molecular modifiers to optimize and control the reaction yield, facilitating more efficient catalyst development.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11
0,0,0,1,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,1,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,1,0,0
0,0,0,0,0,1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0
1,0,0,1,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0
0,0,-1,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6571428571428571; Test Accuracy: 1.0
    Train Support: 0.08571428571428572; Test Support: 0.5
    Train Confidence: 0.9; Test Confidence: 0.75
    Train Lift: 1.8529411764705883; Test Lift: NONE
    Train Leverage: 0.037142857142857144; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups

    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX2H1]'

    # Amino group (-NH2 or -NH-)
    amino_group = '[NX3;H2,H1]'

    # Thiol group (-SH)
    thiol_group = '[SX2H]'

    # Aldehyde group
    aldehyde_group = '[CX3H](=O)'

    # Ketone group
    ketone_group = '[CX3](=O)[#6]'

    # Fluorine attached to carbon
    fluorine_on_carbon = '[CX4]([F])[F]'

    # Hydroxyl group (-OH)
    hydroxyl_group = '[OX2H]'

    # Aromatic carboxylic acid
    aromatic_carboxylic_acid = '[c][CX3](=O)[OX2H1]'

    # Heteroaromatic nitrogen
    heteroaromatic_nitrogen = '[n]'

    # Halogen attached to aromatic carbon
    halogen_on_aromatic = '[c][F,Cl,Br,I]'

    # Nitro group attached to aromatic carbon
    nitro_on_aromatic = '[c][NX3](=O)[O-]'

    # Methyl group attached to aromatic carbon
    methyl_on_aromatic = '[c][CH3]'

    # Methoxy group attached to aromatic carbon
    methoxy_on_aromatic = '[c][OX2][CH3]'

    # Ether linkage
    ether_linkage = '[#6][OX2][#6]'

    # Polyether chain near carboxylic acid
    polyether_chain = '[CX4][OX2][CX4][OX2][CX4]'

    # Define the rules with their associated patterns and predictions

    rules = [
        {
            'number': 1,
            'description': 'High Yield: Modifiers containing both an amino group and at least one carboxylic acid group.',
            'patterns': [
                [amino_group],  # Amino group
                [carboxylic_acid]  # Carboxylic acid group
            ],
            'prediction': 1
        },
        {
            'number':2,
            'description': 'High Yield: Modifiers that are aromatic carboxylic acids with strong electron-withdrawing groups on the aromatic ring.',
            'patterns': [
                [aromatic_carboxylic_acid],  # Aromatic carboxylic acid
                [halogen_on_aromatic, nitro_on_aromatic]  # EWG on aromatic ring
            ],
            'prediction':1
        },
        {
            'number':3,
            'description': 'Low Yield: Modifiers that are aromatic carboxylic acids with electron-donating groups on the aromatic ring.',
            'patterns': [
                [aromatic_carboxylic_acid],  # Aromatic carboxylic acid
                [methyl_on_aromatic, methoxy_on_aromatic]  # EDG on aromatic ring
            ],
            'prediction': -1
        },
        {
            'number':4,
            'description': 'High Yield: Modifiers that are heterocyclic carboxylic acids containing nitrogen atoms in the ring.',
            'patterns': [
                [heteroaromatic_nitrogen],  # Heterocyclic ring containing nitrogen
                [carboxylic_acid]  # Carboxylic acid group
            ],
            'prediction': 1
        },
        {
            'number':5,
            'description': 'Low Yield: Modifiers that are amino acids with side chains lacking coordinating heteroatoms.',
            'patterns': [
                [amino_group],  # Amino group
                [carboxylic_acid]  # Carboxylic acid group
            ],
            'exclude_patterns': [
                [thiol_group, hydroxyl_group, heteroaromatic_nitrogen],  # Exclude additional heteroatoms in side chains
            ],
            'prediction': -1
        },
        {
            'number':6,
            'description': 'High Yield: Modifiers that are aliphatic carboxylic acids with a thiol group in the chain.',
            'patterns': [
                [carboxylic_acid],  # Carboxylic acid group
                [thiol_group]  # Thiol group
            ],
            'prediction':1
        },
        {
            'number':7,
            'description': 'Low Yield: Modifiers that contain aldehyde or ketone groups adjacent to the carboxyl group.',
            'patterns': [
                ['[CX3](=O)[CX3H](=O)'],  # Carboxylic acid next to aldehyde
                ['[CX3](=O)[CX3](=O)[#6]']  # Carboxylic acid next to ketone
            ],
            'prediction': -1
        },
        {
            'number':8,
            'description': 'Low Yield: Modifiers that are perfluorinated carboxylic acids.',
            'patterns': [
                [carboxylic_acid],  # Carboxylic acid group
            ],
            'count_threshold': {'[F]':5}, # Molecule contains at least 5 fluorine atoms
            'prediction': -1
        },
        {
            'number':9,
            'description': 'High Yield: Modifiers that are polyhydroxylated aliphatic carboxylic acids.',
            'patterns': [
                [carboxylic_acid],  # Carboxylic acid group
                [hydroxyl_group],  # Hydroxyl group
            ],
            'count_threshold': {hydroxyl_group:4},  # At least 4 hydroxyl groups
            'prediction':1
        },
        {
            'number':10,
            'description': 'Low Yield: Modifiers that are aliphatic carboxylic acids with remote amino or hydroxyl groups (on carbons beyond C-4).',
            'patterns': [
                [carboxylic_acid],  # Carboxylic acid group
                [amino_group, hydroxyl_group],  # Amino or hydroxyl group
            ],
            'distance_threshold': {'min':5},  # The shortest path between carboxylic acid and amino/hydroxyl group is more than 4 bonds
            'prediction': -1
        },
        {
            'number':11,
            'description': 'Low Yield: Modifiers with bulky substituents (e.g., polyether chains) near the carboxyl group.',
            'patterns': [
                [carboxylic_acid],  # Carboxylic acid group
                [polyether_chain]  # Polyether chain
            ],
            'prediction':-1
        }
    ]

    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(p) for p in group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for group in rule['exclude_patterns']:
                compiled_group = [Chem.MolFromSmarts(p) for p in group]
                compiled_excludes.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_excludes
        # Compile count thresholds
        if 'count_threshold' in rule:
            compiled_counts = {}
            for smarts, count in rule['count_threshold'].items():
                pat = Chem.MolFromSmarts(smarts)
                compiled_counts[pat] = count
            rule['compiled_count_threshold'] = compiled_counts
    # Initialize results list
    results = []
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Exclude patterns
                if 'exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        if mol.HasSubstructMatch(pat):
                            group_match = True
                            break
                    if not group_match:
                        match = False
                        break
                # Check count thresholds
                if 'compiled_count_threshold' in rule:
                    for pat, threshold in rule['compiled_count_threshold'].items():
                        matches = mol.GetSubstructMatches(pat)
                        if len(matches) < threshold:
                            match = False
                            break
                # Check distance thresholds
                if 'distance_threshold' in rule:
                    # For simplicity, we will assume min distance between the two patterns
                    patterns = rule['compiled_patterns']
                    if len(patterns) >=2:
                        # Get atoms matching the first and second pattern
                        atoms1 = set()
                        for pat in patterns[0]:
                            matches = mol.GetSubstructMatches(pat)
                            for match in matches:
                                atoms1.update(match)
                        atoms2 = set()
                        for pat in patterns[1]:
                            matches = mol.GetSubstructMatches(pat)
                            for match in matches:
                                atoms2.update(match)
                        # Find shortest distances
                        min_distance = None
                        for atom_idx1 in atoms1:
                            for atom_idx2 in atoms2:
                                path = Chem.rdmolops.GetShortestPath(mol, atom_idx1, atom_idx2)
                                distance = len(path) -1
                                if min_distance is None or distance < min_distance:
                                    min_distance = distance
                        threshold = rule['distance_threshold']
                        if min_distance is None or min_distance < threshold.get('min',0):
                            match = False
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

---

1. **Modifiers that are α-amino acids with side chains containing coordinating heteroatoms (e.g., hydroxyl, amino, thiol groups) result in **high yield**.**

   - **Examples (High Yield)**:
     - **(2S)-2-aminopentanedioic acid** (Glutamic acid)
     - **(2S)-2-aminobutanedioic acid** (Aspartic acid)
     - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (Tryptophan)
     - **3-sulfanylpropanoic acid** (Similar to Cysteine)

   - **Rationale**: Side chains with coordinating heteroatoms can form strong interactions with the metal center, enhancing catalyst activity and increasing yield.

---

2. **Modifiers that are α-amino acids with non-coordinating side chains (e.g., alkyl or phenyl groups without heteroatoms) result in **low yield**.**

   - **Examples (Low Yield)**:
     - **(2S)-2-amino-3-phenylpropanoic acid** (Phenylalanine)
     - **(2S)-6-acetamido-2-aminohexanoic acid** (Derivative of Lysine)

   - **Rationale**: Lack of additional coordinating groups in the side chain leads to weaker metal-ligand interactions, resulting in lower catalytic efficiency and reduced yield.

---

3. **Modifiers that are aromatic carboxylic acids with para-substituents capable of coordinating with metals (e.g., amino, nitro groups) result in **high yield**.**

   - **Examples (High Yield)**:
     - **4-aminobenzoic acid**
     - **4-nitrobenzoic acid**
     - **4-(bromomethyl)benzoic acid**

   - **Rationale**: Coordinating groups at the para position enhance metal-ligand coordination, improving catalyst performance and increasing yield.

---

4. **Modifiers that are aromatic carboxylic acids with para-substituents that are non-coordinating or electron-donating groups (e.g., methyl, methoxy groups) result in **low yield**.**

   - **Examples (Low Yield)**:
     - **4-methylbenzoic acid**
     - **3-(4-hydroxyphenyl)propanoic acid**
     - **2-[(4-hydroxybenzoyl)amino]acetic acid**

   - **Rationale**: Electron-donating or non-coordinating groups decrease the acidity of the carboxyl group and do not assist in metal coordination, leading to reduced catalyst effectiveness.

---

5. **Modifiers that are heterocyclic carboxylic acids containing nitrogen atoms capable of coordinating with metals result in **high yield**.**

   - **Examples (High Yield)**:
     - **Pyridine-3-carboxylic acid** (Nicotinic acid)
     - **1H-pyrazole-4-carboxylic acid**
     - **2-oxo-1H-pyridine-4-carboxylic acid**

   - **Rationale**: Nitrogen atoms in heterocycles act as additional coordination sites, strengthening metal-ligand interactions and enhancing catalytic activity.

---

6. **Modifiers that are aliphatic carboxylic acids with proximal thiol groups result in **high yield**.**

   - **Example (High Yield)**:
     - **3-sulfanylpropanoic acid**

   - **Rationale**: Thiol groups are strong ligands that can form stable bonds with metal ions, improving catalyst stability and increasing yield.

---

7. **Modifiers that are aliphatic carboxylic acids with distal functional groups (e.g., amino or hydroxyl groups located beyond the fourth carbon) result in **low yield**.**

   - **Examples (Low Yield)**:
     - **7-aminoheptanoic acid**
     - **8-aminooctanoic acid**
     - **7-hydroxyheptanoic acid**

   - **Rationale**: Functional groups far from the carboxylate are less effective in coordinating with the metal center, leading to weaker catalyst interactions and lower yield.

---

8. **Modifiers that are aliphatic carboxylic acids with multiple hydroxyl groups near the carboxyl group result in **high yield**.**

   - **Example (High Yield)**:
     - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (Gluconic acid)

   - **Rationale**: Multiple hydroxyl groups provide additional coordination sites, enhancing metal binding and catalytic efficiency.

---

9. **Modifiers that contain aldehyde or ketone groups adjacent to the carboxyl group result in **low yield**.**

   - **Examples (Low Yield)**:
     - **4-formylbenzoic acid**
     - **5-formyl-2-hydroxybenzoic acid**
     - **4-oxoheptanedioic acid**

   - **Rationale**: Carbonyl groups near the carboxylate can interfere with metal coordination or participate in side reactions, hindering catalyst function and reducing yield.

---

10. **Modifiers that are perfluorinated carboxylic acids result in **low yield**.**

    - **Example (Low Yield)**:
      - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**

    - **Rationale**: Strong electron-withdrawing fluorine atoms reduce electron density on the carboxylate oxygen, weakening metal-ligand interactions and decreasing catalytic activity.

---

11. **Modifiers with bulky substituents near the carboxyl group result in **low yield**.**

    - **Examples (Low Yield)**:
      - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**
      - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**

    - **Rationale**: Bulky groups can cause steric hindrance, impeding effective coordination between the modifier and the metal center, resulting in reduced catalyst performance.

---

12. **Modifiers that are medium-chain aliphatic carboxylic acids (C6 to C8) without additional functional groups result in **high yield**.**

    - **Example (High Yield)**:
      - **Octanoic acid**

    - **Rationale**: Medium-chain carboxylic acids have optimal chain length that allows favorable interactions with the catalyst without introducing steric hindrance, enhancing yield.

---

13. **Modifiers that are aromatic carboxylic acids linked via a flexible aliphatic chain to additional coordinating functional groups result in **high yield** when the chain length allows effective coordination.**

    - **Example (High Yield)**:
      - **5-(4-hydroxyphenyl)pentanoic acid**

    - **Rationale**: The flexible aliphatic chain positions the coordinating group appropriately to interact with the metal center, improving catalyst efficiency and increasing yield.

---

14. **Modifiers with para-substituted sulfhydryl groups on aromatic rings result in **low yield**.**

    - **Example (Low Yield)**:
      - **4-sulfanylbenzoic acid**

    - **Rationale**: Sulfhydryl groups on aromatic rings may not coordinate effectively due to resonance stabilization and can undergo oxidative side reactions, reducing catalyst performance.

---

15. **Modifiers that contain flexible polyether chains near the carboxyl group result in **low yield**.**

    - **Example (Low Yield)**:
      - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**

    - **Rationale**: Flexible polyether chains increase conformational entropy and may hinder effective metal-ligand coordination, leading to decreased catalytic activity.

---

**End of Rules**

---

These rules demonstrate how specific combinations of functional groups and structural features in molecular modifiers influence the yield of the radical-mediated remote δ-C(sp³)–H bond functionalization reaction:

- **High Yield Modifiers**: Contain functional groups capable of effective metal coordination (e.g., amino acids with coordinating side chains, heterocyclic compounds with nitrogen atoms, proximal thiol or hydroxyl groups). These features enhance metal-ligand interactions, leading to improved catalyst performance.

- **Low Yield Modifiers**: Lack coordinating groups, have functional groups that are too distant or hinder coordination (e.g., bulky substituents, distal amino or hydroxyl groups), or contain interfering functional groups (e.g., aldehydes, ketones, perfluoroalkyl chains). These factors weaken metal-ligand interactions or introduce steric and electronic effects that reduce catalytic efficiency.

By applying these rules, researchers can predict whether a given molecular modifier is likely to result in a high or low yield and can design new modifiers to optimize the reaction outcome based on their structural characteristics.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,1
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.5428571428571428; Test Accuracy: 0.0
    Train Support: 0.02857142857142857; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 2.058823529411765; Test Lift: NONE
    Train Leverage: 0.014693877551020407; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    from rdkit import Chem
    import pandas as pd
    
    # Define matching functions for each rule
    def rule1_match(mol):
        # Rule 1: High yield for α-amino acids with side chains containing coordinating heteroatoms (O, N, S)
        try:
            # SMARTS for α-amino acid backbone
            alpha_amino_acid_pat = Chem.MolFromSmarts('[NX3;H2][CH1][CX3](=O)[OX1H1]')
            matches = mol.GetSubstructMatches(alpha_amino_acid_pat)
            if matches:
                for match in matches:
                    alpha_carbon_idx = match[1]
                    alpha_carbon = mol.GetAtomWithIdx(alpha_carbon_idx)
                    # Exclude backbone atoms (N, C, and O in the backbone)
                    backbone_atom_indices = set(match)
                    side_chain_atoms = []
                    for neighbor in alpha_carbon.GetNeighbors():
                        if neighbor.GetIdx() not in backbone_atom_indices:
                            side_chain_atoms.append(neighbor)
                    # Check if side chain contains coordinating heteroatoms (O, N, S)
                    visited = set()
                    to_visit = [atom.GetIdx() for atom in side_chain_atoms]
                    while to_visit:
                        atom_idx = to_visit.pop()
                        if atom_idx in visited:
                            continue
                        visited.add(atom_idx)
                        atom = mol.GetAtomWithIdx(atom_idx)
                        if atom.GetAtomicNum() in [7, 8, 16]:  # N, O, S
                            return True
                        for neighbor in atom.GetNeighbors():
                            if neighbor.GetIdx() not in visited:
                                to_visit.append(neighbor.GetIdx())
                return False
            else:
                return False
        except Exception:
            return False
    
    def rule2_match(mol):
        # Rule 2: Low yield for α-amino acids with non-coordinating side chains (alkyl or phenyl groups without heteroatoms)
        try:
            # SMARTS for α-amino acid backbone
            alpha_amino_acid_pat = Chem.MolFromSmarts('[NX3;H2][CH1][CX3](=O)[OX1H1]')
            matches = mol.GetSubstructMatches(alpha_amino_acid_pat)
            if matches:
                for match in matches:
                    alpha_carbon_idx = match[1]
                    alpha_carbon = mol.GetAtomWithIdx(alpha_carbon_idx)
                    # Exclude backbone atoms
                    backbone_atom_indices = set(match)
                    side_chain_atoms = []
                    for neighbor in alpha_carbon.GetNeighbors():
                        if neighbor.GetIdx() not in backbone_atom_indices:
                            side_chain_atoms.append(neighbor)
                    # Check if side chain contains any heteroatoms (O, N, S)
                    contains_heteroatom = False
                    visited = set()
                    to_visit = [atom.GetIdx() for atom in side_chain_atoms]
                    while to_visit:
                        atom_idx = to_visit.pop()
                        if atom_idx in visited:
                            continue
                        visited.add(atom_idx)
                        atom = mol.GetAtomWithIdx(atom_idx)
                        if atom.GetAtomicNum() in [7, 8, 16]:  # N, O, S
                            contains_heteroatom = True
                            break
                        for neighbor in atom.GetNeighbors():
                            if neighbor.GetIdx() not in visited:
                                to_visit.append(neighbor.GetIdx())
                    if not contains_heteroatom:
                        return True
                return False
            else:
                return False
        except Exception:
            return False
    
    def rule3_match(mol):
        # Rule 3: High yield for aromatic carboxylic acids with para-substituents capable of coordinating with metals (e.g., amino, nitro groups)
        try:
            # Aromatic carboxylic acid pattern
            aromatic_acid_pat = Chem.MolFromSmarts('c1ccc([C](=O)[O,H])cc1')
            matches = mol.GetSubstructMatches(aromatic_acid_pat)
            if matches:
                for match in matches:
                    ring_atoms = match[:6]
                    para_position = ring_atoms[0]  # Assuming para position is opposite to the attachment
                    para_atom = mol.GetAtomWithIdx(para_position)
                    # Check for coordinating groups at para position
                    coordinating_groups = ['[NX3;H2,H1,H0]', '[OX2H]', '[SX2H]', '[NX3+;a]', '[NX2]=O']
                    for smarts in coordinating_groups:
                        coord_pat = Chem.MolFromSmarts(f'[*]~c[*]~c([#6](=O)[O,H])~c[*]~c([D1]{smarts})~c[*]')
                        if mol.HasSubstructMatch(coord_pat):
                            return True
                return False
            else:
                return False
        except Exception:
            return False

    def rule4_match(mol):
        # Rule 4: Low yield for aromatic carboxylic acids with para-substituents that are non-coordinating or electron-donating groups (e.g., methyl, methoxy)
        try:
            # Aromatic carboxylic acid pattern
            aromatic_acid_pat = Chem.MolFromSmarts('c1ccc([C](=O)[O,H])cc1')
            matches = mol.GetSubstructMatches(aromatic_acid_pat)
            if matches:
                for match in matches:
                    ring_atoms = match[:6]
                    para_position = ring_atoms[0]  # Assuming para position is opposite to the attachment
                    para_atom = mol.GetAtomWithIdx(para_position)
                    # Check for non-coordinating groups at para position
                    non_coord_groups = ['[CX4H3]', '[OX2][CH3]']  # Methyl and methoxy
                    for smarts in non_coord_groups:
                        non_coord_pat = Chem.MolFromSmarts(f'[*]~c[*]~c([#6](=O)[O,H])~c[*]~c({smarts})~c[*]')
                        if mol.HasSubstructMatch(non_coord_pat):
                            return True
                return False
            else:
                return False
        except Exception:
            return False

    def rule5_match(mol):
        # Rule 5: High yield for heterocyclic carboxylic acids containing nitrogen atoms capable of coordinating with metals
        try:
            # Heterocyclic carboxylic acid with nitrogen pattern
            heterocyclic_acid_pat = Chem.MolFromSmarts('[n][#6][#6][#6][C](=O)[O,H]')
            if mol.HasSubstructMatch(heterocyclic_acid_pat):
                return True
            else:
                return False
        except Exception:
            return False
    
    # Additional rules can be defined similarly...
    
    # List of rules
    rules = [
        {'number': 1, 'description': 'Rule 1', 'prediction': 1, 'match_function': rule1_match},
        {'number': 2, 'description': 'Rule 2', 'prediction': -1, 'match_function': rule2_match},
        {'number': 3, 'description': 'Rule 3', 'prediction': 1, 'match_function': rule3_match},
        {'number': 4, 'description': 'Rule 4', 'prediction': -1, 'match_function': rule4_match},
        {'number': 5, 'description': 'Rule 5', 'prediction': 1, 'match_function': rule5_match},
        # Add more rules as needed...
    ]
    
    # Initialize results list
    results = []
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                if rule['match_function'](mol):
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

1. **Modifiers that are amino acids with an amino group near the carboxyl group result in a high yield, especially when the amino group is on the alpha or beta carbon.**

   - **Examples (High Yield)**:
     - **(2S)-2-aminopentanedioic acid** (Glutamic acid)
     - **(2S)-2-aminobutanedioic acid** (Aspartic acid)
     - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (Tryptophan)
     - **5-aminopentanoic acid**

   - **Rationale**: Amino groups located near the carboxylate allow for chelation, forming bidentate coordination with the metal center. This enhances catalytic activity by stabilizing the metal and facilitating electron transfer.

---

2. **Modifiers that are aromatic carboxylic acids with electron-withdrawing or coordinating groups at the para position result in a high yield.**

   - **Examples (High Yield)**:
     - **4-aminobenzoic acid**
     - **4-nitrobenzoic acid**
     - **4-(bromomethyl)benzoic acid**

   - **Rationale**: Electron-withdrawing groups increase the acidity of the carboxyl group, enhancing its ability to coordinate with the metal. Coordinating groups like amino or halogens can further stabilize the metal center through additional interactions.

---

3. **Modifiers that are heterocyclic carboxylic acids containing nitrogen atoms capable of metal coordination result in a high yield.**

   - **Examples (High Yield)**:
     - **Pyridine-3-carboxylic acid** (Nicotinic acid)
     - **1H-pyrazole-4-carboxylic acid**
     - **2-oxo-1H-pyridine-4-carboxylic acid**

   - **Rationale**: Nitrogen atoms in heterocycles act as additional coordination sites for the metal, stabilizing the catalyst and enhancing electron transfer processes essential for high catalytic activity.

---

4. **Modifiers with multiple adjacent hydroxyl groups (polyols) near the carboxyl group result in a high yield.**

   - **Examples (High Yield)**:
     - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (Gluconic acid)
     - **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid**

   - **Rationale**: Polyol groups can chelate the metal center through multiple hydroxyl interactions, enhancing stability and reactivity of the catalyst.

---

5. **Modifiers containing a thiol group (–SH) adjacent to the carboxyl group on an aliphatic chain result in a high yield; however, thiol groups attached to an aromatic ring result in a low yield.**

   - **Examples (High Yield)**:
     - **3-sulfanylpropanoic acid**

   - **Examples (Low Yield)**:
     - **4-sulfanylbenzoic acid**

   - **Rationale**: In aliphatic compounds, thiol groups near the carboxylate strongly coordinate with metals due to the high nucleophilicity of sulfur, enhancing catalytic activity. In aromatic compounds, the thiol group's lone pair can delocalize into the ring, reducing its availability for metal coordination.

---

6. **Modifiers that are medium-chain aliphatic carboxylic acids (6 to 8 carbons) without bulky substituents result in a high yield.**

   - **Example (High Yield)**:
     - **Octanoic acid**

   - **Rationale**: The optimal chain length improves hydrophobic interactions without causing steric hindrance, facilitating effective interaction with the catalyst's active site.

---

7. **Modifiers that are aromatic carboxylic acids with para-substituted electron-donating groups, such as methyl (–CH₃) or methoxy (–OCH₃), result in a low yield.**

   - **Examples (Low Yield)**:
     - **4-methylbenzoic acid**
     - **3-(4-hydroxyphenyl)propanoic acid**

   - **Rationale**: Electron-donating groups decrease the acidity of the carboxyl group, weakening its ability to coordinate with the metal center, thus reducing catalytic efficiency.

---

8. **Modifiers that are aliphatic carboxylic acids with functional groups (e.g., amino, hydroxyl) located on distant carbons (more than three carbon atoms away from the carboxyl group) result in a low yield.**

   - **Examples (Low Yield)**:
     - **7-aminoheptanoic acid**
     - **8-aminooctanoic acid**
     - **7-hydroxyheptanoic acid**

   - **Rationale**: Functional groups far from the carboxyl group are less effective in coordinating with the metal center due to increased flexibility and distance, resulting in lower catalytic activity.

---

9. **Modifiers with flexible, bulky, or heavily substituted side chains near the carboxyl group result in a low yield.**

   - **Examples (Low Yield)**:
     - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**
     - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**

   - **Rationale**: Bulky and flexible substituents can create steric hindrance, preventing the carboxyl group from effectively coordinating with the metal center and thus diminishing catalytic performance.

---

10. **Modifiers with additional carbonyl groups (aldehyde or ketone) adjacent to the carboxyl group result in a low yield.**

    - **Examples (Low Yield)**:
      - **4-formylbenzoic acid**
      - **5-formyl-2-hydroxybenzoic acid**
      - **4-oxoheptanedioic acid**

    - **Rationale**: Adjacent carbonyl groups can either compete with the carboxylate for metal coordination or form intramolecular interactions that disrupt optimal binding to the metal center, reducing catalytic efficiency.

---

11. **Modifiers that are perfluorinated carboxylic acids result in a low yield.**

    - **Example (Low Yield)**:
      - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**

    - **Rationale**: The presence of highly electronegative fluorine atoms reduces the electron density on the carboxylate oxygen, weakening its ability to coordinate with the metal center and decreasing catalytic activity.

---

12. **Modifiers that are amino acids with non-coordinating hydrophobic or aromatic side chains result in a low yield.**

    - **Example (Low Yield)**:
      - **(2S)-2-amino-3-phenylpropanoic acid** (Phenylalanine)

    - **Rationale**: Side chains lacking additional coordinating functional groups provide minimal interaction with the metal center, leading to weaker catalyst-modifier binding and lower yields.

---

13. **Modifiers containing amide linkages or peptide bonds near the carboxyl group result in a low yield.**

    - **Examples (Low Yield)**:
      - **(2S)-6-acetamido-2-aminohexanoic acid**
      - **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid**
      - **2-[(4-hydroxybenzoyl)amino]acetic acid**

    - **Rationale**: Amide groups can compete with the carboxylate for metal coordination or form strong intramolecular hydrogen bonds, interfering with effective binding to the metal center and diminishing catalytic efficiency.

---

14. **Modifiers with highly conjugated aromatic systems or multiple electron-donating substituents result in a low yield.**

    - **Example (Low Yield)**:
      - **4-pyridin-4-ylbenzoic acid**

    - **Rationale**: Extensive conjugation and electron-donating groups delocalize electron density, reducing the acidity and coordinating ability of the carboxyl group, and thus decreasing the overall yield.

---

15. **Modifiers combining electron-withdrawing groups with additional coordinating functional groups result in a high yield.**

    - **Example (High Yield)**:
      - **4-(bromomethyl)benzoic acid**

    - **Rationale**: Electron-withdrawing groups enhance the acidity of the carboxyl group, while additional coordinating functional groups facilitate stronger metal binding, synergistically improving catalytic activity.

---

**End of Rules**

---

These rules establish a relationship between specific combinations of functional groups in molecular modifiers and their impact on the yield of the radical-mediated remote δ-C(sp³)–H bond functionalization reaction:

- **High Yield Modifiers** often contain:

  - **Proximal amino groups** near the carboxylate for bidentate coordination (Rule 1).
  - **Aromatic rings** with electron-withdrawing or coordinating para-substituents (Rule 2).
  - **Heterocycles with nitrogen atoms** that serve as additional coordination sites (Rule 3).
  - **Multiple adjacent hydroxyl groups** enabling chelation (Rule 4).
  - **Aliphatic thiol groups** adjacent to the carboxylate enhancing metal coordination (Rule 5).
  - **Optimal chain lengths** without bulky substituents for better interaction with the catalyst (Rule 6).
  - **Combinations of electron-withdrawing and coordinating groups** to enhance metal binding (Rule 15).

- **Low Yield Modifiers** typically have:

  - **Electron-donating groups** that reduce carboxylate acidity (Rule 7).
  - **Functional groups distant from the carboxylate**, limiting coordination (Rule 8).
  - **Bulky or flexible substituents** causing steric hindrance (Rule 9).
  - **Adjacent carbonyl groups** competing for metal coordination (Rule 10).
  - **Perfluorination** reducing electron density on the carboxylate (Rule 11).
  - **Non-coordinating hydrophobic side chains** in amino acids (Rule 12).
  - **Amide linkages or peptide bonds** near the carboxylate disrupting coordination (Rule 13).
  - **Highly conjugated systems or multiple electron-donating groups** decreasing carboxylate acidity and coordination (Rule 14).
  - **Aromatic thiol groups** less available for coordination due to delocalization or oxidation (Rule 5, Low Yield example).

By applying these rules, one can predict whether a molecular modifier is likely to result in a high or low yield based on its structural features. This aids in the selection or design of modifiers to optimize the catalytic performance of the Hf-TPY-MOL(Fe) system in the target reaction.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5 High,Rule 5 Low,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.5428571428571428; Test Accuracy: 0.0
    Train Support: 0.04285714285714286; Test Support: 0.0
    Train Confidence: 0.7; Test Confidence: 0.5
    Train Lift: 1.3611111111111112; Test Lift: NONE
    Train Leverage: -0.0012244897959183638; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    
    # Primary amine group (-NH2)
    primary_amine = '[NX3H2]'
    
    # Alpha carbon attached to carboxylic acid
    alpha_amino_acid = '[NX3H2][CX4H][CX3](=O)[OX2H1]'
    
    # Beta carbon attached to carboxylic acid
    beta_amino_acid = '[NX3H2][CX4H][CX4][CX3](=O)[OX2H1]'
    
    # Aromatic carboxylic acid with EWG or coordinating group at para position
    aromatic_carboxylic_acid = '[c][c](=O)[OX2H1]'
    para_substituted_aromatic = '[c]1[c][c][c][c][c]1[CX3](=O)[OX2H1]'
    ewg_para = '[c]1[c][c][c]([$(c[F,Cl,Br,I]),$(c[NX3](=O)=O),$(c[OX2H]),$(c[NX3H2])])[c][c]1[CX3](=O)[OX2H1]'
    
    # Heterocyclic carboxylic acid containing nitrogen
    heterocyclic_carboxylic_acid = '[n][c][c](=O)[OX2H1]'
    
    # Polyol near carboxylic acid
    polyol = '[CX4][OX2H][CX4][OX2H][CX3](=O)[OX2H1]'
    
    # Thiol group (-SH) adjacent to carboxylic acid
    thiol_adjacent = '[SX2H][CX4][CX3](=O)[OX2H1]'
    
    # Thiol group attached to aromatic ring
    aromatic_thiol = '[SX2H][c]'
    
    # Medium-chain aliphatic carboxylic acids (6 to 8 carbons)
    medium_chain_acid = '[CX3](=O)[OX2H1][CX4][CX4][CX4][CX4][CX4][CX4][CX4]'
    
    # Para-substituted EDG on aromatic carboxylic acid
    edg_para = '[c]1[c][c][c]([$(c[CH3]),$(c[OX2][CH3]),$(c[OX2H])])[c][c]1[CX3](=O)[OX2H1]'
    
    # Functional groups distant from carboxyl group
    distant_functional_group = '[CX3](=O)[OX2H1][CX4][CX4][CX4][NX3H2,OX2H]'
    
    # Bulky substituents near carboxyl group
    bulky_substituent = '[CX3](=O)[OX2H1][CX4]([CX4][OX2][CX4])[CX4]'
    
    # Carbonyl groups adjacent to carboxylic acid
    adjacent_carbonyl = '[CX3](=O)[CX3](=O)[OX2H1]'
    
    # Perfluorinated carboxylic acid
    perfluorinated_acid = '[CX3](=O)[OX2H1][CX4]([F])[CX4]([F])[CX4]([F])'
    
    # Amino acids with non-coordinating side chains
    non_coordinating_amino_acid = '[NX3H2][CX4][CX3](=O)[OX2H1]'
    
    # Amide linkage near carboxyl group
    amide_near_carboxyl = '[NX3][CX3](=O)[CX3](=O)[OX2H1]'
    
    # Highly conjugated aromatic systems
    conjugated_system = '[c]=[c]-[c]=[c][CX3](=O)[OX2H1]'
    
    # Electron-withdrawing groups with coordinating groups
    ewg_coordinating = '[c]1[c][c][c]([$(c[F,Cl,Br,I]),$(c[NX3](=O)=O),$(c[NX3H2])])[c][c]1[CX3](=O)[OX2H1]'
    
    # Compile SMARTS patterns
    patterns = {
        'Rule 1': [alpha_amino_acid, beta_amino_acid],
        'Rule 2': [ewg_para],
        'Rule 3': [heterocyclic_carboxylic_acid],
        'Rule 4': [polyol],
        'Rule 5 High': [thiol_adjacent],
        'Rule 5 Low': [aromatic_thiol],
        'Rule 6': [medium_chain_acid],
        'Rule 7': [edg_para],
        'Rule 8': [distant_functional_group],
        'Rule 9': [bulky_substituent],
        'Rule 10': [adjacent_carbonyl],
        'Rule 11': [perfluorinated_acid],
        'Rule 12': [non_coordinating_amino_acid],
        'Rule 13': [amide_near_carboxyl],
        'Rule 14': [conjugated_system],
        'Rule 15': [ewg_coordinating]
    }
    
    # Predictions for each rule
    predictions = {
        'Rule 1': 1,
        'Rule 2': 1,
        'Rule 3': 1,
        'Rule 4': 1,
        'Rule 5 High': 1,
        'Rule 5 Low': -1,
        'Rule 6': 1,
        'Rule 7': -1,
        'Rule 8': -1,
        'Rule 9': -1,
        'Rule 10': -1,
        'Rule 11': -1,
        'Rule 12': -1,
        'Rule 13': -1,
        'Rule 14': -1,
        'Rule 15': 1
    }
    
    # Compile SMARTS patterns into RDKit mol objects
    compiled_patterns = {}
    for key, smarts_list in patterns.items():
        compiled_patterns[key] = [Chem.MolFromSmarts(s) for s in smarts_list]
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(patterns))
            continue
        row = []
        for key in patterns.keys():
            try:
                match = False
                for pat in compiled_patterns[key]:
                    if mol.HasSubstructMatch(pat):
                        match = True
                        break
                if match:
                    row.append(predictions[key])
                else:
                    row.append(0)
            except Exception:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=patterns.keys())
    return df

--------------------------------------------------