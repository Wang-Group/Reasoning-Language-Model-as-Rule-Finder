
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: **Modifiers that are α-amino dicarboxylic acids (amino acids with two carboxyl groups) result in high yield.**

  - *Examples*: (2S)-2-aminopentanedioic acid (glutamic acid), (2S)-2-aminobutanedioic acid (aspartic acid)
  - *Rationale*: The presence of both an amino group and two carboxylic acid groups enhances coordination with metal centers, improving catalyst performance through chelation.

- **Rule 2**: **Modifiers that are para-substituted aromatic carboxylic acids with amino or nitro groups directly attached to the ring result in high yield; those with aldehyde (formyl), methyl, or mercapto groups at the same position result in low yield.**

  - *High Yield Examples*: 4-aminobenzoic acid, 4-nitrobenzoic acid
  - *Low Yield Examples*: 4-formylbenzoic acid, 4-methylbenzoic acid, 4-sulfanylbenzoic acid
  - *Rationale*: Amino and nitro groups can enhance electronic interactions with the catalyst, while formyl, methyl, and mercapto groups may hinder these interactions or cause steric hindrance.

- **Rule 3**: **Modifiers with heteroaromatic carboxylic acids, especially pyridine derivatives, result in high yield when the carboxylic acid is positioned to favor coordination.**

  - *Examples*: Pyridine-3-carboxylic acid (nicotinic acid), 1H-pyrazole-4-carboxylic acid
  - *Rationale*: Heteroatoms like nitrogen can coordinate with metal centers, enhancing catalyst activity.

- **Rule 4**: **Modifiers that are aliphatic carboxylic acids with medium-length chains (6 to 8 carbons) result in high yield unless terminal functional groups interfere.**

  - *High Yield Example*: Octanoic acid
  - *Low Yield Examples*: 7-aminoheptanoic acid, 7-hydroxyheptanoic acid, 8-aminooctanoic acid
  - *Rationale*: Medium-length chains provide optimal hydrophobic interactions without introducing steric hindrance from terminal groups.

- **Rule 5**: **Modifiers with terminal amino or hydroxyl groups on long aliphatic chains result in low yield.**

  - *Examples*: 7-aminoheptanoic acid, 7-hydroxyheptanoic acid, 8-aminooctanoic acid
  - *Rationale*: Terminal polar groups on long chains may interfere with catalyst binding or lead to undesirable interactions, reducing yield.

- **Rule 6**: **Modifiers containing multiple hydroxyl groups on aliphatic chains, especially adjacent hydroxyls, result in high yield.**

  - *Example*: (2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid (gluconic acid)
  - *Rationale*: Multiple hydroxyl groups enhance solubility and can form hydrogen bonds with the catalyst, improving performance.

- **Rule 7**: **Modifiers with mercapto (thiol) groups on aliphatic chains result in high yield; those with mercapto groups on aromatic rings result in low yield.**

  - *High Yield Example*: 3-sulfanylpropanoic acid
  - *Low Yield Example*: 4-sulfanylbenzoic acid
  - *Rationale*: Aliphatic thiol groups can form strong bonds with metal centers, enhancing catalyst activity, whereas aromatic thiols may lead to catalyst poisoning or deactivation.

- **Rule 8**: **Modifiers with perfluorinated alkyl chains result in low yield due to their strong electron-withdrawing effects and hydrophobicity.**

  - *Example*: 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid
  - *Rationale*: Perfluorinated groups decrease solubility and disrupt interactions with the catalyst, hindering the reaction.

- **Rule 9**: **Modifiers with aldehyde (formyl) groups on aromatic rings result in low yield.**

  - *Examples*: 4-formylbenzoic acid, 5-formyl-2-hydroxybenzoic acid
  - *Rationale*: Aldehyde groups can coordinate with metal centers or undergo side reactions, deactivating the catalyst.

- **Rule 10**: **Modifiers with aromatic rings connected to carboxylic acids via aliphatic chains of four or more carbons result in high yield; similar modifiers with shorter chains result in low yield.**

  - *High Yield Example*: 5-(4-hydroxyphenyl)pentanoic acid
  - *Low Yield Example*: 3-(4-hydroxyphenyl)propanoic acid
  - *Rationale*: Longer aliphatic chains provide flexibility and appropriate spacing for optimal interactions with the catalyst, whereas shorter chains may cause steric hindrance or unfavorable electronic effects.

- **Rule 11**: **Modifiers with bulky substituents directly attached to aromatic rings result in low yield due to steric hindrance.**

  - *Example*: 4-pyridin-4-ylbenzoic acid
  - *Rationale*: Bulky groups can prevent effective interaction between the modifier and the catalyst's active sites.

- **Rule 12**: **Modifiers containing adjacent ketone or amide groups to the carboxylic acid result in low yield.**

  - *Examples*: 4-oxoheptanedioic acid, (2S)-6-acetamido-2-aminohexanoic acid
  - *Rationale*: Ketone and amide groups near the carboxylic acid can chelate metal ions or interfere with catalytic activity, leading to reduced yield.

- **Rule 13**: **Modifiers that are amino acids with heteroaromatic side chains, such as indole or pyrrole rings, result in high yield; those with simple aromatic side chains result in low yield.**

  - *High Yield Example*: (2R)-2-amino-3-(1H-indol-3-yl)propanoic acid (tryptophan)
  - *Low Yield Example*: (2S)-2-amino-3-phenylpropanoic acid (phenylalanine)
  - *Rationale*: Heteroaromatic rings can coordinate with metal centers and facilitate electron delocalization, enhancing reactivity, while simple aromatic rings lack these capabilities.

- **Rule 14**: **Modifiers with polyglycol ether chains result in low yield due to their high flexibility and potential to interfere with catalyst binding.**

  - *Example*: 2-[2-(2-methoxyethoxy)ethoxy]acetic acid
  - *Rationale*: Flexible ether chains can adopt conformations that hinder effective interaction with the catalyst, reducing yield.

- **Rule 15**: **Modifiers with electron-rich heterocycles or conjugated keto groups adjacent to carboxylic acids result in high yield.**

  - *Examples*: 1,3-dioxo-2-benzofuran-5-carboxylic acid, 2-oxo-1H-pyridine-4-carboxylic acid
  - *Rationale*: Electron-rich heterocycles and conjugated keto groups can stabilize metal centers and enhance catalytic activity through favorable electronic interactions.

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 2.1,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 7.1,Rule 8,Rule 9,Rule 10,Rule 10.1,Rule 11,Rule 12,Rule 13,Rule 13.1,Rule 14,Rule 15
0,0,0,0,1,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,1,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,1,-1,0,1,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,1,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,1,-1,0,1,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,1,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,-1,1,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,1,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,1,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,-1,1,0,0,0,0,0,-1,0,0,0,0,0,0
0,1,-1,0,1,-1,0,0,-1,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,1,-1,0,0,0,0,0,0,-1,0,0,0,0,-1,0
0,1,-1,0,1,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,1,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,1,-1,0,0,0,-1,0,0,-1,0,0,0,0,0,0
0,0,0,0,1,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,1,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,1,-1,0,1,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,1,-1,0,1,0,0,0,0,-1,0,0,0,0,0,0
0,1,-1,0,1,-1,0,0,0,0,-1,0,-1,0,0,0,0,0,0
0,1,-1,0,1,-1,0,0,0,0,-1,0,-1,0,0,0,0,0,0
0,1,-1,0,1,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,1,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,1,-1,0,1,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,1,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,1,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,-1,1,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,1,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,-1,0
0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.8; Test Accuracy: 1.0
    Train Support: 0.09142857142857143; Test Support: 0.1
    Train Confidence: 0.775; Test Confidence: 0.55
    Train Lift: 1.5405410312273058; Test Lift: NONE
    Train Leverage: 0.018040816326530616; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Import RDKit
    from rdkit import Chem
    
    # Define the rules with their associated SMARTS patterns and predictions
    rules = [
        # Rule 1: High Yield (+1)
        {
            'number': 1,
            'description': 'Modifiers that are α-amino dicarboxylic acids (amino acids with two carboxyl groups) result in high yield.',
            'patterns': [
                # Alpha-amino acid backbone with two carboxylic acid groups
                '[NX3][CX4H]([*])[CX3](=O)[OX1H]',  # Alpha-amino group
                '[CX3](=O)[OX1H]',  # Carboxylic acid group
            ],
            'counts': {
                '[CX3](=O)[OX1H]': 2  # At least 2 carboxylic acid groups
            },
            'prediction': 1
        },
        # Rule 2: High Yield (+1)
        {
            'number': 2,
            'description': 'Modifiers that are para-substituted aromatic carboxylic acids with amino or nitro groups directly attached to the ring result in high yield.',
            'patterns': [
                # Para-substituted aromatic carboxylic acid with amino or nitro group
                'c1ccc(cc1)[C](=O)[O]',  # Aromatic carboxylic acid
                '(c1ccc(N)cc1)',  # Para-amino group
                '(c1ccc([N+](=O)[O-])cc1)',  # Para-nitro group
            ],
            'prediction': 1
        },
        # Rule 2: Low Yield (-1)
        {
            'number': 2.1,
            'description': 'Modifiers that are para-substituted aromatic carboxylic acids with aldehyde (formyl), methyl, or mercapto groups at the same position result in low yield.',
            'patterns': [
                # Para-substituted aromatic carboxylic acid with aldehyde, methyl, or mercapto group
                'c1ccc(cc1)[C](=O)[O]',  # Aromatic carboxylic acid
                '(c1ccc(C=O)cc1)',  # Para-aldehyde group
                '(c1ccc(C)cc1)',  # Para-methyl group
                '(c1ccc(S)cc1)',  # Para-mercapto group
            ],
            'prediction': -1
        },
        # Rule 3: High Yield (+1)
        {
            'number': 3,
            'description': 'Modifiers with heteroaromatic carboxylic acids, especially pyridine derivatives, result in high yield.',
            'patterns': [
                # Heteroaromatic rings with carboxylic acid
                '[nH]1cccc1C(=O)O',  # Pyridine-3-carboxylic acid
                'n1ccccc1C(=O)O',  # Nicotinic acid
            ],
            'prediction': 1
        },
        # Rule 4: High Yield (+1)
        {
            'number': 4,
            'description': 'Modifiers that are aliphatic carboxylic acids with medium-length chains (6 to 8 carbons) result in high yield unless terminal functional groups interfere.',
            'patterns': [
                # Aliphatic carboxylic acids with 6 to 8 carbons
                'C{5,7}C(=O)O',  # Chains with 6 to 8 carbons ending with carboxylic acid
            ],
            'exclude_patterns': [
                # Exclude terminal amino or hydroxyl groups
                '[NX3;H2,H1][CH2]',  # Terminal amino group
                '[OX2H][CH2]',  # Terminal hydroxyl group
            ],
            'prediction': 1
        },
        # Rule 5: Low Yield (-1)
        {
            'number': 5,
            'description': 'Modifiers with terminal amino or hydroxyl groups on long aliphatic chains result in low yield.',
            'patterns': [
                # Long aliphatic chains with terminal amino or hydroxyl groups
                'C{6,}[NX3;H2,H1]',  # Terminal amino group on long chain
                'C{6,}[OX2H]',  # Terminal hydroxyl group on long chain
            ],
            'prediction': -1
        },
        # Rule 6: High Yield (+1)
        {
            'number': 6,
            'description': 'Modifiers containing multiple hydroxyl groups on aliphatic chains, especially adjacent hydroxyls, result in high yield.',
            'patterns': [
                '[CH2][OX2H]',  # Aliphatic hydroxyl groups
            ],
            'counts': {
                '[CH2][OX2H]': 2  # At least two hydroxyl groups
            },
            'prediction': 1
        },
        # Rule 7: High Yield (+1)
        {
            'number': 7,
            'description': 'Modifiers with mercapto (thiol) groups on aliphatic chains result in high yield.',
            'patterns': [
                '[CX4][SX2H]',  # Aliphatic thiol group
            ],
            'prediction': 1
        },
        # Rule 7: Low Yield (-1)
        {
            'number': 7.1,
            'description': 'Modifiers with mercapto groups on aromatic rings result in low yield.',
            'patterns': [
                '[c][SX2H]',  # Aromatic thiol group
            ],
            'prediction': -1
        },
        # Rule 8: Low Yield (-1)
        {
            'number': 8,
            'description': 'Modifiers with perfluorinated alkyl chains result in low yield.',
            'patterns': [
                '[CX4](F)(F)(F)',  # Trifluoromethyl group
                '[CX4](F)(F)[CX4](F)(F)C(=O)O',  # Perfluorinated chain ending with carboxylic acid
            ],
            'prediction': -1
        },
        # Rule 9: Low Yield (-1)
        {
            'number': 9,
            'description': 'Modifiers with aldehyde (formyl) groups on aromatic rings result in low yield.',
            'patterns': [
                'c1ccc([CX3H]=O)cc1',  # Aromatic ring with aldehyde group
            ],
            'prediction': -1
        },
        # Rule 10: High Yield (+1)
        {
            'number': 10,
            'description': 'Modifiers with aromatic rings connected to carboxylic acids via aliphatic chains of four or more carbons result in high yield.',
            'patterns': [
                '[c][CH2][CH2][CH2][CH2][C](=O)[OX1H]',  # Aromatic ring connected via 4-carbon chain to carboxylic acid
            ],
            'prediction': 1
        },
        # Rule 10: Low Yield (-1)
        {
            'number': 10.1,
            'description': 'Modifiers with aromatic rings connected to carboxylic acids via aliphatic chains of shorter than four carbons result in low yield.',
            'patterns': [
                '[c][CH2]{1,3}[C](=O)[OX1H]',  # Aromatic ring connected via short chain to carboxylic acid
            ],
            'prediction': -1
        },
        # Rule 11: Low Yield (-1)
        {
            'number': 11,
            'description': 'Modifiers with bulky substituents directly attached to aromatic rings result in low yield due to steric hindrance.',
            'patterns': [
                '[c][C]([!H])[!H]',  # Bulky group attached to aromatic ring
            ],
            'prediction': -1
        },
        # Rule 12: Low Yield (-1)
        {
            'number': 12,
            'description': 'Modifiers containing adjacent ketone or amide groups to the carboxylic acid result in low yield.',
            'patterns': [
                '[C](=O)[C](=O)[OX1H]',  # Ketone adjacent to carboxylic acid
                '[C](=O)[NX3][C](=O)[OX1H]',  # Amide adjacent to carboxylic acid
            ],
            'prediction': -1
        },
        # Rule 13: High Yield (+1)
        {
            'number': 13,
            'description': 'Modifiers that are amino acids with heteroaromatic side chains, such as indole or pyrrole rings, result in high yield.',
            'patterns': [
                '[NX3][CX4H][CX4H][c]1[cH][nH][cH][cH][c]1',  # Tryptophan-like structure
            ],
            'prediction': 1
        },
        # Rule 13: Low Yield (-1)
        {
            'number': 13.1,
            'description': 'Modifiers that are amino acids with simple aromatic side chains result in low yield.',
            'patterns': [
                '[NX3][CX4H][CX4H][c]1[cH][cH][cH][cH][cH]1',  # Phenylalanine-like structure
            ],
            'prediction': -1
        },
        # Rule 14: Low Yield (-1)
        {
            'number': 14,
            'description': 'Modifiers with polyglycol ether chains result in low yield.',
            'patterns': [
                '[$([OX2][CX4][CX4][OX2][CX4])]',  # Polyglycol ether chain
            ],
            'prediction': -1
        },
        # Rule 15: High Yield (+1)
        {
            'number': 15,
            'description': 'Modifiers with electron-rich heterocycles or conjugated keto groups adjacent to carboxylic acids result in high yield.',
            'patterns': [
                '[o][c][c][c](=O)[OX1H]',  # Electron-rich heterocycle adjacent to carboxylic acid
                '[n][c](=O)[c](=O)[OX1H]',  # Conjugated keto group adjacent to carboxylic acid
            ],
            'prediction': 1
        },
    ]

    # Compile the SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for smarts in rule.get('patterns', []):
            try:
                compiled_pattern = Chem.MolFromSmarts(smarts)
                if compiled_pattern is None:
                    continue
                compiled_patterns.append(compiled_pattern)
            except Exception as e:
                # Skip patterns that cause exceptions
                continue
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_exclude_patterns = []
            for smarts in rule['exclude_patterns']:
                try:
                    compiled_pattern = Chem.MolFromSmarts(smarts)
                    if compiled_pattern is None:
                        continue
                    compiled_exclude_patterns.append(compiled_pattern)
                except Exception as e:
                    continue
            rule['compiled_exclude_patterns'] = compiled_exclude_patterns

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'compiled_exclude_patterns' in rule:
                    for pat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for pat in rule['compiled_patterns']:
                    matches = mol.GetSubstructMatches(pat)
                    if not matches:
                        match = False
                        break
                    else:
                        # If counts are specified, check that
                        if 'counts' in rule:
                            smarts = Chem.MolToSmarts(pat)
                            count_required = rule['counts'].get(smarts, 1)
                            if len(matches) < count_required:
                                match = False
                                break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: **Modifiers that are α-amino acids with additional carboxylic acid groups (dicarboxylic α-amino acids) result in high yield.**

  - *High Yield Examples*: (2S)-2-aminobutanedioic acid (**aspartic acid**), (2S)-2-aminopentanedioic acid (**glutamic acid**)
  - *Low Yield Examples*: (2S)-2-amino-3-phenylpropanoic acid (**phenylalanine**), (2S)-6-acetamido-2-aminohexanoic acid
  - *Rationale*: Dicarboxylic α-amino acids can chelate metal ions through both carboxylate groups and the amino group, enhancing coordination with the catalyst's metal center. This effective chelation improves catalyst interaction and increases yield. Amino acids lacking an additional carboxylate group or with modified amino groups do not provide the same level of coordination, resulting in lower yield.

- **Rule 2**: **Modifiers that are para-substituted benzoic acids with metal-coordinating substituents (e.g., amino, nitro, bromomethyl) result in high yield; those with non-coordinating or electron-donating substituents (e.g., methyl) result in low yield.**

  - *High Yield Examples*: 4-aminobenzoic acid, 4-nitrobenzoic acid, 4-(bromomethyl)benzoic acid
  - *Low Yield Examples*: 4-methylbenzoic acid, 4-formylbenzoic acid
  - *Rationale*: Substituents capable of coordinating with metal centers (such as amino, nitro, or bromomethyl groups) enhance the modifier's ability to bind to the catalyst, facilitating electron transfer and improving catalytic activity. Non-coordinating groups or electron-donating substituents do not provide these interactions, leading to lower yield.

- **Rule 3**: **Modifiers that are heteroaromatic carboxylic acids containing nitrogen atoms capable of metal coordination result in high yield.**

  - *High Yield Examples*: Pyridine-3-carboxylic acid (**nicotinic acid**), 1H-pyrazole-4-carboxylic acid, 2-oxo-1H-pyridine-4-carboxylic acid
  - *Low Yield Example*: 4-pyridin-4-ylbenzoic acid
  - *Rationale*: Nitrogen atoms in heteroaromatic rings can effectively coordinate with metal centers, enhancing interactions with the catalyst and increasing yield. If the nitrogen is sterically hindered or not optimally positioned for coordination, as in 4-pyridin-4-ylbenzoic acid, the effectiveness is reduced, leading to lower yield.

- **Rule 4**: **Modifiers that are aliphatic carboxylic acids with medium-length hydrocarbon chains (6–8 carbons) lacking polar terminal groups result in high yield; those with terminal polar groups (e.g., amino, hydroxyl) result in low yield.**

  - *High Yield Example*: Octanoic acid
  - *Low Yield Examples*: 7-aminoheptanoic acid, 7-hydroxyheptanoic acid, 8-aminooctanoic acid
  - *Rationale*: Nonpolar aliphatic chains enhance hydrophobic interactions with the catalyst surface, improving binding and catalytic performance. Terminal polar groups can disrupt these interactions by introducing polarity and interfering with the optimal alignment of the modifier on the catalyst surface, resulting in lower yield.

- **Rule 5**: **Modifiers containing multiple adjacent hydroxyl groups on an aliphatic chain result in high yield due to enhanced hydrogen bonding and coordination with the catalyst.**

  - *High Yield Example*: (2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid (**gluconic acid**)
  - *Rationale*: The presence of multiple hydroxyl groups increases the potential for hydrogen bonding with the catalyst, enhancing the stability of the catalyst-modifier complex and improving catalytic activity, leading to higher yield.

- **Rule 6**: **Modifiers with aliphatic thiol (mercapto) groups result in high yield; those with aromatic thiol groups result in low yield due to potential catalyst poisoning.**

  - *High Yield Example*: 3-sulfanylpropanoic acid
  - *Low Yield Example*: 4-sulfanylbenzoic acid
  - *Rationale*: Aliphatic thiol groups can interact beneficially with metal centers without deactivating the catalyst. In contrast, aromatic thiol groups may bind too strongly or form irreversible complexes with the metal center, leading to catalyst deactivation and reduced yield.

- **Rule 7**: **Modifiers with carbonyl groups (aldehyde or ketone) directly attached to aromatic rings result in low yield due to potential catalyst deactivation or side reactions.**

  - *Low Yield Examples*: 4-formylbenzoic acid, 5-formyl-2-hydroxybenzoic acid
  - *Rationale*: Carbonyl groups adjacent to aromatic rings can form unwanted complexes with metal ions or participate in side reactions, interfering with the catalyst's active sites and reducing catalytic efficiency, leading to lower yield.

- **Rule 8**: **Modifiers with flexible ether chains and terminal polar groups result in low yield due to non-specific interactions that disrupt effective catalyst binding.**

  - *Low Yield Examples*: 2-[2-(2-methoxyethoxy)ethoxy]acetic acid, 3-[2-(2-aminoethoxy)ethoxy]propanoic acid
  - *Rationale*: Flexible ether chains can adopt various conformations that hinder proper orientation and binding of the modifier to the catalyst. Terminal polar groups may introduce additional non-specific interactions, reducing the efficiency of catalyst-modifier interactions and leading to lower yield.

- **Rule 9**: **Modifiers with fluorinated alkyl chains result in low yield due to strong electron-withdrawing effects and increased hydrophobicity that hinder catalyst interaction.**

  - *Low Yield Example*: 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid
  - *Rationale*: Electron-withdrawing fluorine atoms decrease the electron density available for metal coordination and increase the hydrophobic character of the modifier, disrupting interactions with the catalyst and reducing yield.

- **Rule 10**: **Modifiers with amide groups adjacent to the carboxylic acid function result in low yield due to potential competition with the catalyst binding sites.**

  - *Low Yield Examples*: (2S)-6-acetamido-2-aminohexanoic acid, 2-[(4-hydroxybenzoyl)amino]acetic acid, 4-oxoheptanedioic acid
  - *Rationale*: Amide groups near the carboxylic acid can form strong interactions through hydrogen bonding or coordination with metal centers, potentially blocking or competing with the catalyst's active sites. This competition reduces the effectiveness of catalyst-modifier interactions, leading to lower yield.

- **Rule 11**: **Modifiers where an aromatic ring is connected to the carboxylic acid via an aliphatic chain of four or more carbons result in high yield; similar structures with shorter chains (three carbons or fewer) result in low yield.**

  - *High Yield Examples*: 5-(4-hydroxyphenyl)pentanoic acid, 4-pyridin-4-ylbutanoic acid
  - *Low Yield Example*: 3-(4-hydroxyphenyl)propanoic acid
  - *Rationale*: Longer aliphatic chains provide the necessary flexibility and spacing for effective interactions between the aromatic ring and the catalyst, enhancing binding and catalytic performance. Shorter chains may restrict these interactions due to steric hindrance or insufficient length for optimal alignment, resulting in lower yield.

- **Rule 12**: **Modifiers with bulky aromatic rings directly connected to each other result in low yield due to steric hindrance that impedes catalyst interaction.**

  - *Low Yield Example*: 4-pyridin-4-ylbenzoic acid
  - *Rationale*: The direct connection of bulky aromatic rings can hinder access to the catalyst's active sites, reducing the efficiency of catalyst-modifier binding. This steric hindrance limits the interactions necessary for catalytic activity, leading to lower yield.

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12
0,0,0,0,0,0,-1,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.5714285714285714; Test Accuracy: 0.0
    Train Support: 0.0380952380952381; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 2.0206971677559915; Test Lift: NONE
    Train Leverage: 0.01904761904761905; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for common functional groups
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    
    # Primary amino group (-NH2)
    primary_amino = '[NX3H2]'
    
    # Aromatic ring
    aromatic_ring = 'c1ccccc1'
    
    # Halogens
    halogens = '[F,Cl,Br,I]'
    
    # Nitro group
    nitro_group = '[NX3](=O)=O'
    
    # Carbonyl group attached to aromatic ring (aldehyde or ketone)
    aromatic_carbonyl = '[c][CX3](=O)[#6,#1]'
    
    # Thiol group (-SH)
    thiol_group = '[SX2H]'
    
    # Ether linkage in aliphatic chains (-O-)
    ether_linkage = '[#6][OX2][#6]'
    
    # Hydroxyl group (-OH)
    hydroxyl_group = '[OX2H]'
    
    # Aliphatic chain of 6-8 carbons without terminal polar groups
    aliphatic_chain = 'CCCCCC'  # 6 carbons
    
    # Polar terminal groups (e.g., amino, hydroxyl)
    polar_terminal_groups = ['[NX3]', '[OX2H]']
    
    # Patterns for fluorinated alkyl chains
    fluorinated_alkyl = '[CX4][F]'
    
    # Amide group adjacent to carboxylic acid
    amide_adjacent_to_carboxylic = '[CX3](=O)[NX3][CX3](=O)[OX2H1]'
    
    # Aromatic rings connected via aliphatic chain
    aromatic_with_long_aliphatic = '[CX3](=O)[OX2H1][CX4][CX4][CX4][CX4][c]'
    
    # Bulky aromatic rings directly connected
    bulky_aromatic_rings = '[c]-[c]-[c]'

    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are α-amino acids with additional carboxylic acid groups (dicarboxylic α-amino acids) result in high yield.',
            'patterns': [
                [primary_amino],
                [carboxylic_acid]
            ],
            'count_threshold': {'[CX3](=O)[OX2H1]': 2},  # At least 2 carboxylic acid groups
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers that are para-substituted benzoic acids with metal-coordinating substituents (e.g., amino, nitro, bromomethyl) result in high yield; those with non-coordinating or electron-donating substituents (e.g., methyl) result in low yield.',
            'patterns': [
                ['c1ccc(cc1)C(=O)O'],  # Benzoic acid
                [
                    '[c][NX3H2]',        # Amino group on aromatic ring
                    '[c][NX3](=O)=O',    # Nitro group on aromatic ring
                    '[c][CH2Br]'         # Bromomethyl group on aromatic ring
                ]
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers that are heteroaromatic carboxylic acids containing nitrogen atoms capable of metal coordination result in high yield.',
            'patterns': [
                ['n1ccccc1C(=O)O', 'c1c[nH]ccc1C(=O)O']  # Pyridine and pyrazole carboxylic acids
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers that are aliphatic carboxylic acids with medium-length hydrocarbon chains (6–8 carbons) lacking polar terminal groups result in high yield; those with terminal polar groups (e.g., amino, hydroxyl) result in low yield.',
            'patterns': [
                [carboxylic_acid],
                [aliphatic_chain],  # Medium-length aliphatic chain
            ],
            'exclude_patterns': [
                polar_terminal_groups  # Exclude molecules with terminal polar groups
            ],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers containing multiple adjacent hydroxyl groups on an aliphatic chain result in high yield due to enhanced hydrogen bonding and coordination with the catalyst.',
            'patterns': [
                [hydroxyl_group],  # At least two hydroxyl groups
                [hydroxyl_group]
            ],
            'count_threshold': {'[OX2H]': 2},
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers with aliphatic thiol (mercapto) groups result in high yield; those with aromatic thiol groups result in low yield due to potential catalyst poisoning.',
            'patterns': [
                [thiol_group],  # Thiol group
            ],
            'exclude_patterns': [
                ['[c][SX2H]']  # Exclude aromatic thiol
            ],
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'Modifiers with carbonyl groups (aldehyde or ketone) directly attached to aromatic rings result in low yield due to potential catalyst deactivation or side reactions.',
            'patterns': [
                [aromatic_carbonyl]  # Aromatic carbonyl group
            ],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Modifiers with flexible ether chains and terminal polar groups result in low yield due to non-specific interactions that disrupt effective catalyst binding.',
            'patterns': [
                [ether_linkage],  # Ether linkage
                polar_terminal_groups  # Terminal polar group
            ],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers with fluorinated alkyl chains result in low yield due to strong electron-withdrawing effects and increased hydrophobicity that hinder catalyst interaction.',
            'patterns': [
                [fluorinated_alkyl]  # Fluorinated alkyl chains
            ],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers with amide groups adjacent to the carboxylic acid function result in low yield due to potential competition with the catalyst binding sites.',
            'patterns': [
                [amide_adjacent_to_carboxylic]  # Amide group adjacent to carboxylic acid
            ],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Modifiers where an aromatic ring is connected to the carboxylic acid via an aliphatic chain of four or more carbons result in high yield; similar structures with shorter chains (three carbons or fewer) result in low yield.',
            'patterns': [
                [aromatic_with_long_aliphatic]  # Aliphatic chain of 4 carbons connected to aromatic ring
            ],
            'prediction': 1
        },
        {
            'number': 12,
            'description': 'Modifiers with bulky aromatic rings directly connected to each other result in low yield due to steric hindrance that impedes catalyst interaction.',
            'patterns': [
                [bulky_aromatic_rings]  # Multiple aromatic rings connected directly
            ],
            'prediction': -1
        }
    ]

    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(p) for p in group]
            # Remove any None patterns that failed to compile
            compiled_group = [p for p in compiled_group if p is not None]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for group in rule['exclude_patterns']:
                compiled_group = [Chem.MolFromSmarts(p) for p in group]
                compiled_group = [p for p in compiled_group if p is not None]
                compiled_excludes.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_excludes

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        matches = mol.GetSubstructMatches(pat)
                        if matches:
                            # If a count threshold is specified for this pattern
                            if 'count_threshold' in rule and pat.GetSmarts() in rule['count_threshold']:
                                threshold = rule['count_threshold'][pat.GetSmarts()]
                                if len(matches) >= threshold:
                                    group_match = True
                                    break
                            else:
                                group_match = True
                                break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: **Modifiers that are α-amino dicarboxylic acids (e.g., aspartic acid, glutamic acid) result in high yield; α-amino monocarboxylic acids with aromatic side chains (e.g., phenylalanine) result in low yield, while those with extended conjugated aromatic systems (e.g., tryptophan) result in high yield.**

  - *High Yield Examples*: (2S)-2-aminobutanedioic acid (**aspartic acid**), (2S)-2-aminopentanedioic acid (**glutamic acid**), (2R)-2-amino-3-(1H-indol-3-yl)propanoic acid (**tryptophan**)
  - *Low Yield Example*: (2S)-2-amino-3-phenylpropanoic acid (**phenylalanine**)
  - *Rationale*: The presence of two carboxylate groups enhances metal chelation and coordination with the catalyst, improving interaction and increasing yield. In the case of tryptophan, the extended indole ring offers additional π-π interactions with the catalyst. Monocarboxylic acids with simple aromatic side chains lack these enhanced interactions, leading to lower yield.

- **Rule 2**: **Modifiers that are para-substituted benzoic acids with electron-withdrawing or metal-coordinating groups (e.g., amino, nitro, bromomethyl) result in high yield; those with electron-donating substituents (e.g., methyl, thiol) result in low yield.**

  - *High Yield Examples*: 4-aminobenzoic acid, 4-nitrobenzoic acid, 4-(bromomethyl)benzoic acid
  - *Low Yield Examples*: 4-methylbenzoic acid, 4-sulfanylbenzoic acid
  - *Rationale*: Electron-withdrawing and coordinating groups enhance the ability of the modifier to interact with metal centers by increasing the acidity of the carboxylic acid and facilitating better coordination. Electron-donating groups reduce acidity and coordination potential, leading to lower yield.

- **Rule 3**: **Modifiers that are heteroaromatic carboxylic acids containing nitrogen atoms capable of metal coordination result in high yield; however, if bulky aromatic rings are directly connected, resulting in steric hindrance, the yield is low.**

  - *High Yield Examples*: Pyridine-3-carboxylic acid (**nicotinic acid**), 1H-pyrazole-4-carboxylic acid, 2-oxo-1H-pyridine-4-carboxylic acid
  - *Low Yield Example*: 4-pyridin-4-ylbenzoic acid
  - *Rationale*: Nitrogen atoms in heteroaromatic rings act as coordination sites for metal ions, enhancing interaction with the catalyst and increasing yield. However, direct connection of bulky aromatic rings, as in 4-pyridin-4-ylbenzoic acid, can cause steric hindrance that impedes effective catalyst interaction, resulting in low yield.

- **Rule 4**: **Modifiers that are aliphatic carboxylic acids with medium-length hydrocarbon chains (6–8 carbons) lacking terminal polar groups result in high yield; introducing terminal polar groups (e.g., amino, hydroxyl) leads to low yield.**

  - *High Yield Example*: Octanoic acid
  - *Low Yield Examples*: 7-aminoheptanoic acid, 7-hydroxyheptanoic acid, 8-aminooctanoic acid
  - *Rationale*: Nonpolar aliphatic chains promote hydrophobic interactions with the catalyst surface, enhancing binding and catalytic performance. Terminal polar groups introduce polarity and hydrogen bonding, disrupting these interactions and leading to lower yield.

- **Rule 5**: **Modifiers containing multiple adjacent hydroxyl groups on an aliphatic chain result in high yield due to enhanced hydrogen bonding and chelation with the catalyst.**

  - *High Yield Example*: (2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid (**gluconic acid**)
  - *Rationale*: Multiple hydroxyl groups increase the potential for hydrogen bonding and chelation with the catalyst's metal centers, stabilizing the catalyst-modifier complex and improving catalytic activity.

- **Rule 6**: **Modifiers with aliphatic thiol (–SH) groups result in high yield; those with aromatic thiol groups result in low yield due to potential catalyst poisoning or deactivation.**

  - *High Yield Example*: 3-sulfanylpropanoic acid
  - *Low Yield Example*: 4-sulfanylbenzoic acid
  - *Rationale*: Aliphatic thiol groups interact beneficially with metal centers without deactivating the catalyst. Aromatic thiol groups may bind too strongly or form irreversible complexes with the metal center, leading to catalyst deactivation and reduced yield.

- **Rule 7**: **Modifiers with carbonyl groups (aldehyde or ketone) directly attached to aromatic rings result in low yield due to potential catalyst deactivation or side reactions.**

  - *Low Yield Examples*: 4-formylbenzoic acid, 5-formyl-2-hydroxybenzoic acid
  - *Rationale*: Carbonyl groups adjacent to aromatic rings can form unwanted complexes with metal ions or participate in side reactions, interfering with the catalyst's active sites and reducing catalytic efficiency.

- **Rule 8**: **Modifiers with flexible ether chains and terminal polar groups result in low yield due to nonspecific interactions that disrupt effective catalyst binding.**

  - *Low Yield Examples*: 2-[2-(2-methoxyethoxy)ethoxy]acetic acid, 3-[2-(2-aminoethoxy)ethoxy]propanoic acid
  - *Rationale*: Flexible ether chains can adopt various conformations that hinder proper orientation and binding of the modifier to the catalyst. Terminal polar groups introduce additional nonspecific interactions, reducing the efficiency of catalyst-modifier interactions.

- **Rule 9**: **Modifiers with fluorinated alkyl chains result in low yield due to strong electron-withdrawing effects and increased hydrophobicity that hinder catalyst interaction.**

  - *Low Yield Example*: 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid
  - *Rationale*: Electron-withdrawing fluorine atoms decrease electron density available for metal coordination and increase the hydrophobic character of the modifier, disrupting interactions with the catalyst.

- **Rule 10**: **Modifiers with amide groups adjacent to the carboxylic acid function result in low yield due to potential competition with the catalyst binding sites and altered electronic properties.**

  - *Low Yield Examples*: (2S)-6-acetamido-2-aminohexanoic acid, 2-[(4-hydroxybenzoyl)amino]acetic acid
  - *Rationale*: Amide groups near the carboxylic acid can form strong interactions through hydrogen bonding or coordination with metal centers, potentially blocking or competing with the catalyst's active sites and altering the acidity of the carboxylic acid.

- **Rule 11**: **Modifiers where an aromatic ring is connected to the carboxylic acid via an aliphatic chain of four or more carbons result in high yield; similar structures with shorter chains (three carbons or fewer) result in low yield.**

  - *High Yield Examples*: 5-(4-hydroxyphenyl)pentanoic acid, 4-pyridin-4-ylbutanoic acid
  - *Low Yield Example*: 3-(4-hydroxyphenyl)propanoic acid
  - *Rationale*: Longer aliphatic chains provide necessary flexibility and spacing for effective interactions between the aromatic ring and the catalyst, enhancing binding and catalytic performance. Shorter chains restrict these interactions due to steric hindrance or insufficient length for optimal alignment.

- **Rule 12**: **Modifiers containing rigid, fused aromatic systems that allow for π-π stacking interactions with the catalyst result in high yield due to enhanced binding affinity.**

  - *High Yield Examples*: 1,3-Dioxo-2-benzofuran-5-carboxylic acid, 2-oxo-1H-pyridine-4-carboxylic acid
  - *Rationale*: Fused aromatic systems can engage in strong π-π stacking interactions with the catalyst's aromatic components, improving binding and catalytic efficiency.

- **Rule 13**: **Modifiers with hydroxyl groups ortho to the carboxylic acid on aromatic rings (salicylic acid derivatives) result in low yield due to strong chelation that may lead to catalyst deactivation.**

  - *Low Yield Example*: 5-formyl-2-hydroxybenzoic acid
  - *Rationale*: The ortho-hydroxyl group can strongly chelate metal centers, potentially leading to catalyst deactivation or blocking active sites, thus reducing catalytic activity.

- **Rule 14**: **Modifiers with bulky substituents directly attached to aromatic rings without flexible linkers result in low yield due to steric hindrance that impedes catalyst interaction.**

  - *Low Yield Example*: 4-pyridin-4-ylbenzoic acid
  - *Rationale*: Bulky groups directly attached to aromatic rings can prevent effective binding to the catalyst by blocking approach to the active sites, reducing the efficiency of catalyst-modifier interactions.

- **Rule 15**: **Modifiers containing trifluoroacetyl groups result in low yield due to strong electron-withdrawing effects that decrease the coordinating ability of functional groups.**

  - *Low Yield Example*: 4-[(2,2,2-trifluoroacetyl)amino]butanoic acid
  - *Rationale*: The trifluoroacetyl group is highly electron-withdrawing, which can reduce the electron density on coordinating atoms (e.g., amino or carboxyl groups), diminishing their ability to interact with the catalyst's metal centers.

**End of Rules**

---

These rules have been formulated by analyzing the dataset and considering the underlying physicochemical properties of the modifiers. They combine multiple substructures and functional groups to predict whether a modifier will result in a high or low yield in the reaction. The rules aim to cover a broad range of the dataset while balancing simplicity and complexity to provide effective guidance for future modifier design.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3
0,0,0
0,0,0
0,1,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,-1
0,0,0
0,0,0
0,0,0
0,0,0
0,-1,0
0,0,0
0,0,0
0,-1,0
0,0,0
0,0,1
0,-1,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.5428571428571428; Test Accuracy: 0.0
    Train Support: 0.05714285714285714; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 2.0016339869281046; Test Lift: NONE
    Train Leverage: 0.028571428571428574; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Rule 1: α-amino dicarboxylic acids or α-amino monocarboxylic acids with extended conjugated aromatic systems result in high yield; α-amino monocarboxylic acids with aromatic side chains result in low yield.',
            'patterns_high': ['[NX3][CX4H]([CX3](=O)[OX1H])[CX3](=O)[OX1H]',  # α-amino dicarboxylic acid
                              '[NX3][CX4H]([CX3](=O)[OX1H])[CX3H][c]1c[nH]c2ccccc12'],  # Tryptophan-like structure
            'patterns_low': ['[NX3][CX4H]([CX3](=O)[OX1H])[CX3H][c]1ccccc1'],  # Phenylalanine-like structure
            'prediction_high': 1,
            'prediction_low': -1
        },
        {
            'number': 2,
            'description': 'Rule 2: Para-substituted benzoic acids with electron-withdrawing or metal-coordinating groups result in high yield; those with electron-donating substituents result in low yield.',
            'patterns_high': ['O=C(O)c1ccc([NH2])cc1',  # 4-aminobenzoic acid
                              'O=C(O)c1ccc([N+]([O-])=O)cc1',  # 4-nitrobenzoic acid
                              'O=C(O)c1ccc(CBr)cc1'],  # 4-(bromomethyl)benzoic acid
            'patterns_low': ['O=C(O)c1ccc(C)cc1',  # 4-methylbenzoic acid
                             'O=C(O)c1ccc(SH)cc1'],  # 4-sulfanylbenzoic acid
            'prediction_high': 1,
            'prediction_low': -1
        },
        {
            'number': 3,
            'description': 'Rule 3: Heteroaromatic carboxylic acids containing nitrogen atoms capable of metal coordination result in high yield; bulky aromatic rings directly connected result in low yield.',
            'patterns_high': ['O=C(O)c1cccnc1',  # Nicotinic acid
                              'O=C(O)c1ccnn1',  # Pyrazole-4-carboxylic acid
                              'O=C(O)c1cc(=O)[nH]c2ccccc12'],  # 2-oxo-1H-pyridine-4-carboxylic acid
            'patterns_low': ['O=C(O)c1ccc(c2ccncc2)cc1'],  # 4-pyridin-4-ylbenzoic acid
            'prediction_high': 1,
            'prediction_low': -1
        },
        # Additional rules (4 to 15) should be defined similarly...
    ]

    # Compile SMARTS patterns
    for rule in rules:
        rule['compiled_patterns_high'] = [Chem.MolFromSmarts(pat) for pat in rule.get('patterns_high', [])]
        rule['compiled_patterns_low'] = [Chem.MolFromSmarts(pat) for pat in rule.get('patterns_low', [])]

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match_high = any(mol.HasSubstructMatch(pat) for pat in rule['compiled_patterns_high'])
                match_low = any(mol.HasSubstructMatch(pat) for pat in rule['compiled_patterns_low'])
                if match_high:
                    row.append(1)
                elif match_low:
                    row.append(-1)
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)

    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df
--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: **Modifiers that are α-amino dicarboxylic acids (e.g., aspartic acid, glutamic acid) result in high yield.**

  - *High Yield Examples*: (2S)-2-aminobutanedioic acid (**aspartic acid**), (2S)-2-aminopentanedioic acid (**glutamic acid**)
  - *Rationale*: The presence of two carboxylate groups and an α-amino group enhances metal chelation and coordination with the catalyst, improving interaction and increasing yield.

- **Rule 2**: **Modifiers that are para-substituted benzoic acids with electron-withdrawing groups (e.g., nitro, bromomethyl) result in high yield; those with electron-donating groups (e.g., methyl, hydroxyl, sulfanyl) result in low yield.**

  - *High Yield Examples*: 4-nitrobenzoic acid, 4-(bromomethyl)benzoic acid
  - *Low Yield Examples*: 4-methylbenzoic acid, 4-hydroxybenzoic acid, 4-sulfanylbenzoic acid, 4-formylbenzoic acid
  - *Rationale*: Electron-withdrawing groups increase the acidity of the carboxylic acid and enhance metal coordination with the catalyst. Electron-donating groups decrease acidity and coordination potential, leading to reduced catalytic interaction and lower yield.

- **Rule 3**: **Modifiers that are heteroaromatic carboxylic acids containing nitrogen atoms in the ring (e.g., pyridine, pyrazole derivatives) result in high yield; however, when such rings are connected directly to another aromatic ring, the yield is low due to steric hindrance or electronic effects.**

  - *High Yield Examples*: Pyridine-3-carboxylic acid (**nicotinic acid**), 1H-pyrazole-4-carboxylic acid, 4-pyridin-4-ylbutanoic acid
  - *Low Yield Example*: 4-pyridin-4-ylbenzoic acid
  - *Rationale*: Nitrogen atoms in heteroaromatic rings act as additional coordination sites for metal ions, improving interaction with the catalyst and increasing yield. However, direct linkage of heteroaromatic rings to benzene rings may cause steric hindrance or alter electronic properties, reducing coordination effectiveness and yield.

- **Rule 4**: **Modifiers that are unbranched aliphatic carboxylic acids with medium-length hydrocarbon chains (6–8 carbons) and no additional functional groups result in high yield; introducing polar groups (e.g., hydroxyl, amino, amido) onto the chain leads to low yield.**

  - *High Yield Example*: Octanoic acid
  - *Low Yield Examples*: 7-hydroxyheptanoic acid, 7-aminoheptanoic acid, 8-aminooctanoic acid, (2S)-6-acetamido-2-aminohexanoic acid
  - *Rationale*: Nonpolar aliphatic chains promote hydrophobic interactions with the catalyst surface, enhancing binding and catalytic performance. Polar groups introduce polarity and can disrupt these interactions, resulting in lower yield.

- **Rule 5**: **Modifiers containing multiple adjacent hydroxyl groups on an aliphatic chain (polyhydroxylated acids) result in high yield due to enhanced hydrogen bonding and chelation with the catalyst.**

  - *High Yield Examples*: (2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid (**gluconic acid**), 2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid
  - *Rationale*: Multiple hydroxyl groups increase opportunities for hydrogen bonding and chelation with the catalyst's metal centers, stabilizing the catalyst-modifier complex and improving catalytic activity.

- **Rule 6**: **Modifiers with flexible ether chains and terminal polar groups result in low yield due to nonspecific interactions that hinder effective catalyst binding.**

  - *Low Yield Examples*: 2-[2-(2-methoxyethoxy)ethoxy]acetic acid, 3-[2-(2-aminoethoxy)ethoxy]propanoic acid
  - *Rationale*: Flexible ether chains can adopt various conformations that prevent proper orientation and binding to the catalyst. Terminal polar groups may engage in nonspecific interactions, reducing the efficiency of catalyst-modifier interactions.

- **Rule 7**: **Modifiers with aromatic aldehyde or ketone groups directly attached to the ring result in low yield due to potential catalyst deactivation or side reactions.**

  - *Low Yield Examples*: 4-formylbenzoic acid, 5-formyl-2-hydroxybenzoic acid
  - *Rationale*: Carbonyl groups adjacent to aromatic rings can form unwanted complexes with metal ions or participate in side reactions, interfering with the catalyst's active sites and reducing catalytic efficiency.

- **Rule 8**: **Modifiers containing fluorinated alkyl chains result in low yield due to strong electron-withdrawing effects and increased hydrophobicity that hinder catalyst interaction.**

  - *Low Yield Example*: 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid
  - *Rationale*: Electron-withdrawing fluorine atoms decrease electron density available for metal coordination and increase the hydrophobic character of the modifier, disrupting interactions with the catalyst.

- **Rule 9**: **Modifiers that are aliphatic thiol-containing carboxylic acids result in high yield; those with aromatic thiol groups result in low yield due to potential catalyst poisoning.**

  - *High Yield Example*: 3-sulfanylpropanoic acid
  - *Low Yield Example*: 4-sulfanylbenzoic acid
  - *Rationale*: Aliphatic thiol groups can interact beneficially with metal centers without deactivating the catalyst. Aromatic thiol groups may bind too strongly or form irreversible complexes with the metal center, leading to catalyst deactivation and reduced yield.

- **Rule 10**: **Modifiers where an aromatic ring is connected to the carboxylic acid via an aliphatic chain of four or more carbons result in high yield; similar structures with shorter chains (three carbons or fewer) result in low yield.**

  - *High Yield Examples*: 5-(4-hydroxyphenyl)pentanoic acid, 4-pyridin-4-ylbutanoic acid
  - *Low Yield Examples*: 3-(4-hydroxyphenyl)propanoic acid, 2-[(4-hydroxybenzoyl)amino]acetic acid
  - *Rationale*: Longer aliphatic chains provide necessary flexibility and spacing for effective interactions between the aromatic ring and the catalyst, enhancing binding and catalytic performance. Shorter chains may not allow optimal alignment, reducing yield.

- **Rule 11**: **Modifiers that are amino acids with hydrophobic side chains and only one carboxyl group result in low yield; those with additional coordinating functional groups (e.g., indole ring) result in high yield.**

  - *High Yield Example*: (2R)-2-amino-3-(1H-indol-3-yl)propanoic acid (**tryptophan**)
  - *Low Yield Examples*: (2S)-2-amino-3-phenylpropanoic acid (**phenylalanine**), (2S)-6-acetamido-2-aminohexanoic acid
  - *Rationale*: Amino acids with hydrophobic side chains lack sufficient coordinating groups to interact effectively with the catalyst. Introducing additional functional groups capable of coordination enhances metal interaction and increases yield.

- **Rule 12**: **Modifiers containing trifluoroacetamido groups result in low yield due to strong electron-withdrawing effects that reduce coordinating ability.**

  - *Low Yield Example*: 4-[(2,2,2-trifluoroacetyl)amino]butanoic acid
  - *Rationale*: Trifluoroacetamido groups decrease electron density on coordinating atoms, hindering metal coordination with the catalyst and leading to lower yield.

**End of Rules**

---

These rules have been carefully developed by analyzing the provided dataset and considering the underlying physicochemical properties of the modifiers. They combine multiple substructures and functional groups to predict whether a modifier will result in a high or low yield in the reaction. The rules aim to cover a broad range of the dataset while balancing simplicity and complexity to provide effective guidance for future modifier design.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 9.1,Rule 10,Rule 10.1,Rule 11,Rule 11.1,Rule 12
0,0,0,0,0,0,-1,0,0,0,1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,1,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,1,0,0
0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6285714285714286; Test Accuracy: 0.0
    Train Support: 0.11428571428571428; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 2.058823529411765; Test Lift: NONE
    Train Leverage: 0.05877551020408163; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    # Carboxylic acid group
    carboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1]'
    
    # Primary amine attached to alpha carbon
    alpha_amino_group = '[NX3H2][CX4H]'
    
    # Secondary amine
    secondary_amine = '[NX3H1][CX4]'
    
    # Aromatic ring
    aromatic_ring = '[a]'
    
    # Electron-Withdrawing Groups (EWGs)
    ewg_groups = ['[F,Cl,Br,I]', '[CX3](=O)[OX1H0-,OX2H1]', '[NX3+](=O)[O-]', '[CX4](F)(F)F']
    
    # Electron-Donating Groups (EDGs)
    edg_groups = ['[OX2H]', '[OX2][#6]', '[NX3H2]', '[NX3H][#6]', '[SX2H]']
    
    # Heteroaromatic rings containing nitrogen
    heteroaromatic_nitrogen = '[n]'
    
    # Aliphatic chain of 6 to 8 carbons without branching or functional groups
    aliphatic_chain = '[CH2]'*6 + '[CX3](=O)[OX1H0-,OX2H1]'
    
    # Polar groups
    polar_groups = ['[OX2H]', '[NX3;!$(*=*)]', '[CX3](=O)[NX3]']
    
    # Multiple adjacent hydroxyl groups
    polyhydroxylated_chain = '[CX4H1,R0][OX2H][CX4H1,R0][OX2H][CX4H1,R0][OX2H]'
    
    # Flexible ether chains with terminal polar groups
    ether_chain = '[#6][OX2][#6][OX2][#6]'
    terminal_polar_groups = ['[OX2H]', '[NX3H2]', '[CX3](=O)[OX1H0-,OX2H1]']
    
    # Aromatic aldehyde or ketone directly attached to ring
    aromatic_aldehyde_ketone = '[c][CX3](=O)[#6,#1]'
    
    # Fluorinated alkyl chains
    fluorinated_alkyl_chain = '[CX4]([F])[CX4]([F])[CX4]([F])'
    
    # Aliphatic thiol-containing carboxylic acids
    aliphatic_thiol = '[CX4][SX2H]'
    
    # Aromatic thiol groups
    aromatic_thiol = '[c][SX2H]'
    
    # Aromatic ring connected via chain of four or more carbons to carboxylic acid
    long_chain_to_acid = '[c][C][C][C][CX3](=O)[OX1H0-,OX2H1]'
    
    # Short chain to acid
    short_chain_to_acid = '[c]([C,C])[CX3](=O)[OX1H0-,OX2H1]'
    
    # Amino acids with hydrophobic side chains and one carboxyl group
    amino_acid_hydrophobic = '[NX3H2][CX4H]([CH3])[CX3](=O)[OX1H0-,OX2H1]'
    
    # Amino acids with additional coordinating groups (e.g., indole ring)
    amino_acid_coord_group = '[NX3H2][CX4H]([#6])[CX3](=O)[OX1H0-,OX2H1] [n]'
    
    # Trifluoroacetamido groups
    trifluoroacetamido = '[NX3][CX3](=O)[CX4](F)(F)F'
    
    # Define rules with patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'High yield: Modifiers that are α-amino dicarboxylic acids (e.g., aspartic acid, glutamic acid).',
            'patterns': [
                [alpha_amino_group],
                [carboxylic_acid]
            ],
            'count_threshold': {'[CX3](=O)[OX1H0-,OX2H1]': 2},
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'High yield: Para-substituted benzoic acids with electron-withdrawing groups.',
            'patterns': [
                ['[c][c]1[c][c][c][c][c]1[CX3](=O)[OX1H0-,OX2H1]'],  # Benzoic acid core
                ewg_groups  # Electron-withdrawing group attached to aromatic ring
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'High yield: Heteroaromatic carboxylic acids containing nitrogen atoms in the ring.',
            'patterns': [
                [heteroaromatic_nitrogen],
                [carboxylic_acid]
            ],
            'exclude_patterns': [
                ['[c][c][c][c][c][c]']  # Exclude molecules where nitrogen-containing ring is directly connected to another aromatic ring
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'High yield: Unbranched aliphatic carboxylic acids with medium-length hydrocarbon chains (6–8 carbons) and no additional functional groups.',
            'patterns': [
                [aliphatic_chain]
            ],
            'exclude_patterns': [
                polar_groups  # Exclude polar groups
            ],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'High yield: Modifiers containing multiple adjacent hydroxyl groups on an aliphatic chain (polyhydroxylated acids).',
            'patterns': [
                [polyhydroxylated_chain],
                [carboxylic_acid]
            ],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Low yield: Modifiers with flexible ether chains and terminal polar groups.',
            'patterns': [
                [ether_chain],
                terminal_polar_groups
            ],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Low yield: Modifiers with aromatic aldehyde or ketone groups directly attached to the ring.',
            'patterns': [
                [aromatic_aldehyde_ketone]
            ],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Low yield: Modifiers containing fluorinated alkyl chains.',
            'patterns': [
                [fluorinated_alkyl_chain]
            ],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'High yield: Aliphatic thiol-containing carboxylic acids. Low yield: Aromatic thiol groups.',
            'patterns': [
                [aliphatic_thiol],
                [carboxylic_acid]
            ],
            'exclude_patterns': [
                [aromatic_thiol]
            ],
            'prediction': 1
        },
        {
            'number': 9.1,
            'description': 'Low yield: Aromatic thiol groups.',
            'patterns': [
                [aromatic_thiol],
                [carboxylic_acid]
            ],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'High yield: Aromatic ring connected to the carboxylic acid via an aliphatic chain of four or more carbons.',
            'patterns': [
                [long_chain_to_acid]
            ],
            'prediction': 1
        },
        {
            'number': 10.1,
            'description': 'Low yield: Similar structures with shorter chains (three carbons or fewer).',
            'patterns': [
                [short_chain_to_acid]
            ],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'High yield: Amino acids with additional coordinating functional groups (e.g., indole ring).',
            'patterns': [
                [amino_acid_coord_group]
            ],
            'prediction': 1
        },
        {
            'number': 11.1,
            'description': 'Low yield: Amino acids with hydrophobic side chains and only one carboxyl group.',
            'patterns': [
                [amino_acid_hydrophobic]
            ],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'Low yield: Modifiers containing trifluoroacetamido groups.',
            'patterns': [
                [trifluoroacetamido]
            ],
            'prediction': -1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(p) for p in group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for group in rule['exclude_patterns']:
                compiled_group = [Chem.MolFromSmarts(p) for p in group]
                compiled_excludes.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_excludes
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        matches = mol.GetSubstructMatches(pat)
                        if matches:
                            # If a count threshold is specified for this pattern
                            if 'count_threshold' in rule and pat.GetSmarts() in rule['count_threshold']:
                                threshold = rule['count_threshold'][pat.GetSmarts()]
                                if len(matches) >= threshold:
                                    group_match = True
                                    break
                            else:
                                group_match = True
                                break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: **Modifiers that are α-amino dicarboxylic acids (e.g., aspartic acid, glutamic acid) result in high yield.**

  - *High Yield Examples*: (2S)-2-aminobutanedioic acid (**aspartic acid**), (2S)-2-aminopentanedioic acid (**glutamic acid**)
  - *Rationale*: The presence of an α-amino group adjacent to two carboxylic acid groups allows for effective chelation with metal centers in the catalyst, enhancing coordination and catalytic activity.

- **Rule 2**: **Modifiers that are unbranched aliphatic carboxylic acids with medium-length hydrocarbon chains (6–8 carbons) and no additional polar functional groups result in high yield; introducing polar groups (e.g., hydroxyl, amino) onto the chain leads to low yield.**

  - *High Yield Example*: Octanoic acid
  - *Low Yield Examples*: 7-hydroxyheptanoic acid, 7-aminoheptanoic acid, 8-aminooctanoic acid
  - *Rationale*: Nonpolar aliphatic chains enhance hydrophobic interactions with the catalyst surface, promoting effective binding. Polar substituents disrupt these interactions and may interfere with the catalyst's active sites, resulting in lower yield.

- **Rule 3**: **Modifiers that are para-substituted benzoic acids with electron-withdrawing groups (e.g., nitro, bromomethyl) result in high yield; those with electron-donating groups (e.g., methyl) result in low yield.**

  - *High Yield Examples*: 4-nitrobenzoic acid, 4-(bromomethyl)benzoic acid
  - *Low Yield Example*: 4-methylbenzoic acid
  - *Rationale*: Electron-withdrawing groups increase the acidity of the carboxylic acid and enhance coordination with metal ions in the catalyst. Electron-donating groups reduce acidity and may diminish effective coordination, leading to lower yield.

- **Rule 4**: **Modifiers that are heteroaromatic carboxylic acids containing accessible nitrogen atoms in the ring (e.g., pyridine, pyrazole) result in high yield; if the nitrogen is sterically hindered or the ring is fused to another aromatic system, the yield is lower.**

  - *High Yield Examples*: Pyridine-3-carboxylic acid (**nicotinic acid**), 1H-pyrazole-4-carboxylic acid
  - *Low Yield Example*: 4-pyridin-4-ylbenzoic acid
  - *Rationale*: Nitrogen atoms in heteroaromatic rings can act as coordination sites with metal centers, enhancing catalyst-modifier interactions. Steric hindrance or additional aromatic rings can inhibit this coordination, reducing yield.

- **Rule 5**: **Modifiers that are aliphatic thiol-containing carboxylic acids with short chains result in high yield; aromatic thiol-containing acids result in low yield due to potential catalyst poisoning.**

  - *High Yield Example*: 3-sulfanylpropanoic acid
  - *Low Yield Example*: 4-sulfanylbenzoic acid
  - *Rationale*: Aliphatic thiols can interact favorably with the catalyst without strongly deactivating it. Aromatic thiols may bind too strongly to metal centers, causing irreversible inhibition of catalytic activity.

- **Rule 6**: **Modifiers containing multiple adjacent hydroxyl groups on an aliphatic chain (polyhydroxylated acids) result in high yield due to enhanced chelation and hydrogen bonding with the catalyst.**

  - *High Yield Examples*: (2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid (**gluconic acid**)
  - *Rationale*: Multiple hydroxyl groups provide additional coordination sites and enable strong hydrogen bonding interactions with the catalyst, stabilizing the catalyst-modifier complex and improving yield.

- **Rule 7**: **Modifiers that are amino acids with aromatic side chains result in high yield if the side chain contains additional coordinating functional groups (e.g., indole ring in tryptophan); those lacking such groups result in low yield.**

  - *High Yield Example*: (2R)-2-amino-3-(1H-indol-3-yl)propanoic acid (**tryptophan**)
  - *Low Yield Example*: (2S)-2-amino-3-phenylpropanoic acid (**phenylalanine**)
  - *Rationale*: Aromatic side chains with heteroatoms (e.g., nitrogen in indole) can coordinate with metal centers, enhancing interaction with the catalyst. Aromatic side chains without coordinating groups are less effective, leading to lower yield.

- **Rule 8**: **Modifiers with aldehyde or keto groups directly attached to aromatic rings result in low yield due to potential catalyst deactivation or side reactions.**

  - *Low Yield Examples*: 4-formylbenzoic acid, 5-formyl-2-hydroxybenzoic acid
  - *Rationale*: Carbonyl groups adjacent to aromatic systems can form stable complexes with metal ions or participate in side reactions, interfering with the catalyst's active sites and reducing catalytic efficiency.

- **Rule 9**: **Modifiers containing flexible ether chains and terminal polar groups result in low yield due to nonspecific interactions that hinder effective catalyst binding.**

  - *Low Yield Examples*: 2-[2-(2-methoxyethoxy)ethoxy]acetic acid, 3-[2-(2-aminoethoxy)ethoxy]propanoic acid
  - *Rationale*: Flexible ether chains may adopt conformations that prevent proper orientation and binding to the catalyst. Terminal polar groups can engage in nonspecific interactions, reducing the effectiveness of catalyst-modifier interactions.

- **Rule 10**: **Modifiers containing fluorinated alkyl chains result in low yield due to strong electron-withdrawing effects and increased hydrophobicity that hinder catalyst interaction.**

  - *Low Yield Example*: 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid
  - *Rationale*: Electron-withdrawing fluorine atoms decrease electron density on potential donor atoms, reducing coordination ability. Increased hydrophobicity may disrupt interactions with the catalyst.

- **Rule 11**: **Modifiers that are ω-amino acids with chain lengths of five carbons or fewer result in high yield; longer-chain ω-amino acids result in low yield due to decreased effective coordination.**

  - *High Yield Example*: 5-aminopentanoic acid
  - *Low Yield Examples*: 7-aminoheptanoic acid, 8-aminooctanoic acid
  - *Rationale*: Shorter ω-amino acids maintain optimal chain length for effective interaction with the catalyst. Longer chains introduce flexibility and steric hindrance, reducing binding efficiency.

- **Rule 12**: **Modifiers that are 4-substituted phenylalkanoic acids with aliphatic chains of four carbons or more result in high yield; similar structures with shorter chains result in low yield.**

  - *High Yield Examples*: 5-(4-hydroxyphenyl)pentanoic acid, 4-pyridin-4-ylbutanoic acid
  - *Low Yield Example*: 3-(4-hydroxyphenyl)propanoic acid
  - *Rationale*: Longer aliphatic chains provide flexibility and appropriate spacing for the aromatic ring to interact effectively with the catalyst. Shorter chains may not allow optimal alignment, reducing interaction and yield.

- **Rule 13**: **Modifiers containing trifluoroacetyl or other strongly electron-withdrawing acyl groups attached to amino functions result in low yield due to decreased coordination ability of the amino group.**

  - *Low Yield Example*: 4-[(2,2,2-trifluoroacetyl)amino]butanoic acid
  - *Rationale*: Electron-withdrawing acyl groups reduce electron density on the amino nitrogen, hindering its ability to coordinate with the metal catalyst and decreasing yield.

**End of Rules**

These rules have been developed by analyzing the dataset and considering the underlying physicochemical properties of the modifiers. They combine multiple substructures and functional groups to predict whether a modifier will result in a high or low yield in the reaction. The rules aim to cover a broad range of the dataset while balancing simplicity and complexity to provide effective guidance for future modifier design.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 11.1,Rule 12,Rule 12.1,Rule 13
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
0,0,1,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6285714285714286; Test Accuracy: 0.0
    Train Support: 0.06285714285714286; Test Support: 0.0
    Train Confidence: 0.9199999999999999; Test Confidence: 0.4
    Train Lift: 1.8346405228758171; Test Lift: NONE
    Train Leverage: 0.01910204081632653; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    
    # Primary aliphatic amine group (-NH2 attached to carbon)
    primary_aliphatic_amine = '[NX3H2][CX4]'
    
    # Alpha-amino acid pattern: primary amine attached to alpha carbon which is attached to carboxylic acid
    alpha_amino_acid = '[NX3H2][CX4H]([#6])[CX3](=O)[OX2H1]'
    
    # Count pattern for carboxylic acid groups
    carboxylic_acid_count = '[CX3](=O)[OX2H1]'
    
    # Unbranched aliphatic chain ending with carboxylic acid (chain length 6-8 carbons)
    aliphatic_chain_6_8 = '[CH3][CH2]{4,6}[CX3](=O)[OX2H1]'
    
    # Polar functional groups to exclude
    polar_groups = '[#7,#8,#15,#16]'  # Nitrogen, Oxygen, Phosphorus, Sulfur
    
    # Hydroxyl group (-OH)
    hydroxyl_group = '[OX2H]'
    
    # Amino group (-NH2)
    amino_group = '[NX3H2]'
    
    # Electron-withdrawing groups on aromatic ring
    nitro_group = '[NX3](=O)=O'
    halogen = '[F,Cl,Br,I]'
    
    # Patterns for substituted benzoic acids
    para_substituted_benzoic_acid = 'c1ccc(cc1)C(=O)O'
    
    # Electron-donating groups on aromatic ring
    methyl_on_aromatic = 'c1ccc(cc1)[CH3]'
    methoxy_on_aromatic = 'c1ccc(cc1)OC'
    hydroxyl_on_aromatic = 'c1ccc(cc1)O'
    
    # Heteroaromatic carboxylic acids with accessible nitrogen in ring
    pyridine_carboxylic_acid = '[nH]1cccc1C(=O)O'
    pyrazole_carboxylic_acid = 'n1nccc1C(=O)O'
    
    # Sterically hindered nitrogen or fused rings
    fused_aromatic_nitrogen = 'c2ccc1nccc1c2'
    
    # Aliphatic thiol-containing carboxylic acids
    aliphatic_thiol_acid = '[SX2H][CX4][CX3](=O)[OX2H1]'
    
    # Aromatic thiol-containing acids
    aromatic_thiol_acid = '[SX2H]c'
    
    # Polyhydroxylated acids
    multiple_hydroxyls = '[OX2H][CX4][OX2H]'
    
    # Amino acids with aromatic side chains
    amino_acid_with_aromatic_side_chain = '[NX3H2][CX4H]([CX3](=O)[OX2H1])[CX4][c]'
    
    # Aromatic ring with coordinating functional group
    indole_ring = 'c1cc2c(c1)cc[nH]2'
    
    # Aldehyde or keto groups attached to aromatic rings
    aldehyde_on_aromatic = 'c1ccc(cc1)C=O'
    keto_on_aromatic = 'c1ccc(cc1)C(=O)'
    
    # Flexible ether chains with terminal polar groups
    ether_chain = '[CX4][OX2][CX4][OX2][CX4][OX2][CX3](=O)[OX2H1]'
    
    # Fluorinated alkyl chains
    fluorinated_alkyl_chain = '[CX4]([F])[F]'
    
    # ω-amino acids with chain lengths <=5 carbons
    omega_amino_acid_short = '[NX3H2][CX4][CH2][CH2][CX3](=O)[OX2H1]'
    # ω-amino acids with chain lengths >5 carbons
    omega_amino_acid_long = '[NX3H2][CX4][CH2]{4,}[CX3](=O)[OX2H1]'
    
    # 4-substituted phenylalkanoic acids with aliphatic chains >=4 carbons
    four_substituted_phenylalkanoic_acid_long = 'c1ccc(cc1[CX4][CH2]{3,}[CX3](=O)[OX2H1])'
    # 4-substituted phenylalkanoic acids with aliphatic chains <4 carbons
    four_substituted_phenylalkanoic_acid_short = 'c1ccc(cc1[CX4][CH2]{1,2}[CX3](=O)[OX2H1])'
    
    # Trifluoroacetyl attached to amino functions
    trifluoroacetyl_amino = '[NX3][CX3](=O)[CX4](F)(F)F'
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'High Yield: Modifiers that are α-amino dicarboxylic acids (e.g., aspartic acid, glutamic acid).',
            'patterns': [[alpha_amino_acid]],
            'count_threshold': {carboxylic_acid_count: 2},
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'High Yield: Modifiers that are unbranched aliphatic carboxylic acids with medium-length chains (6–8 carbons) and no polar functional groups.',
            'patterns': [[aliphatic_chain_6_8]],
            'exclude_patterns': [[polar_groups]],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'High Yield: Modifiers that are para-substituted benzoic acids with electron-withdrawing groups.',
            'patterns': [[para_substituted_benzoic_acid], [nitro_group, halogen]],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'High Yield: Modifiers that are heteroaromatic carboxylic acids with accessible nitrogen atoms in the ring.',
            'patterns': [[pyridine_carboxylic_acid, pyrazole_carboxylic_acid]],
            'exclude_patterns': [[fused_aromatic_nitrogen]],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'High Yield: Modifiers that are aliphatic thiol-containing carboxylic acids with short chains.',
            'patterns': [[aliphatic_thiol_acid]],
            'exclude_patterns': [[aromatic_thiol_acid]],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'High Yield: Modifiers containing multiple adjacent hydroxyl groups on an aliphatic chain.',
            'patterns': [[multiple_hydroxyls], [carboxylic_acid]],
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'High Yield: Modifiers that are amino acids with aromatic side chains containing coordinating functional groups.',
            'patterns': [[amino_acid_with_aromatic_side_chain], [indole_ring]],
            'exclude_patterns': [[hydroxyl_on_aromatic]],
            'prediction': 1
        },
        {
            'number': 8,
            'description': 'Low Yield: Modifiers with aldehyde or keto groups directly attached to aromatic rings.',
            'patterns': [[aldehyde_on_aromatic, keto_on_aromatic]],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Low Yield: Modifiers containing flexible ether chains and terminal polar groups.',
            'patterns': [[ether_chain]],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Low Yield: Modifiers containing fluorinated alkyl chains.',
            'patterns': [[fluorinated_alkyl_chain]],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'High Yield: Modifiers that are ω-amino acids with chain lengths ≤5 carbons; Low Yield for longer chains.',
            'patterns': [[omega_amino_acid_short]],
            'prediction': 1
        },
        {
            'number': 11.1,
            'description': 'Low Yield: ω-amino acids with chain lengths >5 carbons.',
            'patterns': [[omega_amino_acid_long]],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'High Yield: Modifiers that are 4-substituted phenylalkanoic acids with aliphatic chains of ≥4 carbons.',
            'patterns': [[four_substituted_phenylalkanoic_acid_long]],
            'prediction': 1
        },
        {
            'number': 12.1,
            'description': 'Low Yield: Similar structures with shorter chains.',
            'patterns': [[four_substituted_phenylalkanoic_acid_short]],
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Low Yield: Modifiers containing trifluoroacetyl or other strongly electron-withdrawing acyl groups attached to amino functions.',
            'patterns': [[trifluoroacetyl_amino]],
            'prediction': -1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(p) for p in group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for group in rule['exclude_patterns']:
                compiled_group = [Chem.MolFromSmarts(p) for p in group]
                compiled_excludes.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_excludes
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        matches = mol.GetSubstructMatches(pat)
                        if matches:
                            # If a count threshold is specified for this pattern
                            if 'count_threshold' in rule and pat.GetSmarts() in rule['count_threshold']:
                                threshold = rule['count_threshold'][pat.GetSmarts()]
                                if len(matches) >= threshold:
                                    group_match = True
                                    break
                            else:
                                group_match = True
                                break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df
--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    After analyzing the dataset and considering the underlying physicochemical properties, here are the updated rules that describe the relationship between molecular modifiers and the yield:

---

**Start of Rules**

- **Rule 1**: **Modifiers that are α-amino dicarboxylic acids (amino acids with a side-chain carboxylic acid group) result in high yield due to effective chelation with the catalyst.**

  - *High Yield Examples*: (2S)-2-aminobutanedioic acid (**aspartic acid**), (2S)-2-aminopentanedioic acid (**glutamic acid**)
  - *Rationale*: The presence of an amino group and two carboxylic acid groups enhances coordination with metal centers in the catalyst, improving catalytic activity.

- **Rule 2**: **Modifiers that are unbranched aliphatic carboxylic acids with medium-length hydrocarbon chains (6–8 carbons) result in high yield.**

  - *High Yield Example*: Octanoic acid
  - *Rationale*: The hydrophobic aliphatic chain facilitates interactions with the catalyst's hydrophobic regions, promoting effective binding.

- **Rule 3**: **Modifiers that are aromatic carboxylic acids with electron-withdrawing substituents at the para position result in high yield; those with electron-donating substituents result in low yield.**

  - *High Yield Examples*: 4-nitrobenzoic acid, 4-(bromomethyl)benzoic acid
  - *Low Yield Example*: 4-methylbenzoic acid
  - *Rationale*: Electron-withdrawing groups increase the acidity of the carboxylic acid, enhancing coordination with metal ions in the catalyst. Electron-donating groups decrease acidity, reducing coordination efficiency.

- **Rule 4**: **Modifiers that are heteroaromatic carboxylic acids containing coordinating nitrogen atoms result in high yield.**

  - *High Yield Examples*: Pyridine-3-carboxylic acid (**nicotinic acid**), 1H-pyrazole-4-carboxylic acid
  - *Rationale*: Nitrogen atoms in heteroaromatic rings serve as additional coordination sites with the metal catalyst, enhancing modifier-catalyst interactions.

- **Rule 5**: **Modifiers that are amino acids with aromatic side chains containing heteroatoms (e.g., indole ring in tryptophan) result in high yield.**

  - *High Yield Example*: (2R)-2-amino-3-(1H-indol-3-yl)propanoic acid (**tryptophan**)
  - *Rationale*: The heteroatom in the aromatic side chain can coordinate with the metal catalyst, strengthening the interaction and improving yield.

- **Rule 6**: **Modifiers with multiple adjacent hydroxyl groups on an aliphatic chain (polyhydroxylated acids) result in high yield due to enhanced chelation and hydrogen bonding with the catalyst.**

  - *High Yield Example*: (2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid (**gluconic acid**)
  - *Rationale*: Multiple hydroxyl groups provide additional coordination sites and enable strong hydrogen bonding interactions with the catalyst, stabilizing the complex.

- **Rule 7**: **Modifiers that are aliphatic ω-amino acids with a chain length of five carbons result in high yield; longer chain lengths result in low yield due to decreased effective coordination.**

  - *High Yield Example*: 5-aminopentanoic acid
  - *Low Yield Examples*: 7-aminoheptanoic acid, 8-aminooctanoic acid
  - *Rationale*: A chain length of five carbons optimizes the spatial arrangement for coordination with the catalyst. Longer chains introduce flexibility and steric hindrance, reducing binding efficiency.

- **Rule 8**: **Modifiers with flexible ether chains result in low yield due to reduced effective interaction with the catalyst.**

  - *Low Yield Examples*: 2-[2-(2-methoxyethoxy)ethoxy]acetic acid, 3-[2-(2-aminoethoxy)ethoxy]propanoic acid
  - *Rationale*: Flexible ether chains can adopt conformations that hinder proper orientation and binding to the catalyst, diminishing catalytic effectiveness.

- **Rule 9**: **Modifiers that are aromatic carboxylic acids containing aldehyde groups result in low yield due to potential catalyst deactivation or side reactions.**

  - *Low Yield Examples*: 4-formylbenzoic acid, 5-formyl-2-hydroxybenzoic acid
  - *Rationale*: Aldehyde groups may form stable complexes with metal ions or participate in side reactions, interfering with the catalyst's active sites and reducing efficiency.

- **Rule 10**: **Modifiers containing fluorinated alkyl chains result in low yield due to decreased coordination ability.**

  - *Low Yield Example*: 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid
  - *Rationale*: Electron-withdrawing fluorine atoms decrease electron density on potential donor atoms, hindering coordination with the metal catalyst.

- **Rule 11**: **Modifiers that are aromatic carboxylic acids with thiol groups result in low yield due to potential catalyst poisoning.**

  - *Low Yield Example*: 4-sulfanylbenzoic acid
  - *Rationale*: Aromatic thiols may bind strongly to metal centers, leading to irreversible inhibition of catalytic activity.

- **Rule 12**: **Modifiers that are substituted phenylalkanoic acids with a chain length of at least five carbons and containing additional coordinating groups result in high yield; inadequate chain length or lack of coordinating groups leads to low yield.**

  - *High Yield Example*: 5-(4-hydroxyphenyl)pentanoic acid
  - *Low Yield Example*: 3-(4-hydroxyphenyl)propanoic acid
  - *Rationale*: Sufficient aliphatic chain length allows the coordinating groups to effectively interact with the catalyst. Shorter chains may not provide adequate spacing for coordination.

- **Rule 13**: **Modifiers with acylated amino groups bearing strong electron-withdrawing substituents (e.g., trifluoroacetyl) result in low yield due to decreased coordination ability of the amino group.**

  - *Low Yield Example*: 4-[(2,2,2-trifluoroacetyl)amino]butanoic acid
  - *Rationale*: Electron-withdrawing acyl groups reduce electron density on the amino nitrogen, impairing its ability to coordinate with the metal catalyst.

- **Rule 14**: **Modifiers containing heteroaromatic systems capable of chelation result in high yield due to enhanced interaction with the catalyst.**

  - *High Yield Examples*: 1,3-dioxo-2-benzofuran-5-carboxylic acid, 2-oxo-1H-pyridine-4-carboxylic acid
  - *Rationale*: Heteroaromatic structures provide additional coordination sites, strengthening the catalyst-modifier complex and improving catalytic activity.

- **Rule 15**: **Modifiers that are amino acids with hydrophobic side chains lacking coordinating groups result in low yield due to weaker interactions with the catalyst.**

  - *Low Yield Example*: (2S)-2-amino-3-phenylpropanoic acid (**phenylalanine**)
  - *Rationale*: Absence of coordinating functional groups in the side chain leads to reduced binding affinity with the catalyst, lowering the yield.

**End of Rules**

---

These rules combine multiple substructures and functional groups to predict whether a modifier will result in a high or low yield in the reaction. They cover a broad range of the dataset and balance simplicity with complexity, providing effective guidance for future modifier design.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 6,Rule 7
0,0,0,0,0,0
0,0,0,0,0,0
0,0,0,0,0,0
0,0,0,0,0,0
0,0,0,0,0,0
0,0,0,0,0,0
0,0,0,0,0,0
0,0,0,0,0,0
0,0,0,0,0,0
0,0,0,0,0,0
0,0,0,0,0,0
0,0,0,0,0,0
0,0,0,0,0,0
0,0,0,0,0,0
0,0,0,0,0,0
0,0,0,0,0,0
0,0,0,0,0,0
0,0,0,0,0,0
0,0,0,0,0,0
0,0,0,0,0,0
0,0,0,0,0,0
0,0,0,0,0,0
0,0,0,0,0,0
0,0,0,0,0,0
0,0,0,0,0,0
0,0,0,0,0,0
0,0,0,0,0,0
0,0,0,0,0,0
0,0,0,0,0,0
0,0,0,0,0,0
0,0,0,0,0,0
0,0,0,0,0,0
0,0,0,0,0,0
0,0,0,0,0,0
0,0,0,0,0,0
0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.5142857142857142; Test Accuracy: 0.0
    Train Support: 0.0; Test Support: 0.0
    Train Confidence: 0.5; Test Confidence: 0.5
    Train Lift: 1.0; Test Lift: NONE
    Train Leverage: 0.0; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define the rules with their associated patterns and predictions
    rules = [
        # Rule 1
        {
            'number': 1,
            'description': 'Modifiers that are α-amino dicarboxylic acids (amino acids with a side-chain carboxylic acid group) result in high yield.',
            'patterns': [
                {'smarts': '[NX3H2][CX4H]([CX3](=O)[OX1H])[#6][CX3](=O)[OX1H]', 'count': 1},  # α-amino acid with side-chain carboxylic acid
            ],
            'prediction': 1
        },
        # Rule 2
        {
            'number': 2,
            'description': 'Modifiers that are unbranched aliphatic carboxylic acids with medium-length hydrocarbon chains (6–8 carbons) result in high yield.',
            'function': 'rule2',  # Custom function to check this rule
            'prediction': 1
        },
        # Rule 3
        {
            'number': 3,
            'description': 'Modifiers that are aromatic carboxylic acids with electron-withdrawing substituents at the para position result in high yield; those with electron-donating substituents result in low yield.',
            'function': 'rule3',
            'prediction': [1, -1]  # [High yield, Low yield]
        },
        # Rule 4
        {
            'number': 4,
            'description': 'Modifiers that are heteroaromatic carboxylic acids containing coordinating nitrogen atoms result in high yield.',
            'patterns': [
                {'smarts': '[n][c][c][c][c][CX3](=O)[OX1H]', 'count': 1},  # Pyridine carboxylic acid
            ],
            'prediction': 1
        },
        # Rule 6
        {
            'number': 6,
            'description': 'Modifiers with multiple adjacent hydroxyl groups on an aliphatic chain (polyhydroxylated acids) result in high yield.',
            'patterns': [
                {'smarts': '[OX2H][CX4H]([OX2H])[CX4H]([OX2H])[CX4H]([OX2H])[CX4H]([OX2H])[CX4H]', 'count': 1},  # Chain with multiple adjacent OH groups
                {'smarts': '[CX3](=O)[OX1H]', 'count': 1}  # Carboxylic acid group
            ],
            'prediction': 1
        },
        # Rule 7
        {
            'number': 7,
            'description': 'Modifiers that are aliphatic ω-amino acids with a chain length of five carbons result in high yield; longer chain lengths result in low yield.',
            'function': 'rule7',  # Custom function to check this rule
            'prediction': [1, -1]  # [High yield for 5 carbons, Low yield for longer]
        }
        # Additional rules can be added here following the same format
    ]

    # Compile SMARTS patterns
    for rule in rules:
        if 'patterns' in rule:
            compiled_patterns = []
            for pattern in rule['patterns']:
                smarts = pattern['smarts']
                mol = Chem.MolFromSmarts(smarts)
                compiled_patterns.append({'mol': mol, 'count': pattern.get('count', 1)})
            rule['compiled_patterns'] = compiled_patterns

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                if 'function' in rule:
                    # Use custom function for this rule
                    if rule['function'] == 'rule2':
                        # Rule 2 custom function
                        match = check_rule2(mol)
                        if match:
                            row.append(rule['prediction'])
                        else:
                            row.append(0)
                    elif rule['function'] == 'rule3':
                        # Rule 3 custom function
                        prediction = check_rule3(mol, rule)
                        row.append(prediction)
                    elif rule['function'] == 'rule7':
                        # Rule 7 custom function
                        prediction = check_rule7(mol, rule)
                        row.append(prediction)
                    else:
                        row.append(0)
                elif 'compiled_patterns' in rule:
                    match = True
                    for pat in rule['compiled_patterns']:
                        substruct = pat['mol']
                        count_required = pat['count']
                        matches = mol.GetSubstructMatches(substruct)
                        if len(matches) < count_required:
                            match = False
                            break
                    if match:
                        row.append(rule['prediction'])
                    else:
                        row.append(0)
                else:
                    # No patterns or functions defined
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)

    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df

# Custom function for Rule 2

def check_rule2(mol):
    # Rule 2: Unbranched aliphatic carboxylic acids with chain length 6–8 carbons
    # Check if molecule is a carboxylic acid
    carboxylic_acid = Chem.MolFromSmarts('[CX3](=O)[OX1H]')
    if not mol.HasSubstructMatch(carboxylic_acid):
        return False
    # Get the carboxylic acid carbon
    matches = mol.GetSubstructMatches(carboxylic_acid)
    for match in matches:
        carboxy_c = match[0]
        # Now check for unbranched aliphatic chain of length 6-8 carbons attached to this carbon
        chain_length = get_chain_length(mol, carboxy_c)
        if chain_length >= 6 and chain_length <=8:
            return True
    return False

def get_chain_length(mol, start_atom_idx):
    # Use BFS to traverse the chain starting from the carboxylic carbon
    visited = set()
    queue = [(start_atom_idx, 0)]
    max_chain_length = 0
    while queue:
        atom_idx, chain_length = queue.pop(0)
        if chain_length > 0 and mol.GetAtomWithIdx(atom_idx).GetSymbol() != 'C':
            continue  # Only consider carbon atoms
        if chain_length > max_chain_length:
            max_chain_length = chain_length
        visited.add(atom_idx)
        atom = mol.GetAtomWithIdx(atom_idx)
        if atom.GetDegree() > 2:
            return 0  # Not unbranched
        neighbors = [nbr.GetIdx() for nbr in atom.GetNeighbors() if nbr.GetIdx() not in visited]
        for nbr_idx in neighbors:
            queue.append((nbr_idx, chain_length+1))
    return max_chain_length

# Custom function for Rule 3

def check_rule3(mol, rule):
    # Rule 3: Aromatic carboxylic acids with EWG or EDG at para position
    benzoic_acid = Chem.MolFromSmarts('c1ccc([CX3](=O)[OX1H])cc1')
    if not mol.HasSubstructMatch(benzoic_acid):
        return 0
    # Check for substituents at para position
    substituents = {
        'EWG': [
            Chem.MolFromSmarts('c1cc([CX3](=O)[OX1H])cc([F,Cl,Br,I,N+](=O)[O-],[CX3](=O)[OX1H])c1'),
        ],
        'EDG': [
            Chem.MolFromSmarts('c1cc([CX3](=O)[OX1H])cc([OX2H,OX2H0][#6,N])c1'),
        ]
    }
    for ewg in substituents['EWG']:
        if mol.HasSubstructMatch(ewg):
            return rule['prediction'][0]  # High yield
    for edg in substituents['EDG']:
        if mol.HasSubstructMatch(edg):
            return rule['prediction'][1]  # Low yield
    return 0

# Custom function for Rule 7

def check_rule7(mol, rule):
    # Rule 7: ω-Amino acids with chain length of five carbons
    # Check for amino group and carboxylic acid
    carboxylic_acid = Chem.MolFromSmarts('[CX3](=O)[OX1H]')
    amino_group = Chem.MolFromSmarts('[NX3H2]')
    if not mol.HasSubstructMatch(carboxylic_acid):
        return 0
    if not mol.HasSubstructMatch(amino_group):
        return 0
    # Measure the chain length between amino group and carboxylic acid
    carboxy_matches = mol.GetSubstructMatches(carboxylic_acid)
    amino_matches = mol.GetSubstructMatches(amino_group)
    for carboxy_match in carboxy_matches:
        for amino_match in amino_matches:
            try:
                path = Chem.rdmolops.GetShortestPath(mol, carboxy_match[0], amino_match[0])
                path_length = len(path) - 1  # Number of bonds between the two atoms
                if path_length == 5:
                    return rule['prediction'][0]  # High yield
                elif path_length > 5:
                    return rule['prediction'][1]  # Low yield for longer chains
            except:
                continue
    return 0

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: **Modifiers that are unbranched aliphatic monocarboxylic acids with medium-length hydrocarbon chains (6–8 carbons) and no additional functional groups result in high yield.**

  - *High Yield Example*: **Octanoic acid**
  - *Low Yield Examples*: 7-hydroxyheptanoic acid, 7-aminoheptanoic acid, 8-aminooctanoic acid
  - *Rationale*: The hydrophobic chain facilitates favorable interactions with the catalyst's hydrophobic regions without interference from additional functional groups.

- **Rule 2**: **Modifiers that are aromatic carboxylic acids with electron-withdrawing substituents at the para position typically result in high yield; those with electron-donating substituents may result in variable yields.**

  - *High Yield Examples*: **4-nitrobenzoic acid**, **4-(bromomethyl)benzoic acid**
  - *Variable Yield Examples*: **4-aminobenzoic acid** (high yield), **4-methylbenzoic acid** (low yield)
  - *Rationale*: Electron-withdrawing groups increase the acidity of the carboxylic acid, enhancing coordination with metal centers in the catalyst. Electron-donating groups can have mixed effects depending on their ability to coordinate with the catalyst.

- **Rule 3**: **Modifiers that are heteroaromatic carboxylic acids containing accessible coordinating nitrogen atoms result in high yield; sterically hindered nitrogen atoms may reduce yield.**

  - *High Yield Examples*: **Pyridine-3-carboxylic acid** (nicotinic acid), **1H-pyrazole-4-carboxylic acid**
  - *Low Yield Example*: **4-pyridin-4-ylbenzoic acid**
  - *Rationale*: Nitrogen atoms in heteroaromatic rings can coordinate with the metal catalyst, enhancing modifier-catalyst interactions. Steric hindrance can impede this coordination.

- **Rule 4**: **Modifiers with flexible ether chains result in low yield due to decreased effective interaction with the catalyst.**

  - *Low Yield Examples*: **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**, **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**
  - *Rationale*: Flexible ether linkages can adopt conformations that prevent proper alignment with the catalyst's active sites, reducing binding efficiency.

- **Rule 5**: **Modifiers that are amino acids with side chains capable of chelation (e.g., containing heteroatoms) result in high yield; those with hydrophobic side chains lacking coordinating groups result in low yield.**

  - *High Yield Example*: **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (tryptophan)
  - *Low Yield Example*: **(2S)-2-amino-3-phenylpropanoic acid** (phenylalanine)
  - *Rationale*: Side chains with heteroatoms enhance coordination with the catalyst. Non-coordinating hydrophobic side chains do not contribute to effective binding.

- **Rule 6**: **Modifiers with multiple adjacent hydroxyl groups on an aliphatic chain (polyhydroxylated acids) result in high yield due to enhanced chelation and hydrogen bonding with the catalyst.**

  - *High Yield Example*: **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (gluconic acid)
  - *Rationale*: Multiple hydroxyl groups provide additional coordination sites and enable strong hydrogen bonding interactions with the catalyst, stabilizing the complex.

- **Rule 7**: **Modifiers that are aliphatic ω-amino acids with a chain length of five carbons result in high yield; longer chain lengths result in low yield due to decreased effective coordination.**

  - *High Yield Example*: **5-aminopentanoic acid**
  - *Low Yield Examples*: **7-aminoheptanoic acid**, **8-aminooctanoic acid**
  - *Rationale*: A five-carbon chain optimizes the spatial arrangement for coordination with the catalyst. Longer chains introduce flexibility and steric hindrance, reducing binding efficiency.

- **Rule 8**: **Modifiers that are aromatic carboxylic acids with aldehyde groups result in low yield due to potential catalyst deactivation or side reactions.**

  - *Low Yield Examples*: **4-formylbenzoic acid**, **5-formyl-2-hydroxybenzoic acid**
  - *Rationale*: Aldehyde groups may form stable complexes with metal ions or participate in side reactions, interfering with the catalyst's active sites.

- **Rule 9**: **Modifiers containing fluorinated alkyl chains result in low yield due to decreased coordination ability.**

  - *Low Yield Example*: **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**
  - *Rationale*: Electron-withdrawing fluorine atoms reduce electron density on potential donor atoms, hindering coordination with the metal catalyst.

- **Rule 10**: **Modifiers that are aromatic carboxylic acids with thiol groups result in low yield due to potential catalyst poisoning; aliphatic thiol-containing modifiers may result in high yield.**

  - *Low Yield Example*: **4-sulfanylbenzoic acid**
  - *High Yield Example*: **3-sulfanylpropanoic acid**
  - *Rationale*: Aromatic thiols may bind strongly to metal centers, leading to irreversible inhibition of catalytic activity. Aliphatic thiols may not have the same deactivating effect.

- **Rule 11**: **Modifiers that are substituted phenylalkanoic acids with a chain length of five carbons and additional coordinating groups result in high yield; shorter chain lengths or lack of coordinating groups result in low yield.**

  - *High Yield Example*: **5-(4-hydroxyphenyl)pentanoic acid**
  - *Low Yield Example*: **3-(4-hydroxyphenyl)propanoic acid**
  - *Rationale*: Sufficient aliphatic chain length allows the coordinating groups to effectively interact with the catalyst. Shorter chains may not provide adequate spacing for coordination.

- **Rule 12**: **Modifiers with acylated amino groups bearing strong electron-withdrawing substituents result in low yield due to decreased coordination ability of the amino group.**

  - *Low Yield Example*: **4-[(2,2,2-trifluoroacetyl)amino]butanoic acid**
  - *Rationale*: Electron-withdrawing acyl groups reduce electron density on the amino nitrogen, impairing its ability to coordinate with the metal catalyst.

- **Rule 13**: **Modifiers that are α-amino acids with carboxylate side chains result in high yield due to enhanced chelation with the catalyst.**

  - *High Yield Examples*: **(2S)-2-aminobutanedioic acid** (aspartic acid), **(2S)-2-aminopentanedioic acid** (glutamic acid)
  - *Rationale*: The presence of both an amino group and an additional carboxylic acid group increases coordination sites, strengthening the catalyst-modifier interaction.

- **Rule 14**: **Modifiers containing heteroaromatic systems capable of chelation result in high yield due to enhanced interaction with the catalyst.**

  - *High Yield Examples*: **1,3-dioxo-2-benzofuran-5-carboxylic acid**, **2-oxo-1H-pyridine-4-carboxylic acid**
  - *Rationale*: Heteroaromatic structures provide additional coordination sites through heteroatoms, enhancing the stability of the catalyst-modifier complex.

- **Rule 15**: **Modifiers with long aliphatic chains and additional functional groups result in low yield due to steric hindrance or unfavorable interactions.**

  - *Low Yield Examples*: **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid**, **4-oxoheptanedioic acid**
  - *Rationale*: Bulky substituents or long chains with additional functional groups can hinder effective coordination with the catalyst by introducing steric constraints.

**End of Rules**

---

These updated rules combine multiple substructures and functional groups to predict whether a modifier will result in a high or low yield in the reaction. They cover a broad range of the dataset and balance simplicity with complexity, providing effective guidance for future modifier design.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.5142857142857142; Test Accuracy: 0.0
    Train Support: 0.02857142857142857; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 1.9444444444444446; Test Lift: NONE
    Train Leverage: 0.013877551020408165; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define the rules with their associated SMARTS patterns and predictions
    # Incorporate corrections from the suggestions
    rules = [
        {
            'number': 1,
            'description': 'Rule 1: Unbranched aliphatic monocarboxylic acids with medium-length hydrocarbon chains (6–8 carbons) and no additional functional groups result in high yield.',
            'prediction': 1,
            'patterns': {
                'must_have': ['[CX3](=O)[OX1H0]'],  # Carboxylic acid group (both protonated and deprotonated)
                'must_not_have': ['a'],  # Must not be aromatic
            },
            'conditions': {
                'chain_length': (6, 8),
                'unbranched': True,
                'acyclic': True,
                'no_other_functional_groups': True,
            },
        },
        {
            'number': 2,
            'description': 'Rule 2: Aromatic carboxylic acids with electron-withdrawing substituents at the para position typically result in high yield.',
            'prediction': 1,
            'patterns': {
                'must_have': ['[cX3]1[cH][cH][cH][cH][c]1[CX3](=O)[OX1H0]'],  # Aromatic carboxylic acid
                'ewg_para': True,
            },
        },
        {
            'number': 3,
            'description': 'Rule 3: Heteroaromatic carboxylic acids containing accessible coordinating nitrogen atoms result in high yield.',
            'prediction': 1,
            'patterns': {
                'must_have': ['[nX2]1cccc1[CX3](=O)[OX1H0]',  # Pyridine-like
                              '[nX2]1ccccc1[CX3](=O)[OX1H0]',  # Pyridine with one N
                              '[nX2]1cc[nX2]cc1[CX3](=O)[OX1H0]',  # Pyrazine-like
                             ],
            },
        },
        {
            'number': 4,
            'description': 'Rule 4: Modifiers with flexible ether chains result in low yield.',
            'prediction': -1,
            'patterns': {
                'must_have': ['[OX2][CX4][CX4][OX2][CX4][CX4][OX2]'],  # Flexible ether chain
            },
        },
        {
            'number': 5,
            'description': 'Rule 5: Amino acids with side chains capable of chelation result in high yield; those with hydrophobic side chains lacking coordinating groups result in low yield.',
            'prediction': 1,
            'patterns': {
                'must_have': ['N[C@@H](C(=O)[O-])[CX4][C,N,O,S]'],  # Amino acid with chelating side chain
            },
        },
        {
            'number': 6,
            'description': 'Rule 6: Modifiers with multiple adjacent hydroxyl groups on an aliphatic chain (polyhydroxylated acids) result in high yield.',
            'prediction': 1,
            'patterns': {
                'must_have': ['[CX4H1,R0][OX2H][CX4H1,R0][OX2H][CX4H1,R0][OX2H][CX4H1,R0][OX2H][CX4H1,R0][OX2H][CX3](=O)[O-]'],  # Polyhydroxylated aliphatic chain with carboxylic acid
            },
        },
        {
            'number': 7,
            'description': 'Rule 7: Aliphatic ω-amino acids with a chain length of five carbons result in high yield; longer chain lengths result in low yield.',
            'prediction': 1,
            'patterns': {
                'must_have': ['NCCCCC(=O)[O-]'],  # 5-aminopentanoic acid
            },
            'conditions': {
                'chain_length': 5,
                'omega_amino': True,
            },
        },
        {
            'number': 8,
            'description': 'Rule 8: Modifiers that are aromatic carboxylic acids with aldehyde groups result in low yield due to potential catalyst deactivation or side reactions.',
            'prediction': -1,
            'patterns': {
                'must_have': ['[c][CX3H](=O)[CX3](=O)[O-]'],  # Aromatic aldehyde carboxylic acid
            },
        },
        {
            'number': 9,
            'description': 'Rule 9: Modifiers containing fluorinated alkyl chains result in low yield due to decreased coordination ability.',
            'prediction': -1,
            'patterns': {
                'must_have': ['[CX4](F)(F)[CX4](F)(F)C(=O)[O-]'],  # Fluorinated chain with carboxylic acid
            },
        },
        {
            'number': 10,
            'description': 'Rule 10: Modifiers that are aromatic carboxylic acids with thiol groups result in low yield; aliphatic thiol-containing modifiers may result in high yield.',
            'prediction': -1,  # For aromatic thiols
            'patterns': {
                'must_have': ['[c][SX2H][CX3](=O)[O-]'],  # Aromatic thiol carboxylic acid
            },
        },
        {
            'number': 11,
            'description': 'Rule 11: Substituted phenylalkanoic acids with a chain length of five carbons and additional coordinating groups result in high yield; shorter chain lengths or lack of coordinating groups result in low yield.',
            'prediction': 1,
            'patterns': {
                'must_have': ['c1ccccc1CCCCC(=O)[O-]'],  # Phenylpentanoic acid
            },
        },
        {
            'number': 12,
            'description': 'Rule 12: Modifiers with acylated amino groups bearing strong electron-withdrawing substituents result in low yield.',
            'prediction': -1,
            'patterns': {
                'must_have': ['[NX3][CX3](=O)[CX4](F)(F)F'],  # Acylated amino with trifluoroacetyl
            },
        },
        {
            'number': 13,
            'description': 'Rule 13: Modifiers that are α-amino acids with carboxylate side chains result in high yield due to enhanced chelation with the catalyst.',
            'prediction': 1,
            'patterns': {
                'must_have': ['N[C@@H](C(=O)[O-])CC(=O)[O-]'],  # Aspartic acid
            },
        },
        {
            'number': 14,
            'description': 'Rule 14: Modifiers containing heteroaromatic systems capable of chelation result in high yield due to enhanced interaction with the catalyst.',
            'prediction': 1,
            'patterns': {
                'must_have': ['O=C1OC(=O)c2ccccc12'],  # Example of heteroaromatic system
            },
        },
        {
            'number': 15,
            'description': 'Rule 15: Modifiers with long aliphatic chains and additional functional groups result in low yield due to steric hindrance or unfavorable interactions.',
            'prediction': -1,
            'patterns': {
                'must_have': ['C(CCCCC(=O)[O-])C(=O)[O-]'],  # Long chain with additional groups
            },
        },
    ]

    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = {}
        for key, patterns in rule.get('patterns', {}).items():
            if isinstance(patterns, bool):
                compiled_patterns[key] = patterns  # For special conditions like 'ewg_para'
            else:
                compiled_patterns[key] = [Chem.MolFromSmarts(pat) for pat in patterns]
        rule['patterns'] = compiled_patterns

    results = []

    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # Molecule could not be parsed
            results.append([0]*len(rules))
            continue
        Chem.Kekulize(mol, clearAromaticFlags=True)
        row = []
        for rule in rules:
            try:
                match = True
                # Check must-have patterns
                for key, pats in rule['patterns'].items():
                    if key == 'ewg_para' and pats:
                        # Special handling for electron-withdrawing groups at para position (Rule 2)
                        ewg_patterns = ['[F,Cl,Br,I]', '[N+](=O)[O-]', '[C](=O)[O-,OH]']  # Common EWGs
                        para_positions = ['[cH]1ccc([a])cc1[CX3](=O)[O-,OH]', '[c]1ccc([a])cc1[CX3](=O)[O-,OH]']
                        ewg_found = False
                        for ewg in ewg_patterns:
                            for para_pat in para_positions:
                                ewg_pat = Chem.MolFromSmarts(para_pat.replace('[a]', ewg))
                                if mol.HasSubstructMatch(ewg_pat):
                                    ewg_found = True
                                    break
                            if ewg_found:
                                break
                        if not ewg_found:
                            match = False
                            break
                    elif key == 'must_have':
                        for pat in pats:
                            if not mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    elif key == 'must_not_have':
                        for pat in pats:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                if not match:
                    row.append(0)
                    continue
                # Additional conditions
                conditions = rule.get('conditions', {})
                # Chain length condition (Rule 1 and 7)
                if 'chain_length' in conditions:
                    min_length = max_length = conditions['chain_length']
                    if isinstance(conditions['chain_length'], tuple):
                        min_length, max_length = conditions['chain_length']
                    longest_chain = 0
                    for atom in mol.GetAtoms():
                        if atom.GetAtomicNum() == 6 and atom.GetDegree() <= 4:
                            paths = Chem.FindAtomEnvironmentOfRadiusN(mol, max_length, atom.GetIdx())
                            chain_atoms = set()
                            for bond_idx in paths:
                                bond = mol.GetBondWithIdx(bond_idx)
                                chain_atoms.update([bond.GetBeginAtomIdx(), bond.GetEndAtomIdx()])
                            chain_length = len(chain_atoms)
                            if chain_length > longest_chain:
                                longest_chain = chain_length
                    if not (min_length <= longest_chain <= max_length):
                        match = False
                        row.append(0)
                        continue
                # Unbranched condition (Rule 1)
                if conditions.get('unbranched', False):
                    branching = False
                    for atom in mol.GetAtoms():
                        if atom.GetAtomicNum() == 6 and atom.GetDegree() > 2:
                            branching = True
                            break
                    if branching:
                        match = False
                        row.append(0)
                        continue
                # Acyclic condition (Rule 1)
                if conditions.get('acyclic', False):
                    if mol.GetRingInfo().NumRings() > 0:
                        match = False
                        row.append(0)
                        continue
                # No other functional groups condition (Rule 1)
                if conditions.get('no_other_functional_groups', False):
                    # Define functional groups to exclude
                    fgs = [
                        '[!#6;!#1]',  # Heteroatoms other than C and H
                        '[CX3](=O)[OX2H1,O-]',  # Ester or other carboxylic acid derivatives
                        '[#6]=[O,N,S]',  # Carbonyl, imine, thiocarbonyl
                        '[OX2H]',  # Alcohols
                        '[NX3;!$(N-C=O)]',  # Amines not amides
                        '[SX2H]',  # Thiols
                    ]
                    for fg in fgs:
                        fg_pat = Chem.MolFromSmarts(fg)
                        if mol.HasSubstructMatch(fg_pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Omega amino condition (Rule 7)
                if conditions.get('omega_amino', False):
                    pattern = Chem.MolFromSmarts('NCCCC[CX3](=O)[O-,OH]')
                    if not mol.HasSubstructMatch(pattern):
                        match = False
                        row.append(0)
                        continue
                # If all conditions are met
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    df = pd.DataFrame(results, columns=[f"Rule {rule['number']}" for rule in rules])
    return df

--------------------------------------------------