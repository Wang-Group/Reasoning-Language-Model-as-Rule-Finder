def rule2matrix(smiles_list):
    # Number of rules
    num_rules = 15  # There are 15 rules as provided
    # Initialize results list
    results = []
    # Define SMARTS patterns and logic for each rule
    # Rule 2 patterns for high yield substituents
    amino_group = Chem.MolFromSmarts('[NX3;H2,H1]')  # Primary or secondary amine
    nitro_group = Chem.MolFromSmarts('[NX3](=O)=O')  # Nitro group
    bromomethyl_group = Chem.MolFromSmarts('CBr')     # Bromomethyl group
    # Rule 4 patterns
    straight_chain_carboxylic_acid = Chem.MolFromSmarts('C(=O)[O;H1,-]')
    polar_groups = [
        Chem.MolFromSmarts('[OX2H]'),  # Hydroxyl group
        Chem.MolFromSmarts('[NX3;H2,H1]'),  # Amine group
    ]
    # Rule 6 patterns
    aliphatic_thiol = Chem.MolFromSmarts('[#6][SX2H]')
    aromatic_thiol = Chem.MolFromSmarts('[c][SX2H]')
    # Rule 7 pattern
    fluorinated_chain = Chem.MolFromSmarts('[CX4](F)(F)(F)')  # Trifluoromethyl as an example
    # Rule 13 pattern
    amino_adjacent_to_carboxy_aromatic = Chem.MolFromSmarts('[c][NX3;H2,H1][c][C](=O)[O;H1,-]')
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*num_rules)
            continue
        row = []
        # Rule 1
        try:
            value = check_rule1(mol)
            row.append(value)
        except Exception:
            row.append(0)
        # Rule 2
        try:
            value = check_rule2(mol, amino_group, nitro_group, bromomethyl_group)
            row.append(value)
        except Exception:
            row.append(0)
        # Rule 3
        try:
            value = check_rule3(mol)
            row.append(value)
        except Exception:
            row.append(0)
        # Rule 4
        try:
            value = check_rule4(mol, straight_chain_carboxylic_acid, polar_groups)
            row.append(value)
        except Exception:
            row.append(0)
        # Rule 5
        try:
            value = check_rule5(mol)
            row.append(value)
        except Exception:
            row.append(0)
        # ... Continue for Rules 6 to 15
        # Rule 6
        try:
            value = check_rule6(mol, aliphatic_thiol, aromatic_thiol)
            row.append(value)
        except Exception:
            row.append(0)
        # Rule 7
        try:
            value = check_rule7(mol, fluorinated_chain)
            row.append(value)
        except Exception:
            row.append(0)
        # Rule 13
        try:
            value = check_rule13(mol, amino_adjacent_to_carboxy_aromatic)
            row.append(value)
        except Exception:
            row.append(0)
        # For remaining rules, append 0 or implement similar logic
        # Fill remaining rules with zeros for now
        while len(row) < num_rules:
            row.append(0)
        results.append(row)
    # Create DataFrame with results
    columns = [f'Rule {i+1}' for i in range(num_rules)]
    df = pd.DataFrame(results, columns=columns)
    return df

# Define the functions for each rule

def check_rule1(mol):
    # Rule 1: Short-Chain Aliphatic Amino Acids Yield High; Longer-Chain Analogs Yield Low
    # Aliphatic amino acids with chain length of 4 or 5 carbons and an amino group at the Î±-position result in high yield.
    # Longer-chain amino acids (6 carbons or more) yield low.
    # SMARTS pattern for alpha-amino acid
    amino_acid_smarts = '[NX3H2][CX4H]([*])[CX3](=O)[OX2H1]'
    amino_acid_mol = Chem.MolFromSmarts(amino_acid_smarts)
    matches = mol.GetSubstructMatches(amino_acid_mol)
    if not matches:
        return 0  # Not an alpha-amino acid
    for match in matches:
        alpha_c_idx = match[1]
        chain_length = get_chain_length_from_alpha(mol, alpha_c_idx)
        if chain_length in [4, 5]:
            return 1  # High yield
        elif chain_length >= 6:
            return -1  # Low yield
    return 0

def get_chain_length_from_alpha(mol, alpha_c_idx):
    # Calculate the number of carbons from the alpha carbon to the terminal carbon
    visited = set()
    max_chain_length = 0
    def dfs(atom_idx, length):
        nonlocal max_chain_length
        visited.add(atom_idx)
        atom = mol.GetAtomWithIdx(atom_idx)
        if atom.GetSymbol() != 'C':
            return
        max_chain_length = max(max_chain_length, length)
        for neighbor in atom.GetNeighbors():
            nbr_idx = neighbor.GetIdx()
            if nbr_idx not in visited and neighbor.GetSymbol() == 'C':
                dfs(nbr_idx, length + 1)
    dfs(alpha_c_idx, 1)
    return max_chain_length

def check_rule2(mol, amino_group, nitro_group, bromomethyl_group):
    # Rule 2: Para-Substituted Benzoic Acids with EW and Coordinating Groups Yield High
    # Electron-Withdrawing, Metal-Coordinating Groups at para position result in high yield
    # Electron-Donating or Non-Coordinating Groups yield low
    # Identify benzoic acid core
    benzoic_acid = Chem.MolFromSmarts('c1ccc(cc1)C(=O)[O;H1,-]')
    if not mol.HasSubstructMatch(benzoic_acid):
        return 0
    # Identify para-substituted benzoic acids
    para_substituted = Chem.MolFromSmarts('c1cc([#6,#7,#8,#9,#16,#17,#35,#53])ccc1C(=O)[O;H1,-]')
    if not mol.HasSubstructMatch(para_substituted):
        return 0
    # Now check if substituent is EWG capable of coordination (amino, nitro, bromomethyl)
    if mol.HasSubstructMatch(amino_group) or mol.HasSubstructMatch(nitro_group) or mol.HasSubstructMatch(bromomethyl_group):
        return 1  # High yield
    else:
        return -1  # Low yield

def check_rule3(mol):
    # Rule 3: Nitrogen-Containing Heterocyclic Carboxylic Acids Yield High
    # Identify nitrogen-containing aromatic rings and carboxylic acid groups
    nitrogen_heterocycle = Chem.MolFromSmarts('[n]1cccc1')  # Example: pyridine ring
    carboxylic_acid = Chem.MolFromSmarts('C(=O)[O;H1,-]')
    if mol.HasSubstructMatch(nitrogen_heterocycle) and mol.HasSubstructMatch(carboxylic_acid):
        return 1
    else:
        return 0

def check_rule4(mol, straight_chain_carboxylic_acid, polar_groups):
    # Rule 4: Straight-Chain Aliphatic Carboxylic Acids Yield High; Addition of Polar Groups Lowers Yield
    if mol.HasSubstructMatch(straight_chain_carboxylic_acid):
        # Check for polar groups
        for group in polar_groups:
            if mol.HasSubstructMatch(group):
                return -1  # Low yield due to polar group
        return 1  # High yield
    else:
        return 0

def check_rule5(mol):
    # Rule 5: Modifiers with Multiple Hydroxyl Groups on Short Chains Yield High; Single Hydroxyl on Long Chains Yields Low
    hydroxyl_group = Chem.MolFromSmarts('[OX2H]')
    matches = mol.GetSubstructMatches(hydroxyl_group)
    if len(matches) >= 2:
        # Multiple hydroxyl groups
        aliphatic_chain = Chem.MolFromSmarts('[C][C][C]')  # Simplified pattern for short chain
        if mol.HasSubstructMatch(aliphatic_chain):
            return 1  # High yield
    elif len(matches) == 1:
        # Single hydroxyl on long chain
        long_chain = Chem.MolFromSmarts('[C][C][C][C][C]')
        if mol.HasSubstructMatch(long_chain):
            return -1  # Low yield
    return 0

def check_rule6(mol, aliphatic_thiol, aromatic_thiol):
    # Rule 6: Aliphatic Thiol Groups Yield High; Aromatic Thiol Groups Yield Low
    if mol.HasSubstructMatch(aliphatic_thiol):
        return 1  # High yield
    elif mol.HasSubstructMatch(aromatic_thiol):
        return -1  # Low yield
    else:
        return 0

def check_rule7(mol, fluorinated_chain):
    # Rule 7: Highly Fluorinated Aliphatic Chains Yield Low
    if mol.HasSubstructMatch(fluorinated_chain):
        return -1  # Low yield
    else:
        return 0

def check_rule13(mol, amino_adjacent_to_carboxy_aromatic):
    # Rule 13: Aromatic Rings with Amino Groups Adjacent to Carboxylic Acids Yield High
    if mol.HasSubstructMatch(amino_adjacent_to_carboxy_aromatic):
        return 1  # High yield
    else:
        return 0
