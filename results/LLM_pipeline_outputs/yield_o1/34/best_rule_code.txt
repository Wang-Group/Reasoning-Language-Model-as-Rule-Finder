def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and structural motifs

    # Carboxylic acid group (-COOH and -COO-)
    carboxylic_acid_smarts = ['[CX3](=O)[OX2H1]', '[CX3](=O)[O-]']

    # Amino group (-NH2)
    amino_group_smarts = '[NX3H2]'

    # Aromatic ring with heteroatoms (heteroaromatic)
    aromatic_heterocycle_smarts = '[a;!c]'

    # Aromatic ring without heteroatoms (benzene-like)
    aromatic_ring_smarts = 'c1ccccc1'

    # Nitro group attached to aromatic ring
    aromatic_nitro_smarts = '[c][NX3](=O)[OX1]'

    # Aldehyde group attached to aromatic ring
    aromatic_aldehyde_smarts = '[c][CX3H](=O)'

    # Methyl group attached to aromatic ring
    aromatic_methyl_smarts = '[c][CH3]'

    # Methoxy group attached to aromatic ring
    aromatic_methoxy_smarts = '[c][OX2][CH3]'

    # Aromatic amino group attached to aromatic ring
    aromatic_amino_smarts = '[c][NX3H2]'

    # Hydroxyl group (-OH)
    hydroxyl_group_smarts = '[OX2H]'

    # Polar functional groups (excluding carboxylic acid)
    polar_groups_smarts = ['[OX2H]', '[NX3H2]', '[CX3](=O)[NX3]']

    # Ether linkage (-O-) in aliphatic chain
    ether_linkage_smarts = '[CX4][OX2][CX4]'

    # Aliphatic thiol (-SH) attached to aliphatic chain
    aliphatic_thiol_smarts = '[CX4][SX2H]'

    # Aromatic thiol (-SH) attached to aromatic ring
    aromatic_thiol_smarts = '[c][SX2H]'

    # Perfluoroalkyl chain (e.g., trifluoromethyl group)
    perfluoroalkyl_smarts = '[CX4](F)(F)F'

    # Adjacent carbonyl groups (e.g., ketones, amides) near the carboxylate
    adjacent_carbonyl_smarts = '[CX3](=O)[CX3](=O)'

    # Long aliphatic chain of 6 or more carbons
    long_aliphatic_chain_smarts = '[C;!$(C=O)]' + ('-[C;!$(C=O)]'*5)

    # Extended aliphatic chain of 3 or more carbons
    extended_aliphatic_chain_smarts = '[C;!$(C=O)]' + ('-[C;!$(C=O)]'*2)

    # Bulky substituents (e.g., tert-butyl groups)
    bulky_substituent_smarts = '[C;X4](C)(C)C'

    # Define the rules
    rules = [
        # Rule 1
        {
            'number': 1,
            'description': 'Modifiers that are amino acids containing side chains with additional carboxylate groups result in a high yield.',
            'patterns': [
                {'smarts': amino_group_smarts},
                {'smarts': carboxylic_acid_smarts, 'min_count': 2}
            ],
            'prediction': 1
        },
        # Rule 2
        {
            'number': 2,
            'description': 'Modifiers that are amino acids with aromatic side chains lacking coordinating heteroatoms result in a low yield; however, if the aromatic side chain contains coordinating heteroatoms (e.g., nitrogen), the yield is high.',
            'patterns': [
                {'smarts': amino_group_smarts},
                {'smarts': carboxylic_acid_smarts},
                {'smarts': aromatic_ring_smarts}
            ],
            'subrules': [
                {
                    'patterns': [{'smarts': aromatic_heterocycle_smarts}],
                    'prediction': 1
                },
                {
                    'patterns': [{'smarts': aromatic_heterocycle_smarts, 'invert': True}],
                    'prediction': -1
                }
            ]
        },
        # Rule 3
        {
            'number': 3,
            'description': 'Modifiers that are aromatic carboxylic acids with nitrogen-containing heterocycles result in a high yield.',
            'patterns': [
                {'smarts': carboxylic_acid_smarts},
                {'smarts': '[n]'}
            ],
            'prediction': 1
        },
        # Rule 4
        {
            'number': 4,
            'description': 'Modifiers that are aromatic carboxylic acids with strong electron-withdrawing groups (e.g., nitro, aldehyde) result in a high yield.',
            'patterns': [
                {'smarts': carboxylic_acid_smarts},
                {'smarts': [aromatic_nitro_smarts, aromatic_aldehyde_smarts]}
            ],
            'prediction': 1
        },
        # Rule 5
        {
            'number': 5,
            'description': 'Modifiers that are aromatic carboxylic acids with electron-donating groups (e.g., methyl, methoxy) result in a low yield.',
            'patterns': [
                {'smarts': carboxylic_acid_smarts},
                {'smarts': [aromatic_methyl_smarts, aromatic_methoxy_smarts]}
            ],
            'prediction': -1
        },
        # Rule 6
        {
            'number': 6,
            'description': 'Modifiers that are aromatic carboxylic acids with amino groups capable of coordination result in a high yield, despite the amino group being electron-donating.',
            'patterns': [
                {'smarts': carboxylic_acid_smarts},
                {'smarts': aromatic_amino_smarts}
            ],
            'prediction': 1
        },
        # Rule 7
        {
            'number': 7,
            'description': 'Modifiers that are aliphatic carboxylic acids with long hydrophobic chains (6 carbons or more) and no additional polar functional groups result in a high yield.',
            'patterns': [
                {'smarts': carboxylic_acid_smarts},
                {'smarts': long_aliphatic_chain_smarts}
            ],
            'exclude_patterns': [{'smarts': smarts} for smarts in polar_groups_smarts + ['[a]']],
            'prediction': 1
        },
        # Rule 8
        {
            'number': 8,
            'description': 'Modifiers that are aliphatic carboxylic acids with long chains (6 carbons or more) and additional polar functional groups result in a low yield.',
            'patterns': [
                {'smarts': carboxylic_acid_smarts},
                {'smarts': long_aliphatic_chain_smarts},
                {'smarts': polar_groups_smarts}
            ],
            'prediction': -1
        },
        # Rule 9
        {
            'number': 9,
            'description': 'Modifiers that are aliphatic carboxylic acids with multiple hydroxyl groups result in a high yield due to increased coordination sites.',
            'patterns': [
                {'smarts': carboxylic_acid_smarts},
                {'smarts': hydroxyl_group_smarts, 'min_count': 2}
            ],
            'prediction': 1
        },
        # Rule 10
        {
            'number': 10,
            'description': 'Modifiers with thiol groups attached to short aliphatic chains result in a high yield; thiol groups on aromatic rings result in a low yield.',
            'subrules': [
                {
                    'patterns': [
                        {'smarts': carboxylic_acid_smarts},
                        {'smarts': aliphatic_thiol_smarts}
                    ],
                    'prediction': 1
                },
                {
                    'patterns': [
                        {'smarts': carboxylic_acid_smarts},
                        {'smarts': aromatic_thiol_smarts}
                    ],
                    'prediction': -1
                }
            ]
        },
        # Rule 11
        {
            'number': 11,
            'description': 'Modifiers that are aromatic carboxylic acids with aldehyde groups result in a low yield.',
            'patterns': [
                {'smarts': carboxylic_acid_smarts},
                {'smarts': aromatic_aldehyde_smarts}
            ],
            'prediction': -1
        },
        # Rule 12
        {
            'number': 12,
            'description': 'Modifiers that contain perfluorinated alkyl chains result in a low yield due to decreased coordinating ability.',
            'patterns': [
                {'smarts': perfluoroalkyl_smarts}
            ],
            'prediction': -1
        },
        # Rule 13
        {
            'number': 13,
            'description': 'Modifiers that are aromatic carboxylic acids with extended aliphatic chains (3 carbons or more) result in a high yield; shorter chains may not mitigate steric effects, leading to a low yield.',
            'patterns': [
                {'smarts': carboxylic_acid_smarts},
                {'smarts': extended_aliphatic_chain_smarts}
            ],
            'prediction': 1
        },
        # Rule 14
        {
            'number': 14,
            'description': 'Modifiers that are aliphatic carboxylic acids with ether linkages in the chain result in a low yield.',
            'patterns': [
                {'smarts': carboxylic_acid_smarts},
                {'smarts': ether_linkage_smarts}
            ],
            'prediction': -1
        },
        # Rule 15
        {
            'number': 15,
            'description': 'Modifiers with adjacent carbonyl groups (e.g., ketones, amides) near the carboxylate result in a low yield due to possible over-chelation and catalyst deactivation.',
            'patterns': [
                {'smarts': carboxylic_acid_smarts},
                {'smarts': adjacent_carbonyl_smarts}
            ],
            'prediction': -1
        }
    ]

    # Compile the SMARTS patterns
    for rule in rules:
        for pat in rule.get('patterns', []):
            if isinstance(pat['smarts'], list):
                compiled_list = [Chem.MolFromSmarts(s) for s in (pat['smarts'] if isinstance(pat['smarts'], list) else [pat['smarts']])]
                pat['compiled'] = compiled_list
            else:
                pat['compiled'] = Chem.MolFromSmarts(pat['smarts'])
        for pat in rule.get('exclude_patterns', []):
            if isinstance(pat['smarts'], list):
                compiled_list = [Chem.MolFromSmarts(s) for s in pat['smarts']]
                pat['compiled'] = compiled_list
            else:
                pat['compiled'] = Chem.MolFromSmarts(pat['smarts'])
        for subrule in rule.get('subrules', []):
            for pat in subrule.get('patterns', []):
                if isinstance(pat['smarts'], list):
                    compiled_list = [Chem.MolFromSmarts(s) for s in (pat['smarts'] if isinstance(pat['smarts'], list) else [pat['smarts']])]
                    pat['compiled'] = compiled_list
                else:
                    pat['compiled'] = Chem.MolFromSmarts(pat['smarts'])

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns
                for pat in rule.get('exclude_patterns', []):
                    compiled_pats = pat['compiled']
                    if not isinstance(compiled_pats, list):
                        compiled_pats = [compiled_pats]
                    for cp in compiled_pats:
                        if mol.HasSubstructMatch(cp):
                            match = False
                            break
                    if not match:
                        break
                if not match:
                    row.append(0)
                    continue
                # Check include patterns
                for pat in rule.get('patterns', []):
                    compiled_pats = pat['compiled']
                    invert = pat.get('invert', False)
                    min_count = pat.get('min_count', 1)
                    submatch = False
                    total_matches = 0
                    if not isinstance(compiled_pats, list):
                        compiled_pats = [compiled_pats]
                    for cp in compiled_pats:
                        matches = mol.GetSubstructMatches(cp)
                        total_matches += len(matches)
                    if total_matches >= min_count:
                        submatch = True
                    if invert:
                        submatch = not submatch
                    if not submatch:
                        match = False
                        break
                # Check subrules
                if match and 'subrules' in rule:
                    # Evaluate subrules
                    subrule_matched = False
                    for subrule in rule['subrules']:
                        subrule_match = True
                        for pat in subrule.get('patterns', []):
                            compiled_pats = pat['compiled']
                            invert = pat.get('invert', False)
                            submatch = False
                            if not isinstance(compiled_pats, list):
                                compiled_pats = [compiled_pats]
                            for cp in compiled_pats:
                                if mol.HasSubstructMatch(cp):
                                    submatch = True
                                    break
                            if invert:
                                submatch = not submatch
                            if not submatch:
                                subrule_match = False
                                break
                        if subrule_match:
                            row.append(subrule['prediction'])
                            subrule_matched = True
                            break
                    if not subrule_matched:
                        row.append(0)
                elif match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df
