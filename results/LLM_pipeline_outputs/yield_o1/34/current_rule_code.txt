def rule2matrix(smiles_list):
    # Define the rules with their associated patterns and predictions
    rules = [
        # Rule 1: High Yield
        {
            'number': 1,
            'description': 'High yield: Amino acids with side chains containing additional acidic groups (carboxyl or hydroxyl).',
            'patterns': [
                [  # Amino acid backbone
                    '[NX3][CX4H]([#6])[CX3](=O)[OX1H]',
                ],
                [  # Side chain containing additional acidic groups
                    '[CX3](=O)[OX1H]',  # Carboxylic acid group
                    '[OX2H]',            # Hydroxyl group
                ],
            ],
            'prediction': 1
        },
        # Rule 1: Low Yield
        {
            'number': 2,
            'description': 'Low yield: Amino acids with non-polar or bulky side chains.',
            'patterns': [
                [  # Amino acid backbone
                    '[NX3][CX4H]([#6])[CX3](=O)[OX1H]',
                ],
            ],
            'exclude_patterns': [
                [  # Side chain containing additional acidic groups
                    '[CX3](=O)[OX1H]',  # Carboxylic acid group
                    '[OX2H]',            # Hydroxyl group
                ],
            ],
            'prediction': -1
        },
        # Rule 2: High Yield
        {
            'number': 3,
            'description': 'High yield: Aromatic carboxylic acids with electron-withdrawing substituents (e.g., nitro, halogens) in the para position.',
            'patterns': [
                [  # Aromatic carboxylic acid
                    'c1ccccc1C(=O)O',  # Benzoic acid ring
                ],
                [  # EWG in para position
                    'c1ccc(cc1)[N+](=O)[O-]',  # Nitro group
                    'c1ccc(cc1)[F,Cl,Br,I]',   # Halogens
                ],
            ],
            'prediction': 1
        },
        # Rule 2: Low Yield
        {
            'number': 4,
            'description': 'Low yield: Aromatic carboxylic acids with electron-donating substituents (e.g., methyl, methoxy) in the para position.',
            'patterns': [
                [  # Aromatic carboxylic acid
                    'c1ccccc1C(=O)O',
                ],
                [  # EDG in para position
                    'c1ccc(cc1)[OX2H,OX2][#6]',  # Hydroxyl or methoxy group
                    'c1ccc(cc1)C',                # Methyl group
                ],
            ],
            'prediction': -1
        },
        # Rule 3: High Yield
        {
            'number': 5,
            'description': 'High yield: Nitrogen-containing heterocycles attached directly or via short linkers to carboxyl group.',
            'patterns': [
                [  # Nitrogen-containing heterocycle
                    'n1ccccc1',  # Pyridine
                    'c1cn[nH]c1',  # Pyrazole
                ],
                [
                    '[CX3](=O)[OX1H]',  # Carboxylic acid
                ],
            ],
            'prediction': 1
        },
        # Rule 3: Low Yield
        {
            'number': 6,
            'description': 'Low yield: Nitrogen-containing heterocycles with bulky aromatic linkers to carboxyl group.',
            'patterns': [
                [
                    'n1ccccc1c2ccccc2',  # Pyridine attached via benzene
                ],
                [
                    '[CX3](=O)[OX1H]',  # Carboxylic acid
                ],
            ],
            'prediction': -1
        },
        # Rule 4: High Yield
        {
            'number': 7,
            'description': 'High yield: Aliphatic carboxylic acids with multiple hydroxyl groups near carboxylate.',
            'patterns': [
                [
                    'C(=O)[OX1H]',        # Carboxylic acid
                ],
                [
                    '[CX4][OX2H]',        # Hydroxyl group on adjacent carbon
                ],
            ],
            'prediction': 1
        },
        # Rule 4: Low Yield
        {
            'number': 8,
            'description': 'Low yield: Aliphatic carboxylic acids with insufficient hydroxyl groups or distant hydroxyl groups.',
            'patterns': [
                [
                    'C(=O)[OX1H]',        # Carboxylic acid
                ],
            ],
            'exclude_patterns': [
                [
                    '[CX4][OX2H]',        # Exclude if hydroxyl group is present near carboxylate
                ],
            ],
            'prediction': -1
        },
        # Rule 5: High Yield
        {
            'number': 9,
            'description': 'High yield: Aliphatic carboxylic acids with accessible thiol groups.',
            'patterns': [
                [
                    'C(=O)[OX1H]',        # Carboxylic acid
                ],
                [
                    '[CX4][SX2H]',        # Thiol group adjacent
                ],
            ],
            'prediction': 1
        },
        # Rule 5: Low Yield
        {
            'number': 10,
            'description': 'Low yield: Thiol groups in aromatic systems.',
            'patterns': [
                [
                    'c1ccccc1[SX2H]',     # Thiol on aromatic ring
                ],
                [
                    '[CX3](=O)[OX1H]',    # Carboxylic acid
                ],
            ],
            'prediction': -1
        },
        # Additional rules can be added similarly...
    ]

    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns_groups = []
        for group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(pat) for pat in group]
            compiled_patterns_groups.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns_groups
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_exclude_groups = []
            for group in rule['exclude_patterns']:
                compiled_group = [Chem.MolFromSmarts(pat) for pat in group]
                compiled_exclude_groups.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_exclude_groups

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'compiled_exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for group in rule['compiled_patterns']:
                    group_match = any(mol.HasSubstructMatch(pat) for pat in group)
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)

    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df
