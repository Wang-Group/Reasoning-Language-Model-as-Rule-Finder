def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    carboxylic_acid = '[CX3](=O)[OX2H1]'  # Carboxylic acid group (-COOH)
    amino_group = '[NX3;H2,H1][CX4]'      # Primary or secondary amine attached to carbon
    hydroxyl_group = '[OX2H]'             # Hydroxyl group (-OH)
    sulfanyl_group = '[SX2H]'             # Sulfanyl (thiol) group
    nitro_group = '[NX3](=O)[O-]'         # Nitro group (-NO2)
    perfluoroalkyl = 'C(F)(F)F'           # Trifluoromethyl group as perfluoroalkyl
    aromatic_ring = 'a'                   # Aromatic atom
    aromatic_carboxylic_acid = '[a][CX3](=O)[OX2H1]'  # Aromatic carboxylic acid
    ether_linkage = '[CX4][OX2][CX4]'     # Ether linkage (-O-)
    amide_bond = '[CX3](=O)[NX3][CX3](=O)[OX2H1]'  # Amide bond linking to carboxylic acid
    ketone_adjacent_carboxylic = '[CX3](=O)[CX3](=O)[OX2H1]'  # Ketone adjacent to carboxylic acid
    
    # Define SMARTS patterns for each rule
    patterns = {
        'Rule 1': {
            'description': 'Modifiers that are α-amino dicarboxylic acids yield high',
            'patterns': [
                '[NX3;H2,H1][CX4][CX3](=O)[OX2H1]',  # α-amino acid
            ],
            'count_patterns': {carboxylic_acid: 2},  # At least two carboxylic acid groups
            'prediction': 1
        },
        'Rule 2': {
            'description': 'Modifiers that are aromatic carboxylic acids with para-amino or hydroxy groups yield high',
            'patterns': [
                '[cH]:[cH]:[c](:[cH]):[cH][c][CX3](=O)[OX2H1]',  # Para-amino or para-hydroxy benzoic acid
            ],
            'sub_patterns': [
                '[c][NX3;H2,H1]',  # Para-amino group
                '[c][OX2H]',       # Para-hydroxy group
            ],
            'prediction': 1
        },
        'Rule 3': {
            'description': 'Modifiers that are heteroaromatic carboxylic acids with adjacent donor atoms yield high',
            'patterns': [
                '[n,c][n][c][CX3](=O)[OX2H1]',   # Heteroaromatic with adjacent donor atom to carboxylic acid
            ],
            'prediction': 1
        },
        'Rule 4': {
            'description': 'Modifiers that are straight-chain aliphatic carboxylic acids without terminal polar groups yield high',
            'patterns': [
                'C{6}[CX3](=O)[OX2H1]',  # Aliphatic chain with 6 carbons ending with carboxylic acid
            ],
            'exclude_patterns': [
                '[OX2H]',      # Exclude hydroxyl groups
                '[NX3;H2,H1]', # Exclude amino groups
            ],
            'prediction': 1
        },
        'Rule 5': {
            'description': 'Modifiers containing flexible polyether chains yield low',
            'patterns': [
                '(OCC){2,}',  # Polyether chain repeated at least twice
            ],
            'prediction': -1
        },
        'Rule 6': {
            'description': 'Modifiers with sulfanyl groups adjacent to carboxylic acid yield high',
            'patterns': [
                '[SX2H][CX4][CX3](=O)[OX2H1]',  # Thiol group adjacent to carboxylic acid
            ],
            'prediction': 1
        },
        'Rule 7': {
            'description': 'Modifiers that are aromatic carboxylic acids with para-nitro groups yield high',
            'patterns': [
                '[cH]:[cH]:[c](:[cH]):[cH][c][CX3](=O)[OX2H1]',  # Aromatic carboxylic acid
            ],
            'sub_patterns': [
                '[c][NX3](=O)[OX1-]',  # Para-nitro group
            ],
            'prediction': 1
        },
        'Rule 8': {
            'description': 'Modifiers with long aliphatic chains terminated with polar groups yield low',
            'patterns': [
                'C{5,}[OX2H,NX3;H2,H1]',  # Aliphatic chain of at least 5 carbons ending with polar group
            ],
            'prediction': -1
        },
        'Rule 9': {
            'description': 'Modifiers with additional carbonyl groups near carboxylic acid yield low',
            'patterns': [
                '[CX3](=O)[CX3](=O)[OX2H1]',  # Adjacent carbonyl groups to carboxylic acid
            ],
            'prediction': -1
        },
        'Rule 10': {
            'description': 'Modifiers with aromatic carboxylic acids linked via amide bonds yield low',
            'patterns': [
                '[c][CX3](=O)[NX3][CX3](=O)[OX2H1]',  # Amide bond linking aromatic ring to carboxylic acid
            ],
            'prediction': -1
        },
        'Rule 11': {
            'description': 'Modifiers that are α-amino acids with heteroaromatic side chains yield high',
            'patterns': [
                '[NX3;H2,H1][CX4][CX3](=O)[OX2H1][c,n][c,n][c,n]',  # α-Amino acid with heteroaromatic side chain
            ],
            'prediction': 1
        },
        'Rule 12': {
            'description': 'Modifiers with perfluoroalkyl groups yield low',
            'patterns': [
                'C(F)(F)(F)',  # Trifluoromethyl group
            ],
            'prediction': -1
        },
        'Rule 13': {
            'description': 'Modifiers with multiple hydroxyl groups near carboxylic acid yield high',
            'patterns': [
                '[CX4](O)(O)[CX3](=O)[OX2H1]',  # Multiple hydroxyl groups near carboxylic acid
            ],
            'prediction': 1
        },
        'Rule 14': {
            'description': 'Modifiers with ether linkages between carboxylic acid and side chains yield low',
            'patterns': [
                '[CX3](=O)[OX2][CX4][OX2]',  # Ether linkage between carboxylic acid and side chain
            ],
            'prediction': -1
        },
        'Rule 15': {
            'description': 'Modifiers with aromatic ketones adjacent to carboxylic acid yield high',
            'patterns': [
                '[c][CX3](=O)[c][CX3](=O)[OX2H1]',  # Aromatic ketone adjacent to carboxylic acid
            ],
            'prediction': 1
        },
    }
    
    # Compile SMARTS patterns
    for rule_key in patterns.keys():
        rule = patterns[rule_key]
        compiled_patterns = []
        for smarts in rule['patterns']:
            pat = Chem.MolFromSmarts(smarts)
            if pat is not None:
                compiled_patterns.append(pat)
        rule['compiled_patterns'] = compiled_patterns
        # Compile sub-patterns if any
        if 'sub_patterns' in rule:
            compiled_sub_patterns = []
            for smarts in rule['sub_patterns']:
                pat = Chem.MolFromSmarts(smarts)
                if pat is not None:
                    compiled_sub_patterns.append(pat)
            rule['compiled_sub_patterns'] = compiled_sub_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_exclude_patterns = []
            for smarts in rule['exclude_patterns']:
                pat = Chem.MolFromSmarts(smarts)
                if pat is not None:
                    compiled_exclude_patterns.append(pat)
            rule['compiled_exclude_patterns'] = compiled_exclude_patterns
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(patterns))
            continue
        row = []
        for rule_key in patterns.keys():
            rule = patterns[rule_key]
            try:
                match = True
                # Check exclude patterns if any
                if 'compiled_exclude_patterns' in rule:
                    for pat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                if not match:
                    row.append(0)
                    continue
                # Check required patterns
                for pat in rule['compiled_patterns']:
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Check sub-patterns if any (e.g., for para-substituents)
                if 'compiled_sub_patterns' in rule:
                    sub_match = False
                    for pat in rule['compiled_sub_patterns']:
                        if mol.HasSubstructMatch(pat):
                            sub_match = True
                            break
                    if not sub_match:
                        match = False
                if not match:
                    row.append(0)
                    continue
                # Check count patterns if any
                if 'count_patterns' in rule:
                    for smarts, min_count in rule['count_patterns'].items():
                        pattern = Chem.MolFromSmarts(smarts)
                        if pattern is not None:
                            matches = mol.GetSubstructMatches(pattern)
                            if len(matches) < min_count:
                                match = False
                                break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=patterns.keys())
    return df