def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and substructures
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1]'
    
    # Amino group (-NH2)
    primary_amino = '[NX3][H][H]'
    amino_acid_alpha = '[NX3][CX4H]([*])[CX3](=O)[OX1H0-,OX2H1]'
    
    # Additional carboxyl groups
    additional_carboxylic_acid = '[#6][CX3](=O)[OX1H0-,OX2H1]'
    
    # Nitrogen-containing heterocycles
    nitrogen_heterocycle = '[n]'
    
    # Aromatic ring with electron-donating groups at para position (e.g., methyl or hydroxyl)
    para_methyl = 'c1ccc(cc1)[CX4H3]'
    para_hydroxyl = 'c1ccc(cc1)[OX2H]'
    
    # Aromatic carboxylic acid
    aromatic_carboxylic_acid = 'c1ccccc1C(=O)[OX1H0-,OX2H1]'
    
    # Amino group at para position on aromatic ring
    para_amino = 'c1ccc(cc1)[NX3][H][H]'
    
    # Aldehyde group adjacent to aromatic ring
    aromatic_aldehyde = 'c1cc([CX3H1]=O)ccc1'
    
    # Long aliphatic chain (seven or more carbons) with polar functional group at the end
    long_aliphatic_chain = '[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[*]'
    terminal_hydroxyl = '[OX2H]'
    terminal_amino = '[NX3][H][H]'
    
    # Ether linkages or polyether chains
    ether_linkage = '[#6][OX2][#6]'
    polyether_chain = '([#6][OX2])+[#6]'
    
    # Heteroaromatic carboxylic acid containing nitrogen atoms
    heteroaromatic_nitrogen = '[n]1ccccc1'
    
    # Multiple aromatic rings and coordinating groups (may over-chelate)
    multiple_aromatic_rings = 'c1ccccc1c2ccccc2'
    multiple_coordinating_groups = '[$([nX2H0]),$([OX2H]),$([SX2H])]'
    
    # Aliphatic thiol group adjacent to carboxyl group
    adjacent_thiol = '[SX2H][CX4][CX3](=O)[OX1H0-,OX2H1]'
    
    # Perfluorinated alkyl groups adjacent to carboxyl group
    perfluoro_alkyl = '[CX4]([F,Cl,Br,I])([F,Cl,Br,I])[CX4]([F,Cl,Br,I])([F,Cl,Br,I])[CX3](=O)[OX1H0-,OX2H1]'
    
    # Multiple hydroxyl groups adjacent to carboxyl group
    multiple_adjacent_hydroxyls = '[CX4]([OX2H])[CX4]([OX2H])[CX3](=O)[OX1H0-,OX2H1]'
    
    # Amino acids with hydrophobic side chains and no additional coordinating groups
    hydrophobic_side_chain = '[CX4][CX4][CX4][CX3](=O)[OX1H0-,OX2H1]'
    
    # Aromatic group linked via longer aliphatic chains (four or more carbons)
    aromatic_long_chain = 'c1ccccc1CCCC[CX3](=O)[OX1H0-,OX2H1]'
    
    # Amide functionalities involving the carboxyl group
    amide_bond = '[CX3](=O)[NX3]'
    
    # Rules definition
    rules = [
        {
            'number': 1,
            'description': 'High Yield: Amino acid with side chains containing additional carboxyl groups or nitrogen-containing heterocycles.',
            'patterns': [amino_acid_alpha],
            'additional_patterns': [additional_carboxylic_acid, nitrogen_heterocycle],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Low Yield: Aromatic carboxylic acid with electron-donating groups at the para position (methyl or hydroxyl).',
            'patterns': [aromatic_carboxylic_acid],
            'additional_patterns': [para_methyl, para_hydroxyl],
            'prediction': -1
        },
        {
            'number': 3,
            'description': 'High Yield: Aromatic carboxylic acids with amino groups at the para position.',
            'patterns': [aromatic_carboxylic_acid, para_amino],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Low Yield: Modifier contains aldehyde groups adjacent to aromatic rings and carboxyl groups.',
            'patterns': [aromatic_carboxylic_acid, aromatic_aldehyde],
            'prediction': -1
        },
        {
            'number': 5,
            'description': 'Low Yield: Modifier contains long aliphatic chains (≥7 carbons) with polar functional groups distant from the carboxyl group.',
            'patterns': [long_aliphatic_chain],
            'additional_patterns': [terminal_hydroxyl, terminal_amino],
            'prediction': -1
        },
        {
            'number': 6,
            'description': 'High Yield: Simple aliphatic carboxylic acids lacking additional interfering functional groups.',
            'patterns': [carboxylic_acid],
            'exclude_patterns': [primary_amino, ether_linkage, aromatic_carboxylic_acid],
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'Low Yield: Modifier contains flexible ether linkages or polyether chains.',
            'patterns': [carboxylic_acid, ether_linkage],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'High Yield: Heteroaromatic carboxylic acid containing nitrogen atoms positioned to coordinate.',
            'patterns': [carboxylic_acid, heteroaromatic_nitrogen],
            'prediction': 1
        },
        {
            'number': 9,
            'description': 'Low Yield: Modifier may over-chelate or strongly bind to the metal center.',
            'patterns': [multiple_aromatic_rings, multiple_coordinating_groups],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'High Yield: Modifier contains aliphatic thiol (-SH) groups adjacent to the carboxyl group.',
            'patterns': [adjacent_thiol],
            'prediction': 1
        },
        {
            'number': 11,
            'description': 'Low Yield: Modifier contains perfluorinated alkyl groups adjacent to the carboxyl group.',
            'patterns': [perfluoro_alkyl],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'High Yield: Modifier has multiple hydroxyl groups adjacent to the carboxyl group without flexible ether linkages.',
            'patterns': [multiple_adjacent_hydroxyls],
            'exclude_patterns': [ether_linkage],
            'prediction': 1
        },
        {
            'number': 13,
            'description': 'Low Yield: Amino acids possessing hydrophobic side chains without additional coordinating functional groups.',
            'patterns': [amino_acid_alpha, hydrophobic_side_chain],
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'High Yield: Modifiers contain aromatic groups linked via longer aliphatic chains (≥4 carbons).',
            'patterns': [aromatic_long_chain],
            'prediction': 1
        },
        {
            'number': 15,
            'description': 'Low Yield: Modifier contains amide functionalities involving the carboxyl group.',
            'patterns': [amide_bond],
            'prediction': -1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for smarts in rule.get('patterns', []):
            mol = Chem.MolFromSmarts(smarts)
            compiled_patterns.append(mol)
        rule['compiled_patterns'] = compiled_patterns
        # Compile additional patterns if any
        if 'additional_patterns' in rule:
            compiled_additional = []
            for smarts in rule['additional_patterns']:
                mol = Chem.MolFromSmarts(smarts)
                compiled_additional.append(mol)
            rule['compiled_additional'] = compiled_additional
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for smarts in rule['exclude_patterns']:
                mol = Chem.MolFromSmarts(smarts)
                compiled_excludes.append(mol)
            rule['compiled_exclude_patterns'] = compiled_excludes
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for pat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for pat in rule['compiled_patterns']:
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Check additional patterns (at least one must match)
                if 'compiled_additional' in rule:
                    additional_match = False
                    for pat in rule['compiled_additional']:
                        if mol.HasSubstructMatch(pat):
                            additional_match = True
                            break
                    if not additional_match:
                        match = False
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df