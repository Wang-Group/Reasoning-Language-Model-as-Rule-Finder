def rule2matrix(smiles_list):
    """
    This function takes a list of SMILES strings and applies a set of structural rules to generate
    a feature matrix. Each rule corresponds to a structural feature, and the matrix contains
    values of 1, -1, or 0 depending on whether the SMILES matches the rule and the predicted value.
    """
    from rdkit import Chem
    from rdkit.Chem import AllChem
    from rdkit.Chem import rdMolDescriptors
    import pandas as pd

    # Define SMARTS patterns for functional groups
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1]'
    
    # Alpha-amino acid backbone: N-C-C(=O)-O
    amino_acid_backbone = '[NX3H2]-[CX4H]-[CX3](=O)[OX1H0-,OX2H1]'
    
    # Benzoic acid core
    benzoic_acid = '[c]1ccc([CX3](=O)[OX1H0-,OX2H1])cc1'
    
    # Electron-withdrawing or coordinating substituents at para position
    ewg_para_substituents = {
        'nitro': '[N+](=O)[O-]',
        'amino': '[NH2]',
        'bromomethyl': '[CH2Br]',
        'halogens': '[F,Cl,Br,I]',
        'cyano': '[C]#N'
    }
    
    # Electron-donating or non-coordinating substituents at para position
    edg_para_substituents = {
        'methyl': 'C',
        'methoxy': 'OC'
    }

    # Primary amine group (-NH2)
    primary_amine = '[NX3H2]'

    # Acylated amino group (amide)
    acylated_amino_group = '[NX3][CX3](=O)'

    # Hydroxyl group (-OH)
    hydroxyl_group = '[OX2H]'

    # Thiol group (-SH)
    aliphatic_thiol = '[CX4][SX2H]'
    
    # Aromatic thiol
    aromatic_thiol = '[c][SX2H]'

    # Thioether (-S- between carbons)
    thioether = '[#6][SX2][#6]'

    # Aldehyde group (-CHO)
    aldehyde_group = '[CX3H1](=O)[#6]'

    # Perfluorinated carboxylic acid
    perfluoro_carboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1][C,F]([F])([F])[F]'

    # Nitrogen-containing heterocycles adjacent to carboxyl group
    heterocycle_carboxylic_acid = '[n]1cccc1[CX3](=O)[OX1H0-,OX2H1]'

    # Ether linkage (-O-)
    ether_linkage = '[#6][OX2][#6]'

    # Long aliphatic chain (8 or more carbons)
    long_aliphatic_chain = '[CX4H2][CX4H2][CX4H2][CX4H2][CX4H2][CX4H2][CX4H2][CX4H2]'

    # Keto group near carboxyl group
    keto_near_carboxyl = '[CX3](=O)[#6][#6][CX3](=O)[OX1H0-,OX2H1]'

    # Methoxy group on aromatic ring
    methoxy_aromatic = '[c][OX2][CH3]'

    # Additional coordinating groups
    coordinating_groups = [
        primary_amine,
        '[NX3H1]',
        hydroxyl_group,
        '[OX2-]'
    ]

    # Phenolic hydroxyl group attached via a five-carbon aliphatic chain
    phenol_five_chain = '[OX2H]-c1ccccc1CCCCC[CX3](=O)[OX1H0-,OX2H1]'

    # Aromatic amino group
    aromatic_amino_group = '[c][NX3H2,NX3H1]'

    # Compile SMARTS patterns
    patterns = {
        'carboxylic_acid': Chem.MolFromSmarts(carboxylic_acid),
        'amino_acid_backbone': Chem.MolFromSmarts(amino_acid_backbone),
        'benzoic_acid': Chem.MolFromSmarts(benzoic_acid),
        'primary_amine': Chem.MolFromSmarts(primary_amine),
        'acylated_amino_group': Chem.MolFromSmarts(acylated_amino_group),
        'hydroxyl_group': Chem.MolFromSmarts(hydroxyl_group),
        'aliphatic_thiol': Chem.MolFromSmarts(aliphatic_thiol),
        'aromatic_thiol': Chem.MolFromSmarts(aromatic_thiol),
        'thioether': Chem.MolFromSmarts(thioether),
        'aldehyde_group': Chem.MolFromSmarts(aldehyde_group),
        'perfluoro_carboxylic_acid': Chem.MolFromSmarts(perfluoro_carboxylic_acid),
        'heterocycle_carboxylic_acid': Chem.MolFromSmarts(heterocycle_carboxylic_acid),
        'ether_linkage': Chem.MolFromSmarts(ether_linkage),
        'long_aliphatic_chain': Chem.MolFromSmarts(long_aliphatic_chain),
        'keto_near_carboxyl': Chem.MolFromSmarts(keto_near_carboxyl),
        'methoxy_aromatic': Chem.MolFromSmarts(methoxy_aromatic),
        'phenol_five_chain': Chem.MolFromSmarts(phenol_five_chain),
        'aromatic_amino_group': Chem.MolFromSmarts(aromatic_amino_group)
    }

    # Define the rules
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are Î±-amino acids with two carboxylic acid groups (dicarboxylic acids) yield high value.',
            'function': 'rule1',
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers that are benzoic acids with electron-withdrawing or coordinating substituents at the para position yield high value; those with electron-donating or non-coordinating substituents yield low value.',
            'function': 'rule2',
            'prediction': None  # Prediction determined in function
        },
        {
            'number': 3,
            'description': 'Modifiers with amino groups located within five carbons of the carboxyl group yield high value; those with amino groups farther away or acylated yield low value.',
            'function': 'rule3',
            'prediction': None  # Prediction determined in function
        },
        {
            'number': 4,
            'description': 'Modifiers with multiple hydroxyl groups (polyols) yield high value.',
            'function': 'rule4',
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers containing thiol (sulfhydryl) groups yield high value when the thiol is on an aliphatic chain; those with sulfur attached to aromatic rings or in thioethers yield low value.',
            'function': 'rule5',
            'prediction': None
        },
        {
            'number': 6,
            'description': 'Modifiers containing aldehyde (formyl) groups yield low value.',
            'function': 'rule6',
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Modifiers that are perfluorinated carboxylic acids yield low value.',
            'function': 'rule7',
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Modifiers with nitrogen-containing heterocycles adjacent to the carboxyl group yield high value.',
            'function': 'rule8',
            'prediction': 1
        },
        {
            'number': 9,
            'description': 'Modifiers with ether linkages yield low value unless additional strong coordinating groups are present.',
            'function': 'rule9',
            'prediction': None
        },
        {
            'number': 10,
            'description': 'Modifiers that are long-chain aliphatic carboxylic acids (with eight or more carbons) yield high value unless they contain interfering functional groups.',
            'function': 'rule10',
            'prediction': None
        },
        {
            'number': 11,
            'description': 'Modifiers with keto (carbonyl) groups near the carboxyl group yield low value.',
            'function': 'rule11',
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'Modifiers with methoxy groups on aromatic rings yield high value only when additional coordinating groups are present.',
            'function': 'rule12',
            'prediction': None
        },
        {
            'number': 13,
            'description': 'Modifiers with phenolic hydroxyl groups attached via a five-carbon aliphatic chain yield high value; those with shorter chains yield low value.',
            'function': 'rule13',
            'prediction': None
        },
        {
            'number': 14,
            'description': 'Modifiers with acylated amino groups yield low value.',
            'function': 'rule14',
            'prediction': -1
        },
        {
            'number': 15,
            'description': 'Modifiers containing amino groups directly attached to aromatic rings yield high value; those with amino groups on aliphatic chains yield high value only when the chain is short.',
            'function': 'rule15',
            'prediction': None
        }
    ]

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                if rule['function'] == 'rule1':
                    # Rule 1 implementation
                    if mol.HasSubstructMatch(patterns['amino_acid_backbone']):
                        # Count carboxylic acid groups
                        c_acid_matches = mol.GetSubstructMatches(patterns['carboxylic_acid'])
                        if len(c_acid_matches) >= 2:
                            row.append(1)
                        else:
                            row.append(0)
                    else:
                        row.append(0)
                elif rule['function'] == 'rule2':
                    # Rule 2 implementation
                    # Identify benzoic acid core
                    benzoic_acid_matches = mol.GetSubstructMatches(patterns['benzoic_acid'])
                    if benzoic_acid_matches:
                        # For each match, identify the para position
                        high_value = False
                        low_value = False
                        for match in benzoic_acid_matches:
                            atoms = list(match)
                            # Get the benzene ring carbons
                            ring_info = mol.GetRingInfo()
                            atom_indices = [a for a in atoms if mol.GetAtomWithIdx(a).IsInRing()]   
                            if len(atom_indices) < 6:
                                continue
                            # Find the carboxyl carbon
                            carboxyl_carbons = [a for a in atoms if mol.GetAtomWithIdx(a).GetSymbol() == 'C' and mol.GetAtomWithIdx(a).GetTotalDegree() == 3]
                            if not carboxyl_carbons:
                                continue
                            carboxyl_carbon = carboxyl_carbons[0]
                            # Get the ortho and para positions
                            neighbor_indices = [n.GetIdx() for n in mol.GetAtomWithIdx(carboxyl_carbon).GetNeighbors() if n.GetIdx() in atom_indices]
                            ortho_positions = neighbor_indices
                            para_positions = []
                            for idx in atom_indices:
                                if idx != carboxyl_carbon and idx not in neighbor_indices:
                                    path_length = len(Chem.rdmolops.GetShortestPath(mol, carboxyl_carbon, idx)) - 1
                                    if path_length == 3:
                                        para_positions.append(idx)
                            # Check substituents at para position
                            for idx in para_positions:
                                atom = mol.GetAtomWithIdx(idx)
                                attached_atoms = [n.GetSymbol() for n in atom.GetNeighbors() if n.GetIdx() not in atom_indices]
                                attached_bonds = [mol.GetBondBetweenAtoms(idx, n.GetIdx()).GetBondType() for n in atom.GetNeighbors() if n.GetIdx() not in atom_indices]
                                substituent = False
                                for n in atom.GetNeighbors():
                                    if n.GetIdx() not in atom_indices:
                                        substituent = True
                                        neighbor_idx = n.GetIdx()
                                        neighbor_atom = mol.GetAtomWithIdx(neighbor_idx)
                                        neighbor_symbol = neighbor_atom.GetSymbol()
                                        neighbor_smarts = Chem.MolFragmentToSmiles(mol, atomsToUse=[idx, neighbor_idx], bondsToUse=None, rootedAtAtom=idx)
                                        # Check for EWG
                                        for ewg in ewg_para_substituents.values():
                                            ewg_pattern = Chem.MolFromSmarts(ewg)
                                            if mol.HasSubstructMatch(ewg_pattern):
                                                high_value = True
                                        # Check for EDG
                                        for edg in edg_para_substituents.values():
                                            edg_pattern = Chem.MolFromSmarts(edg)
                                            if mol.HasSubstructMatch(edg_pattern):
                                                low_value = True
                                if substituent:
                                    break
                        if high_value:
                            row.append(1)
                        elif low_value:
                            row.append(-1)
                        else:
                            row.append(0)
                    else:
                        row.append(0)
                elif rule['function'] == 'rule3':
                    # Rule 3 implementation
                    # Find primary amine groups (excluding acylated amines)
                    amine_matches = mol.GetSubstructMatches(patterns['primary_amine'])
                    # Exclude acylated amino groups
                    acylated_amines = mol.GetSubstructMatches(patterns['acylated_amino_group'])
                    acylated_nitrogens = [match[0] for match in acylated_amines]
                    # Filter amine atoms
                    amine_atoms = [match[0] for match in amine_matches if match[0] not in acylated_nitrogens]
                    # Find carboxylic acid groups
                    c_acid_matches = mol.GetSubstructMatches(patterns['carboxylic_acid'])
                    c_acid_atoms = [match[0] for match in c_acid_matches]
                    # Compute shortest paths
                    min_distance = None
                    for n_idx in amine_atoms:
                        for c_idx in c_acid_atoms:
                            path = Chem.rdmolops.GetShortestPath(mol, n_idx, c_idx)
                            distance = len([a for a in path if mol.GetAtomWithIdx(a).GetSymbol() == 'C']) - 1
                            if min_distance is None or distance < min_distance:
                                min_distance = distance
                    if min_distance is not None:
                        if min_distance <= 5:
                            row.append(1)
                        else:
                            row.append(-1)
                    else:
                        row.append(0)
                elif rule['function'] == 'rule4':
                    # Rule 4 implementation
                    hydroxyl_matches = mol.GetSubstructMatches(patterns['hydroxyl_group'])
                    if len(hydroxyl_matches) >= 2:
                        row.append(1)
                    else:
                        row.append(0)
                elif rule['function'] == 'rule5':
                    # Rule 5 implementation
                    aliphatic_thiol_matches = mol.GetSubstructMatches(patterns['aliphatic_thiol'])
                    aromatic_thiol_matches = mol.GetSubstructMatches(patterns['aromatic_thiol'])
                    thioether_matches = mol.GetSubstructMatches(patterns['thioether'])
                    if aliphatic_thiol_matches:
                        row.append(1)
                    elif aromatic_thiol_matches or thioether_matches:
                        row.append(-1)
                    else:
                        row.append(0)
                elif rule['function'] == 'rule6':
                    # Rule 6 implementation
                    if mol.HasSubstructMatch(patterns['aldehyde_group']):
                        row.append(-1)
                    else:
                        row.append(0)
                elif rule['function'] == 'rule7':
                    # Rule 7 implementation
                    if mol.HasSubstructMatch(patterns['perfluoro_carboxylic_acid']):
                        row.append(-1)
                    else:
                        row.append(0)
                elif rule['function'] == 'rule8':
                    # Rule 8 implementation
                    if mol.HasSubstructMatch(patterns['heterocycle_carboxylic_acid']):
                        row.append(1)
                    else:
                        row.append(0)
                elif rule['function'] == 'rule9':
                    # Rule 9 implementation
                    if mol.HasSubstructMatch(patterns['ether_linkage']):
                        # Check for additional strong coordinating groups
                        has_coordinating_group = False
                        for group in coordinating_groups:
                            pattern = Chem.MolFromSmarts(group)
                            if mol.HasSubstructMatch(pattern):
                                has_coordinating_group = True
                                break
                        if not has_coordinating_group:
                            row.append(-1)
                        else:
                            row.append(0)
                    else:
                        row.append(0)
                elif rule['function'] == 'rule10':
                    # Rule 10 implementation
                    # Check for long-chain aliphatic carboxylic acids
                    if mol.HasSubstructMatch(patterns['long_aliphatic_chain']) and mol.HasSubstructMatch(patterns['carboxylic_acid']):
                        # Check for interfering functional groups
                        interfering_groups = False
                        if mol.HasSubstructMatch(patterns['primary_amine']):
                            interfering_groups = True
                        if mol.HasSubstructMatch(patterns['acylated_amino_group']):
                            interfering_groups = True
                        if not interfering_groups:
                            row.append(1)
                        else:
                            row.append(0)
                    else:
                        row.append(0)
                elif rule['function'] == 'rule11':
                    # Rule 11 implementation
                    if mol.HasSubstructMatch(patterns['keto_near_carboxyl']):
                        row.append(-1)
                    else:
                        row.append(0)
                elif rule['function'] == 'rule12':
                    # Rule 12 implementation
                    if mol.HasSubstructMatch(patterns['methoxy_aromatic']):
                        # Check for additional coordinating groups
                        has_coordinating_group = False
                        for group in coordinating_groups:
                            pattern = Chem.MolFromSmarts(group)
                            if mol.HasSubstructMatch(pattern):
                                has_coordinating_group = True
                                break
                        if has_coordinating_group:
                            row.append(1)
                        else:
                            row.append(-1)
                    else:
                        row.append(0)
                elif rule['function'] == 'rule13':
                    # Rule 13 implementation
                    if mol.HasSubstructMatch(patterns['phenol_five_chain']):
                        row.append(1)
                    else:
                        row.append(-1)
                elif rule['function'] == 'rule14':
                    # Rule 14 implementation
                    if mol.HasSubstructMatch(patterns['acylated_amino_group']):
                        row.append(-1)
                    else:
                        row.append(0)
                elif rule['function'] == 'rule15':
                    # Rule 15 implementation
                    # Check for aromatic amino group
                    if mol.HasSubstructMatch(patterns['aromatic_amino_group']):
                        row.append(1)
                    else:
                        # Check for aliphatic amino group with short chain
                        amine_matches = mol.GetSubstructMatches(patterns['primary_amine'])
                        c_acid_matches = mol.GetSubstructMatches(patterns['carboxylic_acid'])
                        min_distance = None
                        for n_match in amine_matches:
                            n_idx = n_match[0]
                            for c_match in c_acid_matches:
                                c_idx = c_match[0]
                                path = Chem.rdmolops.GetShortestPath(mol, n_idx, c_idx)
                                distance = len([a for a in path if mol.GetAtomWithIdx(a).GetSymbol() == 'C']) - 1
                                if min_distance is None or distance < min_distance:
                                    min_distance = distance
                        if min_distance is not None:
                            if min_distance <= 5:
                                row.append(1)
                            else:
                                row.append(-1)
                        else:
                            row.append(-1)
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df