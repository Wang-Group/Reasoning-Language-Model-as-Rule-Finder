{
    "prefix": "This code converts a list of SMILES strings into a feature matrix using RDkit. Each rule is represented by a SMARTS pattern, and the matrix indicates whether the rule matches the SMILES and predicts a high or low yield.",
    "imports": "import pandas as pd\nfrom rdkit import Chem",
    "code": "def rule2matrix(smiles_list):\n    rules = [\n        ['[CX3](=O)[OX2H1]', '[c][OX2H]', '[c][NX3H2]'],  # Rule 1: Carboxylic acid and aromatic ring with electron-donating groups\n        ['[NX3H2]', '[C;X4][C;X4][C;X4][C;X4]'],  # Rule 2: Amino group and linear aliphatic chain\n        ['[OX2H]', '[c][OX2H]'],  # Rule 3: Hydroxyl group and aromatic ring with electron-donating groups\n        ['[OX2][C;X4][OX2]'],  # Rule 4: Multiple ether linkages\n        ['[SX2H]', '[C;X4][C;X4][C;X4]'],  # Rule 5: Sulfanyl group with short aliphatic chain\n        ['[NX3+](=O)[O-]', '[c]'],  # Rule 6: Nitro group on an aromatic ring\n        ['c1c[nH]c2c1cccc2'],  # Rule 7: Indole group\n        ['c1ccncc1'],  # Rule 8: Pyridine ring\n        ['[c][SX4](=O)(=O)', '[c][CX3](=O)'],  # Rule 9: Aromatic ring with sulfonyl or carbonyl groups\n        ['[C;X4][C;X4][C;X4][C;X4][C;X4][C;X4][C;X4]'],  # Rule 10: Long aliphatic chain\n        ['c1ccncc1', '[c][CX3](=O)'],  # Rule 11: Pyridine ring with electron-withdrawing groups\n        ['[c][OX2][C;X4][OX2]'],  # Rule 12: Aromatic ring with methoxy or ethoxy groups\n        ['[c][CX3H]=O'],  # Rule 13: Formyl group on an aromatic ring\n    ]\n    results = []\n    for smi in smiles_list:\n        mol = Chem.MolFromSmiles(smi)\n        if mol is None:\n            results.append([0] * len(rules))\n            continue\n        row = []\n        for i, rule in enumerate(rules):\n            try:\n                if all(mol.HasSubstructMatch(Chem.MolFromSmarts(r)) for r in rule):\n                    if i in [0, 1, 2, 4, 5, 6, 7, 12]:  # Rules with high prediction\n                        row.append(1)\n                    else:  # Rules with low prediction\n                        row.append(-1)\n                else:\n                    row.append(0)\n            except:\n                row.append(0)\n        results.append(row)\n    df = pd.DataFrame(results, columns=[f'Rule {i+1}' for i in range(len(rules))])\n    return df"
}