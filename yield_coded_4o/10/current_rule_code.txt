def rule2matrix(smiles_list):
    rules = [
        ['[NX3][CX3](=O)[OX2H1]', '[CX3](=O)[OX2H1]'],  # Rule 1
        ['[c][CX3](=O)[OX2H1]', '[c][N+](=O)[O-]', '[c][Br]'],  # Rule 2
        ['[SX2H][CX3](=O)[OX2H1]'],  # Rule 3
        ['[OX2H][CX4][OX2H]', '[OX2H][CX4][OX2H][CX4][OX2H]'],  # Rule 4
        ['[n][c]', '[n][c][NX3H2]', '[n][c][OX2H]'],  # Rule 5
        ['[CX4][CX4][CX4][CX4][CX4][CX4]', '[CX4][CX4][CX4][CX4][CX4][CX4][CX4]'],  # Rule 6
        ['[CX4](F)(F)F'],  # Rule 7
        ['[CX3H]=[OX1]', '[CX3H]=[OX1][OX2H]', '[CX3H]=[OX1][NX3H2]'],  # Rule 8
        ['[OX2][CX4][OX2]'],  # Rule 9
        ['[NX3H2+0][CX3](=O)[OX2H1]', '[c][NX3H2+0][CX3](=O)[OX2H1]'],  # Rule 10
        ['[c][OX2H]'],  # Rule 11
        ['[c]1oc2ccccc2c1'],  # Rule 12
        ['[c][CX4][OX2H]', '[c][CX4][OX2H][c][O][CX4]'],  # Rule 13
        ['[c][CH3]'],  # Rule 14
        ['[NX3H2+0][OX2][CX4]']  # Rule 15
    ]
    results = []
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            results.append([0] * len(rules))
            continue
        row = []
        for i, rule in enumerate(rules):
            try:
                if all(mol.HasSubstructMatch(Chem.MolFromSmarts(r)) for r in rule):
                    if i in [0, 1, 2, 3, 10, 11, 12, 13]:  # High yield rules
                        row.append(1)
                    else:  # Low yield rules
                        row.append(-1)
                else:
                    row.append(0)
            except:
                row.append(0)
        results.append(row)
    df = pd.DataFrame(results, columns=[f'Rule {i+1}' for i in range(len(rules))])
    return df