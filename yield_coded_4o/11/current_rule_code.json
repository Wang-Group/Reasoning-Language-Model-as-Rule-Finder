{
    "prefix": "This code converts a list of SMILES strings into a feature matrix using RDkit. Each rule is represented by a SMARTS pattern, and the matrix indicates whether each SMILES matches the rule and the predicted yield outcome.",
    "imports": "import pandas as pd\nfrom rdkit import Chem",
    "code": "def rule2matrix(smiles_list):\n    rules = [\n        ['[NX3H2][CX3](=O)[OX2H1]'],  # Rule 1: Amino and carboxylic acid group\n        ['c1cc([CX3](=O)[OX2H1])c([#7,#8,#9,#15,#16,#17])cc1'],  # Rule 2: Phenyl with carboxylic acid and EWG\n        ['n1ccccc1[CX3](=O)[OX2H1]'],  # Rule 3: Pyridine with carboxylic acid\n        ['[OX2H]'],  # Rule 4: Multiple hydroxyl groups (count check needed)\n        ['[CX3](=O)[CX3](=O)[OX2H1]'],  # Rule 5: Single carbonyl and carboxylic acid\n        ['[OX2][CX4][OX2][CX3](=O)[OX2H1]'],  # Rule 6: Ether linkages with carboxylic acid\n        ['[CX4](F)(F)F[CX3](=O)[OX2H1]'],  # Rule 7: Trifluoromethyl with carboxylic acid\n        ['c1c[nH]c2c1cccc2[CX3](=O)[OX2H1]'],  # Rule 8: Indole with amino acid\n        ['[SX2H][CX3](=O)[OX2H1]'],  # Rule 9: Sulfur-containing with carboxylic acid\n        ['[NX3][CX3](=O)[CX3](=O)[OX2H1]'],  # Rule 10: Acetamido with amino acid\n        ['c1cc([CX3H]=O)ccc1'],  # Rule 11: Formyl on aromatic ring\n        ['[c][OX2H][CX3](=O)[OX2H1]'],  # Rule 12: Hydroxyphenyl with aliphatic chain\n        ['o1c2ccccc2c1[CX3](=O)[OX2H1]'],  # Rule 13: Benzofuran with carboxylic acid\n        ['[c][OX2H][CX3](=O)[OX2H1]'],  # Rule 14: Hydroxy on aromatic with aliphatic carbonyl\n        ['n1ccccc1[CX3](=O)[OX2H1]']  # Rule 15: Pyrazole with carboxylic acid\n    ]\n    results = []\n    for smi in smiles_list:\n        mol = Chem.MolFromSmiles(smi)\n        if mol is None:\n            results.append([0] * len(rules))\n            continue\n        row = []\n        for i, rule in enumerate(rules):\n            try:\n                if all(mol.HasSubstructMatch(Chem.MolFromSmarts(r)) for r in rule):\n                    if i in [0, 1, 2, 3, 8, 12, 14]:  # Rules with high prediction\n                        row.append(1)\n                    else:\n                        row.append(-1)\n                else:\n                    row.append(0)\n            except:\n                row.append(0)\n        results.append(row)\n    df = pd.DataFrame(results, columns=[f'Rule {i+1}' for i in range(len(rules))])\n    return df"
}