def rule2matrix(smiles_list):
    rules = [
        ['[NX3H2][CX3](=O)[OX2H1]'],  # Rule 1: Amino and carboxylic acid group
        ['c1cc([CX3](=O)[OX2H1])c([#7,#8,#9,#15,#16,#17])cc1'],  # Rule 2: Phenyl with carboxylic acid and EWG
        ['n1ccccc1[CX3](=O)[OX2H1]'],  # Rule 3: Pyridine with carboxylic acid
        ['[OX2H]'],  # Rule 4: Multiple hydroxyl groups (count check needed)
        ['[CX3](=O)[CX3](=O)[OX2H1]'],  # Rule 5: Single carbonyl and carboxylic acid
        ['[OX2][CX4][OX2][CX3](=O)[OX2H1]'],  # Rule 6: Ether linkages with carboxylic acid
        ['[CX4](F)(F)F[CX3](=O)[OX2H1]'],  # Rule 7: Trifluoromethyl with carboxylic acid
        ['c1c[nH]c2c1cccc2[CX3](=O)[OX2H1]'],  # Rule 8: Indole with amino acid
        ['[SX2H][CX3](=O)[OX2H1]'],  # Rule 9: Sulfur-containing with carboxylic acid
        ['[NX3][CX3](=O)[CX3](=O)[OX2H1]'],  # Rule 10: Acetamido with amino acid
        ['c1cc([CX3H]=O)ccc1'],  # Rule 11: Formyl on aromatic ring
        ['[c][OX2H][CX3](=O)[OX2H1]'],  # Rule 12: Hydroxyphenyl with aliphatic chain
        ['o1c2ccccc2c1[CX3](=O)[OX2H1]'],  # Rule 13: Benzofuran with carboxylic acid
        ['[c][OX2H][CX3](=O)[OX2H1]'],  # Rule 14: Hydroxy on aromatic with aliphatic carbonyl
        ['n1ccccc1[CX3](=O)[OX2H1]']  # Rule 15: Pyrazole with carboxylic acid
    ]
    results = []
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            results.append([0] * len(rules))
            continue
        row = []
        for i, rule in enumerate(rules):
            try:
                if all(mol.HasSubstructMatch(Chem.MolFromSmarts(r)) for r in rule):
                    if i in [0, 1, 2, 3, 8, 12, 14]:  # Rules with high prediction
                        row.append(1)
                    else:
                        row.append(-1)
                else:
                    row.append(0)
            except:
                row.append(0)
        results.append(row)
    df = pd.DataFrame(results, columns=[f'Rule {i+1}' for i in range(len(rules))])
    return df