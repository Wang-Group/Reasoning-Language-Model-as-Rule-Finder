{
    "prefix": "This code converts a list of SMILES strings into a feature matrix using RDkit. Each rule is represented by a SMARTS pattern, and the matrix indicates whether each SMILES matches the rule and predicts a high or low yield.",
    "imports": "import pandas as pd\nfrom rdkit import Chem",
    "code": "def rule2matrix(smiles_list):\n    rules = [\n        ['[CX3](=O)[OX2H1]', '[NX3H2]'],  # Rule 1: Carboxylic acid and amino group\n        ['[c][CX3](=O)[OX2H1]', '[c][NX3H2]', '[c][OX2H]'],  # Rule 2: Phenyl with carboxylic acid and amino/hydroxy\n        ['[SX2H]', '[CX3](=O)[OX2H1]'],  # Rule 3: Sulfanyl and carboxylic acid\n        ['[OX2H][CX3](=O)[OX2H1]', '[OX2H]'],  # Rule 4: Polyols and carboxylic acid\n        ['[n][CX3](=O)[OX2H1]'],  # Rule 5: Pyridine and carboxylic acid\n        ['[CX4](F)(F)(F)'],  # Rule 6: Fluorinated alkyl chains\n        ['[OX2][CX4][OX2]'],  # Rule 7: Methoxy groups\n        ['[c][CX3H]=O'],  # Rule 8: Formyl group on aromatic ring\n        ['[CX4][CX4][CX4][CX4][CX4][CX4]'],  # Rule 9: Long aliphatic chains\n        ['[nH][c][c][c][c][c][CX3](=O)[OX2H1]'],  # Rule 10: Indole and amino acid\n        ['[c]1oc2ccccc2c1[CX3](=O)[OX2H1]'],  # Rule 11: Benzofuran and carboxylic acid\n        ['[c]1cc(OC)c(OC)cc1'],  # Rule 12: Dimethoxyphenyl group\n        ['[CX3](=O)[OX2H1][CX4][OX2H]'],  # Rule 13: Carboxylic acid and hydroxyl on aliphatic chain\n        ['[n][CX4]'],  # Rule 14: Pyridine and aliphatic chain\n        ['[c][NX3+](=O)[O-]'],  # Rule 15: Nitro group on aromatic ring\n    ]\n    results = []\n    for smi in smiles_list:\n        mol = Chem.MolFromSmiles(smi)\n        if mol is None:\n            results.append([0] * len(rules))\n            continue\n        row = []\n        for i, rule in enumerate(rules):\n            try:\n                if all(mol.HasSubstructMatch(Chem.MolFromSmarts(r)) for r in rule):\n                    if i in [0, 1, 2, 3, 4, 9, 10, 11, 12, 14]:  # High yield rules\n                        row.append(1)\n                    else:  # Low yield rules\n                        row.append(-1)\n                else:\n                    row.append(0)\n            except:\n                row.append(0)\n        results.append(row)\n    df = pd.DataFrame(results, columns=[f'Rule {i+1}' for i in range(len(rules))])\n    return df"
}