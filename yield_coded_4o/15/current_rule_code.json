{
    "prefix": "This code converts a list of SMILES strings into a feature matrix using RDkit. Each rule is represented by a SMARTS pattern, and the matrix indicates whether the rule matches the SMILES and predicts a high or low yield.",
    "imports": "import pandas as pd\nfrom rdkit import Chem",
    "code": "def rule2matrix(smiles_list):\n    rules = [\n        ['[CX3](=O)[OX2H1]', '[NX3H2]'],  # Rule 1: Carboxylic acid and amino group\n        ['[c][CX3](=O)[OX2H1]', '[c][NX3H2]', '[c][OX2H]'],  # Rule 2: Phenyl with carboxylic acid and electron-donating groups\n        ['[n][CX3](=O)[OX2H1]'],  # Rule 3: Pyridine with carboxylic acid\n        ['[SX2H]'],  # Rule 4: Sulfanyl group\n        ['[O][CX4][O][CX4][O]'],  # Rule 5: Multiple methoxy groups\n        ['[c][CX3H]=O'],  # Rule 6: Formyl group on phenyl\n        ['[nH]1c2ccccc2c3c1cccc3'],  # Rule 7: Indole group\n        ['[CX3](=O)[CX3](F)(F)F'],  # Rule 8: Trifluoroacetyl group\n        ['[OX2H][CX4][CX4][CX4][CX4][CX4][CX4][CX4]'],  # Rule 9: Hydroxyl on long aliphatic chain\n        ['O=C1OC2=CC=CC=C2C1=O'],  # Rule 10: Benzofuranone structure\n        ['[c][NX3+](=O)[O-]'],  # Rule 11: Nitro group on phenyl\n        ['[CX3](=O)[NX3][CX3](=O)[NX3H2]'],  # Rule 12: Acetamido and amino group\n        ['[n]1ccncc1[CX3](=O)[OX2H1]'],  # Rule 13: Pyrazole with carboxylic acid\n        ['[c][OX2H]'],  # Rule 14: Hydroxyl on phenyl without electron-withdrawing groups\n        ['[CX4][CX4][CX4][CX4][CX4][CX4][CX4]'],  # Rule 15: Long aliphatic chain\n    ]\n    results = []\n    for smi in smiles_list:\n        mol = Chem.MolFromSmiles(smi)\n        if mol is None:\n            results.append([0] * len(rules))\n            continue\n        row = []\n        for i, rule in enumerate(rules):\n            try:\n                if all(mol.HasSubstructMatch(Chem.MolFromSmarts(r)) for r in rule):\n                    if i in [0, 1, 3, 7, 10, 13, 14]:  # Rules with high prediction\n                        row.append(1)\n                    else:  # Rules with low prediction\n                        row.append(-1)\n                else:\n                    row.append(0)\n            except:\n                row.append(0)\n        results.append(row)\n    df = pd.DataFrame(results, columns=[f'Rule {i+1}' for i in range(len(rules))])\n    return df"
}