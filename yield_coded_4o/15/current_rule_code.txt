def rule2matrix(smiles_list):
    rules = [
        ['[CX3](=O)[OX2H1]', '[NX3H2]'],  # Rule 1: Carboxylic acid and amino group
        ['[c][CX3](=O)[OX2H1]', '[c][NX3H2]', '[c][OX2H]'],  # Rule 2: Phenyl with carboxylic acid and electron-donating groups
        ['[n][CX3](=O)[OX2H1]'],  # Rule 3: Pyridine with carboxylic acid
        ['[SX2H]'],  # Rule 4: Sulfanyl group
        ['[O][CX4][O][CX4][O]'],  # Rule 5: Multiple methoxy groups
        ['[c][CX3H]=O'],  # Rule 6: Formyl group on phenyl
        ['[nH]1c2ccccc2c3c1cccc3'],  # Rule 7: Indole group
        ['[CX3](=O)[CX3](F)(F)F'],  # Rule 8: Trifluoroacetyl group
        ['[OX2H][CX4][CX4][CX4][CX4][CX4][CX4][CX4]'],  # Rule 9: Hydroxyl on long aliphatic chain
        ['O=C1OC2=CC=CC=C2C1=O'],  # Rule 10: Benzofuranone structure
        ['[c][NX3+](=O)[O-]'],  # Rule 11: Nitro group on phenyl
        ['[CX3](=O)[NX3][CX3](=O)[NX3H2]'],  # Rule 12: Acetamido and amino group
        ['[n]1ccncc1[CX3](=O)[OX2H1]'],  # Rule 13: Pyrazole with carboxylic acid
        ['[c][OX2H]'],  # Rule 14: Hydroxyl on phenyl without electron-withdrawing groups
        ['[CX4][CX4][CX4][CX4][CX4][CX4][CX4]'],  # Rule 15: Long aliphatic chain
    ]
    results = []
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            results.append([0] * len(rules))
            continue
        row = []
        for i, rule in enumerate(rules):
            try:
                if all(mol.HasSubstructMatch(Chem.MolFromSmarts(r)) for r in rule):
                    if i in [0, 1, 3, 7, 10, 13, 14]:  # Rules with high prediction
                        row.append(1)
                    else:  # Rules with low prediction
                        row.append(-1)
                else:
                    row.append(0)
            except:
                row.append(0)
        results.append(row)
    df = pd.DataFrame(results, columns=[f'Rule {i+1}' for i in range(len(rules))])
    return df