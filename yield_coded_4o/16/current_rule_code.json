{
    "prefix": "This code converts a list of SMILES strings into a feature matrix using RDkit. Each rule is represented by a SMARTS pattern, and the matrix indicates whether each SMILES matches the rule and the predicted yield outcome.",
    "imports": "import pandas as pd\nfrom rdkit import Chem",
    "code": "def rule2matrix(smiles_list):\n    rules = [\n        ['[NX3H2]', '[CX3](=O)[OX2H1]'],  # Rule 1: Amino and carboxylic acid group\n        ['[c][CX3](=O)[OX2H1]', '[OH]'],  # Rule 2: Phenyl with carboxylic acid and hydroxyl\n        ['[SX2H]', '[CX3](=O)[OX2H1]'],  # Rule 3: Sulfur and carboxylic acid\n        ['[n][CX3](=O)[OX2H1]'],  # Rule 4: Pyridine and carboxylic acid\n        ['[OH]', '[OH]', '[CX3](=O)[OX2H1]'],  # Rule 5: Polyols and carboxylic acid\n        ['[c][NX3+](=O)[O-]', '[CX3](=O)[OX2H1]'],  # Rule 6: Nitro on phenyl with carboxylic acid\n        ['[c][CX3H](=O)'],  # Rule 7: Formyl on phenyl\n        ['[CX4](F)(F)F', '[CX3](=O)[OX2H1]'],  # Rule 8: Trifluoromethyl and carboxylic acid\n        ['[OX2][CX3](=O)[OX2H1]'],  # Rule 9: Ether linkage and carboxylic acid\n        ['[NX3][CX3](=O)[CH3]', '[NX3H2]'],  # Rule 10: Acetamido and amino group\n        ['[NX3H2]', '[OH]', '[CX3](=O)[OX2H1]'],  # Rule 11: Amino, hydroxyl, and carboxylic acid\n        ['[o]1cc(c(=O)o1)[CX3](=O)[OX2H1]'],  # Rule 12: Benzofuranone and carboxylic acid\n        ['[n][NX3H2]', '[CX3](=O)[OX2H1]'],  # Rule 13: Pyridine with amino or hydroxyl\n        ['[c][CX3](=O)'],  # Rule 14: Phenyl with acyl group\n        ['[CX4][CX4][CX4][CX4][CX4][CX4][CX4]', '[CX3](=O)[OX2H1]']  # Rule 15: Long aliphatic chain and carboxylic acid\n    ]\n    results = []\n    for smi in smiles_list:\n        mol = Chem.MolFromSmiles(smi)\n        if mol is None:\n            results.append([0] * len(rules))\n            continue\n        row = []\n        for i, rule in enumerate(rules):\n            try:\n                if all(mol.HasSubstructMatch(Chem.MolFromSmarts(r)) for r in rule):\n                    if i in [0, 1, 2, 3, 4, 5, 11, 12]:  # High yield rules\n                        row.append(1)\n                    else:  # Low yield rules\n                        row.append(-1)\n                else:\n                    row.append(0)\n            except:\n                row.append(0)\n        results.append(row)\n    df = pd.DataFrame(results, columns=[f'Rule {i+1}' for i in range(len(rules))])\n    return df"
}