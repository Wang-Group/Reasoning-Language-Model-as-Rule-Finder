def rule2matrix(smiles_list):
    rules = [
        ['[NX3H2]', '[CX3](=O)[OX2H1]'],  # Rule 1: Amino and carboxylic acid group
        ['[c][CX3](=O)[OX2H1]', '[OH]'],  # Rule 2: Phenyl with carboxylic acid and hydroxyl
        ['[SX2H]', '[CX3](=O)[OX2H1]'],  # Rule 3: Sulfur and carboxylic acid
        ['[n][CX3](=O)[OX2H1]'],  # Rule 4: Pyridine and carboxylic acid
        ['[OH]', '[OH]', '[CX3](=O)[OX2H1]'],  # Rule 5: Polyols and carboxylic acid
        ['[c][NX3+](=O)[O-]', '[CX3](=O)[OX2H1]'],  # Rule 6: Nitro on phenyl with carboxylic acid
        ['[c][CX3H](=O)'],  # Rule 7: Formyl on phenyl
        ['[CX4](F)(F)F', '[CX3](=O)[OX2H1]'],  # Rule 8: Trifluoromethyl and carboxylic acid
        ['[OX2][CX3](=O)[OX2H1]'],  # Rule 9: Ether linkage and carboxylic acid
        ['[NX3][CX3](=O)[CH3]', '[NX3H2]'],  # Rule 10: Acetamido and amino group
        ['[NX3H2]', '[OH]', '[CX3](=O)[OX2H1]'],  # Rule 11: Amino, hydroxyl, and carboxylic acid
        ['[o]1cc(c(=O)o1)[CX3](=O)[OX2H1]'],  # Rule 12: Benzofuranone and carboxylic acid
        ['[n][NX3H2]', '[CX3](=O)[OX2H1]'],  # Rule 13: Pyridine with amino or hydroxyl
        ['[c][CX3](=O)'],  # Rule 14: Phenyl with acyl group
        ['[CX4][CX4][CX4][CX4][CX4][CX4][CX4]', '[CX3](=O)[OX2H1]']  # Rule 15: Long aliphatic chain and carboxylic acid
    ]
    results = []
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            results.append([0] * len(rules))
            continue
        row = []
        for i, rule in enumerate(rules):
            try:
                if all(mol.HasSubstructMatch(Chem.MolFromSmarts(r)) for r in rule):
                    if i in [0, 1, 2, 3, 4, 5, 11, 12]:  # High yield rules
                        row.append(1)
                    else:  # Low yield rules
                        row.append(-1)
                else:
                    row.append(0)
            except:
                row.append(0)
        results.append(row)
    df = pd.DataFrame(results, columns=[f'Rule {i+1}' for i in range(len(rules))])
    return df