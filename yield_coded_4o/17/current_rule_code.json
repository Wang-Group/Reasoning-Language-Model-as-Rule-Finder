{
    "prefix": "This code converts a list of SMILES strings into a feature matrix using RDkit. Each rule is represented by a SMARTS pattern, and the matrix indicates whether each SMILES matches the rule and the predicted yield outcome.",
    "imports": "import pandas as pd\nfrom rdkit import Chem",
    "code": "def rule2matrix(smiles_list):\n    rules = [\n        ['$([NX3H2][CX3](=O)[OX2H1])', '$([CX3](=O)[OX2H1][NX3H2])'],  # Rule 1: Amino and carboxylic acid group\n        ['$([c1ccccc1C(=O)O])', '$([c1ccccc1C(=O)O][Br,F,Cl,I,N+](=O)[O-])'],  # Rule 2: Phenyl with carboxylic acid and EWG\n        ['$([c1ccncc1C(=O)O])', '$([c1ccncc1C(=O)O][OH])'],  # Rule 3: Pyridine with carboxylic acid\n        ['$([SX2H][CX3](=O)[OX2H1])'],  # Rule 4: Sulfanyl with carboxylic acid\n        ['O=C1OCc2ccccc2C1=O'],  # Rule 5: Benzofuranone structure\n        ['$([c1ccccc1C(=O)C=O])'],  # Rule 6: Formyl on benzoic acid\n        ['COC'],  # Rule 7: Methoxy on ether chain\n        ['$([CX3](=O)[CX4](F)(F)F)'],  # Rule 8: Trifluoroacetyl group\n        ['$([c1ccccc1C[C@@H](N)C(=O)O])'],  # Rule 9: Phenyl on amino acid backbone\n        ['CCCCCCCO'],  # Rule 10: Long aliphatic chain with terminal OH\n        ['$([c1ccccc1[N+](=O)[O-])'],  # Rule 11: Benzene with EWG\n        ['$([c1ccc(cc1)O])'],  # Rule 12: Hydroxyl on phenyl ring\n        ['$([c1ccncc1C=O])'],  # Rule 13: Pyridine with formyl group\n        ['$([c1ccccc1S])'],  # Rule 14: Benzene with sulfanyl group\n    ]\n    results = []\n    for smi in smiles_list:\n        mol = Chem.MolFromSmiles(smi)\n        if mol is None:\n            results.append([0] * len(rules))\n            continue\n        row = []\n        for i, rule in enumerate(rules):\n            try:\n                if all(mol.HasSubstructMatch(Chem.MolFromSmarts(r)) for r in rule):\n                    if i in [0, 1, 2, 3, 4, 10]:  # Rules with high prediction\n                        row.append(1)\n                    else:  # Rules with low prediction\n                        row.append(-1)\n                else:\n                    row.append(0)\n            except:\n                row.append(0)\n        results.append(row)\n    df = pd.DataFrame(results, columns=[f'Rule {i+1}' for i in range(len(rules))])\n    return df"
}