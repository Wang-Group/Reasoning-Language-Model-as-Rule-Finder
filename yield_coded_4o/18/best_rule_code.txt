def rule2matrix(smiles_list):
    rules = [
        ['[CX3](=O)[OX2H1]', '[NX3;H2]'],  # Rule 1: Carboxylic acid and amino group
        ['[c][CX3](=O)[OX2H1]', '[c][CH3]'],  # Rule 2: Phenyl with carboxylic acid and methyl
        ['[C@H]([OH])[C@H]([OH])[C@H]([OH])[C@H]([OH])[C@H]([OH])'],  # Rule 3: Multiple hydroxyl groups in sugar-like structure
        ['[SX2][CX3](=O)[OX2H1]'],  # Rule 4: Sulfur-containing group and carboxylic acid
        ['[c][NX3+](=O)[O-]'],  # Rule 5: Nitro group on aromatic ring
        ['[C;X4][C;X4][C;X4][C;X4][C;X4][C;X4][C;X4]'],  # Rule 6: Long aliphatic chains
        ['[n][CX3](=O)[OX2H1]'],  # Rule 7: Pyridine with carboxylic acid
        ['[c][CX3H]=O'],  # Rule 8: Formyl group on aromatic ring
        ['[OX2][C;X4][OX2][C;X4][OX2][C;X4]'],  # Rule 9: Multiple ether linkages
        ['[c][OX2H]'],  # Rule 10: Hydroxyl group on aromatic ring
        ['[CX4](F)(F)F'],  # Rule 11: Trifluoromethyl group
        ['[n][NX3;H2]'],  # Rule 12: Pyridine and amino group
        ['[c][nH]'],  # Rule 13: Indole group
        ['[c][CH2Br]'],  # Rule 14: Bromomethyl group on aromatic ring
        ['[c][OX2H][CX3](=O)[OX2H1]']  # Rule 15: Hydroxyl and carboxylic acid on phenyl
    ]
    results = []
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            results.append([0] * len(rules))
            continue
        row = []
        for i, rule in enumerate(rules):
            try:
                if all(mol.HasSubstructMatch(Chem.MolFromSmarts(r)) for r in rule):
                    if i in [0, 2, 3, 4, 5, 7, 12, 13, 14, 15]:  # Rules with high prediction
                        row.append(1)
                    else:
                        row.append(-1)
                else:
                    row.append(0)
            except:
                row.append(0)
        results.append(row)
    df = pd.DataFrame(results, columns=[f'Rule {i+1}' for i in range(len(rules))])
    return df