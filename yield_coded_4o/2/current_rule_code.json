{
    "prefix": "This code converts a list of SMILES strings into a feature matrix using RDkit. Each rule is represented by a SMARTS pattern, and the matrix indicates whether each SMILES matches the rule and the predicted yield.",
    "imports": "import pandas as pd\nfrom rdkit import Chem",
    "code": "def rule2matrix(smiles_list):\n    rules = [\n        ['[NX3][CX3](=O)[OX2H1]', '[CX3](=O)[OX2H1]', '[CX3](=O)[NX3]'],  # Rule 1: Amino and carboxylic acid groups\n        ['c1ccccc1C(=O)O'],  # Rule 2: Phenyl group with carboxylic acid\n        ['c1ncccc1', '[CX3](=O)[OX2H1]'],  # Rule 3: Pyridine ring\n        ['[SX2H][CX3](=O)[OX2H1]'],  # Rule 4: Sulfanyl group\n        ['c1oc2ccccc2c1'],  # Rule 5: Benzofuran structure\n        ['c1c[nH]c2c1cccc2'],  # Rule 6: Indole structure\n        ['[OX2H][CX3](=O)[OX2H1]', '[CX3](=O)[OX2H1][OX2H]'],  # Rule 7: Hydroxyl group near carboxylic acid\n        ['[OX2][CX3](=O)[OX2]', '[OX2][CX3](=O)[OX2]'],  # Rule 8: Multiple ether linkages\n        ['c1ccccc1C=O'],  # Rule 9: Formyl group on aromatic ring\n        ['[CX4](F)(F)F'],  # Rule 10: Trifluoromethyl group\n        ['c1cc(OC)ccc1'],  # Rule 11: Methoxy group on aromatic ring\n        ['c1ccccc1C(=O)O'],  # Rule 12: Carboxylic acid adjacent to aromatic ring\n        ['[C;X4][C;X4][C;X4][C;X4][C;X4][C;X4][C;X4]'],  # Rule 13: Long aliphatic chain\n        ['c1cc(O)ccc1'],  # Rule 14: Hydroxyphenyl group\n        ['[NX3][CX3](=O)[CX3](=O)[OX2H1]', '[CX3](=O)[NX3]']  # Rule 15: Acetamido group\n    ]\n    results = []\n    for smi in smiles_list:\n        mol = Chem.MolFromSmiles(smi)\n        if mol is None:\n            results.append([0] * len(rules))\n            continue\n        row = []\n        for i, rule in enumerate(rules):\n            try:\n                if all(mol.HasSubstructMatch(Chem.MolFromSmarts(r)) for r in rule):\n                    if i in [0, 1, 2, 3, 4, 5, 6, 10]:  # Rules with high prediction\n                        row.append(1)\n                    else:\n                        row.append(-1)\n                else:\n                    row.append(0)\n            except:\n                row.append(0)\n        results.append(row)\n    df = pd.DataFrame(results, columns=[f'Rule {i+1}' for i in range(len(rules))])\n    return df"
}