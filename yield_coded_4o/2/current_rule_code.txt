def rule2matrix(smiles_list):
    rules = [
        ['[NX3][CX3](=O)[OX2H1]', '[CX3](=O)[OX2H1]', '[CX3](=O)[NX3]'],  # Rule 1: Amino and carboxylic acid groups
        ['c1ccccc1C(=O)O'],  # Rule 2: Phenyl group with carboxylic acid
        ['c1ncccc1', '[CX3](=O)[OX2H1]'],  # Rule 3: Pyridine ring
        ['[SX2H][CX3](=O)[OX2H1]'],  # Rule 4: Sulfanyl group
        ['c1oc2ccccc2c1'],  # Rule 5: Benzofuran structure
        ['c1c[nH]c2c1cccc2'],  # Rule 6: Indole structure
        ['[OX2H][CX3](=O)[OX2H1]', '[CX3](=O)[OX2H1][OX2H]'],  # Rule 7: Hydroxyl group near carboxylic acid
        ['[OX2][CX3](=O)[OX2]', '[OX2][CX3](=O)[OX2]'],  # Rule 8: Multiple ether linkages
        ['c1ccccc1C=O'],  # Rule 9: Formyl group on aromatic ring
        ['[CX4](F)(F)F'],  # Rule 10: Trifluoromethyl group
        ['c1cc(OC)ccc1'],  # Rule 11: Methoxy group on aromatic ring
        ['c1ccccc1C(=O)O'],  # Rule 12: Carboxylic acid adjacent to aromatic ring
        ['[C;X4][C;X4][C;X4][C;X4][C;X4][C;X4][C;X4]'],  # Rule 13: Long aliphatic chain
        ['c1cc(O)ccc1'],  # Rule 14: Hydroxyphenyl group
        ['[NX3][CX3](=O)[CX3](=O)[OX2H1]', '[CX3](=O)[NX3]']  # Rule 15: Acetamido group
    ]
    results = []
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            results.append([0] * len(rules))
            continue
        row = []
        for i, rule in enumerate(rules):
            try:
                if all(mol.HasSubstructMatch(Chem.MolFromSmarts(r)) for r in rule):
                    if i in [0, 1, 2, 3, 4, 5, 6, 10]:  # Rules with high prediction
                        row.append(1)
                    else:
                        row.append(-1)
                else:
                    row.append(0)
            except:
                row.append(0)
        results.append(row)
    df = pd.DataFrame(results, columns=[f'Rule {i+1}' for i in range(len(rules))])
    return df