def rule2matrix(smiles_list):
    rules = [
        ['[CX3](=O)[OX2H1]', '[NX3H2]'],  # Rule 1: Carboxylic acid and amino group
        ['c1cc(O)ccc1'],  # Rule 2: Phenyl group with para hydroxyl
        ['[SX2H]', '[CX3](=O)[OX2H1]'],  # Rule 3: Sulfanyl and carboxylic acid
        ['c1cncc(C(=O)O)c1'],  # Rule 4: Pyridine with carboxylic acid
        ['c1c[nH]c2c1cccc2', '[NX3H2]', '[OX2H1]'],  # Rule 5: Indole with electron-donating groups
        ['[NX3+](=O)[O-]', '[c][OX2H1]'],  # Rule 6: Nitro with electron-donating groups
        ['c1ccc(C(=O)O)cc1', '[Br,Cl,I,NX3+](=O)'],  # Rule 7: Benzoic acid with electron-withdrawing groups
        ['[CX4](F)(F)(F)(F)'],  # Rule 8: Highly fluorinated alkyl chain
        ['[OX2][CX4][OX2][CX4][OX2]'],  # Rule 9: Multiple ether linkages
        ['[NX3H2][CX4][OX2H1]'],  # Rule 10: Amino and hydroxyl in a linear chain
        ['[NX3H2][CX4][CX4][CX4][CX4][CX4][CX4]'],  # Rule 11: Long aliphatic chain with terminal amino
        ['[CX3H]=O', '[NX3+](=O)'],  # Rule 12: Formyl with electron-withdrawing group
        ['c1cc2c(c1)C(=O)OC2=O'],  # Rule 13: Benzofuranone structure
        ['c1ccncc1', 'c1ccccc1'],  # Rule 14: Pyridine with non-conjugated phenyl
        ['c1ccc(C(=O)O)cc1', '[CX3H]=O'],  # Rule 15: Carboxylic acid and formyl on benzene
    ]
    results = []
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            results.append([0] * len(rules))
            continue
        row = []
        for i, rule in enumerate(rules):
            try:
                if all(mol.HasSubstructMatch(Chem.MolFromSmarts(r)) for r in rule):
                    if i in [0, 1, 2, 3, 4, 5, 6, 12]:  # Rules predicting high yield
                        row.append(1)
                    else:  # Rules predicting low yield
                        row.append(-1)
                else:
                    row.append(0)
            except:
                row.append(0)
        results.append(row)
    df = pd.DataFrame(results, columns=[f'Rule {i+1}' for i in range(len(rules))])
    return df