{
    "prefix": "This code converts a list of SMILES strings into a feature matrix using RDkit. Each rule is represented by a SMARTS pattern, and the matrix indicates whether each SMILES matches the rule and the predicted yield outcome.",
    "imports": "import pandas as pd\nfrom rdkit import Chem",
    "code": "def rule2matrix(smiles_list):\n    rules = [\n        ['[NX3][CX3](=O)[OX2H1][CX3](=O)[OX2H1]'],  # Rule 1: Amino acid with additional carboxylic acid\n        ['c1cc([OH])ccc1C(=O)O'],  # Rule 2: Hydroxyl and carboxylic acid on benzene\n        ['c1ccncc1C(=O)O'],  # Rule 3: Pyridine with carboxylic acid\n        ['[CX3][SX2H]'],  # Rule 4: Sulfanyl group\n        ['c1cc([N+](=O)[O-])ccc1C(=O)O'],  # Rule 5: Benzoic acid with nitro\n        ['[CX3](=O)[OX2H][CX4][CX4]'],  # Rule 6: Linear aliphatic with carboxylic acid\n        ['[CX3](=O)[OX2H][CX4][F][F][F]'],  # Rule 7: High fluorination\n        ['c1cc(C=O)ccc1'],  # Rule 8: Benzene with formyl\n        ['c1ccncc1C(=O)O[N+](=O)[O-]'],  # Rule 9: Pyridine with electron-withdrawing\n        ['[CX3](=O)[OX2H][CX4][OX2H][OX2H]'],  # Rule 10: Multiple hydroxyls on aliphatic\n        ['c1ccncc1O'],  # Rule 11: Pyridine with hydroxyl\n        ['c1cc(S)ccc1'],  # Rule 12: Benzene with sulfanyl\n        ['[CX3](=O)[OX2H][CX4][NX3][CX4]'],  # Rule 13: Branched aliphatic with amino and carboxylic acid\n        ['c1cc(N)ccc1'],  # Rule 14: Amino with phenyl\n        ['c1cc(OC)ccc1C(=O)O']  # Rule 15: Benzene with methoxy\n    ]\n    results = []\n    for smi in smiles_list:\n        mol = Chem.MolFromSmiles(smi)\n        if mol is None:\n            results.append([0] * len(rules))\n            continue\n        row = []\n        for i, rule in enumerate(rules):\n            try:\n                if all(mol.HasSubstructMatch(Chem.MolFromSmarts(r)) for r in rule):\n                    if i in [0, 1, 2, 3, 4, 10, 11]:  # Rules predicting high yield\n                        row.append(1)\n                    else:  # Rules predicting low yield\n                        row.append(-1)\n                else:\n                    row.append(0)\n            except:\n                row.append(0)\n        results.append(row)\n    df = pd.DataFrame(results, columns=[f'Rule {i+1}' for i in range(len(rules))])\n    return df"
}