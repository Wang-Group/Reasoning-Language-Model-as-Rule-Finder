def rule2matrix(smiles_list):
    rules = [
        ['[$([NX3;$([N]([c])[c])][C@H])]'],  # Rule 1: Aromatic amine with specific stereochemistry
        ['[$([CX3](=O)[OX2H1][c][c][c][c][c][c][NX3;$([N]([c])[c])])]'],  # Rule 2: Carboxylic acid adjacent to aromatic ring with EWG
        ['[$([C@H](O)[C@H](O)[C@H](O)[C@H](O)[C@H](O)[C@H](O))]'],  # Rule 3: Sugar-like structure with hydroxyl groups
        ['[SX2H]', '[SX2]'],  # Rule 4: Sulfanyl group or thioether
        ['[n][c][c][c][c][c][c][OX2H]'],  # Rule 5: Pyridine ring with electron-donating groups
        ['[c][OCH3]'],  # Rule 6: Methoxy group adjacent to aromatic ring
        ['[c]1oc2ccccc2c1'],  # Rule 7: Benzofuran structure
        ['[CX4][CX4][CX4][CX4][CX4][CX4][CX4]'],  # Rule 8: Simple aliphatic chain
        ['[c][CX3H]=O'],  # Rule 9: Formyl group on aromatic ring
        ['[OX2][CX4][OX2][CX4][OX2][CX4]'],  # Rule 10: Ether linkage with EWG
        ['[CX4](F)(F)F'],  # Rule 11: Trifluoromethyl group
        ['[OX2H][CX4][CX4][CX4][CX4][CX4][CX4][CX4]'],  # Rule 12: Hydroxy group on long aliphatic chain
        ['[c][CH3]'],  # Rule 13: Methyl group on aromatic ring
        ['[c][OX2H][c][CX3H]=O'],  # Rule 14: Hydroxy and formyl group on aromatic ring
        ['[n][c][c][CX3](=O)[OX2H1]']  # Rule 15: Carboxylic acid and pyridine ring
    ]
    results = []
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            results.append([0] * len(rules))
            continue
        row = []
        for i, rule in enumerate(rules):
            try:
                if all(mol.HasSubstructMatch(Chem.MolFromSmarts(r)) for r in rule):
                    if i in [0, 1, 2, 3, 4, 5, 6]:  # Rules with high prediction
                        row.append(1)
                    else:  # Rules with low prediction
                        row.append(-1)
                else:
                    row.append(0)
            except:
                row.append(0)
        results.append(row)
    df = pd.DataFrame(results, columns=[f'Rule {i+1}' for i in range(len(rules))])
    return df