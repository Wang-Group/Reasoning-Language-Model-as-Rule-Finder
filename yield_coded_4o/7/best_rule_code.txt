def rule2matrix(smiles_list):
    rules = [
        ['[c][CX3](=O)[OX2H1]', '[Br,c][c]'],  # Rule 1: Carboxylic acid on aromatic with bromine or nitro
        ['[NX3][C][C][C][C][C]', '[c]'],  # Rule 2: Amino acid with aromatic group
        ['[SX2H]', '[C]'],  # Rule 3: Thiol group
        ['[OX2H][C][C][C][C][C][OX2H]', '[C]'],  # Rule 4: Multiple hydroxyl groups in sugar-like structure
        ['[n][c]', '[CX3](=O)[OX2H1]'],  # Rule 5: Pyridine with carboxylic acid
        ['[CX4](F)(F)F'],  # Rule 6: Trifluoromethyl group
        ['[c][CX3H]=O'],  # Rule 7: Aldehyde on aromatic ring
        ['[c][OX2][C]'],  # Rule 8: Methoxy on aromatic ring
        ['[C][C][C][C][C][C][C]'],  # Rule 9: Linear aliphatic chain > 6 carbons
        ['[NX3][CX3](=O)[CX3][NX3]'],  # Rule 10: Acetamido with amino group
        ['[CX3](=O)[OX2][C][C][C]'],  # Rule 11: Carboxylic acid with ether linkage
        ['[SX2H][c]'],  # Rule 12: Thiol with aromatic ring
        ['[c][CX3](=O)[OX2H1][OX2H1]'],  # Rule 13: Benzoic acid with hydroxyl
        ['[n][c][CX3](=O)[OX2H1]'],  # Rule 14: Pyridine with carboxylic acid
        ['[c][NX3+](=O)[O-]'],  # Rule 15: Nitro group on aromatic ring
    ]
    results = []
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            results.append([0] * len(rules))
            continue
        row = []
        for i, rule in enumerate(rules):
            try:
                if all(mol.HasSubstructMatch(Chem.MolFromSmarts(r)) for r in rule):
                    if i in [0, 1, 2, 3, 12, 14]:  # Rules predicting high yield
                        row.append(1)
                    else:  # Rules predicting low yield
                        row.append(-1)
                else:
                    row.append(0)
            except:
                row.append(0)
        results.append(row)
    df = pd.DataFrame(results, columns=[f'Rule {i+1}' for i in range(len(rules))])
    return df