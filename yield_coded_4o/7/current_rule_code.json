{
    "prefix": "This code converts a list of SMILES strings into a feature matrix using RDkit. Each rule is represented by a SMARTS pattern, and the matrix indicates whether the rule matches the SMILES and predicts a high or low yield.",
    "imports": "import pandas as pd\nfrom rdkit import Chem",
    "code": "def rule2matrix(smiles_list):\n    rules = [\n        ['[c][CX3](=O)[OX2H1]', '[NX3+](=O)-[OX-]'],  # Rule 1: Carboxylic acid on aromatic ring with nitro group\n        ['[NX3H2+0][C][C][C][C][C][C]', '[c]'],  # Rule 2: Amino acid with aromatic group\n        ['[SX2H]', '[CX3](=O)[OX2H1]'],  # Rule 3: Thiol with carboxylic acid\n        ['[OX2H][C][C][C][C][C][OX2H]'],  # Rule 4: Sugar-like structure with multiple hydroxyls\n        ['[n][CX3](=O)[OX2H1]'],  # Rule 5: Pyridine with carboxylic acid\n        ['[CX4](F)(F)F'],  # Rule 6: Trifluoromethyl group\n        ['[c][CX3H]=O'],  # Rule 7: Aldehyde on aromatic ring\n        ['[c][OX2][CH3]'],  # Rule 8: Methoxy on aromatic ring\n        ['[C][C][C][C][C][C][C]'],  # Rule 9: Linear aliphatic chain > 6 carbons\n        ['[NX3H2][CX3](=O)[CX3H2]'],  # Rule 10: Acetamido with amino group\n        ['[CX3](=O)[OX2][C][C][OX2]'],  # Rule 11: Carboxylic acid with ether linkage\n        ['[c][CX3](=O)[OX2H1][OX2H1]'],  # Rule 12: Benzoic acid with hydroxyl\n        ['[n][SX2H]'],  # Rule 13: Pyridine with thiol\n        ['[c][NX3+](=O)-[OX-]'],  # Rule 14: Nitro on aromatic ring\n        ['[c][SX2H]']  # Rule 15: Sulfanyl on aromatic ring\n    ]\n    results = []\n    for smi in smiles_list:\n        mol = Chem.MolFromSmiles(smi)\n        if mol is None:\n            results.append([0] * len(rules))\n            continue\n        row = []\n        for i, rule in enumerate(rules):\n            try:\n                if all(mol.HasSubstructMatch(Chem.MolFromSmarts(r)) for r in rule):\n                    if i in [0, 1, 2, 3, 4, 13, 14]:  # Rules with high prediction\n                        row.append(1)\n                    else:\n                        row.append(-1)\n                else:\n                    row.append(0)\n            except:\n                row.append(0)\n        results.append(row)\n    df = pd.DataFrame(results, columns=[f'Rule {i+1}' for i in range(len(rules))])\n    return df"
}