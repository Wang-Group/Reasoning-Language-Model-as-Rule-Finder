{
    "prefix": "This code converts a list of SMILES strings into a feature matrix using RDkit. Each rule is checked against the SMILES to determine if it matches and predicts a high or low yield.",
    "imports": "import pandas as pd\nfrom rdkit import Chem",
    "code": "def rule2matrix(smiles_list):\n    rules = [\n        ['[NX3H2]', '[CX3](=O)[OX2H1]'],  # Rule 1: Amino and carboxylic acid group\n        ['[SX2H]', '[CX3](=O)[OX2H1]'],  # Rule 2: Sulfanyl and carboxylic acid group\n        ['c1ccncc1[NX3H2]'],  # Rule 3: Pyridine with amino group\n        ['[NX3+](=O)[O-]'],  # Rule 4: Nitro group\n        ['[CX3H]=O'],  # Rule 5: Formyl group\n        ['[OX2H][CX4][OX2H]'],  # Rule 6: Multiple hydroxyl groups\n        ['c1ccccc1OC'],  # Rule 7: Benzene with methoxy group\n        ['[CX4](F)(F)F'],  # Rule 8: Fluorinated alkyl chain\n        ['c1c[nH]c2c1cccc2'],  # Rule 9: Indole group\n        ['[CX4][CX4][CX4][CX4][CX4][CX4][CX3](=O)[OX2H1]'],  # Rule 10: Long alkyl chain with carboxylic acid\n        ['c1cc([NX3H2])[CX3H]=O'],  # Rule 11: Electron-donating and withdrawing groups on aromatic ring\n        ['[OX2][CX4][OX2H1]'],  # Rule 12: Ether linkage with carboxylic acid\n        ['c1ccccc1[SX2H]'],  # Rule 13: Benzene with sulfanyl group\n        ['c1ccncc1[CX3](=O)[OX2H1]'],  # Rule 14: Pyridine with carboxylic acid\n        ['c1ccccc1[CX3H]=O']  # Rule 15: Benzene with formyl group\n    ]\n    results = []\n    for smi in smiles_list:\n        mol = Chem.MolFromSmiles(smi)\n        if mol is None:\n            results.append([0] * len(rules))\n            continue\n        row = []\n        for i, rule in enumerate(rules):\n            try:\n                if all(mol.HasSubstructMatch(Chem.MolFromSmarts(r)) for r in rule):\n                    if i in [0, 1, 2, 3, 5, 9, 11, 14]:  # Rules predicting high yield\n                        row.append(1)\n                    else:  # Rules predicting low yield\n                        row.append(-1)\n                else:\n                    row.append(0)\n            except:\n                row.append(0)\n        results.append(row)\n    df = pd.DataFrame(results, columns=[f'Rule {i+1}' for i in range(len(rules))])\n    return df"
}