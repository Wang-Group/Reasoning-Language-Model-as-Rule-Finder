def rule2matrix(smiles_list):
    rules = [
        ['[CX3](=O)[OX2H1]', '[NX3H2]', '[C;X4][C;X4][C;X4][C;X4]'],  # Rule 1
        ['[c][CX3](=O)[OX2H1]', '[c][NX3H2]', '[c][OX2H]'],  # Rule 2
        ['[C;X4][SX2H]', '[C;X4][SX2]'],  # Rule 3
        ['[C;X4][OX2H]', '[C;X4][OX2H]', '[C;X4][OX2H]', '[C;X4][OX2H]'],  # Rule 4
        ['[n][CX3](=O)[OX2H1]'],  # Rule 5
        ['[C;X4](F)(F)(F)'],  # Rule 6
        ['[c][CX3H]=O'],  # Rule 7
        ['[C;X4][OX2][C;X4][OX2]'],  # Rule 8
        ['[c][nH][C;X4][NX3H2]'],  # Rule 9
        ['[c][NX3+](=O)[O-]'],  # Rule 10
        ['[c][CH3]'],  # Rule 11
        ['[c]1oc2ccccc2c1[CX3](=O)[OX2H1]'],  # Rule 12
        ['[C;X4][CX3](=O)[OX2H1]', '[C;X4][OX2H]'],  # Rule 13
        ['[c][SX2H]'],  # Rule 14
        ['[c][OX2][CH3]']  # Rule 15
    ]
    results = []
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            results.append([0] * len(rules))
            continue
        row = []
        for i, rule in enumerate(rules):
            try:
                if all(mol.HasSubstructMatch(Chem.MolFromSmarts(r)) for r in rule):
                    if i in [0, 1, 2, 3, 9, 11]:  # Rules with high prediction
                        row.append(1)
                    else:  # Rules with low prediction
                        row.append(-1)
                else:
                    row.append(0)
            except:
                row.append(0)
        results.append(row)
    df = pd.DataFrame(results, columns=[f'Rule {i+1}' for i in range(len(rules))])
    return df