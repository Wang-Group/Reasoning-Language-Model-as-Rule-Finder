def rule2matrix(smiles_list):
    rules = [
        {
            'name': 'Rule 1',
            # Aromatic carboxylic acids with para-substituted amino or hydroxyl groups
            'smarts': ['c1cc(ccc1C(=O)O)[NX3H2,OX2H]'],
            'prediction': 1
        },
        {
            'name': 'Rule 2',
            # Heteroaromatic carboxylic acids containing nitrogen in the ring
            'smarts': [
                '[nH]1cccc1C(=O)O',
                'c1ncccc1C(=O)O',
                'c1cnccc1C(=O)O',
                'c1c[nH]ccc1C(=O)O'
            ],
            'prediction': 1
        },
        {
            'name': 'Rule 3',
            # Aliphatic amino acids with free primary amino groups and chain lengths of 3 to 5 carbons
            'smarts': ['[NX3][CX4][CX4]{1,3}[CX3](=O)[O;H1,H0-]'],
            'exclude': ['[NX3][CX4]{4,}[CX3](=O)[O;H1,H0-]'],  # Exclude chains longer than 5 carbons
            'prediction': 1
        },
        {
            'name': 'Rule 4',
            # Modifiers with multiple hydroxyl groups near the carboxyl group
            'smarts': ['[CX4](O)[CX4](O)[CX3](=O)[O;H1,H0-]'],
            'prediction': 1
        },
        {
            'name': 'Rule 5',
            # Aliphatic thiol groups
            'smarts': ['[SX2H][CX4][CX2,CX4]{0,4}[CX3](=O)[O;H1,H0-]'],
            'exclude': ['[SX2H]-c1ccccc1'],  # Exclude aromatic thiols
            'prediction': 1
        },
        {
            'name': 'Rule 6',
            # Modifiers with aldehyde groups
            'smarts': ['[CX3H1](=O)[#6;!$([#6](=O))]'],
            'prediction': -1
        },
        {
            'name': 'Rule 7',
            # Modifiers with perfluoroalkyl chains
            'smarts': ['[CX4](F)(F)[CX4](F)(F)[CX3](=O)[O;H1,H0-]', '[CX4](F)(F)(F)'],
            'prediction': -1
        },
        {
            'name': 'Rule 8',
            # Modifiers where the amino group is acylated (forming an amide)
            'smarts': ['[NX3][CX3](=O)[#6]'],
            'prediction': -1
        },
        {
            'name': 'Rule 9',
            # Amino acids with bulky hydrophobic side chains lacking additional coordination sites
            'smarts': ['[NX3][CX4H]([CX3](=O)[O;H1,H0-])[CX4][CX4][#6]'],
            'exclude': ['[NX3][CX4H]([CX3](=O)[O;H1,H0-])[CX4][#6][!#6]'],  # Exclude side chains with heteroatoms
            'prediction': -1
        },
        {
            'name': 'Rule 10',
            # Modifiers with flexible ether linkages and terminal polar groups
            'smarts': ['[OX2][CX2,CX3]([OX2][CX2,CX3]){1,}[O,N;H1]'],
            'prediction': -1
        },
        {
            'name': 'Rule 11',
            # Aliphatic carboxylic acids with medium-length chains (6â€“8 carbons) and no additional polar groups
            'smarts': ['CCCCCC[CX3](=O)[O;H1,H0-]', 'CCCCCCC[CX3](=O)[O;H1,H0-]', 'CCCCCCCC[CX3](=O)[O;H1,H0-]'],
            'exclude': ['[!#6;!H]'],  # Exclude molecules with any heteroatoms beyond carboxyl group
            'prediction': 1
        },
        {
            'name': 'Rule 12',
            # Aromatic carboxylic acids with electron-withdrawing para-substituents
            'smarts': ['c1cc(C(=O)O)cc[c]1[F,Cl,Br,I,$(N(=O)=O),$(C(=O))]'],
            'prediction': 1
        },
        {
            'name': 'Rule 13',
            # Bulky conjugated systems containing coordinating heteroatoms
            'smarts': ['c1cc2c(c1)[c,n][c,n][c,n][c,n][c,n]2'],
            'prediction': 1
        },
        {
            'name': 'Rule 14',
            # Modifiers with keto groups adjacent to carboxylic acid in aliphatic chains
            'smarts': ['[CX3](=O)[CX2]{1,}[CX3](=O)'],
            'prediction': -1
        },
        {
            'name': 'Rule 15',
            # Thiol groups on aromatic rings
            'smarts': ['[SX2H]-c1ccccc1'],
            'prediction': -1
        }
    ]

    results = []
    rule_names = [rule['name'] for rule in rules]

    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        row = []
        if mol is None:
            row = [0]*len(rules)
        else:
            for rule in rules:
                try:
                    match = False
                    for smarts in rule['smarts']:
                        patt = Chem.MolFromSmarts(smarts)
                        if patt is None:
                            continue
                        if mol.HasSubstructMatch(patt):
                            match = True
                            break
                    if 'exclude' in rule and match:
                        for excl_smarts in rule['exclude']:
                            excl_patt = Chem.MolFromSmarts(excl_smarts)
                            if excl_patt is None:
                                continue
                            if mol.HasSubstructMatch(excl_patt):
                                match = False
                                break
                    if match:
                        row.append(rule['prediction'])
                    else:
                        row.append(0)
                except Exception as e:
                    # In case of any error, append 0
                    row.append(0)
        results.append(row)

    df = pd.DataFrame(results, columns=rule_names)
    return df