{
    "prefix": "This code converts a list of SMILES strings into a feature matrix using RDKit. Each column in the output DataFrame corresponds to a rule that describes certain structural features, and each row corresponds to a SMILES string from the input list. The code uses SMARTS patterns to perform substructure searches and applies the specified rules to determine if each molecule matches the criteria for each rule, assigning values of 1, 0, or -1 accordingly. The code handles possible errors in SMARTS patterns and molecule parsing gracefully, ensuring that the feature matrix is correctly generated.",
    "imports": "import pandas as pd\nfrom rdkit import Chem\nfrom rdkit.Chem import AllChem",
    "code": "def rule2matrix(smiles_list):\n    rules = [\n        # Rule 1\n        {\n            'name': 'Rule 1',\n            'smarts': [\n                # Electron-withdrawing groups at para position of aromatic carboxylic acid\n                'c1ccc(cc1C(=O)O)[NX3H2]',  # para-amino benzoic acid\n                'c1ccc(cc1C(=O)O)[N+](=O)[O-]',  # para-nitro benzoic acid\n                'c1ccc(cc1C(=O)O)CBr',  # para-bromomethyl benzoic acid\n            ],\n            'prediction': 1\n        },\n        # Rule 2\n        {\n            'name': 'Rule 2',\n            'smarts': [\n                # Aliphatic carboxylic acids with chain lengths of 4\u20138 carbons\n                '[CH3][CH2]{2,6}[CX3](=O)[OX2H1]'\n            ],\n            'exclude': [\n                # Exclude molecules with additional polar functional groups\n                '*[OX2H][!C](=O)',  # Hydroxyl groups not part of carboxylic acid\n                '[NX3;!$(N[C](=O)O)]',  # Amino groups not as part of amino acid\n                '[SX2H;!$(S[C](=O)O)]'  # Thiol groups not part of carboxylic acid\n            ],\n            'prediction': 1\n        },\n        # Rule 3\n        {\n            'name': 'Rule 3',\n            'smarts': [\n                # Amino acids with short aliphatic side chains (\u22645 carbons)\n                '[NX3H2][CHX4][CH2]{0,3}[CX3](=O)[OX2H1]'\n            ],\n            'exclude': [\n                '[c]',  # Exclude aromatic rings\n                '[NX3;!H2][CH2]',  # Exclude secondary or tertiary amines\n                '[OX2H][CH2][OX2H]',  # Exclude additional hydroxyl groups\n                '[SX2H]',  # Exclude thiol groups\n                '[CX3](=O)[OX2H1][CH2]{0,3}[OX2H]'  # Exclude polar groups in side chains\n            ],\n            'prediction': 1\n        },\n        # Rule 4\n        {\n            'name': 'Rule 4',\n            'smarts': [\n                # Carboxylic acids with adjacent multiple hydroxyl groups near the carboxyl group\n                '[CX3](=O)[OX2H1][CHX4]([OX2H])[CHX4]([OX2H])[CH2][OX2H]'\n            ],\n            'prediction': 1\n        },\n        # Rule 5a\n        {\n            'name': 'Rule 5a',\n            'smarts': [\n                # Short-chain aliphatic carboxylic acids with thiol groups\n                '[CX3](=O)[OX2H1][CH2]{1,3}[SX2H]'\n            ],\n            'prediction': 1\n        },\n        # Rule 5b\n        {\n            'name': 'Rule 5b',\n            'smarts': [\n                # Thiol group on aromatic ring\n                'c1ccc([SX2H])cc1C(=O)O'\n            ],\n            'prediction': -1\n        },\n        # Rule 6\n        {\n            'name': 'Rule 6',\n            'smarts': [\n                # Aromatic carboxylic acids with electron-donating groups at para position\n                'c1ccc(cc1C(=O)O)[OH,CH3,OCH3]'\n            ],\n            'prediction': -1\n        },\n        # Rule 7\n        {\n            'name': 'Rule 7',\n            'smarts': [\n                # Carboxylic acids with ether linkages in the aliphatic chain\n                '[CX3](=O)[OX2H1][CH2]{0,5}O[CH2]{1,5}[CX3](=O)[OX2H1]'\n            ],\n            'prediction': -1\n        },\n        # Rule 8\n        {\n            'name': 'Rule 8',\n            'smarts': [\n                # Perfluorinated carboxylic acids\n                '[CX3](=O)[OX2H1][CX4]([F])[CX2]([F])[CX2]([F])[CX3]([F])'\n            ],\n            'prediction': -1\n        },\n        # Rule 9\n        {\n            'name': 'Rule 9',\n            'smarts': [\n                # Heteroaromatic carboxylic acids\n                '[nH]1nccc1C(=O)O',  # Pyrazole-4-carboxylic acid\n                'n1cc(C(=O)O)ccc1',  # Pyridine-3-carboxylic acid\n                'c1cnc(C(=O)O)cn1'  # Pyrimidine-4-carboxylic acid\n            ],\n            'exclude': [\n                # Exclude bulky substituents causing steric hindrance\n                '*1***([#6;X4,#6;X3])(****1)[CX3](=O)[OX2H1]'\n            ],\n            'prediction': 1\n        },\n        # Rule 10a\n        {\n            'name': 'Rule 10a',\n            'smarts': [\n                # Amino acids with aromatic side chains containing nitrogen heterocycles\n                '[NX3H2][CHX4][CX3](=O)[OX2H1][CH2][c]1c[nH]c2c1cccc2'  # Tryptophan\n            ],\n            'prediction': 1\n        },\n        # Rule 10b\n        {\n            'name': 'Rule 10b',\n            'smarts': [\n                # Amino acids with aromatic hydrocarbon side chains\n                '[NX3H2][CHX4][CX3](=O)[OX2H1][CH2][c]1ccccc1'  # Phenylalanine\n            ],\n            'prediction': -1\n        },\n        # Rule 11a\n        {\n            'name': 'Rule 11a',\n            'smarts': [\n                # Dicarboxylic acids with additional coordinating groups (e.g., amino group)\n                '[NX3H2][CHX4][CH2][CX3](=O)[OX2H1]',  # Aspartic acid\n            ],\n            'prediction': 1\n        },\n        # Rule 11b\n        {\n            'name': 'Rule 11b',\n            'smarts': [\n                # Dicarboxylic acids without additional coordinating groups\n                '[CX3](=O)[OX2H1][CH2]{2,4}[CX3](=O)[OX2H1]'\n            ],\n            'exclude': [\n                '[NX3]',  # Exclude amino groups\n                '[OX2H][CH2][OX2H]',  # Exclude additional hydroxyl groups\n                '[SX2H]'  # Exclude thiol groups\n            ],\n            'prediction': -1\n        },\n        # Rule 12\n        {\n            'name': 'Rule 12',\n            'smarts': [\n                # Bulky substituents or acyl groups near coordinating sites\n                '[NX3][CX3](=O)'  # Acylated amino group\n            ],\n            'prediction': -1\n        }\n    ]\n\n    results = []\n    rule_names = [rule['name'] for rule in rules]\n\n    for smi in smiles_list:\n        mol = Chem.MolFromSmiles(smi)\n        row = []\n        if mol is None:\n            row = [0]*len(rules)\n        else:\n            for rule in rules:\n                try:\n                    match = False\n                    for smarts in rule['smarts']:\n                        try:\n                            patt = Chem.MolFromSmarts(smarts)\n                            if patt is None:\n                                continue\n                            if mol.HasSubstructMatch(patt):\n                                match = True\n                                break\n                        except Exception as e:\n                            # Handle SMARTS parsing errors\n                            match = False\n                            break\n                    if 'exclude' in rule and match:\n                        for excl_smarts in rule['exclude']:\n                            try:\n                                excl_patt = Chem.MolFromSmarts(excl_smarts)\n                                if excl_patt is None:\n                                    continue\n                                if mol.HasSubstructMatch(excl_patt):\n                                    match = False\n                                    break\n                            except Exception as e:\n                                # Handle SMARTS parsing errors\n                                continue\n                    if match:\n                        row.append(rule['prediction'])\n                    else:\n                        row.append(0)\n                except Exception as e:\n                    row.append(0)\n        results.append(row)\n\n    df = pd.DataFrame(results, columns=rule_names)\n    return df\n"
}