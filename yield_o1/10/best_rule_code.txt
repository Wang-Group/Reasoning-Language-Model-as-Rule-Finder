def rule2matrix(smiles_list):
    # Define the rules with their associated patterns and predictions
    # Import necessary RDKit functions
    from rdkit.Chem import rdMolDescriptors
    
    # Define SMARTS patterns used across rules
    carboxylic_acid = Chem.MolFromSmarts('[CX3](=O)[OX2H1]')
    amino_group = Chem.MolFromSmarts('[NX3;H2]')
    aromatic_carboxylic_acid = Chem.MolFromSmarts('[c][CX3](=O)[OX2H1]')
    thiol_group = Chem.MolFromSmarts('[SX2H]')
    hydroxyl_group = Chem.MolFromSmarts('[OX2H]')
    ether_linkage = Chem.MolFromSmarts('[CX4][OX2][CX4]')
    pyridine_ring = Chem.MolFromSmarts('n1ccccc1')
    
    rules = []
    
    # Define rule functions
    
    # Rule 1
    def rule1(mol):
        # Check for at least two carboxylic acid groups
        ca_matches = mol.GetSubstructMatches(carboxylic_acid)
        if len(ca_matches) < 2:
            return 0
        # Check for amino group
        if not mol.HasSubstructMatch(amino_group):
            return 0
        # Check if molecule is aliphatic (no aromatic atoms)
        if any(atom.GetIsAromatic() for atom in mol.GetAtoms()):
            return 0
        # Check if molecule is small (heavy atom count â‰¤ 10)
        if mol.GetNumHeavyAtoms() > 10:
            return 0
        return 1
    rules.append(('Rule 1', rule1))
    
    # Rule 2
    def rule2(mol):
        # Check for aromatic carboxylic acid
        if not mol.HasSubstructMatch(aromatic_carboxylic_acid):
            return 0
        # Check for para-substituted amino or hydroxyl group
        # Complex logic needed here
        # For simplicity, we can attempt to match para-aminobenzoic acid or para-hydroxybenzoic acid
        pattern1 = Chem.MolFromSmarts('c1ccc(cc1)[C](=O)[OH]')
        if not mol.HasSubstructMatch(pattern1):
            return 0
        # Now, check for amino or hydroxyl group para to carboxylic acid
        pattern2 = Chem.MolFromSmarts('c1cc([NX3;H2])ccc1C(=O)O')
        pattern3 = Chem.MolFromSmarts('c1cc([OX2H])ccc1C(=O)O')
        if mol.HasSubstructMatch(pattern2) or mol.HasSubstructMatch(pattern3):
            return 1
        return 0
    rules.append(('Rule 2', rule2))
    
    # Rule 3
    def rule3(mol):
        # Check for pyridine carboxylic acid
        pyridine_carboxylic_acid = Chem.MolFromSmarts('[n]1ccccc1C(=O)O')
        if mol.HasSubstructMatch(pyridine_carboxylic_acid):
            return 1
        return 0
    rules.append(('Rule 3', rule3))
    
    # Rule 4
    def rule4(mol):
        if not mol.HasSubstructMatch(thiol_group):
            return 0
        if not mol.HasSubstructMatch(carboxylic_acid):
            return 0
        # Molecule is aliphatic
        if any(atom.GetIsAromatic() for atom in mol.GetAtoms()):
            return 0
        # Molecule is small
        if mol.GetNumHeavyAtoms() > 10:
            return 0
        return 1
    rules.append(('Rule 4', rule4))
    
    # Rule 5
    def rule5(mol):
        # Check for carboxylic acid
        if not mol.HasSubstructMatch(carboxylic_acid):
            return 0
        # Molecule is aliphatic
        if any(atom.GetIsAromatic() for atom in mol.GetAtoms()):
            return 0
        # Count number of carbons in chain
        # Simplifying assumption: total number of carbons between 6 and 8
        num_carbons = sum(1 for atom in mol.GetAtoms() if atom.GetAtomicNum()==6)
        if num_carbons >=6 and num_carbons <=8:
            # Check for no additional polar groups beyond carboxylic acid
            num_o = sum(1 for atom in mol.GetAtoms() if atom.GetAtomicNum()==8)
            num_n = sum(1 for atom in mol.GetAtoms() if atom.GetAtomicNum()==7)
            num_s = sum(1 for atom in mol.GetAtoms() if atom.GetAtomicNum()==16)
            # Subtract oxygens in carboxylic acid
            num_o -=2
            if num_o == 0 and num_n == 0 and num_s == 0:
                return 1
        return 0
    rules.append(('Rule 5', rule5))
    
    # Rule 6
    def rule6(mol):
        # Check if molecule has long aliphatic chain (>6 carbons)
        num_carbons = sum(1 for atom in mol.GetAtoms() if atom.GetAtomicNum()==6 and not atom.GetIsAromatic())
        if num_carbons > 6:
            # Check for polar functional groups (OH or NH2)
            if mol.HasSubstructMatch(hydroxyl_group) or mol.HasSubstructMatch(amino_group):
                return -1
        return 0
    rules.append(('Rule 6', rule6))
    
    # Rule 7
    def rule7(mol):
        # Check for multiple ether linkages
        ether_matches = mol.GetSubstructMatches(ether_linkage)
        if len(ether_matches) >=2:
            # Check for carboxylic acid
            if mol.HasSubstructMatch(carboxylic_acid):
                return -1
        return 0
    rules.append(('Rule 7', rule7))
    
    # Rule 8
    def rule8(mol):
        # Check for aromatic carboxylic acid
        if not mol.HasSubstructMatch(aromatic_carboxylic_acid):
            return 0
        # Check for electron-withdrawing groups attached to ring
        # Formyl group attached to aromatic ring
        formyl_group = Chem.MolFromSmarts('[c][CX3H](=O)')
        if mol.HasSubstructMatch(formyl_group):
            # Exception: 4-nitrobenzoic acid
            nitrobenzoic_acid = Chem.MolFromSmarts('c1ccc(cc1)[N+](=O)[O-]')
            if mol.HasSubstructMatch(nitrobenzoic_acid):
                return 0
            return -1
        return 0
    rules.append(('Rule 8', rule8))
    
    # Rule 9
    def rule9(mol):
        # Check for multiple fluorine atoms
        num_F = sum(1 for atom in mol.GetAtoms() if atom.GetAtomicNum()==9)
        if num_F >=3:
            return -1
        return 0
    rules.append(('Rule 9', rule9))
    
    # Rule 10
    def rule10(mol):
        # Check for aromatic carboxylic acid
        if not mol.HasSubstructMatch(aromatic_carboxylic_acid):
            return 0
        # Check for bulky substituents near coordinating groups
        bulky_substituents = Chem.MolFromSmarts('[c][C](C)(C)C')
        if mol.HasSubstructMatch(bulky_substituents):
            return -1
        return 0
    rules.append(('Rule 10', rule10))
    
    # Rule 11
    def rule11(mol):
        # Check for amino acid backbone
        amino_acid = Chem.MolFromSmarts('[NX3;H2][CX4][CX3](=O)[OX2H1]')
        if not mol.HasSubstructMatch(amino_acid):
            return 0
        # Check for large hydrophobic side chain lacking heteroatoms
        # For simplicity, check for phenylalanine
        phenylalanine = Chem.MolFromSmarts('[NX3;H2][CX4][CH2][c]1[cH][cH][cH][cH][cH]1[C](=O)[OH]')
        if mol.HasSubstructMatch(phenylalanine):
            return -1
        # Exception: Tryptophan leads to high yield
        tryptophan = Chem.MolFromSmarts('[NX3;H2][CX4][CH2]c1c[nH]c2c1cccc2[C](=O)[OH]')
        if mol.HasSubstructMatch(tryptophan):
            return 0
        return 0
    rules.append(('Rule 11', rule11))
    
    # Rule 12
    def rule12(mol):
        # Check for nitrogen heterocycle attached to carboxyl group
        nitrogen_heterocycle_ca = Chem.MolFromSmarts('[n][c][C](=O)[OH]')
        if mol.HasSubstructMatch(nitrogen_heterocycle_ca):
            return 1
        return 0
    rules.append(('Rule 12', rule12))
    
    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule_name, rule_func in rules:
            try:
                res = rule_func(mol)
                row.append(res)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[rule_name for rule_name, _ in rules])
    return df