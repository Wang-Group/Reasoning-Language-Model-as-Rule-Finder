def rule2matrix(smiles_list):
    # Define SMARTS patterns
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    carboxylate_anion = '[CX3](=O)[O-]'
    pyridine_ring = 'n1ccccc1'
    amino_group = '[NX3;H2,H1]'
    alpha_amino_acid = '[NX3;H2,H1][CX4H]([#6])[CX3](=O)[OX1H1,O-]'
    aromatic_ring = 'c1ccccc1'
    ewg_groups = ['[NX3+](=O)[O-]', '[CX3](=O)[OX1H0-,OX2H1]', '[F,Cl,Br,I]', '[CX4][F,Cl,Br,I]', '[CX4](F)(F)F']
    edg_groups = ['[OX2H]', '[OX2][#6]', '[NX3;H2,H1][#6]']
    heterocyclic_nitrogen = '[n]'
    hydrophobic_side_chains = '[CX4][CX4][CX4][CX4][CX4]'
    thiol_group = '[SX2H]'
    within_three_carbons = '[#6]-[#6]-[#6]'
    long_aliphatic_chain = '[CX4H2][CX4H2][CX4H2][CX4H2][CX4H2]'
    aldehyde_ketone_adjacent_COOH = '[CX3](=O)[CX3](=O)[OX1H1,O-]'
    polyether_chain = '[#6][OX2][#6][OX2][#6]'
    para_hydroxy_aromatic = 'c1cc(O)ccc1CCCCC[C](=O)O'
    acetylated_amine = '[NX3][CX3](=O)[#6]'
    aromatic_thiol = 'c[SX2H]'
    oxygenated_heterocycles = '[o]1cccc1[CX3](=O)[OX1H1,O-]'
    substituted_amide_adjacent_COOH = '[CX3](=O)[NX3][CX3](=O)[OX1H1,O-]'
    
    # Compile patterns
    patterns = {
        'carboxylic_acid': Chem.MolFromSmarts(carboxylic_acid),
        'carboxylate_anion': Chem.MolFromSmarts(carboxylate_anion),
        'pyridine_ring': Chem.MolFromSmarts(pyridine_ring),
        'amino_group': Chem.MolFromSmarts(amino_group),
        'alpha_amino_acid': Chem.MolFromSmarts(alpha_amino_acid),
        'aromatic_ring': Chem.MolFromSmarts(aromatic_ring),
        'ewg_groups': [Chem.MolFromSmarts(s) for s in ewg_groups],
        'edg_groups': [Chem.MolFromSmarts(s) for s in edg_groups],
        'heterocyclic_nitrogen': Chem.MolFromSmarts(heterocyclic_nitrogen),
        'thiol_group': Chem.MolFromSmarts(thiol_group),
        'within_three_carbons': Chem.MolFromSmarts(within_three_carbons),
        'long_aliphatic_chain': Chem.MolFromSmarts(long_aliphatic_chain),
        'aldehyde_ketone_adjacent_COOH': Chem.MolFromSmarts(aldehyde_ketone_adjacent_COOH),
        'polyether_chain': Chem.MolFromSmarts(polyether_chain),
        'acetylated_amine': Chem.MolFromSmarts(acetylated_amine),
        'aromatic_thiol': Chem.MolFromSmarts(aromatic_thiol),
        'oxygenated_heterocycle': Chem.MolFromSmarts(oxygenated_heterocycles),
        'substituted_amide_adjacent_COOH': Chem.MolFromSmarts(substituted_amide_adjacent_COOH),
    }
    
    # Define rules
    rules = [
        {
            'number': 1,
            'description': 'Rule 1: Modifiers that are carboxylic acids containing a pyridine ring directly attached or connected via a short aliphatic chain (up to four carbons) give high yield (+1).',
            'function': rule1,
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Rule 2: Modifiers that are alpha-amino acids with side-chain carboxylic acid groups give high yield (+1).',
            'function': rule2,
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Rule 3: Modifiers that are aromatic carboxylic acids with electron-withdrawing groups at the para position give high yield (+1), while those with electron-donating groups give low yield (-1).',
            'function': rule3,
            'prediction': None  # Prediction decided in function
        },
        {
            'number': 4,
            'description': 'Rule 4: Modifiers that are amino acids with side chains containing heterocyclic nitrogen atoms give high yield (+1), while those with hydrophobic side chains lacking heteroatoms give low yield (-1).',
            'function': rule4,
            'prediction': None
        },
        {
            'number': 5,
            'description': 'Rule 5: Modifiers that are aliphatic carboxylic acids with amino or thiol groups within three carbons of the carboxyl group give high yield (+1), while those with these groups farther away (six or more carbons) give low yield (-1).',
            'function': rule5,
            'prediction': None
        },
        {
            'number': 6,
            'description': 'Rule 6: Modifiers that are polyhydroxy carboxylic acids (sugar acids) give high yield (+1).',
            'function': rule6,
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'Rule 7: Modifiers containing fluorinated alkyl chains or trifluoromethyl groups give low yield (-1).',
            'function': rule7,
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Rule 8: Modifiers that are aliphatic carboxylic acids without additional functional groups give high yield (+1), while those with hydroxy or amino groups distant from the carboxylic acid give low yield (-1).',
            'function': rule8,
            'prediction': None
        },
        {
            'number': 9,
            'description': 'Rule 9: Modifiers containing aldehyde or ketone groups adjacent to the carboxylic acid give low yield (-1).',
            'function': rule9,
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Rule 10: Modifiers with extensive ether linkages or polyether chains give low yield (-1).',
            'function': rule10,
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Rule 11: Modifiers that are aromatic carboxylic acids with para-hydroxy groups connected via a long aliphatic chain (five carbons or more) give high yield (+1), while those with shorter chains give low yield (-1).',
            'function': rule11,
            'prediction': None
        },
        {
            'number': 12,
            'description': 'Rule 12: Modifiers that are N-acetylated amino acids give low yield (-1).',
            'function': rule12,
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Rule 13: Modifiers that are aromatic carboxylic acids with thiol groups directly attached to the ring give low yield (-1).',
            'function': rule13,
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'Rule 14: Modifiers containing oxygenated heterocycles with carboxylic acid groups (e.g., benzofuran derivatives) give high yield (+1).',
            'function': rule14,
            'prediction': 1
        },
        {
            'number': 15,
            'description': 'Rule 15: Modifiers with amide linkages adjacent to the carboxylic acid where the amide nitrogen is further substituted (e.g., acetylated) give low yield (-1).',
            'function': rule15,
            'prediction': -1
        },
    ]
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = rule['function'](mol, patterns)
                if match:
                    if rule['prediction'] is not None:
                        row.append(rule['prediction'])
                    else:
                        row.append(match)  # The function returns the prediction
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df
    
# Define the functions for each rule

def rule1(mol, patterns):
    # Rule 1 implementation
    carboxy_matches = mol.GetSubstructMatches(patterns['carboxylic_acid'])
    pyridine_matches = mol.GetSubstructMatches(patterns['pyridine_ring'])
    if not carboxy_matches or not pyridine_matches:
        return False
    # Check for short path between carboxylic acid and pyridine ring
    for carboxy in carboxy_matches:
        for pyridine in pyridine_matches:
            path_length = Chem.GetShortestPath(mol, carboxy[0], pyridine[0])
            if len(path_length)-1 <= 6:  # Up to 4 carbons between them
                return True
    return False

def rule2(mol, patterns):
    # Rule 2 implementation
    if mol.HasSubstructMatch(patterns['alpha_amino_acid']):
        carboxy_matches = mol.GetSubstructMatches(patterns['carboxylic_acid'])
        if len(carboxy_matches) > 1:
            return True
    return False

def rule3(mol, patterns):
    # Rule 3 implementation
    if not mol.HasSubstructMatch(patterns['aromatic_ring']):
        return False
    if mol.HasSubstructMatch(patterns['carboxylic_acid']):
        for ewg in patterns['ewg_groups']:
            if mol.HasSubstructMatch(ewg):
                return 1
        for edg in patterns['edg_groups']:
            if mol.HasSubstructMatch(edg):
                return -1
    return False

def rule4(mol, patterns):
    # Rule 4 implementation
    if mol.HasSubstructMatch(patterns['alpha_amino_acid']):
        if mol.HasSubstructMatch(patterns['heterocyclic_nitrogen']):
            return 1
        elif mol.HasSubstructMatch(patterns['hydrophobic_side_chains']):
            return -1
    return False

def rule5(mol, patterns):
    # Rule 5 implementation
    if mol.HasSubstructMatch(patterns['carboxylic_acid']):
        amino_matches = mol.GetSubstructMatches(patterns['amino_group'])
        thiol_matches = mol.GetSubstructMatches(patterns['thiol_group'])
        func_groups = amino_matches + thiol_matches
        if not func_groups:
            return False
        carboxy = mol.GetSubstructMatches(patterns['carboxylic_acid'])[0][0]
        for fg in func_groups:
            path = Chem.GetShortestPath(mol, carboxy, fg[0])
            if len(path)-1 <= 3:
                return 1
            elif len(path)-1 >= 6:
                return -1
    return False

def rule6(mol, patterns):
    # Rule 6 implementation
    hydroxyl_groups = mol.GetSubstructMatches(patterns['hydroxyl_group'])
    if len(hydroxyl_groups) >= 3 and mol.HasSubstructMatch(patterns['carboxylic_acid']):
        return True
    return False

def rule7(mol, patterns):
    # Rule 7 implementation
    fluorinated_chain = Chem.MolFromSmarts('[CX4][F]')
    trifluoromethyl = Chem.MolFromSmarts('[CX4](F)(F)F')
    if mol.HasSubstructMatch(fluorinated_chain) or mol.HasSubstructMatch(trifluoromethyl):
        return True
    return False

def rule8(mol, patterns):
    # Rule 8 implementation
    if mol.HasSubstructMatch(patterns['carboxylic_acid']):
        if mol.HasSubstructMatch(patterns['amino_group']) or mol.HasSubstructMatch(patterns['hydroxyl_group']):
            long_chain = mol.HasSubstructMatch(patterns['long_aliphatic_chain'])
            if long_chain:
                return -1
            else:
                return 1
    return False

def rule9(mol, patterns):
    # Rule 9 implementation
    if mol.HasSubstructMatch(patterns['aldehyde_ketone_adjacent_COOH']):
        return True
    return False

def rule10(mol, patterns):
    # Rule 10 implementation
    if mol.HasSubstructMatch(patterns['polyether_chain']):
        return True
    return False

def rule11(mol, patterns):
    # Rule 11 implementation
    if mol.HasSubstructMatch(patterns['carboxylic_acid']) and mol.HasSubstructMatch(patterns['aromatic_ring']):
        hydroxy_matches = mol.GetSubstructMatches(Chem.MolFromSmarts('[c][OX2H]'))
        if hydroxy_matches:
            for match in hydroxy_matches:
                atom_idx = match[0]
                paths = Chem.rdmolops.GetShortestPath(mol, atom_idx, mol.GetSubstructMatches(patterns['carboxylic_acid'])[0][0])
                if len(paths)-1 >= 5:
                    return 1
                else:
                    return -1
    return False

def rule12(mol, patterns):
    # Rule 12 implementation
    if mol.HasSubstructMatch(patterns['acetylated_amine']):
        return True
    return False

def rule13(mol, patterns):
    # Rule 13 implementation
    if mol.HasSubstructMatch(patterns['aromatic_thiol']):
        return True
    return False

def rule14(mol, patterns):
    # Rule 14 implementation
    if mol.HasSubstructMatch(patterns['oxygenated_heterocycle']) and mol.HasSubstructMatch(patterns['carboxylic_acid']):
        return True
    return False

def rule15(mol, patterns):
    # Rule 15 implementation
    if mol.HasSubstructMatch(patterns['substituted_amide_adjacent_COOH']):
        return True
    return False
