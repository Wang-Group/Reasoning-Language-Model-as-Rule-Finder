def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and substructures
    # Rule 1: Î±-amino acids (amino and carboxyl groups on the same carbon)
    alpha_amino_acid = '[NX3H2][CX4H][CX3](=O)[OX2H1]'
    
    # Rule 2: Aromatic carboxylic acids with electron-withdrawing groups at para position
    aromatic_carboxylic_acid = '[c][CX3](=O)[OX2H1]'
    electron_withdrawing_group = '[c][F,Cl,Br,I,$(N(=O)=O),$(C(F)(F)F)]'
    
    # Rule 3: Heteroaromatic carboxylic acids containing pyridine nitrogen atoms
    heteroaromatic_nitrogen = '[n]'
    heteroaromatic_carboxylic_acid = '[n;a][a][a][a][a][CX3](=O)[OX2H1]'
    
    # Rule 4: Aliphatic carboxylic acids with long hydrocarbon chains (6 or more carbons)
    long_chain_carboxylic_acid = '[CX3](=O)[OX2H1][C][C][C][C][C][C]'
    
    # Rule 5: Hydroxyl groups adjacent to the carboxyl group
    adjacent_hydroxyl_carboxylic_acid = '[OX2H][CX4][CX3](=O)[OX2H1]'
    
    # Rule 6: Thiol groups within three carbons of the carboxyl group
    thiol_near_carboxylic_acid = '[#16X2H][CX4][CX4][CX3](=O)[OX2H1]'
    
    # Rule 7: Perfluoroalkyl groups attached to the carboxyl group
    perfluoroalkyl_carboxylic_acid = '[CX3](=O)[OX2H1][CX4](F)(F)F'
    
    # Rule 8: Aromatic carboxylic acids with aldehyde or ketone groups adjacent to the ring
    aromatic_carboxylic_with_adjacent_carbonyl = '[c][CX3](=O)[OX2H1].[c][CX3]=O'
    
    # Rule 9: Amide bonds involving the carboxyl group or N-acetylated amino acids
    amide_bond_carboxylic_acid = '[NX3][CX3](=O)[OX2H1]'
    n_acetylated_amino_acid = '[NX3][CX3](=O)[CX4][NX3][CX3](=O)[OX2H1]'
    
    # Rule 10: Aliphatic carboxylic acids with ether linkages and terminal polar groups
    ether_linkage_polar_terminal = '[CX3](=O)[OX2H1][CX4][OX2][CX4][OX2][CX4][OX2H1]'
    
    # Rule 11: Aromatic carboxylic acids with bulky substituents near coordinating sites
    bulky_substituents_near_carboxyl = '[c][CX3](=O)[OX2H1][c][c][c][c]'
    
    # Rule 12: Long-chain aliphatic carboxylic acids with polar groups distant from carboxyl
    long_chain_polar_distant = '[CX3](=O)[OX2H1][C][C][C][C][C][C][C][NX3H2,OX2H]'
    
    # Rule 13: Aromatic carboxylic acids with ortho-hydroxyl groups
    ortho_hydroxyl_aromatic_carboxylic_acid = '[c][c]([OX2H])[c][c][c][CX3](=O)[OX2H1]'
    
    # Rule 14: Functional groups capable of intramolecular interactions reducing coordination
    intramolecular_interactions = '[NX3][CX3](=O)[NX3][CX3](=O)[OX2H1]'
    
    # Rule 15: Chelating groups like adjacent carbonyl and hydroxyl groups
    chelating_groups = '[CX3](=O)[CX3](=O)[OX2H1]'
    
    # Compile SMARTS patterns
    patterns = {
        'Rule 1': {'pattern': Chem.MolFromSmarts(alpha_amino_acid), 'prediction': 1},
        'Rule 2': {'pattern': [Chem.MolFromSmarts(aromatic_carboxylic_acid), Chem.MolFromSmarts(electron_withdrawing_group)], 'prediction': 1},
        'Rule 3': {'pattern': [Chem.MolFromSmarts(heteroaromatic_carboxylic_acid), Chem.MolFromSmarts(heteroaromatic_nitrogen)], 'prediction': 1},
        'Rule 4': {'pattern': Chem.MolFromSmarts(long_chain_carboxylic_acid), 'prediction': 1},
        'Rule 5': {'pattern': Chem.MolFromSmarts(adjacent_hydroxyl_carboxylic_acid), 'prediction': 1},
        'Rule 6': {'pattern': Chem.MolFromSmarts(thiol_near_carboxylic_acid), 'prediction': 1},
        'Rule 7': {'pattern': Chem.MolFromSmarts(perfluoroalkyl_carboxylic_acid), 'prediction': -1},
        'Rule 8': {'pattern': Chem.MolFromSmarts(aromatic_carboxylic_with_adjacent_carbonyl), 'prediction': -1},
        'Rule 9': {'pattern': [Chem.MolFromSmarts(amide_bond_carboxylic_acid), Chem.MolFromSmarts(n_acetylated_amino_acid)], 'prediction': -1},
        'Rule 10': {'pattern': Chem.MolFromSmarts(ether_linkage_polar_terminal), 'prediction': -1},
        'Rule 11': {'pattern': Chem.MolFromSmarts(bulky_substituents_near_carboxyl), 'prediction': -1},
        'Rule 12': {'pattern': Chem.MolFromSmarts(long_chain_polar_distant), 'prediction': -1},
        'Rule 13': {'pattern': Chem.MolFromSmarts(ortho_hydroxyl_aromatic_carboxylic_acid), 'prediction': 1},
        'Rule 14': {'pattern': Chem.MolFromSmarts(intramolecular_interactions), 'prediction': -1},
        'Rule 15': {'pattern': Chem.MolFromSmarts(chelating_groups), 'prediction': 1}
    }
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(patterns))
            continue
        row = []
        for rule_name, rule in patterns.items():
            try:
                match = False
                if isinstance(rule['pattern'], list):
                    # For patterns that require multiple matches
                    sub_match = True
                    for pat in rule['pattern']:
                        if not mol.HasSubstructMatch(pat):
                            sub_match = False
                            break
                    match = sub_match
                else:
                    # Single pattern match
                    if mol.HasSubstructMatch(rule['pattern']):
                        match = True
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=patterns.keys())
    return df
