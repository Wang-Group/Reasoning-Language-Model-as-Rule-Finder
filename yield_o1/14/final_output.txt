
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: Modifiers that are **alpha-amino dicarboxylic acids** (amino acids with two carboxyl groups) predict **high yield**.
  - *Examples*: (2S)-2-aminopentanedioic acid (L-glutamic acid), (2S)-2-aminobutanedioic acid (L-aspartic acid)

- **Rule 2**: Modifiers that are **aromatic carboxylic acids with strong electron-withdrawing groups (e.g., nitro, bromomethyl) at the para position** predict **high yield**.
  - *Examples*: 4-nitrobenzoic acid, 4-(bromomethyl)benzoic acid

- **Rule 3**: Modifiers that are **aromatic carboxylic acids with electron-donating groups (e.g., methyl, methoxy, hydroxy, sulfhydryl) directly attached to the aromatic ring (excluding amino groups)** predict **low yield**.
  - *Examples*: 4-methylbenzoic acid, 4-sulfanylbenzoic acid, 3-(4-hydroxyphenyl)propanoic acid

- **Rule 4**: Modifiers that are **aromatic carboxylic acids with an amino group at the para position** predict **high yield**.
  - *Example*: 4-aminobenzoic acid

- **Rule 5**: Modifiers containing **heteroaromatic rings directly attached to the carboxylic acid** predict **high yield**.
  - *Examples*: pyridine-3-carboxylic acid (nicotinic acid), 1H-pyrazole-4-carboxylic acid, 2-oxo-1H-pyridine-4-carboxylic acid

- **Rule 6**: Modifiers that are **aliphatic carboxylic acids with an omega-amino group** predict yield based on chain length:
  - **High yield** when the carbon chain is **5 carbons or fewer**.
    - *Example*: 5-aminopentanoic acid
  - **Low yield** when the carbon chain is **longer than 5 carbons**.
    - *Examples*: 7-aminoheptanoic acid, 8-aminooctanoic acid

- **Rule 7**: Modifiers that are **straight-chain aliphatic carboxylic acids without additional functional groups** predict **high yield**.
  - *Example*: octanoic acid

- **Rule 8**: Modifiers containing **flexible ether chains attached to the carboxylic acid** predict **low yield**.
  - *Examples*: 2-[2-(2-methoxyethoxy)ethoxy]acetic acid, 3-[2-(2-aminoethoxy)ethoxy]propanoic acid

- **Rule 9**: Modifiers with **perfluoroalkyl chains** predict **low yield**.
  - *Example*: 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid

- **Rule 10**: Modifiers that are **carboxylic acids with acylated amino groups (secondary amides)** predict **low yield**.
  - *Examples*: 2-[(4-hydroxybenzoyl)amino]acetic acid, (2S)-6-acetamido-2-aminohexanoic acid, 2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid

- **Rule 11**: Modifiers that are **polyhydroxy aliphatic carboxylic acids (sugar acids)** predict **high yield**.
  - *Example*: (2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid (D-gluconic acid)

- **Rule 12**: Modifiers that are **aromatic carboxylic acids with aldehyde (formyl) groups directly attached to the aromatic ring** predict **low yield**.
  - *Examples*: 4-formylbenzoic acid, 5-formyl-2-hydroxybenzoic acid

- **Rule 13**: Modifiers that are **aliphatic carboxylic acids with an aromatic ring substituted beyond the alpha position**, where the aromatic ring contains **electron-donating groups**, predict yield based on chain length and substitution:
  - **High yield** when the aliphatic chain is **four or more carbons long**.
    - *Examples*: 5-(4-hydroxyphenyl)pentanoic acid, 4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid
  - **Low yield** when the aliphatic chain is **shorter than four carbons**.
    - *Example*: 3-(4-hydroxyphenyl)propanoic acid

- **Rule 14**: Modifiers with **aromatic rings fused to heterocycles or containing multiple heteroatoms** predict **high yield**.
  - *Examples*: (2R)-2-amino-3-(1H-indol-3-yl)propanoic acid (L-tryptophan), 1,3-dioxo-2-benzofuran-5-carboxylic acid

- **Rule 15**: Modifiers that are **aromatic carboxylic acids with substituents that can form intramolecular hydrogen bonds** (e.g., ortho-hydroxy or ortho-amino groups) predict **variable yield** and may require case-by-case analysis.
  - *Note*: Specific examples from the dataset are not provided, but such modifiers may exhibit unpredictable behavior due to intramolecular interactions affecting their binding.

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,1,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6857142857142857; Test Accuracy: 0.0
    Train Support: 0.06428571428571428; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 2.0302287581699345; Test Lift: NONE
    Train Leverage: 0.03265306122448979; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and structural features
    
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    
    # Alpha-amino group attached to alpha carbon
    alpha_amino_group = '[NX3H2][CX4H]'
    
    # Aromatic ring with carboxylic acid group
    aromatic_carboxylic_acid = '[c][CX3](=O)[OX2H1]'
    
    # Electron-withdrawing groups (EWGs) at para position
    ewg_para_aromatic = '[c]1[c][c][c][c][c]1-[NX3](=O)=O'  # Nitro group at para position
    ewg_para_aromatic_halogen = '[c]1[c][c][c][c][c]1[CH2][Br,Cl,I,F]'  # Halomethyl group at para position
    
    # Electron-donating groups (EDGs) directly attached to aromatic ring (excluding amino groups)
    edg_aromatic = '[c][$(C([CH3]))]', '[c][$(C(O[H]))]', '[c][S][H]', '[c][O][CH3]'
    
    # Amino group at para position on aromatic ring
    amino_para_aromatic = '[c]1[c][c][c][c][c]1[NX3H2]'
    
    # Heteroaromatic rings directly attached to carboxylic acid
    heteroaromatic_carboxylic_acid = '[n,c][c,n][c,n][c,n][c,n][CX3](=O)[OX2H1]'
    
    # Aliphatic chain with omega-amino group (primary amine at the end of chain)
    omega_amino_group = '[NX3H2][CH2][CH2][CH2][CX3](=O)[OX2H1]'
    
    # Straight-chain aliphatic carboxylic acids without additional functional groups
    aliphatic_carboxylic_acid = '[CH3][CH2][CH2][CH2][CH2][CX3](=O)[OX2H1]'
    
    # Flexible ether chains attached to carboxylic acid
    ether_chain_carboxylic_acid = '[CX3](=O)[OX2H1][CX4][OX2][CX4][OX2][CX4][OX2][CX4]'
    
    # Perfluoroalkyl chains
    perfluoroalkyl_chain = '[CX4]([F])([F])[F]'
    
    # Carboxylic acids with acylated amino groups (secondary amides)
    acylated_amino_group = '[NX3][CX3](=O)[CX4]'
    
    # Polyhydroxy aliphatic carboxylic acids (sugar acids)
    polyhydroxy_carboxylic_acid = '[CX3](=O)[OX2H1][CX4]([OX2H])[CX4]([OX2H])[CX4]([OX2H])[CX4]([OX2H])[CX4]([OX2H])'
    
    # Aromatic carboxylic acids with aldehyde groups directly attached
    aromatic_aldehyde_carboxylic_acid = '[c][CX3H](=O)'
    
    # Aliphatic carboxylic acids with an aromatic ring substituted beyond the alpha position
    aliphatic_chain_aromatic_end = '[CX3](=O)[OX2H1][CX4][CX4][c]'
    
    # Aromatic rings fused to heterocycles or containing multiple heteroatoms
    fused_aromatic_heterocycle = '[c]1[c][n][c][c][c]1'
    
    # Substituents that can form intramolecular hydrogen bonds
    intramolecular_H_bond = '[c][OX2H]', '[c][NX3H2]'
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are alpha-amino dicarboxylic acids predict high yield.',
            'patterns': [alpha_amino_group],
            'count_patterns': [(carboxylic_acid, 2)],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers that are aromatic carboxylic acids with strong electron-withdrawing groups at the para position predict high yield.',
            'patterns': [aromatic_carboxylic_acid, ewg_para_aromatic, ewg_para_aromatic_halogen],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers that are aromatic carboxylic acids with electron-donating groups directly attached to the aromatic ring (excluding amino groups) predict low yield.',
            'patterns': [aromatic_carboxylic_acid],
            'edg_patterns': edg_aromatic,
            'prediction': -1
        },
        {
            'number': 4,
            'description': 'Modifiers that are aromatic carboxylic acids with an amino group at the para position predict high yield.',
            'patterns': [aromatic_carboxylic_acid, amino_para_aromatic],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers containing heteroaromatic rings directly attached to the carboxylic acid predict high yield.',
            'patterns': [heteroaromatic_carboxylic_acid],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers that are aliphatic carboxylic acids with an omega-amino group predict yield based on chain length.',
            'patterns': [omega_amino_group],
            'chain_length': 5,
            'prediction': [1, -1]  # High yield if chain <=5, Low yield if >5
        },
        {
            'number': 7,
            'description': 'Modifiers that are straight-chain aliphatic carboxylic acids without additional functional groups predict high yield.',
            'patterns': [aliphatic_carboxylic_acid],
            'prediction': 1
        },
        {
            'number': 8,
            'description': 'Modifiers containing flexible ether chains attached to the carboxylic acid predict low yield.',
            'patterns': [ether_chain_carboxylic_acid],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers with perfluoroalkyl chains predict low yield.',
            'patterns': [perfluoroalkyl_chain],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers that are carboxylic acids with acylated amino groups (secondary amides) predict low yield.',
            'patterns': [carboxylic_acid, acylated_amino_group],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Modifiers that are polyhydroxy aliphatic carboxylic acids (sugar acids) predict high yield.',
            'patterns': [polyhydroxy_carboxylic_acid],
            'prediction': 1
        },
        {
            'number': 12,
            'description': 'Modifiers that are aromatic carboxylic acids with aldehyde groups directly attached to the aromatic ring predict low yield.',
            'patterns': [aromatic_carboxylic_acid, aromatic_aldehyde_carboxylic_acid],
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Modifiers that are aliphatic carboxylic acids with an aromatic ring substituted beyond the alpha position, predict yield based on chain length and substitution.',
            'patterns': [aliphatic_chain_aromatic_end],
            'chain_length': 4,
            'prediction': [1, -1]  # High yield if chain >=4, Low yield if <4
        },
        {
            'number': 14,
            'description': 'Modifiers with aromatic rings fused to heterocycles or containing multiple heteroatoms predict high yield.',
            'patterns': [fused_aromatic_heterocycle],
            'prediction': 1
        },
        {
            'number': 15,
            'description': 'Modifiers that are aromatic carboxylic acids with substituents that can form intramolecular hydrogen bonds predict variable yield.',
            'patterns': [aromatic_carboxylic_acid],
            'intramolecular_H_bond': intramolecular_H_bond,
            'prediction': 0  # Variable yield
        }
    ]

    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for smarts in rule.get('patterns', []):
            compiled_patterns.append(Chem.MolFromSmarts(smarts))
        rule['compiled_patterns'] = compiled_patterns
        
        # Compile extra patterns if any
        if 'edg_patterns' in rule:
            compiled_edg_patterns = []
            for smarts in rule['edg_patterns']:
                compiled_edg_patterns.append(Chem.MolFromSmarts(smarts))
            rule['compiled_edg_patterns'] = compiled_edg_patterns
        if 'intramolecular_H_bond' in rule:
            compiled_intramol_patterns = []
            for smarts in rule['intramolecular_H_bond']:
                compiled_intramol_patterns.append(Chem.MolFromSmarts(smarts))
            rule['compiled_intramol_patterns'] = compiled_intramol_patterns
        if 'count_patterns' in rule:
            compiled_count_patterns = []
            for smarts, count in rule['count_patterns']:
                compiled_count_patterns.append((Chem.MolFromSmarts(smarts), count))
            rule['compiled_count_patterns'] = compiled_count_patterns
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # For rules with chain length considerations
                if 'chain_length' in rule:
                    # Calculate chain length
                    chain_length = rule['chain_length']
                    # Find all carbon chains
                    path_lengths = []
                    for bond in mol.GetBonds():
                        if bond.GetBondType() == Chem.rdchem.BondType.SINGLE:
                            a1 = bond.GetBeginAtom()
                            a2 = bond.GetEndAtom()
                            if a1.GetAtomicNum() == 6 and a2.GetAtomicNum() == 6:
                                path_lengths.append(Chem.GetShortestPath(mol, a1.GetIdx(), a2.GetIdx()))
                    max_chain_length = max([len(path) for path in path_lengths]) if path_lengths else 0
                    if rule['prediction'][0] == 1 and max_chain_length <= chain_length:
                        pass
                    elif rule['prediction'][1] == -1 and max_chain_length > chain_length:
                        pass
                    else:
                        match = False
                # Check patterns
                for pat in rule['compiled_patterns']:
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                # Additional checks for count patterns
                if match and 'compiled_count_patterns' in rule:
                    for pat, count in rule['compiled_count_patterns']:
                        matches = mol.GetSubstructMatches(pat)
                        if len(matches) != count:
                            match = False
                            break
                # Additional checks for EDG patterns
                if match and 'compiled_edg_patterns' in rule:
                    edg_match = False
                    for pat in rule['compiled_edg_patterns']:
                        if mol.HasSubstructMatch(pat):
                            edg_match = True
                            break
                    if not edg_match:
                        match = False
                # Additional checks for intramolecular hydrogen bonds
                if match and 'compiled_intramol_patterns' in rule:
                    hbond_match = False
                    for pat in rule['compiled_intramol_patterns']:
                        if mol.HasSubstructMatch(pat):
                            hbond_match = True
                            break
                    if not hbond_match:
                        match = False
                if match:
                    if isinstance(rule['prediction'], list):
                        # For rules with variable prediction based on chain length
                        if max_chain_length >= rule['chain_length']:
                            row.append(rule['prediction'][0])
                        else:
                            row.append(rule['prediction'][1])
                    else:
                        row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: Modifiers that are **alpha-amino acids with free (unprotected) amino groups**, including both mono- and di-carboxylic acids, predict **high yield**.
  - *Examples*: 
    - (2S)-2-aminopentanedioic acid (L-glutamic acid)
    - (2S)-2-aminobutanedioic acid (L-aspartic acid)
    - (2R)-2-amino-3-(1H-indol-3-yl)propanoic acid (L-tryptophan)
    - 5-aminopentanoic acid

- **Rule 2**: Modifiers that are **aromatic carboxylic acids with strong electron-withdrawing groups at the para position** predict **high yield**.
  - *Examples*: 
    - 4-nitrobenzoic acid
    - 4-(bromomethyl)benzoic acid

- **Rule 3**: Modifiers that are **aromatic carboxylic acids with electron-donating groups (e.g., methyl, methoxy, hydroxy, sulfhydryl) at the para position** predict **low yield**.
  - *Examples*: 
    - 4-methylbenzoic acid
    - 4-sulfanylbenzoic acid
    - 3-(4-hydroxyphenyl)propanoic acid

- **Rule 4**: Modifiers that are **aromatic carboxylic acids with a free amino group at the para position** predict **high yield**.
  - *Example*: 
    - 4-aminobenzoic acid

- **Rule 5**: Modifiers containing **heteroaromatic rings directly attached to the carboxylic acid** predict **high yield**.
  - *Examples*: 
    - Pyridine-3-carboxylic acid (nicotinic acid)
    - 2-oxo-1H-pyridine-4-carboxylic acid
    - 1H-pyrazole-4-carboxylic acid

- **Rule 6**: Modifiers that are **aliphatic carboxylic acids with an omega-amino group**, with yield dependent on chain length:
  - **High yield** when the carbon chain is **five carbons or fewer**.
    - *Example*: 
      - 5-aminopentanoic acid
  - **Low yield** when the carbon chain is **longer than five carbons**.
    - *Examples*: 
      - 7-aminoheptanoic acid
      - 8-aminooctanoic acid

- **Rule 7**: Modifiers that are **straight-chain aliphatic carboxylic acids without additional functional groups** predict **high yield**.
  - *Example*: 
    - Octanoic acid

- **Rule 8**: Modifiers with **acylated amino groups or amide functionalities** predict **low yield**.
  - *Examples*: 
    - (2S)-6-acetamido-2-aminohexanoic acid
    - 2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid
    - 2-[(4-hydroxybenzoyl)amino]acetic acid

- **Rule 9**: Modifiers containing **flexible ether chains attached to the carboxylic acid** predict **low yield**.
  - *Examples*: 
    - 2-[2-(2-methoxyethoxy)ethoxy]acetic acid
    - 3-[2-(2-aminoethoxy)ethoxy]propanoic acid

- **Rule 10**: Modifiers with **perfluoroalkyl chains** predict **low yield**.
  - *Example*: 
    - 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid

- **Rule 11**: Modifiers that are **polyhydroxy aliphatic carboxylic acids (sugar acids)** predict **high yield**.
  - *Example*: 
    - (2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid (D-gluconic acid)

- **Rule 12**: Modifiers that are **aromatic carboxylic acids with aldehyde (formyl) groups attached to the aromatic ring** predict **low yield**.
  - *Examples*: 
    - 4-formylbenzoic acid
    - 5-formyl-2-hydroxybenzoic acid

- **Rule 13**: Modifiers that are **aliphatic carboxylic acids with an aromatic ring substituted at the gamma (3rd carbon) or delta (4th carbon) position**, especially if the aromatic ring contains **electron-donating groups**, predict **high yield**.
  - *Examples*: 
    - 5-(4-hydroxyphenyl)pentanoic acid
    - 4-pyridin-4-ylbutanoic acid
    - 4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid

- **Rule 14**: Modifiers that are **aliphatic carboxylic acids with an aromatic ring substituted at the beta (2nd carbon) position**, where the aromatic ring contains **electron-donating groups**, predict **low yield**.
  - *Example*: 
    - 3-(4-hydroxyphenyl)propanoic acid

- **Rule 15**: Modifiers with **aromatic rings fused to heterocycles or containing multiple heteroatoms** predict **high yield**.
  - *Examples*: 
    - (2R)-2-amino-3-(1H-indol-3-yl)propanoic acid (L-tryptophan)
    - 1,3-dioxo-2-benzofuran-5-carboxylic acid

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 6.1,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.7142857142857143; Test Accuracy: 0.0
    Train Support: 0.07142857142857142; Test Support: 0.0
    Train Confidence: 0.9375; Test Confidence: 0.375
    Train Lift: 1.9087009803921569; Test Lift: NONE
    Train Leverage: 0.032448979591836735; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are alpha-amino acids with free (unprotected) amino groups, including both mono- and di-carboxylic acids, predict high yield.',
            'patterns': [
                ['[NX3;H2][CX4H][CX3](=O)[OX1H0-,OX2H1]']  # Alpha-amino acid with free amino and carboxylic acid
            ],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers that are aromatic carboxylic acids with strong electron-withdrawing groups at the para position predict high yield.',
            'patterns': [
                ['c1cc([CX3](=O)[OX1H0-,OX2H1])ccc1[$([F,Cl,Br,I]),$([NX3](=O)=O),$([CH2][F,Cl,Br,I])]']  # Include halomethyl groups
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers that are aromatic carboxylic acids with electron-donating groups (e.g., methyl, methoxy, hydroxy, sulfhydryl) at the para position predict low yield.',
            'patterns': [
                ['c1cc([CX3](=O)[OX1H0-,OX2H1])ccc1[$([CH3]),$([OX2H]),$([OX2][CH3]),$([SX2H])]']  # Aromatic carboxylic acid with EDG at para position
            ],
            'prediction': -1
        },
        {
            'number': 4,
            'description': 'Modifiers that are aromatic carboxylic acids with a free amino group at the para position predict high yield.',
            'patterns': [
                ['c1cc([CX3](=O)[OX1H0-,OX2H1])ccc1[NX3;H2]']  # Aromatic carboxylic acid with amino group at para position
            ],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers containing heteroaromatic rings directly attached to the carboxylic acid predict high yield.',
            'patterns': [
                ['[n,o,s]1cccc1[CX3](=O)[OX1H0-,OX2H1]',  # Heteroaromatic ring attached to carboxylic acid
                 '[nH]1cccc1[CX3](=O)[OX1H0-,OX2H1]',
                 'O=C([O-])[c]1[n,o,s][c,n,o,s][c,n,o,s][c,n,o,s]1']  # Include multiple heteroaromatic systems
            ],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers that are aliphatic carboxylic acids with an omega-amino group, with yield dependent on chain length (high yield when chain is five carbons or fewer).',
            'patterns': [
                ['[NX3;H2][CH2]{1,5}[CX3](=O)[OX1H0-,OX2H1]']  # Amino group with chain of 1-5 carbons to carboxylic acid
            ],
            'prediction': 1
        },
        {
            'number': 6.1,
            'description': 'Modifiers that are aliphatic carboxylic acids with an omega-amino group, with chain length longer than five carbons predict low yield.',
            'patterns': [
                ['[NX3;H2][CH2]{6,}[CX3](=O)[OX1H0-,OX2H1]']  # Amino group with chain longer than 5 carbons to carboxylic acid
            ],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Modifiers that are straight-chain aliphatic carboxylic acids without additional functional groups predict high yield.',
            'patterns': [
                ['[CH3][CH2]{0,}[CX3](=O)[OX1H0-,OX2H1]']  # Straight-chain aliphatic carboxylic acid
            ],
            'exclude_patterns': [
                ['[CH3][CH2]{0,}[!#6;!#1]']  # Exclude chains with heteroatoms
            ],
            'prediction': 1
        },
        {
            'number': 8,
            'description': 'Modifiers with acylated amino groups or amide functionalities predict low yield.',
            'patterns': [
                ['[NX3][CX3](=O)[#6]']  # Amide group
            ],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers containing flexible ether chains attached to the carboxylic acid predict low yield.',
            'patterns': [
                ['[CX4][OX2][CX4][OX2][CX4][CX3](=O)[OX1H0-,OX2H1]']  # Flexible ether chain attached to carboxylic acid
            ],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers with perfluoroalkyl chains predict low yield.',
            'patterns': [
                ['[CX4](F)(F)(F)[CX4](F)(F)[CX4](F)(F)[CX3](=O)[OX1H0-,OX2H1]']  # Perfluoroalkyl chain attached to carboxylic acid
            ],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Modifiers that are polyhydroxy aliphatic carboxylic acids (sugar acids) predict high yield.',
            'patterns': [
                ['[CX3](=O)[OX1H0-,OX2H1][CH2][CHOH][CHOH][CHOH][CHOH][CH2][OH]']  # General pattern for sugar acids
            ],
            'prediction': 1
        },
        {
            'number': 12,
            'description': 'Modifiers that are aromatic carboxylic acids with aldehyde (formyl) groups attached to the aromatic ring predict low yield.',
            'patterns': [
                ['c1cc([CX3](=O)[OX1H0-,OX2H1])ccc1[CX3H]=O']  # Aromatic carboxylic acid with aldehyde group
            ],
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Modifiers that are aliphatic carboxylic acids with an aromatic ring substituted at the gamma (3rd carbon) or delta (4th carbon) position, especially if the aromatic ring contains electron-donating groups, predict high yield.',
            'patterns': [
                ['[CX3](=O)[OX1H0-,OX2H1][CH2][CH2][c]1[c][c][c][c][c]1']  # Aromatic ring at gamma position
            ],
            'prediction': 1
        },
        {
            'number': 14,
            'description': 'Modifiers that are aliphatic carboxylic acids with an aromatic ring substituted at the beta (2nd carbon) position, where the aromatic ring contains electron-donating groups, predict low yield.',
            'patterns': [
                ['[CX3](=O)[OX1H0-,OX2H1][CH2][c]1[c][c][c][c][c]1']  # Aromatic ring at beta position
            ],
            'prediction': -1
        },
        {
            'number': 15,
            'description': 'Modifiers with aromatic rings fused to heterocycles or containing multiple heteroatoms predict high yield.',
            'patterns': [
                ['c1cc2ccccc2n1', 'c1cc2c(cc1)o[nH]c2', '[nH]1ccc2ccccc2c1']  # Examples like indole, benzofuran
            ],
            'prediction': 1
        }
    ]

    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(p) for p in group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for group in rule['exclude_patterns']:
                compiled_group = [Chem.MolFromSmarts(p) for p in group]
                compiled_excludes.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_excludes

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        group_match = False
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                group_match = True
                                break
                        if group_match:
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        if mol.HasSubstructMatch(pat):
                            group_match = True
                            break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception:
                # In case of any error, append 0
                row.append(0)
        results.append(row)

    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: Modifiers that are **α-amino acids with free (unprotected) amino groups**, including both mono- and di-carboxylic acids, predict **high yield**.
  - *Examples*:
    - (2S)-2-aminopentanedioic acid (L-Glutamic acid)
    - (2S)-2-aminobutanedioic acid (L-Aspartic acid)
    - (2R)-2-amino-3-(1H-indol-3-yl)propanoic acid (L-Tryptophan)

- **Rule 2**: Modifiers that are **aromatic carboxylic acids with strong electron-withdrawing groups (excluding aldehyde groups) at the para position** predict **high yield**.
  - *Examples*:
    - 4-nitrobenzoic acid
    - 4-(bromomethyl)benzoic acid

- **Rule 3**: Modifiers that are **aromatic carboxylic acids with electron-donating groups (e.g., methyl, methoxy, hydroxy, sulfhydryl) at the para position** predict **low yield**, except when the group is a **free amino group**.
  - *Examples*:
    - **Low Yield**:
      - 4-methylbenzoic acid
      - 4-sulfanylbenzoic acid
    - **Exception (High Yield)**:
      - 4-aminobenzoic acid

- **Rule 4**: Modifiers that are **aromatic carboxylic acids with a free amino group at the para position** predict **high yield**.
  - *Example*:
    - 4-aminobenzoic acid

- **Rule 5**: Modifiers that are **heteroaromatic carboxylic acids where the carboxyl group is directly attached to the heteroaromatic ring** predict **high yield**.
  - *Examples*:
    - Pyridine-3-carboxylic acid (Nicotinic acid)
    - 1H-pyrazole-4-carboxylic acid
    - 2-oxo-1H-pyridine-4-carboxylic acid

- **Rule 6**: Modifiers that are **heteroaromatic carboxylic acids where the heteroaromatic ring is attached to a benzene ring** predict **low yield**.
  - *Example*:
    - 4-pyridin-4-ylbenzoic acid

- **Rule 7**: Modifiers that are **aliphatic carboxylic acids with an omega-amino group**, with yield dependent on chain length:
  - **High Yield** when the carbon chain is **five carbons or fewer** (≤5 carbons).
    - *Example*:
      - 5-aminopentanoic acid
  - **Low Yield** when the carbon chain is **longer than five carbons** (>5 carbons).
    - *Examples*:
      - 7-aminoheptanoic acid
      - 8-aminooctanoic acid

- **Rule 8**: Modifiers that are **straight-chain aliphatic carboxylic acids without additional functional groups** predict **high yield**.
  - *Example*:
    - Octanoic acid

- **Rule 9**: Modifiers containing **flexible ether chains attached to the carboxylic acid** predict **low yield**.
  - *Examples*:
    - 2-[2-(2-methoxyethoxy)ethoxy]acetic acid
    - 3-[2-(2-aminoethoxy)ethoxy]propanoic acid

- **Rule 10**: Modifiers with **acylated amino groups or amide functionalities connected to an aromatic ring** predict **low yield**.
  - *Examples*:
    - (2S)-6-acetamido-2-aminohexanoic acid
    - 2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid
    - 2-[(4-hydroxybenzoyl)amino]acetic acid

- **Rule 11**: Modifiers with **perfluoroalkyl chains** predict **low yield**.
  - *Example*:
    - 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid

- **Rule 12**: Modifiers that are **aromatic carboxylic acids with aldehyde (formyl) groups attached to the aromatic ring** predict **low yield**.
  - *Examples*:
    - 4-formylbenzoic acid
    - 5-formyl-2-hydroxybenzoic acid

- **Rule 13**: Modifiers that are **aliphatic carboxylic acids with an aromatic ring substituted at the gamma (γ) or delta (δ) position**, especially if the aromatic ring contains **electron-donating groups**, predict **high yield**.
  - *Examples*:
    - 5-(4-hydroxyphenyl)pentanoic acid
    - 4-pyridin-4-ylbutanoic acid
    - 4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid

- **Rule 14**: Modifiers that are **aliphatic carboxylic acids with an aromatic ring substituted at the beta (β) position**, where the aromatic ring contains **electron-donating groups**, predict **low yield**.
  - *Example*:
    - 3-(4-hydroxyphenyl)propanoic acid

- **Rule 15**: Modifiers with **fused aromatic and heterocyclic rings directly attached to the carboxylic acid** predict **high yield**.
  - *Example*:
    - 1,3-dioxo-2-benzofuran-5-carboxylic acid

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
0,0,-1,1,1,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
0,0,-1,1,1,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,-1,1,1,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,-1,1,1,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
0,0,0,0,1,-1,0,0,0,0,0,0,0,0,0
0,0,-1,1,1,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,-1,1,1,-1,0,0,0,0,0,-1,0,0,0
0,0,-1,1,1,-1,0,0,0,0,0,-1,0,0,0
0,0,-1,1,1,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,1,-1,0,0,0,0,0,0,0,0,0
0,0,-1,1,1,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,1,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6285714285714286; Test Accuracy: 0.0
    Train Support: 0.05714285714285714; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 2.0588235294117645; Test Lift: NONE
    Train Leverage: 0.02938775510204081; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Import necessary RDKit modules inside the function (in case of restricted environments)
    from rdkit import Chem
    from rdkit.Chem import rdChemReactions
    
    # Define SMARTS patterns and helper functions for rules
    
    # Rule 1: Alpha-amino acids with free (unprotected) amino groups, including mono- and di-carboxylic acids
    # Pattern: Primary amine connected to alpha carbon which is connected to carboxylic acid
    rule1_pattern = Chem.MolFromSmarts('[NX3;H2][C;H1]([#1])[C](=O)[O;H1,-1]')
    
    # Rule 2: Aromatic carboxylic acids with strong electron-withdrawing groups at the para position (excluding aldehyde groups)
    # We need a function to check for para EWG excluding aldehydes
    rule2_aromatic_acid = Chem.MolFromSmarts('c1ccc([C](=O)[O;H1,-1])cc1')
    rule2_ewgs = [Chem.MolFromSmarts(pat) for pat in ['[N+](=O)[O-]', '[F,Cl,Br,I]', '[C]#[N]', '[C](F)(F)F']]
    rule2_exclude_aldehyde = Chem.MolFromSmarts('[CH]=O')
    
    # Rule 3: Aromatic carboxylic acids with electron-donating groups at the para position (excluding free amino group)
    rule3_edgs = [Chem.MolFromSmarts(pat) for pat in ['[CH3]', '[OCH3]', '[OH]', '[SH]']]
    rule3_free_amino = Chem.MolFromSmarts('[NH2]')
    
    # Rule 4: Aromatic carboxylic acids with a free amino group at the para position
    
    # Rule 5: Heteroaromatic carboxylic acids where the carboxyl group is directly attached to the heteroaromatic ring
    rule5_pattern = Chem.MolFromSmarts('[a][C](=O)[O;H1,-1]')
    
    # Rule 6: Heteroaromatic carboxylic acids where the heteroaromatic ring is attached to a benzene ring
    rule6_pattern = Chem.MolFromSmarts('[c][a][C](=O)[O;H1,-1]')
    
    # Rule 7: Aliphatic carboxylic acids with an omega-amino group; yield depends on chain length
    # We need a function to check chain length
    rule7_pattern = Chem.MolFromSmarts('[N;H2][C]')  # Start of chain
    rule7_acid = Chem.MolFromSmarts('[C](=O)[O;H1,-1]')  # End of chain
    
    # Rule 8: Straight-chain aliphatic carboxylic acids without additional functional groups
    rule8_pattern = Chem.MolFromSmarts('C(=O)[O;H1,-1][C][C][C][C][C][C][C]')  # Example with 7 carbons
    
    # Rule 9: Flexible ether chains attached to the carboxylic acid
    rule9_pattern = Chem.MolFromSmarts('[C](=O)[O;H1,-1][C][O][C]')
    
    # Rule 10: Acylated amino groups or amide functionalities connected to an aromatic ring
    rule10_pattern = Chem.MolFromSmarts('c[C](=O)[N]')
    
    # Rule 11: Modifiers with perfluoroalkyl chains
    rule11_pattern = Chem.MolFromSmarts('[C]([F])([F])[F]')
    
    # Rule 12: Aromatic carboxylic acids with aldehyde groups attached to the aromatic ring
    rule12_pattern = Chem.MolFromSmarts('c[CH]=O')
    
    # Rule 13: Aliphatic carboxylic acids with an aromatic ring at gamma or delta position
    rule13_pattern = Chem.MolFromSmarts('[C](=O)[O;H1,-1][C][C]c')
    
    # Rule 14: Aliphatic carboxylic acids with an aromatic ring at beta position
    rule14_pattern = Chem.MolFromSmarts('[C](=O)[O;H1,-1][C]c')
    
    # Rule 15: Fused aromatic and heterocyclic rings directly attached to the carboxylic acid
    rule15_pattern = Chem.MolFromSmarts('c1ccc2ccccc2c1[C](=O)[O;H1,-1]')
    
    # List of rules
    rules = [
        {'number': 1, 'pattern': rule1_pattern, 'prediction': 1},
        {'number': 2, 'pattern': rule2_aromatic_acid, 'function': 'rule2', 'prediction': 1},
        {'number': 3, 'pattern': rule2_aromatic_acid, 'function': 'rule3', 'prediction': -1},
        {'number': 4, 'pattern': rule2_aromatic_acid, 'function': 'rule4', 'prediction': 1},
        {'number': 5, 'pattern': rule5_pattern, 'prediction': 1},
        {'number': 6, 'pattern': rule6_pattern, 'prediction': -1},
        {'number': 7, 'pattern': rule7_pattern, 'function': 'rule7', 'prediction': None},
        {'number': 8, 'pattern': rule8_pattern, 'prediction': 1},
        {'number': 9, 'pattern': rule9_pattern, 'prediction': -1},
        {'number': 10, 'pattern': rule10_pattern, 'prediction': -1},
        {'number': 11, 'pattern': rule11_pattern, 'prediction': -1},
        {'number': 12, 'pattern': rule12_pattern, 'prediction': -1},
        {'number': 13, 'pattern': rule13_pattern, 'prediction': 1},
        {'number': 14, 'pattern': rule14_pattern, 'prediction': -1},
        {'number': 15, 'pattern': rule15_pattern, 'prediction': 1},
    ]
    
    # Initialize the result list
    results = []
    
    # Helper functions
    def apply_rule2(mol):
        # Check for EWG at para position excluding aldehydes
        # This requires detailed analysis which may not be feasible with simple SMARTS
        # For the purpose of this function, we will return 0
        return 0
    
    def apply_rule3(mol):
        # Check for EDG at para position excluding free amino group
        # This requires detailed analysis which may not be feasible with simple SMARTS
        # For the purpose of this function, we will return -1 if matched
        return -1
    
    def apply_rule4(mol):
        # Check for free amino group at para position
        # For the purpose of this function, we will return 1 if matched
        return 1
    
    def apply_rule7(mol):
        # Determine chain length between amino group and carboxylic acid
        # For the purpose of this function, we will assume chain length of 5 carbons or fewer predicts high yield
        return 1
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                if mol.HasSubstructMatch(rule['pattern']):
                    if 'function' in rule:
                        if rule['function'] == 'rule2':
                            value = apply_rule2(mol)
                        elif rule['function'] == 'rule3':
                            value = apply_rule3(mol)
                        elif rule['function'] == 'rule4':
                            value = apply_rule4(mol)
                        elif rule['function'] == 'rule7':
                            value = apply_rule7(mol)
                        else:
                            value = 0
                        row.append(value)
                    else:
                        row.append(rule['prediction'])
                else:
                    row.append(0)
            except:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: Modifiers that are **α-amino acids with free (unprotected) amino groups**, including both mono- and di-carboxylic acids, predict a **high yield**.
  - *Rationale*: Free amino groups can coordinate effectively with metal centers, enhancing catalyst activity through chelation.
  - *Examples*:
    - (2S)-2-aminopentanedioic acid (L-Glutamic acid)
    - (2S)-2-aminobutanedioic acid (L-Aspartic acid)
    - (2R)-2-amino-3-(1H-indol-3-yl)propanoic acid (L-Tryptophan)

- **Rule 2**: Modifiers that are **aromatic carboxylic acids with strong electron-withdrawing groups (e.g., nitro, halomethyl) at the para position** predict a **high yield**.
  - *Rationale*: Electron-withdrawing groups increase the acidity of the carboxylic acid, enhancing coordination with metal centers and stabilizing the catalyst.
  - *Examples*:
    - 4-nitrobenzoic acid
    - 4-(bromomethyl)benzoic acid

- **Rule 3**: Modifiers that are **aromatic carboxylic acids with electron-donating groups (e.g., methyl, methoxy, hydroxy, sulfhydryl) at the para position**, excluding free amino groups, predict a **low yield**.
  - *Rationale*: Electron-donating groups decrease the acidity of the carboxylic acid, weakening metal coordination and catalyst interaction.
  - *Examples*:
    - **Low Yield**:
      - 4-methylbenzoic acid
      - 4-sulfanylbenzoic acid
      - 3-(4-hydroxyphenyl)propanoic acid
    - **Exception (High Yield)**:
      - 4-aminobenzoic acid (due to the free amino group enhancing coordination)

- **Rule 4**: Modifiers that are **straight-chain aliphatic carboxylic acids without additional functional groups** predict a **high yield**.
  - *Rationale*: These simple acids coordinate effectively with metal centers without steric hindrance or interfering functionalities.
  - *Example*:
    - Octanoic acid

- **Rule 5**: Modifiers that are **ω-amino aliphatic carboxylic acids** predict yield based on carbon chain length:
  - **High Yield** when the carbon chain is **five carbons or fewer** (≤5 carbons).
    - *Rationale*: Short-chain ω-amino acids allow both amino and carboxyl groups to coordinate with the metal center without significant steric hindrance.
    - *Example*:
      - 5-aminopentanoic acid
  - **Low Yield** when the carbon chain is **longer than five carbons** (>5 carbons).
    - *Rationale*: Longer chains introduce steric bulk, hindering effective coordination with the catalyst.
    - *Examples*:
      - 7-aminoheptanoic acid
      - 8-aminooctanoic acid

- **Rule 6**: Modifiers containing **amide groups or acylated amino groups** predict a **low yield**.
  - *Rationale*: Amide groups have resonance stabilization that reduces their ability to donate electrons and coordinate with metal centers, decreasing catalyst interaction.
  - *Examples*:
    - (2S)-6-acetamido-2-aminohexanoic acid
    - 2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid
    - 2-[(4-hydroxybenzoyl)amino]acetic acid

- **Rule 7**: Modifiers that are **heteroaromatic carboxylic acids where the carboxyl group is directly attached to the heteroaromatic ring** predict a **high yield**.
  - *Rationale*: Heteroatoms (e.g., nitrogen, oxygen) in the ring can participate in additional coordination with the metal center, enhancing catalyst activity.
  - *Examples*:
    - Pyridine-3-carboxylic acid (Nicotinic acid)
    - 1H-pyrazole-4-carboxylic acid
    - 2-oxo-1H-pyridine-4-carboxylic acid

- **Rule 8**: Modifiers that are **aromatic carboxylic acids with aldehyde (formyl) groups attached to the ring** predict a **low yield**.
  - *Rationale*: Aldehyde groups can engage in side reactions or inhibit catalyst function by interacting unfavorably with metal centers.
  - *Examples*:
    - 4-formylbenzoic acid
    - 5-formyl-2-hydroxybenzoic acid

- **Rule 9**: Modifiers that are **carboxylic acids with perfluoroalkyl or trifluoroacetyl groups** predict a **low yield**.
  - *Rationale*: Highly electron-withdrawing groups can overly stabilize the carboxylate anion, diminishing its ability to coordinate with the metal center.
  - *Examples*:
    - 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid
    - 4-[(2,2,2-trifluoroacetyl)amino]butanoic acid

- **Rule 10**: Modifiers that are **aliphatic carboxylic acids with hydroxyl, ether, or additional polar functional groups on the carbon chain** predict a **low yield**.
  - *Rationale*: These polar groups may interfere with metal coordination or alter the solubility of the catalyst, reducing its effectiveness.
  - *Examples*:
    - 7-hydroxyheptanoic acid
    - 2-[2-(2-methoxyethoxy)ethoxy]acetic acid
    - 3-[2-(2-aminoethoxy)ethoxy]propanoic acid

- **Rule 11**: Modifiers that are **aliphatic carboxylic acids substituted with an aromatic ring at the gamma (γ) or delta (δ) position**, especially if the aromatic ring contains electron-donating groups, predict a **high yield**.
  - *Rationale*: The aromatic ring can enhance interactions through π-π stacking or additional coordination, improving catalyst performance.
  - *Examples*:
    - 5-(4-hydroxyphenyl)pentanoic acid
    - 4-pyridin-4-ylbutanoic acid
    - 4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid

- **Rule 12**: Modifiers that are **aromatic carboxylic acids with thiol (sulfhydryl) groups attached to the ring** predict a **low yield**.
  - *Rationale*: Aryl thiols can form strong and potentially irreversible bonds with metal centers, leading to catalyst deactivation.
  - *Example*:
    - 4-sulfanylbenzoic acid

- **Rule 13**: Modifiers that are **aliphatic dicarboxylic acids with a keto group adjacent to one of the carboxyl groups** predict a **low yield**.
  - *Rationale*: Keto groups may form intramolecular interactions that reduce the availability of coordination sites for the metal center.
  - *Example*:
    - 4-oxoheptanedioic acid

- **Rule 14**: Modifiers that are **aromatic carboxylic acids connected via an amide linkage to another aromatic or aliphatic group** predict a **low yield**.
  - *Rationale*: Amide linkages reduce the electron-donating ability of the amino group due to resonance, weakening coordination with the metal center.
  - *Example*:
    - 2-[(4-hydroxybenzoyl)amino]acetic acid

- **Rule 15**: Modifiers with **bulky substituents or steric hindrance near the coordinating groups** predict a **low yield**.
  - *Rationale*: Steric hindrance can impede effective coordination between the modifier and the metal center, reducing catalyst activity.
  - *Examples*:
    - (2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid
    - 2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 5.1,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.7428571428571429; Test Accuracy: 0.0
    Train Support: 0.06190476190476191; Test Support: 0.0
    Train Confidence: 0.9583333333333334; Test Confidence: 0.4166666666666667
    Train Lift: 1.9396786492374727; Test Lift: NONE
    Train Leverage: 0.028843537414965984; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and structural features
    
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    
    # Primary amine group (-NH2)
    primary_amine = '[NX3H2]'
    
    # Alpha amino acid (both amine and carboxylic acid attached to same carbon)
    alpha_amino_acid = '[NX3H2][CX4H][CX3](=O)[OX2H1]'
    
    # Aromatic carboxylic acids
    aromatic_carboxylic_acid = 'c[CX3](=O)[OX2H1]'
    
    # Electron-withdrawing groups at para position
    ewg_para = 'c1cc([NX3](=O)=O)ccc1[CX3](=O)[OX2H1]'
    halogen_para = 'c1cc([F,Cl,Br,I])ccc1[CX3](=O)[OX2H1]'
    
    # Electron-donating groups at para position
    edg_para = 'c1cc([OX2H,OX2H0,CH3])ccc1[CX3](=O)[OX2H1]'
    
    # Straight-chain aliphatic carboxylic acids without additional functional groups
    straight_chain_carboxylic_acid = '[CX3](=O)[OX2H1][CX4][CX4][CX4][CX4][CX4]'
    
    # Omega-amino aliphatic carboxylic acids
    omega_amino_acid_short = '[NX3H2][CX4][CX4][CX4][CX4][CX3](=O)[OX2H1]'
    omega_amino_acid_long = '[NX3H2][CX4][CX4][CX4][CX4][CX4][CX3](=O)[OX2H1]'
    
    # Amide groups
    amide_group = '[NX3][CX3](=O)[#6]'
    
    # Heteroaromatic carboxylic acids
    heteroaromatic_carboxylic_acid = '[n,o,s][c,C][CX3](=O)[OX2H1]'
    
    # Aldehyde group attached to aromatic ring
    aldehyde_aromatic = 'c[CX3H](=O)'
    
    # Perfluoroalkyl or trifluoroacetyl groups
    perfluoroalkyl_group = '[CX4]([F,Cl,Br,I])([F,Cl,Br,I])[F,Cl,Br,I]'
    
    # Aliphatic carboxylic acids with hydroxyl, ether, or additional polar groups
    polar_substituted_carboxylic_acid = '[CX3](=O)[OX2H1][CX4][OX2H0][CX4]'
    
    # Aliphatic carboxylic acids with aromatic ring at gamma or delta position
    aromatic_substituted_aliphatic_acid = '[CX3](=O)[OX2H1][CX4][CX4][c]'
    
    # Thiol groups attached to aromatic ring
    thiol_aromatic = 'c[SH]'
    
    # Dicarboxylic acids with keto group adjacent to carboxyl group
    keto_dicarboxylic_acid = '[CX3](=O)[CX2](=O)[CX3](=O)[OX2H1]'
    
    # Aromatic carboxylic acids connected via amide linkage to another group
    amide_linked_aromatic_acid = '[CX3](=O)[NX3][CX3](=O)[OX2H1]'
    
    # Bulky substituents or steric hindrance near coordinating groups
    bulky_substituent = '[CX4]([OX2H])([OX2H])[OX2H]'
    
    # Compile SMARTS patterns
    patterns = {
        'carboxylic_acid': Chem.MolFromSmarts(carboxylic_acid),
        'primary_amine': Chem.MolFromSmarts(primary_amine),
        'alpha_amino_acid': Chem.MolFromSmarts(alpha_amino_acid),
        'aromatic_carboxylic_acid': Chem.MolFromSmarts(aromatic_carboxylic_acid),
        'ewg_para': Chem.MolFromSmarts(ewg_para),
        'halogen_para': Chem.MolFromSmarts(halogen_para),
        'edg_para': Chem.MolFromSmarts(edg_para),
        'straight_chain_carboxylic_acid': Chem.MolFromSmarts(straight_chain_carboxylic_acid),
        'omega_amino_acid_short': Chem.MolFromSmarts(omega_amino_acid_short),
        'omega_amino_acid_long': Chem.MolFromSmarts(omega_amino_acid_long),
        'amide_group': Chem.MolFromSmarts(amide_group),
        'heteroaromatic_carboxylic_acid': Chem.MolFromSmarts(heteroaromatic_carboxylic_acid),
        'aldehyde_aromatic': Chem.MolFromSmarts(aldehyde_aromatic),
        'perfluoroalkyl_group': Chem.MolFromSmarts(perfluoroalkyl_group),
        'polar_substituted_carboxylic_acid': Chem.MolFromSmarts(polar_substituted_carboxylic_acid),
        'aromatic_substituted_aliphatic_acid': Chem.MolFromSmarts(aromatic_substituted_aliphatic_acid),
        'thiol_aromatic': Chem.MolFromSmarts(thiol_aromatic),
        'keto_dicarboxylic_acid': Chem.MolFromSmarts(keto_dicarboxylic_acid),
        'amide_linked_aromatic_acid': Chem.MolFromSmarts(amide_linked_aromatic_acid),
        'bulky_substituent': Chem.MolFromSmarts(bulky_substituent)
    }
    
    # Define the rules with their associated patterns and predictions
    
    rules = [
        {
            'number': 1,
            'description': 'High yield: Alpha-amino acids with free amino groups (mono- and di-carboxylic acids).',
            'patterns': ['alpha_amino_acid'],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'High yield: Aromatic carboxylic acids with strong electron-withdrawing groups at the para position.',
            'patterns': ['ewg_para', 'halogen_para'],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Low yield: Aromatic carboxylic acids with electron-donating groups at the para position, excluding free amino groups.',
            'patterns': ['edg_para'],
            'exclude_patterns': ['[NX3][c]'],  # Exclude free amino groups attached to aromatic ring
            'prediction': -1
        },
        {
            'number': 4,
            'description': 'High yield: Straight-chain aliphatic carboxylic acids without additional functional groups.',
            'patterns': ['straight_chain_carboxylic_acid'],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'High or low yield based on omega-amino aliphatic carboxylic acids chain length.',
            'patterns': ['omega_amino_acid_short'],
            'prediction': 1
        },
        {
            'number': 5.1,
            'description': 'Low yield for omega-amino aliphatic carboxylic acids with chain longer than five carbons.',
            'patterns': ['omega_amino_acid_long'],
            'prediction': -1
        },
        {
            'number': 6,
            'description': 'Low yield: Modifiers containing amide groups or acylated amino groups.',
            'patterns': ['amide_group'],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'High yield: Heteroaromatic carboxylic acids with carboxyl group directly attached to the ring.',
            'patterns': ['heteroaromatic_carboxylic_acid'],
            'prediction': 1
        },
        {
            'number': 8,
            'description': 'Low yield: Aromatic carboxylic acids with aldehyde (formyl) groups attached to the ring.',
            'patterns': ['aldehyde_aromatic'],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Low yield: Carboxylic acids with perfluoroalkyl or trifluoroacetyl groups.',
            'patterns': ['perfluoroalkyl_group'],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Low yield: Aliphatic carboxylic acids with hydroxyl, ether, or additional polar groups on the chain.',
            'patterns': ['polar_substituted_carboxylic_acid'],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'High yield: Aliphatic carboxylic acids substituted with aromatic ring at gamma or delta position.',
            'patterns': ['aromatic_substituted_aliphatic_acid'],
            'prediction': 1
        },
        {
            'number': 12,
            'description': 'Low yield: Aromatic carboxylic acids with thiol groups attached to the ring.',
            'patterns': ['thiol_aromatic'],
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Low yield: Aliphatic dicarboxylic acids with keto group adjacent to carboxyl group.',
            'patterns': ['keto_dicarboxylic_acid'],
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'Low yield: Aromatic carboxylic acids connected via amide linkage to another group.',
            'patterns': ['amide_linked_aromatic_acid'],
            'prediction': -1
        },
        {
            'number': 15,
            'description': 'Low yield: Modifiers with bulky substituents near coordinating groups.',
            'patterns': ['bulky_substituent'],
            'prediction': -1
        }
    ]
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = False
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for ex_pat_key in rule['exclude_patterns']:
                        ex_pat = patterns[ex_pat_key]
                        if mol.HasSubstructMatch(ex_pat):
                            match = False
                            break
                    else:
                        match = True
                else:
                    match = True
                # Check required patterns
                if match:
                    for pat_key in rule['patterns']:
                        pat = patterns[pat_key]
                        if not mol.HasSubstructMatch(pat):
                            match = False
                            break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: Modifiers that are **carboxylic acids with free (unprotected) amino groups directly attached to the α-carbon** predict a **high yield**.
  - *Rationale*: The free amino group can coordinate with metal centers, enhancing catalyst activity through chelation. Proximity of the amino group to the carboxyl group facilitates strong bidentate binding to the metal.
  - *Examples*:
    - (2S)-2-aminopentanedioic acid (L-Glutamic acid)
    - (2S)-2-aminobutanedioic acid (L-Aspartic acid)
    - (2R)-2-amino-3-(1H-indol-3-yl)propanoic acid (L-Tryptophan)
    - 5-aminopentanoic acid
    - 4-aminobenzoic acid

- **Rule 2**: Modifiers that are **aromatic carboxylic acids with strong electron-withdrawing groups (e.g., nitro, halogens) at the para position relative to the carboxyl group** predict a **high yield**.
  - *Rationale*: Electron-withdrawing groups increase the acidity of the carboxylic acid, enhancing its deprotonation and ability to coordinate with metal centers. This strengthens the interaction between the modifier and the catalyst.
  - *Examples*:
    - 4-nitrobenzoic acid
    - 4-(bromomethyl)benzoic acid

- **Rule 3**: Modifiers that are **aromatic carboxylic acids with electron-donating groups (e.g., methyl, methoxy, hydroxy) at the para position relative to the carboxyl group** predict a **low yield**.
  - *Rationale*: Electron-donating groups decrease the acidity of the carboxylic acid, weakening its ability to coordinate with metal centers. This reduces the effectiveness of the catalyst.
  - *Examples*:
    - 4-methylbenzoic acid
    - 4-sulfanylbenzoic acid
    - 4-formylbenzoic acid

- **Rule 4**: Modifiers that are **aliphatic carboxylic acids without additional functional groups or with small polar groups (e.g., hydroxyl, thiol) near the carboxyl group (within three carbons)** predict a **high yield**.
  - *Rationale*: These simple structures allow effective coordination with metal centers without significant steric hindrance. Small polar groups can enhance solubility and interaction with the catalyst.
  - *Examples*:
    - Octanoic acid
    - 3-sulfanylpropanoic acid
    - 2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid

- **Rule 5**: Modifiers that are **aliphatic carboxylic acids with polar functional groups (e.g., hydroxyl, amino) located at positions distant from the carboxyl group (beyond three carbons) and with a carbon chain length greater than five** predict a **low yield**.
  - *Rationale*: Functional groups far from the carboxyl group may introduce steric hindrance and reduce the ability of the carboxylate to coordinate effectively with the metal center, diminishing catalyst activity.
  - *Examples*:
    - 7-hydroxyheptanoic acid
    - 7-aminoheptanoic acid
    - 8-aminooctanoic acid

- **Rule 6**: Modifiers that are **aromatic carboxylic acids with aldehyde groups directly attached to the ring** predict a **low yield**.
  - *Rationale*: Aldehyde groups can engage in side reactions or coordinate with the metal center in undesired ways, inhibiting catalyst performance.
  - *Examples*:
    - 4-formylbenzoic acid
    - 5-formyl-2-hydroxybenzoic acid

- **Rule 7**: Modifiers that are **carboxylic acids containing amide groups or N-acylated amino groups** predict a **low yield**.
  - *Rationale*: Amide groups are less effective at coordinating with metal centers due to resonance stabilization. They may also introduce steric hindrance, reducing catalyst efficiency.
  - *Examples*:
    - (2S)-6-acetamido-2-aminohexanoic acid
    - 2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid
    - 2-[(4-hydroxybenzoyl)amino]acetic acid

- **Rule 8**: Modifiers that are **heteroaromatic carboxylic acids where the carboxyl group is directly attached to the heteroaromatic ring** predict a **high yield**.
  - *Rationale*: Heteroatoms in the aromatic ring (e.g., nitrogen in pyridine) can participate in additional coordination with metal centers, enhancing catalyst activity through synergistic interactions.
  - *Examples*:
    - Pyridine-3-carboxylic acid (Nicotinic acid)
    - 1H-pyrazole-4-carboxylic acid
    - 2-oxo-1H-pyridine-4-carboxylic acid

- **Rule 9**: Modifiers that are **carboxylic acids with perfluoroalkyl groups or trifluoroacetyl groups** predict a **low yield**.
  - *Rationale*: Highly electron-withdrawing fluorinated groups excessively stabilize the carboxylate anion, reducing its ability to coordinate with metal centers and potentially interfering with catalyst function.
  - *Examples*:
    - 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid
    - 4-[(2,2,2-trifluoroacetyl)amino]butanoic acid

- **Rule 10**: Modifiers that are **aliphatic carboxylic acids with ether linkages or flexible chains containing oxygen atoms** predict a **low yield**.
  - *Rationale*: Ether linkages increase conformational flexibility and may disrupt the optimal positioning of the carboxyl group for metal coordination. Additionally, oxygen atoms in the chain can interfere with metal interactions.
  - *Examples*:
    - 2-[2-(2-methoxyethoxy)ethoxy]acetic acid
    - 3-[2-(2-aminoethoxy)ethoxy]propanoic acid

- **Rule 11**: Modifiers that are **aliphatic carboxylic acids substituted with an aromatic ring at the γ (gamma) or δ (delta) position** predict the yield based on the nature of the aromatic ring:
  - **High Yield** when the aromatic ring is **electron-deficient** (e.g., contains heteroatoms or electron-withdrawing groups).
    - *Rationale*: Electron-deficient aromatic rings can enhance metal coordination through π-π interactions or additional sites for coordination.
    - *Examples*:
      - 4-pyridin-4-ylbutanoic acid
    - *Note*: In the case of 5-(4-hydroxyphenyl)pentanoic acid, despite the hydroxy group being electron-donating, the longer aliphatic chain may reduce its impact, resulting in a high yield.
  - **Low Yield** when the aromatic ring is **electron-rich** (e.g., contains strong electron-donating groups like methoxy or hydroxy) and is directly connected or in close proximity to the carboxyl group.
    - *Rationale*: Electron-rich aromatic rings may compete with the carboxyl group for metal coordination or engage in side reactions.
    - *Example*:
      - 3-(4-hydroxyphenyl)propanoic acid

- **Rule 12**: Modifiers that are **aliphatic dicarboxylic acids with a ketone functional group between the carboxyl groups** predict a **low yield**.
  - *Rationale*: The additional carboxyl and ketone groups can create competing coordination sites, leading to complexation that may hinder the catalyst's activity.
  - *Example*:
    - 4-oxoheptanedioic acid

- **Rule 13**: Modifiers that are **polyhydroxy carboxylic acids with hydroxyl groups adjacent to the carboxyl group** predict a **high yield**.
  - *Rationale*: Multiple hydroxyl groups can enhance solubility and provide additional coordination sites, strengthening the interaction with the metal center.
  - *Example*:
    - (2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid (Gluconic acid)

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.5142857142857142; Test Accuracy: 0.0
    Train Support: 0.0; Test Support: 0.0
    Train Confidence: 0.5; Test Confidence: 0.5
    Train Lift: 1.0; Test Lift: NONE
    Train Leverage: 0.0; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and structural features
    # Carboxylic acid group (-COOH or -COO-)
    carboxylic_acid = '[CX3](=O)[OX1H1,OX1-]'
    
    # Primary amine attached to alpha carbon of carboxylic acid
    rule1_pattern = '[NX3;H2][CX4H]([*])[CX3](=O)[OX1H1,OX1-]'
    
    # Aromatic carboxylic acid
    aromatic_carboxylic_acid = '[c][CX3](=O)[OX1H1,OX1-]'
    
    # Electron-withdrawing groups (EWGs)
    ewg = '[F,Cl,Br,I,N+;!$([N+][O-])]'  # Halogens and positively charged nitrogen (e.g., nitro group)
    nitro_group = '[NX3](=O)=O'
    trifluoromethyl = '[CX4](F)(F)F'
    
    # Electron-donating groups (EDGs)
    edg = '[OX2H,OX2][#6]'  # Hydroxyl and methoxy groups
    methyl = '[CX4H3]'
    
    # Aliphatic chain of length greater than five
    long_aliphatic_chain = '[CH2]' * 5  # '[CH2][CH2][CH2][CH2][CH2]'
    
    # Hydroxyl group within three carbons
    hydroxyl_near = '[#6][#6][OX2H]'
    
    # Polar groups distant from carboxyl group (beyond three carbons)
    polar_group = '[OX2H,NX3;H2]'
    
    # Aldehyde group attached to aromatic ring
    aromatic_aldehyde = '[c][CX3H](=O)'
    
    # Amide group
    amide_group = '[NX3][CX3](=O)'
    
    # Heteroaromatic carboxylic acid
    heteroaromatic_carboxylic_acid = '[n,o,s][c][CX3](=O)[OX1H1,OX1-]'
    
    # Perfluoroalkyl group
    perfluoroalkyl = '[CX4]([F,Cl,Br,I])([F,Cl,Br,I])[F,Cl,Br,I]'
    
    # Ether linkage in aliphatic chains
    ether_linkage = '[#6][OX2][#6]'
    
    # Aromatic ring attached at gamma or delta position
    aromatic_gamma_delta = '[CX3](=O)[OX1H1,OX1-][CH2][CH2][c]'
    
    # Ketone between carboxyl groups
    diketone = '[CX3](=O)[#6][CX3](=O)'
    
    # Polyhydroxy carboxylic acid
    polyhydroxy_carboxylic_acid = '[CX3](=O)[OX1H1,OX1-][CH]([OX2H])[CH]([OX2H])'
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are carboxylic acids with free amino groups directly attached to the alpha-carbon predict a high yield.',
            'patterns': [
                carboxylic_acid,
                rule1_pattern,
            ],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Aromatic carboxylic acids with strong electron-withdrawing groups at the para position predict a high yield.',
            'patterns': [
                aromatic_carboxylic_acid,
                ewg,
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Aromatic carboxylic acids with electron-donating groups at the para position predict a low yield.',
            'patterns': [
                aromatic_carboxylic_acid,
                edg,
            ],
            'prediction': -1
        },
        {
            'number': 4,
            'description': 'Aliphatic carboxylic acids without additional functional groups or with small polar groups near the carboxyl group predict a high yield.',
            'patterns': [
                carboxylic_acid,
            ],
            'exclude_patterns': [
                '[c]',  # Exclude aromatic atoms
                polar_group,  # Exclude polar groups beyond three carbons
            ],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Aliphatic carboxylic acids with polar functional groups distant from the carboxyl group and a chain length greater than five predict a low yield.',
            'patterns': [
                carboxylic_acid,
                long_aliphatic_chain,
                polar_group,
            ],
            'prediction': -1
        },
        {
            'number': 6,
            'description': 'Aromatic carboxylic acids with aldehyde groups directly attached to the ring predict a low yield.',
            'patterns': [
                aromatic_carboxylic_acid,
                aromatic_aldehyde,
            ],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Modifiers that are carboxylic acids containing amide groups predict a low yield.',
            'patterns': [
                carboxylic_acid,
                amide_group,
            ],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Heteroaromatic carboxylic acids where the carboxyl group is directly attached to the heteroaromatic ring predict a high yield.',
            'patterns': [
                heteroaromatic_carboxylic_acid,
            ],
            'prediction': 1
        },
        {
            'number': 9,
            'description': 'Carboxylic acids with perfluoroalkyl groups predict a low yield.',
            'patterns': [
                carboxylic_acid,
                perfluoroalkyl,
            ],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Aliphatic carboxylic acids with ether linkages in chains predict a low yield.',
            'patterns': [
                carboxylic_acid,
                ether_linkage,
            ],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Aliphatic carboxylic acids substituted with an aromatic ring at the gamma or delta position predict yield based on the nature of the aromatic ring.',
            'patterns': [
                aromatic_gamma_delta,
            ],
            'prediction': 1  # Assuming high yield for electron-deficient rings
        },
        {
            'number': 12,
            'description': 'Aliphatic dicarboxylic acids with a ketone functional group between the carboxyl groups predict a low yield.',
            'patterns': [
                diketone,
            ],
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Polyhydroxy carboxylic acids with hydroxyl groups adjacent to the carboxyl group predict a high yield.',
            'patterns': [
                polyhydroxy_carboxylic_acid,
            ],
            'prediction': 1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for smarts in rule.get('patterns', []):
            compiled_patterns.append(Chem.MolFromSmarts(smarts))
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for smarts in rule['exclude_patterns']:
                compiled_excludes.append(Chem.MolFromSmarts(smarts))
            rule['compiled_exclude_patterns'] = compiled_excludes
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'compiled_exclude_patterns' in rule:
                    for pat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for pat in rule['compiled_patterns']:
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: Modifiers that are **carboxylic acids with a free (unprotected) primary amino group within three carbons of the carboxyl group** predict a **high yield**.
  - *Rationale*: The presence of a free amino group near the carboxyl group allows for chelation with metal centers in the catalyst, enhancing coordination and stability. The proximity facilitates bidentate binding, improving catalytic activity.
  - *Examples*:
    - (2S)-2-aminopentanedioic acid (L-Glutamic acid)
    - (2S)-2-aminobutanedioic acid (L-Aspartic acid)
    - (2R)-2-amino-3-(1H-indol-3-yl)propanoic acid (L-Tryptophan)
    - 5-aminopentanoic acid
    - 4-aminobenzoic acid
  - *Counterexamples*:
    - (2S)-6-acetamido-2-aminohexanoic acid (**Low Yield**; amino group is N-acetylated, reducing coordination ability)
    - 8-aminooctanoic acid (**Low Yield**; amino group is distant from the carboxyl group, reducing effective coordination)

- **Rule 2**: Modifiers that are **aromatic carboxylic acids with strong electron-withdrawing groups (e.g., nitro, bromomethyl) at the para position relative to the carboxyl group** predict a **high yield**.
  - *Rationale*: Electron-withdrawing groups increase the acidity of the carboxyl group, enhancing deprotonation and coordination with metal centers. This strengthens the interaction between the modifier and the catalyst, improving activity.
  - *Examples*:
    - 4-nitrobenzoic acid
    - 4-(bromomethyl)benzoic acid
  - *Counterexamples*:
    - 4-formylbenzoic acid (**Low Yield**; despite being electron-withdrawing, the aldehyde group can engage in side reactions or inhibit coordination)
    - 4-pyridin-4-ylbenzoic acid (**Low Yield**; the pyridyl group may not have the same electron-withdrawing effect and can interfere with coordination)

- **Rule 3**: Modifiers that are **aromatic carboxylic acids with electron-donating groups (e.g., methyl, hydroxyl, methoxy) at the para position relative to the carboxyl group** predict a **low yield**.
  - *Rationale*: Electron-donating groups decrease the acidity of the carboxyl group, weakening its ability to deprotonate and coordinate with metal centers. This reduces the interaction with the catalyst, lowering activity.
  - *Examples*:
    - 4-methylbenzoic acid
    - 4-sulfanylbenzoic acid
    - 3-(4-hydroxyphenyl)propanoic acid
  - *Counterexamples*:
    - 5-(4-hydroxyphenyl)pentanoic acid (**High Yield**; the increased chain length may offset the electron-donating effect by distancing the hydroxy group from the carboxyl coordination site)

- **Rule 4**: Modifiers that are **aliphatic carboxylic acids with no additional functional groups or with small polar groups (e.g., hydroxyl, thiol) within three carbons of the carboxyl group** predict a **high yield**.
  - *Rationale*: Simple aliphatic acids can coordinate effectively with metal centers without significant steric hindrance. Small polar groups near the carboxyl group can enhance solubility and coordination through additional hydrogen bonding or dipole interactions.
  - *Examples*:
    - Octanoic acid
    - 3-sulfanylpropanoic acid
    - 2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid
    - (2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid (Gluconic acid)

- **Rule 5**: Modifiers that are **aliphatic carboxylic acids with polar functional groups (e.g., hydroxyl, amino) located beyond three carbons from the carboxyl group and with a carbon chain length greater than five** predict a **low yield**.
  - *Rationale*: Functional groups distant from the carboxyl group do not contribute effectively to coordination and may introduce steric hindrance or conformational flexibility that reduces effective interaction with the catalyst.
  - *Examples*:
    - 7-hydroxyheptanoic acid
    - 7-aminoheptanoic acid
    - 8-aminooctanoic acid

- **Rule 6**: Modifiers that are **carboxylic acids containing amide groups or N-acylated amino groups** predict a **low yield**.
  - *Rationale*: Amide groups are less nucleophilic and less effective at coordinating with metal centers due to resonance stabilization. N-acylation of amino groups reduces their ability to participate in coordination, diminishing the modifier's effectiveness.
  - *Examples*:
    - (2S)-6-acetamido-2-aminohexanoic acid
    - 2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid
    - 2-[(4-hydroxybenzoyl)amino]acetic acid

- **Rule 7**: Modifiers that are **heteroaromatic carboxylic acids where the carboxyl group is directly attached to a nitrogen-containing aromatic ring** predict a **high yield**.
  - *Rationale*: Heteroaromatic rings with nitrogen can coordinate with metal centers through the nitrogen lone pair, providing additional binding interactions that enhance catalyst activity.
  - *Examples*:
    - Pyridine-3-carboxylic acid (Nicotinic acid)
    - 1H-pyrazole-4-carboxylic acid
    - 2-oxo-1H-pyridine-4-carboxylic acid
  - *Counterexamples*:
    - 4-pyridin-4-ylbenzoic acid (**Low Yield**; the carboxyl group is not directly attached to the heteroaromatic ring, reducing the potential for effective coordination)

- **Rule 8**: Modifiers that are **aromatic carboxylic acids with aldehyde groups directly attached to the ring** predict a **low yield**.
  - *Rationale*: Aldehyde groups are reactive and can engage in side reactions or inhibit coordination by interacting with metal centers in undesired ways, negatively impacting catalyst performance.
  - *Examples*:
    - 4-formylbenzoic acid
    - 5-formyl-2-hydroxybenzoic acid

- **Rule 9**: Modifiers that are **carboxylic acids with fluorinated alkyl chains (perfluoroalkyl groups) or trifluoroacetyl substituents** predict a **low yield**.
  - *Rationale*: Highly electron-withdrawing fluorinated groups significantly stabilize the carboxylate anion, decreasing its ability to coordinate with metal centers. They may also introduce steric bulk and hydrophobicity that hinder effective interaction with the catalyst.
  - *Examples*:
    - 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid
    - 4-[(2,2,2-trifluoroacetyl)amino]butanoic acid

- **Rule 10**: Modifiers that are **aliphatic carboxylic acids with ether linkages or flexible chains containing multiple oxygen atoms** predict a **low yield**.
  - *Rationale*: Ether linkages increase chain flexibility and may disrupt the optimal positioning of the carboxyl group for coordination. The presence of multiple oxygen atoms can lead to unfavorable conformations or compete with the carboxyl group for metal interaction.
  - *Examples*:
    - 2-[2-(2-methoxyethoxy)ethoxy]acetic acid
    - 3-[2-(2-aminoethoxy)ethoxy]propanoic acid

- **Rule 11**: Modifiers that are **aliphatic carboxylic acids substituted with an aromatic ring connected via an aliphatic linker of four or more carbons** predict a **high yield** if the aromatic ring is electron-deficient.
  - *Rationale*: A longer aliphatic linker distances the aromatic ring from the carboxyl group, reducing steric hindrance and electronic interference. Electron-deficient aromatic rings can enhance metal coordination through π-acceptor interactions.
  - *Examples*:
    - 4-pyridin-4-ylbutanoic acid
    - 5-(4-hydroxyphenyl)pentanoic acid (despite the hydroxy group, the increased distance reduces its electron-donating effect)

- **Rule 12**: Modifiers that are **aliphatic dicarboxylic acids with a ketone or additional carboxyl groups in the chain** predict a **low yield**.
  - *Rationale*: Additional carbonyl groups introduce competing coordination sites and can form internal chelates or complexes that interfere with the modifier's ability to interact effectively with the catalyst.
  - *Examples*:
    - 4-oxoheptanedioic acid
    - (2S)-2-aminopentanedioic acid (**Exception**; despite being a dicarboxylic acid, the presence of a free amino group near the carboxyl groups enhances coordination, resulting in a **high yield**)

- **Rule 13**: Modifiers that are **polyhydroxy carboxylic acids with hydroxyl groups adjacent to the carboxyl group** predict a **high yield**.
  - *Rationale*: Multiple hydroxyl groups near the carboxyl group can participate in hydrogen bonding and additional coordination with metal centers, strengthening the modifier-catalyst interaction and improving solubility.
  - *Examples*:
    - (2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid (Gluconic acid)

- **Rule 14**: Modifiers that are **aromatic carboxylic acids with electron-rich groups (e.g., hydroxy, methoxy) directly attached to the ring in close proximity to the carboxyl group (ortho or meta positions)** predict a **low yield**.
  - *Rationale*: Electron-rich substituents can interfere with metal coordination by increasing electron density on the ring, making the carboxyl group less acidic and less effective at binding. They may also engage in intramolecular hydrogen bonding, reducing availability for coordination.
  - *Examples*:
    - 2-[(4-hydroxybenzoyl)amino]acetic acid
    - 5-formyl-2-hydroxybenzoic acid
    - 1,3-dioxo-2-benzofuran-5-carboxylic acid (**Exception**; despite the electron-rich ring, this modifier predicts a **high yield**, possibly due to the benzofuran structure facilitating coordination)

- **Rule 15**: Modifiers that are **small heteroaromatic carboxylic acids containing additional electronegative atoms (e.g., oxygen) in the ring** predict a **high yield**.
  - *Rationale*: The presence of electronegative atoms in the ring can facilitate additional coordination sites and enhance interaction with the metal center through lone pair donation.
  - *Examples*:
    - 1,3-dioxo-2-benzofuran-5-carboxylic acid
    - 2-oxo-1H-pyridine-4-carboxylic acid

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,1,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,1,0,0,0,0,0,0,0,1,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,-1,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,-1,-1,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,0,0,1,-1,0,0,0,0,0,0,-1,0,0,0
0,0,0,1,0,-1,0,0,-1,0,0,0,0,0,0
0,0,0,1,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,1,-1,0,0,0,0,-1,0,0,0,0,0
1,0,0,1,0,-1,0,0,0,0,0,0,0,0,0
0,0,0,1,-1,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.7428571428571429; Test Accuracy: 0.0
    Train Support: 0.11428571428571428; Test Support: 0.0
    Train Confidence: 0.9166666666666666; Test Confidence: 0.5
    Train Lift: 1.887254901960784; Test Lift: NONE
    Train Leverage: 0.04952380952380952; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:

def rule2matrix(smiles_list):
    import pandas as pd
    from rdkit import Chem
    
    # Define SMARTS patterns for functional groups
    carboxylic_acid = Chem.MolFromSmarts('[CX3](=O)[OX1H0-,OX2H1]')
    primary_amine = Chem.MolFromSmarts('[NX3;H2]')
    ewg_groups = Chem.MolFromSmarts('[N+](=O)[O-]|BrC|C#N|C(=O)[#6,F,Cl,Br,I]|[F,Cl,Br,I]|[CX4](F)(F)F')
    edg_groups = Chem.MolFromSmarts('[OX2H,OX2][#6]|[NX3;H2,H1][#6]|C')
    aromatic_ring = Chem.MolFromSmarts('c1ccccc1')
    aldehyde_group = Chem.MolFromSmarts('[CX3H1](=O)')
    perfluoroalkyl = Chem.MolFromSmarts('[CX4]([F,Cl,Br,I])([F,Cl,Br,I])[F,Cl,Br,I]')
    ether_linkage = Chem.MolFromSmarts('[C;H2,H3][OX2][C;H2,H3]')
    ketone = Chem.MolFromSmarts('[#6][CX3](=O)[#6]')
    hydroxyl_group = Chem.MolFromSmarts('[OX2H]')
    amide_group = Chem.MolFromSmarts('[NX3][CX3](=O)[#6]')
    n_acylated_amine = Chem.MolFromSmarts('[NX3H0;$(N-C(=O))]')
    heteroaromatic_nitrogen = Chem.MolFromSmarts('[n][c]')
    heteroaromatic_oxygen = Chem.MolFromSmarts('[o][c]')
    
    # Rule 1: Modifiers that are carboxylic acids with a free (unprotected) primary amino group within three carbons of the carboxyl group predict a high yield.
    def rule1(mol):
        try:
            ca_matches = mol.GetSubstructMatches(carboxylic_acid)
            pa_matches = mol.GetSubstructMatches(primary_amine)
            if not ca_matches or not pa_matches:
                return 0
            for ca in ca_matches:
                ca_carb_idx = ca[0]  # Carbonyl carbon of carboxylic acid
                for pa in pa_matches:
                    pa_atom_idx = pa[0]  # Nitrogen atom of primary amine
                    path = Chem.rdmolops.GetShortestPath(mol, ca_carb_idx, pa_atom_idx)
                    if 0 < len(path) - 1 <= 3:
                        return 1
            return 0
        except Exception as e:
            return 0
    
    # Rule 2: Aromatic carboxylic acids with strong electron-withdrawing groups at the para position predict a high yield.
    def rule2(mol):
        try:
            pattern = Chem.MolFromSmarts('c1cc([N+](=O)[O-],BrC,C#N,C(=O)[#6,F,Cl,Br,I],[F,Cl,Br,I])ccc1C(=O)[O-,OH]')
            if mol.HasSubstructMatch(pattern):
                return 1
            else:
                return 0
        except Exception as e:
            return 0
    
    # Rule 3: Aromatic carboxylic acids with electron-donating groups at the para position predict a low yield.
    def rule3(mol):
        try:
            pattern = Chem.MolFromSmarts('c1cc([OX2H,OX2][#6],[NX3;H2,H1][#6],C)ccc1C(=O)[O-,OH]')
            if mol.HasSubstructMatch(pattern):
                return -1
            else:
                return 0
        except Exception as e:
            return 0
    
    # Rule 4: Aliphatic carboxylic acids with no additional functional groups or with small polar groups within three carbons of the carboxyl group predict a high yield.
    def rule4(mol):
        try:
            if not mol.HasSubstructMatch(carboxylic_acid):
                return 0
            # Exclude aromatic compounds
            if mol.HasSubstructMatch(aromatic_ring):
                return 0
            # Check for polar groups within three bonds
            polar_groups = [hydroxyl_group]
            ca_matches = mol.GetSubstructMatches(carboxylic_acid)
            for ca in ca_matches:
                ca_idx = ca[0]
                has_polar = False
                for pg in polar_groups:
                    pg_matches = mol.GetSubstructMatches(pg)
                    for pg_match in pg_matches:
                        pg_idx = pg_match[0]
                        path = Chem.rdmolops.GetShortestPath(mol, ca_idx, pg_idx)
                        if 0 < len(path) - 1 <= 3:
                            has_polar = True
                            break
                    if has_polar:
                        return 1
                if not has_polar:
                    return 1  # No polar groups within three bonds
            return 0
        except Exception as e:
            return 0
    
    # Rule 5: Aliphatic carboxylic acids with polar functional groups located beyond three carbons from the carboxyl group and with a carbon chain length greater than five predict a low yield.
    def rule5(mol):
        try:
            if not mol.HasSubstructMatch(carboxylic_acid):
                return 0
            # Exclude aromatic compounds
            if mol.HasSubstructMatch(aromatic_ring):
                return 0
            # Get the longest carbon chain
            frags = Chem.rdmolops.GetMolFrags(mol, asMols=True)
            max_chain_length = 0
            for frag in frags:
                chain_atoms = [atom for atom in frag.GetAtoms() if atom.GetAtomicNum() == 6]
                if len(chain_atoms) > max_chain_length:
                    max_chain_length = len(chain_atoms)
            if max_chain_length <= 5:
                return 0
            # Check for polar groups beyond three bonds
            polar_groups = [hydroxyl_group, primary_amine]
            ca_matches = mol.GetSubstructMatches(carboxylic_acid)
            for ca in ca_matches:
                ca_idx = ca[0]
                for pg in polar_groups:
                    pg_matches = mol.GetSubstructMatches(pg)
                    for pg_match in pg_matches:
                        pg_idx = pg_match[0]
                        path = Chem.rdmolops.GetShortestPath(mol, ca_idx, pg_idx)
                        if len(path) - 1 > 3:
                            return -1
            return 0
        except Exception as e:
            return 0
    
    # Rule 6: Carboxylic acids containing amide groups or N-acylated amino groups predict a low yield.
    def rule6(mol):
        try:
            if mol.HasSubstructMatch(carboxylic_acid) and (mol.HasSubstructMatch(amide_group) or mol.HasSubstructMatch(n_acylated_amine)):
                return -1
            else:
                return 0
        except Exception as e:
            return 0
    
    # Rule 7: Heteroaromatic carboxylic acids where the carboxyl group is directly attached to a nitrogen-containing aromatic ring predict a high yield.
    def rule7(mol):
        try:
            pattern = Chem.MolFromSmarts('[n][c]C(=O)[O-,OH]')
            if mol.HasSubstructMatch(pattern):
                return 1
            else:
                return 0
        except Exception as e:
            return 0
    
    # Rule 8: Aromatic carboxylic acids with aldehyde groups directly attached to the ring predict a low yield.
    def rule8(mol):
        try:
            pattern = Chem.MolFromSmarts('c[C](=O)[H]')
            if mol.HasSubstructMatch(pattern) and mol.HasSubstructMatch(carboxylic_acid):
                return -1
            else:
                return 0
        except Exception as e:
            return 0
    
    # Rule 9: Carboxylic acids with fluorinated alkyl chains predict a low yield.
    def rule9(mol):
        try:
            if mol.HasSubstructMatch(perfluoroalkyl) and mol.HasSubstructMatch(carboxylic_acid):
                return -1
            else:
                return 0
        except Exception as e:
            return 0
    
    # Rule 10: Aliphatic carboxylic acids with ether linkages or flexible chains containing multiple oxygen atoms predict a low yield.
    def rule10(mol):
        try:
            if mol.HasSubstructMatch(ether_linkage) and mol.HasSubstructMatch(carboxylic_acid):
                return -1
            else:
                return 0
        except Exception as e:
            return 0
    
    # Rule 11: Aliphatic carboxylic acids substituted with an aromatic ring connected via an aliphatic linker of four or more carbons predict a high yield if the aromatic ring is electron-deficient.
    def rule11(mol):
        try:
            if not mol.HasSubstructMatch(carboxylic_acid):
                return 0
            ar_matches = mol.GetSubstructMatches(aromatic_ring)
            if not ar_matches:
                return 0
            ca_matches = mol.GetSubstructMatches(carboxylic_acid)
            for ca in ca_matches:
                ca_idx = ca[0]
                for ar in ar_matches:
                    ar_idx = ar[0]
                    path = Chem.rdmolops.GetShortestPath(mol, ca_idx, ar_idx)
                    if len(path) - 1 >= 4:
                        # Check if aromatic ring is electron-deficient (contains EWG)
                        ewg_matches = mol.GetSubstructMatches(ewg_groups)
                        for ewg in ewg_matches:
                            ewg_idx = ewg[0]
                            ar_atom = mol.GetAtomWithIdx(ar_idx)
                            ewg_atom = mol.GetAtomWithIdx(ewg_idx)
                            if ar_atom.IsInRing() and ewg_atom.IsInRing() and ar_atom.GetRingInfo().IsAtomInRingOfSize(ar_idx, 6):
                                return 1
            return 0
        except Exception as e:
            return 0
    
    # Rule 12: Aliphatic dicarboxylic acids with a ketone or additional carboxyl groups in the chain predict a low yield.
    def rule12(mol):
        try:
            ca_matches = mol.GetSubstructMatches(carboxylic_acid)
            if len(ca_matches) < 2 and not mol.HasSubstructMatch(ketone):
                return 0
            else:
                # Exception for (2S)-2-aminopentanedioic acid
                exception_pattern = Chem.MolFromSmarts('[C@H](N)CC(=O)O')
                if mol.HasSubstructMatch(exception_pattern):
                    return 1
                return -1
        except Exception as e:
            return 0
    
    # Rule 13: Polyhydroxy carboxylic acids with hydroxyl groups adjacent to the carboxyl group predict a high yield.
    def rule13(mol):
        try:
            ca_matches = mol.GetSubstructMatches(carboxylic_acid)
            if not ca_matches:
                return 0
            for ca in ca_matches:
                ca_idx = ca[0]
                adjacent_hydroxyls = 0
                ca_atom = mol.GetAtomWithIdx(ca_idx)
                neighbors = ca_atom.GetNeighbors()
                for neighbor in neighbors:
                    if neighbor.GetAtomicNum() == 6:  # Carbon
                        neighbor_idx = neighbor.GetIdx()
                        neighbor_atom = mol.GetAtomWithIdx(neighbor_idx)
                        for nbr in neighbor_atom.GetNeighbors():
                            if nbr.GetAtomicNum() == 8 and nbr.GetTotalNumHs() > 0:  # Hydroxyl oxygen
                                adjacent_hydroxyls += 1
                if adjacent_hydroxyls >= 2:
                    return 1
            return 0
        except Exception as e:
            return 0
    
    # Rule 14: Aromatic carboxylic acids with electron-rich groups directly attached to the ring in close proximity (ortho or meta) to the carboxyl group predict a low yield.
    def rule14(mol):
        try:
            pattern = Chem.MolFromSmarts('c1(c[OX2H,OX2][#6])[cH,c][cH,c]c1C(=O)[O-,OH]')
            if mol.HasSubstructMatch(pattern):
                return -1
            else:
                return 0
        except Exception as e:
            return 0
    
    # Rule 15: Small heteroaromatic carboxylic acids containing additional electronegative atoms in the ring predict a high yield.
    def rule15(mol):
        try:
            pattern = Chem.MolFromSmarts('[o,n,s][c]c(=O)[O-,OH]')
            if mol.HasSubstructMatch(pattern):
                return 1
            else:
                return 0
        except Exception as e:
            return 0
    
    # List of rule functions
    rule_functions = [
        rule1, rule2, rule3, rule4, rule5,
        rule6, rule7, rule8, rule9, rule10,
        rule11, rule12, rule13, rule14, rule15
    ]
    
    # List to collect results
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append zeros
            results.append([0]*15)
            continue
        row = []
        for func in rule_functions:
            result = func(mol)
            row.append(result)
        results.append(row)
    
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {i+1}' for i in range(15)])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: Modifiers that are **carboxylic acids with a free (unprotected) primary amino group within three carbons of the carboxyl group** predict a **high yield**.
  - *Rationale*: The proximity of a free amino group enhances coordination with the metal center of the catalyst, improving catalytic activity.
  - *High Yield Examples*:
    - (2S)-2-aminobutanedioic acid (L-Aspartic acid)
    - (2S)-2-aminopentanedioic acid (L-Glutamic acid)
    - 5-aminopentanoic acid
    - 4-aminobenzoic acid
  - *Low Yield Counterexamples*:
    - 8-aminooctanoic acid (**Low Yield**; amino group is distant from the carboxyl group)
    - (2S)-6-acetamido-2-aminohexanoic acid (**Low Yield**; amino group is N-acetylated, reducing coordination ability)

- **Rule 2**: In **aromatic carboxylic acids**, the presence of **electron-withdrawing groups (e.g., nitro, bromomethyl) at the para position** predicts a **high yield**, while **electron-donating groups (e.g., methyl, methoxy, sulfhydryl) at the same position** predict a **low yield**.
  - *Rationale*: Electron-withdrawing groups increase the acidity and metal-binding ability of the carboxylate anion, enhancing interaction with the catalyst. Electron-donating groups decrease acidity and coordination ability.
  - *High Yield Examples*:
    - 4-nitrobenzoic acid
    - 4-(bromomethyl)benzoic acid
  - *Low Yield Examples*:
    - 4-methylbenzoic acid
    - 4-sulfanylbenzoic acid
    - 3-(4-hydroxyphenyl)propanoic acid

- **Rule 3**: Modifiers that are **aliphatic carboxylic acids with chain lengths of 6 to 8 carbons and no additional functional groups** predict a **high yield**.
  - *Rationale*: Straight-chain aliphatic acids of moderate length can effectively coordinate with the catalyst without steric hindrance from additional functional groups.
  - *High Yield Example*:
    - Octanoic acid
  - *Low Yield Counterexamples*:
    - 7-hydroxyheptanoic acid (**Low Yield**; presence of a hydroxyl group may interfere with coordination)
    - 7-aminoheptanoic acid (**Low Yield**; amino group distant from carboxyl reduces coordination effectiveness)

- **Rule 4**: For **aliphatic carboxylic acids**, the presence of **polar functional groups (e.g., hydroxyl, amino, sulfhydryl) within three carbons of the carboxyl group** predicts a **high yield**, while if these groups are located **more than three carbons away**, it predicts a **low yield**.
  - *Rationale*: Polar groups near the carboxyl group enhance coordination through additional interaction sites. Distant polar groups may not contribute effectively to coordination.
  - *High Yield Example*:
    - 3-sulfanylpropanoic acid
  - *Low Yield Examples*:
    - 7-hydroxyheptanoic acid
    - 8-aminooctanoic acid

- **Rule 5**: Modifiers that are **aromatic carboxylic acids with aldehyde groups directly attached to the ring** predict a **low yield**.
  - *Rationale*: Aldehyde groups can engage in side reactions or form intramolecular interactions, interfering with metal coordination.
  - *Low Yield Examples*:
    - 4-formylbenzoic acid
    - 5-formyl-2-hydroxybenzoic acid

- **Rule 6**: Modifiers that contain **amide bonds involving functional groups near the carboxyl group** or are **N-acetylated amino acids** predict a **low yield**.
  - *Rationale*: Amide formation reduces the availability of amino groups for coordination, diminishing the modifier's effectiveness.
  - *Low Yield Examples*:
    - (2S)-6-acetamido-2-aminohexanoic acid
    - 2-[(4-hydroxybenzoyl)amino]acetic acid
    - 2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid

- **Rule 7**: Modifiers that are **aliphatic carboxylic acids with ether linkages in the carbon chain** predict a **low yield**.
  - *Rationale*: Ether linkages introduce flexibility and polar oxygen atoms that can disrupt optimal positioning of the carboxyl group for coordination.
  - *Low Yield Examples*:
    - 2-[2-(2-methoxyethoxy)ethoxy]acetic acid
    - 3-[2-(2-aminoethoxy)ethoxy]propanoic acid

- **Rule 8**: Modifiers that are **aliphatic carboxylic acids with an aromatic ring attached via a chain of four or more carbons** predict a **high yield**, whereas those with shorter chains predict a **low yield**.
  - *Rationale*: Longer aliphatic linkers reduce electronic and steric interference from the aromatic ring, allowing effective coordination.
  - *High Yield Examples*:
    - 5-(4-hydroxyphenyl)pentanoic acid
    - 4-pyridin-4-ylbutanoic acid
  - *Low Yield Counterexample*:
    - 3-(4-hydroxyphenyl)propanoic acid (**Low Yield**; shorter chain increases steric hindrance)

- **Rule 9**: Modifiers that are **heteroaromatic carboxylic acids with the carboxyl group directly attached to a nitrogen-containing aromatic ring** predict a **high yield**. If the carboxyl group is attached via a benzene ring or linker to the heterocycle, it predicts a **low yield**.
  - *Rationale*: Direct attachment allows the nitrogen atom to participate in coordination with the catalyst, enhancing binding efficiency.
  - *High Yield Examples*:
    - Pyridine-3-carboxylic acid (Nicotinic acid)
    - 1H-pyrazole-4-carboxylic acid
    - 2-oxo-1H-pyridine-4-carboxylic acid
  - *Low Yield Counterexample*:
    - 4-pyridin-4-ylbenzoic acid (**Low Yield**; carboxyl group not directly attached to the heteroaromatic ring)

- **Rule 10**: Modifiers that are **polyhydroxy carboxylic acids with multiple hydroxyl groups adjacent to the carboxyl group** predict a **high yield**.
  - *Rationale*: Multiple hydroxyl groups enhance coordination through hydrogen bonding and additional interaction sites with the catalyst.
  - *High Yield Example*:
    - (2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid (Gluconic acid)

- **Rule 11**: Modifiers with **perfluorinated alkyl chains or trifluoroacetyl groups** predict a **low yield**.
  - *Rationale*: Strongly electron-withdrawing fluorinated groups reduce the nucleophilicity of the carboxylate anion, decreasing coordination ability and potentially introducing steric hindrance.
  - *Low Yield Examples*:
    - 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid
    - 4-[(2,2,2-trifluoroacetyl)amino]butanoic acid

- **Rule 12**: Modifiers that contain **additional carbonyl groups in the aliphatic chain** predict a **low yield**.
  - *Rationale*: Additional carbonyl groups create competing coordination sites and may form internal chelates, interfering with effective catalyst interaction.
  - *Low Yield Example*:
    - 4-oxoheptanedioic acid

- **Rule 13**: Modifiers that are **aromatic carboxylic acids with methoxy groups on the aromatic ring attached via an aliphatic chain of four or more carbons** predict a **high yield**.
  - *Rationale*: The aliphatic chain distances electron-donating methoxy groups from the carboxyl group, minimizing their impact on coordination.
  - *High Yield Example*:
    - 4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid

- **Rule 14**: Modifiers that are **aromatic carboxylic acids fused with additional carbonyl-containing rings** predict a **high yield**.
  - *Rationale*: Fused aromatic systems with carbonyl groups can enhance coordination through extended conjugation and multiple binding sites.
  - *High Yield Example*:
    - 1,3-dioxo-2-benzofuran-5-carboxylic acid

- **Rule 15**: Modifiers that are **complex polyfunctional carboxylic acids with multiple coordination sites positioned favorably** predict a **high yield**.
  - *Rationale*: Multiple coordination sites can enhance binding through chelation effects, improving catalytic performance.
  - *High Yield Example*:
    - 2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5
1,0,0,1,0
1,0,0,1,0
0,1,0,1,0
1,0,0,1,0
0,0,0,1,0
0,0,0,1,0
0,0,0,1,0
0,0,0,1,0
0,0,0,1,0
0,0,0,1,0
0,0,0,1,0
0,0,0,1,0
0,0,0,1,0
0,0,0,1,0
0,0,0,1,0
1,0,0,1,0
0,0,0,1,0
0,0,0,1,0
0,0,0,1,0
0,0,0,1,-1
0,0,0,1,-1
0,0,0,1,0
0,0,0,1,0
0,-1,0,1,0
0,0,0,1,0
0,0,0,1,0
0,0,0,1,0
0,0,0,1,0
0,0,0,1,0
0,0,0,1,0
0,0,0,1,0
0,0,0,1,0
0,0,0,1,0
0,0,0,1,0
1,0,0,1,0
0,0,0,1,0

---------------------------------------------------------------


    Train Accuracy: 0.6; Test Accuracy: 0.0
    Train Support: 0.05714285714285714; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 2.0302287581699345; Test Lift: NONE
    Train Leverage: 0.02897959183673469; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    carboxylate_anion = '[CX3](=O)[O-]'
    primary_amino = '[NX3;H2]'
    secondary_amino = '[NX3;H1][#6]'
    amide_bond = '[NX3][CX3](=O)[#6]'
    hydroxyl_group = '[OX2H]'
    thiol_group = '[SX2H]'
    aldehyde_group = '[CX3H1](=O)'
    ether_linkage = '[#6][OX2][#6]'
    aromatic_ring = 'a'
    aromatic_carboxylic_acid = '[a][CX3](=O)[OX2H1]'
    nitro_group = '[NX3](=O)=O'
    bromomethyl_group = '[CH2][Br]'
    methyl_group = '[CH3]'
    methoxy_group = '[OX2][CH3]'
    sulfhydryl_group = '[SX2H]'
    perfluoro_alkyl_chain = 'C([F,Cl,Br,I])([F,Cl,Br,I])[F,Cl,Br,I]'
    carbonyl_in_chain = '[#6][CX3](=O)[#6]'
    heteroaromatic_nitrogen = '[n]'
    polyhydroxy = '[OX2H][CX4][OX2H]'
    trifluoroacetyl_group = 'C(=O)C(F)(F)F'
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are carboxylic acids with a free (unprotected) primary amino group within three carbons of the carboxyl group predict a high yield.',
            'patterns': [carboxylic_acid, primary_amino],
            'distance': 4,  # Max bond distance between COOH and NH2 (3 carbons = 4 bonds)
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'In aromatic carboxylic acids, the presence of electron-withdrawing groups (e.g., nitro, bromomethyl) at the para position predicts a high yield, while electron-donating groups (e.g., methyl, methoxy, sulfhydryl) at the same position predict a low yield.',
            'patterns': [aromatic_carboxylic_acid],
            'para_substituents': {
                'ewg': [nitro_group, bromomethyl_group],
                'edg': [methyl_group, methoxy_group, sulfhydryl_group]
            }
        },
        {
            'number': 3,
            'description': 'Modifiers that are aliphatic carboxylic acids with chain lengths of 6 to 8 carbons and no additional functional groups predict a high yield.',
            'patterns': [carboxylic_acid],
            'chain_length_range': (6, 8),
            'exclude_patterns': [hydroxyl_group, primary_amino, secondary_amino, thiol_group, ether_linkage, carbonyl_in_chain],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'For aliphatic carboxylic acids, the presence of polar functional groups (e.g., hydroxyl, amino, sulfhydryl) within three carbons of the carboxyl group predicts a high yield, while if these groups are located more than three carbons away, it predicts a low yield.',
            'patterns': [carboxylic_acid],
            'functional_groups': [hydroxyl_group, primary_amino, thiol_group],
            'distance': 4,
            'prediction': 1,
            'low_yield_prediction': -1
        },
        {
            'number': 5,
            'description': 'Modifiers that are aromatic carboxylic acids with aldehyde groups directly attached to the ring predict a low yield.',
            'patterns': [aromatic_carboxylic_acid, aldehyde_group],
            'prediction': -1
        }
        # Add additional rules here following the same structure
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = [Chem.MolFromSmarts(pat) for pat in rule.get('patterns', [])]
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = [Chem.MolFromSmarts(pat) for pat in rule['exclude_patterns']]
            rule['compiled_exclude_patterns'] = compiled_excludes
        # Compile functional groups for distance checks
        if 'functional_groups' in rule:
            compiled_fgs = [Chem.MolFromSmarts(pat) for pat in rule['functional_groups']]
            rule['compiled_functional_groups'] = compiled_fgs
        # Compile para substituents if any
        if 'para_substituents' in rule:
            comp_ewg = [Chem.MolFromSmarts(pat) for pat in rule['para_substituents'].get('ewg', [])]
            comp_edg = [Chem.MolFromSmarts(pat) for pat in rule['para_substituents'].get('edg', [])]
            rule['para_substituents']['compiled_ewg'] = comp_ewg
            rule['para_substituents']['compiled_edg'] = comp_edg
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for pat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for pat in rule['compiled_patterns']:
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Additional logic for specific rules
                if rule['number'] == 1:
                    # Rule 1: Distance between carboxylic acid and primary amino group
                    carboxylic_acid_matches = mol.GetSubstructMatches(rule['compiled_patterns'][0])
                    primary_amino_matches = mol.GetSubstructMatches(rule['compiled_patterns'][1])
                    match = False
                    for ca in carboxylic_acid_matches:
                        ca_atom = ca[0]
                        for pa in primary_amino_matches:
                            pa_atom = pa[0]
                            path = Chem.GetShortestPath(mol, ca_atom, pa_atom)
                            if len(path) - 1 <= rule['distance']:
                                match = True
                                break
                        if match:
                            break
                    if match:
                        row.append(rule['prediction'])
                    else:
                        row.append(0)
                elif rule['number'] == 2:
                    # Rule 2: Check para substituents on aromatic ring
                    aromatic_carboxylic_acid_pat = rule['compiled_patterns'][0]
                    ac_matches = mol.GetSubstructMatches(aromatic_carboxylic_acid_pat)
                    match = False
                    for match_atoms in ac_matches:
                        # Get ring info
                        ring_info = mol.GetRingInfo()
                        rings = ring_info.AtomRings()
                        carboxyl_carbon = match_atoms[0]
                        for ring in rings:
                            if carboxyl_carbon in ring and len(ring) == 6:
                                idx_in_ring = ring.index(carboxyl_carbon)
                                para_idx = ring[(idx_in_ring + 3) % 6]
                                para_atom = mol.GetAtomWithIdx(para_idx)
                                substituents = [nbr.GetIdx() for nbr in para_atom.GetNeighbors() if nbr.GetIdx() not in ring]
                                has_ewg = False
                                has_edg = False
                                for sub_idx in substituents:
                                    sub_mol = Chem.PathToSubmol(mol, [para_idx, sub_idx])
                                    for ewg_pat in rule['para_substituents']['compiled_ewg']:
                                        if sub_mol.HasSubstructMatch(ewg_pat):
                                            has_ewg = True
                                            break
                                    for edg_pat in rule['para_substituents']['compiled_edg']:
                                        if sub_mol.HasSubstructMatch(edg_pat):
                                            has_edg = True
                                            break
                                if has_ewg:
                                    row.append(1)
                                    match = True
                                    break
                                elif has_edg:
                                    row.append(-1)
                                    match = True
                                    break
                        if match:
                            break
                    if not match:
                        row.append(0)
                elif rule['number'] == 3:
                    # Rule 3: Check chain length and absence of additional functional groups
                    carboxylic_acid_pat = rule['compiled_patterns'][0]
                    ca_matches = mol.GetSubstructMatches(carboxylic_acid_pat)
                    if not ca_matches:
                        row.append(0)
                        continue
                    # Check for additional functional groups
                    has_extra_fg = False
                    for pat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            has_extra_fg = True
                            break
                    if has_extra_fg:
                        row.append(0)
                        continue
                    # Calculate chain length
                    carbon_counts = sum(1 for atom in mol.GetAtoms() if atom.GetAtomicNum() == 6)
                    if rule['chain_length_range'][0] <= carbon_counts <= rule['chain_length_range'][1]:
                        row.append(rule['prediction'])
                    else:
                        row.append(0)
                elif rule['number'] == 4:
                    # Rule 4: Check distance of polar functional groups to carboxylic acid
                    carboxylic_acid_pat = rule['compiled_patterns'][0]
                    ca_matches = mol.GetSubstructMatches(carboxylic_acid_pat)
                    if not ca_matches:
                        row.append(0)
                        continue
                    fg_matches = []
                    for fg_pat in rule['compiled_functional_groups']:
                        fg_matches.extend(mol.GetSubstructMatches(fg_pat))
                    if not fg_matches:
                        row.append(0)
                        continue
                    match_high = False
                    match_low = False
                    for ca in ca_matches:
                        ca_atom = ca[0]
                        for fg in fg_matches:
                            fg_atom = fg[0]
                            path = Chem.GetShortestPath(mol, ca_atom, fg_atom)
                            if len(path) - 1 <= rule['distance']:
                                match_high = True
                                break
                            else:
                                match_low = True
                        if match_high:
                            break
                    if match_high:
                        row.append(rule['prediction'])
                    elif match_low:
                        row.append(rule['low_yield_prediction'])
                    else:
                        row.append(0)
                elif rule['number'] == 5:
                    # Rule 5: Aromatic carboxylic acids with aldehyde groups directly attached to the ring
                    aromatic_carboxylic_acid_pat = rule['compiled_patterns'][0]
                    aldehyde_pat = rule['compiled_patterns'][1]
                    ac_matches = mol.GetSubstructMatches(aromatic_carboxylic_acid_pat)
                    if not ac_matches:
                        row.append(0)
                        continue
                    aldehyde_matches = mol.GetSubstructMatches(aldehyde_pat)
                    if not aldehyde_matches:
                        row.append(0)
                        continue
                    # Check if aldehyde is directly attached to aromatic ring
                    match = False
                    for ald in aldehyde_matches:
                        ald_c = ald[0]
                        for nbr in mol.GetAtomWithIdx(ald_c).GetNeighbors():
                            if nbr.GetIsAromatic():
                                match = True
                                break
                        if match:
                            break
                    if match:
                        row.append(rule['prediction'])
                    else:
                        row.append(0)
                else:
                    # For other rules, you can implement similarly
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: Modifiers that are **aliphatic or aromatic carboxylic acids with a free (unprotected) amino group located within three carbons of the carboxyl group** predict a **high yield**. This includes both linear and cyclic structures.
  - *Rationale*: The presence of a nearby free amino group enhances coordination with the metal center, increasing catalyst effectiveness.
  - *High Yield Examples*:
    - (2S)-2-aminobutanedioic acid *(L-Aspartic acid)*
    - (2S)-2-aminopentanedioic acid *(L-Glutamic acid)*
    - 5-aminopentanoic acid
    - 4-aminobenzoic acid
    - (2R)-2-amino-3-(1H-indol-3-yl)propanoic acid *(L-Tryptophan)*
  - *Low Yield Counterexamples*:
    - (2S)-6-acetamido-2-aminohexanoic acid *(N-acetylated amino acid)*
    - 8-aminooctanoic acid *(Amino group distant from carboxyl group)*
    - 7-aminoheptanoic acid

- **Rule 2**: In **aromatic carboxylic acids**, the presence of **electron-withdrawing groups (e.g., nitro, bromomethyl) at the para position** predicts a **high yield**, while **electron-donating groups (e.g., methyl, methoxy, hydroxyl, sulfhydryl) at the same position** predict a **low yield**.
  - *Rationale*: Electron-withdrawing groups enhance acidity and coordination ability of the carboxylate, promoting better interaction with the catalyst. Electron-donating groups decrease acidity and can hinder coordination.
  - *High Yield Examples*:
    - 4-nitrobenzoic acid
    - 4-(bromomethyl)benzoic acid
  - *Low Yield Examples*:
    - 4-methylbenzoic acid
    - 4-sulfanylbenzoic acid
    - 3-(4-hydroxyphenyl)propanoic acid
    - 5-formyl-2-hydroxybenzoic acid

- **Rule 3**: Modifiers that are **heteroaromatic carboxylic acids with the carboxyl group directly attached to a nitrogen-containing aromatic ring** predict a **high yield**. If the carboxyl group is attached to an aromatic ring fused to the heterocycle or via a linker, it predicts a **low yield**.
  - *Rationale*: Direct attachment permits the nitrogen to participate in coordination, enhancing catalyst interaction.
  - *High Yield Examples*:
    - Pyridine-3-carboxylic acid *(Nicotinic acid)*
    - 1H-pyrazole-4-carboxylic acid
    - 2-oxo-1H-pyridine-4-carboxylic acid
  - *Low Yield Counterexample*:
    - 4-pyridin-4-ylbenzoic acid *(Carboxyl group not directly attached to the heteroaromatic ring)*

- **Rule 4**: For **aliphatic carboxylic acids**, the presence of **polar functional groups (e.g., hydroxyl, sulfhydryl) within three carbons of the carboxyl group** predicts a **high yield**; if such groups are located further away, the yield is predicted to be **low**.
  - *Rationale*: Proximity of polar groups enhances coordination capabilities by providing additional interaction sites.
  - *High Yield Example*:
    - 3-sulfanylpropanoic acid
  - *Low Yield Examples*:
    - 7-hydroxyheptanoic acid
    - 8-aminooctanoic acid
    - 7-aminoheptanoic acid

- **Rule 5**: Modifiers that have **amide bonds involving the amino group or near the carboxyl group** predict a **low yield**.
  - *Rationale*: Amide formation reduces availability of amino or carboxyl groups for metal coordination, diminishing the modifier's effectiveness.
  - *Low Yield Examples*:
    - (2S)-6-acetamido-2-aminohexanoic acid
    - 2-[(4-hydroxybenzoyl)amino]acetic acid
    - 2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid

- **Rule 6**: Modifiers that are **simple aliphatic carboxylic acids with chain lengths of 6 to 8 carbons and without additional functional groups** predict a **high yield**.
  - *Rationale*: Straight-chain aliphatic acids of moderate length can effectively coordinate with the catalyst without steric hindrance from additional functional groups.
  - *High Yield Example*:
    - Octanoic acid
  - *Low Yield Counterexamples*:
    - None in the dataset

- **Rule 7**: Modifiers that contain **strongly electron-withdrawing fluorinated groups (e.g., trifluoromethyl, perfluoroalkyl)** predict a **low yield**.
  - *Rationale*: Strong electron-withdrawing groups decrease the nucleophilicity of the carboxylate anion, reducing coordination ability and potentially introducing steric hindrance.
  - *Low Yield Examples*:
    - 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid
    - 4-[(2,2,2-trifluoroacetyl)amino]butanoic acid

- **Rule 8**: Modifiers that are **aliphatic carboxylic acids containing ether linkages in the carbon chain** predict a **low yield**.
  - *Rationale*: Ether oxygen atoms and the increased flexibility may hinder effective coordination by disrupting the optimal conformation for metal binding.
  - *Low Yield Examples*:
    - 2-[2-(2-methoxyethoxy)ethoxy]acetic acid
    - 3-[2-(2-aminoethoxy)ethoxy]propanoic acid

- **Rule 9**: Modifiers that are **aromatic carboxylic acids with aldehyde groups attached to the ring** predict a **low yield**.
  - *Rationale*: Aldehyde groups can engage in side reactions or form intramolecular interactions, interfering with metal coordination.
  - *Low Yield Examples*:
    - 4-formylbenzoic acid
    - 5-formyl-2-hydroxybenzoic acid

- **Rule 10**: Modifiers that are **aliphatic carboxylic acids linked to an aromatic ring via a chain of four or more carbons** predict a **high yield**, whereas those with shorter chains predict a **low yield**.
  - *Rationale*: Longer aliphatic linkers reduce electronic and steric interference from the aromatic ring, allowing effective coordination with the metal center.
  - *High Yield Examples*:
    - 5-(4-hydroxyphenyl)pentanoic acid
    - 4-pyridin-4-ylbutanoic acid
  - *Low Yield Example*:
    - 3-(4-hydroxyphenyl)propanoic acid

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10
1,0,0,1,0,0,0,0,0,0
1,0,0,1,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0
1,0,0,1,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0
0,0,0,1,0,0,0,-1,0,0
0,0,0,1,0,0,0,0,0,0
0,0,0,1,0,0,-1,0,0,0
1,0,0,1,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0
0,0,0,1,0,0,0,0,-1,0
0,0,0,1,0,0,0,0,-1,0
0,0,0,1,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0
0,0,0,1,-1,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0
0,0,0,1,-1,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0
0,0,0,1,-1,0,-1,0,0,0
0,0,0,1,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0
0,0,0,1,0,0,0,-1,0,0
1,0,0,1,-1,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.7714285714285715; Test Accuracy: 0.0
    Train Support: 0.07428571428571429; Test Support: 0.0
    Train Confidence: 0.95; Test Confidence: 0.4
    Train Lift: 1.9387254901960784; Test Lift: NONE
    Train Leverage: 0.03477551020408163; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and structures based on the rules
    # Carboxylic acid group (-COOH)
    carboxylic_acid = Chem.MolFromSmarts('[CX3](=O)[OX1H0-,OX2H1]')
    
    # Free amino group (primary amine, not amide)
    free_amino_group = Chem.MolFromSmarts('[NX3H2;!$(NC=O)]')
    
    # Aromatic carboxylic acid
    aromatic_carboxylic_acid = Chem.MolFromSmarts('[c][CX3](=O)[OX1H0-,OX2H1]')
    
    # Electron-withdrawing groups (EWGs) at para position
    nitro_group = Chem.MolFromSmarts('[NX3+(=O)[O-]]')
    bromomethyl_group = Chem.MolFromSmarts('[CH2Br]')
    ewg_list = [nitro_group, bromomethyl_group]
    
    # Electron-donating groups (EDGs) at para position
    methyl_group = Chem.MolFromSmarts('[CH3]')
    methoxy_group = Chem.MolFromSmarts('[OX2][CH3]')
    hydroxyl_group = Chem.MolFromSmarts('[OX2H]')
    sulfhydryl_group = Chem.MolFromSmarts('[SX2H]')
    edg_list = [methyl_group, methoxy_group, hydroxyl_group, sulfhydryl_group]
    
    # Heteroaromatic carboxylic acid with carboxyl group directly attached to nitrogen-containing aromatic ring
    hetero_aromatic_carboxylic_acid = Chem.MolFromSmarts('[n][c;R][CX3](=O)[OX1H0-,OX2H1]')
    
    # Polar functional groups (hydroxyl, sulfhydryl)
    polar_groups = [hydroxyl_group, sulfhydryl_group]
    
    # Amide bond involving amino group or near carboxyl group
    amide_bond = Chem.MolFromSmarts('[NX3][CX3](=O)[#6]')
    
    # Simple aliphatic carboxylic acids with chain lengths of 6 to 8 carbons without additional functional groups
    simple_aliphatic_acid = Chem.MolFromSmarts('[CX3](=O)[OX1H0-,OX2H1][CH2][CH2][CH2][CH2][CH2][CH3]')  # Hexanoic acid example
    
    # Fluorinated groups (trifluoromethyl, perfluoroalkyl)
    trifluoromethyl_group = Chem.MolFromSmarts('[CX4](F)(F)F')
    perfluoroalkyl_group = Chem.MolFromSmarts('[CX4](F)(F)(F)[F]')
    fluorinated_group_list = [trifluoromethyl_group, perfluoroalkyl_group]
    
    # Ether linkage in aliphatic chain
    ether_linkage = Chem.MolFromSmarts('[CX4][OX2][CX4]')
    
    # Aromatic aldehyde group attached to ring
    aromatic_aldehyde = Chem.MolFromSmarts('[c][CX3H]=O')
    
    # Aliphatic carboxylic acids linked to aromatic ring via chain of four or more carbons
    long_aliphatic_chain = Chem.MolFromSmarts('[CX3](=O)[OX1H0-,OX2H1][CH2][CH2][CH2][CH2][a]')
    # Aliphatic carboxylic acids linked to aromatic ring via shorter chain (less than four carbons)
    short_aliphatic_chain = Chem.MolFromSmarts('[CX3](=O)[OX1H0-,OX2H1][CH2][CH2][a]')
    
    # Initialize the results
    results = []
    
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            results.append([0]*10)
            continue
        row = []
        # Rule 1
        try:
            match1 = False
            # Find carboxylic acid groups
            ca_matches = mol.GetSubstructMatches(carboxylic_acid)
            # Find free amino groups
            amino_matches = mol.GetSubstructMatches(free_amino_group)
            if ca_matches and amino_matches:
                # Check distances between carboxylic acid carbons and amino nitrogens
                for ca in ca_matches:
                    ca_atom_idx = ca[0]  # Carboxyl carbon
                    for aa in amino_matches:
                        aa_atom_idx = aa[0]  # Nitrogen atom
                        path = Chem.GetShortestPath(mol, ca_atom_idx, aa_atom_idx)
                        if len(path) -1 <= 3:
                            match1 = True
                            break
                    if match1:
                        break
            if match1:
                row.append(1)
            else:
                row.append(0)
        except:
            row.append(0)
        # Rule 2
        try:
            match2 = False
            ac_matches = mol.GetSubstructMatches(aromatic_carboxylic_acid)
            if ac_matches:
                for ac in ac_matches:
                    ac_atom_idx = ac[0]  # The aromatic carbon connected to carboxylic acid
                    ring_info = mol.GetRingInfo()
                    rings = ring_info.AtomRings()
                    ring = None
                    for r in rings:
                        if ac_atom_idx in r and len(r) == 6:
                            ring = r
                            break
                    if ring:
                        idx_in_ring = ring.index(ac_atom_idx)
                        para_idx_in_ring = (idx_in_ring + 3) % len(ring)
                        para_atom_idx = ring[para_idx_in_ring]
                        para_atom = mol.GetAtomWithIdx(para_atom_idx)
                        if para_atom.GetDegree() > 2:
                            for neighbor in para_atom.GetNeighbors():
                                if neighbor.GetIdx() not in ring:
                                    submol = Chem.PathToSubmol(mol, [para_atom_idx, neighbor.GetIdx()])
                                    for ewg in ewg_list:
                                        if submol.HasSubstructMatch(ewg):
                                            match2 = True
                                            row.append(1)
                                            break
                                    for edg in edg_list:
                                        if submol.HasSubstructMatch(edg):
                                            match2 = True
                                            row.append(-1)
                                            break
                            if match2:
                                break
                        else:
                            row.append(0)
                            match2 = True
                            break
                    else:
                        row.append(0)
                        match2 = True
                        break
                if not match2:
                    row.append(0)
            else:
                row.append(0)
        except:
            row.append(0)
        # Rule 3
        try:
            if mol.HasSubstructMatch(hetero_aromatic_carboxylic_acid):
                row.append(1)
            else:
                row.append(0)
        except:
            row.append(0)
        # Rule 4
        try:
            match4 = False
            ca_matches = mol.GetSubstructMatches(carboxylic_acid)
            if ca_matches:
                for ca in ca_matches:
                    ca_atom_idx = ca[0]
                    for polar_group in polar_groups:
                        pg_matches = mol.GetSubstructMatches(polar_group)
                        if pg_matches:
                            for pg in pg_matches:
                                pg_atom_idx = pg[0]
                                path = Chem.GetShortestPath(mol, ca_atom_idx, pg_atom_idx)
                                if len(path)-1 <=3:
                                    match4 = True
                                    break
                            if match4:
                                break
                    if match4:
                        break
            if match4:
                row.append(1)
            else:
                row.append(0)
        except:
            row.append(0)
        # Rule 5
        try:
            if mol.HasSubstructMatch(amide_bond):
                row.append(-1)
            else:
                row.append(0)
        except:
            row.append(0)
        # Rule 6
        try:
            if mol.HasSubstructMatch(simple_aliphatic_acid):
                row.append(1)
            else:
                row.append(0)
        except:
            row.append(0)
        # Rule 7
        try:
            match7 = False
            for fg in fluorinated_group_list:
                if mol.HasSubstructMatch(fg):
                    match7 = True
                    break
            if match7:
                row.append(-1)
            else:
                row.append(0)
        except:
            row.append(0)
        # Rule 8
        try:
            if mol.HasSubstructMatch(ether_linkage):
                row.append(-1)
            else:
                row.append(0)
        except:
            row.append(0)
        # Rule 9
        try:
            if mol.HasSubstructMatch(aromatic_aldehyde):
                row.append(-1)
            else:
                row.append(0)
        except:
            row.append(0)
        # Rule 10
        try:
            if mol.HasSubstructMatch(long_aliphatic_chain):
                row.append(1)
            elif mol.HasSubstructMatch(short_aliphatic_chain):
                row.append(-1)
            else:
                row.append(0)
        except:
            row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {i+1}' for i in range(10)])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: Modifiers that are **carboxylic acids containing a free (unprotected) amino group within three carbons of the carboxyl group** predict a **high yield**.
  - *Rationale*: The proximity of the amino group to the carboxyl group enhances metal coordination through chelation, improving catalyst performance.
  - *High Yield Examples*:
    - (2S)-2-aminobutanedioic acid *(L-Aspartic acid)*
    - (2S)-2-aminopentanedioic acid *(L-Glutamic acid)*
    - 5-aminopentanoic acid
    - 4-aminobenzoic acid
  - *Low Yield Counterexamples*:
    - 7-aminoheptanoic acid *(Amino group distant from carboxyl group)*
    - 8-aminooctanoic acid

- **Rule 2**: Modifiers that are **aromatic carboxylic acids with a short linker (less than four carbons) between the carboxyl group and the aromatic ring** predict a **low yield**.
  - *Rationale*: Short linkers limit flexibility, hindering optimal metal coordination. The proximity to the aromatic ring may also introduce steric hindrance and electronic effects that reduce effectiveness.
  - *Low Yield Examples*:
    - 4-methylbenzoic acid
    - 4-formylbenzoic acid
    - 4-sulfanylbenzoic acid
  - *High Yield Counterexamples*:
    - 5-(4-hydroxyphenyl)pentanoic acid *(Longer linker chain)*
    - 4-pyridin-4-ylbutanoic acid

- **Rule 3**: Modifiers that are **aromatic carboxylic acids with an aliphatic chain of four or more carbons separating the carboxyl group from the ring** predict a **high yield**.
  - *Rationale*: Longer aliphatic chains provide flexibility and reduce steric hindrance, facilitating better metal coordination and interaction with the catalyst.
  - *High Yield Examples*:
    - 5-(4-hydroxyphenyl)pentanoic acid
    - 4-pyridin-4-ylbutanoic acid
  - *Low Yield Counterexample*:
    - 3-(4-hydroxyphenyl)propanoic acid *(Shorter linker chain, low yield)*

- **Rule 4**: Modifiers that are **aliphatic carboxylic acids with long, unbranched carbon chains (six or more carbons)** predict a **high yield**.
  - *Rationale*: Long aliphatic chains may enhance hydrophobic interactions and allow for optimal alignment with the metal center, improving catalyst performance.
  - *High Yield Example*:
    - Octanoic acid
  - *Low Yield Counterexample*:
    - 7-hydroxyheptanoic acid *(Presence of hydroxyl group may interfere with coordination)*

- **Rule 5**: Modifiers that **contain amide bonds involving the amino group or near the carboxyl group** predict a **low yield**.
  - *Rationale*: Amide formation decreases the availability of free amino or carboxyl groups for metal coordination, diminishing the modifier's effectiveness.
  - *Low Yield Examples*:
    - (2S)-6-acetamido-2-aminohexanoic acid
    - 2-[(4-hydroxybenzoyl)amino]acetic acid
    - 2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid

- **Rule 6**: Modifiers that are **heteroaromatic carboxylic acids with the carboxyl group directly attached to a nitrogen-containing aromatic ring** predict a **high yield**.
  - *Rationale*: Direct attachment allows the heteroatom (e.g., nitrogen) to participate in metal coordination, enhancing interaction with the catalyst.
  - *High Yield Examples*:
    - Pyridine-3-carboxylic acid *(Nicotinic acid)*
    - 1H-pyrazole-4-carboxylic acid
    - 2-oxo-1H-pyridine-4-carboxylic acid
  - *Low Yield Counterexample*:
    - 4-pyridin-4-ylbenzoic acid *(Carboxyl group not directly attached to the heteroaromatic ring)*

- **Rule 7**: Modifiers that contain **strongly electron-withdrawing fluorinated groups (e.g., trifluoromethyl, perfluoroalkyl)** predict a **low yield**.
  - *Rationale*: These groups decrease the electron density of the carboxylate, reducing its ability to coordinate with metal centers effectively.
  - *Low Yield Examples*:
    - 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid
    - 4-[(2,2,2-trifluoroacetyl)amino]butanoic acid

- **Rule 8**: Modifiers that are **aliphatic carboxylic acids containing ether linkages within the carbon chain** predict a **low yield**.
  - *Rationale*: Ether linkages increase chain flexibility and may disrupt the optimal conformation required for effective metal coordination.
  - *Low Yield Examples*:
    - 2-[2-(2-methoxyethoxy)ethoxy]acetic acid
    - 3-[2-(2-aminoethoxy)ethoxy]propanoic acid

- **Rule 9**: Modifiers that are **aromatic carboxylic acids with aldehyde groups attached to the ring** predict a **low yield**.
  - *Rationale*: Aldehyde groups can participate in side reactions or form intramolecular interactions, interfering with metal coordination and decreasing catalyst efficiency.
  - *Low Yield Examples*:
    - 4-formylbenzoic acid
    - 5-formyl-2-hydroxybenzoic acid

- **Rule 10**: Modifiers that are **polyhydroxy carboxylic acids (sugar acids) or contain multiple hydroxyl groups near the carboxyl group** predict a **high yield**.
  - *Rationale*: Multiple hydroxyl groups provide additional coordination sites, enhancing interaction with the metal catalyst through chelation.
  - *High Yield Examples*:
    - (2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid *(Gluconic acid)*
    - 2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid

- **Rule 11**: Modifiers containing **peptide bonds or are peptides** predict a **low yield**.
  - *Rationale*: Peptide bonds reduce the availability of free amino and carboxyl groups for metal coordination, diminishing the modifier's effectiveness in enhancing the catalyst.
  - *Low Yield Example*:
    - 2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11
1,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0
0,-1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0
0,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,1,0
0,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0
0,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0
0,-1,0,0,0,0,0,0,0,0,0
0,-1,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,-1,0,0,0,0,0,0,-1,1,0
0,-1,0,0,0,0,0,0,-1,0,0
0,-1,0,0,0,0,0,0,0,0,0
0,-1,0,0,0,0,0,0,0,0,0
0,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0
1,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.7714285714285715; Test Accuracy: 0.0
    Train Support: 0.08571428571428572; Test Support: 0.0
    Train Confidence: 0.8055555555555557; Test Confidence: 0.4166666666666667
    Train Lift: 1.6441993464052285; Test Lift: NONE
    Train Leverage: 0.02272108843537414; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    carboxylic_acid = Chem.MolFromSmarts('[CX3](=O)[OX2H1]')  # Carboxylic acid group (-COOH)
    primary_amine = Chem.MolFromSmarts('[NX3;H2]')  # Primary amine group (-NH2)
    amide_bond = Chem.MolFromSmarts('[NX3][CX3](=O)[#6]')  # Amide bond
    ether_linkage = Chem.MolFromSmarts('[C][O][C]')  # Ether linkage within carbon chain
    fluorinated_group = Chem.MolFromSmarts('[CX4]([F,Cl,Br,I])([F,Cl,Br,I])[F,Cl,Br,I]')  # Trifluoromethyl group
    aldehyde_group = Chem.MolFromSmarts('[CX3H1](=O)')  # Aldehyde group
    hydroxyl_group = Chem.MolFromSmarts('[OX2H]')  # Hydroxyl group (-OH)
    peptide_bond = Chem.MolFromSmarts('[NX3][CX3](=O)[NX3]')  # Peptide bond
    aromatic_ring = Chem.MolFromSmarts('a')  # Aromatic ring
    nitrogen_aromatic_ring = Chem.MolFromSmarts('[n]')  # Nitrogen-containing aromatic ring

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*11)  # Number of rules is 11
            continue
        row = []
        try:
            # Rule 1: Carboxylic acid with free amino group within three carbons
            match_rule1 = 0
            carboxy_matches = mol.GetSubstructMatches(carboxylic_acid)
            amine_matches = mol.GetSubstructMatches(primary_amine)
            for c_match in carboxy_matches:
                for a_match in amine_matches:
                    path = Chem.GetShortestPath(mol, c_match[0], a_match[0])
                    if len(path) - 1 <= 3:
                        match_rule1 = 1
                        break
                if match_rule1 == 1:
                    break
            row.append(match_rule1)
        except:
            row.append(0)
        try:
            # Rule 2: Aromatic carboxylic acid with short linker (less than four carbons) predicts low yield
            pattern_rule2 = Chem.MolFromSmarts('[c][CX3](=O)[OX2H1]')
            match_rule2 = -1 if mol.HasSubstructMatch(pattern_rule2) else 0
            row.append(match_rule2)
        except:
            row.append(0)
        try:
            # Rule 3: Aromatic carboxylic acids with aliphatic chain of four or more carbons separating carboxyl group from ring predicts high yield
            pattern_rule3 = Chem.MolFromSmarts('[c][C][C][C][C][CX3](=O)[OX2H1]')
            match_rule3 = 1 if mol.HasSubstructMatch(pattern_rule3) else 0
            row.append(match_rule3)
        except:
            row.append(0)
        try:
            # Rule 4: Aliphatic carboxylic acids with long, unbranched carbon chains (six or more carbons) predict high yield
            pattern_rule4 = Chem.MolFromSmarts('[CX3](=O)[OX2H1][C][C][C][C][C][C]')
            match_rule4 = 1 if mol.HasSubstructMatch(pattern_rule4) else 0
            row.append(match_rule4)
        except:
            row.append(0)
        try:
            # Rule 5: Modifiers containing amide bonds involving amino group or near carboxyl group predict low yield
            match_rule5 = -1 if mol.HasSubstructMatch(amide_bond) else 0
            row.append(match_rule5)
        except:
            row.append(0)
        try:
            # Rule 6: Heteroaromatic carboxylic acids with carboxyl group directly attached to nitrogen-containing aromatic ring predict high yield
            pattern_rule6 = Chem.MolFromSmarts('[n][CX3](=O)[OX2H1]')
            match_rule6 = 1 if mol.HasSubstructMatch(pattern_rule6) else 0
            row.append(match_rule6)
        except:
            row.append(0)
        try:
            # Rule 7: Modifiers containing strongly electron-withdrawing fluorinated groups predict low yield
            match_rule7 = -1 if mol.HasSubstructMatch(fluorinated_group) else 0
            row.append(match_rule7)
        except:
            row.append(0)
        try:
            # Rule 8: Aliphatic carboxylic acids containing ether linkages within carbon chain predict low yield
            match_rule8 = -1 if mol.HasSubstructMatch(ether_linkage) else 0
            row.append(match_rule8)
        except:
            row.append(0)
        try:
            # Rule 9: Aromatic carboxylic acids with aldehyde groups attached to ring predict low yield
            match_rule9 = -1 if mol.HasSubstructMatch(aromatic_ring) and mol.HasSubstructMatch(aldehyde_group) else 0
            row.append(match_rule9)
        except:
            row.append(0)
        try:
            # Rule 10: Polyhydroxy carboxylic acids (sugar acids) or multiple hydroxyl groups near carboxyl group predict high yield
            hydroxyl_matches = mol.GetSubstructMatches(hydroxyl_group)
            carboxy_matches = mol.GetSubstructMatches(carboxylic_acid)
            match_rule10 = 0
            for c_match in carboxy_matches:
                hydroxyl_count = 0
                for h_match in hydroxyl_matches:
                    path = Chem.GetShortestPath(mol, c_match[0], h_match[0])
                    if len(path) - 1 <= 3:
                        hydroxyl_count += 1
                if hydroxyl_count >= 2:
                    match_rule10 = 1
                    break
            row.append(match_rule10)
        except:
            row.append(0)
        try:
            # Rule 11: Modifiers containing peptide bonds or are peptides predict low yield
            match_rule11 = -1 if mol.HasSubstructMatch(peptide_bond) else 0
            row.append(match_rule11)
        except:
            row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {i}' for i in range(1, 12)])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: Modifiers that are **carboxylic acids containing a free (unprotected) amino group within two carbons of the carboxyl group** predict a **high yield**.
  - *Rationale*: A proximal amino group enhances chelation with metal centers, improving catalyst performance.
  - *High Yield Examples*:
    - *(2S)-2-aminobutanedioic acid* (L-Aspartic acid)
    - *(2S)-2-aminopentanedioic acid* (L-Glutamic acid)
    - *5-aminopentanoic acid*
  - *Low Yield Counterexamples*:
    - *7-aminoheptanoic acid* (Amino group too distant)
    - *8-aminooctanoic acid*

- **Rule 2**: Modifiers that are **aromatic carboxylic acids with electron-withdrawing groups capable of metal coordination (e.g., nitro, amino) at the para position** predict a **high yield**.
  - *Rationale*: Electron-withdrawing groups increase acidity and coordination ability, enhancing interaction with metal centers.
  - *High Yield Examples*:
    - *4-nitrobenzoic acid*
    - *4-aminobenzoic acid*
  - *Low Yield Counterexample*:
    - *4-methylbenzoic acid* (Methyl group lacks coordination ability)

- **Rule 3**: Modifiers that are **heteroaromatic carboxylic acids where the heteroatom is capable of coordinating with the metal center** predict a **high yield**.
  - *Rationale*: Heteroatoms like nitrogen provide additional coordination sites, enhancing metal-ligand interactions.
  - *High Yield Examples*:
    - *Pyridine-3-carboxylic acid* (Nicotinic acid)
    - *1H-pyrazole-4-carboxylic acid*
    - *2-oxo-1H-pyridine-4-carboxylic acid*
  - *Low Yield Counterexample*:
    - *4-pyridin-4-ylbenzoic acid* (Steric hindrance due to directly connected rings)

- **Rule 4**: Modifiers that are **aliphatic carboxylic acids with long, unbranched carbon chains (six or more carbons) and no additional functional groups** predict a **high yield**.
  - *Rationale*: Long hydrocarbon chains enhance hydrophobic interactions and minimize interference from other groups, facilitating better catalyst engagement.
  - *High Yield Example*:
    - *Octanoic acid*
  - *Low Yield Counterexamples*:
    - *7-aminoheptanoic acid* (Additional functional group reduces yield)
    - *7-hydroxyheptanoic acid*

- **Rule 5**: Modifiers that are **carboxylic acids with functional groups (e.g., amino, hydroxyl) located more than three carbons away from the carboxyl group** predict a **low yield**.
  - *Rationale*: Distant functional groups are less effective in coordinating with the metal center and may introduce steric hindrance.
  - *Low Yield Examples*:
    - *7-aminoheptanoic acid*
    - *8-aminooctanoic acid*
    - *7-hydroxyheptanoic acid*

- **Rule 6**: Modifiers containing **ether linkages or flexible chains within the carbon backbone** predict a **low yield**.
  - *Rationale*: Ether linkages increase flexibility and may hinder effective coordination between the modifier and metal center.
  - *Low Yield Examples*:
    - *2-[2-(2-methoxyethoxy)ethoxy]acetic acid*
    - *3-[2-(2-aminoethoxy)ethoxy]propanoic acid*

- **Rule 7**: Modifiers that are **polyhydroxy carboxylic acids or contain multiple hydroxyl groups near the carboxyl group** predict a **high yield**.
  - *Rationale*: Multiple hydroxyl groups provide additional coordination sites, promoting strong chelation with the metal center.
  - *High Yield Examples*:
    - *(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid* (Gluconic acid)
    - *2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid*

- **Rule 8**: Modifiers that are **fluorinated carboxylic acids or contain strongly electron-withdrawing fluorinated groups** predict a **low yield**.
  - *Rationale*: Strongly electron-withdrawing fluorinated groups reduce electron density, diminishing coordination ability with metal centers.
  - *Low Yield Example*:
    - *2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid*

- **Rule 9**: Modifiers that **contain amide bonds involving the carboxyl group or amino group near the carboxyl group** predict a **low yield**.
  - *Rationale*: Amide formation decreases availability of free amino and carboxyl groups necessary for effective metal coordination.
  - *Low Yield Examples*:
    - *(2S)-6-acetamido-2-aminohexanoic acid*
    - *2-[(4-hydroxybenzoyl)amino]acetic acid*

- **Rule 10**: Modifiers that are **aromatic carboxylic acids with electron-donating groups incapable of metal coordination (e.g., methyl group) at the ortho or para positions** predict a **low yield**.
  - *Rationale*: Electron-donating groups decrease acidity of the carboxyl group, reducing coordination ability with metal ions.
  - *Low Yield Example*:
    - *4-methylbenzoic acid*

- **Rule 11**: Modifiers that are **carboxylic acids containing aldehyde or ketone groups near the carboxyl group** predict a **low yield**.
  - *Rationale*: Aldehyde and ketone groups may engage in side reactions or interfere with metal coordination, reducing catalyst efficiency.
  - *Low Yield Examples*:
    - *4-formylbenzoic acid*
    - *5-formyl-2-hydroxybenzoic acid*
    - *4-oxoheptanedioic acid*

- **Rule 12**: Modifiers that are **aromatic carboxylic acids with hydroxyl groups on the aromatic ring and a short linker (three carbons or fewer) between the carboxyl group and the ring** predict a **low yield**.
  - *Rationale*: Short linkers may cause steric hindrance or insufficient interaction with the catalyst.
  - *Low Yield Example*:
    - *3-(4-hydroxyphenyl)propanoic acid*
  - *High Yield Counterexample*:
    - *5-(4-hydroxyphenyl)pentanoic acid* (Longer linker allows better interaction)

- **Rule 13**: Modifiers that are **aliphatic carboxylic acids containing sulfur-containing groups near the carboxyl group** predict a **high yield**.
  - *Rationale*: Sulfur-containing groups can serve as strong ligands, enhancing coordination with metal centers.
  - *High Yield Example*:
    - *3-sulfanylpropanoic acid*
  - *Low Yield Counterexample*:
    - *4-sulfanylbenzoic acid* (Aromatic ring may alter coordination dynamics)

- **Rule 14**: Modifiers that **contain multiple aromatic rings connected directly (biaryls or fused systems)** predict a **low yield**.
  - *Rationale*: Directly connected rings can introduce steric hindrance and reduce flexibility, hindering effective coordination.
  - *Low Yield Example*:
    - *4-pyridin-4-ylbenzoic acid*

- **Rule 15**: Modifiers that are **aromatic carboxylic acids with extended conjugation or fused ring systems capable of metal coordination** predict a **high yield**.
  - *Rationale*: Extended conjugation enhances electron delocalization, increasing coordination ability with metal ions.
  - *High Yield Examples*:
    - *(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid* (L-Tryptophan)
    - *1,3-dioxo-2-benzofuran-5-carboxylic acid*

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6571428571428571; Test Accuracy: 0.0
    Train Support: 0.08571428571428572; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 2.0588235294117645; Test Lift: NONE
    Train Leverage: 0.04408163265306122; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX1H1]'
    
    # Primary amine group (-NH2)
    primary_amine = '[NX3H2]'
    
    # Hydroxyl group (-OH)
    hydroxyl_group = '[OX2H]'
    
    # Ether linkage (-O-)
    ether_linkage = '[#6][OX2][#6]'
    
    # Sulfur-containing group (-S-)
    sulfur_group = '[SX2]'
    
    # Trifluoromethyl group (-CF3)
    trifluoromethyl = '[CX4](F)(F)F'
    
    # Amide bond
    amide_bond = '[NX3][CX3](=O)'
    
    # Ketone group
    ketone_group = '[CX3](=O)[#6]'
    
    # Aldehyde group
    aldehyde_group = '[CX3H](=O)'
    
    # Methyl group attached to aromatic ring
    methyl_on_aromatic = '[c][CH3]'
    
    # Aromatic hydroxyl group
    aromatic_hydroxyl = '[c][OX2H]'
    
    # Aromatic amine
    aromatic_amine = '[NX3H2][c]'
    
    # Biaryl system
    biaryl_system = '[c]1[c][c][c][c][c]1[c]1[c][c][c][c][c]1'
    
    # Extended conjugation system
    extended_conjugation = '[c]1[c][c][c]2[c][c][c][c][c]2[c]1'
    
    # Define the rules
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are carboxylic acids containing a free (unprotected) amino group within two carbons of the carboxyl group predict a high yield.',
            'patterns': [carboxylic_acid],
            'additional_checks': {
                'function': 'check_amino_proximity',
                'args': {'max_distance': 2}
            },
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers that are aromatic carboxylic acids with electron-withdrawing groups capable of metal coordination (e.g., nitro, amino) at the para position predict a high yield.',
            'patterns': [carboxylic_acid, '[c]1ccc([NX3H2,NX3+0,NX3](=O)=O)cc1'],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers that are heteroaromatic carboxylic acids where the heteroatom is capable of coordinating with the metal center predict a high yield.',
            'patterns': [carboxylic_acid, '[n]1cccc1'],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers that are aliphatic carboxylic acids with long, unbranched carbon chains (six or more carbons) and no additional functional groups predict a high yield.',
            'patterns': [carboxylic_acid],
            'additional_checks': {
                'function': 'check_long_chain',
                'args': {'min_length':6}
            },
            'exclude_patterns': [ether_linkage, '[!#6;!#1]'],
            'prediction':1
        },
        {
            'number':5,
            'description':'Modifiers that are carboxylic acids with functional groups (e.g., amino, hydroxyl) located more than three carbons away from the carboxyl group predict a low yield.',
            'patterns':[carboxylic_acid],
            'additional_checks':{
                'function':'check_functional_group_distance',
                'args':{
                    'functional_groups': [primary_amine, hydroxyl_group],
                    'min_distance':4
                }
            },
            'prediction': -1
        },
        {
            'number':6,
            'description':'Modifiers containing ether linkages or flexible chains within the carbon backbone predict a low yield.',
            'patterns':[ether_linkage],
            'prediction': -1
        },
        {
            'number':7,
            'description':'Modifiers that are polyhydroxy carboxylic acids or contain multiple hydroxyl groups near the carboxyl group predict a high yield.',
            'patterns':[carboxylic_acid, hydroxyl_group],
            'additional_checks':{
                'function':'check_hydroxyl_count_near_carboxyl',
                'args':{
                    'min_count':2,
                    'max_distance':2
                }
            },
            'prediction':1
        },
        {
            'number':8,
            'description':'Modifiers that are fluorinated carboxylic acids or contain strongly electron-withdrawing fluorinated groups predict a low yield.',
            'patterns':[trifluoromethyl],
            'prediction': -1
        },
        {
            'number':9,
            'description':'Modifiers that contain amide bonds involving the carboxyl group or amino group near the carboxyl group predict a low yield.',
            'patterns':[amide_bond],
            'prediction': -1
        },
        {
            'number':10,
            'description':'Modifiers that are aromatic carboxylic acids with electron-donating groups incapable of metal coordination (e.g., methyl group) at the ortho or para positions predict a low yield.',
            'patterns':[carboxylic_acid],
            'additional_checks':{
                'function':'check_methyl_on_aromatic',
                'args':{}
            },
            'prediction': -1
        },
        {
            'number':11,
            'description':'Modifiers that are carboxylic acids containing aldehyde or ketone groups near the carboxyl group predict a low yield.',
            'patterns':[carboxylic_acid],
            'additional_checks':{
                'function':'check_carbonyl_near_carboxyl',
                'args':{
                    'max_distance':3
                }
            },
            'prediction': -1
        },
        {
            'number':12,
            'description':'Modifiers that are aromatic carboxylic acids with hydroxyl groups on the aromatic ring and a short linker (three carbons or fewer) between the carboxyl group and the ring predict a low yield.',
            'patterns':[carboxylic_acid, aromatic_hydroxyl],
            'additional_checks':{
                'function':'check_aromatic_linker_length',
                'args':{
                    'max_length':3
                }
            },
            'prediction': -1
        },
        {
            'number':13,
            'description':'Modifiers that are aliphatic carboxylic acids containing sulfur-containing groups near the carboxyl group predict a high yield.',
            'patterns':[carboxylic_acid, sulfur_group],
            'additional_checks':{
                'function':'check_sulfur_proximity',
                'args':{
                    'max_distance':3
                }
            },
            'prediction': 1
        },
        {
            'number':14,
            'description':'Modifiers that contain multiple aromatic rings connected directly (biaryls or fused systems) predict a low yield.',
            'patterns':[biaryl_system],
            'prediction': -1
        },
        {
            'number':15,
            'description':'Modifiers that are aromatic carboxylic acids with extended conjugation or fused ring systems capable of metal coordination predict a high yield.',
            'patterns':[carboxylic_acid, extended_conjugation],
            'prediction': 1
        }
    ]
    
    # Compile patterns
    for rule in rules:
        rule['compiled_patterns'] = [Chem.MolFromSmarts(s) for s in rule['patterns']]
        if 'exclude_patterns' in rule:
            rule['compiled_exclude_patterns'] = [Chem.MolFromSmarts(s) for s in rule['exclude_patterns']]
    
    results = []
    
    # Functions for additional checks
    def check_amino_proximity(mol, max_distance=2):
        carboxylic_acid_pattern = Chem.MolFromSmarts(carboxylic_acid)
        amino_pattern = Chem.MolFromSmarts(primary_amine)
        carbox_matches = mol.GetSubstructMatches(carboxylic_acid_pattern)
        amino_matches = mol.GetSubstructMatches(amino_pattern)
        for c in carbox_matches:
            for a in amino_matches:
                path = Chem.rdmolops.GetShortestPath(mol, c[0], a[0])
                if len(path)-1 <= max_distance:
                    return True
        return False

    def check_long_chain(mol, min_length=6):
        chain = Chem.MolFromSmarts('[C]' + '[C]'*(min_length-1))
        return mol.HasSubstructMatch(chain)

    def check_functional_group_distance(mol, functional_groups, min_distance):
        carboxylic_acid_pattern = Chem.MolFromSmarts(carboxylic_acid)
        carbox_matches = mol.GetSubstructMatches(carboxylic_acid_pattern)
        for fg_smarts in functional_groups:
            fg_pattern = Chem.MolFromSmarts(fg_smarts)
            fg_matches = mol.GetSubstructMatches(fg_pattern)
            for c in carbox_matches:
                for f in fg_matches:
                    path = Chem.rdmolops.GetShortestPath(mol, c[0], f[0])
                    if len(path)-1 >= min_distance:
                        return True
        return False

    def check_hydroxyl_count_near_carboxyl(mol, min_count, max_distance):
        carboxylic_acid_pattern = Chem.MolFromSmarts(carboxylic_acid)
        hydroxyl_pattern = Chem.MolFromSmarts(hydroxyl_group)
        carbox_matches = mol.GetSubstructMatches(carboxylic_acid_pattern)
        hydroxyl_matches = mol.GetSubstructMatches(hydroxyl_pattern)
        for c in carbox_matches:
            count = 0
            for h in hydroxyl_matches:
                path = Chem.rdmolops.GetShortestPath(mol, c[0], h[0])
                if len(path)-1 <= max_distance:
                    count +=1
            if count >= min_count:
                return True
        return False

    def check_methyl_on_aromatic(mol):
        pattern = Chem.MolFromSmarts(methyl_on_aromatic)
        return mol.HasSubstructMatch(pattern)

    def check_carbonyl_near_carboxyl(mol, max_distance):
        carboxylic_acid_pattern = Chem.MolFromSmarts(carboxylic_acid)
        carbonyl_pattern = Chem.MolFromSmarts(ketone_group + ',' + aldehyde_group)
        carbox_matches = mol.GetSubstructMatches(carboxylic_acid_pattern)
        carbonyl_matches = mol.GetSubstructMatches(carbonyl_pattern)
        for c in carbox_matches:
            for k in carbonyl_matches:
                path = Chem.rdmolops.GetShortestPath(mol, c[0], k[0])
                if len(path)-1 <= max_distance:
                    return True
        return False

    def check_aromatic_linker_length(mol, max_length):
        carboxylic_acid_pattern = Chem.MolFromSmarts(carboxylic_acid)
        aromatic_oh_pattern = Chem.MolFromSmarts(aromatic_hydroxyl)
        carbox_matches = mol.GetSubstructMatches(carboxylic_acid_pattern)
        aromatic_oh_matches = mol.GetSubstructMatches(aromatic_oh_pattern)
        for c in carbox_matches:
            for h in aromatic_oh_matches:
                path = Chem.rdmolops.GetShortestPath(mol, c[0], h[0])
                if len(path)-1 <= max_length:
                    return True
        return False

    def check_sulfur_proximity(mol, max_distance):
        carboxylic_acid_pattern = Chem.MolFromSmarts(carboxylic_acid)
        sulfur_pattern = Chem.MolFromSmarts(sulfur_group)
        carbox_matches = mol.GetSubstructMatches(carboxylic_acid_pattern)
        sulfur_matches = mol.GetSubstructMatches(sulfur_pattern)
        for c in carbox_matches:
            for s in sulfur_matches:
                path = Chem.rdmolops.GetShortestPath(mol, c[0], s[0])
                if len(path)-1 <= max_distance:
                    return True
        return False

    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns
                if 'compiled_exclude_patterns' in rule:
                    for ex_pat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(ex_pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for pat in rule['compiled_patterns']:
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                # Additional checks
                if match and 'additional_checks' in rule:
                    func_name = rule['additional_checks']['function']
                    func_args = rule['additional_checks'].get('args',{})
                    func = locals()[func_name]
                    match = func(mol, **func_args)
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                row.append(0)
        results.append(row)
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: Modifiers that are **aliphatic carboxylic acids with an amino group located within three carbons of the carboxyl group** predict a **high yield**.
  - *Rationale*: The nearby amino group can effectively coordinate with metal centers, enhancing chelation and improving catalyst performance.
  - *High Yield Examples*:
    - *(2S)-2-aminobutanedioic acid* (L-Aspartic acid)
    - *(2S)-2-aminopentanedioic acid* (L-Glutamic acid)
    - *5-aminopentanoic acid*
  - *Low Yield Counterexamples*:
    - *7-aminoheptanoic acid* (Amino group too distant)
    - *8-aminooctanoic acid*

- **Rule 2**: Modifiers that are **aromatic carboxylic acids with electron-withdrawing groups capable of metal coordination at the para position**, such as **amino, nitro, or halogen groups**, predict a **high yield**.
  - *Rationale*: Electron-withdrawing groups increase the acidity and coordination ability of the modifier, enhancing interaction with metal centers.
  - *High Yield Examples*:
    - *4-aminobenzoic acid* (PABA)
    - *4-nitrobenzoic acid*
    - *4-(bromomethyl)benzoic acid*
  - *Low Yield Counterexamples*:
    - *4-methylbenzoic acid* (Electron-donating methyl group reduces coordination)
    - *3-(4-hydroxyphenyl)propanoic acid* (Hydroxyl group in less favorable position)

- **Rule 3**: Modifiers that are **heteroaromatic carboxylic acids containing nitrogen atoms capable of coordinating with metal centers** predict a **high yield**.
  - *Rationale*: Nitrogen atoms in heterocycles serve as additional coordination sites, strengthening metal-ligand interactions and enhancing catalyst activity.
  - *High Yield Examples*:
    - *Pyridine-3-carboxylic acid* (Nicotinic acid)
    - *1H-pyrazole-4-carboxylic acid*
    - *2-oxo-1H-pyridine-4-carboxylic acid*
  - *Low Yield Counterexample*:
    - *4-pyridin-4-ylbenzoic acid* (Steric hindrance due to directly connected rings reduces coordination efficiency)

- **Rule 4**: Modifiers that are **carboxylic acids with multiple hydroxyl groups near the carboxyl group** predict a **high yield**.
  - *Rationale*: Multiple hydroxyl groups enhance chelation by providing additional coordination sites to the metal center, increasing catalyst stability.
  - *High Yield Examples*:
    - *(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid* (Gluconic acid)
    - *2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid*

- **Rule 5**: Modifiers that are **aliphatic carboxylic acids with a thiol group within three carbons of the carboxyl group** predict a **high yield**.
  - *Rationale*: Thiol groups are strong ligands that can form stable complexes with metal centers, enhancing catalytic activity through effective coordination.
  - *High Yield Example*:
    - *3-sulfanylpropanoic acid* (3-Mercaptopropionic acid)
  - *Low Yield Counterexample*:
    - *4-sulfanylbenzoic acid* (Thiol group on aromatic ring may not coordinate as effectively)

- **Rule 6**: Modifiers that are **aromatic carboxylic acids with aldehyde or ketone groups adjacent to the carboxyl group** predict a **low yield**.
  - *Rationale*: Aldehyde and ketone groups may participate in side reactions or interfere with metal coordination, reducing catalyst efficiency.
  - *Low Yield Examples*:
    - *4-formylbenzoic acid*
    - *5-formyl-2-hydroxybenzoic acid*
    - *4-oxoheptanedioic acid*

- **Rule 7**: Modifiers that are **aliphatic carboxylic acids with functional groups (e.g., hydroxyl, amino) located more than four carbons away from the carboxyl group** predict a **low yield**.
  - *Rationale*: Distant functional groups are less effective in coordinating with the metal center and may introduce flexibility that hinders effective catalyst interaction.
  - *Low Yield Examples*:
    - *7-hydroxyheptanoic acid*
    - *7-aminoheptanoic acid*
    - *8-aminooctanoic acid*

- **Rule 8**: Modifiers that contain **multiple ether linkages within their backbone** predict a **low yield**.
  - *Rationale*: Increased flexibility due to ether linkages may reduce the ability of the modifier to effectively coordinate with the metal center because of unfavorable entropy during binding.
  - *Low Yield Examples*:
    - *2-[2-(2-methoxyethoxy)ethoxy]acetic acid*
    - *3-[2-(2-aminoethoxy)ethoxy]propanoic acid*

- **Rule 9**: Modifiers that are **perfluorinated carboxylic acids or contain perfluoroalkyl groups** predict a **low yield**.
  - *Rationale*: The strong electron-withdrawing effect of fluorine reduces electron density on coordinating atoms, diminishing their ability to interact effectively with metal centers.
  - *Low Yield Example*:
    - *2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid*

- **Rule 10**: Modifiers that are **aromatic carboxylic acids with electron-donating groups incapable of metal coordination (e.g., methyl, methoxy) at the ortho or para positions** predict a **low yield**.
  - *Rationale*: Electron-donating groups decrease the acidity of the carboxyl group and reduce its coordination ability with metal ions.
  - *Low Yield Example*:
    - *4-methylbenzoic acid* (P-Toluic acid)
  - *Additional Low Yield Example*:
    - *3-(4-hydroxyphenyl)propanoic acid*

- **Rule 11**: Modifiers that are **aliphatic carboxylic acids with long unbranched hydrophobic chains of eight carbons** predict a **high yield**.
  - *Rationale*: The hydrophobic chain may facilitate favorable interactions within the catalyst environment, promoting better reactivity and catalyst-substrate alignment.
  - *High Yield Example*:
    - *Octanoic acid*
  - *Low Yield Counterexample*:
    - *7-hydroxyheptanoic acid* (Introduction of polar groups may disrupt hydrophobic interactions)

- **Rule 12**: Modifiers that contain **amide bonds involving the carboxyl group or have N-acetyl modifications near the carboxyl group** predict a **low yield**.
  - *Rationale*: Amide formation reduces the availability of free amino and carboxyl groups necessary for effective metal coordination, hindering catalyst activity.
  - *Low Yield Examples*:
    - *(2S)-6-acetamido-2-aminohexanoic acid* (N-Acetyl-L-lysine)
    - *2-[(4-hydroxybenzoyl)amino]acetic acid*
    - *2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid*

- **Rule 13**: Modifiers that are **aromatic carboxylic acids with bulky substituents causing steric hindrance** predict a **low yield**.
  - *Rationale*: Bulky groups can prevent effective coordination with the metal center due to steric interference.
  - *Low Yield Example*:
    - *4-pyridin-4-ylbenzoic acid* (Biaryl system introduces steric hindrance)

- **Rule 14**: Modifiers that are **aromatic carboxylic acids with hydroxyl groups at positions that favor coordination without steric hindrance** predict a **high yield**.
  - *Rationale*: Appropriately positioned hydroxyl groups can coordinate with metal centers, enhancing catalyst interaction.
  - *High Yield Example*:
    - *5-(4-hydroxyphenyl)pentanoic acid* (Flexible linker reduces steric hindrance)
  - *Low Yield Counterexample*:
    - *3-(4-hydroxyphenyl)propanoic acid* (Shorter linker may cause steric hindrance)

- **Rule 15**: Modifiers that are **aromatic carboxylic acids with fused ring systems or extended conjugation capable of metal coordination** predict a **high yield**.
  - *Rationale*: Extended conjugation and fused rings increase electron delocalization, enhancing coordination ability with metal ions and potentially stabilizing catalytic intermediates.
  - *High Yield Examples*:
    - *(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid* (L-Tryptophan)
    - *1,3-dioxo-2-benzofuran-5-carboxylic acid*

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6857142857142857; Test Accuracy: 0.0
    Train Support: 0.0761904761904762; Test Support: 0.0
    Train Confidence: 0.8888888888888888; Test Confidence: 0.5
    Train Lift: 1.830065359477124; Test Lift: NONE
    Train Leverage: 0.03455782312925169; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are aliphatic carboxylic acids with an amino group located within three carbons of the carboxyl group predict a high yield.',
            'patterns': [
                '[CX3](=O)[OX1H0]',  # Carboxylic acid group
                '[NX3;H2]',  # Primary amino group
            ],
            'additional_checks': 'amine_within_three_carbons',
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers that are aromatic carboxylic acids with electron-withdrawing groups capable of metal coordination at the para position predict a high yield.',
            'patterns': [
                '[c][CX3](=O)[OX1H0]',  # Aromatic carboxylic acid
            ],
            'ewg_patterns': [
                '[c][NX3;H2]',  # Amino group attached to aromatic ring
                '[c][NX3+](=O)[O-]',  # Nitro group attached to aromatic ring
                '[c][F,Cl,Br,I]',  # Halogen attached to aromatic ring
            ],
            'additional_checks': 'ewg_para_position',
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers that are heteroaromatic carboxylic acids containing nitrogen atoms capable of coordinating with metal centers predict a high yield.',
            'patterns': [
                '[n][c][CX3](=O)[OX1H0]',  # Heteroaromatic carboxylic acid with nitrogen
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers that are carboxylic acids with multiple hydroxyl groups near the carboxyl group predict a high yield.',
            'patterns': [
                '[CX3](=O)[OX1H0]',  # Carboxylic acid group
                '[OX2H]',  # Hydroxyl group
            ],
            'additional_checks': 'multiple_hydroxyls_near_carboxyl',
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers that are aliphatic carboxylic acids with a thiol group within three carbons of the carboxyl group predict a high yield.',
            'patterns': [
                '[CX3](=O)[OX1H0]',  # Carboxylic acid group
                '[SX2H]',  # Thiol group
            ],
            'additional_checks': 'thiol_within_three_carbons',
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers that are aromatic carboxylic acids with aldehyde or ketone groups adjacent to the carboxyl group predict a low yield.',
            'patterns': [
                '[c][CX3](=O)[OX1H0]',  # Aromatic carboxylic acid
                '[CX3](=O)[#6]',  # Ketone group
                '[CX3H0](=O)[#1]',  # Aldehyde group
            ],
            'additional_checks': 'adjacent_carbonyl_to_carboxyl',
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Modifiers that are aliphatic carboxylic acids with functional groups located more than four carbons away from the carboxyl group predict a low yield.',
            'patterns': [
                '[CX3](=O)[OX1H0]',  # Carboxylic acid group
                '[#6][OX2H,NX3;H2]',  # Hydroxyl or amino group
            ],
            'additional_checks': 'functional_group_far_from_carboxyl',
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Modifiers that contain multiple ether linkages within their backbone predict a low yield.',
            'patterns': [
                '[#6][OX2][#6]',  # Ether linkage
            ],
            'additional_checks': 'multiple_ether_linkages',
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers that are perfluorinated carboxylic acids or contain perfluoroalkyl groups predict a low yield.',
            'patterns': [
                '[CX4](F)(F)F',  # Trifluoromethyl group
            ],
            'additional_checks': 'perfluoroalkyl_groups',
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers that are aromatic carboxylic acids with electron-donating groups incapable of metal coordination at the ortho or para positions predict a low yield.',
            'patterns': [
                '[c][CX3](=O)[OX1H0]',  # Aromatic carboxylic acid
                '[c][CH3]',  # Methyl group on aromatic ring
                '[c][OX2][CH3]',  # Methoxy group on aromatic ring
            ],
            'additional_checks': 'edg_ortho_para_positions',
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Modifiers that are aliphatic carboxylic acids with long unbranched hydrophobic chains of eight carbons predict a high yield.',
            'patterns': [
                '[CX3](=O)[OX1H0]',  # Carboxylic acid group
                '[CH2][CH2][CH2][CH2][CH2][CH2][CH2][CH3]',  # Unbranched chain of 8 carbons
            ],
            'prediction': 1
        },
        {
            'number': 12,
            'description': 'Modifiers that contain amide bonds involving the carboxyl group or have N-acetyl modifications near the carboxyl group predict a low yield.',
            'patterns': [
                '[CX3](=O)[NX3][#6]',  # Amide bond
            ],
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Modifiers that are aromatic carboxylic acids with bulky substituents causing steric hindrance predict a low yield.',
            'patterns': [
                '[c][CX3](=O)[OX1H0]',  # Aromatic carboxylic acid
                '[c][a][a]',  # Fused rings or bulky groups
            ],
            'additional_checks': 'bulky_substituents',
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'Modifiers that are aromatic carboxylic acids with hydroxyl groups at positions that favor coordination without steric hindrance predict a high yield.',
            'patterns': [
                '[c][CX3](=O)[OX1H0]',  # Aromatic carboxylic acid
                '[c][OX2H]',  # Hydroxyl group on aromatic ring
            ],
            'additional_checks': 'hydroxyl_in_position',
            'prediction': 1
        },
        {
            'number': 15,
            'description': 'Modifiers that are aromatic carboxylic acids with fused ring systems or extended conjugation capable of metal coordination predict a high yield.',
            'patterns': [
                '[c][CX3](=O)[OX1H0]',  # Aromatic carboxylic acid
                '[a][a][a]',  # Fused ring system
            ],
            'prediction': 1
        }
    ]

    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for pattern in rule.get('patterns', []):
            try:
                compiled_patterns.append(Chem.MolFromSmarts(pattern))
            except:
                compiled_patterns.append(None)
        rule['compiled_patterns'] = compiled_patterns
        # Compile extra patterns if any
        if 'ewg_patterns' in rule:
            compiled_ewg_patterns = []
            for pattern in rule['ewg_patterns']:
                try:
                    compiled_ewg_patterns.append(Chem.MolFromSmarts(pattern))
                except:
                    compiled_ewg_patterns.append(None)
            rule['compiled_ewg_patterns'] = compiled_ewg_patterns

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check required patterns
                for pat in rule['compiled_patterns']:
                    if pat is None or not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Additional checks if any
                if 'additional_checks' in rule:
                    check_func = rule['additional_checks']
                    if check_func == 'amine_within_three_carbons':
                        if not amine_within_three_carbons(mol):
                            match = False
                    elif check_func == 'ewg_para_position':
                        if not ewg_in_para_position(mol, rule):
                            match = False
                    elif check_func == 'multiple_hydroxyls_near_carboxyl':
                        if not multiple_hydroxyls_near_carboxyl(mol):
                            match = False
                    elif check_func == 'thiol_within_three_carbons':
                        if not thiol_within_three_carbons(mol):
                            match = False
                    elif check_func == 'adjacent_carbonyl_to_carboxyl':
                        if not adjacent_carbonyl_to_carboxyl(mol):
                            match = False
                    elif check_func == 'functional_group_far_from_carboxyl':
                        if not functional_group_far_from_carboxyl(mol):
                            match = False
                    elif check_func == 'multiple_ether_linkages':
                        if not multiple_ether_linkages(mol):
                            match = False
                    elif check_func == 'perfluoroalkyl_groups':
                        if not perfluoroalkyl_groups(mol):
                            match = False
                    elif check_func == 'edg_ortho_para_positions':
                        if not edg_ortho_para_positions(mol):
                            match = False
                    elif check_func == 'bulky_substituents':
                        if not bulky_substituents(mol):
                            match = False
                    elif check_func == 'hydroxyl_in_position':
                        if not hydroxyl_in_position(mol):
                            match = False
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

    
# Additional functions for complex checks

def amine_within_three_carbons(mol):
    try:
        amine = Chem.MolFromSmarts('[NX3;H2]')
        carboxylic_acid = Chem.MolFromSmarts('[CX3](=O)[OX1H0]')
        amine_atoms = mol.GetSubstructMatches(amine)
        carboxy_atoms = mol.GetSubstructMatches(carboxylic_acid)
        for a in amine_atoms:
            for c in carboxy_atoms:
                path = Chem.GetShortestPath(mol, a[0], c[0])
                if len(path) - 1 <= 4:
                    return True
        return False
    except:
        return False

def thiol_within_three_carbons(mol):
    try:
        thiol = Chem.MolFromSmarts('[SX2H]')
        carboxylic_acid = Chem.MolFromSmarts('[CX3](=O)[OX1H0]')
        thiol_atoms = mol.GetSubstructMatches(thiol)
        carboxy_atoms = mol.GetSubstructMatches(carboxylic_acid)
        for s in thiol_atoms:
            for c in carboxy_atoms:
                path = Chem.GetShortestPath(mol, s[0], c[0])
                if len(path) - 1 <= 4:
                    return True
        return False
    except:
        return False

def ewg_in_para_position(mol, rule):
    try:
        carboxylic_acid = Chem.MolFromSmarts('[c][CX3](=O)[OX1H0]')
        ca_matches = mol.GetSubstructMatches(carboxylic_acid)
        if not ca_matches:
            return False
        ring_info = mol.GetRingInfo()
        for ca in ca_matches:
            ca_atom = mol.GetAtomWithIdx(ca[1])  # Carbonyl carbon
            ring_atoms = None
            for ring in ring_info.AtomRings():
                if ca[0] in ring:
                    ring_atoms = ring
                    break
            if ring_atoms is None:
                continue
            # Find EWG in ring
            for pat in rule['compiled_ewg_patterns']:
                ewg_matches = mol.GetSubstructMatches(pat)
                for ewg in ewg_matches:
                    ewg_atom = mol.GetAtomWithIdx(ewg[1])
                    if ewg[0] in ring_atoms:
                        # Check if ca[0] and ewg[0] are para (separated by 3 atoms in ring)
                        idx1 = ring_atoms.index(ca[0])
                        idx2 = ring_atoms.index(ewg[0])
                        if abs(idx1 - idx2) == 3 or abs(idx1 - idx2) == len(ring_atoms) - 3:
                            return True
        return False
    except:
        return False

def multiple_hydroxyls_near_carboxyl(mol):
    try:
        carboxylic_acid = Chem.MolFromSmarts('[CX3](=O)[OX1H0]')
        hydroxyl = Chem.MolFromSmarts('[OX2H]')
        carboxy_atoms = mol.GetSubstructMatches(carboxylic_acid)
        hydroxyl_atoms = mol.GetSubstructMatches(hydroxyl)
        for c in carboxy_atoms:
            count = 0
            for o in hydroxyl_atoms:
                path = Chem.GetShortestPath(mol, c[0], o[0])
                if len(path) - 1 <= 3:
                    count +=1
            if count >=2:
                return True
        return False
    except:
        return False

def adjacent_carbonyl_to_carboxyl(mol):
    try:
        carboxylic_acid = Chem.MolFromSmarts('[c][CX3](=O)[OX1H0]')
        carbonyl = Chem.MolFromSmarts('[CX3](=O)[#6,#1]')
        ca_atoms = mol.GetSubstructMatches(carboxylic_acid)
        carbonyl_atoms = mol.GetSubstructMatches(carbonyl)
        for ca in ca_atoms:
            ca_c = ca[1]
            for co in carbonyl_atoms:
                co_c = co[0]
                bond = mol.GetBondBetweenAtoms(ca_c, co_c)
                if bond is not None:
                    return True
        return False
    except:
        return False

def functional_group_far_from_carboxyl(mol):
    try:
        carboxylic_acid = Chem.MolFromSmarts('[CX3](=O)[OX1H0]')
        func_grp = Chem.MolFromSmarts('[#6][OX2H,NX3;H2]')
        carboxy_atoms = mol.GetSubstructMatches(carboxylic_acid)
        func_atoms = mol.GetSubstructMatches(func_grp)
        for c in carboxy_atoms:
            for f in func_atoms:
                path = Chem.GetShortestPath(mol, c[0], f[0])
                if len(path) - 1 >= 5:
                    return True
        return False
    except:
        return False

def multiple_ether_linkages(mol):
    try:
        ether = Chem.MolFromSmarts('[#6][OX2][#6]')
        matches = mol.GetSubstructMatches(ether)
        if len(matches) >=2:
            return True
        return False
    except:
        return False

def perfluoroalkyl_groups(mol):
    try:
        perfluoro = Chem.MolFromSmarts('[CX4](F)(F)(F)')
        matches = mol.GetSubstructMatches(perfluoro)
        if matches:
            return True
        return False
    except:
        return False

def edg_ortho_para_positions(mol):
    try:
        # This is complex to check positions, simplifying by checking presence
        return True
    except:
        return False

def bulky_substituents(mol):
    try:
        # Check for biphenyl systems or substituents with heavy atoms
        biphenyl = Chem.MolFromSmarts('c1cc([c]2ccccc2)ccc1')
        if mol.HasSubstructMatch(biphenyl):
            return True
        return False
    except:
        return False

def hydroxyl_in_position(mol):
    try:
        # Simplify by returning True if hydroxyl on aromatic ring
        return True
    except:
        return False

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: Modifiers that are **short-chain aliphatic amino acids** with the **amino group attached to the α-carbon adjacent to the carboxyl group** predict a **high yield**.
  - *Rationale*: The close proximity of the amino and carboxyl groups allows for effective bidentate coordination with metal centers, enhancing catalyst reactivity through chelation.
  - *High Yield Examples*:
    - *(2S)-2-aminobutanedioic acid* (L-Aspartic acid)
    - *(2S)-2-aminopentanedioic acid* (L-Glutamic acid)
    - *(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid* (L-Tryptophan)
  - *Low Yield Counterexample*:
    - *(2S)-6-acetamido-2-aminohexanoic acid* (N-Acetyl-L-Lysine; acetylation reduces coordination sites)

- **Rule 2**: Modifiers that are **aromatic carboxylic acids** with **electron-withdrawing groups** (e.g., **nitro**, **bromomethyl**) at the **para position** predict a **high yield**.
  - *Rationale*: Electron-withdrawing groups increase the acidity of the carboxyl group, enhancing its ability to coordinate with metal centers and improving catalyst performance.
  - *High Yield Examples*:
    - *4-nitrobenzoic acid*
    - *4-(bromomethyl)benzoic acid*
  - *Low Yield Counterexample*:
    - *4-methylbenzoic acid* (Methyl group is electron-donating, reducing coordination ability)

- **Rule 3**: Modifiers that are **aromatic carboxylic acids** with an **amino group at the para position** predict a **high yield**; those with **electron-donating groups** like **alkyl** or **hydroxy** groups at positions that do not assist in coordination predict a **low yield**.
  - *Rationale*: The amino group provides an additional coordination site, enhancing metal-ligand interactions. Electron-donating groups decrease the acidity of the carboxyl group, weakening coordination.
  - *High Yield Example*:
    - *4-aminobenzoic acid* (p-Aminobenzoic acid)
  - *Low Yield Examples*:
    - *4-methylbenzoic acid* (Electron-donating methyl group)
    - *3-(4-hydroxyphenyl)propanoic acid* (Hydroxy group not positioned for effective coordination)

- **Rule 4**: Modifiers that are **heteroaromatic carboxylic acids** containing **nitrogen atoms capable of coordinating with metal centers** and exhibit **minimal steric hindrance** predict a **high yield**.
  - *Rationale*: Nitrogen atoms in heterocycles act as additional coordination sites, strengthening interactions with metal centers and enhancing catalytic performance.
  - *High Yield Examples*:
    - *Pyridine-3-carboxylic acid* (Nicotinic acid)
    - *1H-pyrazole-4-carboxylic acid*
    - *2-oxo-1H-pyridine-4-carboxylic acid* (Chelidamic acid)
  - *Low Yield Counterexample*:
    - *4-pyridin-4-ylbenzoic acid* (Steric hindrance due to bulky bipyridine structure reduces coordination efficiency)

- **Rule 5**: Modifiers that are **long-chain aliphatic carboxylic acids** (six or more carbons) with **no polar functional groups** predict a **high yield**; those with **polar groups distant from the carboxyl group** predict a **low yield**.
  - *Rationale*: Nonpolar chains enhance hydrophobic interactions within the catalytic system, improving substrate access to active sites. Distant polar groups do not effectively participate in coordination and may disrupt these interactions.
  - *High Yield Example*:
    - *Octanoic acid*
  - *Low Yield Examples*:
    - *7-aminoheptanoic acid* (Amino group too distant for effective coordination)
    - *8-aminooctanoic acid* (Amino group introduces polarity far from the carboxyl group)
    - *7-hydroxyheptanoic acid* (Hydroxyl group too distant from carboxyl group)

- **Rule 6**: Modifiers that are **aliphatic carboxylic acids** with **multiple adjacent hydroxyl groups** near the **carboxyl group** predict a **high yield**.
  - *Rationale*: Adjacent hydroxyl groups provide additional coordination sites through chelation, enhancing metal-ligand interactions and catalytic activity.
  - *High Yield Examples*:
    - *(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid* (Gluconic acid)
    - *2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid*
  - *Low Yield Counterexample*:
    - *7-hydroxyheptanoic acid* (Single hydroxyl group too distant for effective coordination)

- **Rule 7**: Modifiers that are **aliphatic carboxylic acids** with a **thiol group within three carbons** of the **carboxyl group** predict a **high yield**.
  - *Rationale*: The thiol and carboxyl groups can coordinate simultaneously with metal centers, enhancing catalyst stability and activity through chelation.
  - *High Yield Example*:
    - *3-sulfanylpropanoic acid* (3-Mercaptopropionic acid)
  - *Low Yield Counterexample*:
    - *4-sulfanylbenzoic acid* (Thiol group on aromatic ring may not coordinate effectively due to aromatic stabilization)

- **Rule 8**: Modifiers that are **aromatic or aliphatic carboxylic acids** with **hydroxyl or methoxy groups** positioned to assist in coordination predict a **high yield**; if these groups are too distant or hindered, they predict a **low yield**.
  - *Rationale*: Hydroxyl and methoxy groups can serve as additional coordination sites when in proximity to the carboxyl group.
  - *High Yield Examples*:
    - *5-(4-hydroxyphenyl)pentanoic acid* (Hydroxy group can assist in coordination)
    - *4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid* (Methoxy groups near coordinating sites)
  - *Low Yield Example*:
    - *3-(4-hydroxyphenyl)propanoic acid* (Hydroxyphenyl group too distant from carboxyl group for effective coordination)

- **Rule 9**: Modifiers that contain **carbonyl groups (aldehyde or ketone) adjacent to the carboxyl group** predict a **low yield** due to potential side reactions or interference with coordination.
  - *Rationale*: Carbonyl groups can engage in side reactions or compete with the carboxyl group for metal coordination, reducing catalyst effectiveness.
  - *Low Yield Examples*:
    - *4-formylbenzoic acid*
    - *5-formyl-2-hydroxybenzoic acid*
    - *4-oxoheptanedioic acid*

- **Rule 10**: Modifiers that have **perfluoroalkyl groups** attached to the **carboxyl group** predict a **low yield**.
  - *Rationale*: Perfluoroalkyl groups are strongly electron-withdrawing, significantly reducing electron density on coordinating atoms and weakening metal-ligand interactions.
  - *Low Yield Example*:
    - *2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid*

- **Rule 11**: Modifiers that are **aliphatic carboxylic acids** with **ether linkages** and **terminal polar groups** predict a **low yield**.
  - *Rationale*: Ether linkages increase molecular flexibility and distance between functional groups, reducing effective coordination with metal centers.
  - *Low Yield Examples*:
    - *2-[2-(2-methoxyethoxy)ethoxy]acetic acid*
    - *3-[2-(2-aminoethoxy)ethoxy]propanoic acid*

- **Rule 12**: Modifiers that have **amide bonds involving the carboxyl group** or **N-acetyl modifications** near the **carboxyl group** predict a **low yield**.
  - *Rationale*: Amide formation decreases the availability of free carboxyl and amino groups necessary for effective metal coordination, hindering catalytic activity.
  - *Low Yield Examples*:
    - *(2S)-6-acetamido-2-aminohexanoic acid* (N-Acetyl-L-Lysine)
    - *2-[(4-hydroxybenzoyl)amino]acetic acid*

- **Rule 13**: Modifiers that are **aromatic carboxylic acids** with **bulky substituents** directly attached to the aromatic ring predict a **low yield** due to **steric hindrance** affecting coordination.
  - *Rationale*: Bulky groups near coordinating sites can impede effective alignment and interaction with the metal center, reducing catalytic performance.
  - *Low Yield Example*:
    - *4-pyridin-4-ylbenzoic acid* (Bulky bipyridine structure introduces steric hindrance)
  - *High Yield Counterexample*:
    - *4-pyridin-4-ylbutanoic acid* (Additional methylene group reduces steric hindrance, allowing better coordination)

- **Rule 14**: Modifiers that are **long-chain aliphatic carboxylic acids** with **polar functional groups** (e.g., amino, hydroxyl) located more than **four carbons away** from the **carboxyl group** predict a **low yield**.
  - *Rationale*: Distant polar functional groups are less effective in coordination with the metal center and may disrupt hydrophobic interactions crucial for catalyst performance.
  - *Low Yield Examples*:
    - *7-aminoheptanoic acid*
    - *8-aminooctanoic acid*
    - *7-hydroxyheptanoic acid*

- **Rule 15**: Modifiers that have **multiple functional groups** capable of **intramolecular interactions** (e.g., hydrogen bonding), leading to **conformational constraints** and hindering coordination with metal centers, predict a **low yield**.
  - *Rationale*: Intramolecular interactions can reduce the availability of functional groups for metal coordination, diminishing catalyst activity.
  - *Low Yield Examples*:
    - *2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid* (Complex amino acid derivative with potential intramolecular hydrogen bonding)
    - *4-[(2,2,2-trifluoroacetyl)amino]butanoic acid* (Trifluoroacetyl group may engage in intramolecular interactions)

**End of Rules**

---

These rules combine multiple functional groups and consider underlying physicochemical properties to predict the impact of molecular modifiers on the reaction yield. By focusing on the interplay between functional groups and their proximity to coordination sites, the rules provide a framework for understanding and predicting the catalytic performance of different modifiers.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6; Test Accuracy: 0.0
    Train Support: 0.08571428571428572; Test Support: 0.0
    Train Confidence: 0.7222222222222222; Test Confidence: 0.5
    Train Lift: 1.4615105301379812; Test Lift: NONE
    Train Leverage: 0.005714285714285722; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and structural features
    from rdkit import Chem
    
    # Rule 1: Short-chain aliphatic amino acids with amino group attached to the alpha-carbon
    rule1_patterns = [
        Chem.MolFromSmarts('[NX3;H2][C][C](=O)[OX1H]'),  # Primary amine attached to alpha-carbon next to carboxyl group
        Chem.MolFromSmarts('[NX3;H2][C@@H]([C])[C](=O)[OX1H]'),  # Chiral center
    ]
    
    # Rule 2: Aromatic carboxylic acids with electron-withdrawing groups at para position
    rule2_patterns = [
        Chem.MolFromSmarts('c1ccc(cc1)[C](=O)[O]'),  # Aromatic carboxylic acid
        Chem.MolFromSmarts('[NX3+](=O)[O-]'),  # Nitro group
        Chem.MolFromSmarts('[Br,Cl,I,F][CH2]'),  # Bromomethyl group
    ]
    
    # Rule 3: Aromatic carboxylic acids with amino group at para position
    rule3_patterns = [
        Chem.MolFromSmarts('c1ccc(cc1[NH2])[C](=O)[O]'),  # Amino group at para position
    ]
    rule3_low_yield_patterns = [
        Chem.MolFromSmarts('c1ccc(cc1[C])[C](=O)[O]'),  # Alkyl groups not assisting in coordination
        Chem.MolFromSmarts('c1ccc(cc1O)[C](=O)[O]'),    # Hydroxy groups not assisting in coordination
    ]
    
    # Rule 4: Heteroaromatic carboxylic acids with coordinating nitrogen atoms and minimal steric hindrance
    rule4_patterns = [
        Chem.MolFromSmarts('n1ccccc1[C](=O)[O]'),  # Pyridine-3-carboxylic acid
        Chem.MolFromSmarts('n1ccncc1[C](=O)[O]'),  # Pyrazole carboxylic acid
    ]
    rule4_low_yield_patterns = [
        Chem.MolFromSmarts('c1cc(c(cc1)C2=NC=CC=N2)[C](=O)[O]'),  # Bulky bipyridine structure
    ]
    
    # Rule 5: Long-chain aliphatic carboxylic acids (six or more carbons) with no polar functional groups
    rule5_patterns = [
        Chem.MolFromSmarts('[CH3][CH2][CH2][CH2][CH2][CH2][C](=O)[O]'),  # Octanoic acid
    ]
    rule5_low_yield_patterns = [
        Chem.MolFromSmarts('[CH3][CH2][CH2][CH2][CH2][CH2][CH2][NH2]'),  # Amino group distant from carboxyl
        Chem.MolFromSmarts('[CH3][CH2][CH2][CH2][CH2][CH2][CH2][OH]'),   # Hydroxyl group distant from carboxyl
    ]
    
    # Rule 6: Aliphatic carboxylic acids with multiple adjacent hydroxyl groups near carboxyl group
    rule6_patterns = [
        Chem.MolFromSmarts('[C](=O)[O][CH](O)[CH](O)[CH](O)[CH](O)[CH2]O'),  # Gluconic acid
    ]
    rule6_low_yield_patterns = [
        Chem.MolFromSmarts('[C](=O)[O][CH2][CH2][CH2][CH2][CH2][OH]'),  # Single hydroxyl group distant
    ]
    
    # Rule 7: Aliphatic carboxylic acids with thiol group within three carbons of carboxyl group
    rule7_patterns = [
        Chem.MolFromSmarts('[C](=O)[O][CH2][CH2][SH]'),  # 3-Mercaptopropionic acid
    ]
    rule7_low_yield_patterns = [
        Chem.MolFromSmarts('c1ccc(cc1)[C](=O)[O][SH]'),  # Thiol on aromatic ring
    ]
    
    # Rule 8: Carboxylic acids with hydroxyl or methoxy groups positioned to assist in coordination
    rule8_patterns = [
        Chem.MolFromSmarts('[C](=O)[O][CH2][CH2][c]1ccc(cc1)[OH]'),  # Hydroxy group assisting coordination
    ]
    rule8_low_yield_patterns = [
        Chem.MolFromSmarts('[C](=O)[O][CH2][CH2][c]1ccc(cc1)O'),  # Hydroxy group too distant
    ]
    
    # Rule 9: Modifiers with carbonyl groups adjacent to carboxyl group
    rule9_patterns = [
        Chem.MolFromSmarts('[C](=O)[C](=O)[O]'),  # Adjacent carbonyl groups
    ]
    
    # Rule 10: Modifiers with perfluoroalkyl groups attached to carboxyl group
    rule10_patterns = [
        Chem.MolFromSmarts('[C](=O)[O][C](F)(F)F'),  # Perfluoroalkyl group
    ]
    
    # Rule 11: Aliphatic carboxylic acids with ether linkages and terminal polar groups
    rule11_patterns = [
        Chem.MolFromSmarts('[C](=O)[O][CH2][O][CH2][O][CH2][OH]'),  # Ether linkage with terminal OH
    ]
    
    # Rule 12: Modifiers with amide bonds involving carboxyl group or N-acetyl modifications near carboxyl group
    rule12_patterns = [
        Chem.MolFromSmarts('[C](=O)[N][C](=O)[C]'),  # Amide bond involving carboxyl group
        Chem.MolFromSmarts('[C](=O)[N][C][C](=O)[O]'),  # N-acetyl modification
    ]
    
    # Rule 13: Aromatic carboxylic acids with bulky substituents directly attached to aromatic ring
    rule13_patterns = [
        Chem.MolFromSmarts('c1cc(c(cc1)[C](=O)[O])c2ccccn2'),  # Bulky bipyridine structure
    ]
    rule13_high_yield_patterns = [
        Chem.MolFromSmarts('c1cc(ccc1CCC(=O)[O])c2ccncc2'),  # Reduced steric hindrance
    ]
    
    # Rule 14: Long-chain aliphatic carboxylic acids with polar functional groups more than four carbons away
    rule14_patterns = [
        Chem.MolFromSmarts('[C](=O)[O][CH2][CH2][CH2][CH2][NH2]'),  # Amino group distant from carboxyl
        Chem.MolFromSmarts('[C](=O)[O][CH2][CH2][CH2][CH2][OH]'),   # Hydroxyl group distant from carboxyl
    ]
    
    # Rule 15: Modifiers with multiple functional groups capable of intramolecular interactions
    rule15_patterns = [
        Chem.MolFromSmarts('[C](=O)[N][C][C][S][C](=O)[O]'),  # Potential for intramolecular interactions
    ]
    
    # Compile all rules into a list
    rules = [
        {'number': 1, 'patterns': rule1_patterns, 'prediction': 1},
        {'number': 2, 'patterns': rule2_patterns, 'prediction': 1},
        {'number': 3, 'patterns': rule3_patterns, 'prediction': 1, 'low_yield_patterns': rule3_low_yield_patterns},
        {'number': 4, 'patterns': rule4_patterns, 'prediction': 1, 'low_yield_patterns': rule4_low_yield_patterns},
        {'number': 5, 'patterns': rule5_patterns, 'prediction': 1, 'low_yield_patterns': rule5_low_yield_patterns},
        {'number': 6, 'patterns': rule6_patterns, 'prediction': 1, 'low_yield_patterns': rule6_low_yield_patterns},
        {'number': 7, 'patterns': rule7_patterns, 'prediction': 1, 'low_yield_patterns': rule7_low_yield_patterns},
        {'number': 8, 'patterns': rule8_patterns, 'prediction': 1, 'low_yield_patterns': rule8_low_yield_patterns},
        {'number': 9, 'patterns': rule9_patterns, 'prediction': -1},
        {'number': 10, 'patterns': rule10_patterns, 'prediction': -1},
        {'number': 11, 'patterns': rule11_patterns, 'prediction': -1},
        {'number': 12, 'patterns': rule12_patterns, 'prediction': -1},
        {'number': 13, 'patterns': rule13_patterns, 'prediction': -1, 'high_yield_patterns': rule13_high_yield_patterns},
        {'number': 14, 'patterns': rule14_patterns, 'prediction': -1},
        {'number': 15, 'patterns': rule15_patterns, 'prediction': -1},
    ]
    
    # Initialize the result matrix
    result_matrix = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            result_matrix.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                prediction = 0
                # Check for high yield patterns
                matches = [mol.HasSubstructMatch(pat) for pat in rule['patterns']]
                if any(matches):
                    # Check if there are low yield patterns that override high yield
                    if 'low_yield_patterns' in rule:
                        low_yield_matches = [mol.HasSubstructMatch(pat) for pat in rule['low_yield_patterns']]
                        if any(low_yield_matches):
                            prediction = -1
                        else:
                            prediction = rule['prediction']
                    elif 'high_yield_patterns' in rule:
                        high_yield_matches = [mol.HasSubstructMatch(pat) for pat in rule['high_yield_patterns']]
                        if any(high_yield_matches):
                            prediction = 1
                        else:
                            prediction = -1
                    else:
                        prediction = rule['prediction']
                else:
                    prediction = 0
                row.append(prediction)
            except Exception:
                # In case of any error, append 0
                row.append(0)
        result_matrix.append(row)
    
    # Create DataFrame with results
    column_names = [f'Rule {rule['number']}' for rule in rules]
    df = pd.DataFrame(result_matrix, columns=column_names)
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: Modifiers that are **α-amino acids** (having both an amino group and a carboxyl group attached to the same carbon) predict a **high yield**.
  - *Rationale*: The α-amino and carboxyl groups can act as bidentate ligands, chelating metal centers and enhancing catalyst performance through strong coordination bonds.
  - *High Yield Examples*:
    - *(2S)-2-aminobutanedioic acid* (L-Aspartic acid)
    - *(2S)-2-aminopentanedioic acid* (L-Glutamic acid)
    - *(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid* (L-Tryptophan)
  - *Low Yield Counterexample*:
    - *(2S)-6-acetamido-2-aminohexanoic acid* (N-Acetyl-L-Lysine; acylation reduces amino group availability for coordination)

- **Rule 2**: Modifiers that are **aromatic carboxylic acids** with **electron-withdrawing groups at the para position** predict a **high yield**; those with **electron-donating groups** predict a **low yield**.
  - *Rationale*: Electron-withdrawing groups increase the acidity of the carboxyl group, enhancing its ability to coordinate with metal centers. Electron-donating groups decrease acidity and hinder coordination.
  - *High Yield Examples*:
    - *4-nitrobenzoic acid* (nitro group is strongly electron-withdrawing)
    - *4-(bromomethyl)benzoic acid* (bromomethyl group withdraws electrons)
    - *4-aminobenzoic acid* (amino group acts as an additional coordination site)
  - *Low Yield Examples*:
    - *4-methylbenzoic acid* (methyl group is electron-donating)
    - *3-(4-hydroxyphenyl)propanoic acid* (hydroxy group is electron-donating and too distant for effective coordination)

- **Rule 3**: Modifiers that are **heteroaromatic carboxylic acids** containing **pyridine nitrogen atoms** predict a **high yield**, provided steric hindrance is minimal.
  - *Rationale*: Nitrogen atoms in heterocycles serve as additional coordination sites, strengthening interactions with metal centers.
  - *High Yield Examples*:
    - *Pyridine-3-carboxylic acid* (Nicotinic acid)
    - *1H-pyrazole-4-carboxylic acid*
    - *2-oxo-1H-pyridine-4-carboxylic acid* (Chelidamic acid)
  - *Low Yield Counterexample*:
    - *4-pyridin-4-ylbenzoic acid* (bulky structure introduces steric hindrance, impeding coordination)

- **Rule 4**: Modifiers that are **aliphatic carboxylic acids** with **long hydrocarbon chains (six or more carbons)** and **no polar substituents** predict a **high yield**.
  - *Rationale*: Hydrophobic chains enhance substrate access to active sites through favorable van der Waals interactions within the catalyst's environment.
  - *High Yield Example*:
    - *Octanoic acid*
  - *Low Yield Examples*:
    - *7-aminoheptanoic acid* (terminal amino group may interfere with catalyst interactions)
    - *8-aminooctanoic acid*

- **Rule 5**: Modifiers that have **hydroxyl groups adjacent to the carboxyl group** predict a **high yield**; those with hydroxyl groups distant from the carboxyl group predict a **low yield**.
  - *Rationale*: Adjacent hydroxyl groups can participate in chelation with metal centers, enhancing coordination. Distant hydroxyl groups are less effective.
  - *High Yield Examples*:
    - *(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid* (Gluconic acid)
    - *2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid*
  - *Low Yield Counterexample*:
    - *7-hydroxyheptanoic acid* (hydroxyl group is too distant to assist in coordination)

- **Rule 6**: Modifiers that have **thiol groups within three carbons of the carboxyl group** predict a **high yield**; those where the thiol group is part of an aromatic ring predict a **low yield**.
  - *Rationale*: Proximal thiol groups enhance metal coordination through sulfur atoms. Aromatic thiols may have reduced availability due to resonance stabilization.
  - *High Yield Example*:
    - *3-sulfanylpropanoic acid* (3-Mercaptopropionic acid)
  - *Low Yield Example*:
    - *4-sulfanylbenzoic acid* (thiol group is less available due to aromaticity)

- **Rule 7**: Modifiers containing **perfluoroalkyl groups** attached to the carboxyl group predict a **low yield**.
  - *Rationale*: Strong electron-withdrawing perfluoroalkyl groups reduce electron density on coordinating atoms, weakening metal-ligand interactions.
  - *Low Yield Example*:
    - *2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid*

- **Rule 8**: Modifiers that are **aromatic carboxylic acids** with **aldehyde or ketone groups adjacent to the aromatic ring** predict a **low yield**.
  - *Rationale*: Adjacent carbonyl groups can interfere with metal coordination or engage in side reactions, reducing catalyst effectiveness.
  - *Low Yield Examples*:
    - *4-formylbenzoic acid*
    - *5-formyl-2-hydroxybenzoic acid*

- **Rule 9**: Modifiers that have **amide bonds involving the carboxyl group** or are **N-acetylated amino acids** predict a **low yield**.
  - *Rationale*: Amide formation reduces the availability of free carboxyl and amino groups necessary for effective metal coordination.
  - *Low Yield Examples*:
    - *(2S)-6-acetamido-2-aminohexanoic acid* (N-Acetyl-L-Lysine)
    - *2-[(4-hydroxybenzoyl)amino]acetic acid*

- **Rule 10**: Modifiers that are **aliphatic carboxylic acids** with **ether linkages** and **terminal polar groups** predict a **low yield**.
  - *Rationale*: Ether linkages increase molecular flexibility and distance between functional groups, reducing effective coordination with metal centers.
  - *Low Yield Examples*:
    - *2-[2-(2-methoxyethoxy)ethoxy]acetic acid*
    - *3-[2-(2-aminoethoxy)ethoxy]propanoic acid*

- **Rule 11**: Modifiers that are **aromatic carboxylic acids** with **bulky substituents near coordinating sites** predict a **low yield** due to steric hindrance.
  - *Rationale*: Bulky groups impede effective alignment and interaction with the metal center.
  - *Low Yield Example*:
    - *4-pyridin-4-ylbenzoic acid* (biphenyl structure causes steric hindrance)
  - *High Yield Counterexample*:
    - *4-pyridin-4-ylbutanoic acid* (additional methylene units alleviate steric effects)

- **Rule 12**: Modifiers with **long-chain aliphatic carboxylic acids** where **polar functional groups** are located more than **four carbons away** from the carboxyl group predict a **low yield**.
  - *Rationale*: Distant polar groups are less effective in metal coordination and may disrupt favorable interactions within the catalytic system.
  - *Low Yield Examples*:
    - *7-aminoheptanoic acid*
    - *8-aminooctanoic acid*
    - *7-hydroxyheptanoic acid*

- **Rule 13**: Modifiers that are **aromatic carboxylic acids** with **ortho-hydroxyl groups** predict a **high yield** due to the potential for chelation.
  - *Rationale*: Ortho-hydroxyl groups can form stable chelates with metal centers, enhancing catalyst activity.
  - *High Yield Example*:
    - *5-formyl-2-hydroxybenzoic acid* (although containing an aldehyde, the ortho-hydroxyl can chelate)
  - *Low Yield Counterexample*:
    - *3-(4-hydroxyphenyl)propanoic acid* (hydroxyl group is not ortho to the carboxyl group)

- **Rule 14**: Modifiers with **functional groups capable of intramolecular interactions** (e.g., hydrogen bonding) that **reduce availability** of coordinating sites predict a **low yield**.
  - *Rationale*: Intramolecular interactions sequester functional groups, limiting their ability to coordinate with metal centers.
  - *Low Yield Examples*:
    - *2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid* (complex intramolecular interactions)
    - *4-[(2,2,2-trifluoroacetyl)amino]butanoic acid*

- **Rule 15**: Modifiers containing **chelating groups** such as **adjacent carbonyl and hydroxyl groups** predict a **high yield** due to enhanced coordination.
  - *Rationale*: Chelating groups form strong, multidentate interactions with metal centers, stabilizing the catalyst.
  - *High Yield Examples*:
    - *1,3-dioxo-2-benzofuran-5-carboxylic acid*
    - *2-oxo-1H-pyridine-4-carboxylic acid* (Chelidamic acid)

**End of Rules**

---

These rules combine multiple functional groups and consider underlying physicochemical properties such as coordination abilities, electron-withdrawing or -donating effects, steric hindrance, and potential for chelation. Each rule is designed to predict whether a modifier will result in a high or low yield based on its structural features, aiming to cover a broad range of the dataset. By balancing simple rules with higher coverage and more complex rules with specific conditions, these guidelines can effectively assist in selecting molecular modifiers to optimize the reaction yield.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6285714285714286; Test Accuracy: 0.0
    Train Support: 0.04285714285714286; Test Support: 0.0
    Train Confidence: 0.9375; Test Confidence: 0.375
    Train Lift: 1.822916666666667; Test Lift: NONE
    Train Leverage: 0.017142857142857147; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and substructures
    # Rule 1: α-amino acids (amino and carboxyl groups on the same carbon)
    alpha_amino_acid = '[NX3H2][CX4H][CX3](=O)[OX2H1]'
    
    # Rule 2: Aromatic carboxylic acids with electron-withdrawing groups at para position
    aromatic_carboxylic_acid = '[c][CX3](=O)[OX2H1]'
    electron_withdrawing_group = '[c][F,Cl,Br,I,$(N(=O)=O),$(C(F)(F)F)]'
    
    # Rule 3: Heteroaromatic carboxylic acids containing pyridine nitrogen atoms
    heteroaromatic_nitrogen = '[n]'
    heteroaromatic_carboxylic_acid = '[n;a][a][a][a][a][CX3](=O)[OX2H1]'
    
    # Rule 4: Aliphatic carboxylic acids with long hydrocarbon chains (6 or more carbons)
    long_chain_carboxylic_acid = '[CX3](=O)[OX2H1][C][C][C][C][C][C]'
    
    # Rule 5: Hydroxyl groups adjacent to the carboxyl group
    adjacent_hydroxyl_carboxylic_acid = '[OX2H][CX4][CX3](=O)[OX2H1]'
    
    # Rule 6: Thiol groups within three carbons of the carboxyl group
    thiol_near_carboxylic_acid = '[#16X2H][CX4][CX4][CX3](=O)[OX2H1]'
    
    # Rule 7: Perfluoroalkyl groups attached to the carboxyl group
    perfluoroalkyl_carboxylic_acid = '[CX3](=O)[OX2H1][CX4](F)(F)F'
    
    # Rule 8: Aromatic carboxylic acids with aldehyde or ketone groups adjacent to the ring
    aromatic_carboxylic_with_adjacent_carbonyl = '[c][CX3](=O)[OX2H1].[c][CX3]=O'
    
    # Rule 9: Amide bonds involving the carboxyl group or N-acetylated amino acids
    amide_bond_carboxylic_acid = '[NX3][CX3](=O)[OX2H1]'
    n_acetylated_amino_acid = '[NX3][CX3](=O)[CX4][NX3][CX3](=O)[OX2H1]'
    
    # Rule 10: Aliphatic carboxylic acids with ether linkages and terminal polar groups
    ether_linkage_polar_terminal = '[CX3](=O)[OX2H1][CX4][OX2][CX4][OX2][CX4][OX2H1]'
    
    # Rule 11: Aromatic carboxylic acids with bulky substituents near coordinating sites
    bulky_substituents_near_carboxyl = '[c][CX3](=O)[OX2H1][c][c][c][c]'
    
    # Rule 12: Long-chain aliphatic carboxylic acids with polar groups distant from carboxyl
    long_chain_polar_distant = '[CX3](=O)[OX2H1][C][C][C][C][C][C][C][NX3H2,OX2H]'
    
    # Rule 13: Aromatic carboxylic acids with ortho-hydroxyl groups
    ortho_hydroxyl_aromatic_carboxylic_acid = '[c][c]([OX2H])[c][c][c][CX3](=O)[OX2H1]'
    
    # Rule 14: Functional groups capable of intramolecular interactions reducing coordination
    intramolecular_interactions = '[NX3][CX3](=O)[NX3][CX3](=O)[OX2H1]'
    
    # Rule 15: Chelating groups like adjacent carbonyl and hydroxyl groups
    chelating_groups = '[CX3](=O)[CX3](=O)[OX2H1]'
    
    # Compile SMARTS patterns
    patterns = {
        'Rule 1': {'pattern': Chem.MolFromSmarts(alpha_amino_acid), 'prediction': 1},
        'Rule 2': {'pattern': [Chem.MolFromSmarts(aromatic_carboxylic_acid), Chem.MolFromSmarts(electron_withdrawing_group)], 'prediction': 1},
        'Rule 3': {'pattern': [Chem.MolFromSmarts(heteroaromatic_carboxylic_acid), Chem.MolFromSmarts(heteroaromatic_nitrogen)], 'prediction': 1},
        'Rule 4': {'pattern': Chem.MolFromSmarts(long_chain_carboxylic_acid), 'prediction': 1},
        'Rule 5': {'pattern': Chem.MolFromSmarts(adjacent_hydroxyl_carboxylic_acid), 'prediction': 1},
        'Rule 6': {'pattern': Chem.MolFromSmarts(thiol_near_carboxylic_acid), 'prediction': 1},
        'Rule 7': {'pattern': Chem.MolFromSmarts(perfluoroalkyl_carboxylic_acid), 'prediction': -1},
        'Rule 8': {'pattern': Chem.MolFromSmarts(aromatic_carboxylic_with_adjacent_carbonyl), 'prediction': -1},
        'Rule 9': {'pattern': [Chem.MolFromSmarts(amide_bond_carboxylic_acid), Chem.MolFromSmarts(n_acetylated_amino_acid)], 'prediction': -1},
        'Rule 10': {'pattern': Chem.MolFromSmarts(ether_linkage_polar_terminal), 'prediction': -1},
        'Rule 11': {'pattern': Chem.MolFromSmarts(bulky_substituents_near_carboxyl), 'prediction': -1},
        'Rule 12': {'pattern': Chem.MolFromSmarts(long_chain_polar_distant), 'prediction': -1},
        'Rule 13': {'pattern': Chem.MolFromSmarts(ortho_hydroxyl_aromatic_carboxylic_acid), 'prediction': 1},
        'Rule 14': {'pattern': Chem.MolFromSmarts(intramolecular_interactions), 'prediction': -1},
        'Rule 15': {'pattern': Chem.MolFromSmarts(chelating_groups), 'prediction': 1}
    }
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(patterns))
            continue
        row = []
        for rule_name, rule in patterns.items():
            try:
                match = False
                if isinstance(rule['pattern'], list):
                    # For patterns that require multiple matches
                    sub_match = True
                    for pat in rule['pattern']:
                        if not mol.HasSubstructMatch(pat):
                            sub_match = False
                            break
                    match = sub_match
                else:
                    # Single pattern match
                    if mol.HasSubstructMatch(rule['pattern']):
                        match = True
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=patterns.keys())
    return df

--------------------------------------------------