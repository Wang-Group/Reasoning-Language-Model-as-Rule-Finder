def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups with corrections and improvements from suggestions
    
    # Amino group attached to any carbon
    amino_group_any = '[NX3;H2,H1][#6]'
    
    # Carboxylic acid group (-COOH) including carboxylate anion
    carboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1]'
    
    # Side-chain carboxylic acid (excluding alpha-carboxyl group)
    side_chain_carboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1][#6]'
    
    # Electron-withdrawing groups (EWGs)
    ewg_patterns = ['[F,Cl,Br,I]', '[CX3](=O)[OX1H0-,OX2H1]', '[NX3+](=O)[O-]', '[CX4][F][F][F]']
    
    # Electron-donating groups (EDGs)
    edg_patterns = ['[OX2H]', '[OX2][#6]', '[NX3;H2,H1][#6]']
    
    # Aromatic carboxylic acid
    aromatic_carboxylic_acid = '[c][CX3](=O)[OX1H0-,OX2H1]'
    
    # Aromatic ring
    aromatic_ring = '[a]'
    
    # Nitrogen heterocycles
    nitrogen_heterocycles = ['[n]1cccc1', '[n]1ccccc1', '[n]1cccnc1', '[n]1ccncc1', '[nH]1cccc1', '[n]1cnccc1']
    
    # Thiol group (-SH)
    thiol_group = '[SX2H]'
    
    # Ether linkage (-O-)
    ether_linkage = '[#6][OX2][#6]'
    
    # Hydroxyl group (-OH)
    hydroxyl_group = '[OX2H]'
    
    # Aldehyde group adjacent to aromatic rings or carboxyl group
    aldehyde_group = '[CX3H1](=O)[#6]'
    
    # Blocked amino group (e.g., N-acetylated amino group)
    blocked_amino_group = '[NX3;!H0][CX3](=O)'
    
    # Polyether chain (e.g., hydrophilic polyether carboxylic acids)
    polyether_chain = '[OX2H][CX2][CX2][OX2][CX2][CX2][OX2]'
    
    # Aromatic amino acid with electron-rich side chain (e.g., L-phenylalanine)
    aromatic_amino_acid = '[NX3;H2,H1][CX4][CX3](=O)[OX1H0-,OX2H1][CX4][c]'
    
    # Pyridine-substituted aliphatic acid
    pyridine_aliphatic_acid = '[#6][NX2][c]'
    
    # Long-chain hydroxy acid (length will be checked in code)
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are amino acids with side-chain carboxyl groups, leading to high yield.',
            'patterns': [
                amino_group_any,
                side_chain_carboxylic_acid,
                carboxylic_acid,
            ],
            'count_threshold': {carboxylic_acid: 2},  # At least 2 carboxylic acid groups
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers that are Ï‰-amino acids with a carbon chain length of five carbons or fewer, leading to high yield. Longer chains lead to low yield.',
            'patterns': [
                amino_group_any,
                carboxylic_acid,
            ],
            'chain_length': 5,
            'prediction': 1,
            'negative_prediction': -1  # For longer chains
        },
        {
            'number': 3,
            'description': 'Modifiers that are aromatic carboxylic acids with electron-withdrawing substituents at the para position, leading to high yield.',
            'patterns': [
                aromatic_carboxylic_acid,
            ],
            'para_substituent_patterns': ewg_patterns,
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers that are aromatic carboxylic acids with electron-donating substituents at the para position, leading to low yield.',
            'patterns': [
                aromatic_carboxylic_acid,
            ],
            'para_substituent_patterns': edg_patterns,
            'prediction': -1
        },
        {
            'number': 5,
            'description': 'Modifiers containing amino groups capable of coordinating with metal ions, leading to high yield.',
            'patterns': [
                amino_group_any,
            ],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers containing nitrogen heterocycles that can coordinate with metal ions, leading to high yield.',
            'patterns': nitrogen_heterocycles,
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'Modifiers that are aliphatic carboxylic acids without additional functional groups, leading to high yield.',
            'patterns': [
                carboxylic_acid,
            ],
            'exclude_patterns': [
                amino_group_any,
                thiol_group,
                ether_linkage,
                aromatic_ring,
                hydroxyl_group,  # Added per Suggestion 7
                '[F,Cl,Br,I]',   # Exclude halogens
                '[CX3]=[CX3]',   # Exclude alkenes
                '[CX2]#[CX2]',   # Exclude alkynes
            ],
            'prediction': 1
        },
        {
            'number': 8,
            'description': 'Modifiers containing multiple hydroxyl groups near the carboxyl group, leading to high yield.',
            'patterns': [
                carboxylic_acid,
                hydroxyl_group,
            ],
            'count_threshold': {hydroxyl_group: 2},  # At least 2 hydroxyl groups
            'check_proximity': True,
            'prediction': 1
        },
        {
            'number': 9,
            'description': 'Modifiers with aldehyde groups adjacent to aromatic rings or carboxyl groups, leading to low yield.',
            'patterns': [
                aldehyde_group,
            ],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers containing sulfhydryl (-SH) groups in an aliphatic chain, leading to high yield. When the sulfhydryl group is on an aromatic ring, the yield is low.',
            'patterns': [
                thiol_group,
            ],
            'exclude_patterns': [
                aromatic_ring,
            ],
            'prediction': 1,
            'negative_prediction': -1
        },
        # Additional rules can be added here following the same structure
    ]

    # Compile SMARTS patterns, storing both the compiled pattern and the SMARTS string
    for rule in rules:
        compiled_patterns = []
        for patt in rule.get('patterns', []):
            mol_pat = Chem.MolFromSmarts(patt)
            if mol_pat is not None:
                compiled_patterns.append({'pattern': mol_pat, 'smarts': patt})
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_exclude_patterns = []
            for patt in rule.get('exclude_patterns', []):
                mol_pat = Chem.MolFromSmarts(patt)
                if mol_pat is not None:
                    compiled_exclude_patterns.append({'pattern': mol_pat, 'smarts': patt})
            rule['compiled_exclude_patterns'] = compiled_exclude_patterns
        # Compile para substituent patterns if any (for Rules 3 and 4)
        if 'para_substituent_patterns' in rule:
            compiled_para_patterns = []
            for patt in rule['para_substituent_patterns']:
                mol_pat = Chem.MolFromSmarts(patt)
                if mol_pat is not None:
                    compiled_para_patterns.append({'pattern': mol_pat, 'smarts': patt})
            rule['compiled_para_patterns'] = compiled_para_patterns
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'compiled_exclude_patterns' in rule:
                    for pat_dict in rule['compiled_exclude_patterns']:
                        pat = pat_dict['pattern']
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        if 'negative_prediction' in rule:
                            row.append(rule['negative_prediction'])
                        else:
                            row.append(0)
                        continue
                # Check required patterns
                matches_dict = {}
                for pat_dict in rule['compiled_patterns']:
                    pat = pat_dict['pattern']
                    smarts = pat_dict['smarts']
                    matches = mol.GetSubstructMatches(pat)
                    if not matches:
                        match = False
                        break
                    else:
                        matches_dict[smarts] = matches
                if not match:
                    row.append(0)
                    continue
                # Check count thresholds
                if 'count_threshold' in rule:
                    for smarts_key, threshold in rule['count_threshold'].items():
                        if smarts_key in matches_dict:
                            if len(matches_dict[smarts_key]) < threshold:
                                match = False
                                break
                        else:
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # For Rule 8, check proximity of hydroxyl groups to carboxyl group
                if rule.get('check_proximity', False):
                    hydroxyl_atoms = [match[0] for match in matches_dict.get(hydroxyl_group, [])]
                    carboxyl_atoms = [match[0] for match in matches_dict.get(carboxylic_acid, [])]
                    if not hydroxyl_atoms or not carboxyl_atoms:
                        match = False
                    else:
                        proximity = False
                        for h_idx in hydroxyl_atoms:
                            for c_idx in carboxyl_atoms:
                                path_length = Chem.rdmolops.GetShortestPath(mol, h_idx, c_idx)
                                if len(path_length) <= 4:  # Adjust the distance as needed
                                    proximity = True
                                    break
                            if proximity:
                                break
                        if not proximity:
                            match = False
                    if not match:
                        row.append(0)
                        continue
                # For Rules 3 and 4, check for para-substituent patterns
                if 'compiled_para_patterns' in rule:
                    para_match = False
                    # Implement matching code for para substituents
                    # For simplicity, we will check if any of the para substituent patterns match
                    for pat_dict in rule['compiled_para_patterns']:
                        pat = pat_dict['pattern']
                        # Define a query that matches the aromatic carboxylic acid with a substituent at the para position
                        para_pattern = Chem.MolFromSmarts('c1ccc([!H])cc1C(=O)[O,H]')
                        if mol.HasSubstructMatch(para_pattern):
                            # Now check if the substituent is the desired group
                            matches = mol.GetSubstructMatches(para_pattern)
                            for match_idxs in matches:
                                sub_atom_idx = match_idxs[3]  # Index of the substituent atom
                                neighbor = mol.GetAtomWithIdx(sub_atom_idx)
                                for para_pat_dict in rule['compiled_para_patterns']:
                                    para_pat = para_pat_dict['pattern']
                                    if mol.HasSubstructMatch(para_pat, atoms=neighbor.GetNeighbors()):
                                        para_match = True
                                        break
                                if para_match:
                                    break
                            if para_match:
                                break
                    if not para_match:
                        match = False
                # For chain length in Rule 2
                if 'chain_length' in rule:
                    # Find amino and carboxylic acid atoms
                    amino_matches = mol.GetSubstructMatches(Chem.MolFromSmarts(amino_group_any))
                    carboxy_matches = mol.GetSubstructMatches(Chem.MolFromSmarts(carboxylic_acid))
                    if not amino_matches or not carboxy_matches:
                        match = False
                    else:
                        min_chain_length = None
                        for a_match in amino_matches:
                            for c_match in carboxy_matches:
                                path = Chem.rdmolops.GetShortestPath(mol, a_match[0], c_match[0])
                                chain_atoms = [mol.GetAtomWithIdx(idx) for idx in path[1:-1]]
                                carbon_chain_length = sum(1 for atom in chain_atoms if atom.GetAtomicNum() == 6)
                                if min_chain_length is None or carbon_chain_length < min_chain_length:
                                    min_chain_length = carbon_chain_length
                        if min_chain_length is None:
                            match = False
                        elif min_chain_length > rule['chain_length']:
                            if 'negative_prediction' in rule:
                                row.append(rule['negative_prediction'])
                            else:
                                row.append(0)
                            continue
                # If match is still True, append prediction
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df
