def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and substructures
    # Carboxylic acid group attached to an aromatic ring
    aromatic_carboxylic_acid = '[c][CX3](=O)[OX1H0-,OX2H1]'
    
    # Electron-donating groups (EDGs)
    amino_group = '[NX3;H2,H1][#6]'
    hydroxyl_group = '[OX2H][#6]'
    
    # Electron-withdrawing groups (EWGs)
    nitro_group = '[NX3](=O)=O'
    halogens = '[F,Cl,Br,I]'
    
    # Para-substituted aromatic ring with EDG or EWG
    para_substituted_aromatic = '[c:1]1[c:2][c:3][c:4][c:5][c:6]1[CX3](=O)[OX1H0-,OX2H1]'
    
    # Patterns for EDG or EWG at para position relative to carboxyl group
    edg_at_para = '[cH]1[c][c][c][c][c]1[CX3](=O)[OX1H0-,OX2H1].[c]1[c][c][c][c][c]1[OH,NH2]'
    ewg_at_para = '[cH]1[c][c][c][c][c]1[CX3](=O)[OX1H0-,OX2H1].[c]1[c][c][c][c][c]1[N+](=O)[O-],[F,Cl,Br,I]'
    
    # Amino acids with additional carboxylic acid groups
    additional_carboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1]'
    amino_acid = '[NX3;H2,H1][CX4][CX3](=O)[OX1H0-,OX2H1]'
    
    # Heteroaromatic carboxylic acids with nitrogen directly attached to carboxyl group
    heteroaromatic_nitrogen_carboxylic_acid = '[n][CX3](=O)[OX1H0-,OX2H1]'
    
    # Aliphatic carboxylic acids with chain lengths of five carbons or fewer and amino or thiol groups
    aliphatic_carboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1]'
    short_chain = '[CX4][CX4][CX4][CX4][CX4]'
    amino_group_aliphatic = '[NX3;H2,H1][#6]'
    thiol_group = '[SX2H]'    
    
    # Straight-chain aliphatic carboxylic acids up to eight carbons with no additional functional groups
    long_chain = '[CX4][CX4][CX4][CX4][CX4][CX4][CX4][CX4]'
    
    # Exclude patterns
    polar_functional_groups = '[OX2H,OX1-]', '[NX3;H2,H1]', '[SX2H]'
    
    # Modifiers containing both hydroxyl and carboxylic acid groups (polyhydroxy acids)
    multiple_hydroxyl_groups = '[OX2H]'
    
    # Aliphatic thiol groups
    aliphatic_thiol = '[CX4][SX2H]'
    
    # Thiol groups attached directly to aromatic ring
    aromatic_thiol = '[c][SX2H]'
    
    # Ether linkages adjacent to carboxylic acid group
    ether_linkage_adjacent = '[CX4][OX2][CX4][CX3](=O)[OX1H0-,OX2H1]'
    
    # Carbonyl groups adjacent to carboxylic acid
    carbonyl_adjacent = '[CX3](=O)[CX3](=O)[OX1H0-,OX2H1]'
    
    # Amide linkages near carboxyl group
    amide_near_carboxyl = '[NX3][CX3](=O)[CX3](=O)[OX1H0-,OX2H1]'
    
    # Perfluorinated alkyl chains
    perfluoro_alkyl = '[CX4]([F,Cl,Br,I])[F,Cl,Br,I]'
    
    # N-substituted amino acids or small peptides containing additional amide bonds near carboxylic acid
    n_substituted_amino_acid = '[NX3][CX3](=O)[CX4][NX3][CX3](=O)[OX1H0-,OX2H1]'
    
    # Integration of aromatic and aliphatic moieties with flexible linker and electron-donating groups
    aromatic_edg = '[c][OH,NH2]'
    flexible_linker = '[CX4][CX4][CX4]'
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'High Yield: Aromatic carboxylic acids with para-substituted EDG or EWG.',
            'patterns': [aromatic_carboxylic_acid],
            'substructure_checks': [
                {
                    'function': 'check_para_substituent',
                    'params': {
                        'edg_patterns': [amino_group, hydroxyl_group],
                        'ewg_patterns': [nitro_group, halogens]
                    }
                }
            ],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'High Yield: Amino acids with side chains containing additional carboxylic acid groups.',
            'patterns': [amino_acid, additional_carboxylic_acid],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'High Yield: Heteroaromatic carboxylic acids with nitrogen in the ring directly attached to carboxyl group.',
            'patterns': [heteroaromatic_nitrogen_carboxylic_acid],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'High Yield: Aliphatic carboxylic acids with chain lengths of five carbons or fewer and amino or thiol groups.',
            'patterns': [aliphatic_carboxylic_acid, amino_group_aliphatic, thiol_group],
            'chain_length': 5,
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'High Yield: Straight-chain aliphatic carboxylic acids up to eight carbons with no additional functional groups.',
            'patterns': [aliphatic_carboxylic_acid],
            'chain_length': 8,
            'exclude_patterns': polar_functional_groups,
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'High Yield: Modifiers containing both hydroxyl and carboxylic acid groups, particularly polyhydroxy acids.',
            'patterns': [aliphatic_carboxylic_acid, multiple_hydroxyl_groups],
            'min_hydroxyls': 2,
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'High Yield: Modifiers with aliphatic thiol groups.',
            'patterns': [aliphatic_thiol, aliphatic_carboxylic_acid],
            'exclude_patterns': [aromatic_thiol],
            'prediction': 1
        },
        {
            'number': 8,
            'description': 'Low Yield: Modifiers containing ether linkages adjacent to carboxylic acid group.',
            'patterns': [ether_linkage_adjacent],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Low Yield: Modifiers containing carbonyl groups adjacent to carboxylic acid or amide linkages near carboxyl group.',
            'patterns': [carbonyl_adjacent, amide_near_carboxyl],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Low Yield: Modifiers with perfluorinated alkyl chains or strong EWGs in aliphatic chains.',
            'patterns': [perfluoro_alkyl],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Low Yield: N-substituted amino acids or small peptides containing additional amide bonds near carboxylic acid.',
            'patterns': [n_substituted_amino_acid],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'High Yield: Modifiers integrating aromatic and aliphatic moieties with EDGs on aromatic ring connected via flexible linker to carboxylic acid.',
            'patterns': [aromatic_edg, flexible_linker, aliphatic_carboxylic_acid],
            'prediction': 1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for pattern in rule.get('patterns', []):
            compiled_patterns.append(Chem.MolFromSmarts(pattern))
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for pattern in rule['exclude_patterns']:
                compiled_excludes.append(Chem.MolFromSmarts(pattern))
            rule['compiled_exclude_patterns'] = compiled_excludes
    
    # Initialize results list
    results = []
    
    # Helper functions for custom checks
    def check_para_substituent(mol, params):
        # Find aromatic carboxylic acid groups
        carboxylic_acid_pattern = Chem.MolFromSmarts('[c][CX3](=O)[OX1H0-,OX2H1]')
        matches = mol.GetSubstructMatches(carboxylic_acid_pattern)
        for match in matches:
            aromatic_c = match[0]
            # Get the ring containing the aromatic carbon
            ri = mol.GetRingInfo()
            atom_rings = [set(r) for r in ri.AtomRings() if aromatic_c in r]
            if not atom_rings:
                continue
            ring = atom_rings[0]
            ring_atoms = list(ring)
            # Find para position
            idx = ring_atoms.index(aromatic_c)
            para_idx = ring_atoms[(idx + len(ring_atoms)//2) % len(ring_atoms)]
            para_atom = mol.GetAtomWithIdx(para_idx)
            # Check if para atom has substituents that are EDG or EWG
            for neighbor in para_atom.GetNeighbors():
                if neighbor.GetIdx() == para_idx:
                    continue
                neighbor_idx = neighbor.GetIdx()
                submol = Chem.PathToSubmol(mol, [para_idx, neighbor_idx])
                # Check for EDG patterns
                for edg in params['edg_patterns']:
                    edg_mol = Chem.MolFromSmarts(edg)
                    if submol.HasSubstructMatch(edg_mol):
                        return True
                # Check for EWG patterns
                for ewg in params['ewg_patterns']:
                    ewg_mol = Chem.MolFromSmarts(ewg)
                    if submol.HasSubstructMatch(ewg_mol):
                        return True
        return False
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for pat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for pat in rule['compiled_patterns']:
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                # Additional checks
                if match and 'substructure_checks' in rule:
                    for check in rule['substructure_checks']:
                        func = check['function']
                        params = check['params']
                        if func == 'check_para_substituent':
                            if not check_para_substituent(mol, params):
                                match = False
                                break
                # Check chain length if specified
                if match and 'chain_length' in rule:
                    chain_length = rule['chain_length']
                    count = 0
                    for atom in mol.GetAtoms():
                        if atom.GetAtomicNum() == 6 and atom.GetDegree() == 4:
                            count += 1
                    if count > chain_length:
                        match = False
                # Check minimum number of hydroxyl groups
                if match and 'min_hydroxyls' in rule:
                    hydroxyl_count = len(mol.GetSubstructMatches(Chem.MolFromSmarts('[OX2H]')))
                    if hydroxyl_count < rule['min_hydroxyls']:
                        match = False
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df
