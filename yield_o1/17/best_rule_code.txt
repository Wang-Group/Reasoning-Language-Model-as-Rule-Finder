def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and substructures
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    carboxylate_anion = '[CX3](=O)[O-]'
    primary_amine = '[NX3;H2][#6]'
    secondary_amine = '[NX3;H1][#6][#6]'
    amino_acid = '[NX3;H2][CX4H]([#6])[C](=O)[OX2H1]'
    alpha_amino_acid = '[NX3;H2][CX4H]([#6])[CX3](=O)[OX2H1]'
    aromatic_carboxylic_acid = 'c[C](=O)[OX2H1]'
    para_substituted_aromatic = 'c1ccc([a])cc1C(=O)O'
    para_amino_group = 'c1ccc(N)cc1C(=O)O'
    para_nitro_group = 'c1ccc([NX3](=O)=O)cc1C(=O)O'
    para_bromomethyl_group = 'c1ccc(CBr)cc1C(=O)O'
    para_methyl_group = 'c1ccc(C)cc1C(=O)O'
    para_aldehyde_group = 'c1ccc(C=O)cc1C(=O)O'
    pyridine_carboxylic_acid = 'n1cccc1C(=O)O'
    pyridine_connected_carboxylic_acid = '[nH]1cccc1C(=O)O'
    pyridine_connected_via_aromatic = 'c1ccncc1C(=O)O'
    aliphatic_carboxylic_acid = '[#6][CX3](=O)[OX2H1]'
    terminal_amino_group = '[#6][NX3;H2]'
    thiol_aliphatic_chain = '[#6][SX2H]'
    thiol_aromatic_ring = 'c[SX2H]'
    polyhydroxy_carboxylic_acid = '[CX3](=O)[OX2H1][#6]([OX2H])[#6]([OX2H])[#6]([OX2H])[#6]([OX2H])[#6](O)'
    hydroxyl_on_aromatic = 'c[OX2H]'
    aldehyde_on_aromatic = 'c[C](=O)[H]'
    polyether_chain = '[#6][OX2][#6][OX2][#6][OX2][#6]'
    aromatic_side_chain_with_heteroatom = '[NX3;H2][CX4H]([#6])[CX3](=O)[OX2H1][#6][c][n]'
    aromatic_side_chain_without_heteroatom = '[NX3;H2][CX4H]([#6])[CX3](=O)[OX2H1][#6][c]'
    perfluorinated_chain = '[CX4]([F])([F])[F]'
    long_aliphatic_chain = '[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]'
    terminal_polar_group = '[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[NX3;H2]'
    hydroxyl_connected_via_aliphatic_linker = 'c[#6][OX2H]'
    lactone_ring = 'O=C1OC(=O)C=CC1'
    additional_amide_group = '[NX3][CX3](=O)[#6]'
    carbonyl_within_chain = '[#6][CX3](=O)[#6]'
    # Compile SMARTS patterns
    patterns = {
        'carboxylic_acid': Chem.MolFromSmarts(carboxylic_acid),
        'carboxylate_anion': Chem.MolFromSmarts(carboxylate_anion),
        'primary_amine': Chem.MolFromSmarts(primary_amine),
        'secondary_amine': Chem.MolFromSmarts(secondary_amine),
        'amino_acid': Chem.MolFromSmarts(amino_acid),
        'alpha_amino_acid': Chem.MolFromSmarts(alpha_amino_acid),
        'aromatic_carboxylic_acid': Chem.MolFromSmarts(aromatic_carboxylic_acid),
        'para_substituted_aromatic': Chem.MolFromSmarts(para_substituted_aromatic),
        'para_amino_group': Chem.MolFromSmarts(para_amino_group),
        'para_nitro_group': Chem.MolFromSmarts(para_nitro_group),
        'para_bromomethyl_group': Chem.MolFromSmarts(para_bromomethyl_group),
        'para_methyl_group': Chem.MolFromSmarts(para_methyl_group),
        'para_aldehyde_group': Chem.MolFromSmarts(para_aldehyde_group),
        'pyridine_carboxylic_acid': Chem.MolFromSmarts(pyridine_carboxylic_acid),
        'pyridine_connected_carboxylic_acid': Chem.MolFromSmarts(pyridine_connected_carboxylic_acid),
        'pyridine_connected_via_aromatic': Chem.MolFromSmarts(pyridine_connected_via_aromatic),
        'aliphatic_carboxylic_acid': Chem.MolFromSmarts(aliphatic_carboxylic_acid),
        'terminal_amino_group': Chem.MolFromSmarts(terminal_amino_group),
        'thiol_aliphatic_chain': Chem.MolFromSmarts(thiol_aliphatic_chain),
        'thiol_aromatic_ring': Chem.MolFromSmarts(thiol_aromatic_ring),
        'polyhydroxy_carboxylic_acid': Chem.MolFromSmarts(polyhydroxy_carboxylic_acid),
        'hydroxyl_on_aromatic': Chem.MolFromSmarts(hydroxyl_on_aromatic),
        'aldehyde_on_aromatic': Chem.MolFromSmarts(aldehyde_on_aromatic),
        'polyether_chain': Chem.MolFromSmarts(polyether_chain),
        'aromatic_side_chain_with_heteroatom': Chem.MolFromSmarts(aromatic_side_chain_with_heteroatom),
        'aromatic_side_chain_without_heteroatom': Chem.MolFromSmarts(aromatic_side_chain_without_heteroatom),
        'perfluorinated_chain': Chem.MolFromSmarts(perfluorinated_chain),
        'long_aliphatic_chain': Chem.MolFromSmarts(long_aliphatic_chain),
        'terminal_polar_group': Chem.MolFromSmarts(terminal_polar_group),
        'hydroxyl_connected_via_aliphatic_linker': Chem.MolFromSmarts(hydroxyl_connected_via_aliphatic_linker),
        'lactone_ring': Chem.MolFromSmarts(lactone_ring),
        'additional_amide_group': Chem.MolFromSmarts(additional_amide_group),
        'carbonyl_within_chain': Chem.MolFromSmarts(carbonyl_within_chain)
    }
    # Define rules
    rules = [
        {   # Rule 1
            'number': 1,
            'description': 'Î±-amino acids with side-chain carboxylic acid groups predict a high yield.',
            'smarts': [patterns['alpha_amino_acid'], patterns['carboxylic_acid']],
            'prediction': 1
        },
        {   # Rule 2
            'number': 2,
            'description': 'Aromatic carboxylic acids with para-substituted groups capable of metal coordination predict a high yield.',
            'smarts': [patterns['aromatic_carboxylic_acid'], patterns['para_amino_group']],
            'prediction': 1
        },
        {   # Rule 2 (low yield for para-methyl)
            'number': 2.1,
            'description': 'Modifiers with para groups that do not enhance coordination predict a low yield.',
            'smarts': [patterns['aromatic_carboxylic_acid'], patterns['para_methyl_group']],
            'prediction': -1
        },
        {   # Rule 2 (low yield for para-aldehyde)
            'number': 2.2,
            'description': 'Modifiers with para-aldehyde groups predict a low yield.',
            'smarts': [patterns['aromatic_carboxylic_acid'], patterns['para_aldehyde_group']],
            'prediction': -1
        },
        {   # Rule 3
            'number': 3,
            'description': 'Pyridine carboxylic acids predict a high yield.',
            'smarts': [patterns['pyridine_carboxylic_acid']],
            'prediction': 1
        },
        {   # Rule 3 (low yield when connected via aromatic ring)
            'number': 3.1,
            'description': 'Modifiers where the pyridine ring is connected via an additional aromatic ring predict a low yield.',
            'smarts': [patterns['pyridine_connected_via_aromatic']],
            'prediction': -1
        },
        {   # Rule 4
            'number': 4,
            'description': 'Aliphatic carboxylic acids with terminal amino groups predict yield dependent on chain length.',
            'smarts': [patterns['aliphatic_carboxylic_acid'], patterns['terminal_amino_group']],
            'chain_length': 5,
            'prediction': 1,
            'low_yield_prediction': -1
        },
        {   # Rule 5
            'number': 5,
            'description': 'Modifiers containing thiol groups predict yield based on attachment.',
            'smarts': [patterns['thiol_aliphatic_chain']],
            'prediction': 1
        },
        {   # Rule 5 (low yield when thiol on aromatic ring)
            'number': 5.1,
            'description': 'Modifiers with thiol groups attached to an aromatic ring predict a low yield.',
            'smarts': [patterns['thiol_aromatic_ring']],
            'prediction': -1
        },
        {   # Rule 6
            'number': 6,
            'description': 'Modifiers containing multiple hydroxyl groups predict a high yield.',
            'smarts': [patterns['polyhydroxy_carboxylic_acid']],
            'prediction': 1
        },
        {   # Rule 6 (low yield when hydroxyl on aromatic ring)
            'number': 6.1,
            'description': 'Modifiers with hydroxyl groups directly attached to aromatic rings predict a low yield.',
            'smarts': [patterns['hydroxyl_on_aromatic']],
            'prediction': -1
        },
        {   # Rule 7
            'number': 7,
            'description': 'Modifiers containing aldehyde groups attached directly to aromatic rings predict a low yield.',
            'smarts': [patterns['aldehyde_on_aromatic']],
            'prediction': -1
        },
        {   # Rule 8
            'number': 8,
            'description': 'Modifiers with flexible polyether chains predict a low yield.',
            'smarts': [patterns['polyether_chain']],
            'prediction': -1
        },
        {   # Rule 9
            'number': 9,
            'description': 'Amino acids with aromatic side chains containing heteroatoms capable of metal coordination predict a high yield.',
            'smarts': [patterns['aromatic_side_chain_with_heteroatom']],
            'prediction': 1
        },
        {   # Rule 9 (low yield when aromatic side chains lack heteroatoms)
            'number': 9.1,
            'description': 'Modifiers with aromatic side chains lacking heteroatoms predict a low yield.',
            'smarts': [patterns['aromatic_side_chain_without_heteroatom']],
            'prediction': -1
        },
        {   # Rule 10
            'number': 10,
            'description': 'Modifiers containing perfluorinated aliphatic chains predict a low yield.',
            'smarts': [patterns['perfluorinated_chain']],
            'prediction': -1
        },
        {   # Rule 11
            'number': 11,
            'description': 'Aliphatic carboxylic acids with long chains (>6 carbons) without additional polar functional groups predict a high yield.',
            'smarts': [patterns['long_aliphatic_chain'], patterns['carboxylic_acid']],
            'exclude_smarts': [patterns['terminal_polar_group']],
            'prediction': 1
        },
        {   # Rule 11 (low yield when long chain with terminal polar groups)
            'number': 11.1,
            'description': 'Modifiers with long aliphatic chains and terminal polar groups predict a low yield.',
            'smarts': [patterns['long_aliphatic_chain'], patterns['terminal_polar_group']],
            'prediction': -1
        },
        {   # Rule 12
            'number': 12,
            'description': 'Aromatic carboxylic acids with hydroxyl groups connected via an aliphatic linker predict a high yield.',
            'smarts': [patterns['aromatic_carboxylic_acid'], patterns['hydroxyl_connected_via_aliphatic_linker']],
            'prediction': 1
        },
        {   # Rule 12 (low yield when hydroxyl directly attached to aromatic ring)
            'number': 12.1,
            'description': 'Modifiers with hydroxyl groups directly attached to the aromatic ring predict a low yield.',
            'smarts': [patterns['hydroxyl_on_aromatic']],
            'prediction': -1
        },
        {   # Rule 13
            'number': 13,
            'description': 'Modifiers containing lactone rings with carboxylic acid groups predict a high yield.',
            'smarts': [patterns['lactone_ring'], patterns['carboxylic_acid']],
            'prediction': 1
        },
        {   # Rule 14
            'number': 14,
            'description': 'Amino acids or peptides with additional amide or acetamido groups in the side chain predict a low yield.',
            'smarts': [patterns['amino_acid'], patterns['additional_amide_group']],
            'prediction': -1
        },
        {   # Rule 15
            'number': 15,
            'description': 'Modifiers with carbonyl groups within the aliphatic chain predict a low yield.',
            'smarts': [patterns['carbonyl_within_chain']],
            'prediction': -1
        }
    ]
    # Initialize results list
    results = []
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                # Handle chain length for Rule 4
                if rule['number'] == 4:
                    matches = mol.GetSubstructMatches(rule['smarts'][0])
                    chain_lengths = []
                    for match in matches:
                        chain = Chem.FragmentOnBonds(mol, match)
                        num_carbons = sum(1 for atom in chain.GetAtoms() if atom.GetAtomicNum() == 6)
                        chain_lengths.append(num_carbons)
                    if chain_lengths and max(chain_lengths) <= rule['chain_length']:
                        row.append(rule['prediction'])
                    else:
                        row.append(rule['low_yield_prediction'])
                    continue
                # Exclude patterns
                if 'exclude_smarts' in rule:
                    exclude_match = any(mol.HasSubstructMatch(exclude_pattern) for exclude_pattern in rule['exclude_smarts'])
                    if exclude_match:
                        row.append(0)
                        continue
                # Check all SMARTS patterns
                match = all(mol.HasSubstructMatch(smarts) for smarts in rule['smarts'])
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df
