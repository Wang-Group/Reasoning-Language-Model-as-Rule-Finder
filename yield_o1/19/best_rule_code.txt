def rule2matrix(smiles_list):
    """
    Takes a list of SMILES strings and returns a DataFrame where each column corresponds to a rule, and each row corresponds to a SMILES string.
    Each element in the DataFrame is:
    - 0 if the SMILES does not match the rule.
    - 1 if it matches and predicts high yield.
    - -1 if it matches and predicts low yield.
    """
    
    # Define SMARTS patterns for functional groups and structural features
    # Rule 1: Modifiers with both amino and carboxylic acid groups result in high yield
    amino_group = '[NX3;H2,H1;!$(NC=O)]'  # Primary or secondary amine not attached to carbonyl
    carboxylic_acid = '[CX3](=O)[OX2H1]'  # Carboxylic acid group
    
    # Rule 2: Halogen attached to an aromatic ring
    halogen_on_aromatic = '[c][F,Cl,Br,I]'
    halomethyl_on_aromatic = '[c][CH2][F,Cl,Br,I]'
    
    # Rule 3: Hydroxyl group attached to aromatic ring (phenol)
    phenol_group = '[c][OX2H]'
    
    # Rule 4: Heterocyclic nitrogen-containing ring and carboxylic acid group
    heterocyclic_nitrogen_ring = '[n]'
    
    # Rule 5: Sulfur-containing groups such as thiols or thioethers
    thiol_group = '[SX2H]'
    thioether_group = '[#6][SX2][#6]'
    
    # Rule 6: Linear aliphatic carboxylic acid with medium chain lengths (6-12 carbons)
    # Will handle in code by checking chain length
    
    # Rule 7: Nitro group attached to aromatic ring
    nitro_on_aromatic = '[c][NX3+(=O)[O-]]'
    
    # Rule 8: Aldehyde group attached to aromatic ring
    aldehyde_on_aromatic = '[c][CX3H](=O)'
    
    # Rule 9: Fluorinated alkyl chains
    fluorinated_alkyl_chain = '[CX4](F)(F)(F)'
    
    # Rule 10: Amino acids with aromatic side chains
    amino_acid = '[NX3;H2][CX4][CX3](=O)[OX2H1]'
    aromatic_ring = 'c1ccccc1'
    
    # Rule 11: Multiple hydroxyl groups (at least 3)
    hydroxyl_group = '[OX2H]'
    
    # Rule 12: Methoxy group on aromatic ring
    methoxy_on_aromatic = '[c][OX2][CX4H3]'
    
    # Rule 13: Pyridine ring connected via aliphatic chains
    pyridine_ring = 'n1ccccc1'
    
    # Rule 14: Long-chain amino acids or acids with additional amide groups
    amide_group = '[CX3](=O)[NX3]'
    
    # Rule 15: Bulky electron-rich heterocycles (e.g., indole)
    indole_ring = 'c12ccccc1c[nH]c2'
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Rule 1: Modifiers with both amino and carboxylic acid groups result in high yield.',
            'patterns': [
                amino_group,
                carboxylic_acid
            ],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Rule 2: Modifiers containing halogen atoms attached to an aromatic ring lead to a high yield.',
            'patterns': [
                halogen_on_aromatic,
                halomethyl_on_aromatic
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Rule 3: Modifiers that have both hydroxyl and phenyl groups tend to correlate with a low yield.',
            'patterns': [
                phenol_group
            ],
            'prediction': -1
        },
        {
            'number': 4,
            'description': 'Rule 4: Modifiers with heterocyclic nitrogen-containing rings and carboxylic acid groups often result in a high yield.',
            'patterns': [
                heterocyclic_nitrogen_ring,
                carboxylic_acid
            ],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Rule 5: Modifiers that include sulfur-containing groups generally produce a low yield.',
            'patterns': [
                [thiol_group, thioether_group]
            ],
            'prediction': -1
        },
        {
            'number': 6,
            'description': 'Rule 6: Linear aliphatic carboxylic acids with medium chain lengths are associated with a high yield.',
            'patterns': [
                carboxylic_acid
            ],
            'criteria': 'linear_aliphatic_chain_length',
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'Rule 7: Modifiers with nitro groups attached to an aromatic ring lead to a high yield.',
            'patterns': [
                nitro_on_aromatic
            ],
            'prediction': 1
        },
        {
            'number': 8,
            'description': 'Rule 8: Modifiers containing aldehyde groups attached to an aromatic ring correlate with a low yield.',
            'patterns': [
                aldehyde_on_aromatic
            ],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Rule 9: Modifiers with fluorinated alkyl chains tend to result in a low yield.',
            'patterns': [
                fluorinated_alkyl_chain
            ],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Rule 10: Modifiers that are amino acids with aromatic side chains generally lead to a low yield.',
            'patterns': [
                amino_acid,
                aromatic_ring
            ],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Rule 11: Modifiers containing multiple hydroxyl groups are associated with a high yield.',
            'patterns': [
                hydroxyl_group
            ],
            'count_threshold': {'[OX2H]': 3},
            'prediction': 1
        },
        {
            'number': 12,
            'description': 'Rule 12: Modifiers with methoxy groups on aromatic rings tend to produce a low yield.',
            'patterns': [
                methoxy_on_aromatic
            ],
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Rule 13: Modifiers with pyridine rings connected via aliphatic chains typically result in a high yield.',
            'patterns': [
                pyridine_ring
            ],
            'prediction': 1
        },
        {
            'number': 14,
            'description': 'Rule 14: Modifiers that are long-chain amino acids or acids with additional amide groups correlate with a low yield.',
            'patterns': [
                amino_acid,
                amide_group
            ],
            'prediction': -1
        },
        {
            'number': 15,
            'description': 'Rule 15: Modifiers containing bulky electron-rich heterocycles often lead to a high yield.',
            'patterns': [
                indole_ring
            ],
            'prediction': 1
        }
    ]

    # Compile patterns
    for rule in rules:
        compiled_patterns = []
        for pat in rule['patterns']:
            if isinstance(pat, list):
                # If multiple patterns are acceptable for one feature
                compiled_group = [Chem.MolFromSmarts(p) for p in pat]
                compiled_patterns.append(compiled_group)
            else:
                compiled_patterns.append(Chem.MolFromSmarts(pat))
        rule['compiled_patterns'] = compiled_patterns
        # Compile count thresholds for patterns if any
        if 'count_threshold' in rule:
            rule['compiled_count_threshold'] = {}
            for smarts, threshold in rule['count_threshold'].items():
                mol_pat = Chem.MolFromSmarts(smarts)
                rule['compiled_count_threshold'][mol_pat] = threshold

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True

                # Special criteria handling for Rule 6 (linear aliphatic chain length)
                if 'criteria' in rule and rule['criteria'] == 'linear_aliphatic_chain_length':
                    # Check if molecule is a linear aliphatic carboxylic acid with medium chain length
                    # Medium chain length is defined as 6 to 12 carbons (excluding the carboxylic acid group)
                    
                    # Check for carboxylic acid group
                    if not mol.HasSubstructMatch(Chem.MolFromSmarts(carboxylic_acid)):
                        match = False
                    else:
                        # Remove the carboxylic acid group and count the remaining carbons
                        pattern = Chem.MolFromSmarts(carboxylic_acid)
                        mol_no_acid = Chem.DeleteSubstructs(mol, pattern)
                        num_carbons = sum(1 for atom in mol_no_acid.GetAtoms() if atom.GetAtomicNum() == 6)
                        if num_carbons >= 6 and num_carbons <= 12:
                            match = True
                        else:
                            match = False
                else:
                    # For standard pattern matching
                    for pat in rule['compiled_patterns']:
                        if isinstance(pat, list):
                            # For patterns where any of multiple patterns is acceptable
                            group_match = any(mol.HasSubstructMatch(p) for p in pat)
                        else:
                            group_match = mol.HasSubstructMatch(pat)
                        if not group_match:
                            match = False
                            break
                    # For count thresholds
                    if 'compiled_count_threshold' in rule and match:
                        for pat, threshold in rule['compiled_count_threshold'].items():
                            matches = mol.GetSubstructMatches(pat)
                            if len(matches) < threshold:
                                match = False
                                break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df
