def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups using corrected patterns from suggestions
    
    # Carboxylic acid group (-COOH or -COO-)
    carboxylic_acid_patterns = ['[CX3](=O)[OX1H1]', '[CX3](=O)[O-]']
    
    # Alpha amino acid with dicarboxylic acid groups (Rule 1)
    alpha_amino_acid_dicarboxylic = '[NX3;H2][CX4][CX3](=O)[OX1H1]'
    
    # Adjacent carboxylic acids for dicarboxylic acid (Rule 1)
    dicarboxylic_acid = '[CX3](=O)[OX1H1][CX4][CX3](=O)[OX1H1]'
    
    # Omega amino aliphatic carboxylic acids (Rule 2 and Rule 9)
    amino_group = '[NX3;H2,H1]'
    
    # Adjacent hydroxyl groups (vicinal diols) (Rule 3)
    vicinal_diol = '[CX4H]([OX2H])[CX4H]([OX2H])'
    
    # Electron-withdrawing groups (EWGs) for Rule 4
    ewg_patterns = ['[N+](=O)[O-]', 'C#N', '[CX3](F)(F)F', '[S](=O)(=O)[O-]', '[F,Cl,Br,I]']
    
    # Electron-donating groups (EDGs) for Rule 14
    edg_patterns = ['[CH3]', '[OX2H]', '[OX2][CH3]', '[NX3;H2]']
    
    # Sulfur-containing groups (Rule 10)
    sulfur_functional_groups = ['[#16]']  # Any sulfur atom
    
    # Bulky amide near coordinating site (Rule 15)
    bulky_amide_near_coordination = '[NX3][CX3](=O)[CX4][CX4][NX3;H2]'
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are α-amino acids with dicarboxylic acid groups result in a High Yield.',
            'patterns': [alpha_amino_acid_dicarboxylic],
            'count_patterns': {''.join(carboxylic_acid_patterns): 2},
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers that are small ω-amino aliphatic carboxylic acids with chain lengths of five or fewer carbons result in a High Yield.',
            'patterns': carboxylic_acid_patterns + [amino_group],
            'max_chain_length': 5,
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers that are aliphatic carboxylic acids with multiple adjacent hydroxyl groups result in a High Yield.',
            'patterns': carboxylic_acid_patterns + [vicinal_diol],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers that are aromatic carboxylic acids with strong electron-withdrawing groups at the para position result in a High Yield.',
            'patterns': ['c1cc([#6])cc([#6])c1[CX3](=O)[OX1H1]'],
            'ewg_patterns': ewg_patterns,
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers that are aromatic carboxylic acids with para-amino groups result in a High Yield.',
            'patterns': ['c1ccc(N)cc1[CX3](=O)[OX1H1]'],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers that are nitrogen-containing heterocyclic carboxylic acids with the carboxyl group directly attached to the ring result in a High Yield.',
            'patterns': ['[nH0;r5,r6][c,n][c,n][c,n][c,n][CX3](=O)[OX1H1]'],
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'Modifiers that are aliphatic carboxylic acids with long hydrocarbon chains and without additional functional groups result in a High Yield.',
            'patterns': carboxylic_acid_patterns + ['[CH2][CH2][CH2][CH2][CH2][CH2][CH2]'],
            'exclude_patterns': ['[!#6;!H0]'],
            'prediction': 1
        },
        {
            'number': 8,
            'description': 'Modifiers that are aromatic amino acids with extended conjugation result in a High Yield.',
            'patterns': ['[NX3;H2][CX4H][CX3](=O)[OX1H1][CX4][c]1c2ccccc2[nH]c1'],
            'prediction': 1
        },
        {
            'number': 9,
            'description': 'Modifiers that are ω-amino aliphatic carboxylic acids with chain lengths longer than five carbons result in a Low Yield.',
            'patterns': carboxylic_acid_patterns + [amino_group],
            'min_chain_length': 6,
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers containing sulfur-functional groups result in a Low Yield.',
            'patterns': sulfur_functional_groups,
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Modifiers that are aromatic carboxylic acids with aldehyde groups adjacent to the carboxylic acid result in a Low Yield.',
            'patterns': ['c1cc(C=O)cc([#6])c1[CX3](=O)[OX1H1]'],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'Modifiers with perfluorinated alkyl chains or trifluoromethyl groups result in a Low Yield.',
            'patterns': ['[CX4](F)(F)F', '[CX4](F)(F)(F)[CX4](F)(F)(F)'],
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Modifiers that are aliphatic carboxylic acids with long chain ether linkages result in a Low Yield.',
            'patterns': carboxylic_acid_patterns + ['[#6][OX2][#6][OX2][#6][OX2][#6]'],
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'Modifiers that are aromatic carboxylic acids with weak electron-donating groups at the para position result in a Low Yield.',
            'patterns': ['c1cc([C,N,O;X4&H0])cc([#6])c1[CX3](=O)[OX1H1]'],
            'edg_patterns': edg_patterns,
            'prediction': -1
        },
        {
            'number': 15,
            'description': 'Modifiers featuring bulky amide groups near coordinating sites tend to result in a Low Yield.',
            'patterns': [bulky_amide_near_coordination],
            'prediction': -1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        # Compile include patterns
        rule['compiled_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule.get('patterns', [])]
        # Compile exclude patterns
        if 'exclude_patterns' in rule:
            rule['compiled_exclude_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule['exclude_patterns']]
        # Compile EWG and EDG patterns if any
        if 'ewg_patterns' in rule:
            rule['compiled_ewg_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule['ewg_patterns']]
        if 'edg_patterns' in rule:
            rule['compiled_edg_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule['edg_patterns']]
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'compiled_exclude_patterns' in rule:
                    for pat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for pat in rule['compiled_patterns']:
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Additional checks
                if 'count_patterns' in rule:
                    for patt, count in rule['count_patterns'].items():
                        patt_mol = Chem.MolFromSmarts(patt)
                        matches = mol.GetSubstructMatches(patt_mol)
                        if len(matches) < count:
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                if 'adjacent_hydroxyls' in rule and rule['adjacent_hydroxyls']:
                    # Check for adjacent hydroxyl groups
                    vicinal_diol_pat = Chem.MolFromSmarts(vicinal_diol)
                    if not mol.HasSubstructMatch(vicinal_diol_pat):
                        match = False
                        row.append(0)
                        continue
                if 'max_chain_length' in rule or 'min_chain_length' in rule:
                    # Check chain length between amino group and carboxylic acid
                    amino_atoms = [match[0] for match in mol.GetSubstructMatches(Chem.MolFromSmarts(amino_group))]
                    carboxylic_atoms = []
                    for patt in carboxylic_acid_patterns:
                        carboxylic_atoms.extend([match[0] for match in mol.GetSubstructMatches(Chem.MolFromSmarts(patt))])
                    shortest_path_length = None
                    for n_idx in amino_atoms:
                        for c_idx in carboxylic_atoms:
                            try:
                                path = Chem.rdmolops.GetShortestPath(mol, n_idx, c_idx)
                                path_length = len(path) - 1
                                if shortest_path_length is None or path_length < shortest_path_length:
                                    shortest_path_length = path_length
                            except:
                                continue
                    if shortest_path_length is None:
                        match = False
                        row.append(0)
                        continue
                    if 'max_chain_length' in rule and shortest_path_length > rule['max_chain_length']:
                        match = False
                        row.append(0)
                        continue
                    if 'min_chain_length' in rule and shortest_path_length < rule['min_chain_length']:
                        match = False
                        row.append(0)
                        continue
                if 'compiled_ewg_patterns' in rule:
                    # Check for EWG at para position
                    ewg_match = False
                    for ewg_pat in rule['compiled_ewg_patterns']:
                        if mol.HasSubstructMatch(ewg_pat):
                            ewg_match = True
                            break
                    if not ewg_match:
                        match = False
                        row.append(0)
                        continue
                if 'compiled_edg_patterns' in rule:
                    # Check for EDG at para position
                    edg_match = False
                    for edg_pat in rule['compiled_edg_patterns']:
                        if mol.HasSubstructMatch(edg_pat):
                            edg_match = True
                            break
                    if not edg_match:
                        match = False
                        row.append(0)
                        continue
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df
