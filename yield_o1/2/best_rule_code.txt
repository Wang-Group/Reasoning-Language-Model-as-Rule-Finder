def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and substructures
    from rdkit import Chem
    import pandas as pd
    
    # Rule 1: Aliphatic amino acids with dicarboxylic acid groups (high yield)
    amino_acid_pattern = Chem.MolFromSmarts('[NX3;H2][CX4][CX3](=O)[OX1H]')  # Primary amine connected to carbon with carboxyl group
    dicarboxylic_acid_pattern = Chem.MolFromSmarts('OC(=O)[CX4][CX3](=O)O')  # Two carboxylic acids linked by aliphatic chain
    
    # Rule 2: Thiol groups attached to short aliphatic chain (<=3 carbons) (high yield)
    thiol_aliphatic_short_pattern = Chem.MolFromSmarts('[#6;X4][#6;X4][#6;X4][SX2H]')  # Three-carbon chain ending with thiol
    thiol_aliphatic_short_pattern_2C = Chem.MolFromSmarts('[#6;X4][#6;X4][SX2H]')  # Two-carbon chain ending with thiol
    thiol_aliphatic_short_pattern_1C = Chem.MolFromSmarts('[#6;X4][SX2H]')  # One-carbon chain ending with thiol
    
    # Rule 2 (Low yield part): Thiol groups attached to aromatic ring (low yield)
    thiol_aromatic_pattern = Chem.MolFromSmarts('[c][SX2H]')
    
    # Rule 3: Electron-withdrawing groups (e.g., nitro group) on aromatic ring (high yield)
    nitro_aromatic_pattern = Chem.MolFromSmarts('[c][NX3](=O)=O')
    
    # Rule 4: Electron-donating groups (e.g., methyl, methoxy, hydroxy) on aromatic ring (low yield)
    methyl_on_aromatic_pattern = Chem.MolFromSmarts('[c][CX4H3]')
    methoxy_on_aromatic_pattern = Chem.MolFromSmarts('[c][OX2][CH3]')
    hydroxy_on_aromatic_pattern = Chem.MolFromSmarts('[c][OX2H]')
    
    # Rule 5: Unsubstituted medium-chain fatty acids (up to 8 carbons) (high yield)
    fatty_acid_pattern = Chem.MolFromSmarts('C{1,7}C(=O)O')  # Aliphatic chain up to 8 carbons ending with carboxylic acid
    
    # Rule 5 (Low yield part): Fatty acids longer than 8 carbons or with polar substituents (low yield)
    long_fatty_acid_pattern = Chem.MolFromSmarts('C{9,}[CX3](=O)[OX1H0-,OX2H1]')  # Chain longer than 8 carbons with carboxylic acid
    fatty_acid_with_polar_group_pattern = Chem.MolFromSmarts('C[!C;!H]C(=O)O')  # Fatty acid with polar substituent
    
    # Rule 6: Heterocyclic aromatic rings connected directly to carboxylic acid group (high yield)
    heterocyclic_carboxylic_acid_pattern = Chem.MolFromSmarts('[a][CX3](=O)[OX1H0-,OX2H1]')
    
    # Rule 7: Aldehyde group adjacent to aromatic ring (low yield)
    aldehyde_aromatic_pattern = Chem.MolFromSmarts('[c][CX3H](=O)')
    
    # Rule 8: Fluorinated alkyl chains or trifluoromethyl groups (low yield)
    fluorinated_alkyl_chain_pattern = Chem.MolFromSmarts('[CX4]([F,Cl,Br,I])([F,Cl,Br,I])[F,Cl,Br,I]')  # Trifluoromethyl group
    perfluoroalkyl_pattern = Chem.MolFromSmarts('[CX4]([F,Cl,Br,I])[CX4]([F,Cl,Br,I])[F,Cl,Br,I]')  # Fluorinated chain
    
    # Rule 9: Multiple hydroxyl groups on an aliphatic chain (high yield)
    multiple_hydroxyl_aliphatic_pattern = Chem.MolFromSmarts('[#6][CX4][OX2H]')  # Aliphatic carbons with hydroxyl groups
    
    # Rule 10: Amino group attached to short aliphatic chain (up to 5 carbons) (high yield)
    short_aliphatic_amine_pattern = Chem.MolFromSmarts('C{1,5}[NX3;H2]')
    
    # Rule 10 (Low yield part): Amino group on longer aliphatic chains (>5 carbons) (low yield)
    long_aliphatic_amine_pattern = Chem.MolFromSmarts('C{6,}[NX3;H2]')
    
    # Rule 11: Aromatic amino acids with simple benzene rings (low yield) vs. heteroaromatic rings (high yield)
    aromatic_aa_benzene_pattern = Chem.MolFromSmarts('[NX3;H2][CX4][CX4][c]')  # Amino acid with benzene ring
    aromatic_aa_heteroaromatic_pattern = Chem.MolFromSmarts('[NX3;H2][CX4][CX4][a]')  # Amino acid with heteroaromatic ring
    
    # Rule 12: Ether linkages and methoxy groups (low yield)
    ether_linkage_pattern = Chem.MolFromSmarts('[#6][OX2][#6]')
    methoxy_group_pattern = Chem.MolFromSmarts('[OX2][CH3]')
    
    # Rule 13: Carbonyl groups (ketones or amides) adjacent to carboxylic acids (low yield)
    ketone_adjacent_carboxylic_pattern = Chem.MolFromSmarts('[CX3](=O)[CX3](=O)[OX1H0-,OX2H1]')
    amide_adjacent_carboxylic_pattern = Chem.MolFromSmarts('[NX3][CX3](=O)[CX3](=O)[OX1H0-,OX2H1]')
    
    # Rule 14: Sulfur-containing functional groups
    aliphatic_thiol_pattern = Chem.MolFromSmarts('[CX4][SX2H]')  # Aliphatic thiol (high yield)
    thioether_pattern = Chem.MolFromSmarts('[#6][SX2][#6]')  # Thioether (low yield)
    aromatic_thiol_pattern = Chem.MolFromSmarts('[c][SX2H]')  # Aromatic thiol (low yield)
    
    # Rule 15: Additional coordinating groups on an aromatic ring (low yield)
    coordinating_group_on_aromatic_pattern = Chem.MolFromSmarts('[c][$(O),$(N)]')  # Hydroxy or amino on aromatic ring
    
    # Compile all rules into a list
    rules = [
        {'number': 1, 'pattern': [amino_acid_pattern, dicarboxylic_acid_pattern], 'prediction': 1},
        {'number': 2, 'pattern': [thiol_aliphatic_short_pattern, thiol_aliphatic_short_pattern_2C, thiol_aliphatic_short_pattern_1C], 'prediction': 1},
        {'number': 2.1, 'pattern': [thiol_aromatic_pattern], 'prediction': -1},
        {'number': 3, 'pattern': [nitro_aromatic_pattern], 'prediction': 1},
        {'number': 4, 'pattern': [methyl_on_aromatic_pattern, methoxy_on_aromatic_pattern, hydroxy_on_aromatic_pattern], 'prediction': -1},
        {'number': 5, 'pattern': [fatty_acid_pattern], 'prediction': 1},
        {'number': 5.1, 'pattern': [long_fatty_acid_pattern, fatty_acid_with_polar_group_pattern], 'prediction': -1},
        {'number': 6, 'pattern': [heterocyclic_carboxylic_acid_pattern], 'prediction': 1},
        {'number': 7, 'pattern': [aldehyde_aromatic_pattern], 'prediction': -1},
        {'number': 8, 'pattern': [fluorinated_alkyl_chain_pattern, perfluoroalkyl_pattern], 'prediction': -1},
        {'number': 9, 'pattern': [multiple_hydroxyl_aliphatic_pattern], 'prediction': 1, 'count': 2},
        {'number': 10, 'pattern': [short_aliphatic_amine_pattern], 'prediction': 1},
        {'number': 10.1, 'pattern': [long_aliphatic_amine_pattern], 'prediction': -1},
        {'number': 11, 'pattern': [aromatic_aa_benzene_pattern], 'prediction': -1},
        {'number': 11.1, 'pattern': [aromatic_aa_heteroaromatic_pattern], 'prediction': 1},
        {'number': 12, 'pattern': [ether_linkage_pattern, methoxy_group_pattern], 'prediction': -1},
        {'number': 13, 'pattern': [ketone_adjacent_carboxylic_pattern, amide_adjacent_carboxylic_pattern], 'prediction': -1},
        {'number': 14, 'pattern': [aliphatic_thiol_pattern], 'prediction': 1},
        {'number': 14.1, 'pattern': [thioether_pattern, aromatic_thiol_pattern], 'prediction': -1},
        {'number': 15, 'pattern': [coordinating_group_on_aromatic_pattern], 'prediction': -1},
    ]
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = False
                count_required = rule.get('count', 1)
                total_matches = 0
                for pat in rule['pattern']:
                    matches = mol.GetSubstructMatches(pat)
                    total_matches += len(matches)
                if total_matches >= count_required:
                    match = True
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df