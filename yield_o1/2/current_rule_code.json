{
    "prefix": "This code converts a list of SMILES strings into a feature matrix using RDkit. It defines SMARTS patterns for each rule based on the provided natural language descriptions. The code checks each SMILES string against these patterns to determine whether it matches a rule, predicting a high yield (1), a low yield (-1), or no match (0). The output is a DataFrame where each column corresponds to a rule and each row corresponds to a SMILES string from the input list.",
    "imports": "import pandas as pd\nfrom rdkit import Chem\nfrom rdkit.Chem import AllChem",
    "code": "def rule2matrix(smiles_list):\n    import pandas as pd\n    from rdkit import Chem\n    from rdkit.Chem import AllChem\n\n    # Define SMARTS patterns for functional groups and features\n    # Carboxylic acid group (-COOH)\n    carboxylic_acid = Chem.MolFromSmarts('[CX3](=O)[OX1H0-,OX2H1]')\n    \n    # Primary aliphatic amine group (-NH2)\n    primary_aliphatic_amine = Chem.MolFromSmarts('[NX3H2][CX4]')\n    \n    # Nitrogen-containing heteroaromatic ring with carboxylic acid attached\n    heteroaromatic_N_ring_COOH = Chem.MolFromSmarts('[n][c]=[c]C(=O)[OX1H0-,OX2H1]')\n    \n    # Medium-chain aliphatic carboxylic acids (6 to 8 carbons) without polar substituents\n    medium_chain_aliphatic_acid = Chem.MolFromSmarts('[CX4](-[CX4]){5,7}C(=O)[OX1H0-,OX2H1]')\n    \n    # Exclude polar substituents\n    polar_substituents = [\n        Chem.MolFromSmarts('[OX2H]'),  # Hydroxyl group\n        Chem.MolFromSmarts('[NX3;H2,H1]'),  # Amino group\n        Chem.MolFromSmarts('[SX2H]')  # Thiol group\n    ]\n    \n    # Aromatic ring with strong EWGs in para position relative to carboxylic acid\n    aromatic_EWG_para_COOH = Chem.MolFromSmarts('c1ccc([NX3+](=O)[O-])cc1C(=O)[OX1H0-,OX2H1]')\n    \n    # Thiol group (-SH) on short aliphatic chain adjacent to carboxylic acid\n    thiol_adjacent_COOH = Chem.MolFromSmarts('[CX4][CX4][SX2H]')\n    \n    # Multiple hydroxyl groups on an aliphatic chain (sugar acids)\n    multiple_hydroxyls = Chem.MolFromSmarts('[CX4]([OX2H])[CX4]([OX2H])[CX4]([OX2H])[CX4]([OX2H])[CX4](=O)[OX1H0-,OX2H1]')\n    \n    # Aromatic amino acids containing heteroatoms in the side chain (e.g., indole ring)\n    aromatic_aa_with_heteroatoms = Chem.MolFromSmarts('[NX3H2][CX4][CX4]c1c[nH]c2ccccc12')  # Simplified for tryptophan\n    \n    # Aromatic ring with EDGs directly attached and short aliphatic linker to carboxylic acid\n    aromatic_EDG_short_linker_COOH = Chem.MolFromSmarts('c1cc([OX2H,OX2][CH3])ccc1[CX4][CX3](=O)[OX1H0-,OX2H1]')\n    \n    # Additional carbonyl groups adjacent to carboxylic acid on aromatic ring\n    carbonyl_adjacent_COOH = Chem.MolFromSmarts('c1cc(C=O)ccc1C(=O)[OX1H0-,OX2H1]')\n    \n    # Bulky substituents or extended chains with multiple polar functional groups\n    bulky_polar_groups = Chem.MolFromSmarts('[#6][OX2H][CX4][OX2H][CX4][OX2H][CX4](=O)[OX1H0-,OX2H1]')  # Simplified pattern\n    \n    # Fluorinated alkyl chains or trifluoromethyl groups (-CF3)\n    fluorinated_chains = Chem.MolFromSmarts('[CX4][CF3]')\n    \n    # Aromatic ring systems with fused carbonyl groups adjacent to carboxylic acid\n    fused_carbonyl_COOH = Chem.MolFromSmarts('c1cc2oc(=O)cc2cc1C(=O)[OX1H0-,OX2H1]')\n    \n    # Simple aromatic carboxylic acids without bulky substituents or strong EDGs\n    simple_aromatic_COOH = Chem.MolFromSmarts('c1ccccc1C(=O)[OX1H0-,OX2H1]')\n    \n    # Phenyl ring with sufficient aliphatic chain length (more than four carbons) to carboxylic acid\n    phenyl_long_linker_COOH = Chem.MolFromSmarts('c1ccccc1-[CX4]-[CX4]-[CX4]-[CX4]-C(=O)[OX1H0-,OX2H1]')\n    \n    # Multiple functional groups causing steric hindrance or chelation competition\n    multiple_functional_groups = Chem.MolFromSmarts('[#6][CX3](=O)[NX3][CX3](=O)[OX1H0-,OX2H1]')  # Simplified pattern\n    \n    # Define the rules with their associated patterns and predictions\n    rules = [\n        {\n            'number': 1,\n            'description': 'High Yield: Short-chain aliphatic amino acids with free amino (-NH2) and carboxylic acid (-COOH) groups, up to 5 carbons',\n            'patterns': [carboxylic_acid, primary_aliphatic_amine],\n            'max_carbons': 5,\n            'prediction': 1\n        },\n        {\n            'number': 2,\n            'description': 'High Yield: Carboxylic acid group directly attached to a nitrogen-containing heteroaromatic ring',\n            'patterns': [carboxylic_acid, heteroaromatic_N_ring_COOH],\n            'prediction': 1\n        },\n        {\n            'number': 3,\n            'description': 'High Yield: Medium-chain aliphatic carboxylic acids (6 to 8 carbons) without polar substituents',\n            'patterns': [carboxylic_acid, medium_chain_aliphatic_acid],\n            'exclude_patterns': polar_substituents,\n            'prediction': 1\n        },\n        {\n            'number': 4,\n            'description': 'High Yield: Aromatic ring with strong EWGs (e.g., nitro) in para position relative to carboxylic acid',\n            'patterns': [aromatic_EWG_para_COOH],\n            'prediction': 1\n        },\n        {\n            'number': 5,\n            'description': 'High Yield: Thiol groups (-SH) on short aliphatic chains adjacent to the carboxylic acid',\n            'patterns': [carboxylic_acid, thiol_adjacent_COOH],\n            'prediction': 1\n        },\n        {\n            'number': 6,\n            'description': 'High Yield: Multiple hydroxyl groups on an aliphatic chain (sugar acids)',\n            'patterns': [multiple_hydroxyls],\n            'prediction': 1\n        },\n        {\n            'number': 7,\n            'description': 'High Yield: Aromatic amino acids containing heteroatoms in the side chain (e.g., tryptophan)',\n            'patterns': [carboxylic_acid, aromatic_aa_with_heteroatoms],\n            'prediction': 1\n        },\n        {\n            'number': 8,\n            'description': 'Low Yield: Aromatic rings with EDGs (e.g., hydroxy, methoxy) directly attached and a short aliphatic linker to the carboxylic acid',\n            'patterns': [aromatic_EDG_short_linker_COOH],\n            'prediction': -1\n        },\n        {\n            'number': 9,\n            'description': 'Low Yield: Additional carbonyl groups adjacent to the carboxylic acid on an aromatic ring',\n            'patterns': [carbonyl_adjacent_COOH],\n            'prediction': -1\n        },\n        {\n            'number': 10,\n            'description': 'Low Yield: Bulky substituents or extended chains with multiple polar functional groups',\n            'patterns': [bulky_polar_groups],\n            'prediction': -1\n        },\n        {\n            'number': 11,\n            'description': 'Low Yield: Fluorinated alkyl chains or trifluoromethyl groups (-CF3)',\n            'patterns': [fluorinated_chains],\n            'prediction': -1\n        },\n        {\n            'number': 12,\n            'description': 'High Yield: Aromatic ring systems with fused carbonyl groups adjacent to the carboxylic acid',\n            'patterns': [fused_carbonyl_COOH],\n            'prediction': 1\n        },\n        {\n            'number': 13,\n            'description': 'High Yield: Simple aromatic carboxylic acids without bulky substituents or strong EDGs',\n            'patterns': [simple_aromatic_COOH],\n            'prediction': 1\n        },\n        {\n            'number': 14,\n            'description': 'High Yield: Aliphatic chain bearing a phenyl ring with sufficient chain length (>4 carbons) to the carboxylic acid',\n            'patterns': [phenyl_long_linker_COOH],\n            'prediction': 1\n        },\n        {\n            'number': 15,\n            'description': 'Low Yield: Multiple functional groups causing steric hindrance or chelation competition',\n            'patterns': [multiple_functional_groups],\n            'prediction': -1\n        }\n    ]\n\n    # Initialize results list\n    results = []\n\n    # Process each SMILES string\n    for smi in smiles_list:\n        mol = Chem.MolFromSmiles(smi)\n        if mol is None:\n            # If the molecule cannot be parsed, append a row of zeros\n            results.append([0]*len(rules))\n            continue\n        row = []\n        for rule in rules:\n            try:\n                match = True\n                # Check exclude patterns if any\n                if 'exclude_patterns' in rule:\n                    for pat in rule['exclude_patterns']:\n                        if mol.HasSubstructMatch(pat):\n                            match = False\n                            break\n                    if not match:\n                        row.append(0)\n                        continue\n                # Check required patterns\n                for pat in rule.get('patterns', []):\n                    if not mol.HasSubstructMatch(pat):\n                        match = False\n                        break\n                # Apply special conditions\n                if match and 'max_carbons' in rule:\n                    num_carbons = sum(1 for atom in mol.GetAtoms() if atom.GetAtomicNum() == 6)\n                    if num_carbons > rule['max_carbons']:\n                        match = False\n                if match:\n                    row.append(rule['prediction'])\n                else:\n                    row.append(0)\n            except Exception as e:\n                # In case of any error, append 0\n                row.append(0)\n        results.append(row)\n\n    # Create DataFrame with results\n    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])\n    return df\n"
}