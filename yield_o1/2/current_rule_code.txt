def rule2matrix(smiles_list):
    import pandas as pd
    from rdkit import Chem
    from rdkit.Chem import AllChem

    # Define SMARTS patterns for functional groups and features
    # Carboxylic acid group (-COOH)
    carboxylic_acid = Chem.MolFromSmarts('[CX3](=O)[OX1H0-,OX2H1]')
    
    # Primary aliphatic amine group (-NH2)
    primary_aliphatic_amine = Chem.MolFromSmarts('[NX3H2][CX4]')
    
    # Nitrogen-containing heteroaromatic ring with carboxylic acid attached
    heteroaromatic_N_ring_COOH = Chem.MolFromSmarts('[n][c]=[c]C(=O)[OX1H0-,OX2H1]')
    
    # Medium-chain aliphatic carboxylic acids (6 to 8 carbons) without polar substituents
    medium_chain_aliphatic_acid = Chem.MolFromSmarts('[CX4](-[CX4]){5,7}C(=O)[OX1H0-,OX2H1]')
    
    # Exclude polar substituents
    polar_substituents = [
        Chem.MolFromSmarts('[OX2H]'),  # Hydroxyl group
        Chem.MolFromSmarts('[NX3;H2,H1]'),  # Amino group
        Chem.MolFromSmarts('[SX2H]')  # Thiol group
    ]
    
    # Aromatic ring with strong EWGs in para position relative to carboxylic acid
    aromatic_EWG_para_COOH = Chem.MolFromSmarts('c1ccc([NX3+](=O)[O-])cc1C(=O)[OX1H0-,OX2H1]')
    
    # Thiol group (-SH) on short aliphatic chain adjacent to carboxylic acid
    thiol_adjacent_COOH = Chem.MolFromSmarts('[CX4][CX4][SX2H]')
    
    # Multiple hydroxyl groups on an aliphatic chain (sugar acids)
    multiple_hydroxyls = Chem.MolFromSmarts('[CX4]([OX2H])[CX4]([OX2H])[CX4]([OX2H])[CX4]([OX2H])[CX4](=O)[OX1H0-,OX2H1]')
    
    # Aromatic amino acids containing heteroatoms in the side chain (e.g., indole ring)
    aromatic_aa_with_heteroatoms = Chem.MolFromSmarts('[NX3H2][CX4][CX4]c1c[nH]c2ccccc12')  # Simplified for tryptophan
    
    # Aromatic ring with EDGs directly attached and short aliphatic linker to carboxylic acid
    aromatic_EDG_short_linker_COOH = Chem.MolFromSmarts('c1cc([OX2H,OX2][CH3])ccc1[CX4][CX3](=O)[OX1H0-,OX2H1]')
    
    # Additional carbonyl groups adjacent to carboxylic acid on aromatic ring
    carbonyl_adjacent_COOH = Chem.MolFromSmarts('c1cc(C=O)ccc1C(=O)[OX1H0-,OX2H1]')
    
    # Bulky substituents or extended chains with multiple polar functional groups
    bulky_polar_groups = Chem.MolFromSmarts('[#6][OX2H][CX4][OX2H][CX4][OX2H][CX4](=O)[OX1H0-,OX2H1]')  # Simplified pattern
    
    # Fluorinated alkyl chains or trifluoromethyl groups (-CF3)
    fluorinated_chains = Chem.MolFromSmarts('[CX4][CF3]')
    
    # Aromatic ring systems with fused carbonyl groups adjacent to carboxylic acid
    fused_carbonyl_COOH = Chem.MolFromSmarts('c1cc2oc(=O)cc2cc1C(=O)[OX1H0-,OX2H1]')
    
    # Simple aromatic carboxylic acids without bulky substituents or strong EDGs
    simple_aromatic_COOH = Chem.MolFromSmarts('c1ccccc1C(=O)[OX1H0-,OX2H1]')
    
    # Phenyl ring with sufficient aliphatic chain length (more than four carbons) to carboxylic acid
    phenyl_long_linker_COOH = Chem.MolFromSmarts('c1ccccc1-[CX4]-[CX4]-[CX4]-[CX4]-C(=O)[OX1H0-,OX2H1]')
    
    # Multiple functional groups causing steric hindrance or chelation competition
    multiple_functional_groups = Chem.MolFromSmarts('[#6][CX3](=O)[NX3][CX3](=O)[OX1H0-,OX2H1]')  # Simplified pattern
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'High Yield: Short-chain aliphatic amino acids with free amino (-NH2) and carboxylic acid (-COOH) groups, up to 5 carbons',
            'patterns': [carboxylic_acid, primary_aliphatic_amine],
            'max_carbons': 5,
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'High Yield: Carboxylic acid group directly attached to a nitrogen-containing heteroaromatic ring',
            'patterns': [carboxylic_acid, heteroaromatic_N_ring_COOH],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'High Yield: Medium-chain aliphatic carboxylic acids (6 to 8 carbons) without polar substituents',
            'patterns': [carboxylic_acid, medium_chain_aliphatic_acid],
            'exclude_patterns': polar_substituents,
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'High Yield: Aromatic ring with strong EWGs (e.g., nitro) in para position relative to carboxylic acid',
            'patterns': [aromatic_EWG_para_COOH],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'High Yield: Thiol groups (-SH) on short aliphatic chains adjacent to the carboxylic acid',
            'patterns': [carboxylic_acid, thiol_adjacent_COOH],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'High Yield: Multiple hydroxyl groups on an aliphatic chain (sugar acids)',
            'patterns': [multiple_hydroxyls],
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'High Yield: Aromatic amino acids containing heteroatoms in the side chain (e.g., tryptophan)',
            'patterns': [carboxylic_acid, aromatic_aa_with_heteroatoms],
            'prediction': 1
        },
        {
            'number': 8,
            'description': 'Low Yield: Aromatic rings with EDGs (e.g., hydroxy, methoxy) directly attached and a short aliphatic linker to the carboxylic acid',
            'patterns': [aromatic_EDG_short_linker_COOH],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Low Yield: Additional carbonyl groups adjacent to the carboxylic acid on an aromatic ring',
            'patterns': [carbonyl_adjacent_COOH],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Low Yield: Bulky substituents or extended chains with multiple polar functional groups',
            'patterns': [bulky_polar_groups],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Low Yield: Fluorinated alkyl chains or trifluoromethyl groups (-CF3)',
            'patterns': [fluorinated_chains],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'High Yield: Aromatic ring systems with fused carbonyl groups adjacent to the carboxylic acid',
            'patterns': [fused_carbonyl_COOH],
            'prediction': 1
        },
        {
            'number': 13,
            'description': 'High Yield: Simple aromatic carboxylic acids without bulky substituents or strong EDGs',
            'patterns': [simple_aromatic_COOH],
            'prediction': 1
        },
        {
            'number': 14,
            'description': 'High Yield: Aliphatic chain bearing a phenyl ring with sufficient chain length (>4 carbons) to the carboxylic acid',
            'patterns': [phenyl_long_linker_COOH],
            'prediction': 1
        },
        {
            'number': 15,
            'description': 'Low Yield: Multiple functional groups causing steric hindrance or chelation competition',
            'patterns': [multiple_functional_groups],
            'prediction': -1
        }
    ]

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for pat in rule['exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for pat in rule.get('patterns', []):
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                # Apply special conditions
                if match and 'max_carbons' in rule:
                    num_carbons = sum(1 for atom in mol.GetAtoms() if atom.GetAtomicNum() == 6)
                    if num_carbons > rule['max_carbons']:
                        match = False
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)

    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df
