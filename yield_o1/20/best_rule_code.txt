def rule2matrix(smiles_list):
    # Define the rules with their associated functions and predictions
    def rule1(mol):
        # Rule 1: Carboxylic acids with amino groups (–NH2) at the beta (β) or gamma (γ) position
        try:
            # Find carboxylic acid carbons
            carboxy_acid = Chem.MolFromSmarts('[C](=O)[O;H1]')
            carboxy_carbons = [match[0] for match in mol.GetSubstructMatches(carboxy_acid)]
            # Find primary amino nitrogens
            amino_group = Chem.MolFromSmarts('[NX3H2]')
            amino_nitrogens = [match[0] for match in mol.GetSubstructMatches(amino_group)]
            # Check if an amino group is within 2 or 3 bonds from a carboxylic acid carbon
            for c_idx in carboxy_carbons:
                for n_idx in amino_nitrogens:
                    path = Chem.rdmolops.GetShortestPath(mol, c_idx, n_idx)
                    if len(path) >= 3 and len(path) <= 4:  # Path length includes both atoms
                        return 1
            return 0
        except:
            return 0

    def rule2(mol):
        # Rule 2: Aromatic carboxylic acids with strong electron-withdrawing groups at the para position
        try:
            # Define aromatic carboxylic acid pattern
            aromatic_c_acid = Chem.MolFromSmarts('c1ccc([C](=O)[O;H1])cc1')
            matches = mol.GetSubstructMatches(aromatic_c_acid)
            if matches:
                # Check for EWG at para position
                ewg = Chem.MolFromSmarts('[$([F,Cl,Br,I]),$([N+](=O)[O-])]')
                # Find para position (atom 4 in the match)
                for match in matches:
                    para_atom_idx = match[3]
                    para_atom = mol.GetAtomWithIdx(para_atom_idx)
                    for neighbor in para_atom.GetNeighbors():
                        if mol.HasSubstructMatch(ewg, useChirality=False):
                            return 1
            return 0
        except:
            return 0

    def rule3(mol):
        # Rule 3: Aromatic carboxylic acids with coordinating functional groups attached to the ring
        try:
            # Define aromatic carboxylic acid pattern
            aromatic_c_acid = Chem.MolFromSmarts('c1ccc([C](=O)[O;H1])cc1')
            matches = mol.GetSubstructMatches(aromatic_c_acid)
            if matches:
                # Define coordinating groups
                coordinating_group = Chem.MolFromSmarts('[#7,#8]')  # N or O directly attached to ring
                if mol.HasSubstructMatch(coordinating_group):
                    return 1
            return 0
        except:
            return 0

    def rule4(mol):
        # Rule 4: Aromatic carboxylic acids with non-coordinating electron-donating groups at para position
        try:
            # Define aromatic carboxylic acid pattern
            aromatic_c_acid = Chem.MolFromSmarts('c1ccc([C](=O)[O;H1])cc1')
            matches = mol.GetSubstructMatches(aromatic_c_acid)
            if matches:
                # Check for EDG at para position
                edg = Chem.MolFromSmarts('C')  # Methyl group
                # Find para position (atom 4 in the match)
                for match in matches:
                    para_atom_idx = match[3]
                    para_atom = mol.GetAtomWithIdx(para_atom_idx)
                    for neighbor in para_atom.GetNeighbors():
                        if neighbor.GetIdx() != para_atom_idx and neighbor.GetAtomicNum() == 6:
                            if mol.HasSubstructMatch(edg):
                                return -1
            return 0
        except:
            return 0

    def rule5(mol):
        # Rule 5: Aliphatic carboxylic acids with chain length of six carbons or more and no additional functional groups
        try:
            # Define aliphatic chain of six or more carbons ending with carboxylic acid
            pattern = Chem.MolFromSmarts('CCCCCC[C](=O)[O;H1]')
            if mol.HasSubstructMatch(pattern):
                # Check for absence of other functional groups
                fg = Chem.MolFromSmarts('[!#6;!#1]')
                if not mol.HasSubstructMatch(fg):
                    return 1
            return 0
        except:
            return 0

    def rule6(mol):
        # Rule 6: Modifiers containing flexible ether chains
        try:
            # Define ether linkage
            ether = Chem.MolFromSmarts('COCC')
            if mol.HasSubstructMatch(ether):
                return -1
            return 0
        except:
            return 0

    def rule7(mol):
        # Rule 7: Amino acids with acidic side chains (additional carboxyl groups)
        try:
            # Define amino acid backbone
            amino_acid = Chem.MolFromSmarts('N[C@@H](C)C(=O)O')
            if mol.HasSubstructMatch(amino_acid):
                # Check for additional carboxyl group
                extra_carboxy = Chem.MolFromSmarts('C(=O)[O;H1]')
                matches = mol.GetSubstructMatches(extra_carboxy)
                if len(matches) > 1:
                    return 1
            return 0
        except:
            return 0

    def rule8(mol):
        # Rule 8: Modifiers that are amino acids with sulfur-containing side chains
        try:
            # Define amino acid backbone
            amino_acid = Chem.MolFromSmarts('N[C@@H](C)C(=O)O')
            if mol.HasSubstructMatch(amino_acid):
                # Define thiol group
                thiol = Chem.MolFromSmarts('C[S;H1]')
                # Define methionine-like sulfur
                thioether = Chem.MolFromSmarts('CSC')
                if mol.HasSubstructMatch(thiol):
                    return 1
                elif mol.HasSubstructMatch(thioether):
                    return -1
            return 0
        except:
            return 0

    def rule9(mol):
        # Rule 9: Aromatic carboxylic acids with aldehyde or ketone groups attached directly to the ring
        try:
            # Define aromatic ring with carbonyl group
            carbonyl = Chem.MolFromSmarts('c[C](=O)[#6]')
            if mol.HasSubstructMatch(carbonyl):
                return -1
            return 0
        except:
            return 0

    def rule10(mol):
        # Rule 10: Heterocyclic carboxylic acids containing nitrogen heteroatoms capable of coordinating
        try:
            # Define heterocycle with nitrogen and carboxylic acid
            heterocycle = Chem.MolFromSmarts('[n][c]C(=O)O')
            if mol.HasSubstructMatch(heterocycle):
                return 1
            return 0
        except:
            return 0

    def rule11(mol):
        # Rule 11: Aliphatic amino groups at the delta (δ) position or further from the carboxyl group
        try:
            # Find carboxylic acid carbons
            carboxy_acid = Chem.MolFromSmarts('[C](=O)[O;H1]')
            carboxy_carbons = [match[0] for match in mol.GetSubstructMatches(carboxy_acid)]
            # Find primary amino nitrogens
            amino_group = Chem.MolFromSmarts('[NX3H2]')
            amino_nitrogens = [match[0] for match in mol.GetSubstructMatches(amino_group)]
            # Check if an amino group is more than 3 bonds away from carboxylic acid carbon
            for c_idx in carboxy_carbons:
                for n_idx in amino_nitrogens:
                    path = Chem.rdmolops.GetShortestPath(mol, c_idx, n_idx)
                    if len(path) >= 5:  # Path length includes both atoms
                        return -1
            return 0
        except:
            return 0

    def rule12(mol):
        # Rule 12: Carboxylic acids with fluorinated aliphatic chains
        try:
            # Define fluorinated chain
            fluorinated_chain = Chem.MolFromSmarts('C(F)(F)F')
            if mol.HasSubstructMatch(fluorinated_chain):
                return -1
            return 0
        except:
            return 0

    def rule13(mol):
        # Rule 13: Sugar acids or derivatives with multiple hydroxyl groups attached to a carboxylic acid
        try:
            # Define sugar acid pattern
            sugar_acid = Chem.MolFromSmarts('C(C(C(C(C(=O)O)O)O)O)O')
            if mol.HasSubstructMatch(sugar_acid):
                return 1
            return 0
        except:
            return 0

    def rule14(mol):
        # Rule 14: Aromatic carboxylic acids with extended aliphatic side chains containing hydroxy or methoxy groups
        try:
            # Define pattern
            pattern = Chem.MolFromSmarts('c1ccc(cc1)CCCC[OX2H,OX1H0]')
            if mol.HasSubstructMatch(pattern):
                return 1
            return 0
        except:
            return 0

    def rule15(mol):
        # Rule 15: Modifiers containing flexible chains with ether linkages
        try:
            # Define ether linkage
            ether_linkage = Chem.MolFromSmarts('COCC')
            if mol.HasSubstructMatch(ether_linkage):
                return -1
            return 0
        except:
            return 0

    # List of rule functions and their predictions
    rules = [
        {'number': 1, 'function': rule1, 'prediction': 1},
        {'number': 2, 'function': rule2, 'prediction': 1},
        {'number': 3, 'function': rule3, 'prediction': 1},
        {'number': 4, 'function': rule4, 'prediction': -1},
        {'number': 5, 'function': rule5, 'prediction': 1},
        {'number': 6, 'function': rule6, 'prediction': -1},
        {'number': 7, 'function': rule7, 'prediction': 1},
        {'number': 8, 'function': rule8, 'prediction': 'variable'},
        {'number': 9, 'function': rule9, 'prediction': -1},
        {'number': 10, 'function': rule10, 'prediction': 1},
        {'number': 11, 'function': rule11, 'prediction': -1},
        {'number': 12, 'function': rule12, 'prediction': -1},
        {'number': 13, 'function': rule13, 'prediction': 1},
        {'number': 14, 'function': rule14, 'prediction': 1},
        {'number': 15, 'function': rule15, 'prediction': -1},
    ]

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            result = rule['function'](mol)
            if result == 1:
                row.append(1 if rule['prediction'] == 1 else -1)
            elif result == -1:
                row.append(-1 if rule['prediction'] == -1 else 1)
            else:
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df
