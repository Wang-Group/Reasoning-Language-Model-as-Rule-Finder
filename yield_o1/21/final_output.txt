
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: **Modifiers that are amino acids with acidic side chains**—specifically, those containing an additional carboxylic acid group—such as **aspartic acid** ((2S)-2-aminobutanedioic acid) and **glutamic acid** ((2S)-2-aminopentanedioic acid), lead to **high yield**.

- **Rule 2**: **Modifiers that are aromatic carboxylic acids with strong electron-withdrawing groups at the para position**, such as nitro (-NO₂) or bromomethyl (-CH₂Br) substituents, result in **high yield**. Examples include **4-nitrobenzoic acid** and **4-(bromomethyl)benzoic acid**.

- **Rule 3**: **Modifiers that are heteroaromatic carboxylic acids containing nitrogen heterocycles**, such as pyridine or pyrazole rings, are associated with **high yield**. Examples are **pyridine-3-carboxylic acid**, **2-oxo-1H-pyridine-4-carboxylic acid**, and **1H-pyrazole-4-carboxylic acid**.

- **Rule 4**: **Modifiers that are aliphatic carboxylic acids with unbranched chains and no polar substituents** (e.g., hydroxyl or amino groups), such as **octanoic acid**, lead to **high yield**. In contrast, similar aliphatic acids with polar substituents on the chain, especially at terminal positions, result in **low yield**. Examples of low-yield modifiers are **7-hydroxyheptanoic acid**, **7-aminoheptanoic acid**, and **8-aminooctanoic acid**.

- **Rule 5**: **Modifiers containing perfluoroalkyl groups attached to the carboxylic acid**, such as **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**, result in **low yield** due to the electron-withdrawing nature of fluorine atoms affecting catalyst interaction.

- **Rule 6**: **Modifiers with multiple hydroxyl (-OH) groups on an aliphatic chain**, like **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (gluconic acid), lead to **high yield** by enhancing solubility and catalyst interactions.

- **Rule 7**: **Modifiers containing aldehyde (-CHO) or ketone (>C=O) functional groups** tend to result in **low yield**. Examples include **5-formyl-2-hydroxybenzoic acid** and **4-oxoheptanedioic acid**, where these groups may deactivate the catalyst or interfere with the reaction pathway.

- **Rule 8**: **Modifiers with thiol (-SH) groups on aliphatic chains** lead to **high yield**, as seen with **3-sulfanylpropanoic acid**, due to potential coordination with metal centers. Conversely, **modifiers with thiol groups attached directly to aromatic rings**, like **4-sulfanylbenzoic acid**, result in **low yield**, possibly due to steric hindrance or deactivation of the catalyst.

- **Rule 9**: **Modifiers that are amino acids with uncharged polar side chains or basic side chains**, such as derivatives of serine, threonine, or lysine (e.g., **(2S)-6-acetamido-2-aminohexanoic acid**), tend to result in **low yield**. The presence of additional amino groups may lead to catalyst poisoning or side reactions.

- **Rule 10**: **Modifiers that are aromatic amino acids with bulky side chains**, like **tryptophan** ((2R)-2-amino-3-(1H-indol-3-yl)propanoic acid), lead to **high yield**, possibly due to π-π interactions facilitating catalyst activity. In contrast, **modifiers with less bulky aromatic side chains**, such as **phenylalanine** ((2S)-2-amino-3-phenylpropanoic acid), result in **low yield**.

- **Rule 11**: **Modifiers that include amide linkages involving aromatic rings and aliphatic chains** tend to result in **low yield**. Examples are **2-[(4-hydroxybenzoyl)amino]acetic acid** and **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid**, where the amide bond may hinder effective catalyst interaction.

- **Rule 12**: **Modifiers with aromatic rings bearing hydroxyl (-OH) groups at the para position** can have variable effects. **Modifiers like 4-aminobenzoic acid**, with a para-amino group, lead to **high yield**, possibly due to favorable electronic effects. However, **derivatives of 4-hydroxybenzoic acid**, such as **2-[(4-hydroxybenzoyl)amino]acetic acid**, tend to result in **low yield**, indicating that para-hydroxyl groups may negatively impact the reaction.

- **Rule 13**: **Modifiers that are omega-amino carboxylic acids with a chain length of five carbons**, such as **5-aminopentanoic acid**, result in **high yield**, potentially due to optimal chain length for catalyst interaction. **Longer chain omega-amino acids**, like **7-aminoheptanoic acid** and **8-aminooctanoic acid**, result in **low yield**, possibly because longer chains reduce the compound's ability to effectively interact with the catalyst.

- **Rule 14**: **Modifiers with ether linkages extending from the carboxylic acid**, especially those containing polyether chains like triethylene glycol units, result in **low yield**. An example is **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**, where the ether chains may sterically hinder catalyst access or alter solubility.

- **Rule 15**: **Modifiers containing an aromatic ring with electron-donating substituents connected via flexible aliphatic linkers**, where the linker is sufficiently long, can lead to **high yield**. For instance, **5-(4-hydroxyphenyl)pentanoic acid** (with a five-carbon linker) results in **high yield**, whereas **3-(4-hydroxyphenyl)propanoic acid** (with a three-carbon linker) results in **low yield**, suggesting that longer linkers favor better catalyst interaction.

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,1,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6857142857142857; Test Accuracy: 0.0
    Train Support: 0.047619047619047616; Test Support: 0.0
    Train Confidence: 0.5833333333333334; Test Confidence: 0.5
    Train Lift: 1.2009803921568627; Test Lift: NONE
    Train Leverage: 0.010068027210884354; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for common functional groups
    primary_amine = '[NX3H2]'
    secondary_amine = '[NX3H1]'
    carboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1]'
    aromatic_ring = '[a]'
    aromatic_carboxylic_acid = '[a][CX3](=O)[OX1H0-,OX2H1]'
    nitro_group = '[NX3](=O)=O'
    bromomethyl = '[CH2][Br]'
    halogen = '[F,Cl,Br,I]'
    heteroaromatic_nitrogen = '[n]'
    unbranched_aliphatic_chain = '[CH2][CH2][CH2][CH2][CH2]'
    polar_substituents = '[O,N,S]'
    hydroxyl_group = '[OX2H]'
    thiol_group = '[SX2H]'
    ketone_group = '[CX3](=O)[#6]'
    aldehyde_group = '[CX3H](=O)'
    ether_linkage = '[#6][OX2][#6]'
    amide_group = '[NX3][CX3](=O)[#6]'
    aromatic_hydroxyl = '[c][OX2H]'
    five_carbon_linker = '[CH2][CH2][CH2][CH2][CH2]'

    # Define rules
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are amino acids with acidic side chains containing an additional carboxylic acid group',
            'patterns': [
                primary_amine,  # Primary amine
                carboxylic_acid  # Carboxylic acid
            ],
            'count_threshold': {carboxylic_acid: 2},  # At least two carboxylic acid groups
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers that are aromatic carboxylic acids with strong electron-withdrawing groups at the para position, such as nitro or bromomethyl substituents',
            'patterns': [
                aromatic_carboxylic_acid,  # Aromatic carboxylic acid
                nitro_group,  # Nitro group
                bromomethyl  # Bromomethyl group
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers that are heteroaromatic carboxylic acids containing nitrogen heterocycles',
            'patterns': [
                '[n][c]1[c][c][c][c]1[CX3](=O)[OX1H0-,OX2H1]',  # Heteroaromatic nitrogen ring with carboxylic acid
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers that are aliphatic carboxylic acids with unbranched chains and no polar substituents (e.g., hydroxyl or amino groups)',
            'patterns': [
                carboxylic_acid,  # Carboxylic acid
                unbranched_aliphatic_chain  # Unbranched aliphatic chain
            ],
            'exclude_patterns': [
                polar_substituents  # Exclude polar substituents
            ],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers containing perfluoroalkyl groups attached to the carboxylic acid',
            'patterns': [
                carboxylic_acid,  # Carboxylic acid
                '[CX4](F)(F)(F)',  # Trifluoromethyl group
            ],
            'prediction': -1
        },
        {
            'number': 6,
            'description': 'Modifiers with multiple hydroxyl (-OH) groups on an aliphatic chain',
            'patterns': [
                carboxylic_acid,  # Carboxylic acid
                hydroxyl_group  # Hydroxyl group
            ],
            'count_threshold': {hydroxyl_group: 2},  # At least 2 hydroxyl groups
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'Modifiers containing aldehyde (-CHO) or ketone (>C=O) functional groups',
            'patterns': [
                aldehyde_group,  # Aldehyde group
                ketone_group  # Ketone group
            ],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Modifiers with thiol (-SH) groups on aliphatic chains',
            'patterns': [
                thiol_group,  # Thiol group
                carboxylic_acid  # Carboxylic acid
            ],
            'exclude_patterns': [
                aromatic_ring  # Exclude aromatic rings (to ensure thiol is on aliphatic chain)
            ],
            'prediction': 1
        },
        {
            'number': 9,
            'description': 'Modifiers that are amino acids with uncharged polar side chains or basic side chains',
            'patterns': [
                primary_amine,  # Primary amine
                carboxylic_acid,  # Carboxylic acid
                polar_substituents  # Polar substituents
            ],
            'exclude_patterns': [
                carboxylic_acid,  # Additional carboxylic acid group (to exclude acidic amino acids)
            ],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers that are aromatic amino acids with bulky side chains',
            'patterns': [
                primary_amine,  # Primary amine
                carboxylic_acid,  # Carboxylic acid
                '[c]1[c][n][c][c][c]1'  # Indole ring for tryptophan
            ],
            'prediction': 1
        },
        {
            'number': 11,
            'description': 'Modifiers that include amide linkages involving aromatic rings and aliphatic chains',
            'patterns': [
                amide_group,  # Amide group
                aromatic_ring  # Aromatic ring
            ],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'Modifiers with aromatic rings bearing hydroxyl (-OH) groups at the para position',
            'patterns': [
                aromatic_hydroxyl,  # Aromatic hydroxyl group
                carboxylic_acid  # Carboxylic acid
            ],
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Modifiers that are omega-amino carboxylic acids with a chain length of five carbons',
            'patterns': [
                primary_amine,  # Primary amine
                five_carbon_linker,  # Chain of five carbons
                carboxylic_acid  # Carboxylic acid
            ],
            'prediction': 1
        },
        {
            'number': 14,
            'description': 'Modifiers with ether linkages extending from the carboxylic acid, containing polyether chains',
            'patterns': [
                ether_linkage,  # Ether linkage
                carboxylic_acid  # Carboxylic acid
            ],
            'prediction': -1
        },
        {
            'number': 15,
            'description': 'Modifiers containing an aromatic ring with electron-donating substituents connected via flexible aliphatic linkers of sufficient length',
            'patterns': [
                aromatic_ring,  # Aromatic ring
                carboxylic_acid,  # Carboxylic acid
                five_carbon_linker  # Five-carbon linker
            ],
            'prediction': 1
        },
    ]

    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for pattern in rule.get('patterns', []):
            compiled_patterns.append(Chem.MolFromSmarts(pattern))
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for pattern in rule['exclude_patterns']:
                compiled_excludes.append(Chem.MolFromSmarts(pattern))
            rule['compiled_exclude_patterns'] = compiled_excludes

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for pat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for pat in rule['compiled_patterns']:
                    matches = mol.GetSubstructMatches(pat)
                    if matches:
                        # If a count threshold is specified for this pattern
                        if 'count_threshold' in rule and pat.GetSmarts() in rule['count_threshold']:
                            threshold = rule['count_threshold'][pat.GetSmarts()]
                            if len(matches) >= threshold:
                                continue
                            else:
                                match = False
                                break
                    else:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: **Modifiers that are amino acids with acidic side chains**, specifically those containing an additional carboxylic acid group beyond the alpha-carboxyl (e.g., aspartic acid and glutamic acid), lead to **high yield**. Examples: **(2S)-2-aminobutanedioic acid** (aspartic acid) and **(2S)-2-aminopentanedioic acid** (glutamic acid).

- **Rule 2**: **Modifiers that are omega-amino acids with chain lengths of five carbons or fewer**, such as **5-aminopentanoic acid**, result in **high yield**. In contrast, longer-chain omega-amino acids with more than five carbons, like **7-aminoheptanoic acid** and **8-aminooctanoic acid**, lead to **low yield**.

- **Rule 3**: **Unbranched aliphatic carboxylic acids with chain lengths of eight carbons and no additional functional groups** result in **high yield**. An example is **octanoic acid**. Conversely, similar aliphatic acids with polar substituents—especially terminal hydroxyl (-OH) or amino (-NH₂) groups—result in **low yield**. Examples include **7-hydroxyheptanoic acid** and **7-aminoheptanoic acid**.

- **Rule 4**: **Aromatic carboxylic acids with electron-withdrawing groups at the para position**, such as nitro (-NO₂) or bromomethyl (-CH₂Br) substituents, lead to **high yield**. Examples are **4-nitrobenzoic acid** and **4-(bromomethyl)benzoic acid**. In contrast, similar compounds with electron-donating groups at the para position, like methyl (-CH₃) in **4-methylbenzoic acid**, result in **low yield**.

- **Rule 5**: **Modifiers that are aromatic carboxylic acids with para-amino (-NH₂) groups** result in **high yield**. An example is **4-aminobenzoic acid**. The amino group may facilitate better coordination with the catalyst, enhancing the reaction efficiency.

- **Rule 6**: **Heteroaromatic carboxylic acids where the nitrogen atom is part of the ring directly attached to the carboxyl group** result in **high yield**. Examples include **pyridine-3-carboxylic acid** (nicotinic acid), **2-oxo-1H-pyridine-4-carboxylic acid**, and **1H-pyrazole-4-carboxylic acid**. However, when the nitrogen-containing heterocycle is attached via an additional aromatic ring, as in **4-pyridin-4-ylbenzoic acid**, the yield is **low**.

- **Rule 7**: **Modifiers with terminal thiol (-SH) groups attached to aliphatic chains** lead to **high yield**. An example is **3-sulfanylpropanoic acid**. Conversely, modifiers with thiol groups attached directly to aromatic rings, such as **4-sulfanylbenzoic acid**, result in **low yield**.

- **Rule 8**: **Modifiers that are amino acids with bulky hydrophobic aromatic side chains**, particularly **tryptophan**, lead to **high yield**. This may be due to π-π stacking interactions facilitating catalyst activity. An example is **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (tryptophan). In contrast, amino acids with less bulky aromatic side chains, like **(2S)-2-amino-3-phenylpropanoic acid** (phenylalanine), result in **low yield**.

- **Rule 9**: **Modifiers containing highly electron-withdrawing perfluoroalkyl groups** result in **low yield**. An example is **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**. The strong electron-withdrawing effect may hinder effective coordination with the catalytic sites.

- **Rule 10**: **Modifiers with ether linkages extending from the carboxylic acid**, especially those containing polyether chains like triethylene glycol units, result in **low yield**. Examples are **2-[2-(2-methoxyethoxy)ethoxy]acetic acid** and **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**. The ether chains may introduce steric hindrance or alter the solubility profile, negatively affecting catalyst interaction.

- **Rule 11**: **Modifiers that are aliphatic carboxylic acids with multiple hydroxyl (-OH) groups on the carbon chain** lead to **high yield**. An example is **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (gluconic acid). The multiple hydroxyl groups may enhance binding affinity to the catalyst through hydrogen bonding.

- **Rule 12**: **Modifiers that are aromatic carboxylic acids with hydroxyl (-OH) groups separated from the carboxylic acid by an aliphatic linker** lead to **high yield**. An example is **5-(4-hydroxyphenyl)pentanoic acid**. In contrast, similar compounds where the hydroxyl group is directly attached to the aromatic ring without an aliphatic linker, like **3-(4-hydroxyphenyl)propanoic acid**, result in **low yield**.

- **Rule 13**: **Modifiers containing amide bonds**, particularly those formed by acylation of amino acids or linking amino acid residues, tend to result in **low yield**. Examples include **(2S)-6-acetamido-2-aminohexanoic acid**, **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid**, and **2-[(4-hydroxybenzoyl)amino]acetic acid**. The presence of amide bonds may interfere with optimal catalyst coordination due to reduced availability of lone pair electrons on the nitrogen.

- **Rule 14**: **Modifiers with aldehyde (-CHO) functional groups attached to an aromatic ring** result in **low yield**. An example is **5-formyl-2-hydroxybenzoic acid**. Aldehyde groups may participate in side reactions or deactivate catalytic sites.

- **Rule 15**: **Modifiers with carbonyl groups adjacent to an aromatic ring within a lactone or ketone structure** lead to **high yield**. An example is **1,3-dioxo-2-benzofuran-5-carboxylic acid**. The carbonyl groups may facilitate coordination with metal centers, enhancing catalytic activity.

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 2.1,Rule 3,Rule 3.1,Rule 4,Rule 4.1,Rule 5,Rule 6,Rule 6.1,Rule 7,Rule 7.1,Rule 8,Rule 8.1,Rule 9,Rule 10,Rule 11,Rule 12,Rule 12.1,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6857142857142857; Test Accuracy: 1.0
    Train Support: 0.05714285714285714; Test Support: 0.25
    Train Confidence: 1.0; Test Confidence: 0.625
    Train Lift: 2.0302287581699345; Test Lift: NONE
    Train Leverage: 0.02918367346938775; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns and related functions for each rule
    
    # Rule 1: Amino acids with acidic side chains (e.g., aspartic acid, glutamic acid) - High yield (1)
    # Pattern: Alpha-amino acid with additional carboxylic acid group in side chain
    alpha_amino_acid = Chem.MolFromSmarts('[NX3H2]-[CX4H](-[CX3](=O)-[OX1H])-[*!$([CX3](=O)[OX1H])]')
    carboxylic_acid = Chem.MolFromSmarts('[CX3](=O)[OX1H]')
    
    # Rule 2: Omega-amino acids with chain lengths ≤5 - High yield (1); >5 - Low yield (-1)
    omega_amino_acid = Chem.MolFromSmarts('[NX3H2]-[CX4]-[CX4]-[CX4]-[CX4]-[CX3](=O)[OX1H]')  # 5-carbon chain
    omega_amino_acid_long = Chem.MolFromSmarts('[NX3H2]-[CX4]-[CX4]-[CX4]-[CX4]-[CX4]-[CX3](=O)[OX1H]')  # >5-carbons
    
    # Rule 3: Unbranched aliphatic carboxylic acids with chain length of 8 carbons and no additional functional groups - High yield (1)
    # Pattern: Linear chain of 7 carbons ending with carboxylic acid
    unbranched_c8_acid = Chem.MolFromSmarts('[CX4]-[CX4]-[CX4]-[CX4]-[CX4]-[CX4]-[CX4]-[CX3](=O)[OX1H]')
    
    # Rule 3b: Similar aliphatic acids with polar substituents (terminal -OH or -NH2) - Low yield (-1)
    terminal_oh = Chem.MolFromSmarts('[OX2H]')
    terminal_nh2 = Chem.MolFromSmarts('[NX3H2]')
    
    # Rule 4: Aromatic carboxylic acids with EWG at para position - High yield (1); EDG at para position - Low yield (-1)
    aromatic_carboxylic_acid = Chem.MolFromSmarts('c1ccc([CX3](=O)[OX1H])cc1')
    para_electron_withdrawing = Chem.MolFromSmarts('c1cc([CX3](=O)[OX1H])cc([NX3+](=O)[O-])c1')  # Nitro group
    para_electron_withdrawing_halogen = Chem.MolFromSmarts('c1cc([CX3](=O)[OX1H])cc([F,Cl,Br,I])c1')
    para_electron_donating = Chem.MolFromSmarts('c1cc([CX3](=O)[OX1H])cc([CH3])c1')  # Methyl group
    
    # Rule 5: Aromatic carboxylic acids with para-amino (-NH2) groups - High yield (1)
    para_amino = Chem.MolFromSmarts('c1cc([CX3](=O)[OX1H])cc([NX3H2])c1')
    
    # Rule 6: Heteroaromatic carboxylic acids with nitrogen in ring directly attached to carboxyl group - High yield (1)
    heteroaromatic_carboxylic_acid = Chem.MolFromSmarts('[n][c][c][c][c][c][CX3](=O)[OX1H]')
    # Attached via additional ring - Low yield (-1)
    heteroaromatic_attached_via_ring = Chem.MolFromSmarts('c1ccc(-c2c[nH]ccc2)cc1[CX3](=O)[OX1H]')
    
    # Rule 7: Aliphatic thiol with carboxylic acid - High yield (1); Aromatic thiol with carboxylic acid - Low yield (-1)
    aliphatic_thiol = Chem.MolFromSmarts('[#6]-[SX2H]')
    aromatic_thiol = Chem.MolFromSmarts('c[SX2H]')
    
    # Rule 8: Amino acids with bulky hydrophobic aromatic side chains (e.g., tryptophan) - High yield (1); Less bulky (e.g., phenylalanine) - Low yield (-1)
    tryptophan_pattern = Chem.MolFromSmarts('[NX3H2]-[CX4H](-[CX3](=O)[OX1H])-[CX4]-[c]1c2ccccc2nc1')
    phenylalanine_pattern = Chem.MolFromSmarts('[NX3H2]-[CX4H](-[CX3](=O)[OX1H])-[CX4]-[c]1ccccc1')
    
    # Rule 9: Modifiers with perfluoroalkyl groups - Low yield (-1)
    perfluoroalkyl = Chem.MolFromSmarts('[CX4]([F])([F])([F])')  # Trifluoromethyl as example
    
    # Rule 10: Modifiers with ether linkages extending from carboxylic acid (polyether chains) - Low yield (-1)
    ether_linkage_from_acid = Chem.MolFromSmarts('[CX3](=O)[OX2][CX4][OX2][CX4][OX2][CX4]')  # Represents -COO-(CH2CH2O)n-
    
    # Rule 11: Aliphatic carboxylic acids with multiple hydroxyl groups on the chain - High yield (1)
    multiple_hydroxyls = Chem.MolFromSmarts('[CX3](=O)[OX1H][CX4]([OX2H])[CX4]([OX2H])[CX4]([OX2H])[CX4]([OX2H])[CX4]([OX2H])')  # Gluconic acid pattern
    
    # Rule 12: Aromatic carboxylic acids with hydroxyl groups separated by aliphatic linker - High yield (1); Hydroxyl directly on ring - Low yield (-1)
    hydroxyl_separated = Chem.MolFromSmarts('[CX3](=O)[OX1H][CX4][CX4][c]1cccc([OX2H])c1')
    hydroxyl_on_ring = Chem.MolFromSmarts('[c][OX2H]')
    
    # Rule 13: Modifiers containing amide bonds - Low yield (-1)
    amide_bond = Chem.MolFromSmarts('[NX3][CX3](=O)[#6]')
    
    # Rule 14: Modifiers with aldehyde groups attached to aromatic ring - Low yield (-1)
    aromatic_aldehyde = Chem.MolFromSmarts('c1cc([CX3H]=O)ccc1')
    
    # Rule 15: Modifiers with carbonyl groups adjacent to aromatic ring within lactone or ketone - High yield (1)
    aromatic_carbonyl = Chem.MolFromSmarts('O=C1OC(=O)c2ccccc12')  # Example pattern
    
    # Compile rules into a list
    rules = [
        {
            'number': 1,
            'description': 'Amino acids with acidic side chains',
            'pattern': [alpha_amino_acid, carboxylic_acid],
            'min_count': [1, 2],  # At least 2 carboxylic acids
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Omega-amino acids with chain lengths ≤5 (High yield)',
            'pattern': [omega_amino_acid],
            'prediction': 1
        },
        {
            'number': 2.1,
            'description': 'Omega-amino acids with chain lengths >5 (Low yield)',
            'pattern': [omega_amino_acid_long],
            'prediction': -1
        },
        {
            'number': 3,
            'description': 'Unbranched aliphatic carboxylic acids with 8 carbons and no additional functional groups',
            'pattern': [unbranched_c8_acid],
            'prediction': 1
        },
        {
            'number': 3.1,
            'description': 'Aliphatic acids with polar substituents (terminal -OH or -NH2)',
            'pattern': [terminal_oh, terminal_nh2],
            'prediction': -1
        },
        {
            'number': 4,
            'description': 'Aromatic carboxylic acids with EWG at para position',
            'pattern': [para_electron_withdrawing, para_electron_withdrawing_halogen],
            'prediction': 1
        },
        {
            'number': 4.1,
            'description': 'Aromatic carboxylic acids with EDG at para position',
            'pattern': [para_electron_donating],
            'prediction': -1
        },
        {
            'number': 5,
            'description': 'Aromatic carboxylic acids with para-amino (-NH2) groups',
            'pattern': [para_amino],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Heteroaromatic carboxylic acids with nitrogen in ring directly attached to carboxyl group',
            'pattern': [heteroaromatic_carboxylic_acid],
            'prediction': 1
        },
        {
            'number': 6.1,
            'description': 'Nitrogen-containing heterocycles attached via additional ring',
            'pattern': [heteroaromatic_attached_via_ring],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Aliphatic thiol with carboxylic acid',
            'pattern': [aliphatic_thiol, carboxylic_acid],
            'prediction': 1
        },
        {
            'number': 7.1,
            'description': 'Aromatic thiol with carboxylic acid',
            'pattern': [aromatic_thiol, carboxylic_acid],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Amino acids with bulky aromatic side chains (e.g., tryptophan)',
            'pattern': [tryptophan_pattern],
            'prediction': 1
        },
        {
            'number': 8.1,
            'description': 'Amino acids with less bulky aromatic side chains (e.g., phenylalanine)',
            'pattern': [phenylalanine_pattern],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers with perfluoroalkyl groups',
            'pattern': [perfluoroalkyl],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers with ether linkages extending from carboxylic acid',
            'pattern': [ether_linkage_from_acid],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Aliphatic carboxylic acids with multiple hydroxyl groups',
            'pattern': [multiple_hydroxyls],
            'prediction': 1
        },
        {
            'number': 12,
            'description': 'Aromatic carboxylic acids with hydroxyl groups separated by aliphatic linker',
            'pattern': [hydroxyl_separated],
            'prediction': 1
        },
        {
            'number': 12.1,
            'description': 'Aromatic carboxylic acids with hydroxyl groups directly on ring',
            'pattern': [hydroxyl_on_ring, aromatic_carboxylic_acid],
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Modifiers containing amide bonds',
            'pattern': [amide_bond],
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'Modifiers with aldehyde groups attached to aromatic ring',
            'pattern': [aromatic_aldehyde],
            'prediction': -1
        },
        {
            'number': 15,
            'description': 'Modifiers with carbonyl groups adjacent to aromatic ring within lactone or ketone',
            'pattern': [aromatic_carbonyl],
            'prediction': 1
        }
    ]
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check each pattern in the rule
                for pattern in rule['pattern']:
                    if mol.HasSubstructMatch(pattern):
                        continue
                    else:
                        match = False
                        break
                # Apply min_count if specified
                if 'min_count' in rule and match:
                    for idx, pattern in enumerate(rule['pattern']):
                        matches = mol.GetSubstructMatches(pattern)
                        if len(matches) < rule['min_count'][idx]:
                            match = False
                            break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: **Modifiers that are unbranched aliphatic carboxylic acids without polar substituents**—such as hydroxyl (-OH), amino (-NH₂), or ether groups—tend to result in **high yield**. An example is **octanoic acid**. In contrast, **aliphatic carboxylic acids with polar substituents** or **longer chain lengths (more than eight carbons)** tend to result in **low yield**. Examples include **7-hydroxyheptanoic acid**, **7-aminoheptanoic acid**, and **8-aminooctanoic acid**.

- **Rule 2**: **Aromatic carboxylic acids with electron-withdrawing substituents at the para position**—such as nitro (-NO₂) or bromomethyl (-CH₂Br) groups—lead to **high yield**. Examples: **4-nitrobenzoic acid** and **4-(bromomethyl)benzoic acid**. Conversely, **aromatic carboxylic acids with electron-donating substituents at the para position**—such as methyl (-CH₃) or hydroxyl (-OH) groups—result in **low yield**. Examples include **4-methylbenzoic acid** and **4-hydroxybenzoic acid**. Notably, **para-amino (-NH₂) groups** are an exception and result in **high yield**, as seen with **4-aminobenzoic acid**.

- **Rule 3**: **Modifiers that are amino acids with acidic side chains**, specifically those containing an additional carboxylic acid group beyond the alpha-carboxyl, lead to **high yield**. Examples: **(2S)-2-aminobutanedioic acid** (aspartic acid) and **(2S)-2-aminopentanedioic acid** (glutamic acid).

- **Rule 4**: **Modifiers that are omega-amino acids with chain lengths of five carbons or fewer** result in **high yield**. An example is **5-aminopentanoic acid**. In contrast, **omega-amino acids with chain lengths greater than five carbons** result in **low yield**. Examples: **7-aminoheptanoic acid** and **8-aminooctanoic acid**.

- **Rule 5**: **Modifiers containing aromatic rings separated from hydrophilic groups (e.g., hydroxyl groups) by aliphatic chains** lead to **high yield**. An example is **5-(4-hydroxyphenyl)pentanoic acid**. Conversely, **modifiers where hydrophilic groups are directly attached to the aromatic ring** result in **low yield**. Examples include **3-(4-hydroxyphenyl)propanoic acid** and **5-formyl-2-hydroxybenzoic acid**.

- **Rule 6**: **Modifiers that are heteroaromatic carboxylic acids with nitrogen atoms in the ring directly attached to the carboxyl group** result in **high yield**. Examples include **pyridine-3-carboxylic acid**, **2-oxo-1H-pyridine-4-carboxylic acid**, and **1H-pyrazole-4-carboxylic acid**. However, **when the nitrogen-containing heterocycle is connected via an additional aromatic ring**, as in **4-pyridin-4-ylbenzoic acid**, the yield is **low**.

- **Rule 7**: **Modifiers with thiol (-SH) groups attached to short aliphatic chains** lead to **high yield**. An example is **3-sulfanylpropanoic acid**. In contrast, **modifiers with thiol groups attached directly to aromatic rings**, such as **4-sulfanylbenzoic acid**, result in **low yield**.

- **Rule 8**: **Modifiers containing multiple hydroxyl (-OH) groups on an aliphatic chain** result in **high yield**. Examples include **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (gluconic acid) and **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid**. The abundance of hydroxyl groups may enhance interactions with the catalyst through hydrogen bonding.

- **Rule 9**: **Modifiers containing amide bonds**, particularly those formed by acylation of amino acids or linking amino acid residues, tend to result in **low yield**. Examples include **(2S)-6-acetamido-2-aminohexanoic acid**, **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid**, and **2-[(4-hydroxybenzoyl)amino]acetic acid**.

- **Rule 10**: **Modifiers with ether linkages extending from the carboxylic acid**, including polyether chains, result in **low yield**. Examples are **2-[2-(2-methoxyethoxy)ethoxy]acetic acid** and **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**.

- **Rule 11**: **Modifiers containing highly electron-withdrawing fluorinated alkyl chains** result in **low yield**. An example is **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**. The strong electron-withdrawing effect may hinder effective coordination with the catalytic sites.

- **Rule 12**: **Modifiers that are amino acids with bulky hydrophobic aromatic side chains**, particularly those containing an indole ring, lead to **high yield**. An example is **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (tryptophan). In contrast, **amino acids with less bulky aromatic side chains**, like **(2S)-2-amino-3-phenylpropanoic acid** (phenylalanine), result in **low yield**.

- **Rule 13**: **Modifiers with carbonyl groups adjacent to an aromatic ring within a fused lactone or ketone structure** lead to **high yield**. An example is **1,3-dioxo-2-benzofuran-5-carboxylic acid**. The carbonyl groups may facilitate coordination with metal centers, enhancing catalytic activity.

- **Rule 14**: **Modifiers with aliphatic chains terminated with aldehyde (-CHO) or ketone (C=O) groups** result in **low yield**. Examples include **4-oxoheptanedioic acid** and **5-formyl-2-hydroxybenzoic acid**. The presence of these groups may interfere with catalyst interaction.

- **Rule 15**: **Modifiers with bulky substituents on the aliphatic chain**, such as methoxy groups or other large functional groups, tend to result in **high yield**. An example is **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid**. The bulky groups may enhance binding affinity to the catalyst.

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 2.1,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0
0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,1,0,1,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,1,0,0,0,0,0,0,0
0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
0,0,-1,0,0,-1,0,0,1,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0
0,0,-1,0,0,-1,0,0,1,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,1,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,1,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.7714285714285715; Test Accuracy: 0.0
    Train Support: 0.1523809523809524; Test Support: 0.0
    Train Confidence: 0.9090909090909092; Test Confidence: 0.5
    Train Lift: 1.8447959992077638; Test Lift: NONE
    Train Leverage: 0.06204081632653061; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Import necessary modules
    from rdkit import Chem
    from rdkit.Chem import AllChem
    import pandas as pd

    # Define SMARTS patterns and helper functions for rules

    # Rule 1: High yield - Unbranched aliphatic carboxylic acids without polar substituents, chain length ≤ 8 carbons
    def rule1(mol):
        try:
            # Check for carboxylic acid group
            carboxylic_acid = Chem.MolFromSmarts('[CX3](=O)[OX2H1]')
            if not mol.HasSubstructMatch(carboxylic_acid):
                return 0
            # Ensure molecule is aliphatic (no aromatic atoms)
            if mol.GetNumAromaticAtoms() > 0:
                return 0
            # Check for unbranched chain
            for atom in mol.GetAtoms():
                if atom.GetAtomicNum() == 6:
                    if atom.GetDegree() > 2:
                        return 0  # Branching detected
            # Check for polar substituents (-OH, -NH2, ethers)
            polar_groups = Chem.MolFromSmarts('[#8,#7]')  # O or N atoms
            matches = mol.GetSubstructMatches(polar_groups)
            polar_atoms = [mol.GetAtomWithIdx(match[0]) for match in matches]
            # Exclude O in carboxylic acid
            carboxylic_oxygens = [atom.GetIdx() for atom in mol.GetAtoms() if atom.GetAtomicNum() == 8 and atom.GetDegree() == 1 and atom.GetNeighbors()[0].GetAtomicNum() == 6 and atom.GetNeighbors()[0].GetTotalDegree() == 3]
            polar_atoms = [atom for atom in polar_atoms if atom.GetIdx() not in carboxylic_oxygens]
            if polar_atoms:
                return 0  # Polar substituents detected
            # Check chain length (number of carbons)
            num_carbons = sum(1 for atom in mol.GetAtoms() if atom.GetAtomicNum() == 6)
            if num_carbons > 8:
                return 0
            return 1
        except:
            return 0

    # Rule 2: High yield - Aromatic carboxylic acids with EWG at para position
    def rule2(mol):
        try:
            # Check for aromatic carboxylic acid
            aromatic_carboxylic_acid = Chem.MolFromSmarts('c[C](=O)[O,H]')
            if not mol.HasSubstructMatch(aromatic_carboxylic_acid):
                return 0
            # Check for specific EWG at para position (e.g., nitro, bromomethyl)
            para_substituents = ['[c][c]([NX3](=O)=O)',  # Nitro group
                                 '[c][c][CX4][Br]']       # Bromomethyl group
            for pattern in para_substituents:
                smarts = Chem.MolFromSmarts(pattern)
                if mol.HasSubstructMatch(smarts):
                    return 1
            # Exclude EDG at para position (will be handled in Rule 2 negative case)
            return 0
        except:
            return 0

    # Rule 2 Negative: Low yield - Aromatic carboxylic acids with EDG at para position (excluding para-amino)
    def rule2_negative(mol):
        try:
            # Check for aromatic carboxylic acid
            aromatic_carboxylic_acid = Chem.MolFromSmarts('c[C](=O)[O,H]')
            if not mol.HasSubstructMatch(aromatic_carboxylic_acid):
                return 0
            # Check for specific EDG at para position
            para_edgs = ['[c][c]([CH3])',    # Methyl group
                         '[c][c][OH]',      # Hydroxyl group
                         '[c][c][NX3H2]']   # Amino group (except para-amino which results in high yield)
            for pattern in para_edgs:
                smarts = Chem.MolFromSmarts(pattern)
                matches = mol.GetSubstructMatches(smarts)
                for match in matches:
                    # Exclude para-amino
                    atom = mol.GetAtomWithIdx(match[2])
                    if atom.GetSymbol() == 'N' and atom.GetTotalNumHs() == 2:
                        return 1  # Para-amino results in high yield
                    else:
                        return -1
            return 0
        except:
            return 0

    # Rule 3: High yield - Amino acids with acidic side chains (additional -COOH beyond alpha-carboxyl)
    def rule3(mol):
        try:
            # Check for amino acid backbone
            amino_acid = Chem.MolFromSmarts('[NX3][CX4H]([*])[CX3](=O)[O-]')
            if not mol.HasSubstructMatch(amino_acid):
                return 0
            # Check for additional carboxylic acid group in side chain
            side_chain_acid = Chem.MolFromSmarts('[CX3](=O)[OX2H1]')
            matches = mol.GetSubstructMatches(side_chain_acid)
            if len(matches) > 1:
                return 1
            return 0
        except:
            return 0

    # Rule 4: High yield - Omega-amino acids with chain lengths ≤ 5 carbons
    def rule4(mol):
        try:
            # Check for omega-amino acid (amino group at opposite end of carboxylic acid)
            carboxylic_acid = Chem.MolFromSmarts('[CX3](=O)[OX2H1]')
            amino_group = Chem.MolFromSmarts('[NX3H2]')
            if mol.HasSubstructMatch(carboxylic_acid) and mol.HasSubstructMatch(amino_group):
                # Calculate the shortest path between amino nitrogen and carboxyl carbon
                carboxyl_carbons = mol.GetSubstructMatches(Chem.MolFromSmarts('[CX3](=O)[OX2H1]'))
                amino_nitrogens = mol.GetSubstructMatches(Chem.MolFromSmarts('[NX3H2]'))
                for c_idx in [match[0] for match in carboxyl_carbons]:
                    for n_idx in [match[0] for match in amino_nitrogens]:
                        path_length = len(Chem.rdmolops.GetShortestPath(mol, c_idx, n_idx)) - 1
                        if path_length <= 5:
                            return 1
                        elif path_length > 5:
                            return -1
            return 0
        except:
            return 0

    # Rule 5: High yield - Aromatic rings separated from hydrophilic groups by aliphatic chains
    def rule5(mol):
        try:
            # Check for aromatic ring
            aromatic_ring = Chem.MolFromSmarts('a1aaaaa1')
            if not mol.HasSubstructMatch(aromatic_ring):
                return 0
            # Check for hydrophilic group attached via aliphatic chain
            hydrophilic_groups = ['[OX2H]', '[NX3H2]']  # Hydroxyl or amino groups
            for pattern in hydrophilic_groups:
                smarts = Chem.MolFromSmarts('aaa[CH2][CH2][CH2]' + pattern)
                if mol.HasSubstructMatch(smarts):
                    return 1
            # Check for hydrophilic groups directly attached to aromatic ring (negative case)
            direct_attachment = ['[c][OX2H]', '[c][NX3H2]']
            for pattern in direct_attachment:
                smarts = Chem.MolFromSmarts(pattern)
                if mol.HasSubstructMatch(smarts):
                    return -1
            return 0
        except:
            return 0

    # Rule 6: High yield - Heteroaromatic carboxylic acids with N in ring directly attached to carboxyl group
    def rule6(mol):
        try:
            # Check for heteroaromatic ring with N attached to carboxyl
            pattern = Chem.MolFromSmarts('[n][c](=O)[O,H]')
            if mol.HasSubstructMatch(pattern):
                return 1
            # Exclude cases where N-heterocycle is connected via additional aromatic ring
            extended_ring = Chem.MolFromSmarts('[c][c][n][c](=O)[O,H]')
            if mol.HasSubstructMatch(extended_ring):
                return -1
            return 0
        except:
            return 0

    # Rule 7: High yield - Thiol (-SH) groups attached to short aliphatic chains
    def rule7(mol):
        try:
            # Check for thiol group attached to short chain
            thiol = Chem.MolFromSmarts('[SX2H]')
            if mol.HasSubstructMatch(thiol):
                # Check chain length from thiol to carboxyl
                thiol_atoms = mol.GetSubstructMatches(thiol)
                carboxylic_acid = Chem.MolFromSmarts('[CX3](=O)[OX2H1]')
                carboxyl_atoms = mol.GetSubstructMatches(carboxylic_acid)
                for s_idx in [match[0] for match in thiol_atoms]:
                    for c_idx in [match[0] for match in carboxyl_atoms]:
                        path_length = len(Chem.rdmolops.GetShortestPath(mol, s_idx, c_idx)) - 1
                        if path_length <= 5:
                            return 1
                return 0
            # Check for thiol directly attached to aromatic ring (negative case)
            aromatic_thiol = Chem.MolFromSmarts('[c][SX2H]')
            if mol.HasSubstructMatch(aromatic_thiol):
                return -1
            return 0
        except:
            return 0

    # Rule 8: High yield - Modifiers containing multiple hydroxyl (-OH) groups on an aliphatic chain
    def rule8(mol):
        try:
            # Check for multiple hydroxyl groups
            hydroxyl = Chem.MolFromSmarts('[OX2H]')
            matches = mol.GetSubstructMatches(hydroxyl)
            if len(matches) >= 2:
                return 1
            return 0
        except:
            return 0

    # Rule 9: Low yield - Modifiers containing amide bonds
    def rule9(mol):
        try:
            amide = Chem.MolFromSmarts('[NX3][CX3](=O)[#6]')
            if mol.HasSubstructMatch(amide):
                return -1
            return 0
        except:
            return 0

    # Rule 10: Low yield - Modifiers with ether linkages extending from the carboxylic acid
    def rule10(mol):
        try:
            # Check for ether linkage extending from carboxylic acid
            ether = Chem.MolFromSmarts('[CX3](=O)[OX2][CX4][OX2][CX4]')
            if mol.HasSubstructMatch(ether):
                return -1
            return 0
        except:
            return 0

    # Rule 11: Low yield - Modifiers with highly electron-withdrawing fluorinated alkyl chains
    def rule11(mol):
        try:
            # Check for fluorinated alkyl chain
            fluorinated_chain = Chem.MolFromSmarts('[CX4]([F])[F]')
            if mol.HasSubstructMatch(fluorinated_chain):
                return -1
            return 0
        except:
            return 0

    # Rule 12: High yield - Amino acids with bulky hydrophobic aromatic side chains (e.g., tryptophan)
    def rule12(mol):
        try:
            # Check for tryptophan-like side chain
            indole = Chem.MolFromSmarts('c1ccc2c(c1)cc[nH]2')
            if mol.HasSubstructMatch(indole):
                amino_acid = Chem.MolFromSmarts('[NX3][CX4H]([*])[CX3](=O)[O-]')
                if mol.HasSubstructMatch(amino_acid):
                    return 1
            # Check for less bulky aromatic side chains (phenylalanine)
            phenyl = Chem.MolFromSmarts('c1ccccc1')
            if mol.HasSubstructMatch(phenyl):
                amino_acid = Chem.MolFromSmarts('[NX3][CX4H]([*])[CX3](=O)[O-]')
                if mol.HasSubstructMatch(amino_acid):
                    return -1
            return 0
        except:
            return 0

    # Rule 13: High yield - Modifiers with carbonyl groups adjacent to an aromatic ring within a fused lactone or ketone structure
    def rule13(mol):
        try:
            pattern = Chem.MolFromSmarts('c1ccc2c(c1)C(=O)O2')  # Benzofuranone
            if mol.HasSubstructMatch(pattern):
                return 1
            return 0
        except:
            return 0

    # Rule 14: Low yield - Modifiers with aliphatic chains terminated with aldehyde (-CHO) or ketone (C=O) groups
    def rule14(mol):
        try:
            aldehyde = Chem.MolFromSmarts('[CX3H1](=O)[#6]')
            ketone = Chem.MolFromSmarts('[#6][CX3](=O)[#6]')
            if mol.HasSubstructMatch(aldehyde) or mol.HasSubstructMatch(ketone):
                return -1
            return 0
        except:
            return 0

    # Rule 15: High yield - Modifiers with bulky substituents on the aliphatic chain (e.g., methoxy groups)
    def rule15(mol):
        try:
            # Check for bulky substituents on aliphatic chain
            methoxy = Chem.MolFromSmarts('[CX4][OX2][CH3]')
            if mol.HasSubstructMatch(methoxy):
                return 1
            return 0
        except:
            return 0

    # List of rule functions and their predictions
    rules = [
        {'number': 1, 'function': rule1, 'description': 'Unbranched aliphatic carboxylic acids without polar substituents (high yield)'},
        {'number': 2, 'function': rule2, 'description': 'Aromatic carboxylic acids with EWG at para position (high yield)'},
        {'number': 2.1, 'function': rule2_negative, 'description': 'Aromatic carboxylic acids with EDG at para position (low yield)'},
        {'number': 3, 'function': rule3, 'description': 'Amino acids with acidic side chains (high yield)'},
        {'number': 4, 'function': rule4, 'description': 'Omega-amino acids with chain lengths ≤ 5 carbons (high yield)'},
        {'number': 5, 'function': rule5, 'description': 'Aromatic rings separated from hydrophilic groups by aliphatic chains (high yield)'},
        {'number': 6, 'function': rule6, 'description': 'Heteroaromatic carboxylic acids with N directly attached to carboxyl group (high yield)'},
        {'number': 7, 'function': rule7, 'description': 'Thiol groups attached to short aliphatic chains (high yield)'},
        {'number': 8, 'function': rule8, 'description': 'Modifiers with multiple hydroxyl groups on aliphatic chain (high yield)'},
        {'number': 9, 'function': rule9, 'description': 'Modifiers containing amide bonds (low yield)'},
        {'number': 10, 'function': rule10, 'description': 'Modifiers with ether linkages extending from carboxylic acid (low yield)'},
        {'number': 11, 'function': rule11, 'description': 'Modifiers with fluorinated alkyl chains (low yield)'},
        {'number': 12, 'function': rule12, 'description': 'Amino acids with bulky hydrophobic aromatic side chains (high yield)'},
        {'number': 13, 'function': rule13, 'description': 'Carbonyl groups adjacent to aromatic ring in fused lactone/ketone (high yield)'},
        {'number': 14, 'function': rule14, 'description': 'Modifiers with aliphatic chains terminated with aldehyde or ketone groups (low yield)'},
        {'number': 15, 'function': rule15, 'description': 'Modifiers with bulky substituents on aliphatic chain (high yield)'}
    ]

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            prediction = rule['function'](mol)
            row.append(prediction)
        results.append(row)

    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: **Modifiers that are amino acids with acidic side chains**, specifically those containing an additional carboxylic acid group beyond the alpha-carboxyl group, result in **high yield**. Examples include **(2S)-2-aminobutanedioic acid** (aspartic acid) and **(2S)-2-aminopentanedioic acid** (glutamic acid). The presence of two carboxyl groups may enhance coordination with the metal center.

- **Rule 2**: **Aromatic carboxylic acids with strong electron-withdrawing groups (EWGs) at the para position** lead to **high yield**. Examples are **4-nitrobenzoic acid** and **4-(bromomethyl)benzoic acid**. Conversely, **aromatic carboxylic acids with electron-donating groups (EDGs) at the para position** result in **low yield**—examples include **4-methylbenzoic acid** and **4-hydroxybenzoic acid**. An exception is **para-amino (-NH₂) substituted acids**, which give **high yield**, as seen with **4-aminobenzoic acid**. The amino group, while an EDG, can coordinate with the metal center, enhancing activity.

- **Rule 3**: **Omega-amino acids with aliphatic chains of five carbons or fewer** result in **high yield**. An example is **5-aminopentanoic acid**. In contrast, **omega-amino acids with longer chains (more than five carbons)** result in **low yield**, such as **7-aminoheptanoic acid** and **8-aminooctanoic acid**. Shorter chains may favor better interaction with the catalyst.

- **Rule 4**: **Modifiers containing multiple hydroxyl (-OH) groups on an aliphatic chain**, especially **sugar acids**, lead to **high yield**. Examples include **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (gluconic acid) and **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid**. Multiple hydroxyl groups may enhance hydrogen bonding and coordination with the catalyst.

- **Rule 5**: **Modifiers that are heteroaromatic carboxylic acids with heteroatoms (e.g., nitrogen) adjacent to the carboxyl group** result in **high yield**. Examples are **pyridine-3-carboxylic acid**, **1H-pyrazole-4-carboxylic acid**, and **2-oxo-1H-pyridine-4-carboxylic acid**. The heteroatom near the carboxyl group can coordinate with the metal center.

- **Rule 6**: **Modifiers that are amino acids with bulky hydrophobic side chains containing heterocycles**, such as the indole ring, lead to **high yield**. An example is **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (tryptophan). Bulky side chains may enhance interaction with the catalyst.

- **Rule 7**: **Modifiers with short aliphatic chains bearing thiol (-SH) groups** result in **high yield**. An example is **3-sulfanylpropanoic acid**. In contrast, **modifiers with thiol groups directly attached to aromatic rings** result in **low yield**, such as **4-sulfanylbenzoic acid**. The thiol group on a flexible chain may better interact with the catalyst.

- **Rule 8**: **Unbranched aliphatic carboxylic acids with chain lengths of 5 to 8 carbons without additional functional groups** result in **high yield**. An example is **octanoic acid**. Conversely, **aliphatic carboxylic acids with polar substituents (e.g., hydroxyl or amino groups) on longer chains** result in **low yield**. Examples include **7-hydroxyheptanoic acid** and **8-aminooctanoic acid**. Polar substituents may hinder the interaction with the catalyst due to steric or electronic factors.

- **Rule 9**: **Modifiers where functional groups are connected to an aromatic ring via an aliphatic chain** lead to **high yield**. Examples include **5-(4-hydroxyphenyl)pentanoic acid** and **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid**. Conversely, **modifiers with the same functional groups directly attached to the aromatic ring** result in **low yield**, such as **4-hydroxybenzoic acid** and **3-(4-hydroxyphenyl)propanoic acid**. The aliphatic linker may reduce steric hindrance and improve interaction with the catalyst.

- **Rule 10**: **Modifiers containing amide bonds**, particularly those formed by acylation of amino acids or linking amino acid residues, tend to result in **low yield**. Examples are **(2S)-6-acetamido-2-aminohexanoic acid** and **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid**. The amide linkage may reduce the availability of coordination sites.

- **Rule 11**: **Modifiers with ether linkages extending from the carboxylic acid**, especially those with polyether chains, result in **low yield**. Examples include **2-[2-(2-methoxyethoxy)ethoxy]acetic acid** and **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**. The ether oxygen may compete with the carboxylate for coordination, reducing efficacy.

- **Rule 12**: **Modifiers containing fused aromatic lactones or multiple carbonyl groups in an aromatic system** result in **high yield**. An example is **1,3-dioxo-2-benzofuran-5-carboxylic acid**. The additional carbonyl groups may enhance metal coordination.

- **Rule 13**: **Modifiers containing highly electron-withdrawing fluorinated groups**, such as perfluoroalkyl or trifluoroacetyl chains, result in **low yield**. Examples include **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid** and **4-[(2,2,2-trifluoroacetyl)amino]butanoic acid**. The strong electron-withdrawing effect may reduce the ability of the carboxylate to coordinate with the metal center.

- **Rule 14**: **Modifiers where a heteroaromatic ring is connected to the carboxylic acid via an aliphatic chain** result in **high yield**. An example is **4-pyridin-4-ylbutanoic acid**. Conversely, **modifiers where the heteroaromatic ring is directly attached to the carboxylic acid**, and the heteroatom is not adjacent to the carboxyl group, result in **low yield**—for example, **4-pyridin-4-ylbenzoic acid**. The aliphatic linker may facilitate better orientation for coordination.

- **Rule 15**: **Modifiers containing aldehyde (-CHO) functional groups** result in **low yield**. An example is **5-formyl-2-hydroxybenzoic acid**. The aldehyde group may interfere with the catalyst or undergo side reactions.

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,1,0,0,1,0,0,0,0,0,0,0,0,0,-1
1,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,1,0,0,0,0,0,0,0,0,0,0
1,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,1,0,1,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,1,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0
0,1,0,0,0,1,0,0,0,0,0,0,0,0,0
0,1,0,0,1,0,0,0,0,0,0,0,0,0,0
0,1,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
0,1,0,1,1,0,0,0,0,0,0,0,0,0,-1
0,1,0,0,1,0,0,0,0,0,0,0,0,0,0
0,1,0,0,1,0,0,0,0,0,0,0,0,0,0
0,1,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,1,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,1,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6285714285714286; Test Accuracy: 0.0
    Train Support: 0.11428571428571428; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 2.0588235294117645; Test Lift: NONE
    Train Leverage: 0.05877551020408162; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and components used in rules
    
    # Common functional groups
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    amino_group = '[NX3;H2]'
    hydroxyl_group = '[OX2H]'
    thiol_group = '[SX2H]'
    aldehyde_group = '[CX3H1](=O)'
    aromatic_ring = 'a'
    aliphatic_chain = '[CX4H2][CX4H2][CX4H2][CX4H2][CX4H2]'
    
    # Electron-Withdrawing Groups (EWGs)
    ewg = ['[CX3](=O)[OX1-]',  # Carboxylate anion
           '[CX3](=O)[OX2H1]',  # Carboxylic acid
           '[CX3]=[OX1]',       # Carbonyl group
           '[NX3+](=O)[O-]',    # Nitro group
           '[F,Cl,Br,I]',       # Halogens
           '[CX4]([F])([F])[F]']  # Trifluoromethyl group
    
    # Electron-Donating Groups (EDGs)
    edg = ['[OX2H]',            # Hydroxyl group
           '[OX2][#6]',         # Alkoxy group
           '[NX3;H2,H1][#6]']   # Amino group
    
    # Compile SMARTS patterns
    patterns = {
        'carboxylic_acid': Chem.MolFromSmarts(carboxylic_acid),
        'amino_group': Chem.MolFromSmarts(amino_group),
        'hydroxyl_group': Chem.MolFromSmarts(hydroxyl_group),
        'thiol_group': Chem.MolFromSmarts(thiol_group),
        'aldehyde_group': Chem.MolFromSmarts(aldehyde_group),
        'aromatic_ring': Chem.MolFromSmarts(aromatic_ring),
        'aliphatic_chain': Chem.MolFromSmarts(aliphatic_chain),
    }
    
    # Compile EWG and EDG patterns
    ewg_patterns = [Chem.MolFromSmarts(p) for p in ewg]
    edg_patterns = [Chem.MolFromSmarts(p) for p in edg]
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'High yield: Amino acids with acidic side chains (additional COOH group).',
            'patterns': [
                patterns['amino_group'],
                patterns['carboxylic_acid'],
            ],
            'count_patterns': {
                patterns['carboxylic_acid']: 2  # At least two carboxylic acid groups
            },
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'High yield: Aromatic carboxylic acids with EWGs at para position. Exception: Para-amino acids also high yield.',
            'patterns': [
                patterns['carboxylic_acid'],
                patterns['aromatic_ring'],
            ],
            'ewg_patterns': ewg_patterns,
            'special_case_amino': Chem.MolFromSmarts('[c][NX3;H2,H1][c]'),
            'position': 'para',
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'High yield: Omega-amino acids with aliphatic chains of five carbons or fewer.',
            'patterns': [
                Chem.MolFromSmarts('[NX3;H2][CH2,$(CH2)][CH2,$(CH2)][CH2,$(CH2)][CH2,$(CH2)][CX3](=O)[OX2H1]'),
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'High yield: Modifiers containing multiple hydroxyl groups on an aliphatic chain.',
            'patterns': [
                patterns['carboxylic_acid'],
            ],
            'count_patterns': {
                patterns['hydroxyl_group']: 2  # At least two hydroxyl groups
            },
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'High yield: Heteroaromatic carboxylic acids with heteroatoms adjacent to the carboxyl group.',
            'patterns': [
                Chem.MolFromSmarts('[n,c][c,n][c,n][c,n][c,n][CX3](=O)[OX2H1]'),
            ],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'High yield: Amino acids with bulky hydrophobic side chains containing heterocycles.',
            'patterns': [
                patterns['amino_group'],
                patterns['carboxylic_acid'],
                Chem.MolFromSmarts('[$([CX4][c])]')  # Side chain attached to aromatic ring
            ],
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'High yield: Modifiers with short aliphatic chains bearing thiol groups.',
            'patterns': [
                patterns['thiol_group'],
                Chem.MolFromSmarts('[CX3](=O)[OX2H1]'),
            ],
            'exclude_patterns': [
                Chem.MolFromSmarts('[c][SX2H]')  # Exclude thiol on aromatic ring
            ],
            'prediction': 1
        },
        {
            'number': 8,
            'description': 'High yield: Unbranched aliphatic carboxylic acids with 5 to 8 carbons without additional functional groups.',
            'patterns': [
                Chem.MolFromSmarts('[CH3][CH2][CH2][CH2][CH2][CH2][CX3](=O)[OX2H1]'),  # Example for hexanoic acid
            ],
            'exclude_patterns': [
                patterns['hydroxyl_group'],
                patterns['amino_group'],
            ],
            'prediction': 1
        },
        {
            'number': 9,
            'description': 'High yield: Functional groups connected to an aromatic ring via an aliphatic chain.',
            'patterns': [
                Chem.MolFromSmarts('[c][CX4][CX3](=O)[OX2H1]'),
            ],
            'prediction': 1
        },
        {
            'number': 10,
            'description': 'Low yield: Modifiers containing amide bonds.',
            'patterns': [
                Chem.MolFromSmarts('[CX3](=O)[NX3]'),
            ],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Low yield: Modifiers with ether linkages extending from the carboxylic acid.',
            'patterns': [
                Chem.MolFromSmarts('[CX3](=O)[OX2][CX4][OX2][CX4]'),
            ],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'High yield: Modifiers containing fused aromatic lactones or multiple carbonyl groups in an aromatic system.',
            'patterns': [
                Chem.MolFromSmarts('[c]1[c](=O)[c][o][c](=O)[c]1'),  # Example pattern for benzofuran-1,3-dione
            ],
            'prediction': 1
        },
        {
            'number': 13,
            'description': 'Low yield: Modifiers containing highly electron-withdrawing fluorinated groups.',
            'patterns': [
                Chem.MolFromSmarts('[CX4]([F])([F])[F]'),
            ],
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'High yield: Heteroaromatic ring connected to the carboxylic acid via an aliphatic chain.',
            'patterns': [
                Chem.MolFromSmarts('[n][CX4][CX3](=O)[OX2H1]'),
            ],
            'prediction': 1
        },
        {
            'number': 15,
            'description': 'Low yield: Modifiers containing aldehyde functional groups.',
            'patterns': [
                patterns['aldehyde_group'],
            ],
            'prediction': -1
        },
    ]
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for pat in rule['exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for pat in rule.get('patterns', []):
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                # Special handling for Rule 2 (EWG/EDG at para position)
                if rule['number'] == 2:
                    # Check for para-substituted aromatic ring with EWG
                    # Simplification: Check if molecule has an aromatic ring with EWG
                    ewg_match = False
                    for ewg_pat in rule['ewg_patterns']:
                        if mol.HasSubstructMatch(ewg_pat):
                            ewg_match = True
                            break
                    # Exception for para-amino acids
                    if mol.HasSubstructMatch(rule['special_case_amino']):
                        ewg_match = True
                    if not ewg_match:
                        match = False
                # Check count patterns
                if 'count_patterns' in rule:
                    for pat, count_threshold in rule['count_patterns'].items():
                        matches = mol.GetSubstructMatches(pat)
                        if len(matches) < count_threshold:
                            match = False
                            break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: **Modifiers that are amino acids with side chains containing additional carboxyl groups**, such as **(2S)-2-aminobutanedioic acid** (aspartic acid) and **(2S)-2-aminopentanedioic acid** (glutamic acid), result in **high yield**. The extra carboxylate group may enhance coordination with the metal center, improving catalytic activity.

- **Rule 2**: **Aromatic carboxylic acids with strong electron-withdrawing groups (EWGs) at the para position** lead to **high yield**. Examples include **4-nitrobenzoic acid** and **4-(bromomethyl)benzoic acid**. Conversely, **aromatic carboxylic acids with electron-donating groups (EDGs) at the para position** result in **low yield**—examples are **4-methylbenzoic acid** and **4-hydroxybenzoic acid**. EWGs increase the acidity and coordinate better with the metal center.

- **Rule 3**: **Omega-amino acids with aliphatic chains of five carbons or fewer** result in **high yield**. An example is **5-aminopentanoic acid**. In contrast, **omega-amino acids with longer chains (more than five carbons)** result in **low yield**, such as **7-aminoheptanoic acid** and **8-aminooctanoic acid**. Shorter chains may facilitate better interaction due to reduced steric hindrance.

- **Rule 4**: **Modifiers containing multiple hydroxyl (-OH) groups on an aliphatic chain**, especially **sugar acids**, lead to **high yield**. Examples include **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (gluconic acid) and **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid**. Multiple hydroxyl groups enhance hydrogen bonding and coordination with the catalyst.

- **Rule 5**: **Modifiers that are heteroaromatic carboxylic acids with heteroatoms adjacent to the carboxyl group** result in **high yield**. Examples are **pyridine-3-carboxylic acid**, **1H-pyrazole-4-carboxylic acid**, and **2-oxo-1H-pyridine-4-carboxylic acid**. The proximity of heteroatoms (like nitrogen) aids in coordinating with the metal center.

- **Rule 6**: **Modifiers with thiol (-SH) groups on short aliphatic chains** result in **high yield**. An example is **3-sulfanylpropanoic acid**. In contrast, **modifiers with thiol groups directly attached to aromatic rings** result in **low yield**, such as **4-sulfanylbenzoic acid**. Aliphatic thiols have greater flexibility for coordination.

- **Rule 7**: **Unbranched aliphatic carboxylic acids with chain lengths of 6 to 8 carbons without additional functional groups** result in **high yield**. An example is **octanoic acid**. The hydrophobic chain may enhance interaction with the catalyst's active site.

- **Rule 8**: **Modifiers with amide bonds**, particularly those linking amino acids or functional groups, tend to result in **low yield**. Examples are **(2S)-6-acetamido-2-aminohexanoic acid** and **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid**. The amide linkage may hinder coordination due to reduced electron density on the nitrogen.

- **Rule 9**: **Modifiers containing perfluoroalkyl groups** result in **low yield**. An example is **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**. The strong electron-withdrawing effect diminishes coordination ability.

- **Rule 10**: **Modifiers with ether linkages extending from the carboxylic acid**, especially polyether chains, result in **low yield**. Examples include **2-[2-(2-methoxyethoxy)ethoxy]acetic acid** and **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**. Ether oxygens may compete with carboxylate for metal coordination, reducing catalyst effectiveness.

- **Rule 11**: **Modifiers where functional groups are connected to an aromatic ring via an aliphatic chain** lead to **high yield**. Examples include **5-(4-hydroxyphenyl)pentanoic acid** and **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid**. The aliphatic linker reduces steric hindrance, allowing better interaction.

- **Rule 12**: **Modifiers with hydroxyl or amino groups on long aliphatic chains (more than six carbons)** result in **low yield**. Examples are **7-hydroxyheptanoic acid** and **8-aminooctanoic acid**. The polar groups on long chains may interfere with catalyst binding.

- **Rule 13**: **Modifiers that are amino acids with aromatic side chains lacking additional coordinating heteroatoms** result in **low yield**. An example is **(2S)-2-amino-3-phenylpropanoic acid** (phenylalanine). The absence of coordinating groups reduces interaction with the metal center.

- **Rule 14**: **Modifiers that are amino acids with aromatic side chains containing heteroatoms capable of coordination** result in **high yield**. An example is **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (tryptophan). The indole nitrogen can coordinate with the metal center.

- **Rule 15**: **Modifiers where two aromatic rings are directly connected without flexible linkers** result in **low yield**. An example is **4-pyridin-4-ylbenzoic acid**. Lack of flexibility may hinder optimal coordination geometry.

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2
0,1
1,0
0,1
1,0
0,0
0,0
0,0
0,0
0,0
0,1
0,0
0,1
0,0
0,1
0,0
0,0
0,0
0,1
0,1
0,0
0,1
0,1
0,1
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0

---------------------------------------------------------------


    Train Accuracy: 0.6285714285714286; Test Accuracy: 0.0
    Train Support: 0.11428571428571428; Test Support: 0.0
    Train Confidence: 0.8333333333333333; Test Confidence: 0.25
    Train Lift: 1.6203703703703705; Test Lift: NONE
    Train Leverage: 0.033469387755102054; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'High yield (+1): Modifiers that are amino acids with side chains containing additional carboxyl groups.',
            'patterns': [
                '[NX3H2][CX4H]([#6])[CX3](=O)[OX1-,OX2H1]',  # Amino acid backbone
                '[CX3](=O)[OX1-,OX2H1]',  # Additional carboxyl group
            ],
            'condition': lambda mol, pats: mol.HasSubstructMatch(pats[0]) and len(mol.GetSubstructMatches(pats[1])) >= 2,
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'High yield (+1) or Low yield (-1): Aromatic carboxylic acids with strong electron-withdrawing groups (EWGs) at the para position lead to high yield. Conversely, aromatic carboxylic acids with electron-donating groups (EDGs) at the para position result in low yield.',
            'patterns': [
                '[c][CX3](=O)[OX1-,OX2H1]',  # Aromatic carboxylic acid
            ],
            'ewg_patterns': [
                '[c][NX3](=O)=O',  # Nitro group attached to aromatic ring
                '[c][F,Cl,Br,I]',  # Halogen attached to aromatic ring
                '[c][CX4][F,Cl,Br,I]',  # Halomethyl group
                '[c][CX3](=O)[OX1-,OX2H1]',  # Additional carboxyl group
            ],
            'edg_patterns': [
                '[c][CH3]',  # Methyl group attached to aromatic ring
                '[c][OX2H,OX2][#6]',  # Hydroxyl or methoxy group
                '[c][NH2]',  # Amino group
            ],
            'condition': None,  # Custom logic will be applied
            'prediction_high': 1,
            'prediction_low': -1
        },
        # ... Continue defining rules 3 to 15 similarly ...
    ]

    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = [Chem.MolFromSmarts(pat) for pat in rule.get('patterns', [])]
        rule['compiled_patterns'] = compiled_patterns
        if 'ewg_patterns' in rule:
            rule['compiled_ewg_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule['ewg_patterns']]
        if 'edg_patterns' in rule:
            rule['compiled_edg_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule['edg_patterns']]

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = False
                if rule['number'] == 1:
                    # Rule 1 logic
                    pats = rule['compiled_patterns']
                    if rule['condition'](mol, pats):
                        match = True
                        row.append(rule['prediction'])
                    else:
                        row.append(0)
                elif rule['number'] == 2:
                    # Rule 2 logic
                    # Check if molecule has an aromatic carboxylic acid
                    if mol.HasSubstructMatch(rule['compiled_patterns'][0]):
                        ewg = any(mol.HasSubstructMatch(pat) for pat in rule['compiled_ewg_patterns'])
                        edg = any(mol.HasSubstructMatch(pat) for pat in rule['compiled_edg_patterns'])
                        if ewg and not edg:
                            # High yield
                            row.append(rule['prediction_high'])
                        elif edg and not ewg:
                            # Low yield
                            row.append(rule['prediction_low'])
                        else:
                            row.append(0)
                    else:
                        row.append(0)
                else:
                    # For other rules, placeholder
                    row.append(0)  # Adjust logic for other rules
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)

    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: **Modifiers that are amino acids with side chains containing an additional carboxylic acid group** result in **high yield**. Examples include **(2S)-2-aminobutanedioic acid** (aspartic acid) and **(2S)-2-aminopentanedioic acid** (glutamic acid). The presence of two carboxyl groups enhances metal coordination, improving catalytic activity.

- **Rule 2**: **Modifiers that are para-substituted aromatic carboxylic acids where the substituent is an electron-withdrawing group (EWG) or a coordinating group (such as nitro or amino)** result in **high yield**. Examples include **4-nitrobenzoic acid** and **4-aminobenzoic acid**. The substituents increase the acidity and coordinating ability of the carboxyl group, enhancing interaction with the metal center.

- **Rule 3**: **Modifiers that are omega-amino acids with aliphatic chains of five carbons or fewer** result in **high yield**. An example is **5-aminopentanoic acid**. The short chain length allows effective coordination of both amino and carboxyl groups with minimal steric hindrance, facilitating better interaction with the catalyst.

- **Rule 4**: **Modifiers containing multiple hydroxyl (-OH) groups within a sugar-like or polyol structure, alongside a carboxylic acid group**, result in **high yield**. Examples are **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (gluconic acid) and **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid**. Multiple hydroxyl groups enhance hydrogen bonding and coordination with the catalyst's active sites.

- **Rule 5**: **Modifiers that are heteroaromatic carboxylic acids with heteroatoms (nitrogen or oxygen) adjacent to the carboxyl group** result in **high yield**. Examples include **pyridine-3-carboxylic acid**, **1H-pyrazole-4-carboxylic acid**, and **2-oxo-1H-pyridine-4-carboxylic acid**. The proximity of heteroatoms provides additional coordination sites, strengthening interaction with the metal center.

- **Rule 6**: **Modifiers with thiol (-SH) groups on short aliphatic chains (three carbons or fewer) in addition to a carboxyl group** result in **high yield**—for example, **3-sulfanylpropanoic acid**. The thiol group offers additional coordination capability, enhancing binding to the metal center.

- **Rule 7**: **Modifiers that are aliphatic carboxylic acids with chain lengths of 6 to 8 carbons without additional polar functional groups** result in **high yield**. An example is **octanoic acid**. The hydrophobic chains may enhance interactions with hydrophobic regions of the catalyst, promoting reactivity.

- **Rule 8**: **Modifiers that are omega-amino acids with aliphatic chains longer than five carbons** result in **low yield**. Examples include **7-aminoheptanoic acid** and **8-aminooctanoic acid**. Longer chains increase flexibility and steric hindrance, reducing effective coordination with the metal center.

- **Rule 9**: **Modifiers that are aromatic carboxylic acids with electron-donating groups (EDGs) at the para position without additional coordinating groups** result in **low yield**. An example is **4-methylbenzoic acid**. EDGs decrease the acidity of the carboxyl group, weakening metal coordination.

- **Rule 10**: **Modifiers containing perfluoroalkyl chains attached to the carboxylic acid group** result in **low yield**. An example is **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**. The strong electron-withdrawing effect of fluorine atoms reduces electron density on the carboxylate, diminishing coordination ability.

- **Rule 11**: **Modifiers with ether linkages extending from the carboxylic acid, especially polyether chains**, result in **low yield**. Examples include **2-[2-(2-methoxyethoxy)ethoxy]acetic acid** and **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**. Ether oxygens may compete with the carboxylate for metal coordination, disrupting optimal binding.

- **Rule 12**: **Modifiers containing amide bonds linking amino acids or functional groups** result in **low yield**. Examples include **(2S)-6-acetamido-2-aminohexanoic acid** and **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid**. Amide linkages reduce electron density on coordinating atoms, hindering effective coordination with the metal center.

- **Rule 13**: **Modifiers with thiol (-SH) groups directly attached to an aromatic ring** result in **low yield**. An example is **4-sulfanylbenzoic acid**. The rigidity of the aromatic ring may hinder effective coordination of the thiol group with the metal center.

- **Rule 14**: **Modifiers with carbonyl groups adjacent to the carboxylic acid (α-keto acids or dicarboxylic acids with additional carbonyls)** result in **low yield**. An example is **4-oxoheptanedioic acid**. The additional carbonyl groups may compete for metal coordination or alter electronic distribution unfavorably.

- **Rule 15**: **Modifiers that are amino acids with side chains containing non-coordinating sulfur groups (thioethers)** result in **low yield**. An example is **(2S)-2-amino-4-methylsulfanylbutanoic acid** (methionine derivative). Thioether sulfur is less effective in metal coordination compared to thiol sulfur.

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.7142857142857143; Test Accuracy: 0.0
    Train Support: 0.06666666666666667; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 2.0588235294117645; Test Lift: NONE
    Train Leverage: 0.03428571428571428; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and specific structures
    # Common patterns
    carboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1]'  # Carboxylic acid group
    primary_amine = '[NX3H2]'  # Primary amine group
    hydroxyl_group = '[OX2H]'  # Hydroxyl group
    thiol_group = '[SX2H]'  # Thiol group
    aromatic_ring = '[a]'  # Aromatic atom
    aromatic_carboxylic_acid = '[a][CX3](=O)[OX1H0-,OX2H1]'  # Aromatic carboxylic acid
    aromatic_nitro = '[a][NX3+(=O)[O-]]'  # Nitro group attached to aromatic ring
    aromatic_amino = '[a][NX3H2]'  # Amino group attached to aromatic ring
    methyl_on_aromatic = '[a][CH3]'  # Methyl group attached to aromatic ring
    methoxy_on_aromatic = '[a][OX2][CH3]'  # Methoxy group attached to aromatic ring
    amide_group = '[NX3][CX3](=O)[#6]'  # Amide group
    thioether = '[C][SX2][C]'  # Thioether group
    # Generate patterns for Rules that require variable chain lengths
    # Rule 3: Omega-amino acids with chains of five carbons or fewer
    omega_amino_acid_patterns = []
    for n in range(2, 6):  # Chain lengths from 2 to 5
        chain = '-'.join(['[CH2]'] * n)
        pattern = f'[NX3H2]-{chain}-[CX3](=O)[OX1H0-,OX2H1]'
        omega_amino_acid_patterns.append(pattern)
    # Rule 6: Thiol groups on short chains (three carbons or fewer) with carboxylic acid
    thiol_short_chain_patterns = []
    for n in range(1, 4):  # Chain lengths from 1 to 3
        chain = '-'.join(['[CH2]'] * n)
        pattern = f'[SX2H]-{chain}-[CX3](=O)[OX1H0-,OX2H1]'
        thiol_short_chain_patterns.append(pattern)
    # Rule 7: Aliphatic carboxylic acids with chains of 6 to 8 carbons without polar groups
    aliphatic_long_chain_patterns = []
    for n in range(4, 7):  # Chain lengths from 6 to 8 carbons including carboxyl carbon
        chain = '-'.join(['[CH2]'] * n)
        pattern = f'[CH3]-{chain}-[CX3](=O)[OX1H0-,OX2H1]'
        aliphatic_long_chain_patterns.append(pattern)
    # Rule 8: Omega-amino acids with chains longer than five carbons
    omega_amino_acid_long_patterns = []
    for n in range(6, 21):  # Chain lengths from 6 upwards
        chain = '-'.join(['[CH2]'] * n)
        pattern = f'[NX3H2]-{chain}-[CX3](=O)[OX1H0-,OX2H1]'
        omega_amino_acid_long_patterns.append(pattern)
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are amino acids with side chains containing an additional carboxylic acid group result in high yield.',
            'patterns': [
                [primary_amine],  # Primary amine group
                [carboxylic_acid],  # Carboxylic acid group
            ],
            'count_threshold': {carboxylic_acid: 2},  # At least two carboxylic acid groups
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers that are para-substituted aromatic carboxylic acids with an electron-withdrawing group (EWG) or coordinating group result in high yield.',
            'patterns': [
                [aromatic_carboxylic_acid],  # Aromatic carboxylic acid group
                [aromatic_nitro, aromatic_amino],  # EWG attached to aromatic ring
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers that are omega-amino acids with aliphatic chains of five carbons or fewer result in high yield.',
            'patterns': [
                omega_amino_acid_patterns  # Omega-amino acid patterns with chain lengths from 2 to 5
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers containing multiple hydroxyl (-OH) groups within a sugar-like or polyol structure, alongside a carboxylic acid group, result in high yield.',
            'patterns': [
                [carboxylic_acid],  # Carboxylic acid group
                [hydroxyl_group],  # Hydroxyl group
            ],
            'count_threshold': {hydroxyl_group: 3},  # At least 3 hydroxyl groups
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers that are heteroaromatic carboxylic acids with heteroatoms adjacent to the carboxyl group result in high yield.',
            'patterns': [
                [aromatic_carboxylic_acid],  # Aromatic carboxylic acid group
                ['[n,o]'],  # Heteroatoms in the ring
            ],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers with thiol (-SH) groups on short aliphatic chains (three carbons or fewer) in addition to a carboxylic acid group result in high yield.',
            'patterns': [
                thiol_short_chain_patterns  # Thiol group with short chain to carboxylic acid
            ],
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'Modifiers that are aliphatic carboxylic acids with chain lengths of 6 to 8 carbons without additional polar functional groups result in high yield.',
            'patterns': [
                aliphatic_long_chain_patterns  # Long aliphatic chain with carboxylic acid
            ],
            'exclude_patterns': [
                [hydroxyl_group, primary_amine, thiol_group, amide_group, '[F,Cl,Br,I]']  # Exclude polar groups
            ],
            'prediction': 1
        },
        {
            'number': 8,
            'description': 'Modifiers that are omega-amino acids with aliphatic chains longer than five carbons result in low yield.',
            'patterns': [
                omega_amino_acid_long_patterns  # Omega-amino acid patterns with chain lengths >5
            ],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers that are aromatic carboxylic acids with electron-donating groups (EDGs) at the para position without additional coordinating groups result in low yield.',
            'patterns': [
                [aromatic_carboxylic_acid],  # Aromatic carboxylic acid group
                [methyl_on_aromatic, methoxy_on_aromatic],  # EDG attached to aromatic ring
            ],
            'exclude_patterns': [
                [aromatic_nitro, aromatic_amino, hydroxyl_group, thiol_group]  # Exclude coordinating groups
            ],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers containing perfluoroalkyl chains attached to the carboxylic acid group result in low yield.',
            'patterns': [
                ['[CX4]([F])([F])([F])[CX4]([F])([F])([F])[CX3](=O)[OX1H0-,OX2H1]']  # Perfluoroalkyl chain with carboxylic acid
            ],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Modifiers with ether linkages extending from the carboxylic acid, especially polyether chains, result in low yield.',
            'patterns': [
                ['[CX3](=O)[OX2H1]-[OX2]-[CX4]']  # Carboxylic acid connected via ether linkage
            ],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'Modifiers containing amide bonds linking amino acids or functional groups result in low yield.',
            'patterns': [
                [amide_group]  # Amide group
            ],
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Modifiers with thiol (-SH) groups directly attached to an aromatic ring result in low yield.',
            'patterns': [
                ['[a][SX2H]']  # Thiol group attached to aromatic ring
            ],
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'Modifiers with carbonyl groups adjacent to the carboxylic acid result in low yield.',
            'patterns': [
                ['[CX3](=O)[CX3](=O)[OX1H0-,OX2H1]']  # Carbonyl adjacent to carboxylic acid
            ],
            'prediction': -1
        },
        {
            'number': 15,
            'description': 'Modifiers that are amino acids with side chains containing non-coordinating sulfur groups (thioethers) result in low yield.',
            'patterns': [
                [primary_amine],  # Primary amine group
                [carboxylic_acid],  # Carboxylic acid group
                [thioether]  # Thioether group
            ],
            'prediction': -1
        }
    ]
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(pat) for pat in group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for group in rule['exclude_patterns']:
                compiled_group = [Chem.MolFromSmarts(pat) for pat in group]
                compiled_excludes.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_excludes
    # Process each SMILES string
    results = []
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        matches = mol.GetSubstructMatches(pat)
                        if matches:
                            # If a count threshold is specified for this pattern
                            if 'count_threshold' in rule and pat.GetSmarts() in rule['count_threshold']:
                                threshold = rule['count_threshold'][pat.GetSmarts()]
                                if len(matches) >= threshold:
                                    group_match = True
                                    break
                            else:
                                group_match = True
                                break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: **Modifiers that are amino acids with side chains containing an additional carboxylic acid group** result in **high yield**. Examples include **(2S)-2-aminobutanedioic acid** (aspartic acid) and **(2S)-2-aminopentanedioic acid** (glutamic acid). The presence of two carboxyl groups enhances metal coordination with the catalyst.

- **Rule 2**: **Modifiers that are omega-amino acids with short aliphatic chains of five carbons or fewer** result in **high yield**. An example is **5-aminopentanoic acid**. The amino and carboxyl groups at opposite ends facilitate effective bidentate coordination with minimal steric hindrance. Conversely, **modifiers with longer aliphatic chains (more than five carbons)** result in **low yield** due to increased flexibility and steric hindrance, reducing effective coordination. Examples include **7-aminoheptanoic acid** and **8-aminooctanoic acid**.

- **Rule 3**: **Modifiers that are para-substituted aromatic carboxylic acids where the substituent is a coordinating group (e.g., amino, nitro)** result in **high yield**. Examples include **4-aminobenzoic acid** and **4-nitrobenzoic acid**. These groups enhance interaction with the metal center through coordination. In contrast, **modifiers where the substituent at the para position is a non-coordinating electron-donating group (e.g., methyl)** result in **low yield**. An example is **4-methylbenzoic acid**. Electron-donating groups decrease the acidity and coordinating ability of the carboxyl group, weakening metal coordination.

- **Rule 4**: **Modifiers that are heteroaromatic carboxylic acids with heteroatoms (nitrogen or oxygen) in the ring adjacent to the carboxyl group** result in **high yield**. Examples include **pyridine-3-carboxylic acid** and **1H-pyrazole-4-carboxylic acid**. The heteroatoms increase electron density and provide additional coordination sites, enhancing binding to the catalyst.

- **Rule 5**: **Modifiers containing a carboxylic acid group and a thiol (-SH) group on a short aliphatic chain (three carbons or fewer)** result in **high yield**. An example is **3-sulfanylpropanoic acid**. The thiol group offers additional coordination capability, enhancing binding to the metal center. However, **modifiers with thiol groups directly attached to an aromatic ring** result in **low yield**. An example is **4-sulfanylbenzoic acid**. The rigidity of the aromatic ring may hinder effective coordination of the thiol group with the metal center.

- **Rule 6**: **Modifiers containing ether linkages extending from the carboxylic acid, especially polyether chains**, result in **low yield**. Examples include **2-[2-(2-methoxyethoxy)ethoxy]acetic acid** and **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**. Ether oxygens may disrupt optimal coordination with the catalyst, reducing efficacy.

- **Rule 7**: **Modifiers containing amide bonds linking amino acids or functional groups** result in **low yield**. Examples include **(2S)-6-acetamido-2-aminohexanoic acid** and **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid**. Amide linkages reduce electron density on coordinating atoms, hindering effective binding to the catalyst.

- **Rule 8**: **Modifiers with electron-withdrawing groups attached to the carboxylic acid, such as perfluoroalkyl groups**, result in **low yield**. An example is **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**. The strong electron-withdrawing effect of fluorine atoms reduces electron density on the carboxylate, diminishing coordination ability.

- **Rule 9**: **Modifiers with additional carbonyl groups (ketone or aldehyde) adjacent to the carboxylic acid group** result in **low yield**. Examples include **5-formyl-2-hydroxybenzoic acid** and **4-oxoheptanedioic acid**. The adjacent carbonyl groups may compete for metal coordination or alter electronic distribution unfavorably, hindering effective interaction with the catalyst.

- **Rule 10**: **Modifiers that are aliphatic carboxylic acids with long chain lengths (seven carbons or more) without additional functional groups** result in **high yield**. An example is **octanoic acid**. The hydrophobic chain may facilitate favorable interactions with hydrophobic regions of the catalyst. However, **similar chain lengths with additional polar groups (e.g., hydroxyl, amino)** result in **low yield** due to potential interference with optimal coordination. Examples include **7-hydroxyheptanoic acid** and **7-aminoheptanoic acid**.

- **Rule 11**: **Modifiers with multiple hydroxyl (-OH) groups along with a carboxylic acid group** result in **high yield**. An example is **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (gluconic acid). Multiple hydroxyl groups enhance hydrogen bonding and coordination with the catalyst’s active sites.

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 2.1,Rule 5,Rule 5.1,Rule 11
0,0,0,0,0,1
0,0,0,0,0,1
0,0,0,0,0,1
0,0,0,0,0,1
0,0,0,0,0,1
0,0,0,0,0,1
0,0,0,0,0,1
0,0,0,0,0,1
0,0,0,0,0,1
0,0,0,0,0,1
0,0,0,0,0,1
0,0,0,0,-1,1
0,0,0,0,0,1
0,0,0,0,0,1
0,0,0,0,0,1
0,0,0,0,0,1
0,0,0,0,0,1
0,0,0,0,0,1
0,0,0,0,0,1
0,0,0,1,0,1
0,0,0,0,0,1
0,0,0,0,0,1
0,0,0,0,0,1
0,0,0,0,0,1
0,0,0,0,0,1
0,0,0,0,0,1
0,0,0,0,0,1
0,0,0,0,0,1
0,0,0,0,0,1
0,0,0,0,0,1
0,0,0,0,0,1
0,0,0,0,0,1
0,0,0,0,0,1
0,0,0,0,0,1
0,0,0,0,0,1
0,0,0,0,0,1

---------------------------------------------------------------


    Train Accuracy: 0.5428571428571428; Test Accuracy: 0.0
    Train Support: 0.02857142857142857; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 2.0588235294117645; Test Lift: NONE
    Train Leverage: 0.014693877551020406; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns with mapping to the original SMARTS strings

    carboxylic_acid_smarts = '[CX3](=O)[OX1H0-,OX2H1]'
    carboxylic_acid_pattern = Chem.MolFromSmarts(carboxylic_acid_smarts)
    
    primary_amine_smarts = '[NX3H2]'
    primary_amine_pattern = Chem.MolFromSmarts(primary_amine_smarts)
    
    hydroxyl_group_smarts = '[OX2H][#6;!$(C=O)]'  # Corrected as per Suggestion 1
    hydroxyl_group_pattern = Chem.MolFromSmarts(hydroxyl_group_smarts)
    
    # Thiol group (-SH)
    thiol_smarts = '[SX2H]'
    thiol_pattern = Chem.MolFromSmarts(thiol_smarts)

    # Thiol group directly attached to aromatic ring
    thiol_on_aromatic_smarts = '[SX2H][c]'
    thiol_on_aromatic_pattern = Chem.MolFromSmarts(thiol_on_aromatic_smarts)

    # Define the rules
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are amino acids with side chains containing an additional carboxylic acid group result in high yield.',
            'custom_function': 'check_amino_acid_with_side_chain_carboxylic_acid',
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers that are omega-amino acids with short aliphatic chains of five carbons or fewer result in high yield.',
            'custom_function': 'check_omega_amino_acid',
            'max_chain_length': 5,
            'prediction': 1
        },
        {
            'number': 2.1,
            'description': 'Modifiers with longer aliphatic chains (more than five carbons) result in low yield.',
            'custom_function': 'check_omega_amino_acid',
            'min_chain_length': 6,
            'prediction': -1
        },
        {
            'number': 5,
            'description': 'Modifiers containing a carboxylic acid group and a thiol (-SH) group on a short aliphatic chain (three carbons or fewer) result in high yield.',
            'custom_function': 'check_thiol_aliphatic_chain',
            'max_chain_length': 3,
            'prediction': 1
        },
        {
            'number': 5.1,
            'description': 'Modifiers with thiol groups directly attached to an aromatic ring result in low yield.',
            'patterns': [
                {'smarts': carboxylic_acid_smarts, 'pattern': carboxylic_acid_pattern},
                {'smarts': thiol_on_aromatic_smarts, 'pattern': thiol_on_aromatic_pattern},
            ],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Modifiers with multiple hydroxyl (-OH) groups along with a carboxylic acid group result in high yield.',
            'patterns': [
                {'smarts': carboxylic_acid_smarts, 'pattern': carboxylic_acid_pattern},
            ],
            'count_threshold': {hydroxyl_group_smarts: 2},
            'prediction':1
        }
    ]
    
    # Initialize results list
    results = []
    
    # Helper functions
    def get_aliphatic_chain_length(mol, acid_pattern, amine_pattern):
        # Find all matches for carboxylic acid and amine
        acid_matches = mol.GetSubstructMatches(acid_pattern)
        amine_matches = mol.GetSubstructMatches(amine_pattern)
        if not acid_matches or not amine_matches:
            return None
        min_length = None
        for a in acid_matches:
            acid_atom = a[0]  # Carboxylic acid carbon
            for b in amine_matches:
                amine_atom = b[0]  # Amine nitrogen
                paths = Chem.rdmolops.GetAllShortestPaths(mol, acid_atom, amine_atom)
                for path in paths:
                    # Check if path consists only of aliphatic (sp3) carbons
                    is_aliphatic = True
                    num_carbons = 0
                    for idx in path[1:-1]:
                        atom = mol.GetAtomWithIdx(idx)
                        if atom.GetAtomicNum() != 6 or atom.IsInRing() or atom.GetHybridization() != Chem.rdchem.HybridizationType.SP3:
                            is_aliphatic = False
                            break
                        num_carbons += 1
                    if is_aliphatic:
                        if min_length is None or num_carbons < min_length:
                            min_length = num_carbons
        return min_length

    def check_amino_acid_with_side_chain_carboxylic_acid(mol):
        # Identify alpha carbon (connected to both amine and carboxylic acid)
        amine_matches = mol.GetSubstructMatches(primary_amine_pattern)
        acid_matches = mol.GetSubstructMatches(carboxylic_acid_pattern)
        if not acid_matches or not amine_matches:
            return False
        for atom in mol.GetAtoms():
            if atom.GetAtomicNum() == 6:
                neighbors = [nbr.GetAtomicNum() for nbr in atom.GetNeighbors()]
                neighbor_atoms = [nbr for nbr in atom.GetNeighbors()]
                if 7 in neighbors and 8 in neighbors:
                    # Potential alpha carbon
                    amine_neighbor = any(nbr.GetAtomicNum() == 7 for nbr in neighbor_atoms)
                    acid_neighbor = any(nbr.GetAtomicNum() == 8 for nbr in neighbor_atoms)
                    if amine_neighbor and acid_neighbor:
                        # Check for an additional carboxylic acid elsewhere
                        if len(acid_matches) > 1:
                            return True
        return False

    def check_thiol_aliphatic_chain(mol, acid_pattern, thiol_pattern, max_chain_length):
        acid_matches = mol.GetSubstructMatches(acid_pattern)
        thiol_matches = mol.GetSubstructMatches(thiol_pattern)
        if not acid_matches or not thiol_matches:
            return False
        # For each pair of carboxylic acid and thiol, check the chain length
        for a in acid_matches:
            acid_atom = a[0]
            for t in thiol_matches:
                thiol_atom = t[0]
                path = Chem.rdmolops.GetShortestPath(mol, acid_atom, thiol_atom)
                # Exclude functional group atoms (acid carbon and thiol sulfur)
                num_carbons = 0
                is_aliphatic = True
                for idx in path[1:-1]:
                    atom = mol.GetAtomWithIdx(idx)
                    if atom.GetAtomicNum() != 6 or atom.IsInRing() or atom.GetHybridization() != Chem.rdchem.HybridizationType.SP3:
                        is_aliphatic = False
                        break
                    num_carbons += 1
                if is_aliphatic and num_carbons <= max_chain_length:
                    return True
        return False
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = False
                # If custom function is specified
                if 'custom_function' in rule:
                    function_name = rule['custom_function']
                    if function_name == 'check_omega_amino_acid':
                        chain_length = get_aliphatic_chain_length(mol, carboxylic_acid_pattern, primary_amine_pattern)
                        min_length = rule.get('min_chain_length', None)
                        max_length = rule.get('max_chain_length', None)
                        if chain_length is None:
                            match = False
                        elif min_length is not None and chain_length >= min_length:
                            match = True
                        elif max_length is not None and chain_length <= max_length:
                            match = True
                        else:
                            match = False
                    elif function_name == 'check_amino_acid_with_side_chain_carboxylic_acid':
                        match = check_amino_acid_with_side_chain_carboxylic_acid(mol)
                    elif function_name == 'check_thiol_aliphatic_chain':
                        max_chain_length = rule.get('max_chain_length', None)
                        match = check_thiol_aliphatic_chain(mol, carboxylic_acid_pattern, thiol_pattern, max_chain_length)
                    else:
                        match = False
                else:
                    # Evaluate the patterns for the rule
                    match = True
                    for pattern_entry in rule['patterns']:
                        pat = pattern_entry['pattern']
                        smarts = pattern_entry['smarts']
                        matches = mol.GetSubstructMatches(pat)
                        if matches:
                            # Check count threshold
                            if 'count_threshold' in rule and smarts in rule['count_threshold']:
                                threshold = rule['count_threshold'][smarts]
                                if len(matches) >= threshold:
                                    continue
                                else:
                                    match = False
                                    break
                            else:
                                continue  # Pattern matches
                        else:
                            match = False
                            break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f"Rule {rule['number']}" for rule in rules])
    return df
--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: **Modifiers that are amino acids with an additional carboxylic acid group (amino dicarboxylic acids)** result in **high yield**. Examples include **(2S)-2-aminobutanedioic acid** (aspartic acid) and **(2S)-2-aminopentanedioic acid** (glutamic acid). The presence of two carboxyl groups provides multiple coordination sites, enhancing binding to the metal center of the catalyst.

- **Rule 2**: **Modifiers with a carboxylic acid group and a primary amino group located on a short aliphatic chain of five carbons or fewer (short-chain omega-amino acids)** result in **high yield**. An example is **5-aminopentanoic acid**. The proximity of the amino and carboxyl groups facilitates effective bidentate coordination with minimal steric hindrance. Conversely, **similar amino acids with longer aliphatic chains (more than five carbons)** result in **low yield** due to increased flexibility and steric hindrance reducing effective coordination. Examples include **7-aminoheptanoic acid** and **8-aminooctanoic acid**.

- **Rule 3**: **Modifiers that are para-substituted aromatic carboxylic acids with electron-donating coordinating groups such as amino (-NH₂) or hydroxy (-OH) groups at the para position** result in **high yield**. Examples include **4-aminobenzoic acid** and **4-hydroxybenzoic acid**. These groups enhance interaction with the metal center through coordination. In contrast, **modifiers where the substituent at the para position is a non-coordinating group (e.g., methyl group)** result in **low yield**. An example is **4-methylbenzoic acid**. Electron-donating but non-coordinating groups decrease the acidity and coordinating ability of the carboxyl group, weakening metal coordination.

- **Rule 4**: **Modifiers that are para-substituted aromatic carboxylic acids with electron-withdrawing groups such as nitro (-NO₂) at the para position** result in **high yield**. An example is **4-nitrobenzoic acid**. Electron-withdrawing groups increase the acidity of the carboxyl group, enhancing its ability to coordinate with the metal center.

- **Rule 5**: **Modifiers that are heterocyclic carboxylic acids containing nitrogen heteroatoms adjacent to the carboxyl group** result in **high yield**. Examples include **pyridine-3-carboxylic acid** and **1H-pyrazole-4-carboxylic acid**. The nitrogen atoms increase electron density and provide additional coordination sites, enhancing binding to the catalyst.

- **Rule 6**: **Modifiers containing both a carboxylic acid group and a thiol (-SH) group on a short aliphatic chain (three carbons or fewer)** result in **high yield**. An example is **3-sulfanylpropanoic acid**. The thiol group offers additional coordination capability, enhancing binding to the metal center.

- **Rule 7**: **Modifiers that are long-chain aliphatic carboxylic acids without additional functional groups** result in **high yield**. An example is **octanoic acid**. The hydrophobic hydrocarbon chain may facilitate favorable interactions with hydrophobic regions of the catalyst, enhancing binding.

- **Rule 8**: **Modifiers containing ether linkages, especially polyether chains extending from the carboxylic acid** result in **low yield**. Examples include **2-[2-(2-methoxyethoxy)ethoxy]acetic acid** and **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**. Ether oxygens may disrupt optimal coordination with the catalyst by introducing flexibility and steric hindrance, reducing efficacy.

- **Rule 9**: **Modifiers with amide bonds linking functional groups or amino acids (containing amide linkages)** result in **low yield**. Examples include **(2S)-6-acetamido-2-aminohexanoic acid** and **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid**. Amide linkages reduce electron density on coordinating atoms, hindering effective binding to the catalyst.

- **Rule 10**: **Modifiers containing highly electron-withdrawing groups attached to the carboxylic acid, such as perfluoroalkyl or trifluoroacetyl groups** result in **low yield**. Examples include **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid** and **4-[(2,2,2-trifluoroacetyl)amino]butanoic acid**. The strong electron-withdrawing effect reduces electron density on the carboxylate, diminishing coordination ability.

- **Rule 11**: **Modifiers with additional carbonyl groups (ketone or aldehyde) adjacent to the carboxylic acid group** result in **low yield**. Examples include **5-formyl-2-hydroxybenzoic acid** and **4-oxoheptanedioic acid**. The adjacent carbonyl groups may compete for metal coordination or alter electronic distribution unfavorably, hindering effective interaction with the catalyst.

- **Rule 12**: **Modifiers with multiple hydroxyl (-OH) groups along with a carboxylic acid group on an aliphatic chain** result in **high yield**. An example is **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (gluconic acid). Multiple hydroxyl groups enhance hydrogen bonding and coordination with the catalyst’s active sites.

- **Rule 13**: **Modifiers that are aromatic carboxylic acids with heteroaromatic substituents at the para position** result in **low yield**. An example is **4-pyridin-4-ylbenzoic acid**. The steric hindrance and electronic effects of the bulky heteroaromatic group may impede effective coordination with the metal center.

- **Rule 14**: **Modifiers with phenolic groups attached to a propanoic acid chain (where the hydroxyphenyl group is not directly attached to the carboxyl group)** result in **low yield**. An example is **3-(4-hydroxyphenyl)propanoic acid**. The increased distance between the phenolic hydroxyl group and the carboxyl group may reduce the overall coordination efficiency.

- **Rule 15**: **Modifiers that are amino acids with bulky hydrophobic side chains (aromatic rings)** result in **low yield**. An example is **(2S)-2-amino-3-phenylpropanoic acid** (phenylalanine). The bulky side chain may cause steric hindrance, preventing optimal interaction with the catalyst.

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.5142857142857142; Test Accuracy: 0.0
    Train Support: 0.0; Test Support: 0.0
    Train Confidence: 0.5; Test Confidence: 0.5
    Train Lift: 1.0; Test Lift: NONE
    Train Leverage: 0.0; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    patterns = {}
    
    # Common SMARTS patterns
    patterns['carboxylic_acid'] = '[CX3](=O)[OX2H1]'
    patterns['primary_amine'] = '[NX3;H2][#6]'
    patterns['secondary_amine'] = '[NX3;H1][#6][#6]'
    patterns['amide'] = '[CX3](=O)[NX3H1,H0]'
    patterns['ether'] = '[#6][OX2][#6]'
    patterns['thiol'] = '[#16X2H]'  # -SH group
    patterns['aliphatic_chain'] = '[C;X4H2][C;X4H2][C;X4H2][C;X4H2][C;X4H2]'
    patterns['long_aliphatic_chain'] = '[C;X4H2][C;X4H2][C;X4H2][C;X4H2][C;X4H2][C;X4H2]'  # 6 or more carbons
    patterns['aromatic_ring'] = '[a]'
    patterns['para_substituted_benzoic_acid'] = 'c1ccc(cc1)C(=O)O'
    patterns['para_amino_group'] = 'c1ccc(N)cc1'
    patterns['para_hydroxy_group'] = 'c1ccc(O)cc1'
    patterns['para_methyl_group'] = 'c1ccc(C)cc1'
    patterns['para_nitro_group'] = 'c1ccc([N+](=O)[O-])cc1'
    patterns['pyridine_carboxylic_acid'] = 'n1cccc1C(=O)O'
    patterns['pyrazole_carboxylic_acid'] = 'n1nccc1C(=O)O'
    patterns['thiol_aliphatic_chain'] = '[#16X2H][C;X4H2][C;X4H2][C;X4H2][C;X4H2]'
    patterns['ether_linkage_aliphatic'] = '[C;X4][OX2][C;X4]'
    patterns['amide_bond'] = '[CX3](=O)[NX3][C]'
    patterns['perfluoroalkyl'] = '[CX4](F)(F)F'
    patterns['trifluoroacetyl'] = 'CC(=O)C(F)(F)F'
    patterns['ketone_adjacent_carboxylic'] = '[CX3](=O)[CX3](=O)'
    patterns['aldehyde_adjacent_carboxylic'] = '[CX3H1](=O)[CX3](=O)'
    patterns['multiple_hydroxyl'] = '[OX2H][CX4][OX2H]'
    patterns['heteroaromatic_para_substituent'] = 'c1ccc([a])cc1'
    patterns['phenolic_propanoic_acid'] = 'OCc1ccc(CC(=O)O)cc1'
    patterns['bulky_hydrophobic_side_chain'] = '[CX3](C)[CX3](C)[CX3](C)'
    
    # Compile the patterns
    compiled_patterns = {}
    for key, smarts in patterns.items():
        compiled_patterns[key] = Chem.MolFromSmarts(smarts)
    
    # Define the rules
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are amino acids with an additional carboxylic acid group (amino dicarboxylic acids) result in high yield.',
            'smarts': [patterns['carboxylic_acid'], patterns['primary_amine'], patterns['carboxylic_acid']],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers with a carboxylic acid group and a primary amino group located on a short aliphatic chain of five carbons or fewer result in high yield. Similar amino acids with longer aliphatic chains (more than five carbons) result in low yield.',
            'smarts': [patterns['carboxylic_acid'], patterns['primary_amine'], patterns['aliphatic_chain']],
            'exclude_smarts': [patterns['long_aliphatic_chain']],
            'prediction': 1,
            'inverse_prediction': -1
        },
        {
            'number': 3,
            'description': 'Modifiers that are para-substituted aromatic carboxylic acids with electron-donating coordinating groups such as amino (-NH2) or hydroxy (-OH) groups at the para position result in high yield. Substituents that are non-coordinating groups result in low yield.',
            'smarts': [patterns['para_substituted_benzoic_acid'], [patterns['para_amino_group'], patterns['para_hydroxy_group']]],
            'exclude_smarts': [patterns['para_methyl_group']],
            'prediction': 1,
            'inverse_prediction': -1
        },
        {
            'number': 4,
            'description': 'Modifiers that are para-substituted aromatic carboxylic acids with electron-withdrawing groups such as nitro (-NO2) at the para position result in high yield.',
            'smarts': [patterns['para_substituted_benzoic_acid'], patterns['para_nitro_group']],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers that are heterocyclic carboxylic acids containing nitrogen heteroatoms adjacent to the carboxyl group result in high yield.',
            'smarts': [[patterns['pyridine_carboxylic_acid'], patterns['pyrazole_carboxylic_acid']]],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers containing both a carboxylic acid group and a thiol (-SH) group on a short aliphatic chain (three carbons or fewer) result in high yield.',
            'smarts': [patterns['carboxylic_acid'], patterns['thiol_aliphatic_chain']],
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'Modifiers that are long-chain aliphatic carboxylic acids without additional functional groups result in high yield.',
            'smarts': [patterns['carboxylic_acid'], patterns['long_aliphatic_chain']],
            'exclude_smarts': [patterns['primary_amine'], patterns['secondary_amine'], patterns['amide'], patterns['thiol'], patterns['ether']],
            'prediction': 1
        },
        {
            'number': 8,
            'description': 'Modifiers containing ether linkages, especially polyether chains extending from the carboxylic acid, result in low yield.',
            'smarts': [patterns['carboxylic_acid'], patterns['ether_linkage_aliphatic']],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers with amide bonds linking functional groups or amino acids (containing amide linkages) result in low yield.',
            'smarts': [patterns['carboxylic_acid'], patterns['amide_bond']],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers containing highly electron-withdrawing groups attached to the carboxylic acid, such as perfluoroalkyl or trifluoroacetyl groups result in low yield.',
            'smarts': [patterns['carboxylic_acid'], [patterns['perfluoroalkyl'], patterns['trifluoroacetyl']]],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Modifiers with additional carbonyl groups (ketone or aldehyde) adjacent to the carboxylic acid group result in low yield.',
            'smarts': [patterns['carboxylic_acid'], [patterns['ketone_adjacent_carboxylic'], patterns['aldehyde_adjacent_carboxylic']]],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'Modifiers with multiple hydroxyl (-OH) groups along with a carboxylic acid group on an aliphatic chain result in high yield.',
            'smarts': [patterns['carboxylic_acid'], patterns['multiple_hydroxyl']],
            'prediction': 1
        },
        {
            'number': 13,
            'description': 'Modifiers that are aromatic carboxylic acids with heteroaromatic substituents at the para position result in low yield.',
            'smarts': [patterns['para_substituted_benzoic_acid'], patterns['heteroaromatic_para_substituent']],
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'Modifiers with phenolic groups attached to a propanoic acid chain result in low yield.',
            'smarts': [patterns['carboxylic_acid'], patterns['phenolic_propanoic_acid']],
            'prediction': -1
        },
        {
            'number': 15,
            'description': 'Modifiers that are amino acids with bulky hydrophobic side chains (aromatic rings) result in low yield.',
            'smarts': [patterns['carboxylic_acid'], patterns['bulky_hydrophobic_side_chain']],
            'prediction': -1
        }
    ]
    
    # Initialize the result list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_smarts' in rule:
                    for ex_smarts in rule['exclude_smarts']:
                        ex_pattern = compiled_patterns[ex_smarts]
                        if mol.HasSubstructMatch(ex_pattern):
                            match = False
                            break
                    if not match:
                        if 'inverse_prediction' in rule:
                            row.append(rule['inverse_prediction'])
                        else:
                            row.append(0)
                        continue
                # Check required patterns
                for smarts in rule['smarts']:
                    if isinstance(smarts, list):
                        sub_match = False
                        for s in smarts:
                            pattern = compiled_patterns[s]
                            if mol.HasSubstructMatch(pattern):
                                sub_match = True
                                break
                        if not sub_match:
                            match = False
                            break
                    else:
                        pattern = compiled_patterns[smarts]
                        if not mol.HasSubstructMatch(pattern):
                            match = False
                            break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df

--------------------------------------------------