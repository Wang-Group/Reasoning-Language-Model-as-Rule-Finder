def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups using corrected patterns from suggestions
    
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    carboxylic_acid_pat = Chem.MolFromSmarts(carboxylic_acid)

    # Amino group (-NH2)
    amino_group = '[NX3H2]'
    amino_pat = Chem.MolFromSmarts(amino_group)

    # Aromatic nitro group
    nitro_group_aromatic = '[c][N+](=O)[O-]'
    nitro_pat = Chem.MolFromSmarts(nitro_group_aromatic)

    # Bromoalkyl group attached to aromatic ring
    bromoalkyl_aromatic = '[c][CX4][Br]'
    bromo_pat = Chem.MolFromSmarts(bromoalkyl_aromatic)

    # Methyl group on aromatic ring
    methyl_aromatic = '[c][CH3]'
    methyl_pat = Chem.MolFromSmarts(methyl_aromatic)

    # Methoxy group on aromatic ring
    methoxy_aromatic = '[c][OX2][CH3]'
    methoxy_pat = Chem.MolFromSmarts(methoxy_aromatic)

    # Phenolic hydroxyl group
    phenol_group = '[c][OX2H]'
    phenol_pat = Chem.MolFromSmarts(phenol_group)

    # Aromatic aldehyde
    aldehyde_aromatic = '[c][CX3H](=O)'
    aldehyde_pat = Chem.MolFromSmarts(aldehyde_aromatic)

    # Thiol group attached directly to aromatic ring
    thiol_on_aromatic_ring = '[c][SX2H]'
    thiol_aromatic_pat = Chem.MolFromSmarts(thiol_on_aromatic_ring)

    # Thiol group on short aliphatic chain (three carbons or fewer)
    thiol_on_short_chain = '[SX2H][C;!R][C;!R]?[C;!R]?'
    thiol_short_chain_pat = Chem.MolFromSmarts(thiol_on_short_chain)

    # Multiple hydroxyl groups on aliphatic chain
    hydroxyl_group = '[OX2H]'
    hydroxyl_pat = Chem.MolFromSmarts(hydroxyl_group)

    # Bulky ether chains
    ether_linkage = '[#6][OX2][#6]'
    ether_pat = Chem.MolFromSmarts(ether_linkage)

    # Heterocyclic aromatic ring
    heteroaromatic_pat = Chem.MolFromSmarts('[a;!c]')  # Any aromatic atom that is not carbon

    # Fluorinated alkyl chains
    fluorinated_alkyl_chain = '[CX4][CX4][F]'
    fluorinated_alkyl_chain_pat = Chem.MolFromSmarts(fluorinated_alkyl_chain)

    # Aromatic ring
    aromatic_pat = Chem.MolFromSmarts('[c]')

    # Ketone group within aliphatic chain or terminal positions
    ketone_group = '[CX3](=O)[#6]'
    ketone_pat = Chem.MolFromSmarts(ketone_group)

    # Acyl amine group
    acyl_amine_group = '[CX3](=O)[NX3][#6]'
    acyl_amine_pat = Chem.MolFromSmarts(acyl_amine_group)

    # Define the rules
    rules = []

    # Rule 1
    def rule1(mol):
        try:
            has_carboxy = mol.HasSubstructMatch(carboxylic_acid_pat)
            has_amino = mol.HasSubstructMatch(amino_pat)
            if not (has_carboxy and has_amino):
                return 0
            amino_matches = mol.GetSubstructMatches(amino_pat)
            carboxy_matches = mol.GetSubstructMatches(carboxylic_acid_pat)
            for amino_match in amino_matches:
                amino_idx = amino_match[0]
                amino_atom = mol.GetAtomWithIdx(amino_idx)
                # Check if amino N is attached to aromatic ring
                for neighbor in amino_atom.GetNeighbors():
                    if neighbor.GetIsAromatic():
                        return 1
                # Check path length to carboxylic acid
                for carboxy_match in carboxy_matches:
                    carboxy_idx = carboxy_match[0]
                    path = Chem.rdmolops.GetShortestPath(mol, amino_idx, carboxy_idx)
                    if len(path) < 3:
                        continue  # less than 3 atoms between amino N and carboxy C, skip
                    middle_indices = path[1:-1]
                    num_carbons = sum(1 for idx in middle_indices if mol.GetAtomWithIdx(idx).GetAtomicNum() == 6)
                    if num_carbons <= 5:
                        return 1
            return 0
        except Exception as e:
            # print(f"Rule 1 Error: {e}")
            return 0

    rules.append({'number': 1, 'function': rule1})

    # Rule 2
    def rule2(mol):
        try:
            has_carboxy = mol.HasSubstructMatch(carboxylic_acid_pat)
            has_amino = mol.HasSubstructMatch(amino_pat)
            if not (has_carboxy and has_amino):
                return 0
            amino_matches = mol.GetSubstructMatches(amino_pat)
            carboxy_matches = mol.GetSubstructMatches(carboxylic_acid_pat)
            for amino_match in amino_matches:
                amino_idx = amino_match[0]
                amino_atom = mol.GetAtomWithIdx(amino_idx)
                # Check if amino is attached to aromatic ring
                attached_to_aromatic = any(neighbor.GetIsAromatic() for neighbor in amino_atom.GetNeighbors())
                if attached_to_aromatic:
                    continue
                # Check path length to carboxylic acid
                for carboxy_match in carboxy_matches:
                    carboxy_idx = carboxy_match[0]
                    path = Chem.rdmolops.GetShortestPath(mol, amino_idx, carboxy_idx)
                    if len(path) < 3:
                        continue  # less than 3 atoms between amino N and carboxy C, skip
                    middle_indices = path[1:-1]
                    num_carbons = sum(1 for idx in middle_indices if mol.GetAtomWithIdx(idx).GetAtomicNum() == 6)
                    if num_carbons > 5:
                        return -1
            return 0
        except Exception as e:
            # print(f"Rule 2 Error: {e}")
            return 0

    rules.append({'number': 2, 'function': rule2})

    # Rule 3
    def rule3(mol):
        try:
            if mol.HasSubstructMatch(nitro_pat) or mol.HasSubstructMatch(bromo_pat):
                return 1
            else:
                return 0
        except Exception as e:
            # print(f"Rule 3 Error: {e}")
            return 0

    rules.append({'number': 3, 'function': rule3})

    # Rule 4
    def rule4(mol):
        try:
            if mol.HasSubstructMatch(methyl_pat) or mol.HasSubstructMatch(methoxy_pat) or mol.HasSubstructMatch(phenol_pat):
                return -1
            else:
                return 0
        except Exception as e:
            # print(f"Rule 4 Error: {e}")
            return 0

    rules.append({'number': 4, 'function': rule4})

    # Rule 5
    def rule5(mol):
        try:
            if mol.HasSubstructMatch(aldehyde_pat):
                return -1
            else:
                return 0
        except Exception as e:
            # print(f"Rule 5 Error: {e}")
            return 0

    rules.append({'number': 5, 'function': rule5})

    # Rule 6
    def rule6(mol):
        try:
            if mol.HasSubstructMatch(thiol_aromatic_pat):
                return -1
            elif mol.HasSubstructMatch(thiol_short_chain_pat):
                return 1
            else:
                return 0
        except Exception as e:
            # print(f"Rule 6 Error: {e}")
            return 0

    rules.append({'number': 6, 'function': rule6})

    # Rule 7
    def rule7(mol):
        try:
            matches = mol.GetSubstructMatches(hydroxyl_pat)
            if len(matches) >=3:
                # Check if hydroxyl groups are on an aliphatic chain
                for match in matches:
                    oxy_idx = match[0]
                    oxy_atom = mol.GetAtomWithIdx(oxy_idx)
                    if not any([neighbor.GetIsAromatic() for neighbor in oxy_atom.GetNeighbors()]):
                        return 1
                return 0
            else:
                return 0
        except Exception as e:
            # print(f"Rule 7 Error: {e}")
            return 0

    rules.append({'number': 7, 'function': rule7})

    # Rule 8
    def rule8(mol):
        try:
            num_ether = len(mol.GetSubstructMatches(ether_pat))
            if num_ether >=1:
                num_hydroxyl = len(mol.GetSubstructMatches(hydroxyl_pat))
                if num_hydroxyl < 3:
                    return -1
            return 0
        except Exception as e:
            # print(f"Rule 8 Error: {e}")
            return 0

    rules.append({'number': 8, 'function': rule8})

    # Rule 9
    def rule9(mol):
        try:
            has_carboxy = mol.HasSubstructMatch(carboxylic_acid_pat)
            heteroaromatic_matches = mol.GetSubstructMatches(heteroaromatic_pat)
            if not (has_carboxy and heteroaromatic_matches):
                return 0
            carboxy_matches = mol.GetSubstructMatches(carboxylic_acid_pat)
            for carboxy_match in carboxy_matches:
                carboxy_idx = carboxy_match[0]
                for hetero_match in heteroaromatic_matches:
                    hetero_idx = hetero_match[0]
                    path = Chem.rdmolops.GetShortestPath(mol, carboxy_idx, hetero_idx)
                    path_length = len(path) -1  # number of bonds between carboxy and heteroaromatic atom
                    if path_length ==1:
                        return -1
                    elif 1 < path_length <=4:
                        return 1
            return 0
        except Exception as e:
            # print(f"Rule 9 Error: {e}")
            return 0

    rules.append({'number': 9, 'function': rule9})

    # Rule 10
    def rule10(mol):
        try:
            if mol.HasSubstructMatch(carboxylic_acid_pat) and mol.HasSubstructMatch(fluorinated_alkyl_chain_pat):
                return -1
            else:
                return 0
        except Exception as e:
            # print(f"Rule 10 Error: {e}")
            return 0

    rules.append({'number': 10, 'function': rule10})

    # Rule 11
    def rule11(mol):
        try:
            hydroxyl_matches = mol.GetSubstructMatches(phenol_pat)
            aromatic_matches = mol.GetSubstructMatches(aromatic_pat)
            if not (hydroxyl_matches and aromatic_matches):
                return 0
            for hydroxyl_match in hydroxyl_matches:
                hydroxyl_idx = hydroxyl_match[0]
                for aromatic_match in aromatic_matches:
                    aromatic_idx = aromatic_match[0]
                    path = Chem.rdmolops.GetShortestPath(mol, hydroxyl_idx, aromatic_idx)
                    if len(path)<2:
                        continue
                    # Exclude hydroxyl oxygen and aromatic atom
                    middle_indices = path[1:-1]
                    num_carbons = sum(1 for idx in middle_indices if mol.GetAtomWithIdx(idx).GetAtomicNum()==6 and not mol.GetAtomWithIdx(idx).GetIsAromatic())
                    if num_carbons >4:
                        return 1
                    elif num_carbons<=3:
                        return -1
            return 0
        except Exception as e:
            # print(f"Rule 11 Error: {e}")
            return 0

    rules.append({'number': 11, 'function': rule11})

    # Rule 12
    def rule12(mol):
        try:
            aromatic_carboxy_matches = mol.GetSubstructMatches(Chem.MolFromSmarts('[c][C](=O)[O;H1,-]'))
            if not aromatic_carboxy_matches:
                return 0
            # Check for fused rings with carbonyl or heteroatoms
            fused_ring_info = mol.GetRingInfo()
            # Get fused rings
            fused_rings = [ring for ring in fused_ring_info.AtomRings() if len(ring)>=6]
            for ring in fused_rings:
                ring_atoms = [mol.GetAtomWithIdx(idx) for idx in ring]
                has_carbonyl = any(atom.GetAtomicNum()==6 and any(bond.GetBondType()==Chem.rdchem.BondType.DOUBLE and bond.GetEndAtomIdx()!=atom.GetIdx() for bond in atom.GetBonds()) for atom in ring_atoms)
                has_heteroatom = any(atom.GetAtomicNum() in [7,8,15,16] for atom in ring_atoms)
                if has_carbonyl or has_heteroatom:
                    return 1
            return 0
        except Exception as e:
            # print(f"Rule 12 Error: {e}")
            return 0

    rules.append({'number':12,'function':rule12})

    # Rule 13
    def rule13(mol):
        try:
            pattern = '[CH3][CH2][CH2][CH2][CH2][CH2][CH2][C](=O)[O;H1,-]'
            chain_pat = Chem.MolFromSmarts(pattern)
            if mol.HasSubstructMatch(chain_pat):
                return 1
            else:
                return 0
        except Exception as e:
            # print(f"Rule 13 Error: {e}")
            return 0

    rules.append({'number':13,'function':rule13})

    # Rule 14
    def rule14(mol):
        try:
            if mol.HasSubstructMatch(acyl_amine_pat):
                return -1
            else:
                return 0
        except Exception as e:
            # print(f"Rule 14 Error: {e}")
            return 0

    rules.append({'number':14,'function':rule14})

    # Rule 15
    def rule15(mol):
        try:
            if mol.HasSubstructMatch(ketone_pat):
                return -1
            else:
                return 0
        except Exception as e:
            # print(f"Rule 15 Error: {e}")
            return 0

    rules.append({'number':15,'function':rule15})

    # Initialize results
    results = []

    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                res = rule['function'](mol)
                row.append(res)
            except:
                row.append(0)
        results.append(row)
    # Create DataFrame
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df