def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    carboxylic_acid = Chem.MolFromSmarts('C(=O)[O;H]')
    amine_primary = Chem.MolFromSmarts('[NX3;H2]')
    amine_secondary = Chem.MolFromSmarts('[NX3;H1][#6]')
    amino_acid_alpha = Chem.MolFromSmarts('[NX3;H2][CX4;H1][CX3](=O)[OX1H]')
    aromatic_ring = Chem.MolFromSmarts('c1ccccc1')
    para_amino = Chem.MolFromSmarts('c1cc(N)ccc1C(=O)[O;H]')
    para_nitro = Chem.MolFromSmarts('c1cc([N+](=O)[O-])ccc1C(=O)[O;H]')
    heterocycle_nitrogen = Chem.MolFromSmarts('[n]')
    hydroxyl_group = Chem.MolFromSmarts('[OX2H]')
    aldehyde_aromatic = Chem.MolFromSmarts('c[C](=O)[H]')
    ether_linkage = Chem.MolFromSmarts('[C][OX2][C]')
    long_aliphatic_chain = Chem.MolFromSmarts('[C]-[C]-[C]-[C]-[C]-[C]-[C](=O)[O;H]')
    terminal_hydroxyl = Chem.MolFromSmarts('[C][C][C][C][C][OX2H]')
    terminal_amino = Chem.MolFromSmarts('[C][C][C][C][C][NX3;H2]')
    amide_adjacent = Chem.MolFromSmarts('C(=O)N')
    aromatic_sidechain = Chem.MolFromSmarts('[NX3;H2][CX4][CX3](=O)[OX1H][CX4][c]')
    perfluoro_alkyl = Chem.MolFromSmarts('[C]([F])([F])[F]')
    para_hydroxy = Chem.MolFromSmarts('c1cc(O)ccc1C(=O)[O;H]')
    thiol_adjacent = Chem.MolFromSmarts('[#16X2H][CX4][CX3](=O)[OX1H]')
    extended_conjugation = Chem.MolFromSmarts('C=CC=CC(=O)[O;H]')
    
    # Define the rules
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are Î±-amino acids with carboxyl and amino groups on the same carbon',
            'patterns': [amino_acid_alpha],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Aromatic carboxylic acids with para-amino or para-nitro substituents',
            'patterns': [para_amino, para_nitro],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Heterocyclic carboxylic acids with nitrogen atoms in the ring',
            'patterns': [heterocycle_nitrogen, carboxylic_acid],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers with multiple hydroxyl groups near carboxyl group',
            'patterns': [hydroxyl_group, carboxylic_acid],
            'count_threshold': {'[OX2H]': 2},
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Long-chain aliphatic carboxylic acids without additional functional groups',
            'patterns': [long_aliphatic_chain],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers with aldehyde groups attached to aromatic rings',
            'patterns': [aldehyde_aromatic],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Modifiers containing polyether chains',
            'patterns': [ether_linkage],
            'count_threshold': {'[C][OX2][C]': 2},
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Long-chain aliphatic acids with terminal polar groups',
            'patterns': [carboxylic_acid],
            'additional_patterns': [terminal_hydroxyl, terminal_amino],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers with amide bonds adjacent to carboxyl group',
            'patterns': [amide_adjacent],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Amino acids with non-coordinating aromatic side chains',
            'patterns': [aromatic_sidechain],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Modifiers with electron-withdrawing perfluorinated alkyl chains',
            'patterns': [perfluoro_alkyl],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'Aromatic carboxylic acids with para-hydroxy substituents',
            'patterns': [para_hydroxy],
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Modifiers with sulfur-containing thiol groups near carboxyl group',
            'patterns': [thiol_adjacent],
            'prediction': 1
        },
        # Rules 14 and 15 are complex and depend on specific contexts
        # For simplicity, they are not included in this code
    ]
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check for required patterns
                for pat in rule.get('patterns', []):
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Check for additional patterns if any
                if 'additional_patterns' in rule:
                    additional_match = False
                    for pat in rule['additional_patterns']:
                        if mol.HasSubstructMatch(pat):
                            additional_match = True
                            break
                    if not additional_match:
                        match = False
                        row.append(0)
                        continue
                # Check count thresholds if any
                if 'count_threshold' in rule:
                    for smarts, threshold in rule['count_threshold'].items():
                        count = len(mol.GetSubstructMatches(Chem.MolFromSmarts(smarts)))
                        if count < threshold:
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df