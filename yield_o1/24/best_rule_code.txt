def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and substructures
    
    # Rule 1: Short-Chain Aliphatic Amino Acids with Free Amino and Carboxylic Acid Groups Lead to High Yield
    rule1_patterns = {
        'primary_amine': Chem.MolFromSmarts('[NX3H2]'),
        'carboxylic_acid': Chem.MolFromSmarts('[CX3](=O)[OX2H1]'),
    }
    
    # Rule 2: Aromatic Carboxylic Acids with Electron-Withdrawing Substituents at the Para Position (Excluding Aldehydes) Lead to High Yield
    rule2_patterns = {
        'aromatic_carboxylic_acid': Chem.MolFromSmarts('[c][CX3](=O)[OX2H1]'),
        'ewg_on_aromatic': [
            Chem.MolFromSmarts('[c][NX3](=O)[OX1]'),     # Nitro group attached to aromatic ring
            Chem.MolFromSmarts('[c][NX3H2]'),            # Amino group attached to aromatic ring
            Chem.MolFromSmarts('[c][F,Cl,Br,I]'),        # Halogen attached to aromatic ring
            Chem.MolFromSmarts('[c][CH2][F,Cl,Br,I]'),   # Halomethyl group attached to aromatic ring
        ],
        'exclude_aldehyde': Chem.MolFromSmarts('[c][CX3H](=O)'),  # Aldehyde attached to aromatic ring
    }
    
    # Rule 3: Heteroaromatic Carboxylic Acids with Nitrogen Atoms Adjacent to the Carboxyl Group Lead to High Yield
    rule3_patterns = {
        'heteroaromatic_carboxylic_acid': Chem.MolFromSmarts('[n][c][CX3](=O)[OX2H1]'),
        'exclude_pattern': Chem.MolFromSmarts('[c][c][CX3](=O)[OX2H1]'),  # Exclude if carboxylic acid is not adjacent to nitrogen
    }
    
    # Rule 4: Long-Chain Aliphatic Carboxylic Acids Without Additional Functional Groups Lead to High Yield
    rule4_patterns = {
        'long_aliphatic_chain': Chem.MolFromSmarts('[CH2][CH2][CH2][CH2][CH2][CH2]'),  # Chain of 6 or more carbons
        'carboxylic_acid': Chem.MolFromSmarts('[CX3](=O)[OX2H1]'),
        'exclude_patterns': [
            Chem.MolFromSmarts('[OX2H]'),   # Exclude hydroxyl groups
            Chem.MolFromSmarts('[NX3]'),    # Exclude amino groups
        ],
    }
    
    # Rule 5: Aliphatic Carboxylic Acids with Multiple Hydroxyl Groups Lead to High Yield
    rule5_patterns = {
        'carboxylic_acid': Chem.MolFromSmarts('[CX3](=O)[OX2H1]'),
        'multiple_hydroxyls': Chem.MolFromSmarts('[OX2H][CX4][OX2H]'),  # Two hydroxyls on adjacent carbons
    }
    
    # Rule 6: Modifiers with Terminal Ether Groups Lead to Low Yield
    rule6_patterns = {
        'terminal_ether': Chem.MolFromSmarts('[#6][OX2][#6]'),  # Ether linkage
        'exclude_patterns': [
            Chem.MolFromSmarts('[OX2H]'),  # Exclude hydroxyl groups
        ],
    }
    
    # Rule 7: Modifiers with Perfluorinated Alkyl Chains Lead to Low Yield
    rule7_patterns = {
        'perfluoro_alkyl': Chem.MolFromSmarts('[CX4]([F])(F)F'),
    }
    
    # Rule 8: Aromatic Carboxylic Acids with Aldehyde Substituents at the Para Position Lead to Low Yield
    rule8_patterns = {
        'aromatic_carboxylic_acid': Chem.MolFromSmarts('[c][CX3](=O)[OX2H1]'),
        'aldehyde_on_aromatic': Chem.MolFromSmarts('[c][CX3H](=O)'),
    }
    
    # Rule 9: Amino Acids with Bulky Aromatic Side Chains Lacking Donor Heteroatoms Lead to Low Yield
    rule9_patterns = {
        'amino_acid': Chem.MolFromSmarts('[NX3][CX4][CX3](=O)[OX2H1]'),  # General amino acid pattern
        'bulky_aromatic_side_chain': Chem.MolFromSmarts('[C][c]'),         # Aliphatic carbon connected to aromatic ring
        'exclude_donor_heteroatoms': Chem.MolFromSmarts('[c][!#6;!#1]'),  # Exclude heteroatoms in aromatic ring
    }
    
    # Rule 10: Amino Acids with Aromatic Side Chains Containing Donor Heteroatoms Lead to High Yield
    rule10_patterns = {
        'amino_acid': Chem.MolFromSmarts('[NX3][CX4][CX3](=O)[OX2H1]'),
        'aromatic_side_chain_with_heteroatom': Chem.MolFromSmarts('[c][n,o,s]'),
    }
    
    # Rule 11: Modifiers with Terminal Thiol Groups Lead to High Yield
    rule11_patterns = {
        'terminal_thiol': Chem.MolFromSmarts('[SX2H]'),
        'exclude_aromatic_thiol': Chem.MolFromSmarts('[c][SX2H]'),  # Exclude thiols attached to aromatic rings
    }
    
    # Rule 12: Aromatic Carboxylic Acids with Thiol Groups Directly Attached to the Ring Lead to Low Yield
    rule12_patterns = {
        'aromatic_carboxylic_acid': Chem.MolFromSmarts('[c][CX3](=O)[OX2H1]'),
        'aromatic_thiol': Chem.MolFromSmarts('[c][SX2H]'),
    }
    
    # Rule 13: Modifiers Containing Amide Bonds Adjacent to Carboxyl Groups Lead to Low Yield
    rule13_patterns = {
        'amide_adjacent_to_carboxyl': Chem.MolFromSmarts('[CX3](=O)[NX3][CX3](=O)[OX2H1]'),
    }
    
    # Rule 14: Aromatic Carboxylic Acids with Conjugated Ketone Groups Lead to High Yield
    rule14_patterns = {
        'aromatic_carboxylic_acid': Chem.MolFromSmarts('[c][CX3](=O)[OX2H1]'),
        'conjugated_ketone': Chem.MolFromSmarts('[c][CX3](=O)[c]'),
    }
    
    # Rule 15: Modifiers with Trifluoroacetyl Groups Lead to Low Yield
    rule15_patterns = {
        'trifluoroacetyl_group': Chem.MolFromSmarts('[CX3](=O)[CX3](F)(F)F'),
    }
    
    # Compile rules into a list
    rules = [
        {
            'number': 1,
            'description': 'Short-Chain Aliphatic Amino Acids with Free Amino and Carboxylic Acid Groups Lead to High Yield',
            'patterns': rule1_patterns,
            'exclude_patterns': None,
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Aromatic Carboxylic Acids with Electron-Withdrawing Substituents at the Para Position (Excluding Aldehydes) Lead to High Yield',
            'patterns': rule2_patterns,
            'exclude_patterns': None,
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Heteroaromatic Carboxylic Acids with Nitrogen Atoms Adjacent to the Carboxyl Group Lead to High Yield',
            'patterns': rule3_patterns,
            'exclude_patterns': None,
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Long-Chain Aliphatic Carboxylic Acids Without Additional Functional Groups Lead to High Yield',
            'patterns': rule4_patterns,
            'exclude_patterns': None,
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Aliphatic Carboxylic Acids with Multiple Hydroxyl Groups Lead to High Yield',
            'patterns': rule5_patterns,
            'exclude_patterns': None,
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers with Terminal Ether Groups Lead to Low Yield',
            'patterns': rule6_patterns,
            'exclude_patterns': None,
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Modifiers with Perfluorinated Alkyl Chains Lead to Low Yield',
            'patterns': rule7_patterns,
            'exclude_patterns': None,
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Aromatic Carboxylic Acids with Aldehyde Substituents at the Para Position Lead to Low Yield',
            'patterns': rule8_patterns,
            'exclude_patterns': None,
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Amino Acids with Bulky Aromatic Side Chains Lacking Donor Heteroatoms Lead to Low Yield',
            'patterns': rule9_patterns,
            'exclude_patterns': None,
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Amino Acids with Aromatic Side Chains Containing Donor Heteroatoms Lead to High Yield',
            'patterns': rule10_patterns,
            'exclude_patterns': None,
            'prediction': 1
        },
        {
            'number': 11,
            'description': 'Modifiers with Terminal Thiol Groups Lead to High Yield',
            'patterns': rule11_patterns,
            'exclude_patterns': None,
            'prediction': 1
        },
        {
            'number': 12,
            'description': 'Aromatic Carboxylic Acids with Thiol Groups Directly Attached to the Ring Lead to Low Yield',
            'patterns': rule12_patterns,
            'exclude_patterns': None,
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Modifiers Containing Amide Bonds Adjacent to Carboxyl Groups Lead to Low Yield',
            'patterns': rule13_patterns,
            'exclude_patterns': None,
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'Aromatic Carboxylic Acids with Conjugated Ketone Groups Lead to High Yield',
            'patterns': rule14_patterns,
            'exclude_patterns': None,
            'prediction': 1
        },
        {
            'number': 15,
            'description': 'Modifiers with Trifluoroacetyl Groups Lead to Low Yield',
            'patterns': rule15_patterns,
            'exclude_patterns': None,
            'prediction': -1
        },
    ]
    
    # Initialize results list
    results = []
    
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if rule['exclude_patterns']:
                    for pat in rule['exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                patterns = rule['patterns']
                if rule['number'] == 1:
                    # Rule 1
                    if mol.HasSubstructMatch(patterns['primary_amine']) and \
                       mol.HasSubstructMatch(patterns['carboxylic_acid']) and \
                       not any(atom.GetIsAromatic() for atom in mol.GetAtoms()):
                        row.append(rule['prediction'])
                    else:
                        row.append(0)
                elif rule['number'] == 2:
                    # Rule 2
                    if mol.HasSubstructMatch(patterns['aromatic_carboxylic_acid']) and \
                       any(mol.HasSubstructMatch(pat) for pat in patterns['ewg_on_aromatic']) and \
                       not mol.HasSubstructMatch(patterns['exclude_aldehyde']):
                        row.append(rule['prediction'])
                    else:
                        row.append(0)
                elif rule['number'] == 3:
                    # Rule 3
                    if mol.HasSubstructMatch(patterns['heteroaromatic_carboxylic_acid']) and \
                       not mol.HasSubstructMatch(patterns['exclude_pattern']):
                        row.append(rule['prediction'])
                    else:
                        row.append(0)
                elif rule['number'] == 4:
                    # Rule 4
                    if mol.HasSubstructMatch(patterns['long_aliphatic_chain']) and \
                       mol.HasSubstructMatch(patterns['carboxylic_acid']):
                        if not any(mol.HasSubstructMatch(pat) for pat in patterns['exclude_patterns']):
                            row.append(rule['prediction'])
                        else:
                            row.append(0)
                    else:
                        row.append(0)
                # Implement other rules similarly...
                else:
                    # For rules without special conditions
                    required_patterns = patterns.values()
                    if all(mol.HasSubstructMatch(pat) for pat in required_patterns):
                        row.append(rule['prediction'])
                    else:
                        row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df
