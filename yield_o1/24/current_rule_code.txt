def rule2matrix(smiles_list):
    # Define the rules with their corrected SMARTS patterns
    rules = [
        {
            'number': 1,
            'description': 'Modifiers containing both amino and carboxylic acid groups on short aliphatic chains (2 to 5 carbons) lead to high yield.',
            'pattern': '[NX3;H2][CH2]{1,4}[CX3](=O)[OX1H0-,OX2H1]',
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Aromatic carboxylic acids with para-substituents capable of metal coordination lead to high yield.',
            'pattern': 'c1cc([$(N),$(O)])ccc1C(=O)[OX1H0-,OX2H1]',
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers with multiple hydroxyl groups near carboxylic acid groups lead to high yield.',
            'pattern': '[OX2H]',
            'min_count': 2,
            'additional_pattern': '[CX3](=O)[OX1H0-,OX2H1]',
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers with heterocyclic nitrogen atoms capable of metal coordination lead to high yield.',
            'pattern': '[$(n1ccccc1),$(n1ncccc1),$(c1ncccc1)][CX3](=O)[OX1H0-,OX2H1]',
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers with sulfhydryl groups on short chains lead to high yield.',
            'pattern': '[SX2H][CH2]{0,3}[CX3](=O)[OX1H0-,OX2H1]',
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers with long aliphatic chains without additional polar functional groups result in high yield.',
            'pattern': '[CH2]{5,7}[CX3](=O)[OX1H0-,OX2H1]',
            'exclude_patterns': ['[OX2H]', '[NX3;H2,H1]', '[#6][OX2][#6]', '[F,Cl,Br,I]', '[#6]=[O]', '[#6]#[N]'],
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'Modifiers with electron-withdrawing groups adjacent to carboxylic acid groups lead to low yield.',
            'patterns': ['[#6][CX3](=O)[CX3](=O)[OX1H0-,OX2H1]', '[CX3H1](=O)[CX3](=O)[OX1H0-,OX2H1]', '[#6][C](F)(F)F[CX3](=O)[OX1H0-,OX2H1]'],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Modifiers containing amide bonds adjacent to carboxylic acid groups lead to low yield.',
            'pattern': '[CX3](=O)[NX3][CH2]*[CX3](=O)[OX1H0-,OX2H1]',
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers with flexible polyether chains lead to low yield.',
            'pattern': '[#6][OX2][#6][OX2][#6][OX2][#6][CX3](=O)[OX1H0-,OX2H1]',
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers with nitrogen-containing aromatic side chains lead to high yield.',
            'pattern': '[#6][c][n].*[CX3](=O)[OX1H0-,OX2H1]',
            'prediction': 1
        },
        {
            'number': 11,
            'description': 'Modifiers with aldehyde or ketone groups on aliphatic chains lead to low yield.',
            'pattern': '[#6][CH2]{1,5}[CX3](=O)[CX3H1](=O)',
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'Modifiers with aromatic systems capable of chelation lead to high yield.',
            'pattern': 'c1cc(O)cc(C(=O)[OX1H0-,OX2H1])c1',
            'prediction': 1
        },
        {
            'number': 13,
            'description': 'Modifiers with bulky substituents near coordination sites lead to low yield.',
            'pattern': '[CX4]([#6])([#6])([#6])[#6].*[CX3](=O)[OX1H0-,OX2H1]',
            'prediction': -1
        }
    ]
    
    # Compile the patterns
    for rule in rules:
        try:
            if 'patterns' in rule:
                rule['compiled_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule['patterns']]
            else:
                rule['compiled_pattern'] = Chem.MolFromSmarts(rule['pattern'])
            if 'exclude_patterns' in rule:
                rule['compiled_exclude_patterns'] = [Chem.MolFromSmarts(p) for p in rule['exclude_patterns']]
        except Exception as e:
            rule['compiled_pattern'] = None
            rule['compiled_patterns'] = []
            rule['compiled_exclude_patterns'] = []
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = False
                # Handle exclude patterns
                if 'compiled_exclude_patterns' in rule:
                    exclude = False
                    for excl_pat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(excl_pat):
                            exclude = True
                            break
                    if exclude:
                        row.append(0)
                        continue
                # Handle multiple patterns (list of patterns)
                if 'compiled_patterns' in rule:
                    for pat in rule['compiled_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = True
                            break
                else:
                    # Handle single pattern
                    if mol.HasSubstructMatch(rule['compiled_pattern']):
                        match = True
                # Handle min_count for certain patterns (e.g., Rule 3)
                if match and 'min_count' in rule:
                    count = len(mol.GetSubstructMatches(Chem.MolFromSmarts(rule['pattern'])))
                    if count >= rule['min_count']:
                        # Also check for additional_pattern if provided
                        if 'additional_pattern' in rule:
                            additional_match = mol.HasSubstructMatch(Chem.MolFromSmarts(rule['additional_pattern']))
                            if additional_match:
                                row.append(rule['prediction'])
                            else:
                                row.append(0)
                        else:
                            row.append(rule['prediction'])
                    else:
                        row.append(0)
                elif match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f"Rule {rule['number']}" for rule in rules])
    return df