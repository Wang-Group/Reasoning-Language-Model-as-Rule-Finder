def rule2matrix(smiles_list):
    # Define the rules with SMARTS patterns and predictions
    # Each rule is a dictionary with keys: 'number', 'description', 'patterns', 'prediction'
    
    # SMARTS patterns for functional groups
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    amino_group = '[NX3;H2,H1][#6]'
    thiol_group = '[SX2H]'
    nitro_group = '[NX3](=O)=O'
    bromomethyl_group = '[CH2Br]'
    aromatic_ring = 'c1ccccc1'
    heteroaromatic_nitrogen = '[n]'
    hydroxyl_group = '[OX2H]'
    aldehyde_or_ketone = '[CX3]=[OX1]'
    perfluorinated_chain = '[CX4]([F])[F]'
    aromatic_thiol = '[c][SX2H]'
    ether_linkage = '[#6][OX2][#6]'
    indole_group = 'c1ccc2c(c1)[nH]c3c2cccc3'
    
    # Compile SMARTS patterns
    patterns = {
        'carboxylic_acid': Chem.MolFromSmarts(carboxylic_acid),
        'amino_group': Chem.MolFromSmarts(amino_group),
        'thiol_group': Chem.MolFromSmarts(thiol_group),
        'nitro_group': Chem.MolFromSmarts(nitro_group),
        'bromomethyl_group': Chem.MolFromSmarts(bromomethyl_group),
        'aromatic_ring': Chem.MolFromSmarts(aromatic_ring),
        'heteroaromatic_nitrogen': Chem.MolFromSmarts(heteroaromatic_nitrogen),
        'hydroxyl_group': Chem.MolFromSmarts(hydroxyl_group),
        'aldehyde_or_ketone': Chem.MolFromSmarts(aldehyde_or_ketone),
        'perfluorinated_chain': Chem.MolFromSmarts(perfluorinated_chain),
        'aromatic_thiol': Chem.MolFromSmarts(aromatic_thiol),
        'ether_linkage': Chem.MolFromSmarts(ether_linkage),
        'indole_group': Chem.MolFromSmarts(indole_group),
    }
    
    # Define the rules
    rules = [
        {
            'number': 1,
            'description': 'High Yield: Short-chain aliphatic carboxylic acids (3 to 6 carbons) with additional amino, carboxyl, or thiol groups.',
            'required': ['carboxylic_acid'],
            'additional': ['amino_group', 'thiol_group', 'carboxylic_acid'],
            'constraints': {'num_carbons': (3, 6)},
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'High Yield: Aromatic carboxylic acids substituted at the para-position with electron-withdrawing groups capable of coordination (amino, nitro, bromomethyl).',
            'required': ['aromatic_ring', 'carboxylic_acid'],
            'substituents': ['amino_group', 'nitro_group', 'bromomethyl_group'],
            'position': 'para',
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'High Yield: Heteroaromatic carboxylic acids with nitrogen atoms in the ring.',
            'required': ['heteroaromatic_nitrogen', 'carboxylic_acid'],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'High Yield: Polyhydroxy carboxylic acids (multiple hydroxyl groups).',
            'required': ['carboxylic_acid'],
            'additional': ['hydroxyl_group'],
            'min_count': {'hydroxyl_group': 2},
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Low Yield: Aromatic carboxylic acids substituted with aldehyde or ketone groups.',
            'required': ['aromatic_ring', 'carboxylic_acid', 'aldehyde_or_ketone'],
            'prediction': -1
        },
        {
            'number': 6,
            'description': 'Low Yield: Perfluorinated carboxylic acids.',
            'required': ['carboxylic_acid', 'perfluorinated_chain'],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Low Yield: Amino acids with non-coordinating aromatic side chains (e.g., phenylalanine).',
            'required': ['carboxylic_acid', 'aromatic_ring', 'amino_group'],
            'exclude': ['heteroaromatic_nitrogen'],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Low Yield: Long-chain aliphatic carboxylic acids (more than six carbons) with terminal amino or hydroxyl groups.',
            'required': ['carboxylic_acid'],
            'additional': ['amino_group', 'hydroxyl_group'],
            'constraints': {'num_carbons': (7, 100)},
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Low Yield: Aromatic carboxylic acids substituted at the para-position with electron-donating groups (e.g., methyl groups).',
            'required': ['aromatic_ring', 'carboxylic_acid'],
            'substituents': ['[CH3]'],
            'position': 'para',
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Low Yield: Modifiers with aromatic thiol groups.',
            'required': ['carboxylic_acid', 'aromatic_thiol'],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Low Yield: Aliphatic carboxylic acids with ether linkages lacking strong coordinating groups.',
            'required': ['carboxylic_acid', 'ether_linkage'],
            'exclude': ['amino_group', 'thiol_group'],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'High Yield: Amino acids with aromatic side chains containing coordinating heteroatoms (e.g., indole nitrogen in tryptophan).',
            'required': ['carboxylic_acid', 'indole_group', 'amino_group'],
            'prediction': 1
        },
        {
            'number': 13,
            'description': 'Low Yield: Modifiers with complex or bulky structures that may interfere with coordination.',
            'constraints': {'complexity': 'high'},
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'Variable Yield: Aromatic carboxylic acids with hydroxyl groups on the aromatic ring; yield depends on chain length and positioning.',
            'required': ['carboxylic_acid', 'aromatic_ring', 'hydroxyl_group'],
            'constraints': {'chain_length_effect': True},
            'prediction': 0  # Variable yield
        },
        {
            'number': 15,
            'description': 'High Yield: Simple aliphatic carboxylic acids without additional functional groups.',
            'required': ['carboxylic_acid'],
            'exclude': ['amino_group', 'thiol_group', 'hydroxyl_group', 'aromatic_ring'],
            'prediction': 1
        },
    ]
    
    # Compile required and exclude patterns for each rule
    for rule in rules:
        rule['compiled_required'] = [patterns[p] if p in patterns else Chem.MolFromSmarts(p) for p in rule.get('required', [])]
        rule['compiled_additional'] = [patterns[p] if p in patterns else Chem.MolFromSmarts(p) for p in rule.get('additional', [])]
        rule['compiled_exclude'] = [patterns[p] if p in patterns else Chem.MolFromSmarts(p) for p in rule.get('exclude', [])]
        if 'substituents' in rule:
            rule['compiled_substituents'] = [patterns[p] if p in patterns else Chem.MolFromSmarts(p) for p in rule['substituents']]
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns
                for pat in rule.get('compiled_exclude', []):
                    if mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Check required patterns
                for pat in rule.get('compiled_required', []):
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Check additional patterns (at least one must match)
                additional_patterns = rule.get('compiled_additional', [])
                if additional_patterns:
                    additional_match = any(mol.HasSubstructMatch(pat) for pat in additional_patterns)
                    if not additional_match:
                        match = False
                if not match:
                    row.append(0)
                    continue
                # Check constraints
                constraints = rule.get('constraints', {})
                # Number of carbons constraint
                if 'num_carbons' in constraints:
                    num_carbons = sum(1 for atom in mol.GetAtoms() if atom.GetAtomicNum() == 6)
                    min_c, max_c = constraints['num_carbons']
                    if num_carbons < min_c or num_carbons > max_c:
                        match = False
                # Minimum count of functional groups
                if 'min_count' in rule:
                    for group, count in rule['min_count'].items():
                        pat = patterns[group]
                        matches = mol.GetSubstructMatches(pat)
                        if len(matches) < count:
                            match = False
                            break
                if not match:
                    row.append(0)
                    continue
                # Position-specific substituents (e.g., para-position)
                if 'compiled_substituents' in rule and 'position' in rule:
                    # Implement position-specific matching if possible
                    # This is complex; for simplicity, we assume a match here
                    pass  # Placeholder for position-specific logic
                # Complexity constraint
                if constraints.get('complexity') == 'high':
                    # Placeholder: assume molecules with more than 15 heavy atoms are complex
                    heavy_atoms = mol.GetNumHeavyAtoms()
                    if heavy_atoms <= 15:
                        match = False
                # Chain length effect
                if constraints.get('chain_length_effect'):
                    # Placeholder: skip for now
                    pass
                # Append prediction if all checks passed
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df