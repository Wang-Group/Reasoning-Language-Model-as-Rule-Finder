def rule2matrix(smiles_list):
    # Import RDKit
    from rdkit import Chem
    
    # Define the rules with their associated SMARTS patterns and predictions
    rules = [
        # Rule 1: High Yield (+1)
        {
            'number': 1,
            'description': 'Modifiers that are Î±-amino dicarboxylic acids (amino acids with two carboxyl groups) result in high yield.',
            'patterns': [
                # Alpha-amino acid backbone with two carboxylic acid groups
                '[NX3][CX4H]([*])[CX3](=O)[OX1H]',  # Alpha-amino group
                '[CX3](=O)[OX1H]',  # Carboxylic acid group
            ],
            'counts': {
                '[CX3](=O)[OX1H]': 2  # At least 2 carboxylic acid groups
            },
            'prediction': 1
        },
        # Rule 2: High Yield (+1)
        {
            'number': 2,
            'description': 'Modifiers that are para-substituted aromatic carboxylic acids with amino or nitro groups directly attached to the ring result in high yield.',
            'patterns': [
                # Para-substituted aromatic carboxylic acid with amino or nitro group
                'c1ccc(cc1)[C](=O)[O]',  # Aromatic carboxylic acid
                '(c1ccc(N)cc1)',  # Para-amino group
                '(c1ccc([N+](=O)[O-])cc1)',  # Para-nitro group
            ],
            'prediction': 1
        },
        # Rule 2: Low Yield (-1)
        {
            'number': 2.1,
            'description': 'Modifiers that are para-substituted aromatic carboxylic acids with aldehyde (formyl), methyl, or mercapto groups at the same position result in low yield.',
            'patterns': [
                # Para-substituted aromatic carboxylic acid with aldehyde, methyl, or mercapto group
                'c1ccc(cc1)[C](=O)[O]',  # Aromatic carboxylic acid
                '(c1ccc(C=O)cc1)',  # Para-aldehyde group
                '(c1ccc(C)cc1)',  # Para-methyl group
                '(c1ccc(S)cc1)',  # Para-mercapto group
            ],
            'prediction': -1
        },
        # Rule 3: High Yield (+1)
        {
            'number': 3,
            'description': 'Modifiers with heteroaromatic carboxylic acids, especially pyridine derivatives, result in high yield.',
            'patterns': [
                # Heteroaromatic rings with carboxylic acid
                '[nH]1cccc1C(=O)O',  # Pyridine-3-carboxylic acid
                'n1ccccc1C(=O)O',  # Nicotinic acid
            ],
            'prediction': 1
        },
        # Rule 4: High Yield (+1)
        {
            'number': 4,
            'description': 'Modifiers that are aliphatic carboxylic acids with medium-length chains (6 to 8 carbons) result in high yield unless terminal functional groups interfere.',
            'patterns': [
                # Aliphatic carboxylic acids with 6 to 8 carbons
                'C{5,7}C(=O)O',  # Chains with 6 to 8 carbons ending with carboxylic acid
            ],
            'exclude_patterns': [
                # Exclude terminal amino or hydroxyl groups
                '[NX3;H2,H1][CH2]',  # Terminal amino group
                '[OX2H][CH2]',  # Terminal hydroxyl group
            ],
            'prediction': 1
        },
        # Rule 5: Low Yield (-1)
        {
            'number': 5,
            'description': 'Modifiers with terminal amino or hydroxyl groups on long aliphatic chains result in low yield.',
            'patterns': [
                # Long aliphatic chains with terminal amino or hydroxyl groups
                'C{6,}[NX3;H2,H1]',  # Terminal amino group on long chain
                'C{6,}[OX2H]',  # Terminal hydroxyl group on long chain
            ],
            'prediction': -1
        },
        # Rule 6: High Yield (+1)
        {
            'number': 6,
            'description': 'Modifiers containing multiple hydroxyl groups on aliphatic chains, especially adjacent hydroxyls, result in high yield.',
            'patterns': [
                '[CH2][OX2H]',  # Aliphatic hydroxyl groups
            ],
            'counts': {
                '[CH2][OX2H]': 2  # At least two hydroxyl groups
            },
            'prediction': 1
        },
        # Rule 7: High Yield (+1)
        {
            'number': 7,
            'description': 'Modifiers with mercapto (thiol) groups on aliphatic chains result in high yield.',
            'patterns': [
                '[CX4][SX2H]',  # Aliphatic thiol group
            ],
            'prediction': 1
        },
        # Rule 7: Low Yield (-1)
        {
            'number': 7.1,
            'description': 'Modifiers with mercapto groups on aromatic rings result in low yield.',
            'patterns': [
                '[c][SX2H]',  # Aromatic thiol group
            ],
            'prediction': -1
        },
        # Rule 8: Low Yield (-1)
        {
            'number': 8,
            'description': 'Modifiers with perfluorinated alkyl chains result in low yield.',
            'patterns': [
                '[CX4](F)(F)(F)',  # Trifluoromethyl group
                '[CX4](F)(F)[CX4](F)(F)C(=O)O',  # Perfluorinated chain ending with carboxylic acid
            ],
            'prediction': -1
        },
        # Rule 9: Low Yield (-1)
        {
            'number': 9,
            'description': 'Modifiers with aldehyde (formyl) groups on aromatic rings result in low yield.',
            'patterns': [
                'c1ccc([CX3H]=O)cc1',  # Aromatic ring with aldehyde group
            ],
            'prediction': -1
        },
        # Rule 10: High Yield (+1)
        {
            'number': 10,
            'description': 'Modifiers with aromatic rings connected to carboxylic acids via aliphatic chains of four or more carbons result in high yield.',
            'patterns': [
                '[c][CH2][CH2][CH2][CH2][C](=O)[OX1H]',  # Aromatic ring connected via 4-carbon chain to carboxylic acid
            ],
            'prediction': 1
        },
        # Rule 10: Low Yield (-1)
        {
            'number': 10.1,
            'description': 'Modifiers with aromatic rings connected to carboxylic acids via aliphatic chains of shorter than four carbons result in low yield.',
            'patterns': [
                '[c][CH2]{1,3}[C](=O)[OX1H]',  # Aromatic ring connected via short chain to carboxylic acid
            ],
            'prediction': -1
        },
        # Rule 11: Low Yield (-1)
        {
            'number': 11,
            'description': 'Modifiers with bulky substituents directly attached to aromatic rings result in low yield due to steric hindrance.',
            'patterns': [
                '[c][C]([!H])[!H]',  # Bulky group attached to aromatic ring
            ],
            'prediction': -1
        },
        # Rule 12: Low Yield (-1)
        {
            'number': 12,
            'description': 'Modifiers containing adjacent ketone or amide groups to the carboxylic acid result in low yield.',
            'patterns': [
                '[C](=O)[C](=O)[OX1H]',  # Ketone adjacent to carboxylic acid
                '[C](=O)[NX3][C](=O)[OX1H]',  # Amide adjacent to carboxylic acid
            ],
            'prediction': -1
        },
        # Rule 13: High Yield (+1)
        {
            'number': 13,
            'description': 'Modifiers that are amino acids with heteroaromatic side chains, such as indole or pyrrole rings, result in high yield.',
            'patterns': [
                '[NX3][CX4H][CX4H][c]1[cH][nH][cH][cH][c]1',  # Tryptophan-like structure
            ],
            'prediction': 1
        },
        # Rule 13: Low Yield (-1)
        {
            'number': 13.1,
            'description': 'Modifiers that are amino acids with simple aromatic side chains result in low yield.',
            'patterns': [
                '[NX3][CX4H][CX4H][c]1[cH][cH][cH][cH][cH]1',  # Phenylalanine-like structure
            ],
            'prediction': -1
        },
        # Rule 14: Low Yield (-1)
        {
            'number': 14,
            'description': 'Modifiers with polyglycol ether chains result in low yield.',
            'patterns': [
                '[$([OX2][CX4][CX4][OX2][CX4])]',  # Polyglycol ether chain
            ],
            'prediction': -1
        },
        # Rule 15: High Yield (+1)
        {
            'number': 15,
            'description': 'Modifiers with electron-rich heterocycles or conjugated keto groups adjacent to carboxylic acids result in high yield.',
            'patterns': [
                '[o][c][c][c](=O)[OX1H]',  # Electron-rich heterocycle adjacent to carboxylic acid
                '[n][c](=O)[c](=O)[OX1H]',  # Conjugated keto group adjacent to carboxylic acid
            ],
            'prediction': 1
        },
    ]

    # Compile the SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for smarts in rule.get('patterns', []):
            try:
                compiled_pattern = Chem.MolFromSmarts(smarts)
                if compiled_pattern is None:
                    continue
                compiled_patterns.append(compiled_pattern)
            except Exception as e:
                # Skip patterns that cause exceptions
                continue
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_exclude_patterns = []
            for smarts in rule['exclude_patterns']:
                try:
                    compiled_pattern = Chem.MolFromSmarts(smarts)
                    if compiled_pattern is None:
                        continue
                    compiled_exclude_patterns.append(compiled_pattern)
                except Exception as e:
                    continue
            rule['compiled_exclude_patterns'] = compiled_exclude_patterns

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'compiled_exclude_patterns' in rule:
                    for pat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for pat in rule['compiled_patterns']:
                    matches = mol.GetSubstructMatches(pat)
                    if not matches:
                        match = False
                        break
                    else:
                        # If counts are specified, check that
                        if 'counts' in rule:
                            smarts = Chem.MolToSmarts(pat)
                            count_required = rule['counts'].get(smarts, 1)
                            if len(matches) < count_required:
                                match = False
                                break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df
