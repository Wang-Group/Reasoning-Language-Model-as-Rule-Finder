
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: **Modifiers that are amino acids with short, non-aromatic side chains (carbon chain length ≤ 5), containing both amino (-NH₂) and carboxylic acid (-COOH) groups, tend to result in high yields.**
  - *Rationale*: Such modifiers can effectively coordinate with metal centers through both amino and carboxyl groups, enhancing catalyst stability and reactivity.
  - *Examples*:
    - (2S)-2-aminobutanedioic acid
    - (2S)-2-aminopentanedioic acid
    - 5-aminopentanoic acid

- **Rule 2**: **Modifiers that are aromatic carboxylic acids substituted with electron-withdrawing groups at the para position (e.g., nitro (-NO₂), bromomethyl (-CH₂Br)) tend to result in high yields.**
  - *Rationale*: Electron-withdrawing groups increase the acidity of the carboxylic acid, improving coordination to the metal center and facilitating electron transfer during catalysis.
  - *Examples*:
    - 4-(bromomethyl)benzoic acid
    - 4-nitrobenzoic acid

- **Rule 3**: **Modifiers containing aldehyde functional groups (-CHO) tend to result in low yields.**
  - *Rationale*: Aldehyde groups may engage in side reactions or inhibit catalyst activity by coordinating too strongly to the metal center, blocking active sites.
  - *Examples*:
    - 4-formylbenzoic acid
    - 5-formyl-2-hydroxybenzoic acid

- **Rule 4**: **Modifiers containing thiol groups (-SH) on short aliphatic chains tend to result in high yields, while those with thiol groups attached directly to aromatic rings tend to result in low yields.**
  - *Rationale*: Aliphatic thiols can form optimal interactions with the catalyst without causing steric hindrance, whereas aromatic thiols may bind too strongly or introduce steric effects that inhibit catalysis.
  - *Examples*:
    - High Yield: 3-sulfanylpropanoic acid
    - Low Yield: 4-sulfanylbenzoic acid

- **Rule 5**: **Modifiers with nitrogen heterocycles directly attached to carboxylic acid groups tend to result in high yields, while those where the heterocycle is further removed tend to result in low yields.**
  - *Rationale*: Direct attachment of nitrogen heterocycles provides additional coordination sites and facilitates electron transfer, enhancing catalytic activity.
  - *Examples*:
    - High Yield:
      - Pyridine-3-carboxylic acid
      - 1H-pyrazole-4-carboxylic acid
    - Low Yield:
      - 4-pyridin-4-ylbenzoic acid

- **Rule 6**: **Modifiers that are amino acids with aromatic side chains containing electron-rich heterocycles (e.g., indole in tryptophan) tend to result in high yields, while those with simple aromatic side chains (e.g., phenyl in phenylalanine) tend to result in low yields.**
  - *Rationale*: Electron-rich heterocycles can facilitate better coordination and electron transfer compared to simple aromatic rings, enhancing catalytic efficiency.
  - *Examples*:
    - High Yield: (2R)-2-amino-3-(1H-indol-3-yl)propanoic acid (tryptophan)
    - Low Yield: (2S)-2-amino-3-phenylpropanoic acid (phenylalanine)

- **Rule 7**: **Modifiers with long aliphatic chains (carbon chain length ≥ 7) substituted with polar groups (e.g., amino, hydroxy) tend to result in low yields, while simple aliphatic carboxylic acids without polar substituents can result in high yields.**
  - *Rationale*: Polar groups on long chains introduce flexibility and steric bulk that disrupt effective catalyst-modifier interactions, reducing catalyst accessibility. Simple long-chain acids maintain hydrophobic interactions favorable for catalyst performance.
  - *Examples*:
    - Low Yield:
      - 7-aminoheptanoic acid
      - 7-hydroxyheptanoic acid
      - 8-aminooctanoic acid
    - High Yield:
      - Octanoic acid

- **Rule 8**: **Modifiers containing polyether chains (e.g., multiple ethoxy (-OCH₂CH₂-) units) tend to result in low yields.**
  - *Rationale*: Highly polar polyether chains increase solvation and mobility of the modifier, reducing its effective concentration at the catalyst surface and hindering catalyst-modifier interactions.
  - *Examples*:
    - 2-[2-(2-methoxyethoxy)ethoxy]acetic acid
    - 3-[2-(2-aminoethoxy)ethoxy]propanoic acid

- **Rule 9**: **Modifiers containing perfluoroalkyl chains tend to result in low yields.**
  - *Rationale*: Perfluorinated chains are highly electron-withdrawing and hydrophobic, which can disrupt optimal catalyst-modifier interactions and reduce solubility in the reaction medium.
  - *Example*:
    - 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid

- **Rule 10**: **Modifiers containing aromatic rings substituted with electron-donating groups (e.g., hydroxy (-OH), methoxy (-OCH₃)) connected via longer aliphatic chains (carbon chain length ≥ 4) to a carboxylic acid tend to result in high yields, while those with shorter chains (carbon chain length ≤ 3) tend to result in low yields.**
  - *Rationale*: Longer chains may position the electron-donating substituents favorably for interaction with the catalyst, enhancing activity. Shorter chains may not provide optimal spatial arrangement, reducing effectiveness.
  - *Examples*:
    - High Yield:
      - 5-(4-hydroxyphenyl)pentanoic acid
      - 4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid
    - Low Yield:
      - 3-(4-hydroxyphenyl)propanoic acid

- **Rule 11**: **Modifiers containing multiple hydroxyl groups attached directly to small aliphatic chains tend to result in high yields.**
  - *Rationale*: Multiple hydroxyl groups enhance hydrogen bonding and coordination with the catalyst, improving its performance and stability.
  - *Examples*:
    - (2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid
    - 2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,-1,0,0,0,0,0,0,0,0
0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.7142857142857143; Test Accuracy: 0.0
    Train Support: 0.0761904761904762; Test Support: 0.0
    Train Confidence: 0.9333333333333332; Test Confidence: 0.5
    Train Lift: 1.92156862745098; Test Lift: NONE
    Train Leverage: 0.034557823129251694; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    import pandas as pd
    from rdkit import Chem
    from rdkit.Chem import AllChem

    # Define SMARTS patterns for functional groups
    carboxylic_acid = ['[CX3](=O)[OX1H1]', '[CX3](=O)[O-]'] # Carboxylic acid group

    primary_amine = '[NX3H2]' # Primary amine group
    secondary_amine = '[NX3H1][#6;!$(C=[O,N,S])]' # Secondary amine group
    amine = [primary_amine, secondary_amine]

    # Aldehyde group
    aldehyde_group = '[CX3H1](=O)[#6]' # Aldehyde group

    # Thiol group
    thiol_group = '[SX2H]' # Thiol group

    # Aromatic thiol
    aromatic_thiol = '[c][SX2H]'

    # Nitrogen heterocycles directly attached to carboxylic acid group
    nitrogen_heterocycle_with_carboxy = ['[n][CX3](=O)[OX1H1]', '[n][CX3](=O)[O-]']

    # Nitrogen heterocycle further removed
    nitrogen_heterocycle = '[n]'

    # Nitro group on aromatic ring
    nitro_group_on_aromatic = '[c][N+](=O)[O-]'
    bromomethyl_on_aromatic = '[c][CH2Br]'

    # Indole ring (tryptophan)
    indole = 'c1c[cH]c2c1cccc2' # Indole ring system

    # Benzene ring (phenylalanine)
    benzene_ring = 'c1ccccc1'

    # Long aliphatic chains (carbon chain length ≥ 7) substituted with polar groups
    long_chain_with_polar = '[C]-[C]-[C]-[C]-[C]-[C]-[C]-[!#1]'

    # Polyether chains (multiple ethoxy units)
    polyether_chain = '[CX4][OX2][CX4][OX2][CX4][OX2][CX4]'

    # Perfluoroalkyl chains
    perfluoroalkyl = '[CX4]([F])([F])([F])'

    # Multiple hydroxyl groups attached directly to small aliphatic chains
    aliphatic_chain_with_multiple_OH = '[CX4][OX2H][CX4][OX2H][CX4][OX2H]'

    rules = [
        {
            'number': 1,
            'description': 'High Yield: Modifiers that are amino acids with short, non-aromatic side chains (carbon chain length ≤ 5), containing both amino (-NH2) and carboxylic acid (-COOH) groups.',
            'patterns': [
                carboxylic_acid,
                [primary_amine],
            ],
            'additional_logic': 'Check that the side chain is non-aromatic and of length ≤5 carbons',
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'High Yield: Modifiers that are aromatic carboxylic acids substituted with electron-withdrawing groups at the para position (e.g., nitro (-NO₂), bromomethyl (-CH₂Br))',
            'patterns': [
                carboxylic_acid,
                [nitro_group_on_aromatic, bromomethyl_on_aromatic],
            ],
            'prediction':1
        },
        {
            'number':3,
            'description': 'Low Yield: Modifiers containing aldehyde functional groups (-CHO)',
            'patterns': [
                [aldehyde_group]
            ],
            'prediction': -1
        },
        {
            'number':4,
            'description': 'Modifiers containing thiol groups (-SH) on short aliphatic chains tend to result in high yields, while those with thiol groups attached directly to aromatic rings tend to result in low yields.',
            'patterns': [thiol_group],
            'additional_logic': 'Check if thiol is attached to aliphatic chain (High Yield) or to aromatic ring (Low Yield)',
            'prediction': '1 for aliphatic thiol, -1 for aromatic thiol'
        },
        {
            'number':5,
            'description': 'Modifiers with nitrogen heterocycles directly attached to carboxylic acid groups tend to result in high yields, while those where the heterocycle is further removed tend to result in low yields.',
            'patterns': nitrogen_heterocycle_with_carboxy, # High Yield
            'additional_logic': 'If nitrogen heterocycle directly attached to carboxylic acid, High Yield; if heterocycle further away, Low Yield',
            'prediction': '1 if directly attached, -1 if further removed'
        },
        {
            'number':6,
            'description': 'Modifiers that are amino acids with aromatic side chains containing electron-rich heterocycles (e.g., indole in tryptophan) tend to result in high yields, while those with simple aromatic side chains (e.g., phenyl in phenylalanine) tend to result in low yields.',
            'patterns': [
                carboxylic_acid,
                [primary_amine],
            ],
            'additional_logic': 'Check if side chain contains indole (High Yield) or phenyl ring (Low Yield)',
            'prediction': '1 for indole, -1 for phenyl'
        },
        {
            'number':7,
            'description': 'Low Yield: Modifiers with long aliphatic chains (carbon chain length ≥ 7) substituted with polar groups (e.g., amino, hydroxy)',
            'patterns': [
                [long_chain_with_polar],
            ],
            'prediction': -1
        },
        {
            'number':8,
            'description': 'Low Yield: Modifiers containing polyether chains (e.g., multiple ethoxy (-OCH₂CH₂-) units)',
            'patterns': [
                [polyether_chain],
            ],
            'prediction': -1
        },
        {
            'number':9,
            'description': 'Low Yield: Modifiers containing perfluoroalkyl chains',
            'patterns': [
                [perfluoroalkyl],
            ],
            'prediction': -1
        },
        {
            'number':10,
            'description': 'Modifiers containing aromatic rings substituted with electron-donating groups (e.g., hydroxyl (-OH), methoxy (-OCH₃)) connected via longer aliphatic chains (carbon chain length ≥ 4) to a carboxylic acid tend to result in high yields, while those with shorter chains (carbon chain length ≤ 3) tend to result in low yields.',
            'patterns': [
                carboxylic_acid,
                ['[c][OX2H]', '[c][OX2][CH3]'] # Hydroxyl or methoxy on aromatic ring
            ],
            'additional_logic': 'Check chain length between ring and carboxylic acid',
            'prediction': '1 for chain length ≥4, -1 for chain length ≤3'
        },
        {
            'number':11,
            'description': 'High Yield: Modifiers containing multiple hydroxyl groups attached directly to small aliphatic chains',
            'patterns': [
                [aliphatic_chain_with_multiple_OH],
            ],
            'prediction': 1
        }
    ]

    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(p) for p in group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        if mol.HasSubstructMatch(pat):
                            group_match = True
                            break
                    if not group_match:
                        match = False
                        break
                # Apply additional logic if any
                if match and 'additional_logic' in rule:
                    if rule['number'] == 1:
                        # Additional logic for Rule 1
                        # Check that the side chain is non-aromatic and of length ≤5 carbons
                        # Simplified approximation (actual implementation would require more detailed analysis)
                        carbon_count = sum(1 for atom in mol.GetAtoms() if atom.GetAtomicNum() == 6 and not atom.GetIsAromatic())
                        if carbon_count > 7:  # Exclude carboxylic acid carbon and alpha carbon
                            match = False
                    elif rule['number'] == 4:
                        # Rule 4: Determine if thiol is attached to aliphatic or aromatic carbon
                        thiol_matches = mol.GetSubstructMatches(Chem.MolFromSmarts(thiol_group))
                        if thiol_matches:
                            for match_idx in thiol_matches:
                                s_atom = mol.GetAtomWithIdx(match_idx[0])
                                # Get the carbon atom attached to the sulfur
                                neighbors = s_atom.GetNeighbors()
                                for atom in neighbors:
                                    if atom.GetAtomicNum() == 6:  # Carbon
                                        if atom.GetIsAromatic():
                                            match = True
                                            rule_prediction = -1
                                        else:
                                            match = True
                                            rule_prediction = 1
                                        break
                        else:
                            match = False
                    elif rule['number'] ==5:
                        # Rule 5: Check if nitrogen heterocycle is directly attached to carboxylic acid
                        direct_matches = False
                        for pattern in nitrogen_heterocycle_with_carboxy:
                            pat = Chem.MolFromSmarts(pattern)
                            if mol.HasSubstructMatch(pat):
                                direct_matches = True
                                break
                        if direct_matches:
                            rule_prediction = 1
                        elif mol.HasSubstructMatch(Chem.MolFromSmarts(nitrogen_heterocycle)):
                            rule_prediction = -1
                        else:
                            match = False
                    elif rule['number'] ==6:
                        # Rule 6: Check if side chain contains indole (High Yield) or phenyl ring (Low Yield)
                        if mol.HasSubstructMatch(Chem.MolFromSmarts(indole)):
                            rule_prediction = 1
                        elif mol.HasSubstructMatch(Chem.MolFromSmarts(benzene_ring)):
                            rule_prediction = -1
                        else:
                            match = False
                    elif rule['number'] ==10:
                        # Rule 10: Check chain length between ring and carboxylic acid
                        aromatic_hydroxyl_or_methoxy = [Chem.MolFromSmarts(pat) for pat in ['[c][OX2H]', '[c][OX2][CH3]']]
                        carboxylic_acid_carbons = mol.GetSubstructMatches(Chem.MolFromSmarts('[CX3](=O)[OX1H1]'))
                        found = False
                        for pat in aromatic_hydroxyl_or_methoxy:
                            matches = mol.GetSubstructMatches(pat)
                            if matches:
                                for match_idx in matches:
                                    o_idx = match_idx[1]  # oxygen index
                                    for c_match in carboxylic_acid_carbons:
                                        c_idx = c_match[0]
                                        path = Chem.rdmolops.GetShortestPath(mol, o_idx, c_idx)
                                        chain_length = len(path) - 2  # Exclude oxygen and carboxy carbon
                                        if chain_length >=4:
                                            rule_prediction = 1
                                            found = True
                                            break
                                        elif chain_length <=3:
                                            rule_prediction = -1
                                            found = True
                                            break
                                    if found:
                                        break
                        if not found:
                            match = False
                # Assign prediction
                if match:
                    if 'rule_prediction' in locals():
                        row.append(rule_prediction)
                        del rule_prediction
                    else:
                        row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                row.append(0)
        results.append(row)
    # Create DataFrame
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

1. **Modifiers that are aliphatic amino acids containing both amino (-NH₂) and carboxylic acid (-COOH) groups with unbranched, short side chains (carbon chain length ≤ 5) tend to result in high yields.**

   - *Rationale*: The presence of both amino and carboxyl groups facilitates chelation with the metal center, enhancing catalyst stability and reactivity. Unbranched, short side chains minimize steric hindrance, allowing better interaction with the catalyst.
   - *Examples*:
     - (2S)-2-aminobutanedioic acid (Aspartic acid) — **High Yield**
     - (2S)-2-aminopentanedioic acid (Glutamic acid) — **High Yield**
     - 5-aminopentanoic acid — **High Yield**

2. **Modifiers that are aromatic carboxylic acids substituted with electron-withdrawing groups (e.g., nitro (-NO₂), bromomethyl (-CH₂Br), formyl (-CHO)) at the para position tend to result in high yields.**

   - *Rationale*: Electron-withdrawing groups increase the acidity of the carboxylic acid, enhancing its ability to coordinate with the metal center and facilitate electron transfer during catalysis.
   - *Examples*:
     - 4-nitrobenzoic acid — **High Yield**
     - 4-(bromomethyl)benzoic acid — **High Yield**
     - 4-formylbenzoic acid — **Low Yield** (Exception due to possible side reactions with aldehyde group)

3. **Modifiers that are aromatic carboxylic acids substituted with electron-donating groups (e.g., methyl (-CH₃), hydroxy (-OH), methoxy (-OCH₃)) at the para position tend to result in low yields.**

   - *Rationale*: Electron-donating groups decrease the acidity of the carboxylic acid, reducing its effectiveness in coordinating with the metal center.
   - *Examples*:
     - 4-methylbenzoic acid — **Low Yield**
     - 3-(4-hydroxyphenyl)propanoic acid — **Low Yield**
     - 5-(4-hydroxyphenyl)pentanoic acid — **High Yield** (Exception due to longer aliphatic chain)

4. **Modifiers containing nitrogen heterocycles (e.g., pyridine, pyrazole) directly attached to carboxylic acid groups tend to result in high yields.**

   - *Rationale*: The lone pair on the nitrogen atom enhances coordination with the metal center, improving catalytic activity.
   - *Examples*:
     - Pyridine-3-carboxylic acid (Nicotinic acid) — **High Yield**
     - 1H-pyrazole-4-carboxylic acid — **High Yield**
     - Pyridine-4-carboxylic acid — **High Yield**

5. **Modifiers that are amino acids with aromatic side chains containing electron-rich heterocycles (e.g., indole ring in tryptophan) tend to result in high yields.**

   - *Rationale*: Electron-rich heterocycles provide additional coordination sites and facilitate electron transfer, enhancing catalytic performance.
   - *Example*:
     - (2R)-2-amino-3-(1H-indol-3-yl)propanoic acid (Tryptophan) — **High Yield**

6. **Modifiers that are amino acids with simple phenyl side chains (e.g., phenylalanine) tend to result in low yields.**

   - *Rationale*: Simple phenyl rings lack additional coordination sites and do not significantly contribute to catalyst interactions.
   - *Example*:
     - (2S)-2-amino-3-phenylpropanoic acid (Phenylalanine) — **Low Yield**

7. **Modifiers with long aliphatic chains (carbon chain length ≥ 7) without additional polar functional groups tend to result in high yields.**

   - *Rationale*: Long hydrophobic chains can enhance interactions with the catalyst surface without introducing steric hindrance from polar groups.
   - *Example*:
     - Octanoic acid — **High Yield**

8. **Modifiers with long aliphatic chains substituted with polar functional groups (e.g., amino (-NH₂), hydroxy (-OH)) tend to result in low yields.**

   - *Rationale*: Polar substituents on long chains increase steric hindrance and may interfere with optimal catalyst-modifier interactions.
   - *Examples*:
     - 7-aminoheptanoic acid — **Low Yield**
     - 8-aminooctanoic acid — **Low Yield**
     - 7-hydroxyheptanoic acid — **Low Yield**

9. **Modifiers containing thiol groups (-SH) on short aliphatic chains (carbon chain length ≤ 3) tend to result in high yields, while thiol groups attached directly to aromatic rings tend to result in low yields.**

   - *Rationale*: Aliphatic thiols can form favorable interactions with the metal center without excessive steric hindrance. Aromatic thiols may bind too strongly or interfere with catalytic sites.
   - *Examples*:
     - 3-sulfanylpropanoic acid — **High Yield**
     - 4-sulfanylbenzoic acid — **Low Yield**

10. **Modifiers containing perfluorinated alkyl chains tend to result in low yields.**

    - *Rationale*: Perfluorinated chains are highly electron-withdrawing and hydrophobic, which can destabilize catalyst-modifier interactions and reduce solubility in the reaction medium.
    - *Example*:
      - 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid — **Low Yield**

11. **Modifiers containing multiple hydroxyl groups on small aliphatic chains tend to result in high yields.**

    - *Rationale*: Multiple hydroxyl groups enhance hydrogen bonding and coordination with the catalyst, improving performance and stability.
    - *Example*:
      - (2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid (Gluconic acid) — **High Yield**

12. **Modifiers containing aldehyde (-CHO) or ketone (>C=O) groups directly attached to aromatic rings tend to result in low yields.**

    - *Rationale*: These carbonyl groups may engage in side reactions or inhibit catalyst activity by forming strong complexes with the metal center, blocking active sites.
    - *Examples*:
      - 4-formylbenzoic acid — **Low Yield**
      - 5-formyl-2-hydroxybenzoic acid — **Low Yield**
      - 4-oxoheptanedioic acid — **Low Yield**

13. **Modifiers containing polyether chains (e.g., multiple ethoxy (-OCH₂CH₂-) units) tend to result in low yields.**

    - *Rationale*: Highly polar polyether chains increase solvation and mobility, reducing effective concentration at the catalyst surface and hindering catalyst-modifier interactions.
    - *Example*:
      - 2-[2-(2-methoxyethoxy)ethoxy]acetic acid — **Low Yield**

14. **Modifiers that are acylated amino acids (e.g., acetamido derivatives) tend to result in low yields.**

    - *Rationale*: Acylation of the amino group reduces its availability for coordination with the metal center, diminishing catalytic efficacy.
    - *Example*:
      - (2S)-6-acetamido-2-aminohexanoic acid — **Low Yield**

15. **Modifiers containing methylsulfanyl (-S-CH₃) groups in the side chain of amino acids tend to result in low yields.**

    - *Rationale*: Methylsulfanyl groups may interfere with catalyst interactions due to steric hindrance or unfavorable electronic effects.
    - *Example*:
      - 2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid — **Low Yield**

**End of Rules**

---

**Explanation and Considerations:**

- **Combination of Substructures**: The rules focus on how different functional groups and structural features combine to influence the yield. For instance, the combination of amino and carboxyl groups in amino acids (Rule 1), or the effect of electron-withdrawing/donating groups on aromatic carboxylic acids (Rules 2 and 3).

- **Physicochemical Properties**: The underlying principles involve electronic effects (e.g., electron-withdrawing/donating groups affecting acidity and coordination ability), steric factors (e.g., chain length and branching affecting steric hindrance), and coordination chemistry (e.g., ability of heteroatoms to interact with the metal center).

- **Predictive Clarity**: Each rule specifies whether modifiers fitting the description tend to result in high or low yields, providing clear guidelines for prediction.

- **Coverage and Balance**: The rules cover a broad range of modifiers from the dataset, including amino acids, aromatic compounds, aliphatic acids, and compounds with various functional groups. There is a balance between broader rules with higher coverage (e.g., Rules 1, 2, 3) and more specific rules that capture nuanced effects (e.g., Rules 9, 15).

- **Simplification and Refinement**: Overlapping and less predictive rules were consolidated or refined to improve their clarity and applicability. For example, Rules 2 and 3 distinguish between electron-withdrawing and electron-donating substituents on aromatic rings, providing a clear guideline based on substituent effects.

- **Exceptions and Special Cases**: Some compounds may not fit perfectly into the rules due to specific structural features or interactions (e.g., 4-formylbenzoic acid in Rule 2). These exceptions highlight the importance of considering the full molecular context when applying the rules.

---

By applying these rules, researchers can predict whether a given molecular modifier is likely to result in a high or low yield in the radical-mediated remote δ-C(sp³)–H bond functionalization reaction. This can guide the selection or design of modifiers to optimize reaction outcomes, enhancing efficiency in catalyst development.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,1,1,-1,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,-1,0,0,0,0,0,0,0,0,-1,0,0,0
0,1,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0
1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.7714285714285715; Test Accuracy: 0.0
    Train Support: 0.06938775510204082; Test Support: 0.0
    Train Confidence: 0.8333333333333333; Test Confidence: 0.5
    Train Lift: 1.6966230936819169; Test Lift: NONE
    Train Leverage: 0.026705539358600584; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define the rules with their associated SMARTS patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'High yield: Aliphatic amino acids with amino and carboxylic acid groups, unbranched side chains (≤5 carbons).',
            'patterns': [
                ['[NX3;H2]'],  # Amino group (-NH2)
                ['[CX3](=O)[OX2H1]']  # Carboxylic acid group (-COOH)
            ],
            'exclude_patterns': [
                ['[a]']  # Exclude aromatic rings
            ],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'High yield: Aromatic carboxylic acids substituted with electron-withdrawing groups attached to aromatic ring.',
            'patterns': [
                ['[c][CX3](=O)[OX2H1]'],  # Aromatic carboxylic acid
                ['[c][NX3+](=O)[O-]', '[c][CH2Br]', '[c][CX3H](=O)']  # EWG attached to aromatic ring
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Low yield: Aromatic carboxylic acids substituted with electron-donating groups attached to aromatic ring.',
            'patterns': [
                ['[c][CX3](=O)[OX2H1]'],  # Aromatic carboxylic acid
                ['[c][CH3]', '[c][OX2H]', '[c][OX2][CH3]']  # EDG attached to aromatic ring
            ],
            'prediction': -1
        },
        {
            'number': 4,
            'description': 'High yield: Modifiers containing nitrogen heterocycles directly attached to carboxylic acid groups.',
            'patterns': [
                ['[n]'],  # Nitrogen heterocycle
                ['[CX3](=O)[OX2H1]']  # Carboxylic acid group
            ],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'High yield: Amino acids with aromatic side chains containing electron-rich heterocycles (e.g., indole ring).',
            'patterns': [
                ['[NX3;H2]'],  # Amino group
                ['[CX3](=O)[OX2H1]'],  # Carboxylic acid group
                ['c1cc2ccccc2[nH]1']  # Indole ring
            ],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Low yield: Amino acids with simple phenyl side chains (e.g., phenylalanine).',
            'patterns': [
                ['[NX3;H2]'],  # Amino group
                ['[CX3](=O)[OX2H1]'],  # Carboxylic acid group
                ['c1ccccc1']  # Phenyl ring
            ],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'High yield: Modifiers with long aliphatic chains (carbon chain length ≥7) without polar functional groups.',
            'patterns': [
                ['[CH2][CH2][CH2][CH2][CH2][CH2][CH2,CH3]']  # Long aliphatic chain
            ],
            'exclude_patterns': [
                ['[O,N,S]']  # Exclude polar functional groups
            ],
            'prediction': 1
        },
        {
            'number': 8,
            'description': 'Low yield: Modifiers with long aliphatic chains substituted with polar functional groups.',
            'patterns': [
                ['[CH2][CH2][CH2][CH2][CH2][CH2][CH2,CH3]'],  # Long aliphatic chain
                ['[O,N,S]']  # Polar functional groups
            ],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'High yield: Modifiers containing thiol groups (-SH) on short aliphatic chains (chain length ≤3). Low yield when thiol group is attached directly to aromatic rings.',
            'patterns': [
                ['[SX2H][CH2][CH2][CH2]']  # Thiol on short aliphatic chain
            ],
            'prediction': 1
        },
        {
            'number': 10,
            'description': 'Low yield: Modifiers containing perfluorinated alkyl chains.',
            'patterns': [
                ['[CX4](F)(F)(F)']  # Perfluoroalkyl group
            ],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'High yield: Modifiers containing multiple hydroxyl groups on small aliphatic chains.',
            'patterns': [
                ['[C][OX2H]']  # Hydroxyl group on carbon
            ],
            'count_threshold': {'[C][OX2H]': 2},  # At least 2 hydroxyl groups
            'prediction': 1
        },
        {
            'number': 12,
            'description': 'Low yield: Modifiers containing aldehyde (-CHO) or ketone (>C=O) groups directly attached to aromatic rings.',
            'patterns': [
                ['[c][CX3H](=O)', '[c][CX3](=O)[C]']  # Aldehyde or ketone attached to aromatic ring
            ],
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Low yield: Modifiers containing polyether chains (multiple ether linkages).',
            'patterns': [
                ['[OX2][CH2][CH2][OX2][CH2][CH2]']  # Polyether chain
            ],
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'Low yield: Acylated amino acids.',
            'patterns': [
                ['[NX3][CX3](=O)[C]'],  # Acylated amino group
                ['[CX3](=O)[OX2H1]']  # Carboxylic acid group
            ],
            'prediction': -1
        },
        {
            'number': 15,
            'description': 'Low yield: Amino acids with methylsulfanyl (-S-CH3) groups in side chain.',
            'patterns': [
                ['[NX3;H2]'],  # Amino group
                ['[CX3](=O)[OX2H1]'],  # Carboxylic acid group
                ['[SX2][CH3]']  # Methylsulfanyl group
            ],
            'prediction': -1
        }
    ]
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(p) for p in group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for group in rule['exclude_patterns']:
                compiled_group = [Chem.MolFromSmarts(p) for p in group]
                compiled_excludes.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_excludes
    # Initialize results list
    results = []
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        matches = mol.GetSubstructMatches(pat)
                        if matches:
                            # If a count threshold is specified for this pattern
                            if 'count_threshold' in rule and pat.GetSmarts() in rule['count_threshold']:
                                threshold = rule['count_threshold'][pat.GetSmarts()]
                                if len(matches) >= threshold:
                                    group_match = True
                                    break
                            else:
                                group_match = True
                                break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

1. **Modifiers that are α-amino acids with short acidic side chains (2-3 carbons) containing two carboxylic acid groups tend to result in high yields.**

   - **Rationale**: The presence of both amino and multiple carboxylic acid groups allows for effective chelation with the metal center, enhancing catalytic activity.

   - **Examples**:
     - (2S)-2-aminobutanedioic acid (Aspartic acid) — **High Yield**
     - (2S)-2-aminopentanedioic acid (Glutamic acid) — **High Yield**

   - **Counterexample**:
     - (2S)-2-amino-3-phenylpropanoic acid (Phenylalanine) — **Low Yield** (Hydrophobic side chain lacks additional acid groups for effective coordination)

2. **Modifiers that are aromatic carboxylic acids substituted at the para position with electron-withdrawing groups (e.g., nitro (-NO₂), bromomethyl (-CH₂Br)) tend to result in high yields.**

   - **Rationale**: Electron-withdrawing groups increase the acidity of the carboxylic acid and enhance coordination with the metal center, facilitating electron transfer.

   - **Examples**:
     - 4-nitrobenzoic acid — **High Yield**
     - 4-(bromomethyl)benzoic acid — **High Yield**

   - **Counterexamples**:
     - 4-methylbenzoic acid — **Low Yield** (Methyl group is electron-donating)
     - 4-formylbenzoic acid — **Low Yield** (Aldehyde group may interfere with coordination)

3. **Modifiers that are aromatic carboxylic acids substituted at the para position with electron-donating groups (e.g., methyl (-CH₃), methoxy (-OCH₃)) tend to result in low yields.**

   - **Rationale**: Electron-donating groups decrease the acidity of the carboxylic acid, reducing its ability to coordinate effectively with the metal center.

   - **Examples**:
     - 4-methylbenzoic acid — **Low Yield**
     - 3-(4-hydroxyphenyl)propanoic acid — **Low Yield**

4. **Modifiers that are aromatic carboxylic acids with aldehyde (-CHO) groups directly attached to the ring tend to result in low yields.**

   - **Rationale**: Aldehyde groups can form strong complexes with the metal center or participate in side reactions, inhibiting catalysis.

   - **Examples**:
     - 4-formylbenzoic acid — **Low Yield**
     - 5-formyl-2-hydroxybenzoic acid — **Low Yield**

   - **Counterexample**:
     - 4-aminobenzoic acid — **High Yield** (Amino group enhances coordination without deactivating the catalyst)

5. **Modifiers that are nitrogen-containing heteroaromatic carboxylic acids with the nitrogen positioned to coordinate with the metal tend to result in high yields.**

   - **Rationale**: Nitrogen atoms in heterocycles act as additional coordination sites, enhancing catalyst stability through chelation.

   - **Examples**:
     - Pyridine-3-carboxylic acid (Nicotinic acid) — **High Yield**
     - 1H-pyrazole-4-carboxylic acid — **High Yield**

   - **Counterexample**:
     - 4-pyridin-4-ylbenzoic acid — **Low Yield** (Possible steric hindrance or less effective nitrogen positioning)

6. **Modifiers that are short-chain (C3–C5) aliphatic carboxylic acids with amino (-NH₂) or thiol (-SH) groups tend to result in high yields.**

   - **Rationale**: Amino and thiol groups enhance coordination with the metal center, while short chains minimize steric hindrance.

   - **Examples**:
     - 5-aminopentanoic acid — **High Yield**
     - 3-sulfanylpropanoic acid — **High Yield**

   - **Counterexamples**:
     - 7-aminoheptanoic acid — **Low Yield** (Longer chain increases steric hindrance)
     - 8-aminooctanoic acid — **Low Yield**

7. **Modifiers that are long-chain (≥ C8) aliphatic carboxylic acids without polar substituents tend to result in high yields.**

   - **Rationale**: Long hydrophobic chains can interact favorably with the catalyst surface, enhancing substrate accessibility and catalytic efficiency.

   - **Example**:
     - Octanoic acid — **High Yield**

   - **Counterexamples**:
     - 7-hydroxyheptanoic acid — **Low Yield** (Polar hydroxyl group may introduce unfavorable interactions)
     - 8-aminooctanoic acid — **Low Yield**

8. **Modifiers containing flexible polyether chains (e.g., multiple ethoxy units) tend to result in low yields due to steric hindrance and solvation effects.**

   - **Rationale**: Polyether chains may reduce effective coordination by occupying space around the metal center and altering solubility.

   - **Example**:
     - 2-[2-(2-methoxyethoxy)ethoxy]acetic acid — **Low Yield**

9. **Modifiers with perfluorinated alkyl chains tend to result in low yields due to strong electron-withdrawing effects and poor metal coordination.**

   - **Rationale**: Highly electronegative fluorine atoms reduce the electron density available for bonding with the metal center and may decrease solubility in the reaction medium.

   - **Example**:
     - 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid — **Low Yield**

10. **Modifiers that are amino acids with hydrophobic aromatic side chains lacking additional coordinating groups tend to result in low yields.**

    - **Rationale**: Hydrophobic side chains without functional groups that can coordinate with the metal center provide minimal enhancement to catalytic activity.

    - **Example**:
      - (2S)-2-amino-3-phenylpropanoic acid (Phenylalanine) — **Low Yield**

    - **Counterexample**:
      - (2R)-2-amino-3-(1H-indol-3-yl)propanoic acid (Tryptophan) — **High Yield** (Indole nitrogen may participate in coordination)

11. **Modifiers containing multiple hydroxyl groups (polyols) on aliphatic chains tend to result in high yields.**

    - **Rationale**: Hydroxyl groups can form hydrogen bonds and coordinate with the metal center, enhancing catalyst performance.

    - **Example**:
      - (2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid (Gluconic acid) — **High Yield**

12. **Modifiers that are N-acylated amino acids tend to result in low yields due to reduced availability of amino groups for coordination.**

    - **Rationale**: Acylation of the amino group diminishes its ability to coordinate with the metal center, decreasing catalytic efficiency.

    - **Example**:
      - (2S)-6-acetamido-2-aminohexanoic acid — **Low Yield**

13. **Modifiers with thiol groups attached to aromatic rings tend to result in low yields due to potential interference with catalyst coordination.**

    - **Rationale**: Aromatic thiol groups may form strong interactions that disrupt optimal catalyst geometry or deactivate the metal center.

    - **Example**:
      - 4-sulfanylbenzoic acid — **Low Yield**

    - **Counterexample**:
      - 3-sulfanylpropanoic acid — **High Yield** (Thiol on aliphatic chain enhances coordination without significant steric hindrance)

14. **Modifiers containing electron-rich aromatic rings with methoxy (-OCH₃) groups connected via aliphatic chains tend to result in high yields.**

    - **Rationale**: Methoxy groups increase electron density and can enhance π-interactions with the metal center, improving catalytic activity.

    - **Example**:
      - 4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid — **High Yield**

15. **Modifiers with aldehyde or ketone groups on aliphatic chains tend to result in low yields due to potential side reactions or strong metal coordination that hinders catalysis.**

    - **Rationale**: Carbonyl groups may form undesired complexes with the metal center or participate in side reactions, reducing catalyst effectiveness.

    - **Examples**:
      - 4-oxoheptanedioic acid — **Low Yield**
      - 4-[(2,2,2-trifluoroacetyl)amino]butanoic acid — **Low Yield**

**End of Rules**

---

**Explanation and Considerations:**

- **Combination of Functional Groups**: Each rule identifies specific combinations of substructures (e.g., amino acids with acidic side chains, aromatic rings with electron-withdrawing substituents) that influence the yield. This approach aligns with the requirement to combine multiple functional groups to capture their synergistic effects on catalytic activity.

- **Physicochemical Properties**: The rules consider electronic effects (electron-withdrawing/donating groups), steric factors (chain length, branching), coordination chemistry (availability of lone pairs for metal coordination), and solubility/hydrophobicity, which are crucial in determining the modifiers' impact on the reaction.

- **Predictive Clarity**: Each rule provides clear criteria that can predict whether a new modifier will result in a high or low yield based on its structural features, facilitating the rational design of new modifiers.

- **Coverage and Balance**: The rules cover a broad spectrum of the dataset, addressing modifiers with varying chain lengths, functional groups, and ring systems. They balance between simple rules that apply to many compounds and more nuanced rules that explain specific cases, fulfilling the requirement for balance.

- **Improvement Over Previous Rules**: The current set refines and consolidates previous rules for better clarity and effectiveness. Redundant or less impactful rules have been merged or eliminated, ensuring that each rule adds significant predictive value.

- **Abandoned or Merged Rules**:

  - Rules that were overly specific or had significant overlap with others were merged for conciseness (e.g., previous rules about modifiers with hydroxyl groups directly attached to aromatic rings and those with aldehyde groups on aliphatic chains have been streamlined).

  - Certain rules deemed less predictive or too narrow in scope were omitted to focus on the most impactful structural features influencing the yield.

- **Use of Counterexamples**: Including counterexamples helps delineate the boundaries of each rule, highlighting exceptions and reinforcing the rule's applicability.

---

By applying these rules, researchers can predict the potential effectiveness of molecular modifiers in enhancing the yield of the radical-mediated remote δ-C(sp³)–H bond functionalization reaction. This systematic approach aids in selecting or designing modifiers with desirable properties, optimizing catalyst performance, and advancing the development of efficient catalytic systems.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5
0,0,0,0,0
1,0,0,0,0
0,0,0,0,0
1,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
1,0,0,0,0
0,0,0,0,0
1,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,-1,0
0,0,0,-1,0
0,1,0,0,0
0,0,0,0,0
0,0,-1,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
1,0,0,0,0
0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.5714285714285714; Test Accuracy: 0.0
    Train Support: 0.05714285714285714; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 2.0588235294117645; Test Lift: NONE
    Train Leverage: 0.02938775510204081; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Import necessary RDKit modules
    from rdkit import Chem
    from rdkit.Chem import AllChem

    # Define SMARTS patterns for functional groups
    
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    
    # Primary amine group (-NH2)
    primary_amine = '[NX3H2]'
    
    # Secondary amine group (-NH-)
    secondary_amine = '[NX3H1][#6]'
    
    # Alpha amino acid pattern: amino group attached to alpha carbon next to carboxylic acid
    alpha_amino_acid = '[NX3H2][CX4H][CX3](=O)[OX2H1]'
    
    # Side chain carboxylic acid group 2-3 carbons away
    side_chain_carboxylic_acid_2C = '[CX4][CX4][CX3](=O)[OX2H1]'
    side_chain_carboxylic_acid_3C = '[CX4][CX4][CX4][CX3](=O)[OX2H1]'
    
    # Aromatic carboxylic acid
    aromatic_carboxylic_acid = '[c][CX3](=O)[OX2H1]'
    
    # Electron-withdrawing groups (EWGs) on aromatic ring
    nitro_group_on_aromatic = '[c][NX3](=O)[OX1-]'
    halogen_on_aromatic = '[c][F,Cl,Br,I]'
    bromomethyl_on_aromatic = '[c][CH2Br]'

    # Electron-donating groups (EDGs) on aromatic ring
    methyl_on_aromatic = '[c][CH3]'
    methoxy_on_aromatic = '[c][OX2][CH3]'

    # Aldehyde group attached to aromatic ring
    aldehyde_on_aromatic = '[c][CX3H](=O)'
    
    # Nitrogen-containing heteroaromatic carboxylic acid
    pyridine_carboxylic_acid = '[n][c][c][c][c][c][CX3](=O)[OX2H1]'
    
    # Short-chain (C3–C5) aliphatic carboxylic acids with amino (-NH2) or thiol (-SH) groups
    short_chain_amino = '[CX3](=O)[OX2H1][CX4][CX4][NX3H2]'
    short_chain_thiol = '[CX3](=O)[OX2H1][CX4][CX4][SX2H]'
    
    # Long-chain (≥ C8) aliphatic carboxylic acids without polar substituents
    long_chain_carboxylic_acid = '[CX3](=O)[OX2H1][CX4][CX4][CX4][CX4][CX4][CX4][CX4]'
    
    # Polyether chains (multiple ethoxy units)
    polyether_chain = '([#6][OX2][#6][OX2])+'
    
    # Perfluorinated alkyl chains
    perfluoroalkyl_chain = '[CX4](F)(F)(F)[CX4](F)(F)F'
    
    # Modifiers with multiple hydroxyl groups (polyols) on aliphatic chains
    polyol = '[CX4][OX2H][CX4][OX2H][CX4][OX2H]'
    
    # N-acylated amino acids (amide group)
    n_acylated_amino_acid = '[NX3][CX3](=O)[CX4][NX3][CX3](=O)[OX2H1]'
    
    # Thiol group attached to aromatic ring
    thiol_on_aromatic = '[c][SX2H]'
    
    # Methoxy groups connected via aliphatic chains
    methoxy_aliphatic = '[OX2][CX4][CX4][c][OX2][CX3]'
    
    # Aldehyde or ketone groups on aliphatic chains
    aliphatic_aldehyde = '[CX3](=O)[CX4]'
    aliphatic_ketone = '[#6][CX3](=O)[#6]'
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are α-amino acids with short acidic side chains (2-3 carbons) containing two carboxylic acid groups tend to result in high yields.',
            'patterns': [
                alpha_amino_acid,
                [side_chain_carboxylic_acid_2C, side_chain_carboxylic_acid_3C]
            ],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers that are aromatic carboxylic acids substituted at the para position with electron-withdrawing groups (e.g., nitro (-NO2), bromomethyl (-CH2Br)) tend to result in high yields.',
            'patterns': [
                aromatic_carboxylic_acid,
                [nitro_group_on_aromatic, bromomethyl_on_aromatic, halogen_on_aromatic]
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers that are aromatic carboxylic acids substituted at the para position with electron-donating groups (e.g., methyl (-CH3), methoxy (-OCH3)) tend to result in low yields.',
            'patterns': [
                aromatic_carboxylic_acid,
                [methyl_on_aromatic, methoxy_on_aromatic]
            ],
            'prediction': -1
        },
        {
            'number': 4,
            'description': 'Modifiers that are aromatic carboxylic acids with aldehyde (-CHO) groups directly attached to the ring tend to result in low yields.',
            'patterns': [
                aromatic_carboxylic_acid,
                aldehyde_on_aromatic
            ],
            'prediction': -1
        },
        {
            'number': 5,
            'description': 'Modifiers that are nitrogen-containing heteroaromatic carboxylic acids with the nitrogen positioned to coordinate with the metal tend to result in high yields.',
            'patterns': [
                pyridine_carboxylic_acid
            ],
            'prediction': 1
        },
        # Additional rules can be added here following the same structure
    ]
    
    # Compile the SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for patt in rule['patterns']:
            if isinstance(patt, list):
                compiled_group = [Chem.MolFromSmarts(p) for p in patt]
                compiled_patterns.append(compiled_group)
            else:
                compiled_patterns.append([Chem.MolFromSmarts(patt)])
        rule['compiled_patterns'] = compiled_patterns
    
    # Initialize the results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check each pattern in the rule
                for group in rule['compiled_patterns']:
                    group_match = False
                    for pat in group:
                        if mol.HasSubstructMatch(pat):
                            group_match = True
                            break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                # print(f"Error processing rule {rule['number']} for SMILES {smi}: {e}")
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df
--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

1. **Modifiers that are α-amino acids with acidic side chains containing additional carboxylic acid groups tend to result in high yields.**

   - **Rationale**: The presence of extra carboxylic acid groups enhances chelation with the metal center, improving catalytic activity through stable coordination.

   - **Examples**:
     - (2S)-2-aminobutanedioic acid (Aspartic acid) — **High Yield**
     - (2S)-2-aminopentanedioic acid (Glutamic acid) — **High Yield**

   - **Counterexample**:
     - (2S)-2-amino-3-phenylpropanoic acid (Phenylalanine) — **Low Yield** (Lacks additional carboxyl group for effective chelation)

2. **Modifiers that are aromatic carboxylic acids substituted at the para position with strong electron-withdrawing groups (e.g., nitro (-NO₂), bromomethyl (-CH₂Br)) tend to result in high yields.**

   - **Rationale**: Electron-withdrawing groups increase the acidity of the carboxylic acid, enhancing its ability to coordinate with the metal center and facilitate electron transfer during catalysis.

   - **Examples**:
     - 4-nitrobenzoic acid — **High Yield**
     - 4-(bromomethyl)benzoic acid — **High Yield**

   - **Counterexamples**:
     - 4-methylbenzoic acid — **Low Yield** (Methyl group is electron-donating)
     - 4-formylbenzoic acid — **Low Yield** (Aldehyde may interfere with coordination)

3. **Modifiers that are aliphatic carboxylic acids with amino (-NH₂) or thiol (-SH) groups located on short (C3–C5) chains tend to result in high yields, while the same groups on longer chains (≥ C7) tend to result in low yields.**

   - **Rationale**: Short chains allow effective coordination without significant steric hindrance, enhancing catalyst interaction. Longer chains increase steric hindrance, reducing coordination efficiency.

   - **Examples (High Yield)**:
     - 5-aminopentanoic acid — **High Yield**
     - 3-sulfanylpropanoic acid — **High Yield**

   - **Counterexamples (Low Yield)**:
     - 7-aminoheptanoic acid — **Low Yield**
     - 8-aminooctanoic acid — **Low Yield**

4. **Modifiers that are nitrogen-containing heteroaromatic carboxylic acids, particularly pyridine derivatives with the nitrogen atom adjacent or ortho to the carboxyl group, tend to result in high yields.**

   - **Rationale**: Nitrogen atoms positioned near the carboxyl group can serve as additional coordination sites, forming stable chelate rings with the metal center and enhancing catalytic stability.

   - **Examples**:
     - Pyridine-3-carboxylic acid (Nicotinic acid) — **High Yield**
     - 2-oxo-1H-pyridine-4-carboxylic acid — **High Yield**

   - **Counterexample**:
     - 4-pyridin-4-ylbenzoic acid — **Low Yield** (Nitrogen is further from the carboxyl group, reducing chelation efficiency)

5. **Modifiers that are aromatic carboxylic acids substituted at the para position with electron-donating groups (e.g., methyl (-CH₃), methoxy (-OCH₃), hydroxy (-OH)) tend to result in low yields.**

   - **Rationale**: Electron-donating groups decrease the acidity of the carboxylic acid, reducing its ability to effectively coordinate with the metal center.

   - **Examples**:
     - 4-methylbenzoic acid — **Low Yield**
     - 3-(4-hydroxyphenyl)propanoic acid — **Low Yield**

6. **Modifiers containing multiple hydroxyl groups (polyols) on aliphatic chains tend to result in high yields due to enhanced coordination and hydrogen bonding.**

   - **Rationale**: Multiple hydroxyl groups can form hydrogen bonds and coordinate with the metal center, improving catalyst interaction and stability.

   - **Example**:
     - (2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid (Gluconic acid) — **High Yield**

7. **Modifiers with aldehyde (-CHO) groups attached to aromatic rings tend to result in low yields due to potential side reactions and strong metal binding that interferes with catalysis.**

   - **Rationale**: Aldehyde groups can form strong complexes with the metal center or participate in side reactions, inhibiting the catalytic cycle.

   - **Examples**:
     - 4-formylbenzoic acid — **Low Yield**
     - 5-formyl-2-hydroxybenzoic acid — **Low Yield**

8. **Modifiers with perfluorinated alkyl chains tend to result in low yields due to strong electron-withdrawing effects and poor coordination ability.**

   - **Rationale**: Highly electronegative fluorine atoms reduce electron density, hindering coordination with the metal center and potentially affecting solubility.

   - **Example**:
     - 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid — **Low Yield**

9. **Modifiers that are amino acids with aromatic side chains containing heteroatoms capable of coordination, such as indole nitrogen, tend to result in high yields.**

   - **Rationale**: Heteroatoms in aromatic side chains can participate in additional coordination with the metal center, enhancing catalyst stability.

   - **Example**:
     - (2R)-2-amino-3-(1H-indol-3-yl)propanoic acid (Tryptophan) — **High Yield**

   - **Counterexample**:
     - (2S)-2-amino-3-phenylpropanoic acid (Phenylalanine) — **Low Yield** (Lacks coordinating heteroatoms in the side chain)

10. **Modifiers that are aromatic carboxylic acids with thiol (-SH) groups attached to the aromatic ring tend to result in low yields, while those with thiol groups on aliphatic chains result in high yields.**

    - **Rationale**: Thiol groups on aromatic rings may bind too strongly or interfere with the catalyst, whereas thiol groups on aliphatic chains provide additional coordination without significant steric hindrance.

    - **Examples**:
      - 3-sulfanylpropanoic acid — **High Yield**
      - 4-sulfanylbenzoic acid — **Low Yield**

11. **Modifiers with long aliphatic chains (≥ C7) without polar substituents tend to result in variable yields depending on chain length and steric factors.**

    - **Rationale**: Long hydrophobic chains may enhance interactions with the catalyst surface but can also introduce steric hindrance, affecting catalytic efficiency.

    - **Examples**:
      - Octanoic acid — **High Yield** (Optimal chain length without polar groups)
      - 7-hydroxyheptanoic acid — **Low Yield** (Polar hydroxyl group may disrupt hydrophobic interactions)

12. **Modifiers containing flexible polyether chains (e.g., multiple ethoxy (-OCH₂CH₂-) units) tend to result in low yields due to steric hindrance and solvation effects.**

    - **Rationale**: Polyether chains can interfere with effective coordination by occupying space around the metal center and altering the local environment.

    - **Example**:
      - 2-[2-(2-methoxyethoxy)ethoxy]acetic acid — **Low Yield**

13. **Modifiers that are N-acylated amino acids tend to result in low yields due to reduced coordination ability of the amino group.**

    - **Rationale**: Acylation blocks the amino group, preventing it from coordinating with the metal center and diminishing catalytic enhancement.

    - **Example**:
      - (2S)-6-acetamido-2-aminohexanoic acid — **Low Yield**

14. **Modifiers with methoxy (-OCH₃) substituted aromatic rings connected via short aliphatic chains to carboxylic acid groups tend to result in high yields.**

    - **Rationale**: Methoxy groups increase electron density and can facilitate π-π interactions or coordination with the metal center, enhancing catalyst performance.

    - **Example**:
      - 4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid — **High Yield**

15. **Modifiers with ketone (C=O) groups on aliphatic chains tend to result in low yields due to potential chelation that disrupts optimal catalyst geometry.**

    - **Rationale**: Ketone groups may coordinate with the metal center in a way that interferes with the active catalytic site.

    - **Example**:
      - 4-oxoheptanedioic acid — **Low Yield**

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1
0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.7714285714285715; Test Accuracy: 1.0
    Train Support: 0.04642857142857143; Test Support: 0.125
    Train Confidence: 0.8041666666666667; Test Confidence: 0.5625
    Train Lift: 1.636574074074074; Test Lift: NONE
    Train Leverage: 0.014693877551020407; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and substructures
    
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    
    # Amino group (-NH2)
    amino_group = '[NX3H2]'
    
    # Alpha-amino acid backbone
    alpha_amino_acid = '[NX3H2][CX4H]'
    
    # Additional carboxylic acid group in side chain
    additional_carboxylic_acid = '[CX3](=O)[OX2H1]'
    
    # Aromatic ring
    aromatic_ring = '[a]'
    
    # Electron-withdrawing groups on aromatic ring
    ewg_aromatic = '[c][$([NX3](=O)=O),$([F,Cl,Br,I])]'
    
    # Electron-donating groups on aromatic ring
    edg_aromatic = '[c][$([OX2H]),$([OX2][CH3]),$([CX4H3])]'
    
    # Thiol group (-SH)
    thiol_group = '[SX2H]'
    
    # Aliphatic chain of length C3-C5 with amino or thiol groups
    short_aliphatic_chain_with_amine_or_thiol = '[CH2][CH2][CH2][$([NX3H2]),$(S[H])]'  # For C3 chains
    
    # Long aliphatic chain (≥ C7) with amino or thiol groups
    long_aliphatic_chain_with_amine_or_thiol = '[CH2][CH2][CH2][CH2][CH2][CH2][CH2][$([NX3H2]),$(S[H])]'  # For C7 chains
    
    # Nitrogen-containing heteroaromatic carboxylic acids (e.g., pyridine derivatives)
    pyridine_carboxylic_acid = 'n1ccccc1C(=O)O'
    
    # Aldehyde group attached to aromatic ring
    aldehyde_on_aromatic = '[c][CX3H](=O)'
    
    # Polyols (multiple hydroxyl groups on aliphatic chains)
    polyol = '[CX4][$([OX2H]),$([OX2H][CX4][$([OX2H])])]'  # Simplified pattern
    
    # Perfluorinated alkyl chains
    perfluoro_alkyl_chain = '[CX4]([F])([F])[F]'
    
    # Amino acids with aromatic side chains containing heteroatoms (e.g., indole nitrogen)
    indole_containing_amino_acid = '[NX3H2][CX4H][CX3](=O)[OX2H1][#6][#6]c1c[cH]c2c1cccc2'  # Simplified tryptophan pattern
    
    # Thiol group attached to aromatic ring
    thiol_on_aromatic = '[c][SX2H]'
    
    # Long aliphatic chains (≥ C7) without polar substituents
    long_aliphatic_chain = '[CH2]' * 7  # Simplified pattern for chain of length 7
    
    # Flexible polyether chains (multiple ethoxy units)
    polyether_chain = '[OX2][CX4][CX4][OX2][CX4][CX4][OX2][CX4][CX3](=O)[OX2H1]'
    
    # N-acylated amino acids
    n_acylated_amino_acid = '[NX3][CX3](=O)[CX4][CX3](=O)[OX2H1]'
    
    # Methoxy substituted aromatic ring connected via short aliphatic chain to carboxylic acid
    methoxy_aromatic_with_short_chain = '[c][OX2][CH3][CX4][CX3](=O)[OX2H1]'
    
    # Ketone group on aliphatic chain
    ketone_on_aliphatic_chain = '[CX3](=O)[CH2][CH2][CX3](=O)[OX2H1]'
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are α-amino acids with acidic side chains containing additional carboxylic acid groups tend to result in high yields.',
            'patterns': [
                alpha_amino_acid,  # Alpha-amino acid backbone
            ],
            'extra_conditions': {
                'carboxylic_acid_count': 2  # At least two carboxylic acid groups
            },
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers that are aromatic carboxylic acids substituted at the para position with strong electron-withdrawing groups.',
            'patterns': [
                ewg_aromatic,
                carboxylic_acid
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers that are aliphatic carboxylic acids with amino (-NH2) or thiol (-SH) groups located on short (C3–C5) chains.',
            'patterns': [
                short_aliphatic_chain_with_amine_or_thiol,
                carboxylic_acid
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers that are nitrogen-containing heteroaromatic carboxylic acids, particularly pyridine derivatives with the nitrogen atom adjacent or ortho to the carboxyl group.',
            'patterns': [
                pyridine_carboxylic_acid
            ],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers that are aromatic carboxylic acids substituted at the para position with electron-donating groups.',
            'patterns': [
                edg_aromatic,
                carboxylic_acid
            ],
            'prediction': -1
        },
        {
            'number': 6,
            'description': 'Modifiers containing multiple hydroxyl groups (polyols) on aliphatic chains tend to result in high yields due to enhanced coordination and hydrogen bonding.',
            'patterns': [
                polyol,
                carboxylic_acid
            ],
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'Modifiers with aldehyde (-CHO) groups attached to aromatic rings tend to result in low yields.',
            'patterns': [
                aldehyde_on_aromatic,
                carboxylic_acid
            ],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Modifiers with perfluorinated alkyl chains tend to result in low yields due to strong electron-withdrawing effects and poor coordination ability.',
            'patterns': [
                perfluoro_alkyl_chain,
                carboxylic_acid
            ],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers that are amino acids with aromatic side chains containing heteroatoms capable of coordination, such as indole nitrogen, tend to result in high yields.',
            'patterns': [
                indole_containing_amino_acid
            ],
            'prediction': 1
        },
        {
            'number': 10,
            'description': 'Modifiers that are aromatic carboxylic acids with thiol (-SH) groups attached to the aromatic ring tend to result in low yields.',
            'patterns': [
                thiol_on_aromatic,
                carboxylic_acid
            ],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Modifiers with long aliphatic chains (≥ C7) without polar substituents tend to result in variable yields depending on chain length and steric factors.',
            'patterns': [
                long_aliphatic_chain,
                carboxylic_acid
            ],
            'prediction': 0  # Variable yield, assigning 0
        },
        {
            'number': 12,
            'description': 'Modifiers containing flexible polyether chains tend to result in low yields due to steric hindrance and solvation effects.',
            'patterns': [
                polyether_chain
            ],
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Modifiers that are N-acylated amino acids tend to result in low yields due to reduced coordination ability of the amino group.',
            'patterns': [
                n_acylated_amino_acid
            ],
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'Modifiers with methoxy (-OCH3) substituted aromatic rings connected via short aliphatic chains to carboxylic acid groups tend to result in high yields.',
            'patterns': [
                methoxy_aromatic_with_short_chain
            ],
            'prediction': 1
        },
        {
            'number': 15,
            'description': 'Modifiers with ketone (C=O) groups on aliphatic chains tend to result in low yields due to potential chelation that disrupts optimal catalyst geometry.',
            'patterns': [
                ketone_on_aliphatic_chain
            ],
            'prediction': -1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for smarts in rule.get('patterns', []):
            compiled_patterns.append(Chem.MolFromSmarts(smarts))
        rule['compiled_patterns'] = compiled_patterns
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check for extra conditions like counts
                if 'extra_conditions' in rule:
                    conditions_met = True
                    conditions = rule['extra_conditions']
                    for condition, value in conditions.items():
                        if condition == 'carboxylic_acid_count':
                            ca_pattern = Chem.MolFromSmarts(carboxylic_acid)
                            ca_matches = mol.GetSubstructMatches(ca_pattern)
                            if len(ca_matches) < value:
                                conditions_met = False
                                break
                    if not conditions_met:
                        match = False
                if not match:
                    row.append(0)
                    continue
                # Check required patterns
                for pat in rule['compiled_patterns']:
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f"Rule {rule['number']}" for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

1. **Modifiers containing multiple coordinating functional groups (e.g., carboxylic acid, amino, hydroxyl, thiol) in close proximity (within three bonds) tend to result in high yields due to enhanced chelation with the metal center.**

   - **Rationale**: Close proximity of multiple coordinating groups allows for chelate formation, stabilizing the metal complex and improving catalytic activity.

   - **Examples**:
     - *(2S)-2-aminobutanedioic acid* (Aspartic acid) — **High Yield**
     - *(2S)-2-aminopentanedioic acid* (Glutamic acid) — **High Yield**
     - *3-sulfanylpropanoic acid* — **High Yield**
     - *(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid* (Gluconic acid) — **High Yield**

   - **Counterexample**:
     - *8-aminooctanoic acid* — **Low Yield** (Functional groups are too distant to effectively chelate)

---

2. **Modifiers that are aromatic carboxylic acids with substituents capable of coordinating (e.g., amino, hydroxyl, nitro groups) at the para position tend to result in high yields due to additional coordination sites enhancing metal binding.**

   - **Rationale**: Electron-donating or coordinating groups at the para position can interact with the metal center, enhancing catalyst stability and reactivity.

   - **Examples**:
     - *4-aminobenzoic acid* — **High Yield**
     - *4-nitrobenzoic acid* — **High Yield**
     - *5-(4-hydroxyphenyl)pentanoic acid* — **High Yield**

   - **Counterexamples**:
     - *4-methylbenzoic acid* — **Low Yield** (Methyl group is non-coordinating)
     - *4-formylbenzoic acid* — **Low Yield** (Aldehyde group may interfere with coordination)

---

3. **Modifiers that are heteroaromatic carboxylic acids with a heteroatom adjacent to the carboxyl group tend to result in high yields due to chelation involving both the heteroatom and the carboxylate.**

   - **Rationale**: Heteroatoms like nitrogen can serve as additional coordination sites, forming stable chelate rings with the metal center.

   - **Examples**:
     - *Pyridine-3-carboxylic acid* (Nicotinic acid) — **High Yield**
     - *1H-pyrazole-4-carboxylic acid* — **High Yield**

   - **Counterexample**:
     - *4-pyridin-4-ylbenzoic acid* — **Low Yield** (Heteroatom is not adjacent to the carboxylate, reducing chelation ability)

---

4. **Modifiers with long aliphatic chains (more than six carbons) containing polar substituents (e.g., amino, hydroxyl groups) tend to result in low yields due to steric hindrance and reduced coordination efficiency.**

   - **Rationale**: Long chains with polar groups can introduce steric bulk and flexibility that hinder effective coordination with the metal center.

   - **Examples**:
     - *7-aminoheptanoic acid* — **Low Yield**
     - *8-aminooctanoic acid* — **Low Yield**
     - *7-hydroxyheptanoic acid* — **Low Yield**

   - **Counterexample**:
     - *Octanoic acid* — **High Yield** (Lacks polar substituents, minimizing steric hindrance)

---

5. **Modifiers that are α-amino acids with additional coordinating groups in the side chain (e.g., indole nitrogen in tryptophan) tend to result in high yields due to extra coordination enhancing metal binding, even if the side chain is bulky.**

   - **Rationale**: Side chains offering additional coordination sites can compensate for steric bulk and form strong interactions with the metal center.

   - **Example**:
     - *(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid* (Tryptophan) — **High Yield**

   - **Counterexample**:
     - *(2S)-2-amino-3-phenylpropanoic acid* (Phenylalanine) — **Low Yield** (Phenyl group lacks coordinating ability)

---

6. **Modifiers with electron-withdrawing groups (e.g., perfluoroalkyl groups) on the carboxylic acid tend to result in low yields due to decreased electron density on the carboxylate, reducing its ability to coordinate with the metal center.**

   - **Rationale**: Electron-withdrawing groups make the carboxylate less nucleophilic and less effective at binding the metal ion.

   - **Example**:
     - *2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid* — **Low Yield**

---

7. **Modifiers with multiple hydroxyl groups (polyols) on an aliphatic backbone adjacent to the carboxyl group tend to result in high yields due to increased hydrogen bonding and coordination with the metal center.**

   - **Rationale**: Multiple hydroxyl groups enhance solubility and offer additional coordination sites, stabilizing the metal complex.

   - **Example**:
     - *(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid* (Gluconic acid) — **High Yield**

---

8. **Modifiers with thiol groups on short aliphatic chains tend to result in high yields due to the strong coordinating ability of sulfur when in proximity to the carboxylate.**

   - **Rationale**: Thiol groups can form strong bonds with metal ions, especially when close to other coordinating groups, enhancing catalyst performance.

   - **Example**:
     - *3-sulfanylpropanoic acid* — **High Yield**

   - **Counterexample**:
     - *4-sulfanylbenzoic acid* — **Low Yield** (Thiol on an aromatic ring may experience reduced coordination due to resonance or steric factors)

---

9. **Modifiers that are N-acylated amino acids or have blocked primary amino groups tend to result in low yields due to the reduction of available coordination sites.**

   - **Rationale**: Acylation of amino groups prevents them from participating in coordination with the metal center, reducing catalyst effectiveness.

   - **Example**:
     - *(2S)-6-acetamido-2-aminohexanoic acid* — **Low Yield**

---

10. **Modifiers with bulky side chains or groups that increase steric hindrance near the coordinating sites tend to result in low yields due to difficulty in metal complex formation.**

    - **Rationale**: Bulky groups near coordination sites hinder the approach and binding of metal ions, decreasing catalytic activity.

    - **Examples**:
      - *4-pyridin-4-ylbenzoic acid* — **Low Yield** (Bulky pyridyl group may obstruct coordination)
      - *2-[2-(2-methoxyethoxy)ethoxy]acetic acid* — **Low Yield** (Bulky polyether chain introduces steric hindrance)

---

11. **Modifiers with aldehyde groups attached to the aromatic ring tend to result in low yields due to possible side reactions or interference with coordination.**

    - **Rationale**: Aldehyde groups can engage in side reactions or form inactive complexes with the metal ion, disrupting catalytic function.

    - **Examples**:
      - *4-formylbenzoic acid* — **Low Yield**
      - *5-formyl-2-hydroxybenzoic acid* — **Low Yield**

---

12. **Modifiers that are medium-chain aliphatic carboxylic acids (C6–C8) lacking additional polar substituents tend to result in high yields due to minimal steric hindrance and effective interaction with the metal center.**

    - **Rationale**: Optimal chain length allows for favorable hydrophobic interactions without introducing steric bulk or interfering functional groups.

    - **Example**:
      - *Octanoic acid* — **High Yield**

    - **Counterexample**:
      - *7-hydroxyheptanoic acid* — **Low Yield** (Hydroxyl group introduces polarity and potential steric effects)

---

13. **Modifiers containing electron-donating groups capable of forming additional coordination bonds (e.g., methoxy groups on an extended chain) tend to result in high yields due to enhanced interaction with the metal center.**

    - **Rationale**: Electron-donating groups increase electron density, facilitating stronger coordination with the metal ion.

    - **Example**:
      - *4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid* — **High Yield**

    - **Counterexample**:
      - *2-[2-(2-methoxyethoxy)ethoxy]acetic acid* — **Low Yield** (Despite methoxy groups, the bulky chain may hinder coordination)

---

14. **Modifiers with functional groups that can participate in resonance stabilization of the coordinating carboxylate group tend to result in high yields due to increased stability of the metal complex.**

    - **Rationale**: Resonance stabilization can delocalize charge and enhance the binding affinity of the coordinating groups.

    - **Example**:
      - *1,3-dioxo-2-benzofuran-5-carboxylic acid* — **High Yield**

---

15. **Modifiers with side chains that can engage in π-π stacking interactions may enhance yield by stabilizing the catalyst environment, provided they do not hinder coordination sites.**

    - **Rationale**: π-π interactions can stabilize the overall structure without interfering with metal binding.

    - **Example**:
      - *1H-pyrazole-4-carboxylic acid* — **High Yield**

    - **Counterexample**:
      - *(2S)-2-amino-3-phenylpropanoic acid* (Phenylalanine) — **Low Yield** (Phenyl group may create steric hindrance without providing additional coordination)

---

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5
1,0,0,-1,0
1,0,0,0,0
1,0,0,-1,0
1,0,0,0,0
1,0,0,0,0
1,0,0,-1,0
1,0,0,-1,0
1,0,0,0,0
1,0,0,-1,0
1,0,0,0,0
1,0,0,0,0
1,0,0,-1,0
1,0,0,-1,0
1,0,0,-1,0
1,0,0,-1,0
1,0,0,0,0
1,0,0,-1,1
1,0,0,0,0
1,0,0,-1,0
1,0,0,0,0
1,0,0,-1,0
1,0,0,-1,0
1,0,0,-1,0
1,0,0,0,0
1,0,0,-1,0
1,0,0,-1,0
1,0,0,-1,0
1,0,0,-1,0
1,0,0,-1,0
1,0,0,0,0
1,0,0,-1,0
1,0,0,-1,0
1,0,0,-1,0
1,0,0,-1,0
1,0,0,-1,0
1,0,0,-1,0

---------------------------------------------------------------


    Train Accuracy: 0.6857142857142857; Test Accuracy: 1.0
    Train Support: 0.42857142857142855; Test Support: 1.0
    Train Confidence: 0.625; Test Confidence: 1.0
    Train Lift: 1.2867647058823528; Test Lift: NONE
    Train Leverage: 0.09551020408163258; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    import pandas as pd
    from rdkit import Chem

    # Define SMARTS patterns for functional groups
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    carboxylate_anion = '[CX3](=O)[O-]'
    primary_amine = '[NX3;H2][#6]'
    secondary_amine = '[NX3;H1][#6][#6]'
    thiol = '[SX2H]'
    hydroxyl = '[OX2H]'
    coordinating_groups = [carboxylic_acid, carboxylate_anion, primary_amine, secondary_amine, thiol, hydroxyl]
    coordinating_patterns = [Chem.MolFromSmarts(s) for s in coordinating_groups]

    # Define patterns for other rules
    aromatic_carboxylic_acid = '[c][CX3](=O)[OX2H1]'
    para_substituted_aromatic = 'c1cc([a])ccc1[CX3](=O)[OX2H1]'
    amino_group = '[NX3;H2,H1,H0]'
    nitro_group = '[NX3](=O)=O'
    hydroxyl_on_aromatic = '[c][OX2H]'
    electron_withdrawing_groups = ['[CX3](=O)[OX2H1]', '[CX3]=[OX1]', '[NX3](=O)=O', '[F,Cl,Br,I]', '[CX4][F][F][F]']
    electron_donating_groups = ['[OX2H]', '[OX2][#6]', '[NX3;H2,H1][#6]']

    # Rules definition
    rules = []

    # Rule 1
    def rule1_function(mol):
        coordinating_atoms = set()
        for pat in coordinating_patterns:
            matches = mol.GetSubstructMatches(pat)
            for match in matches:
                coordinating_atoms.update(match)
        if len(coordinating_atoms) < 2:
            return False
        dm = Chem.GetDistanceMatrix(mol)
        coordinating_atoms = list(coordinating_atoms)
        for i in range(len(coordinating_atoms)):
            for j in range(i+1, len(coordinating_atoms)):
                dist = dm[coordinating_atoms[i], coordinating_atoms[j]]
                if dist <= 3:
                    return True
        return False
    rules.append({
        'number': 1,
        'description': 'High Yield: Modifiers containing multiple coordinating functional groups (e.g., carboxylic acid, amino, hydroxyl, thiol) in close proximity (within three bonds).',
        'function': rule1_function,
        'prediction': 1
    })

    # Rule 2
    def rule2_function(mol):
        pattern = Chem.MolFromSmarts('c1cc([NX3H2,NX3H1,NX3H0,OX2H,NX3(=O)[OX1-]])ccc1[CX3](=O)[OX2H1]')
        if mol.HasSubstructMatch(pattern):
            return True
        else:
            return False
    rules.append({
        'number': 2,
        'description': 'High Yield: Modifiers that are aromatic carboxylic acids with coordinating substituents at the para position.',
        'function': rule2_function,
        'prediction': 1
    })

    # Rule 3
    def rule3_function(mol):
        pattern = Chem.MolFromSmarts('[n,o,s][c][c][c][c][c][CX3](=O)[OX2H1]')
        if mol.HasSubstructMatch(pattern):
            return True
        else:
            return False
    rules.append({
        'number': 3,
        'description': 'High Yield: Modifiers that are heteroaromatic carboxylic acids with a heteroatom adjacent to the carboxyl group.',
        'function': rule3_function,
        'prediction': 1
    })

    # Rule 4
    def rule4_function(mol):
        polar_substituents = [Chem.MolFromSmarts('[OX2H]'), Chem.MolFromSmarts('[NX3;H2,H1]')]
        chain_length = 0
        for atom in mol.GetAtoms():
            if atom.GetAtomicNum() == 6:
                chain_length += 1
        if chain_length > 6:
            for pat in polar_substituents:
                if mol.HasSubstructMatch(pat):
                    return True
        return False
    rules.append({
        'number': 4,
        'description': 'Low Yield: Modifiers with long aliphatic chains (more than six carbons) containing polar substituents.',
        'function': rule4_function,
        'prediction': -1
    })

    # Rule 5
    def rule5_function(mol):
        alpha_amino_acid = Chem.MolFromSmarts('[NX3;H2][CX4H]([#6])[CX3](=O)[OX2H1]')
        side_chain_coordinating_groups = [Chem.MolFromSmarts('[#6][n,o,s]')]  # Indole nitrogen, etc.
        if mol.HasSubstructMatch(alpha_amino_acid):
            for pat in side_chain_coordinating_groups:
                if mol.HasSubstructMatch(pat):
                    return True
        return False
    rules.append({
        'number': 5,
        'description': 'High Yield: Modifiers that are alpha-amino acids with additional coordinating groups in the side chain.',
        'function': rule5_function,
        'prediction': 1
    })

    # Additional rules would be defined similarly

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = rule['function'](mol)
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

1. **Modifiers containing both an amino group (-NH₂) and a carboxylic acid group (-COOH) in close proximity, such as α-amino acids, tend to result in high yields due to effective chelation with the metal center.**

   - **Rationale**: The presence of amino and carboxylate groups allows for the formation of stable five- or six-membered chelate rings with metal ions, enhancing catalyst stability and activity.

   - **Examples**:
     - *(2S)-2-aminobutanedioic acid* (Aspartic acid) — **High Yield**
     - *(2S)-2-aminopentanedioic acid* (Glutamic acid) — **High Yield**
     - *5-aminopentanoic acid* — **High Yield**

   - **Counterexamples**:
     - *(2S)-2-amino-3-phenylpropanoic acid* (Phenylalanine) — **Low Yield** (Lacks additional carboxyl group for chelation)
     - *(2S)-6-acetamido-2-aminohexanoic acid* — **Low Yield** (Amino group is acylated, reducing coordination)

---

2. **Modifiers that are aromatic carboxylic acids with an amino (-NH₂) or hydroxyl (-OH) group at the para position tend to result in high yields due to enhanced metal coordination through resonance and electron-donating effects.**

   - **Rationale**: Electron-donating groups at the para position increase electron density on the carboxylate, improving its ability to coordinate with metal ions.

   - **Examples**:
     - *4-aminobenzoic acid* — **High Yield**
     - *5-(4-hydroxyphenyl)pentanoic acid* — **High Yield**

   - **Counterexamples**:
     - *4-methylbenzoic acid* — **Low Yield** (Methyl group is less effective at enhancing electron density)
     - *3-(4-hydroxyphenyl)propanoic acid* — **Low Yield** (Shorter aliphatic chain may limit flexibility and coordination)

---

3. **Modifiers containing both carboxylic acid and thiol (-SH) groups, especially when separated by a short chain, tend to result in high yields due to strong chelation through sulfur and oxygen atoms.**

   - **Rationale**: Thiol and carboxylate groups can simultaneously coordinate to the metal center, forming stable chelate complexes.

   - **Example**:
     - *3-sulfanylpropanoic acid* — **High Yield**

   - **Counterexample**:
     - *4-sulfanylbenzoic acid* — **Low Yield** (Thiol group on an aromatic ring may be less accessible for coordination)

---

4. **Simple aliphatic carboxylic acids with unbranched chains up to eight carbons and without additional polar or bulky substituents tend to result in high yields due to minimal steric hindrance and favorable hydrophobic interactions.**

   - **Rationale**: Lack of steric hindrance allows for effective coordination, and hydrophobic chains may facilitate substrate interaction.

   - **Example**:
     - *Octanoic acid* — **High Yield**

   - **Counterexamples**:
     - *7-hydroxyheptanoic acid* — **Low Yield** (Hydroxyl group introduces polarity and potential steric hindrance)
     - *7-aminoheptanoic acid* — **Low Yield** (Amino group may protonate and reduce coordination efficiency)

---

5. **Modifiers with electron-withdrawing groups (e.g., nitro, halogens) on the aromatic ring tend to result in high yields by activating the carboxylate group for stronger metal coordination.**

   - **Rationale**: Electron-withdrawing groups increase the acidity of the carboxylic acid, enhancing its ability to interact with metal ions.

   - **Examples**:
     - *4-nitrobenzoic acid* — **High Yield**
     - *4-(bromomethyl)benzoic acid* — **High Yield**

   - **Counterexample**:
     - *4-formylbenzoic acid* — **Low Yield** (Aldehyde group can participate in side reactions or inhibit coordination)

---

6. **Modifiers that are heteroaromatic carboxylic acids with a coordinating nitrogen atom adjacent to the carboxylate group tend to result in high yields due to additional coordination sites enhancing complex stability.**

   - **Rationale**: Nitrogen atoms in heterocycles can serve as Lewis bases, providing extra binding sites for metal ions.

   - **Examples**:
     - *Pyridine-3-carboxylic acid* (Nicotinic acid) — **High Yield**
     - *1H-pyrazole-4-carboxylic acid* — **High Yield**

   - **Counterexample**:
     - *4-pyridin-4-ylbenzoic acid* — **Low Yield** (Pyridine nitrogen is not adjacent to the carboxylate and may be sterically hindered)

---

7. **Modifiers with multiple hydroxyl (-OH) groups adjacent to the carboxylic acid group tend to result in high yields due to increased coordination through multiple hydrogen-bonding and metal-binding sites.**

   - **Rationale**: Polyhydroxylated compounds can form multiple interactions with the metal center, enhancing complex stability.

   - **Example**:
     - *(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid* (Gluconic acid) — **High Yield**

---

8. **Modifiers containing electron-withdrawing fluorinated alkyl groups near the carboxylic acid tend to result in low yields due to decreased electron density on the carboxylate, weakening metal coordination.**

   - **Rationale**: Fluorinated groups increase the acidity but reduce the nucleophilicity of the carboxylate oxygen, hindering effective coordination.

   - **Examples**:
     - *2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid* — **Low Yield**
     - *4-[(2,2,2-trifluoroacetyl)amino]butanoic acid* — **Low Yield**

---

9. **Modifiers with bulky or rigid structures, or those possessing long, flexible hydrophilic chains, tend to result in low yields due to steric hindrance and decreased coordination efficiency.**

   - **Rationale**: Steric bulk can prevent effective interaction with the metal center, and flexible chains may adopt conformations that reduce coordination.

   - **Examples**:
     - *2-[2-(2-methoxyethoxy)ethoxy]acetic acid* — **Low Yield**
     - *(2S)-6-acetamido-2-aminohexanoic acid* — **Low Yield**

---

10. **Modifiers with aldehyde groups attached to an aromatic ring tend to result in low yields due to potential side reactions and interference with metal coordination.**

    - **Rationale**: Aldehyde groups can react with nucleophiles or form complexes with metal ions that are catalytically inactive.

    - **Examples**:
      - *4-formylbenzoic acid* — **Low Yield**
      - *5-formyl-2-hydroxybenzoic acid* — **Low Yield**

---

11. **Modifiers that are N-acylated amino acids tend to result in low yields due to blockage of the amino group, reducing the number of coordination sites available.**

    - **Rationale**: Acylation of the amino group prevents it from participating in metal coordination, decreasing chelation efficiency.

    - **Example**:
      - *(2S)-6-acetamido-2-aminohexanoic acid* — **Low Yield**

---

12. **Modifiers with rigid aromatic systems lacking additional coordinating substituents tend to result in low yields due to limited interaction with the metal center.**

    - **Rationale**: Absence of electron-donating groups reduces the ability of the carboxylate to coordinate effectively.

    - **Example**:
      - *4-methylbenzoic acid* — **Low Yield**

---

13. **Modifiers featuring flexible aliphatic linkers connecting the carboxylate to additional coordinating groups (e.g., hydroxyl, pyridyl) tend to result in high yields due to adaptable coordination geometries.**

    - **Rationale**: Flexibility allows the molecule to adjust for optimal interactions with the metal ion, enhancing complex formation.

    - **Examples**:
      - *4-pyridin-4-ylbutanoic acid* — **High Yield**
      - *5-(4-hydroxyphenyl)pentanoic acid* — **High Yield**

    - **Counterexample**:
      - *4-pyridin-4-ylbenzoic acid* — **Low Yield** (Rigid linker limits flexibility)

---

14. **Modifiers that are amino acids with side chains containing coordinating heterocycles, such as indole rings, tend to result in high yields due to additional binding sites.**

    - **Rationale**: Heterocyclic side chains with nitrogen atoms can coordinate with metal ions, enhancing catalyst performance.

    - **Example**:
      - *(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid* (Tryptophan) — **High Yield**

    - **Counterexample**:
      - *(2S)-2-amino-3-phenylpropanoic acid* (Phenylalanine) — **Low Yield** (Phenyl group lacks coordinating heteroatoms)

---

15. **Modifiers that have side chains introducing steric hindrance or lack effective coordinating groups tend to result in low yields due to reduced metal complex formation.**

    - **Rationale**: Bulky side chains can impede access to the metal center, and absence of coordinating groups lowers binding affinity.

    - **Example**:
      - *(2S)-2-amino-3-phenylpropanoic acid* (Phenylalanine) — **Low Yield**

---

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5
0,0,0,0,0
1,0,0,0,0
0,0,0,0,0
1,0,0,0,0
0,0,0,0,0
0,1,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,1,0,0
0,0,0,0,0
0,0,0,0,0
1,0,0,0,0
0,0,0,0,0
1,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,1,0,0
0,1,0,0,0
0,0,0,0,0
0,0,0,0,1
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
1,0,0,0,0
0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.5428571428571428; Test Accuracy: 1.0
    Train Support: 0.05714285714285714; Test Support: 0.0
    Train Confidence: 0.8; Test Confidence: 0.5
    Train Lift: 1.5555555555555558; Test Lift: NONE
    Train Leverage: 0.013061224489795922; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    import pandas as pd
    from rdkit import Chem
    # Define SMARTS patterns
    patterns = {
        'carboxylic_acid': '[CX3](=O)[OX2H1]',
        'primary_amine': '[NX3H2]'
    }
    
    # Additional patterns for rules
    patterns.update({
        'alpha_amino_acid': '[NX3H2][CX4H][CX3](=O)[OX2H1]',
        'aromatic_carboxylic_acid': 'c[C](=O)[OX2H1]',
        'aromatic_amino_group': 'c[NX3H2]',
        'aromatic_hydroxyl_group': 'c[OX2H]',
        'thiol': '[SX2H]',
        'unbranched_aliphatic_chain': 'CCCCCCCC',  # 8 carbon chain
        'hydroxyl_group': '[OX2H]',
        'amine_group': '[NX3;H2,H1]',
        'halogens_on_aromatic': 'c[F,Cl,Br,I]',
        'nitro_group_on_aromatic': 'c[N+](=O)[O-]',
        'aldehyde_group_on_aromatic': 'c[C](=O)[H]',
        'heteroaromatic_nitrogen': 'n[c,c]',
        'polyhydroxyl': '[OX2H]',
        'fluorinated_alkyl': '[CX4][F]',
        'long_hydrophilic_chain': '[OX2H][CH2][CH2][CH2][CH2][CH2]',
        'amide_group_adjacent_aromatic': 'c[C](=O)[NX3;H2,H1]',
        'indole_ring': 'c1cc2c(c1)cc[nH]2'
    })
    
    # Compile patterns
    compiled_patterns = {key: Chem.MolFromSmarts(value) for key, value in patterns.items()}

    # Define rules
    rules = [
        {
            'number': 1,
            'description': 'High Yield: Modifiers containing both an amino group (-NH₂) and a carboxylic acid group (-COOH) in close proximity, such as α-amino acids.',
            'patterns': [
                compiled_patterns['alpha_amino_acid']
            ],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'High Yield: Modifiers that are aromatic carboxylic acids with an amino (-NH₂) or hydroxyl (-OH) group at the para position.',
            'patterns': [
                compiled_patterns['aromatic_carboxylic_acid'],
                [compiled_patterns['aromatic_amino_group'], compiled_patterns['aromatic_hydroxyl_group']]
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'High Yield: Modifiers containing both carboxylic acid and thiol (-SH) groups, especially when separated by a short chain.',
            'patterns': [
                compiled_patterns['carboxylic_acid'],
                compiled_patterns['thiol']
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'High Yield: Simple aliphatic carboxylic acids with unbranched chains up to eight carbons and without additional polar or bulky substituents.',
            'patterns': [
                Chem.MolFromSmarts('C(=O)[OX2H1]'),
                Chem.MolFromSmarts('CCCCCCCC')  # 8-carbon unbranched chain
            ],
            'exclude_patterns': [
                [compiled_patterns['hydroxyl_group'], compiled_patterns['amine_group'], compiled_patterns['halogens_on_aromatic']]
            ],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'High Yield: Modifiers with electron-withdrawing groups (e.g., nitro, halogens) on the aromatic ring connected to a carboxylic acid group (-COOH).',
            'patterns': [
                compiled_patterns['aromatic_carboxylic_acid'],
                [compiled_patterns['halogens_on_aromatic'], compiled_patterns['nitro_group_on_aromatic']]
            ],
            'prediction': 1
        },
        # Additional rules can be added here following the same structure
    ]

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for exclude_group in rule['exclude_patterns']:
                        for pattern in exclude_group:
                            if mol.HasSubstructMatch(pattern):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for pat in rule['patterns']:
                    if isinstance(pat, list):
                        # Group of patterns, match any
                        group_match = False
                        for sub_pat in pat:
                            if mol.HasSubstructMatch(sub_pat):
                                group_match = True
                                break
                        if not group_match:
                            match = False
                            break
                    else:
                        # Single pattern
                        if not mol.HasSubstructMatch(pat):
                            match = False
                            break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df
--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

1. **Modifiers that are α-amino dicarboxylic acids (having an amino group and two carboxylic acid groups on adjacent carbons) tend to result in high yields.**

   - **Rationale**: The amino and dicarboxylic acid groups can chelate the metal center effectively, enhancing catalyst stability and reactivity.

   - **Examples**:
     - *(2S)-2-aminobutanedioic acid* (Aspartic acid) — **High Yield**
     - *(2S)-2-aminopentanedioic acid* (Glutamic acid) — **High Yield**

   - **Counterexamples**:
     - *(2S)-2-amino-3-phenylpropanoic acid* (Phenylalanine) — **Low Yield** (Lacks a second carboxylic acid group)

---

2. **Modifiers that are aromatic carboxylic acids substituted at the para position with electron-donating groups capable of metal coordination (e.g., amino, hydroxyl, bromomethyl) tend to result in high yields.**

   - **Rationale**: Electron-donating groups at the para position enhance the electron density of the carboxylate and provide additional coordination sites, improving metal binding.

   - **Examples**:
     - *4-aminobenzoic acid* — **High Yield**
     - *4-(bromomethyl)benzoic acid* — **High Yield**
     - *4-nitrobenzoic acid* — **High Yield** (Though nitro is electron-withdrawing, its ability to coordinate can enhance metal binding)

   - **Counterexamples**:
     - *4-methylbenzoic acid* — **Low Yield** (Methyl group is less effective in coordination)
     - *4-formylbenzoic acid* — **Low Yield** (Formyl group can interfere with coordination)

---

3. **Modifiers that are aliphatic carboxylic acids with unbranched chains of medium length (5-8 carbons) and lacking additional polar substituents tend to result in high yields.**

   - **Rationale**: Such acids can coordinate without steric hindrance or electronic interference from other groups, promoting efficient catalyst formation.

   - **Example**:
     - *Octanoic acid* — **High Yield**

   - **Counterexamples**:
     - *7-hydroxyheptanoic acid* — **Low Yield** (Hydroxyl group introduces polarity)
     - *7-aminoheptanoic acid* — **Low Yield** (Amino group can interfere with coordination)

---

4. **Modifiers containing both a thiol (-SH) group and a carboxylic acid on a short aliphatic chain tend to result in high yields.**

   - **Rationale**: Thiol and carboxylate groups can form strong coordination bonds with metals, enhancing catalyst activity.

   - **Example**:
     - *3-sulfanylpropanoic acid* — **High Yield**

   - **Counterexample**:
     - *4-sulfanylbenzoic acid* — **Low Yield** (Aromatic ring may reduce thiol accessibility)

---

5. **Modifiers that are polyhydroxylated carboxylic acids (carboxylic acids with multiple hydroxyl groups) tend to result in high yields.**

   - **Rationale**: Multiple hydroxyl groups can engage in additional hydrogen bonding and coordination, stabilizing the metal complex.

   - **Examples**:
     - *(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid* (Gluconic acid) — **High Yield**
     - *2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid* — **High Yield**

---

6. **Modifiers that are heterocyclic carboxylic acids containing nitrogen atoms in the ring adjacent to the carboxylate group tend to result in high yields.**

   - **Rationale**: Nitrogen atoms can act as additional coordination sites, enhancing metal-ligand interactions.

   - **Examples**:
     - *Pyridine-3-carboxylic acid* (Nicotinic acid) — **High Yield**
     - *1H-pyrazole-4-carboxylic acid* — **High Yield**
     - *2-oxo-1H-pyridine-4-carboxylic acid* — **High Yield**

   - **Counterexample**:
     - *4-pyridin-4-ylbenzoic acid* — **Low Yield** (Nitrogen is not adjacent to the carboxylate)

---

7. **Modifiers that are amino acids with heteroaromatic side chains capable of metal coordination tend to result in high yields.**

   - **Rationale**: Heteroaromatic side chains can provide additional coordination sites, enhancing catalyst effectiveness.

   - **Example**:
     - *(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid* (Tryptophan) — **High Yield**

   - **Counterexample**:
     - *(2S)-2-amino-3-phenylpropanoic acid* (Phenylalanine) — **Low Yield** (Phenyl group lacks coordination ability)

---

8. **Modifiers with electron-withdrawing groups (e.g., fluorinated chains, formyl groups) near the carboxylate tend to result in low yields.**

   - **Rationale**: Electron-withdrawing groups reduce the electron density on the carboxylate oxygen, weakening metal coordination.

   - **Examples**:
     - *2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid* — **Low Yield**
     - *4-formylbenzoic acid* — **Low Yield**

---

9. **Modifiers that are aromatic carboxylic acids linked via flexible aliphatic chains to additional coordinating groups tend to result in high yields if the chain length allows effective coordination.**

   - **Rationale**: Optimal chain length permits the coordinating group to interact with the metal center, enhancing catalyst activity.

   - **Examples**:
     - *5-(4-hydroxyphenyl)pentanoic acid* — **High Yield**
     - *4-pyridin-4-ylbutanoic acid* — **High Yield**

   - **Counterexample**:
     - *3-(4-hydroxyphenyl)propanoic acid* — **Low Yield** (Shorter chain may prevent effective coordination)

---

10. **Modifiers that are N-acylated amino acids or have blocked amino groups tend to result in low yields due to decreased coordination capacity.**

    - **Rationale**: Acylation hinders the amino group's ability to coordinate with the metal.

    - **Example**:
      - *(2S)-6-acetamido-2-aminohexanoic acid* — **Low Yield**

---

11. **Modifiers with long, flexible ether chains adjacent to the carboxylate group tend to result in low yields.**

    - **Rationale**: Ether chains can increase flexibility and solubility but may reduce effective metal coordination due to steric hindrance or conformational freedom.

    - **Example**:
      - *2-[2-(2-methoxyethoxy)ethoxy]acetic acid* — **Low Yield**

---

12. **Modifiers containing carbonyl groups within the aliphatic chain near the carboxylate tend to result in low yields.**

    - **Rationale**: Internal carbonyl groups can interfere with metal coordination by competing for binding or altering electronic properties.

    - **Example**:
      - *4-oxoheptanedioic acid* — **Low Yield**

---

13. **Modifiers with polar substituents (e.g., hydroxyl, amino) on long aliphatic chains tend to result in low yields due to steric and electronic effects.**

    - **Rationale**: Polar groups distant from the carboxylate can introduce steric hindrance and disrupt optimal metal coordination.

    - **Examples**:
      - *7-hydroxyheptanoic acid* — **Low Yield**
      - *8-aminooctanoic acid* — **Low Yield**

---

14. **Modifiers that are aromatic carboxylic acids substituted at positions that hinder coordination (e.g., ortho-substitution) tend to result in low yields.**

    - **Rationale**: Substituents at positions adjacent to the carboxylate can create steric hindrance, reducing metal binding efficiency.

    - **Example**:
      - *5-formyl-2-hydroxybenzoic acid* — **Low Yield** (Ortho-formyl and hydroxyl groups may hinder coordination)

---

15. **Modifiers with bulky electron-donating groups that do not effectively participate in coordination tend to result in low yields.**

    - **Rationale**: Bulky groups can prevent the modifier from approaching the metal center closely enough for effective coordination.

    - **Example**:
      - *4-methylbenzoic acid* — **Low Yield**

---

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,1,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,1,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,1,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,1,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,1,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,1,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0
0,0,0,1,0,0,0,-1,0,0,0,0,0,0,0
0,1,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,1,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0
0,0,0,0,0,1,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6571428571428571; Test Accuracy: 1.0
    Train Support: 0.07142857142857142; Test Support: 0.25
    Train Confidence: 0.6375; Test Confidence: 0.625
    Train Lift: 1.289624183006536; Test Lift: NONE
    Train Leverage: 0.02530612244897959; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and features
    primary_amino_group = '[NX3;H2]'
    carboxylic_acid_group = '[CX3](=O)[OX1H0-,OX2H1]'
    amino_acid = '[NX3;H2][CX4](C(=O)[OX1H0-,OX2H1])[#6]'
    dicarboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1][CX4][CX3](=O)[OX1H0-,OX2H1]'
    aromatic_carboxylic_acid = 'c[C](=O)[OX1H0-,OX2H1]'
    electron_donating_groups = ['[NX3;H2,H1][c]', '[OX2H][c]', '[c][CH2][Br]']
    aliphatic_chain = '[CH2]' * 5
    thiol_group = '[SX2H]'
    hydroxyl_group = '[OX2H]'
    polyhydroxylated_chain = 'C(' + 'O)C('.join(['O'] * 3) + 'O)'  # Chain with multiple hydroxyls
    heterocyclic_nitrogen = '[n][c][c][c][c][c]'
    heteroaromatic_amino_acid = '[NX3;H2][CX4][CX3](=O)[OX1H0-,OX2H1][CX4][c][n]'
    electron_withdrawing_groups = ['[C](=O)[OX1H0-,OX2H1]', '[NX3+](=O)[O-]', '[F]', '[Cl]', '[Br]', '[I]', '[CX4][F][F][F]']
    blocked_amino_group = '[NX3][C](=O)'
    internal_carbonyl = '[#6][CX3](=O)[#6]'
    ortho_substitution = 'c1cc([#6])[c]([#6])cc1C(=O)[OX1H0-,OX2H1]'
    bulky_group = '[c][C](C)C'
    # Define the rules
    rules = [
        {
            'number': 1,
            'description': 'High Yield: Modifiers that are α-amino dicarboxylic acids (having an amino group and two carboxylic acid groups on adjacent carbons).',
            'patterns': [
                [amino_acid],
                [dicarboxylic_acid]
            ],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'High Yield: Modifiers that are aromatic carboxylic acids substituted at the para position with electron-donating groups capable of metal coordination.',
            'patterns': [
                [aromatic_carboxylic_acid],
                electron_donating_groups
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'High Yield: Modifiers that are aliphatic carboxylic acids with unbranched chains of medium length (5-8 carbons) and lacking additional polar substituents.',
            'patterns': [
                [carboxylic_acid_group],
                [aliphatic_chain]
            ],
            'exclude_patterns': [
                [hydroxyl_group, thiol_group, primary_amino_group]
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'High Yield: Modifiers containing both a thiol (-SH) group and a carboxylic acid on a short aliphatic chain.',
            'patterns': [
                [thiol_group],
                [carboxylic_acid_group]
            ],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'High Yield: Modifiers that are polyhydroxylated carboxylic acids.',
            'patterns': [
                [polyhydroxylated_chain],
                [carboxylic_acid_group]
            ],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'High Yield: Modifiers that are heterocyclic carboxylic acids containing nitrogen atoms in the ring adjacent to the carboxylate group.',
            'patterns': [
                [heterocyclic_nitrogen],
                [carboxylic_acid_group]
            ],
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'High Yield: Modifiers that are amino acids with heteroaromatic side chains capable of metal coordination.',
            'patterns': [
                [heteroaromatic_amino_acid]
            ],
            'prediction': 1
        },
        {
            'number': 8,
            'description': 'Low Yield: Modifiers with electron-withdrawing groups near the carboxylate.',
            'patterns': [
                electron_withdrawing_groups,
                [carboxylic_acid_group]
            ],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'High Yield: Modifiers that are aromatic carboxylic acids linked via flexible aliphatic chains to additional coordinating groups with optimal chain length.',
            'patterns': [
                [aromatic_carboxylic_acid],
                [aliphatic_chain],
                electron_donating_groups
            ],
            'prediction': 1
        },
        {
            'number': 10,
            'description': 'Low Yield: Modifiers that are N-acylated amino acids or have blocked amino groups.',
            'patterns': [
                [blocked_amino_group],
                [carboxylic_acid_group]
            ],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Low Yield: Modifiers with long, flexible ether chains adjacent to the carboxylate group.',
            'patterns': [
                ['[CX4][OX2][CX4][OX2][CX4][OX2][CX4]'],  # Long ether chain
                [carboxylic_acid_group]
            ],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'Low Yield: Modifiers containing carbonyl groups within the aliphatic chain near the carboxylate.',
            'patterns': [
                [internal_carbonyl],
                [carboxylic_acid_group]
            ],
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Low Yield: Modifiers with polar substituents on long aliphatic chains.',
            'patterns': [
                [hydroxyl_group, primary_amino_group],
                [aliphatic_chain],
                [carboxylic_acid_group]
            ],
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'Low Yield: Modifiers that are aromatic carboxylic acids substituted at positions that hinder coordination (e.g., ortho-substitution).',
            'patterns': [
                [ortho_substitution]
            ],
            'prediction': -1
        },
        {
            'number': 15,
            'description': 'Low Yield: Modifiers with bulky electron-donating groups that do not effectively participate in coordination.',
            'patterns': [
                [bulky_group],
                [carboxylic_acid_group]
            ],
            'prediction': -1
        }
    ]
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(p) for p in group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for group in rule['exclude_patterns']:
                compiled_group = [Chem.MolFromSmarts(p) for p in group]
                compiled_excludes.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_excludes
    # Initialize results list
    results = []
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        matches = mol.GetSubstructMatches(pat)
                        if matches:
                            # If a count threshold is specified for this pattern
                            if 'count_thresholds' in rule and pat.GetSmarts() in rule['count_thresholds']:
                                threshold = rule['count_thresholds'][pat.GetSmarts()]
                                if len(matches) >= threshold:
                                    group_match = True
                                    break
                            else:
                                group_match = True
                                break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------