def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    
    # Common patterns
    amino_group = '[NX3;H2]'  # Primary amine (-NH2)
    carboxylic_acid = '[CX3](=O)[OX2H1]'  # Carboxylic acid (-COOH)
    carboxylate_anion = '[CX3](=O)[O-]'  # Carboxylate anion (-COO-)
    
    # Acidic amino acids (Rule 1)
    # Amino acid with two carboxylic acid groups
    
    # Basic or hydrophobic amino acids (Rule 2)
    # Amino acids with hydrophobic side chains (e.g., aromatic ring or long aliphatic chain)
    aromatic_ring = '[a]'  # Aromatic ring
    long_aliphatic_chain = '[CH2][CH2][CH2][CH2][CH2]'  # Aliphatic chain of at least 5 carbons
    
    # Benzoic acid derivatives (Rule 3)
    benzoic_acid_core = 'c1ccc(cc1)C(=O)O'  # Benzoic acid core
    para_amino_substituent = '[NX3;H2][c]'  # Para amino group
    para_nitro_substituent = '[N+](=O)[O-][c]'  # Para nitro group
    para_methyl_substituent = '[CH3][c]'  # Para methyl group
    para_aldehyde_substituent = '[CH](=O)[c]'  # Para aldehyde group
    para_thiol_substituent = '[SH][c]'  # Para thiol group
    
    # Unbranched aliphatic carboxylic acids (Rule 4)
    unbranched_aliphatic_acid = '[CH3][CH2]{0,6}C(=O)O'  # Up to 8 carbons
    amino_substituted_aliphatic_chain = '[CH3][CH2]{0,6}[CH](N)[CH2]*C(=O)O'  # With amino group
    
    # Heteroaromatic carboxylic acids (Rule 5)
    heteroaromatic_carboxylic_acid = '[n,o,s]1cccc1C(=O)O'  # Heteroaromatic ring with carboxylic acid
    
    # Amino acids with electron-rich heterocycles (Rule 6)
    indole_ring = 'c1c[nH]c2c1cccc2'  # Indole ring (tryptophan)
    phenyl_ring = 'c1ccccc1'  # Phenyl ring (phenylalanine)
    
    # Multiple hydroxyl groups (Rule 7)
    multiple_hydroxyls = '[OX2H][CX4][OX2H]'  # At least two hydroxyls
    
    # Polyether chains (Rule 8)
    polyether_chain = '[#6][OX2][#6][OX2][#6][OX2][#6]'  # At least three ether linkages
    
    # Thiol groups (Rule 9)
    aliphatic_thiol = '[CX4][SX2H]'  # Thiol on aliphatic chain
    aromatic_thiol = '[c][SX2H]'  # Thiol on aromatic ring
    
    # Perfluorinated alkyl chains (Rule 10)
    perfluoroalkyl_chain = '[CX4](F)(F)F'  # Trifluoromethyl group as part of perfluoroalkyl chains
    
    # Aldehyde or ketone on aromatic ring (Rule 11)
    aromatic_aldehyde = 'c[C](=O)[H]'  # Aldehyde attached to aromatic ring
    aromatic_ketone = 'c[C](=O)[C]'  # Ketone attached to aromatic ring
    
    # Hydroxyphenyl with chain length (Rule 12)
    hydroxyphenyl = 'c1ccc(cc1)[OX2H]'  # Hydroxyphenyl group
    long_aliphatic_chain_to_COOH = '[CH2][CH2][CH2][CH2][CH2]C(=O)O'  # Chain of 5 carbons to carboxylic acid
    short_aliphatic_chain_to_COOH = '[CH2][CH2]C(=O)O'  # Chain of 2 carbons to carboxylic acid
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are amino acids with acidic side chains containing an amino group (-NH2) and two carboxylic acid groups (-COOH), result in high yield.',
            'patterns': [amino_group, carboxylic_acid],
            'count_thresholds': {carboxylic_acid: 2},
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers that are amino acids with basic or hydrophobic side chains, such as phenylalanine and N-acetylated amino acids, result in low yield.',
            'patterns': [amino_group, carboxylic_acid],
            'exclude_patterns': [indole_ring],
            'prediction': -1
        },
        {
            'number': 3,
            'description': 'Modifiers that are benzoic acid derivatives substituted at the para position with amino (-NH2) or nitro (-NO2) groups result in high yield.',
            'patterns': [benzoic_acid_core],
            'substituent_patterns': [para_amino_substituent, para_nitro_substituent],
            'prediction': 1
        },
        {
            'number': 3.1,
            'description': 'Modifiers that are benzoic acid derivatives substituted at the para position with aldehyde (-CHO), methyl (-CH3), or sulfanyl (-SH) groups result in low yield.',
            'patterns': [benzoic_acid_core],
            'substituent_patterns': [para_methyl_substituent, para_aldehyde_substituent, para_thiol_substituent],
            'prediction': -1
        },
        {
            'number': 4,
            'description': 'Modifiers that are unbranched aliphatic carboxylic acids with chains of up to eight carbons result in high yield.',
            'patterns': [unbranched_aliphatic_acid],
            'exclude_patterns': [amino_group],
            'prediction': 1
        },
        {
            'number': 4.1,
            'description': 'If the aliphatic chain contains additional amino groups (-NH2), they result in low yield.',
            'patterns': [unbranched_aliphatic_acid, amino_group],
            'prediction': -1
        },
        {
            'number': 5,
            'description': 'Modifiers that are heteroaromatic carboxylic acids with the carboxyl group directly attached to a heterocyclic ring containing nitrogen atoms result in high yield.',
            'patterns': [heteroaromatic_carboxylic_acid],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers that are amino acids with aromatic side chains containing electron-rich heterocycles, such as the indole ring in tryptophan, result in high yield.',
            'patterns': [amino_group, carboxylic_acid, indole_ring],
            'prediction': 1
        },
        {
            'number': 6.1,
            'description': 'Modifiers with non-heterocyclic aromatic side chains (e.g., phenylalanine) result in low yield.',
            'patterns': [amino_group, carboxylic_acid, phenyl_ring],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Modifiers with multiple hydroxyl groups attached to an aliphatic chain or cyclic backbone result in high yield.',
            'patterns': [multiple_hydroxyls, carboxylic_acid],
            'prediction': 1
        },
        {
            'number': 8,
            'description': 'Modifiers containing polyether chains with multiple ether linkages result in low yield.',
            'patterns': [polyether_chain],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers where a thiol group (-SH) is attached to an aliphatic chain result in high yield.',
            'patterns': [aliphatic_thiol],
            'prediction': 1
        },
        {
            'number': 9.1,
            'description': 'Thiol groups attached directly to an aromatic ring result in low yield.',
            'patterns': [aromatic_thiol],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers with perfluorinated alkyl chains result in low yield.',
            'patterns': [perfluoroalkyl_chain],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Modifiers with aldehyde (-CHO) or ketone (=O) groups directly attached to an aromatic ring result in low yield.',
            'patterns': [aromatic_aldehyde, aromatic_ketone],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'Modifiers with a hydroxyphenyl group connected via a sufficiently long aliphatic chain (five carbons or more) to the carboxyl group result in high yield.',
            'patterns': [hydroxyphenyl, long_aliphatic_chain_to_COOH],
            'prediction': 1
        },
        {
            'number': 12.1,
            'description': 'Modifiers with shorter chains (less than five carbons) result in low yield.',
            'patterns': [hydroxyphenyl, short_aliphatic_chain_to_COOH],
            'prediction': -1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for pattern in rule.get('patterns', []):
            compiled_patterns.append(Chem.MolFromSmarts(pattern))
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for pattern in rule['exclude_patterns']:
                compiled_excludes.append(Chem.MolFromSmarts(pattern))
            rule['compiled_exclude_patterns'] = compiled_excludes
        # Compile substituent patterns if any (for Rule 3)
        if 'substituent_patterns' in rule:
            compiled_substituents = []
            for pattern in rule['substituent_patterns']:
                compiled_substituents.append(Chem.MolFromSmarts(pattern))
            rule['compiled_substituents'] = compiled_substituents
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'compiled_exclude_patterns' in rule:
                    for pat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for pat in rule['compiled_patterns']:
                    matches = mol.GetSubstructMatches(pat)
                    if len(matches) == 0:
                        match = False
                        break
                    # Check count thresholds if specified
                    if 'count_thresholds' in rule:
                        pat_smarts = Chem.MolToSmarts(pat)
                        threshold = rule['count_thresholds'].get(pat_smarts, 1)
                        if len(matches) < threshold:
                            match = False
                            break
                if not match:
                    row.append(0)
                    continue
                # Check substituent patterns for Rule 3
                if 'compiled_substituents' in rule:
                    substituent_match = False
                    for sub_pat in rule['compiled_substituents']:
                        if mol.HasSubstructMatch(sub_pat):
                            substituent_match = True
                            break
                    if not substituent_match:
                        match = False
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df
