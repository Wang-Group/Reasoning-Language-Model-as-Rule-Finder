
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: Modifiers that are **amino acids with acidic side chains**, specifically those containing an amino group (-NH₂) and two carboxylic acid groups (-COOH) (e.g., aspartic acid and glutamic acid), result in **high yield**.

  - *Examples*:
    - (2S)-2-aminobutanedioic acid (Aspartic acid)
    - (2S)-2-aminopentanedioic acid (Glutamic acid)

- **Rule 2**: Modifiers that are **amino acids with basic or hydrophobic side chains**, such as phenylalanine and N-acetylated amino acids, result in **low yield**.

  - *Examples*:
    - (2S)-2-amino-3-phenylpropanoic acid (Phenylalanine)
    - (2S)-6-acetamido-2-aminohexanoic acid (N-Acetyllysine)
    - 7-aminoheptanoic acid

- **Rule 3**: Modifiers that are **benzoic acid derivatives substituted at the para position with amino (-NH₂) or nitro (-NO₂) groups** result in **high yield**, whereas those substituted with aldehyde (-CHO), methyl (-CH₃), or sulfanyl (-SH) groups result in **low yield**.

  - *High Yield Examples*:
    - 4-aminobenzoic acid
    - 4-nitrobenzoic acid
  - *Low Yield Examples*:
    - 4-methylbenzoic acid
    - 4-formylbenzoic acid
    - 4-sulfanylbenzoic acid

- **Rule 4**: Modifiers that are **unbranched aliphatic carboxylic acids with chains of up to eight carbons** (e.g., octanoic acid) result in **high yield**. However, if the aliphatic chain contains additional amino groups (-NH₂), they result in **low yield**.

  - *High Yield Example*:
    - Octanoic acid
  - *Low Yield Examples*:
    - 7-aminoheptanoic acid
    - 8-aminooctanoic acid

- **Rule 5**: Modifiers that are **heteroaromatic carboxylic acids** with the carboxyl group directly attached to a heterocyclic ring containing nitrogen atoms (e.g., pyridinecarboxylic acids, pyrazolecarboxylic acids) result in **high yield**.

  - *Examples*:
    - Pyridine-3-carboxylic acid (Niacin)
    - 1H-pyrazole-4-carboxylic acid
    - 2-oxo-1H-pyridine-4-carboxylic acid

- **Rule 6**: Modifiers that are **amino acids with aromatic side chains containing electron-rich heterocycles**, such as the indole ring in tryptophan, result in **high yield**, whereas those with non-heterocyclic aromatic side chains (e.g., phenylalanine) result in **low yield**.

  - *High Yield Example*:
    - (2R)-2-amino-3-(1H-indol-3-yl)propanoic acid (Tryptophan)
  - *Low Yield Example*:
    - (2S)-2-amino-3-phenylpropanoic acid (Phenylalanine)

- **Rule 7**: Modifiers with **multiple hydroxyl groups attached to an aliphatic chain or cyclic backbone**, such as sugar acids, result in **high yield**.

  - *Example*:
    - (2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid (Gluconic acid)

- **Rule 8**: Modifiers containing **polyether chains with multiple ether linkages** (e.g., triethylene glycol derivatives) result in **low yield**.

  - *Examples*:
    - 2-[2-(2-methoxyethoxy)ethoxy]acetic acid
    - 3-[2-(2-aminoethoxy)ethoxy]propanoic acid

- **Rule 9**: Modifiers where a **thiol group (-SH) is attached to an aliphatic chain** result in **high yield**, whereas thiol groups attached directly to an aromatic ring result in **low yield**.

  - *High Yield Example*:
    - 3-sulfanylpropanoic acid
  - *Low Yield Example*:
    - 4-sulfanylbenzoic acid

- **Rule 10**: Modifiers with **perfluorinated alkyl chains**, such as perfluorinated carboxylic acids, result in **low yield**.

  - *Example*:
    - 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid

- **Rule 11**: Modifiers with **aldehyde (-CHO) or ketone (=O) groups directly attached to an aromatic ring** result in **low yield**.

  - *Examples*:
    - 4-formylbenzoic acid
    - 5-formyl-2-hydroxybenzoic acid

- **Rule 12**: Modifiers with a **hydroxyphenyl group connected via a sufficiently long aliphatic chain (five carbons or more) to the carboxyl group** result in **high yield**, whereas those with shorter chains result in **low yield**.

  - *High Yield Example*:
    - 5-(4-hydroxyphenyl)pentanoic acid
  - *Low Yield Example*:
    - 3-(4-hydroxyphenyl)propanoic acid

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 3.1,Rule 4,Rule 4.1,Rule 5,Rule 6,Rule 6.1,Rule 7,Rule 8,Rule 9,Rule 9.1,Rule 10,Rule 11,Rule 12,Rule 12.1
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,-1,1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
1,0,0,0,0,0,0,1,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0
1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1
1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.7428571428571429; Test Accuracy: 0.0
    Train Support: 0.11428571428571428; Test Support: 0.0
    Train Confidence: 0.8666666666666667; Test Confidence: 0.5
    Train Lift: 1.784313725490196; Test Lift: NONE
    Train Leverage: 0.04027210884353741; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    
    # Common patterns
    amino_group = '[NX3;H2]'  # Primary amine (-NH2)
    carboxylic_acid = '[CX3](=O)[OX2H1]'  # Carboxylic acid (-COOH)
    carboxylate_anion = '[CX3](=O)[O-]'  # Carboxylate anion (-COO-)
    
    # Acidic amino acids (Rule 1)
    # Amino acid with two carboxylic acid groups
    
    # Basic or hydrophobic amino acids (Rule 2)
    # Amino acids with hydrophobic side chains (e.g., aromatic ring or long aliphatic chain)
    aromatic_ring = '[a]'  # Aromatic ring
    long_aliphatic_chain = '[CH2][CH2][CH2][CH2][CH2]'  # Aliphatic chain of at least 5 carbons
    
    # Benzoic acid derivatives (Rule 3)
    benzoic_acid_core = 'c1ccc(cc1)C(=O)O'  # Benzoic acid core
    para_amino_substituent = '[NX3;H2][c]'  # Para amino group
    para_nitro_substituent = '[N+](=O)[O-][c]'  # Para nitro group
    para_methyl_substituent = '[CH3][c]'  # Para methyl group
    para_aldehyde_substituent = '[CH](=O)[c]'  # Para aldehyde group
    para_thiol_substituent = '[SH][c]'  # Para thiol group
    
    # Unbranched aliphatic carboxylic acids (Rule 4)
    unbranched_aliphatic_acid = '[CH3][CH2]{0,6}C(=O)O'  # Up to 8 carbons
    amino_substituted_aliphatic_chain = '[CH3][CH2]{0,6}[CH](N)[CH2]*C(=O)O'  # With amino group
    
    # Heteroaromatic carboxylic acids (Rule 5)
    heteroaromatic_carboxylic_acid = '[n,o,s]1cccc1C(=O)O'  # Heteroaromatic ring with carboxylic acid
    
    # Amino acids with electron-rich heterocycles (Rule 6)
    indole_ring = 'c1c[nH]c2c1cccc2'  # Indole ring (tryptophan)
    phenyl_ring = 'c1ccccc1'  # Phenyl ring (phenylalanine)
    
    # Multiple hydroxyl groups (Rule 7)
    multiple_hydroxyls = '[OX2H][CX4][OX2H]'  # At least two hydroxyls
    
    # Polyether chains (Rule 8)
    polyether_chain = '[#6][OX2][#6][OX2][#6][OX2][#6]'  # At least three ether linkages
    
    # Thiol groups (Rule 9)
    aliphatic_thiol = '[CX4][SX2H]'  # Thiol on aliphatic chain
    aromatic_thiol = '[c][SX2H]'  # Thiol on aromatic ring
    
    # Perfluorinated alkyl chains (Rule 10)
    perfluoroalkyl_chain = '[CX4](F)(F)F'  # Trifluoromethyl group as part of perfluoroalkyl chains
    
    # Aldehyde or ketone on aromatic ring (Rule 11)
    aromatic_aldehyde = 'c[C](=O)[H]'  # Aldehyde attached to aromatic ring
    aromatic_ketone = 'c[C](=O)[C]'  # Ketone attached to aromatic ring
    
    # Hydroxyphenyl with chain length (Rule 12)
    hydroxyphenyl = 'c1ccc(cc1)[OX2H]'  # Hydroxyphenyl group
    long_aliphatic_chain_to_COOH = '[CH2][CH2][CH2][CH2][CH2]C(=O)O'  # Chain of 5 carbons to carboxylic acid
    short_aliphatic_chain_to_COOH = '[CH2][CH2]C(=O)O'  # Chain of 2 carbons to carboxylic acid
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are amino acids with acidic side chains containing an amino group (-NH2) and two carboxylic acid groups (-COOH), result in high yield.',
            'patterns': [amino_group, carboxylic_acid],
            'count_thresholds': {carboxylic_acid: 2},
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers that are amino acids with basic or hydrophobic side chains, such as phenylalanine and N-acetylated amino acids, result in low yield.',
            'patterns': [amino_group, carboxylic_acid],
            'exclude_patterns': [indole_ring],
            'prediction': -1
        },
        {
            'number': 3,
            'description': 'Modifiers that are benzoic acid derivatives substituted at the para position with amino (-NH2) or nitro (-NO2) groups result in high yield.',
            'patterns': [benzoic_acid_core],
            'substituent_patterns': [para_amino_substituent, para_nitro_substituent],
            'prediction': 1
        },
        {
            'number': 3.1,
            'description': 'Modifiers that are benzoic acid derivatives substituted at the para position with aldehyde (-CHO), methyl (-CH3), or sulfanyl (-SH) groups result in low yield.',
            'patterns': [benzoic_acid_core],
            'substituent_patterns': [para_methyl_substituent, para_aldehyde_substituent, para_thiol_substituent],
            'prediction': -1
        },
        {
            'number': 4,
            'description': 'Modifiers that are unbranched aliphatic carboxylic acids with chains of up to eight carbons result in high yield.',
            'patterns': [unbranched_aliphatic_acid],
            'exclude_patterns': [amino_group],
            'prediction': 1
        },
        {
            'number': 4.1,
            'description': 'If the aliphatic chain contains additional amino groups (-NH2), they result in low yield.',
            'patterns': [unbranched_aliphatic_acid, amino_group],
            'prediction': -1
        },
        {
            'number': 5,
            'description': 'Modifiers that are heteroaromatic carboxylic acids with the carboxyl group directly attached to a heterocyclic ring containing nitrogen atoms result in high yield.',
            'patterns': [heteroaromatic_carboxylic_acid],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers that are amino acids with aromatic side chains containing electron-rich heterocycles, such as the indole ring in tryptophan, result in high yield.',
            'patterns': [amino_group, carboxylic_acid, indole_ring],
            'prediction': 1
        },
        {
            'number': 6.1,
            'description': 'Modifiers with non-heterocyclic aromatic side chains (e.g., phenylalanine) result in low yield.',
            'patterns': [amino_group, carboxylic_acid, phenyl_ring],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Modifiers with multiple hydroxyl groups attached to an aliphatic chain or cyclic backbone result in high yield.',
            'patterns': [multiple_hydroxyls, carboxylic_acid],
            'prediction': 1
        },
        {
            'number': 8,
            'description': 'Modifiers containing polyether chains with multiple ether linkages result in low yield.',
            'patterns': [polyether_chain],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers where a thiol group (-SH) is attached to an aliphatic chain result in high yield.',
            'patterns': [aliphatic_thiol],
            'prediction': 1
        },
        {
            'number': 9.1,
            'description': 'Thiol groups attached directly to an aromatic ring result in low yield.',
            'patterns': [aromatic_thiol],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers with perfluorinated alkyl chains result in low yield.',
            'patterns': [perfluoroalkyl_chain],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Modifiers with aldehyde (-CHO) or ketone (=O) groups directly attached to an aromatic ring result in low yield.',
            'patterns': [aromatic_aldehyde, aromatic_ketone],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'Modifiers with a hydroxyphenyl group connected via a sufficiently long aliphatic chain (five carbons or more) to the carboxyl group result in high yield.',
            'patterns': [hydroxyphenyl, long_aliphatic_chain_to_COOH],
            'prediction': 1
        },
        {
            'number': 12.1,
            'description': 'Modifiers with shorter chains (less than five carbons) result in low yield.',
            'patterns': [hydroxyphenyl, short_aliphatic_chain_to_COOH],
            'prediction': -1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for pattern in rule.get('patterns', []):
            compiled_patterns.append(Chem.MolFromSmarts(pattern))
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for pattern in rule['exclude_patterns']:
                compiled_excludes.append(Chem.MolFromSmarts(pattern))
            rule['compiled_exclude_patterns'] = compiled_excludes
        # Compile substituent patterns if any (for Rule 3)
        if 'substituent_patterns' in rule:
            compiled_substituents = []
            for pattern in rule['substituent_patterns']:
                compiled_substituents.append(Chem.MolFromSmarts(pattern))
            rule['compiled_substituents'] = compiled_substituents
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'compiled_exclude_patterns' in rule:
                    for pat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for pat in rule['compiled_patterns']:
                    matches = mol.GetSubstructMatches(pat)
                    if len(matches) == 0:
                        match = False
                        break
                    # Check count thresholds if specified
                    if 'count_thresholds' in rule:
                        pat_smarts = Chem.MolToSmarts(pat)
                        threshold = rule['count_thresholds'].get(pat_smarts, 1)
                        if len(matches) < threshold:
                            match = False
                            break
                if not match:
                    row.append(0)
                    continue
                # Check substituent patterns for Rule 3
                if 'compiled_substituents' in rule:
                    substituent_match = False
                    for sub_pat in rule['compiled_substituents']:
                        if mol.HasSubstructMatch(sub_pat):
                            substituent_match = True
                            break
                    if not substituent_match:
                        match = False
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: Modifiers that are **α-amino acids with acidic side chains**, containing an additional carboxylic acid group (-COOH) in the side chain (e.g., aspartic acid and glutamic acid), result in **high yield**.

  - *Examples*:
    - (2S)-2-aminobutanedioic acid (Aspartic acid)
    - (2S)-2-aminopentanedioic acid (Glutamic acid)

- **Rule 2**: Modifiers that are **α-amino acids with hydrophobic or basic side chains**, such as phenylalanine, lysine, or N-acetylated amino acids, result in **low yield**.

  - *Examples*:
    - (2S)-2-amino-3-phenylpropanoic acid (Phenylalanine)
    - (2S)-6-acetamido-2-aminohexanoic acid (N-Acetyllysine)
    - 7-aminoheptanoic acid
    - 8-aminooctanoic acid

- **Rule 3**: Modifiers that are **benzoic acid derivatives substituted at the para position with electron-withdrawing groups**, such as nitro (-NO₂), amino (-NH₂), or bromomethyl (-CH₂Br), result in **high yield**; whereas those substituted with electron-donating groups like methyl (-CH₃), sulfanyl (-SH), or aldehyde (-CHO) groups result in **low yield**.

  - *High Yield Examples*:
    - 4-aminobenzoic acid
    - 4-nitrobenzoic acid
    - 4-(bromomethyl)benzoic acid
  - *Low Yield Examples*:
    - 4-methylbenzoic acid
    - 4-sulfanylbenzoic acid
    - 4-formylbenzoic acid

- **Rule 4**: Modifiers that are **aliphatic carboxylic acids without additional functional groups**, such as octanoic acid, result in **high yield**. However, if the aliphatic chain contains amino groups (-NH₂), they result in **low yield**.

  - *High Yield Example*:
    - Octanoic acid
  - *Low Yield Examples*:
    - 7-aminoheptanoic acid
    - 8-aminooctanoic acid

- **Rule 5**: Modifiers that are **heteroaromatic carboxylic acids** with the carboxyl group directly attached to a heterocyclic ring containing nitrogen atoms (e.g., pyridinecarboxylic acids, pyrazolecarboxylic acids) result in **high yield**.

  - *Examples*:
    - Pyridine-3-carboxylic acid (Niacin)
    - 1H-pyrazole-4-carboxylic acid
    - 2-oxo-1H-pyridine-4-carboxylic acid

- **Rule 6**: Modifiers with **multiple hydroxyl groups attached to an aliphatic chain**, such as sugar acids, result in **high yield**.

  - *Example*:
    - (2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid (Gluconic acid)

- **Rule 7**: Modifiers containing **polyether chains with multiple ether linkages** (e.g., triethylene glycol derivatives) result in **low yield**.

  - *Examples*:
    - 2-[2-(2-methoxyethoxy)ethoxy]acetic acid
    - 3-[2-(2-aminoethoxy)ethoxy]propanoic acid

- **Rule 8**: Modifiers containing **perfluorinated alkyl chains**, such as perfluorinated carboxylic acids, result in **low yield**.

  - *Example*:
    - 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid

- **Rule 9**: Modifiers with **aldehyde (-CHO) or ketone (=O) groups attached directly to an aromatic ring**, particularly at the para position, result in **low yield**.

  - *Examples*:
    - 4-formylbenzoic acid
    - 5-formyl-2-hydroxybenzoic acid

- **Rule 10**: Modifiers where a **thiol group (-SH) is attached to an aliphatic chain** result in **high yield**, whereas thiol groups attached directly to an aromatic ring result in **low yield**.

  - *High Yield Example*:
    - 3-sulfanylpropanoic acid
  - *Low Yield Example*:
    - 4-sulfanylbenzoic acid

- **Rule 11**: Modifiers with **hydroxyphenyl groups connected via a long aliphatic chain (four carbons or more) to a carboxyl group** result in **high yield**, whereas those with shorter chains result in **low yield**.

  - *High Yield Example*:
    - 5-(4-hydroxyphenyl)pentanoic acid
  - *Low Yield Example*:
    - 3-(4-hydroxyphenyl)propanoic acid

- **Rule 12**: Modifiers that are **aromatic amino acids containing electron-rich heterocycles**, such as the indole ring in tryptophan, result in **high yield**, whereas those with non-heterocyclic aromatic side chains (e.g., phenylalanine) result in **low yield**.

  - *High Yield Example*:
    - (2R)-2-amino-3-(1H-indol-3-yl)propanoic acid (Tryptophan)
  - *Low Yield Example*:
    - (2S)-2-amino-3-phenylpropanoic acid (Phenylalanine)

- **Rule 13**: Modifiers that are **amide derivatives of amino acids or carboxylic acids**, especially N-acetylated amino acids, result in **low yield**.

  - *Examples*:
    - (2S)-6-acetamido-2-aminohexanoic acid (N-Acetyllysine)
    - 2-[(4-hydroxybenzoyl)amino]acetic acid

- **Rule 14**: Modifiers containing **aryl–alkyl linkages where an aromatic ring is connected to the carboxylic acid via three or more carbon atoms** result in **high yield**, whereas those with shorter linkers result in **low yield**.

  - *High Yield Examples*:
    - 5-(4-hydroxyphenyl)pentanoic acid
    - 4-pyridin-4-ylbutanoic acid
  - *Low Yield Examples*:
    - 3-(4-hydroxyphenyl)propanoic acid
    - 4-pyridin-4-ylbenzoic acid

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 3.1,Rule 4,Rule 4.1
0,0,0,0,0,0
0,0,0,0,0,0
0,0,1,-1,0,0
0,0,0,0,0,0
0,0,0,0,0,0
0,0,0,0,0,0
0,0,0,0,0,0
0,0,0,0,0,0
0,0,0,0,0,0
0,0,0,0,0,0
0,0,0,0,0,0
0,0,0,-1,0,0
0,0,0,0,0,0
0,0,0,0,0,0
0,0,0,0,0,0
0,0,0,0,0,0
0,0,0,0,0,0
0,0,0,0,0,0
0,0,0,-1,0,0
0,0,0,0,0,0
0,0,0,0,0,0
0,0,0,-1,0,0
0,0,1,0,0,0
0,0,0,0,0,0
0,0,0,-1,0,0
0,-1,0,0,0,0
0,0,0,0,0,0
0,0,0,0,0,0
0,0,0,0,0,0
0,0,0,0,0,0
0,-1,0,0,0,0
0,0,0,0,0,0
0,0,0,0,0,0
0,0,0,0,0,0
0,-1,0,0,0,0
0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6571428571428571; Test Accuracy: 0.0
    Train Support: 0.0761904761904762; Test Support: 0.0
    Train Confidence: 0.8666666666666667; Test Confidence: 0.5
    Train Lift: 1.7461873638344227; Test Lift: NONE
    Train Leverage: 0.02938775510204082; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are α-amino acids with acidic side chains, containing an additional carboxylic acid group (-COOH) in the side chain, result in high yield.',
            'patterns': [
                {
                    'smarts': '[NX3;H2][CX4H]([CX3](=O)[OX1H])[CX4][$([CX4][CX3](=O)[OX1H]),$([CX4][CX4][CX3](=O)[OX1H])]',  # Matches Aspartic and Glutamic acid
                    'count_threshold': 1
                }
            ],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers that are α-amino acids with hydrophobic or basic side chains, such as phenylalanine, lysine, or N-acetylated amino acids, result in low yield.',
            'logical_operator': 'OR',
            'patterns': [
                {
                    'smarts': '[NX3;H2][CX4H]([CX3](=O)[OX1H])[CX4][c]',  # α-amino acid with aromatic side chain (e.g., phenylalanine)
                    'count_threshold': 1
                },
                {
                    'smarts': '[NX3;H2][CX4H]([CX3](=O)[OX1H])[CX4][CX4][CX4][NX3;H2]',  # Lysine side chain
                    'count_threshold': 1
                },
                {
                    'smarts': '[NX3][CX3](=O)[C;!$([C]=O)]',  # N-acetylated amino acid
                    'count_threshold': 1
                }
            ],
            'prediction': -1
        },
        {
            'number': 3,
            'description': 'Modifiers that are benzoic acid derivatives substituted at the para position with electron-withdrawing groups such as nitro (-NO₂), amino (-NH₂), or bromomethyl (-CH₂Br), result in high yield.',
            'patterns': [
                {
                    'smarts': 'c1cc(ccc1C(=O)O)[NX3H2,NX3+]=O',  # Para-substituted nitro or amino group
                    'count_threshold': 1
                },
                {
                    'smarts': 'c1cc(ccc1C(=O)O)CBr',  # Para-substituted bromomethyl group
                    'count_threshold': 1
                }
            ],
            'logical_operator': 'OR',
            'prediction': 1
        },
        {
            'number': 3.1,
            'description': 'Modifiers that are benzoic acid derivatives substituted at the para position with electron-donating groups like methyl (-CH₃), sulfanyl (-SH), or aldehyde (-CHO) groups result in low yield.',
            'patterns': [
                {
                    'smarts': 'c1cc(ccc1C(=O)O)C',  # Para-substituted methyl group
                    'count_threshold': 1
                },
                {
                    'smarts': 'c1cc(ccc1C(=O)O)S',  # Para-substituted sulfanyl group
                    'count_threshold': 1
                },
                {
                    'smarts': 'c1cc(ccc1C(=O)O)C=O',  # Para-substituted aldehyde group
                    'count_threshold': 1
                }
            ],
            'logical_operator': 'OR',
            'prediction': -1
        },
        {
            'number': 4,
            'description': 'Modifiers that are aliphatic carboxylic acids without additional functional groups, such as octanoic acid, result in high yield.',
            'patterns': [
                {
                    'smarts': '[CX3](=O)[OX1H][CX4H2][CX4H2][CX4H2][CX4H2][CX4H2][CX4H3]',  # Octanoic acid
                    'count_threshold': 1
                }
            ],
            'exclude_patterns': [
                '[NX3;!$([NX3][c])]',  # Exclude aliphatic amino groups
                '[OX2H][CX4;!$(C(=O)[OX1H])]',  # Exclude hydroxyl groups not in carboxylic acids
                '[SX2H;!$([SX2H][c])]',  # Exclude aliphatic thiol groups
                '[#16;!$([#16]=O)]',     # Exclude sulfur atoms not in sulfoxides/sulfones
                '[F,Cl,Br,I;!$([Cl][c])]',  # Exclude halogens not bonded to aromatic rings
            ],
            'prediction': 1
        },
        {
            'number': 4.1,
            'description': 'If the aliphatic chain contains amino groups (-NH₂), they result in low yield.',
            'patterns': [
                {
                    'smarts': '[CX3](=O)[OX1H]',  # Carboxylic acid group
                    'count_threshold': 1
                },
                {
                    'smarts': '[NX3;H2]',  # Amino group
                    'count_threshold': 1
                }
            ],
            'logical_operator': 'AND',
            'prediction': -1
        }
        # Additional rules from 5 to 14 would be defined here...
    ]

    # Compile SMARTS patterns, storing original SMARTS strings
    for rule in rules:
        compiled_patterns = []
        for pattern_dict in rule.get('patterns', []):
            smarts = pattern_dict['smarts']
            try:
                pat = Chem.MolFromSmarts(smarts)
                if pat is not None:
                    compiled_patterns.append({
                        'smarts': smarts,
                        'pattern': pat,
                        'count_threshold': pattern_dict.get('count_threshold'),
                        'optional': pattern_dict.get('optional', False)
                    })
            except Exception as e:
                # Error compiling pattern, skip it
                pass
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for smarts in rule['exclude_patterns']:
                try:
                    pat = Chem.MolFromSmarts(smarts)
                    if pat is not None:
                        compiled_excludes.append(pat)
                except Exception as e:
                    # Error compiling exclude pattern, skip it
                    pass
            rule['compiled_exclude_patterns'] = compiled_excludes

    # Initialize results list
    results = []
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for pat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Apply logical operator (default is AND)
                logical_operator = rule.get('logical_operator', 'AND').upper()
                if logical_operator == 'AND':
                    # All patterns must match
                    for pattern_dict in rule['compiled_patterns']:
                        pat = pattern_dict['pattern']
                        matches = mol.GetSubstructMatches(pat)
                        if not matches:
                            if pattern_dict.get('optional', False):
                                continue
                            match = False
                            break
                        # Apply count threshold if specified
                        count_threshold = pattern_dict.get('count_threshold')
                        if count_threshold is not None:
                            if len(matches) < count_threshold:
                                match = False
                                break
                    if match:
                        row.append(rule['prediction'])
                    else:
                        row.append(0)
                elif logical_operator == 'OR':
                    # At least one pattern must match
                    submatch = False
                    for pattern_dict in rule['compiled_patterns']:
                        pat = pattern_dict['pattern']
                        matches = mol.GetSubstructMatches(pat)
                        if matches:
                            # Apply count threshold if specified
                            count_threshold = pattern_dict.get('count_threshold')
                            if count_threshold is not None:
                                if len(matches) >= count_threshold:
                                    submatch = True
                                    break
                            else:
                                submatch = True
                                break
                    if submatch:
                        row.append(rule['prediction'])
                    else:
                        row.append(0)
                else:
                    # Unsupported logical operator
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f"Rule {rule['number']}" for rule in rules])
    return df
--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: Modifiers that are **α-amino acids with acidic side chains**, containing an additional carboxylic acid group (-COOH) in the side chain (e.g., aspartic acid and glutamic acid), result in **high yield**. In contrast, α-amino acids with hydrophobic side chains, such as phenylalanine, result in **low yield**, unless the side chain contains an electron-rich heterocycle like an indole ring, which results in **high yield**.

  - *High Yield Examples*:
    - (2S)-2-aminobutanedioic acid *(Aspartic acid)*
    - (2S)-2-aminopentanedioic acid *(Glutamic acid)*
    - (2R)-2-amino-3-(1H-indol-3-yl)propanoic acid *(Tryptophan)*
  - *Low Yield Example*:
    - (2S)-2-amino-3-phenylpropanoic acid *(Phenylalanine)*

- **Rule 2**: Modifiers that are **aliphatic carboxylic acids with unbranched hydrocarbon chains of six or more carbons (C6 or greater)** result in **high yield**, unless they contain terminal amino groups (-NH₂), which result in **low yield** due to potential interference with the catalyst.

  - *High Yield Example*:
    - Octanoic acid
  - *Low Yield Examples*:
    - 7-aminoheptanoic acid
    - 8-aminooctanoic acid

- **Rule 3**: Modifiers that are **heteroaromatic carboxylic acids**, where the carboxyl group is directly attached to a nitrogen-containing heterocyclic ring, result in **high yield**.

  - *Examples*:
    - Pyridine-3-carboxylic acid *(Niacin)*
    - 1H-pyrazole-4-carboxylic acid
    - 2-oxo-1H-pyridine-4-carboxylic acid

- **Rule 4**: Modifiers that are **benzoic acid derivatives substituted at the para position with electron-withdrawing groups**, such as nitro (-NO₂) or bromomethyl (-CH₂Br), result in **high yield**. Substituents like nitro enhance the acidity and electron-deficient character of the aromatic ring. In contrast, **para-substituted electron-donating groups**, such as methyl (-CH₃), hydroxy (-OH), amino (-NH₂), or thiol (-SH), result in **low yield**.

  - *High Yield Examples*:
    - 4-nitrobenzoic acid
    - 4-(bromomethyl)benzoic acid
  - *Low Yield Examples*:
    - 4-methylbenzoic acid
    - 4-hydroxybenzoic acid
    - 4-aminobenzoic acid
    - 4-sulfanylbenzoic acid

- **Rule 5**: Modifiers with **multiple hydroxyl groups attached to an aliphatic chain**, such as sugar acids, result in **high yield**. The presence of hydroxyl groups increases solubility and may facilitate better interaction with the catalyst.

  - *Example*:
    - (2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid *(Gluconic acid)*

- **Rule 6**: Modifiers containing **polyether chains with multiple ether linkages** result in **low yield**. The ether groups may coordinate with the metal catalyst, potentially deactivating it.

  - *Low Yield Examples*:
    - 2-[2-(2-methoxyethoxy)ethoxy]acetic acid
    - 3-[2-(2-aminoethoxy)ethoxy]propanoic acid

- **Rule 7**: Modifiers with **additional carbonyl groups (aldehyde or ketone) attached directly to an aromatic ring** result in **low yield**. These groups can act as strong electron-withdrawing groups and may interfere with the catalyst's reactivity.

  - *Examples*:
    - 4-formylbenzoic acid
    - 5-formyl-2-hydroxybenzoic acid

- **Rule 8**: Modifiers containing **aromatic or heteroaromatic moieties connected via an aliphatic linker of four or more carbons to a carboxyl group** result in **high yield**. Longer linkers may reduce steric hindrance, allowing better interaction with the catalyst. Shorter linkers or direct attachment result in **low yield**.

  - *High Yield Examples*:
    - 5-(4-hydroxyphenyl)pentanoic acid
    - 4-pyridin-4-ylbutanoic acid
  - *Low Yield Examples*:
    - 3-(4-hydroxyphenyl)propanoic acid
    - 4-pyridin-4-ylbenzoic acid

- **Rule 9**: Modifiers where a **thiol group (-SH) is attached to an aliphatic chain** result in **high yield**, potentially due to minimal interference with the catalyst. In contrast, thiol groups attached directly to an aromatic ring result in **low yield**, possibly due to strong coordination with the metal center.

  - *High Yield Example*:
    - 3-sulfanylpropanoic acid
  - *Low Yield Example*:
    - 4-sulfanylbenzoic acid

- **Rule 10**: Modifiers containing **perfluorinated alkyl chains** result in **low yield**. The strong electron-withdrawing effect of fluorine atoms may destabilize interactions with the catalyst.

  - *Low Yield Example*:
    - 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid

- **Rule 11**: Modifiers that are **amide derivatives of carboxylic acids**, such as N-acetylated amino acids or compounds containing amide bonds, result in **low yield**. The amide group may coordinate with the catalyst and inhibit its activity.

  - *Examples*:
    - (2S)-6-acetamido-2-aminohexanoic acid
    - 2-[(4-hydroxybenzoyl)amino]acetic acid

- **Rule 12**: Modifiers with **electron-deficient aromatic systems or fused heterocycles with electron-withdrawing groups** result in **high yield**. These structures may stabilize catalyst interactions or reaction intermediates.

  - *Example*:
    - 1,3-dioxo-2-benzofuran-5-carboxylic acid

- **Rule 13**: Modifiers with **long aliphatic chains bearing functional groups capable of coordinating metal ions**, such as terminal amino groups (-NH₂), result in **low yield**. These groups can bind to the metal catalyst and inhibit its function.

  - *Low Yield Examples*:
    - 7-aminoheptanoic acid
    - 8-aminooctanoic acid
    - 3-[2-(2-aminoethoxy)ethoxy]propanoic acid

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1: Rule 1 High,Rule 1: Rule 1 High Indole,Rule 1: Rule 1 Low,Rule 2: Rule 2 High,Rule 2: Rule 2 Low,Rule 3: Rule 3 High,Rule 4: Rule 4 High,Rule 4: Rule 4 Low,Rule 5: Rule 5 High,Rule 6: Rule 6 Low,Rule 7: Rule 7 Low,Rule 8: Rule 8 High,Rule 8: Rule 8 Low,Rule 9: Rule 9 High,Rule 9: Rule 9 Low,Rule 10: Rule 10 Low,Rule 11: Rule 11 Low,Rule 12: Rule 12 High,Rule 13: Rule 13 Low
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,-1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,-1,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0
0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,-1,0,0,0,1,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0
0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6285714285714286; Test Accuracy: 0.0
    Train Support: 0.11428571428571428; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 2.0588235294117645; Test Lift: NONE
    Train Leverage: 0.05877551020408162; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and substructures
    patterns = {
        # Rule 1
        'Rule 1_high': [
            '[NX3;H2][CX4H][CX3](=O)[OX1H]',  # Alpha-amino acid backbone
            '[CX3](=O)[OX1H]',  # Carboxylic acid group
            '[CX3](=O)[OX1H][#6][#6][CX3](=O)[OX1H]',  # Additional COOH in side chain
        ],
        'Rule 1_high_indole': [
            '[NX3;H2][CX4H][CX3](=O)[OX1H]',  # Alpha-amino acid backbone
            'c1ccc2c(c1)[nH]c3ccccc23',  # Indole ring
        ],
        'Rule 1_low': [
            '[NX3;H2][CX4H][CX3](=O)[OX1H]',  # Alpha-amino acid backbone
            'c1ccccc1',  # Benzene ring (hydrophobic side chain)
        ],
        # Rule 2
        'Rule 2_high': [
            '[CH3][CH2][CH2][CH2][CH2][CH2][CX3](=O)[OX1H]',  # Unbranched C6 chain with carboxylic acid
        ],
        'Rule 2_low': [
            '[CH3][CH2][CH2][CH2][CH2][CH2][CX3](=O)[OX1H]',  # Unbranched C6 chain with carboxylic acid
            '[NX3;H2]',  # Terminal amino group
        ],
        # Rule 3
        'Rule 3_high': [
            '[nX2][c][CX3](=O)[OX1H]',  # Carboxylic acid attached to nitrogen-containing aromatic ring
        ],
        # Rule 4
        'Rule 4_high': [
            'O=C(O)c1ccc([N+](=O)[O-])cc1',  # Para-nitrobenzoic acid
            'O=C(O)c1ccc(CBr)cc1',  # Para-bromomethylbenzoic acid
        ],
        'Rule 4_low': [
            'O=C(O)c1ccc([CH3])cc1',  # Para-methylbenzoic acid
            'O=C(O)c1ccc(O)cc1',  # Para-hydroxybenzoic acid
            'O=C(O)c1ccc(N)cc1',  # Para-aminobenzoic acid
            'O=C(O)c1ccc(S)cc1',  # Para-sulfanylbenzoic acid
        ],
        # Rule 5
        'Rule 5_high': [
            'O=C(O)[C@H](O)[C@@H](O)[C@@H](O)[C@@H](O)CO',  # Sugar acids like gluconic acid
        ],
        # Rule 6
        'Rule 6_low': [
            '[#6][OX2][#6][OX2][#6][OX2][#6]',  # Polyether chain with multiple ether linkages
        ],
        # Rule 7
        'Rule 7_low': [
            'c[C](=O)[CX3](=O)[OX1H]',  # Carbonyl attached to aromatic ring
        ],
        # Rule 8
        'Rule 8_high': [
            'c[#6]-[#6]-[#6]-[#6][CX3](=O)[OX1H]',  # Aromatic connected via 4-carbon linker to COOH
        ],
        'Rule 8_low': [
            'c[#6]-[#6]-[#6][CX3](=O)[OX1H]',  # Aromatic connected via short linker to COOH
        ],
        # Rule 9
        'Rule 9_high': [
            '[#6][CH2][CH2][SX2H]',  # Thiol group attached to aliphatic chain
        ],
        'Rule 9_low': [
            'c[SX2H]',  # Thiol group attached directly to aromatic ring
        ],
        # Rule 10
        'Rule 10_low': [
            '[CX3](=O)[NX3][#6]',  # Amide group
        ],
        # Rule 11
        'Rule 11_low': [
            '[CX3](=O)[NX3][#6]',  # Amide derivatives
        ],
        # Rule 12
        'Rule 12_high': [
            'c1cc(=O)oc1C(=O)O',  # Electron-deficient aromatic systems or fused heterocycles with EWGs
        ],
        # Rule 13
        'Rule 13_low': [
            '[CH3][CH2][CH2][CH2][CH2][CH2][CH2][NX3;H2]',  # Long aliphatic chain with terminal amino group
        ],
    }
    
    # Compile patterns
    compiled_patterns = {}
    for pat_name, smarts_list in patterns.items():
        compiled_list = []
        for smarts in smarts_list:
            mol = Chem.MolFromSmarts(smarts)
            if mol is not None:
                compiled_list.append(mol)
        compiled_patterns[pat_name] = compiled_list
    
    # Define rules with their predictions
    rules = [
        {'number': 1, 'name': 'Rule 1 High', 'patterns': ['Rule 1_high'], 'prediction': 1},
        {'number': 1, 'name': 'Rule 1 High Indole', 'patterns': ['Rule 1_high_indole'], 'prediction': 1},
        {'number': 1, 'name': 'Rule 1 Low', 'patterns': ['Rule 1_low'], 'prediction': -1},
        {'number': 2, 'name': 'Rule 2 High', 'patterns': ['Rule 2_high'], 'exclude_patterns': ['Rule 2_low'], 'prediction': 1},
        {'number': 2, 'name': 'Rule 2 Low', 'patterns': ['Rule 2_low'], 'prediction': -1},
        {'number': 3, 'name': 'Rule 3 High', 'patterns': ['Rule 3_high'], 'prediction': 1},
        {'number': 4, 'name': 'Rule 4 High', 'patterns': ['Rule 4_high'], 'prediction': 1},
        {'number': 4, 'name': 'Rule 4 Low', 'patterns': ['Rule 4_low'], 'prediction': -1},
        {'number': 5, 'name': 'Rule 5 High', 'patterns': ['Rule 5_high'], 'prediction': 1},
        {'number': 6, 'name': 'Rule 6 Low', 'patterns': ['Rule 6_low'], 'prediction': -1},
        {'number': 7, 'name': 'Rule 7 Low', 'patterns': ['Rule 7_low'], 'prediction': -1},
        {'number': 8, 'name': 'Rule 8 High', 'patterns': ['Rule 8_high'], 'exclude_patterns': ['Rule 8_low'], 'prediction': 1},
        {'number': 8, 'name': 'Rule 8 Low', 'patterns': ['Rule 8_low'], 'prediction': -1},
        {'number': 9, 'name': 'Rule 9 High', 'patterns': ['Rule 9_high'], 'prediction': 1},
        {'number': 9, 'name': 'Rule 9 Low', 'patterns': ['Rule 9_low'], 'prediction': -1},
        {'number': 10, 'name': 'Rule 10 Low', 'patterns': ['Rule 10_low'], 'prediction': -1},
        {'number': 11, 'name': 'Rule 11 Low', 'patterns': ['Rule 11_low'], 'prediction': -1},
        {'number': 12, 'name': 'Rule 12 High', 'patterns': ['Rule 12_high'], 'prediction': 1},
        {'number': 13, 'name': 'Rule 13 Low', 'patterns': ['Rule 13_low'], 'prediction': -1},
    ]
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for epat_name in rule['exclude_patterns']:
                        epats = compiled_patterns[epat_name]
                        for epat in epats:
                            if mol.HasSubstructMatch(epat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for pat_name in rule['patterns']:
                    pats = compiled_patterns[pat_name]
                    group_match = False
                    for pat in pats:
                        if mol.HasSubstructMatch(pat):
                            group_match = True
                            break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except:
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}: {rule["name"]}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: Modifiers that are **aliphatic carboxylic acids with unbranched hydrocarbon chains of six or more carbons (C6 or greater)** without additional functional groups result in **high yield**. However, if the chain contains a **terminal amino group (-NH₂) beyond the γ-carbon**, they result in **low yield** due to potential interference with the catalyst.

  - *High Yield Example*:
    - Octanoic acid
  - *Low Yield Examples*:
    - 7-aminoheptanoic acid
    - 8-aminooctanoic acid

- **Rule 2**: Modifiers that are **α-amino acids with acidic side chains**, containing an additional carboxylic acid group (-COOH) in the side chain (e.g., aspartic acid and glutamic acid), result in **high yield**. In contrast, α-amino acids with hydrophobic side chains, such as phenylalanine, or amino acids with modified side chains (e.g., N-acetylated lysine), result in **low yield**.

  - *High Yield Examples*:
    - (2S)-2-aminobutanedioic acid *(Aspartic acid)*
    - (2S)-2-aminopentanedioic acid *(Glutamic acid)*
  - *Low Yield Examples*:
    - (2S)-2-amino-3-phenylpropanoic acid *(Phenylalanine)*
    - (2S)-6-acetamido-2-aminohexanoic acid *(N-Acetyl-Lysine)*

- **Rule 3**: Modifiers that are **benzoic acid derivatives substituted at the para position with electron-withdrawing groups**, such as nitro (-NO₂), bromomethyl (-CH₂Br), or amino (-NH₂), result in **high yield**. Conversely, para-substituted electron-donating groups, such as methyl (-CH₃) or hydroxy (-OH), result in **low yield** due to reduced interaction with the catalyst.

  - *High Yield Examples*:
    - 4-nitrobenzoic acid
    - 4-(bromomethyl)benzoic acid
    - 4-aminobenzoic acid
  - *Low Yield Examples*:
    - 4-methylbenzoic acid
    - 4-hydroxybenzoic acid

- **Rule 4**: Modifiers that are **heteroaromatic carboxylic acids**, where the carboxyl group is directly attached to a nitrogen-containing heterocyclic ring, result in **high yield**. The heteroatom can coordinate with the metal center, enhancing catalyst performance.

  - *High Yield Examples*:
    - Pyridine-3-carboxylic acid *(Niacin)*
    - 2-oxo-1H-pyridine-4-carboxylic acid
    - 1H-pyrazole-4-carboxylic acid

- **Rule 5**: Modifiers with **multiple hydroxyl groups attached to an aliphatic chain**, such as sugar acids, result in **high yield**. The hydroxyl groups increase solubility and provide multiple coordination sites with the catalyst.

  - *High Yield Example*:
    - (2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid *(Gluconic acid)*

- **Rule 6**: Modifiers containing **thiol groups (-SH) on short aliphatic chains** result in **high yield**, as the thiol can interact beneficially with the catalyst. In contrast, thiol groups attached directly to an aromatic ring result in **low yield**, possibly due to strong, inhibitory coordination with the metal center.

  - *High Yield Example*:
    - 3-sulfanylpropanoic acid
  - *Low Yield Example*:
    - 4-sulfanylbenzoic acid

- **Rule 7**: Modifiers with **polyether chains containing multiple ether linkages** result in **low yield**. The ether oxygens may coordinate with the catalyst in a way that deactivates it.

  - *Low Yield Examples*:
    - 2-[2-(2-methoxyethoxy)ethoxy]acetic acid
    - 3-[2-(2-aminoethoxy)ethoxy]propanoic acid

- **Rule 8**: Modifiers that are **α-amino acids with aromatic side chains containing electron-rich heterocycles**, such as tryptophan, result in **high yield**. The heterocycle can facilitate effective catalyst interaction.

  - *High Yield Example*:
    - (2R)-2-amino-3-(1H-indol-3-yl)propanoic acid *(Tryptophan)*

- **Rule 9**: Modifiers with **aromatic rings substituted with aldehyde (-CHO) or ketone (C=O) groups directly attached to the ring** result in **low yield**. These groups can strongly withdraw electrons and potentially disrupt catalyst activity.

  - *Low Yield Examples*:
    - 4-formylbenzoic acid
    - 5-formyl-2-hydroxybenzoic acid

- **Rule 10**: Modifiers containing **perfluorinated alkyl chains** result in **low yield**. The strong electron-withdrawing effect of fluorine atoms may destabilize interactions with the catalyst or substrate.

  - *Low Yield Example*:
    - 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid

- **Rule 11**: Modifiers that are **amide derivatives of carboxylic acids**, including N-acetylated amino acids or compounds containing amide bonds, result in **low yield**. The amide group may coordinate with the catalyst in a way that inhibits its activity.

  - *Low Yield Examples*:
    - (2S)-6-acetamido-2-aminohexanoic acid
    - 2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid
    - 2-[(4-hydroxybenzoyl)amino]acetic acid

- **Rule 12**: Modifiers with **aromatic or heteroaromatic moieties connected via an aliphatic linker of four or more carbons to a carboxyl group** result in **high yield**. Longer linkers may reduce steric hindrance, allowing better interaction with the catalyst. Shorter linkers or direct attachment result in **low yield**.

  - *High Yield Examples*:
    - 5-(4-hydroxyphenyl)pentanoic acid
    - 4-pyridin-4-ylbutanoic acid
  - *Low Yield Examples*:
    - 3-(4-hydroxyphenyl)propanoic acid
    - 4-pyridin-4-ylbenzoic acid

- **Rule 13**: Modifiers containing **aromatic rings with methoxy groups (-OCH₃) and ketone functionalities in the side chain** result in **high yield**. These groups can enhance electron distribution and facilitate catalytic activity.

  - *High Yield Example*:
    - 4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid

- **Rule 14**: Modifiers with **additional carboxyl groups (-COOH) in the side chain beyond the α-position**, such as dicarboxylic acids, result in **high yield**. The extra carboxyl group may enhance binding and orientation with the catalyst.

  - *High Yield Example*:
    - (2S)-2-aminobutanedioic acid *(Aspartic acid)*

- **Rule 15**: Modifiers containing **electron-deficient aromatic systems or fused heterocycles with electron-withdrawing substituents** result in **high yield**. These structures may stabilize catalyst interactions or reaction intermediates.

  - *High Yield Example*:
    - 1,3-dioxo-2-benzofuran-5-carboxylic acid

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 1,Rule 2,Rule 2,Rule 2,Rule 3,Rule 3,Rule 4,Rule 5
1,0,0,0,0,0,0,0,0
1,-1,1,0,0,0,0,0,0
1,0,0,0,0,1,0,0,0
1,-1,1,0,0,0,0,0,0
1,-1,0,0,0,0,0,0,0
1,-1,0,0,0,1,0,0,0
1,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0
1,0,0,0,0,1,0,0,0
1,-1,1,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0
1,-1,1,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0
1,0,0,0,0,1,0,0,0
1,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0
1,0,0,0,0,1,0,0,0
1,0,0,0,0,0,0,0,0
1,0,0,0,0,1,-1,0,0
1,-1,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0
1,-1,0,0,0,0,0,0,0
1,-1,0,0,0,0,0,0,0
1,-1,1,0,-1,0,0,0,0
1,-1,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.5428571428571428; Test Accuracy: 0.0
    Train Support: 0.02857142857142857; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 2.0588235294117645; Test Lift: NONE
    Train Leverage: 0.014693877551020406; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and structures according to the rules

    # Rule 1:
    # High Yield: Aliphatic carboxylic acids with unbranched hydrocarbon chains of six or more carbons (C6 or greater) without additional functional groups
    # Low Yield: If the chain contains a terminal amino group (-NH2) beyond the gamma carbon, results in low yield

    # Pattern for carboxylic acid
    carboxylic_acid = Chem.MolFromSmarts('[CX3](=O)[OX1H0-,OX2H1]')

    # Pattern for amino group (-NH2)
    amino_group = Chem.MolFromSmarts('[NX3H2]')

    # Rule 2:
    # High Yield: α-amino acids with acidic side chains (additional -COOH in side chain, e.g., aspartic acid, glutamic acid)
    # Low Yield: α-amino acids with hydrophobic side chains or modified side chains (e.g., N-acetylated lysine)

    # Pattern for α-amino acid backbone
    alpha_amino_acid = Chem.MolFromSmarts('[NX3][CX4H]([#6])[CX3](=O)[OX1H0-,OX2H1]')

    # Pattern for acidic side chain (-COOH)
    side_chain_acid = Chem.MolFromSmarts('[CX3](=O)[OX1H0-,OX2H1]')

    # Pattern for hydrophobic side chains (e.g., phenylalanine)
    hydrophobic_side_chain = Chem.MolFromSmarts('[CH2][c]')  # Simplified pattern for aromatic side chain

    # Pattern for modified side chains (e.g., N-acetylation)
    n_acetylation = Chem.MolFromSmarts('[NX3][CX3](=O)[#6]')

    # Rule 3:
    # High Yield: Benzoic acid derivatives substituted at para position with electron-withdrawing groups (e.g., nitro, bromomethyl, amino)
    # Low Yield: Para-substituted electron-donating groups (e.g., methyl, hydroxy)

    # Pattern for benzoic acid
    benzoic_acid = Chem.MolFromSmarts('c1ccc(cc1)C(=O)O')

    # Electron-withdrawing groups (EWGs) at para position
    ewg_para_substituted = Chem.MolFromSmarts('c1cc([*!H])[cH]cc1C(=O)O')

    # Electron-donating groups (EDGs) at para position
    edg_para_substituted = Chem.MolFromSmarts('c1cc([CH3,OH])[cH]cc1C(=O)O')

    # Rule 4:
    # High Yield: Heteroaromatic carboxylic acids with carboxyl group directly attached to nitrogen-containing heterocyclic ring

    # Pattern for heteroaromatic ring containing nitrogen with attached carboxylic acid
    heteroaromatic_nitrogen_ring_with_carboxylic_acid = Chem.MolFromSmarts('[nH]1cccc1C(=O)[O,H]')

    # Rule 5:
    # High Yield: Modifiers with multiple hydroxyl groups attached to an aliphatic chain (e.g., sugar acids)

    # Pattern for chain with multiple hydroxyl groups and carboxylic acid
    polyhydroxy_carboxylic_acid = Chem.MolFromSmarts('[CX4H1][OX2H][CX4H][OX2H][CX4H][OX2H][CX3](=O)[OX1H0-,OX2H1]')

    # Define the rules
    rules = [
        {
            'number': 1,
            'description': 'High Yield: Aliphatic carboxylic acids with unbranched hydrocarbon chains of six or more carbons without additional functional groups.',
            'patterns': [carboxylic_acid],
            'function': None,
            'prediction': 1
        },
        {
            'number': 1,
            'description': 'Low Yield: Aliphatic carboxylic acids with unbranched hydrocarbon chains of six or more carbons containing a terminal amino group beyond the gamma carbon.',
            'patterns': [carboxylic_acid, amino_group],
            'function': None,
            'prediction': -1
        },
        {
            'number': 2,
            'description': 'High Yield: α-amino acids with acidic side chains (additional -COOH in side chain).',
            'patterns': [alpha_amino_acid, side_chain_acid],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Low Yield: α-amino acids with hydrophobic side chains or modified side chains.',
            'patterns': [alpha_amino_acid, hydrophobic_side_chain],
            'exclude_patterns': [side_chain_acid],
            'prediction': -1
        },
        {
            'number': 2,
            'description': 'Low Yield: α-amino acids with modified side chains (e.g., N-acetylated lysine).',
            'patterns': [alpha_amino_acid, n_acetylation],
            'exclude_patterns': [],
            'prediction': -1
        },
        {
            'number': 3,
            'description': 'High Yield: Benzoic acid derivatives substituted at the para position with electron-withdrawing groups.',
            'patterns': [ewg_para_substituted],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Low Yield: Benzoic acid derivatives substituted at the para position with electron-donating groups.',
            'patterns': [edg_para_substituted],
            'prediction': -1
        },
        {
            'number': 4,
            'description': 'High Yield: Heteroaromatic carboxylic acids with carboxyl group directly attached to nitrogen-containing heterocyclic ring.',
            'patterns': [heteroaromatic_nitrogen_ring_with_carboxylic_acid],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'High Yield: Modifiers with multiple hydroxyl groups attached to an aliphatic chain.',
            'patterns': [polyhydroxy_carboxylic_acid],
            'prediction': 1
        },
        # Additional rules can be added here...
    ]

    # Compile the patterns
    for rule in rules:
        compiled_patterns = []
        for pat in rule['patterns']:
            compiled_patterns.append(pat)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for pat in rule['exclude_patterns']:
                compiled_excludes.append(pat)
            rule['compiled_exclude_patterns'] = compiled_excludes

    # Initialize results list
    results = []
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0 for rule in rules])
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for pat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                for pat in rule['compiled_patterns']:
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                row.append(0)
        results.append(row)
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: Modifiers that are **straight-chain aliphatic carboxylic acids with six or more carbon atoms (C6 or greater)** and **no additional functional groups** result in **high yield**. The long hydrophobic chain may enhance interactions with the catalyst's hydrophobic regions.

  - *High Yield Example*:
    - **Octanoic acid**
  
  - *Low Yield Examples*:
    - **7-aminoheptanoic acid**
    - **8-aminooctanoic acid**

- **Rule 2**: Modifiers that are **α-amino acids with an additional carboxyl group in the side chain**, such as **aspartic acid** and **glutamic acid**, result in **high yield** due to the ability to coordinate with the catalyst through both carboxylate groups.

  - *High Yield Examples*:
    - **(2S)-2-aminobutanedioic acid** *(Aspartic acid)*
    - **(2S)-2-aminopentanedioic acid** *(Glutamic acid)*

- **Rule 3**: Modifiers that are **aromatic carboxylic acids substituted at the para position with coordinating functional groups**, such as **amino (-NH₂)** or **nitro (-NO₂)** groups, result in **high yield**. These groups can facilitate interaction with the catalyst's metal center.

  - *High Yield Examples*:
    - **4-aminobenzoic acid**
    - **4-nitrobenzoic acid**
  
  - *Low Yield Examples*:
    - **4-methylbenzoic acid**
    - **4-formylbenzoic acid**

- **Rule 4**: Modifiers that are **heteroaromatic carboxylic acids with nitrogen-containing rings**, where the carboxyl group is directly attached to the ring, result in **high yield**. The nitrogen atom can coordinate with the catalyst.

  - *High Yield Examples*:
    - **Pyridine-3-carboxylic acid** *(Nicotinic acid)*
    - **1H-pyrazole-4-carboxylic acid**
    - **2-oxo-1H-pyridine-4-carboxylic acid**

  - *Low Yield Example*:
    - **4-pyridin-4-ylbenzoic acid** *(Steric hindrance may reduce effectiveness)*

- **Rule 5**: Modifiers containing **terminal amino groups on medium-length aliphatic chains (five carbons)** result in **high yield**, whereas **longer chains with terminal amino groups** result in **low yield**. Chain length and coordination ability influence the interaction with the catalyst.

  - *High Yield Example*:
    - **5-aminopentanoic acid**
  
  - *Low Yield Examples*:
    - **7-aminoheptanoic acid**
    - **8-aminooctanoic acid**

- **Rule 6**: Modifiers that are **aromatic acids linked to the carboxyl group via an aliphatic chain of four or more carbons** result in **high yield**, as the longer linker may reduce steric hindrance and enhance catalyst interaction.

  - *High Yield Examples*:
    - **5-(4-hydroxyphenyl)pentanoic acid**
    - **4-pyridin-4-ylbutanoic acid**
  
  - *Low Yield Examples*:
    - **3-(4-hydroxyphenyl)propanoic acid**
    - **4-pyridin-4-ylbenzoic acid**

- **Rule 7**: Modifiers with **multiple hydroxyl groups attached to an aliphatic chain**, such as **sugar acids**, result in **high yield**. The hydroxyl groups may provide multiple coordination sites with the catalyst.

  - *High Yield Example*:
    - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** *(Gluconic acid)*

- **Rule 8**: Modifiers with **aldehyde groups (-CHO) attached to aromatic rings** result in **low yield**. The aldehyde may form inactive complexes with the catalyst.

  - *Low Yield Examples*:
    - **4-formylbenzoic acid**
    - **5-formyl-2-hydroxybenzoic acid**

- **Rule 9**: Modifiers containing **amide bonds**, such as **N-acetylated amino acids** or **compounds with amide linkages**, result in **low yield**. The amide group may inhibit catalyst activity.

  - *Low Yield Examples*:
    - **(2S)-6-acetamido-2-aminohexanoic acid**
    - **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid**
    - **2-[(4-hydroxybenzoyl)amino]acetic acid**

- **Rule 10**: Modifiers with **multiple ether linkages (-O-) in aliphatic chains** result in **low yield**. The ether oxygen atoms may coordinate unfavorably with the catalyst.

  - *Low Yield Examples*:
    - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**
    - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**

- **Rule 11**: Modifiers containing **perfluorinated alkyl chains** result in **low yield** due to strong electron-withdrawing effects that may hinder catalyst interaction.

  - *Low Yield Example*:
    - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**

- **Rule 12**: Modifiers that are **α-amino acids with aromatic side chains containing electron-rich heterocycles**, such as **indole rings**, result in **high yield**.

  - *High Yield Example*:
    - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** *(Tryptophan)*
  
  - *Low Yield Example*:
    - **(2S)-2-amino-3-phenylpropanoic acid** *(Phenylalanine)*

- **Rule 13**: Modifiers with **thiol groups (-SH) on short aliphatic chains** result in **high yield**, whereas **thiol groups directly attached to an aromatic ring** result in **low yield**.

  - *High Yield Example*:
    - **3-sulfanylpropanoic acid**

  - *Low Yield Example*:
    - **4-sulfanylbenzoic acid**

- **Rule 14**: Modifiers containing **oxygen-containing fused ring systems or lactones** result in **high yield** due to possible favorable interactions with the catalyst.

  - *High Yield Example*:
    - **1,3-dioxo-2-benzofuran-5-carboxylic acid**

- **Rule 15**: Modifiers that are **aliphatic dicarboxylic acids with internal ketone groups** result in **low yield**. The ketone group may negatively affect catalyst interaction.

  - *Low Yield Example*:
    - **4-oxoheptanedioic acid**

**End of Rules**

---

These rules have been carefully developed to reflect the relationships between the molecular features of the modifiers and the reaction yield, based on the provided dataset and underlying chemical principles. By combining multiple functional groups and structural motifs, the rules offer predictive power for determining whether a given modifier is likely to result in a high or low yield in the reaction.

The rules consider physical-chemical properties such as electronic effects, steric factors, chain length, and the ability of functional groups to coordinate with the catalyst's metal center. This approach ensures that the rules are grounded in chemical reasoning, making them robust and applicable to a broad range of similar compounds.

By focusing on both broad trends and specific functional group effects, the rules maintain a balance between coverage and specificity, aligning with the requirements to prioritize rules that cover a broader range of the dataset while also acknowledging more complex, narrower cases.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 5.1,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,1,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,1,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,1,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0
1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6285714285714286; Test Accuracy: 0.0
    Train Support: 0.11428571428571428; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 2.0588235294117645; Test Lift: NONE
    Train Leverage: 0.05877551020408162; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and structural features
    
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    
    # Amino group (-NH2), primary amine
    amino_group = '[NX3;H2]'
    
    # Nitro group (-NO2)
    nitro_group = '[NX3](=O)[O-]'
    
    # Aromatic ring with carboxylic acid attached
    aromatic_carboxylic_acid = 'c[C](=O)[O,H]'
    
    # Para-substituted amino group on aromatic ring
    para_amino_benzoic_acid = 'c1ccc(cc1C(=O)[O,H])N'
    
    # Para-substituted nitro group on aromatic ring
    para_nitro_benzoic_acid = 'c1ccc(cc1C(=O)[O,H])[N+](=O)[O-]'
    
    # Heteroaromatic ring containing nitrogen with carboxylic acid attached
    heteroaromatic_nitrogen_with_carboxylic_acid = '[n,c][c,n][c,n][c,n][c,n][c,n][C](=O)[O,H]'
    
    # Thiol group (-SH)
    thiol_group = '[SX2H]'
    
    # Aldehyde group (-CHO) attached to aromatic ring
    aromatic_aldehyde = '[#6](=O)[#6]'  # Simplified pattern
    
    # Amide group (-CONH-)
    amide_group = '[C](=O)[NH2,NH]'  # General amide pattern
    
    # Ether linkage (-O-) in aliphatic chains
    ether_linkage = '[#6][OX2][#6]'
    
    # Perfluorinated alkyl chains
    perfluoro_alkyl = '[CF3,CF2][CF2]'
    
    # Sugar acids (multiple hydroxyl groups attached to aliphatic chain)
    sugar_acid = '[#6][OX2H]'
    
    # Long aliphatic chain of six or more carbons
    long_aliphatic_chain = '[CH2]CCCC[CH2]'
    
    # Alpha-amino acid with additional carboxyl group in side chain
    alpha_amino_acid_with_side_carboxyl = '[NX3;H2][CX4][CX3](=O)[OX2H1]'
    side_chain_carboxylic_acid = '[CX3](=O)[OX2H1]'
    
    # Terminal amino group on aliphatic chain
    terminal_amino_group = '[NX3;H2][CH2][CH2][CH2][CH2][CX3](=O)[OX2H1]'
    longer_terminal_amino_group = '[NX3;H2][CH2][CH2][CH2][CH2][CH2][CX3](=O)[OX2H1]'
    
    # Aromatic acids linked via aliphatic chain of four or more carbons
    aromatic_acid_with_long_linker = 'c1ccccc1[CH2][CH2][CH2][CH2][CX3](=O)[OX2H1]'
    
    # Lactones or oxygen-containing fused ring systems
    lactone = '[O]1[C,C][C,C][C,C][C,C]1'
    
    # Aliphatic dicarboxylic acids with internal ketone groups
    aliphatic_dicarboxylic_with_ketone = '[CX3](=O)[#6][CX3](=O)[#6][CX3](=O)[OX2H1]'
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'High Yield: Straight-chain aliphatic carboxylic acids with six or more carbon atoms and no additional functional groups.',
            'function': check_rule1,
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'High Yield: Alpha-amino acids with an additional carboxyl group in the side chain.',
            'function': check_rule2,
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'High Yield: Aromatic carboxylic acids substituted at the para position with amino or nitro groups.',
            'patterns': [para_amino_benzoic_acid, para_nitro_benzoic_acid],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'High Yield: Heteroaromatic carboxylic acids with nitrogen-containing rings where the carboxyl group is directly attached to the ring.',
            'function': check_rule4,
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'High Yield: Modifiers containing terminal amino groups on aliphatic chains of five carbons.',
            'patterns': [terminal_amino_group],
            'prediction': 1
        },
        {
            'number': 5.1,
            'description': 'Low Yield: Modifiers containing terminal amino groups on longer aliphatic chains.',
            'patterns': [longer_terminal_amino_group],
            'prediction': -1
        },
        {
            'number': 6,
            'description': 'High Yield: Aromatic acids linked to the carboxyl group via an aliphatic chain of four or more carbons.',
            'patterns': [aromatic_acid_with_long_linker],
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'High Yield: Modifiers with multiple hydroxyl groups attached to an aliphatic chain (sugar acids).',
            'function': check_rule7,
            'prediction': 1
        },
        {
            'number': 8,
            'description': 'Low Yield: Modifiers with aldehyde groups (-CHO) attached to aromatic rings.',
            'patterns': [aromatic_aldehyde],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Low Yield: Modifiers containing amide bonds.',
            'patterns': [amide_group],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Low Yield: Modifiers with multiple ether linkages (-O-) in aliphatic chains.',
            'patterns': [ether_linkage],
            'prediction': -1,
            'count_threshold': {'[OX2]': 2}
        },
        {
            'number': 11,
            'description': 'Low Yield: Modifiers containing perfluorinated alkyl chains.',
            'patterns': [perfluoro_alkyl],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'High Yield: Alpha-amino acids with aromatic side chains containing electron-rich heterocycles (e.g., indole rings).',
            'function': check_rule12,
            'prediction': 1
        },
        {
            'number': 13,
            'description': 'High Yield: Modifiers with thiol groups (-SH) on short aliphatic chains; Low Yield if thiol is attached to aromatic ring.',
            'patterns': [thiol_group],
            'function': check_rule13,
            'prediction': None  # Prediction determined in function
        },
        {
            'number': 14,
            'description': 'High Yield: Modifiers containing oxygen-containing fused ring systems or lactones.',
            'patterns': [lactone],
            'prediction': 1
        },
        {
            'number': 15,
            'description': 'Low Yield: Modifiers that are aliphatic dicarboxylic acids with internal ketone groups.',
            'patterns': [aliphatic_dicarboxylic_with_ketone],
            'prediction': -1
        },
    ]
    
    # Compile the SMARTS patterns
    for rule in rules:
        if 'patterns' in rule:
            rule['compiled_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule['patterns']]
        if 'function' in rule and rule['function'] is not None:
            pass  # Functions will be called for these rules
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # Cannot parse SMILES
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            match = False
            try:
                if 'compiled_patterns' in rule:
                    for pat in rule['compiled_patterns']:
                        matches = mol.GetSubstructMatches(pat)
                        if matches:
                            # If a count threshold is specified for this pattern
                            if 'count_threshold' in rule:
                                threshold = list(rule['count_threshold'].values())[0]
                                atom_pattern = list(rule['count_threshold'].keys())[0]
                                atom_pat = Chem.MolFromSmarts(atom_pattern)
                                atom_matches = mol.GetSubstructMatches(atom_pat)
                                if len(atom_matches) >= threshold:
                                    match = True
                                    break
                            else:
                                match = True
                                break
                if 'function' in rule and rule['function'] is not None:
                    func_match = rule['function'](mol)
                    if isinstance(func_match, tuple):
                        match, prediction = func_match
                        if prediction is not None:
                            rule['prediction'] = prediction
                    else:
                        match = func_match
                
            except:
                match = False
            if match:
                if rule['prediction'] is not None:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            else:
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

# Define helper functions for rules that require complex logic

def check_rule1(mol):
    # Rule 1: Straight-chain aliphatic carboxylic acids with six or more carbons and no additional functional groups
    try:
        carboxylic_acid_pat = Chem.MolFromSmarts('[CX3](=O)[OX2H1]')
        matches = mol.GetSubstructMatches(carboxylic_acid_pat)
        if len(matches) != 1:
            return False
        # Count number of carbons in the longest carbon chain
        paths = Chem.rdmolops.FindAllPathsOfLengthN(mol, 6, useBonds=False)
        for path in paths:
            atoms_in_path = [mol.GetAtomWithIdx(idx) for idx in path]
            if all(atom.GetAtomicNum() == 6 for atom in atoms_in_path):
                # Ensure no branching and no heteroatoms
                neighbor_counts = [len(atom.GetNeighbors()) for atom in atoms_in_path]
                if max(neighbor_counts) <= 2:
                    # Check for heteroatoms
                    if all(neighbor.GetAtomicNum() in [1,6] for atom in atoms_in_path for neighbor in atom.GetNeighbors()):
                        return True
        return False
    except:
        return False

def check_rule2(mol):
    # Rule 2: Alpha-amino acids with an additional carboxyl group in the side chain
    try:
        alpha_amino_acid_pat = Chem.MolFromSmarts('[NX3;H2][CX4][CX3](=O)[OX2H1]')
        matches = mol.GetSubstructMatches(alpha_amino_acid_pat)
        if not matches:
            return False
        # Check for additional carboxylic acid in the side chain
        carboxylic_acid_pat = Chem.MolFromSmarts('[CX3](=O)[OX2H1]')
        side_chain_matches = mol.GetSubstructMatches(carboxylic_acid_pat)
        if len(side_chain_matches) >= 2:
            return True
        return False
    except:
        return False

def check_rule4(mol):
    # Rule 4: Heteroaromatic carboxylic acids with nitrogen-containing rings
    try:
        carboxylic_acid_pat = Chem.MolFromSmarts('[c,n][C](=O)[OX2H1]')
        matches = mol.GetSubstructMatches(carboxylic_acid_pat)
        for match in matches:
            atom = mol.GetAtomWithIdx(match[0])
            if atom.IsInRing() and atom.GetIsAromatic() and atom.GetAtomicNum() == 7:
                return True
        return False
    except:
        return False

def check_rule7(mol):
    # Rule 7: Modifiers with multiple hydroxyl groups attached to an aliphatic chain (sugar acids)
    try:
        hydroxyl_pat = Chem.MolFromSmarts('[CX4][OX2H]')
        matches = mol.GetSubstructMatches(hydroxyl_pat)
        if len(matches) >= 3:
            return True
        return False
    except:
        return False

def check_rule12(mol):
    # Rule 12: Alpha-amino acids with aromatic side chains containing electron-rich heterocycles (e.g., indole)
    try:
        alpha_amino_acid_pat = Chem.MolFromSmarts('[NX3;H2][CX4][CX3](=O)[OX2H1]')
        matches = mol.GetSubstructMatches(alpha_amino_acid_pat)
        if not matches:
            return False
        indole_pat = Chem.MolFromSmarts('c1ccc2c(c1)[nH]c2')
        if mol.HasSubstructMatch(indole_pat):
            return True
        return False
    except:
        return False

def check_rule13(mol):
    # Rule 13: High Yield if thiol on short aliphatic chain; Low Yield if thiol attached to aromatic ring
    try:
        thiol_pat = Chem.MolFromSmarts('[SX2H]')
        matches = mol.GetSubstructMatches(thiol_pat)
        for match in matches:
            atom = mol.GetAtomWithIdx(match[0])
            neighbors = atom.GetNeighbors()
            for neighbor in neighbors:
                if neighbor.GetIsAromatic():
                    return (True, -1)  # Low Yield
                elif neighbor.GetAtomicNum() == 6 and neighbor.GetTotalDegree() <= 2:
                    return (True, 1)  # High Yield
        return False
    except:
        return False

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: Modifiers that are **aromatic carboxylic acids with para-substituted electron-donating groups capable of metal coordination**, such as **amino (-NH₂)** or **hydroxyl (-OH)** groups, result in **high yield**. These groups enhance coordination with the metal center of the catalyst.

  - *High Yield Examples*:
    - **4-aminobenzoic acid**
    - **5-(4-hydroxyphenyl)pentanoic acid**

  - *Low Yield Examples*:
    - **4-methylbenzoic acid** *(Methyl group lacks coordination ability)*
    - **3-(4-hydroxyphenyl)propanoic acid** *(Shorter linker reduces effectiveness)*

- **Rule 2**: Modifiers that are **aromatic carboxylic acids with para-substituted electron-withdrawing groups**, such as **formyl (-CHO)** or **fluoroalkyl groups**, result in **low yield**. These substituents decrease electron density and hinder effective coordination.

  - *Low Yield Examples*:
    - **4-formylbenzoic acid**
    - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**

- **Rule 3**: Modifiers that are **heteroaromatic carboxylic acids containing nitrogen atoms in the ring**, capable of coordinating with the metal center, result in **high yield**. Nitrogen atoms provide lone pairs for strong coordination.

  - *High Yield Examples*:
    - **Pyridine-3-carboxylic acid** *(Nicotinic acid)*
    - **1H-pyrazole-4-carboxylic acid**
    - **2-oxo-1H-pyridine-4-carboxylic acid**

- **Rule 4**: Modifiers that are **aliphatic carboxylic acids with terminal amino (-NH₂) or thiol (-SH) groups on chains of five carbons or fewer** result in **high yield**, enhancing coordination with the catalyst. Longer chains result in **low yield** due to steric hindrance.

  - *High Yield Examples*:
    - **5-aminopentanoic acid**
    - **3-sulfanylpropanoic acid**

  - *Low Yield Examples*:
    - **7-aminoheptanoic acid**
    - **8-aminooctanoic acid**

- **Rule 5**: Modifiers that are **polyhydroxylated aliphatic carboxylic acids** result in **high yield**. Multiple hydroxyl groups provide additional coordination sites with the metal center.

  - *High Yield Examples*:
    - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** *(Gluconic acid)*
    - **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]-2-oxoacetic acid**

- **Rule 6**: Modifiers containing **amide groups adjacent to carboxylic acid groups** result in **low yield**. The amide linkage may interfere with the catalyst's coordination environment.

  - *Low Yield Examples*:
    - **(2S)-6-acetamido-2-aminohexanoic acid**
    - **2-[(4-hydroxybenzoyl)amino]acetic acid**

- **Rule 7**: Modifiers with **ether linkages (-O-) in aliphatic chains** result in **low yield**. Increased flexibility and potential unfavorable interactions reduce effective coordination with the catalyst.

  - *Low Yield Examples*:
    - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**
    - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**

- **Rule 8**: Modifiers that are **α-amino dicarboxylic acids**, meaning they are **α-amino acids with an additional carboxyl group in the side chain**, result in **high yield**. The extra carboxylate enhances coordination with the metal center.

  - *High Yield Examples*:
    - **(2S)-2-aminobutanedioic acid** *(Aspartic acid)*
    - **(2S)-2-aminopentanedioic acid** *(Glutamic acid)*

- **Rule 9**: Modifiers that are **α-amino acids with hydrophobic or aromatic side chains without additional coordinating groups** result in **low yield**. Lack of effective coordination sites diminishes their impact on the catalyst.

  - *Low Yield Examples*:
    - **(2S)-2-amino-3-phenylpropanoic acid** *(Phenylalanine)*

  - *High Yield Example*:
    - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** *(Tryptophan)* *(Exception due to additional coordination sites in the indole ring)*

- **Rule 10**: Modifiers that have **aromatic rings connected to carboxylic acids via flexible aliphatic chains of four or five carbons** result in **high yield**. The linker reduces steric hindrance and facilitates effective coordination.

  - *High Yield Examples*:
    - **5-(4-hydroxyphenyl)pentanoic acid**
    - **4-pyridin-4-ylbutanoic acid**

  - *Low Yield Examples*:
    - **3-(4-hydroxyphenyl)propanoic acid** *(Shorter linker reduces effectiveness)*
    - **4-pyridin-4-ylbenzoic acid** *(Rigid structure lacks flexible linker)*

- **Rule 11**: Modifiers containing **electron-withdrawing fluorinated alkyl groups** result in **low yield**. These groups decrease electron density at coordination sites, hindering coordination with the catalyst.

  - *Low Yield Example*:
    - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**

- **Rule 12**: Modifiers that are **aromatic carboxylic acids with para-substituted bulky halogenated groups**, such as **bromomethyl (-CH₂Br)**, result in **high yield**. The halogen may participate in secondary interactions enhancing catalyst performance.

  - *High Yield Example*:
    - **4-(bromomethyl)benzoic acid**

- **Rule 13**: Modifiers with **thiol groups (-SH) directly attached to aromatic rings** result in **low yield**. Steric hindrance or altered electronic effects may impair coordination with the catalyst.

  - *Low Yield Example*:
    - **4-sulfanylbenzoic acid**

  - *High Yield Example*:
    - **3-sulfanylpropanoic acid** *(Thiol on a short aliphatic chain is effective)*

- **Rule 14**: Modifiers that are **α-amino acids with additional functional groups capable of coordination**, such as the **indole ring in tryptophan**, result in **high yield**. Additional heteroatoms provide more coordination sites.

  - *High Yield Example*:
    - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** *(Tryptophan)*

  - *Low Yield Example*:
    - **(2S)-2-amino-3-phenylpropanoic acid** *(Phenylalanine lacks additional coordination sites)*

**End of Rules**

---

These rules are developed based on the observed relationships between the molecular features of the modifiers and the reaction yield, considering the underlying chemical principles:

- **Coordination Ability**: Functional groups like amino, hydroxyl, thiol, and nitrogen-containing heterocycles enhance coordination with the catalyst's metal center, leading to higher yields. Electron-donating groups increase electron density at coordination sites, favoring coordination.

- **Electronic Effects**: Electron-withdrawing groups, such as fluorinated alkyl chains or formyl groups, decrease electron density at potential coordination sites, hindering effective interaction with the catalyst and resulting in lower yields.

- **Steric Effects and Linker Length**: The length and flexibility of linkers between functional groups influence effective coordination. Flexible aliphatic chains of optimal length (typically four or five carbons) reduce steric hindrance and improve interactions with the catalyst. Chains that are too long or too short may reduce effectiveness due to steric hindrance or insufficient reach.

- **Functional Group Interference**: Certain groups, such as amide linkages and ether linkages, may interfere with the catalyst's activity or coordination ability, leading to lower yields. Thiol groups directly attached to aromatic rings may cause steric hindrance or alter electronic properties unfavorably.

- **Additional Coordination Sites**: Modifiers with multiple coordination sites, such as polyhydroxylated acids or heteroaromatic rings with nitrogen atoms, can form stronger interactions with the catalyst, enhancing its activity and leading to higher yields.

- **Special Cases**: Some modifiers, like tryptophan, have unique structures (e.g., indole ring) that provide additional coordination opportunities, leading to higher yields even when similar compounds (e.g., phenylalanine) do not.

By combining multiple functional groups and structural motifs, these rules offer predictive power for determining whether a given modifier is likely to result in a **high** or **low yield** in the reaction. They prioritize broader coverage of the dataset while balancing simplicity and complexity, adhering to the requirements for generating effective and chemically insightful rules.

---

**Application of Rules to Dataset**:

- The rules cover the dataset effectively, explaining the yields observed for the modifiers.

- **High Yield Modifiers**: These include compounds with effective coordination capabilities due to electron-donating groups, optimal linker lengths, multiple coordination sites, or unique structural features facilitating interaction with the catalyst.

  - Examples: **4-aminobenzoic acid** (Rule 1), **5-aminopentanoic acid** (Rule 4), **(2S)-2-aminopentanedioic acid** (Rule 8), **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (Rule 14).

- **Low Yield Modifiers**: These are compounds with electron-withdrawing groups, steric hindrance issues, lack of effective coordination sites, or functional groups that interfere with catalyst activity.

  - Examples: **4-formylbenzoic acid** (Rule 2), **7-aminoheptanoic acid** (Rule 4), **(2S)-2-amino-3-phenylpropanoic acid** (Rule 9), **2-[2-(2-methoxyethoxy)ethoxy]acetic acid** (Rule 7).

---

These rules provide a comprehensive understanding of the relationships between the structural features of molecular modifiers and the reaction yield, guided by chemical reasoning and the data provided. They can be used to predict the yield outcome for new modifiers and guide the design of effective catalysts for the reaction.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,1,0,0
0,0,0,1,0,0,0,0,-1,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,-1,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,-1,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,-1,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.5714285714285714; Test Accuracy: 0.0
    Train Support: 0.03571428571428571; Test Support: 0.0
    Train Confidence: 0.9166666666666666; Test Confidence: 0.5
    Train Lift: 1.8300653594771241; Test Lift: NONE
    Train Leverage: 0.014489795918367344; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    
    # Aromatic carboxylic acid attached directly to an aromatic ring
    aromatic_carboxylic_acid = '[c][C](=O)[O;H1,-]'
    
    # Amino group attached to aromatic ring
    aromatic_amino = '[c][NH2]'
    
    # Hydroxyl group attached to aromatic ring
    aromatic_hydroxyl = '[c][OH]'
    
    # Electron-withdrawing groups attached to aromatic ring
    aromatic_formyl = '[c][C](=O)[H]'
    
    # Fluoroalkyl groups attached to aromatic ring
    aromatic_fluoroalkyl = '[c][C][F]'
    
    # Heteroaromatic carboxylic acid (aromatic ring with nitrogen and carboxylic acid)
    heteroaromatic_carboxylic_acid = '[n][C](=O)[O;H1,-]'
    
    # Aliphatic carboxylic acid
    aliphatic_carboxylic_acid = '[C][C][C](=O)[O;H1,-]'
    
    # Primary amine (-NH2)
    primary_amine = '[NX3;H2][C]'
    
    # Thiol group (-SH)
    thiol = '[SX2H][C]'
    
    # Polyhydroxylated aliphatic carboxylic acid
    polyhydroxylated_carboxylic_acid = '[C](=O)[O;H1,-][C]([OH])[C]([OH])[C]([OH])[C]([OH])[OH]'
    
    # Amide group adjacent to carboxylic acid
    amide_adjacent_carboxylic_acid = '[C](=O)[NX3][C](=O)[O;H1,-]'
    
    # Ether linkages in aliphatic chains
    ether_linkage = '[C][O][C]'
    
    # Alpha-amino dicarboxylic acid
    alpha_amino_dicarboxylic_acid = '[NX3;H2][C]([C](=O)[O;H1,-])[C](=O)[O;H1,-]'
    
    # Alpha-amino acid with hydrophobic or aromatic side chain without additional coordinating groups
    alpha_amino_acid_hydrophobic_sidechain = '[NX3;H2][C][C](=O)[O;H1,-]'
    
    # Aromatic rings connected to carboxylic acids via flexible aliphatic chains of four or five carbons
    aromatic_with_aliphatic_linker_carboxylic_acid = '[c][C][C][C][C][C](=O)[O;H1,-]'
    
    # Bulky halogenated group attached to aromatic ring
    aromatic_halogenated_group = '[c][CH2][Br,I]'
    
    # Thiol group directly attached to aromatic ring
    aromatic_thiol = '[c][SH]'
    
    # Tryptophan (alpha-amino acid with indole ring)
    tryptophan_pattern = '[NX3;H2][C][C]1c2ccccc2[nH]c1[C](=O)[O;H1,-]'
    
    # Phenylalanine (alpha-amino acid with phenyl ring)
    phenylalanine_pattern = '[NX3;H2][C][C]1[cH][cH][cH][cH][cH][cH]1[C](=O)[O;H1,-]'
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are aromatic carboxylic acids with para-substituted electron-donating groups capable of metal coordination, such as amino (-NH2) or hydroxyl (-OH) groups, result in high yield.',
            'patterns': [
                [aromatic_carboxylic_acid],  # Aromatic carboxylic acid
                [aromatic_amino, aromatic_hydroxyl]  # Amino or hydroxyl group attached to aromatic ring
            ],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers that are aromatic carboxylic acids with para-substituted electron-withdrawing groups, such as formyl (-CHO) or fluoroalkyl groups, result in low yield.',
            'patterns': [
                [aromatic_carboxylic_acid],  # Aromatic carboxylic acid
                [aromatic_formyl, aromatic_fluoroalkyl]  # Electron-withdrawing group attached to aromatic ring
            ],
            'prediction': -1
        },
        {
            'number': 3,
            'description': 'Modifiers that are heteroaromatic carboxylic acids containing nitrogen atoms in the ring, result in high yield.',
            'patterns': [
                [heteroaromatic_carboxylic_acid]  # Heteroaromatic carboxylic acid with nitrogen
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers that are aliphatic carboxylic acids with terminal amino (-NH2) or thiol (-SH) groups on chains of five carbons or fewer result in high yield.',
            'patterns': [
                [aliphatic_carboxylic_acid],  # Aliphatic carboxylic acid
                [primary_amine, thiol]  # Terminal amino or thiol group
            ],
            'max_chain_length': 5,
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers that are polyhydroxylated aliphatic carboxylic acids result in high yield.',
            'patterns': [
                [polyhydroxylated_carboxylic_acid]  # Polyhydroxylated aliphatic carboxylic acid
            ],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers containing amide groups adjacent to carboxylic acid groups result in low yield.',
            'patterns': [
                [amide_adjacent_carboxylic_acid]  # Amide adjacent to carboxylic acid
            ],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Modifiers with ether linkages (-O-) in aliphatic chains result in low yield.',
            'patterns': [
                [ether_linkage]  # Ether linkage in aliphatic chain
            ],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Modifiers that are alpha-amino dicarboxylic acids result in high yield.',
            'patterns': [
                [alpha_amino_dicarboxylic_acid]  # Alpha-amino dicarboxylic acid
            ],
            'prediction': 1
        },
        {
            'number': 9,
            'description': 'Modifiers that are alpha-amino acids with hydrophobic or aromatic side chains without additional coordinating groups result in low yield.',
            'patterns': [
                [alpha_amino_acid_hydrophobic_sidechain]  # Alpha-amino acid with hydrophobic side chain
            ],
            'exclude_patterns': [
                [tryptophan_pattern]  # Exclude tryptophan
            ],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers that have aromatic rings connected to carboxylic acids via flexible aliphatic chains of four or five carbons result in high yield.',
            'patterns': [
                [aromatic_with_aliphatic_linker_carboxylic_acid]  # Aromatic ring with aliphatic linker to carboxylic acid
            ],
            'prediction': 1
        },
        {
            'number': 11,
            'description': 'Modifiers containing electron-withdrawing fluorinated alkyl groups result in low yield.',
            'patterns': [
                ['[C][C]([C][C][C][F])[C](=O)[O;H1,-]']  # Fluorinated alkyl group
            ],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'Modifiers that are aromatic carboxylic acids with para-substituted bulky halogenated groups, such as bromomethyl (-CH2Br), result in high yield.',
            'patterns': [
                [aromatic_carboxylic_acid],
                [aromatic_halogenated_group]
            ],
            'prediction': 1
        },
        {
            'number': 13,
            'description': 'Modifiers with thiol groups (-SH) directly attached to aromatic rings result in low yield.',
            'patterns': [
                [aromatic_thiol]
            ],
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'Modifiers that are alpha-amino acids with additional functional groups capable of coordination, such as the indole ring in tryptophan, result in high yield.',
            'patterns': [
                [tryptophan_pattern]
            ],
            'prediction': 1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(p) for p in group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for group in rule['exclude_patterns']:
                compiled_group = [Chem.MolFromSmarts(p) for p in group]
                compiled_excludes.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_excludes
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        if mol.HasSubstructMatch(pat):
                            group_match = True
                            break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: **Modifiers that are α-amino dicarboxylic acids**, meaning they are **α-amino acids with an additional carboxyl group in the side chain**, result in **high yield**. The presence of both amino and extra carboxyl groups enhances chelation with the metal center.

  - *High Yield Examples*:
    - **(2S)-2-aminobutanedioic acid** *(Aspartic acid)*
    - **(2S)-2-aminopentanedioic acid** *(Glutamic acid)*

- **Rule 2**: **Aromatic carboxylic acids with para-substituted groups capable of metal coordination**, such as **amino (-NH₂)**, **nitro (-NO₂)**, or **bromomethyl (-CH₂Br)**, result in **high yield**. These substituents provide additional coordination sites, enhancing interaction with the metal center.

  - *High Yield Examples*:
    - **4-aminobenzoic acid**
    - **4-nitrobenzoic acid**
    - **4-(bromomethyl)benzoic acid**

  - *Low Yield Examples*:
    - **4-methylbenzoic acid** *(Methyl group lacks coordination ability)*
    - **4-formylbenzoic acid** *(Formyl group reduces electron density)*

- **Rule 3**: **Heteroaromatic carboxylic acids containing nitrogen atoms in the ring**, such as **pyridine** and **pyrazole** derivatives, result in **high yield**. Nitrogen atoms offer lone pairs for strong coordination with the metal center.

  - *High Yield Examples*:
    - **Pyridine-3-carboxylic acid** *(Nicotinic acid)*
    - **1H-pyrazole-4-carboxylic acid**
    - **2-oxo-1H-pyridine-4-carboxylic acid**

  - *Low Yield Examples*:
    - **4-pyridin-4-ylbenzoic acid** *(Possibility of steric hindrance due to biphenyl-like structure)*

- **Rule 4**: **Aliphatic carboxylic acids with chain lengths of eight carbons or fewer**, especially those with **coordinating groups** (e.g., amino or thiol groups) near the carboxyl end, result in **high yield**. Proximity of coordinating groups enhances metal binding.

  - *High Yield Examples*:
    - **Octanoic acid**
    - **5-aminopentanoic acid**
    - **3-sulfanylpropanoic acid**

  - *Low Yield Examples*:
    - **7-aminoheptanoic acid**
    - **8-aminooctanoic acid** *(Amino group too distant from carboxyl group)*

- **Rule 5**: **Modifiers that are polyhydroxylated carboxylic acids**, containing multiple hydroxyl (-OH) groups, result in **high yield**. Multiple hydroxyl groups provide additional coordination sites, enhancing interaction with the metal center.

  - *High Yield Examples*:
    - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** *(Gluconic acid)*
    - **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]-2-oxoacetic acid**

- **Rule 6**: **Modifiers that contain ether linkages (-O-) within their carbon chains** result in **low yield**. The flexibility and potential interference from ether oxygens reduce effective coordination with the metal center.

  - *Low Yield Examples*:
    - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**
    - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**

- **Rule 7**: **Modifiers with electron-withdrawing groups adjacent to the carboxylic acid**, such as **formyl (-CHO)** groups or **fluorinated alkyl chains**, result in **low yield**. Electron-withdrawing groups decrease electron density at coordination sites, hindering effective interaction with the metal center.

  - *Low Yield Examples*:
    - **4-formylbenzoic acid**
    - **5-formyl-2-hydroxybenzoic acid**
    - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**

- **Rule 8**: **Modifiers with bulky substituents or sterically hindering groups near potential coordination sites** result in **low yield**. Steric hindrance can prevent effective coordination with the metal center.

  - *Low Yield Examples*:
    - **(2S)-6-acetamido-2-aminohexanoic acid**
    - **4-[(2,2,2-trifluoroacetyl)amino]butanoic acid**
    - **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid**

- **Rule 9**: **Aromatic carboxylic acids with flexible aliphatic linkers and coordinating substituents on the aromatic ring** result in **high yield**. The flexible linker reduces steric hindrance and allows better interaction with the metal center.

  - *High Yield Examples*:
    - **5-(4-hydroxyphenyl)pentanoic acid**
    - **4-pyridin-4-ylbutanoic acid**

  - *Low Yield Example*:
    - **3-(4-hydroxyphenyl)propanoic acid** *(Shorter linker may limit flexibility and coordination)*

- **Rule 10**: **Modifiers that are α-amino acids with side chains containing heteroatoms capable of chelation**, such as an **indole ring**, result in **high yield**. Additional coordination sites enhance interaction with the metal center.

  - *High Yield Example*:
    - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** *(Tryptophan)*

  - *Low Yield Example*:
    - **(2S)-2-amino-3-phenylpropanoic acid** *(Phenylalanine lacks coordinating side chain)*

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10
0,0,0,0,1,0,-1,-1,0,0
1,0,0,1,1,0,-1,-1,0,0
0,0,0,0,0,0,-1,0,0,0
1,0,0,1,1,0,-1,-1,0,0
0,0,0,1,0,0,-1,-1,0,0
0,0,0,1,0,0,-1,0,0,0
0,0,0,0,0,0,-1,-1,0,0
0,0,0,1,1,0,-1,-1,0,0
0,0,0,0,1,0,-1,-1,0,0
0,0,0,0,0,0,-1,0,0,0
0,0,0,0,1,0,-1,-1,0,0
0,0,0,1,0,0,-1,0,0,0
0,0,0,0,0,-1,-1,0,0,0
0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,-1,-1,0,0
0,0,0,0,0,0,-1,-1,0,0
0,0,0,0,0,0,-1,-1,0,0
0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,-1,-1,0,0,0
0,0,0,1,0,0,-1,-1,0,0
0,0,0,0,1,0,-1,0,0,0
0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,-1,0,0,0
0,0,0,1,0,0,-1,-1,0,0
0,0,0,0,0,0,-1,-1,0,0
0,0,0,0,0,-1,-1,-1,0,0
0,0,0,0,1,0,-1,0,0,0
1,0,0,0,1,0,-1,-1,0,0
0,0,0,1,0,0,-1,-1,0,0
0,0,0,0,1,0,-1,-1,0,0
0,0,0,1,0,0,-1,-1,0,0
0,0,0,1,0,-1,-1,-1,0,0
0,0,0,1,0,0,-1,-1,0,0
0,0,0,1,0,0,-1,-1,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6857142857142857; Test Accuracy: 1.0
    Train Support: 0.15714285714285714; Test Support: 0.0
    Train Confidence: 0.5085470085470085; Test Confidence: 0.25
    Train Lift: 0.9888414055080723; Test Lift: NONE
    Train Leverage: -0.004489795918367331; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and substructures
    
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1]'
    
    # Amino acid backbone (alpha amino acid)
    alpha_amino_acid = '[NX3][CX4H]([#6])[CX3](=O)[OX1H0-,OX2H1]'
    
    # Additional carboxyl group (not part of the backbone)
    additional_carboxylic_acid = '[C;!$(C=O)][CX3](=O)[OX1H0-,OX2H1]'
    
    # Aromatic carboxylic acid
    aromatic_carboxylic_acid = '[c][CX3](=O)[OX1H0-,OX2H1]'
    
    # Para-substituted groups capable of metal coordination
    para_amino = 'c1cc(N)c(cc1)[CX3](=O)[OX1H0-,OX2H1]'
    para_nitro = 'c1cc([NX3](=O)=O)c(cc1)[CX3](=O)[OX1H0-,OX2H1]'
    para_bromomethyl = 'c1cc(CBr)c(cc1)[CX3](=O)[OX1H0-,OX2H1]'
    
    # Heteroaromatic carboxylic acids containing nitrogen atoms
    heteroaromatic_nitrogen = '[n][c][CX3](=O)[OX1H0-,OX2H1]'
    
    # Aliphatic carboxylic acids with chain lengths of eight carbons or fewer
    aliphatic_carboxylic_acid = '[#6]-[CX3](=O)[OX1H0-,OX2H1]'
    
    # Coordinating groups near the carboxyl end (e.g., amino or thiol)
    amino_group = '[NX3;H2,H1][#6]'
    thiol_group = '[#6][SX2H]'
    
    # Polyhydroxylated carboxylic acids (multiple hydroxyl groups)
    hydroxyl_group = '[OX2H]'
    
    # Ether linkages (-O-) within carbon chains
    ether_linkage = '[#6][OX2][#6]'
    
    # Electron-withdrawing groups adjacent to the carboxylic acid
    formyl_group = '[CX3H0](=O)[#6]'
    fluorinated_alkyl = '[CX4]([F,Cl,Br,I])[#6]'
    
    # Bulky substituents or sterically hindering groups near coordination sites
    bulky_group = '[CX4]([C])[C]'
    
    # Aromatic carboxylic acids with flexible aliphatic linkers and coordinating substituents
    flexible_linker = '[c][CX3](=O)[OX1H0-,OX2H1][C][C][C][c,N]'
    
    # Alpha-amino acids with side chains containing heteroatoms capable of chelation (e.g., indole ring)
    indole_side_chain = '[NX3][CX4H]([#6])[CX3](=O)[OX1H0-,OX2H1][#6][#6]c1c[nH]c2ccccc12'
    
    # Compile SMARTS patterns
    pattern_dict = {
        'carboxylic_acid': Chem.MolFromSmarts(carboxylic_acid),
        'alpha_amino_acid': Chem.MolFromSmarts(alpha_amino_acid),
        'additional_carboxylic_acid': Chem.MolFromSmarts(additional_carboxylic_acid),
        'aromatic_carboxylic_acid': Chem.MolFromSmarts(aromatic_carboxylic_acid),
        'para_amino': Chem.MolFromSmarts(para_amino),
        'para_nitro': Chem.MolFromSmarts(para_nitro),
        'para_bromomethyl': Chem.MolFromSmarts(para_bromomethyl),
        'heteroaromatic_nitrogen': Chem.MolFromSmarts(heteroaromatic_nitrogen),
        'aliphatic_carboxylic_acid': Chem.MolFromSmarts(aliphatic_carboxylic_acid),
        'amino_group': Chem.MolFromSmarts(amino_group),
        'thiol_group': Chem.MolFromSmarts(thiol_group),
        'hydroxyl_group': Chem.MolFromSmarts(hydroxyl_group),
        'ether_linkage': Chem.MolFromSmarts(ether_linkage),
        'formyl_group': Chem.MolFromSmarts(formyl_group),
        'fluorinated_alkyl': Chem.MolFromSmarts(fluorinated_alkyl),
        'bulky_group': Chem.MolFromSmarts(bulky_group),
        'flexible_linker': Chem.MolFromSmarts(flexible_linker),
        'indole_side_chain': Chem.MolFromSmarts(indole_side_chain)
    }
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are α-amino dicarboxylic acids (α-amino acids with an additional carboxyl group in the side chain).',
            'patterns': ['alpha_amino_acid', 'additional_carboxylic_acid'],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Aromatic carboxylic acids with para-substituted groups capable of metal coordination (amino, nitro, or bromomethyl).',
            'patterns': ['para_amino', 'para_nitro', 'para_bromomethyl'],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Heteroaromatic carboxylic acids containing nitrogen atoms in the ring.',
            'patterns': ['heteroaromatic_nitrogen'],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Aliphatic carboxylic acids with chain lengths of eight carbons or fewer with coordinating groups near the carboxyl end.',
            'patterns': ['aliphatic_carboxylic_acid'],
            'additional_patterns': ['amino_group', 'thiol_group'],
            'max_chain_length': 8,
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers that are polyhydroxylated carboxylic acids (multiple hydroxyl groups).',
            'patterns': ['carboxylic_acid', 'hydroxyl_group'],
            'hydroxyl_count': 2,
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers that contain ether linkages (-O-) within their carbon chains.',
            'patterns': ['ether_linkage'],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Modifiers with electron-withdrawing groups adjacent to the carboxylic acid (formyl groups or fluorinated alkyl chains).',
            'patterns': ['formyl_group', 'fluorinated_alkyl'],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Modifiers with bulky substituents or sterically hindering groups near potential coordination sites.',
            'patterns': ['bulky_group'],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Aromatic carboxylic acids with flexible aliphatic linkers and coordinating substituents on the aromatic ring.',
            'patterns': ['flexible_linker'],
            'prediction': 1
        },
        {
            'number': 10,
            'description': 'Modifiers that are α-amino acids with side chains containing heteroatoms capable of chelation (e.g., indole ring).',
            'patterns': ['indole_side_chain'],
            'prediction': 1
        }
    ]
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = False
                # Check all patterns for the rule
                for pat_name in rule['patterns']:
                    pat = pattern_dict[pat_name]
                    if mol.HasSubstructMatch(pat):
                        match = True
                        # Additional checks for specific rules
                        if rule['number'] == 1:
                            # Rule 1: Check for at least two carboxyl groups
                            num_carboxyl_groups = len(mol.GetSubstructMatches(pattern_dict['carboxylic_acid']))
                            if num_carboxyl_groups < 2:
                                match = False
                                break
                        elif rule['number'] == 4:
                            # Rule 4: Check chain length and presence of coordinating group
                            # Get the longest carbon chain
                            chains = Chem.GetMolFrags(mol, asMols=True, sanitizeFrags=False)
                            max_chain = 0
                            for chain in chains:
                                num_carbons = len([atom for atom in chain.GetAtoms() if atom.GetAtomicNum() == 6])
                                if num_carbons > max_chain:
                                    max_chain = num_carbons
                            if max_chain > rule['max_chain_length']:
                                match = False
                                break
                            # Check for coordinating groups near carboxyl end
                            amino_matches = mol.GetSubstructMatches(pattern_dict['amino_group'])
                            thiol_matches = mol.GetSubstructMatches(pattern_dict['thiol_group'])
                            if not amino_matches and not thiol_matches:
                                match = False
                                break
                        elif rule['number'] == 5:
                            # Rule 5: Check for multiple hydroxyl groups
                            hydroxyl_matches = mol.GetSubstructMatches(pattern_dict['hydroxyl_group'])
                            if len(hydroxyl_matches) < rule['hydroxyl_count']:
                                match = False
                                break
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df

--------------------------------------------------