def rule2matrix(smiles_list):
    # Define SMARTS patterns
    # Carboxylic acid group (-COOH)
    carboxylic_acid = Chem.MolFromSmarts('[CX3](=O)[OX2H1]')
    carboxylate_anion = Chem.MolFromSmarts('[CX3](=O)[O-]')
    
    # Amino group (-NH2)
    primary_amino = Chem.MolFromSmarts('[NX3;H2]')
    secondary_amino = Chem.MolFromSmarts('[NX3;H1][#6]')
    
    # Hydroxyl group (-OH)
    hydroxyl_group = Chem.MolFromSmarts('[OX2H]')
    
    # Thiol group (-SH)
    thiol_group = Chem.MolFromSmarts('[SX2H]')
    
    # Aromatic ring
    aromatic_ring = Chem.MolFromSmarts('a')
    benzene_ring = Chem.MolFromSmarts('c1ccccc1')
    
    # Electron-withdrawing groups (EWGs)
    nitro_group = Chem.MolFromSmarts('[NX3](=O)=O')
    halogen = Chem.MolFromSmarts('[F,Cl,Br,I]')
    trifluoromethyl = Chem.MolFromSmarts('[CX4]([F,Cl,Br,I])([F,Cl,Br,I])[F,Cl,Br,I]')
    
    # Electron-donating groups (EDGs)
    methoxy_group = Chem.MolFromSmarts('[OX2][CH3]')
    
    # Ketone group
    ketone_group = Chem.MolFromSmarts('[CX3](=O)[#6]')
    
    # Aldehyde group
    aldehyde_group = Chem.MolFromSmarts('[CX3H](=O)')
    
    # Heteroaromatic rings containing nitrogen
    pyridine_ring = Chem.MolFromSmarts('n1ccccc1')
    pyrazole_ring = Chem.MolFromSmarts('c1cnn[cH]1')
    indole_ring = Chem.MolFromSmarts('c1c[cH]c2[cH][nH]c(c12)')
    
    # Ether chains
    ether_chain = Chem.MolFromSmarts('[#6][OX2][#6]')
    
    # Aliphatic chain of five or more carbons
    long_aliphatic_chain = Chem.MolFromSmarts('[CH2][CH2][CH2][CH2][CH2]')
    
    # Define rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are carboxylic acids containing an amino group within three carbons of the carboxylate, especially in the alpha or beta position.',
            'patterns': [carboxylic_acid],
            'functional_group': primary_amino,
            'max_distance': 3,
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers that are aromatic carboxylic acids substituted with electron-withdrawing groups at the para position.',
            'patterns': [benzene_ring, carboxylic_acid],
            'ewg': [nitro_group, halogen],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers that are carboxylic acids containing hydroxyl groups within two to three carbons of the carboxylate.',
            'patterns': [carboxylic_acid, hydroxyl_group],
            'max_distance': 3,
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers that are heteroaromatic carboxylic acids containing nitrogen atoms in positions that can coordinate with metals.',
            'patterns': [carboxylic_acid, pyridine_ring, pyrazole_ring],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers with multiple carboxylic acid groups (diacids).',
            'patterns': [carboxylic_acid],
            'count_threshold': {'[CX3](=O)[OX2H1]': 2},
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers with aliphatic thiol groups within three carbons of the carboxylate tend to result in high yield.',
            'patterns': [carboxylic_acid],
            'functional_group': thiol_group,
            'max_distance': 3,
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'Modifiers with strong electron-withdrawing groups such as perfluoroalkyl chains near the carboxylate tend to result in low yield.',
            'patterns': [carboxylic_acid, trifluoromethyl],
            'max_distance': 3,
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Modifiers featuring bulky or flexible ether chains adjacent to the carboxylate tend to result in low yield.',
            'patterns': [carboxylic_acid, ether_chain],
            'max_distance': 2,
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers that are amino acids with aromatic side chains lacking additional coordinating functional groups tend to result in low yield.',
            'patterns': [carboxylic_acid, aromatic_ring],
            'exclude_patterns': [hydroxyl_group, primary_amino, secondary_amino, ketone_group, aldehyde_group],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers that are carboxylic acids containing carbonyl groups adjacent to the carboxylate tend to result in low yield.',
            'patterns': [carboxylic_acid],
            'adjacent_groups': [ketone_group, aldehyde_group],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Modifiers with intramolecular hydrogen bonding that sequesters coordinating groups tend to result in low yield.',
            'patterns': [carboxylic_acid, primary_amino, hydroxyl_group],
            'hydrogen_bond_donors': [primary_amino, hydroxyl_group],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'Modifiers combining multiple proximate coordinating groups, such as amino and hydroxyl groups near the carboxylate.',
            'patterns': [carboxylic_acid, primary_amino, hydroxyl_group],
            'max_distance': 3,
            'prediction': 1
        },
        {
            'number': 13,
            'description': 'Modifiers that are aliphatic carboxylic acids without additional coordinating functional groups tend to result in lower yield.',
            'patterns': [carboxylic_acid],
            'exclude_patterns': [primary_amino, secondary_amino, hydroxyl_group, thiol_group],
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'Modifiers that are aromatic carboxylic acids substituted with electron-donating groups at positions that do not enhance metal coordination.',
            'patterns': [carboxylic_acid, benzene_ring],
            'edg': [hydroxyl_group, methoxy_group],
            'prediction': -1
        },
        {
            'number': 15,
            'description': 'Modifiers that are amino acids with side chains containing nitrogen heterocycles capable of coordination.',
            'patterns': [carboxylic_acid, indole_ring],
            'prediction': 1
        },
    ]
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = False
                # Check for required patterns
                for pat in rule.get('patterns', []):
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                    else:
                        match = True
                if not match:
                    row.append(0)
                    continue
                # Check for functional groups within certain distance
                if 'functional_group' in rule and 'max_distance' in rule:
                    ca_atoms = mol.GetSubstructMatches(carboxylic_acid)
                    fg_atoms = mol.GetSubstructMatches(rule['functional_group'])
                    distance_match = False
                    for ca in ca_atoms:
                        for fg in fg_atoms:
                            path_length = Chem.GetShortestPath(mol, ca[0], fg[0])
                            if len(path_length)-1 <= rule['max_distance']:
                                distance_match = True
                                break
                        if distance_match:
                            break
                    if not distance_match:
                        row.append(0)
                        continue
                # Check for electron-withdrawing groups at para position
                if 'ewg' in rule:
                    ewg_match = False
                    for ewg in rule['ewg']:
                        if mol.HasSubstructMatch(ewg):
                            ewg_match = True
                            break
                    if not ewg_match:
                        row.append(0)
                        continue
                # Check for electron-donating groups
                if 'edg' in rule:
                    edg_match = False
                    for edg in rule['edg']:
                        if mol.HasSubstructMatch(edg):
                            edg_match = True
                            break
                    if not edg_match:
                        row.append(0)
                        continue
                # Check for adjacent groups
                if 'adjacent_groups' in rule:
                    adjacent_match = False
                    for group in rule['adjacent_groups']:
                        if mol.HasSubstructMatch(group):
                            adjacent_match = True
                            break
                    if not adjacent_match:
                        row.append(0)
                        continue
                # Check for hydrogen bond donors
                if 'hydrogen_bond_donors' in rule:
                    hbond_match = False
                    for donor in rule['hydrogen_bond_donors']:
                        if mol.HasSubstructMatch(donor):
                            hbond_match = True
                            break
                    if not hbond_match:
                        row.append(0)
                        continue
                # Check for exclude patterns
                if 'exclude_patterns' in rule:
                    exclude = False
                    for pat in rule['exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            exclude = True
                            break
                    if exclude:
                        row.append(0)
                        continue
                # Check count thresholds
                if 'count_threshold' in rule:
                    count_match = True
                    for smarts, threshold in rule['count_threshold'].items():
                        pattern = Chem.MolFromSmarts(smarts)
                        matches = mol.GetSubstructMatches(pattern)
                        if len(matches) < threshold:
                            count_match = False
                            break
                    if not count_match:
                        row.append(0)
                        continue
                # All checks passed for this rule
                row.append(rule['prediction'])
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df
