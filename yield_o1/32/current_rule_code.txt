def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    
    # Hydroxyl group (-OH)
    hydroxyl_group = '[OX2H]'
    
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX1H1]'
    
    # Pattern for Rule 2: Aromatic carboxylic acids with coordinating groups at para position
    # Aromatic carboxylic acid with para-coordinating group (amino, hydroxyl, nitro)
    rule2_pattern = 'c1cc([CX3](=O)[OX1H1])ccc1[OH,NH2,N+](=O)[O-]'
    
    # Rule 4 pattern: Unbranched aliphatic carboxylic acids with chain lengths of C6 to C8
    rule4_pattern = '[CH3][CH2]{4,6}C(=O)[OX1H1]'
    
    # Rule 5: Polyhydroxy carboxylic acids (two or more hydroxyl groups and carboxylic acid)
    # Patterns defined above
    
    # Rule 6: Perfluorinated carboxylic acids
    perfluorinated_carboxylic_acid = '[CF3][CF2]{0,}[CX3](=O)[OX1H1]'
    
    # Rule 8: Aromatic carboxylic acids with ortho-substituted hydroxyl or formyl groups
    rule8_pattern = '[OH,C=O][c]1ccc(cc1)C(=O)[OX1H1]'
    
    # Initialize rules list
    rules = [
        {
            'number': 2,
            'description': 'Modifiers that are aromatic carboxylic acids with functional groups capable of coordinating to the metal center at the para position (e.g., amino, nitro, hydroxyl) tend to result in a high yield.',
            'patterns': [[rule2_pattern]],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers that are unbranched aliphatic carboxylic acids with chain lengths of C6 to C8 and without additional functional groups tend to result in a high yield.',
            'patterns': [[rule4_pattern]],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers that are polyhydroxy carboxylic acids, containing multiple hydroxyl groups capable of chelation, tend to result in a high yield.',
            'patterns': [[hydroxyl_group], [carboxylic_acid]],
            'count_threshold': {'[OX2H]': 2},
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers that are perfluorinated carboxylic acids tend to result in a low yield due to strong electron-withdrawing effects.',
            'patterns': [[perfluorinated_carboxylic_acid]],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Modifiers that are aromatic carboxylic acids with ortho-substituted hydroxyl or formyl groups capable of intramolecular hydrogen bonding tend to result in a low yield.',
            'patterns': [[rule8_pattern]],
            'prediction': -1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(p) for p in group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        
        # Compile count_threshold patterns if any
        if 'count_threshold' in rule:
            compiled_count_threshold = {}
            for smarts, threshold in rule['count_threshold'].items():
                pat = Chem.MolFromSmarts(smarts)
                compiled_count_threshold[pat] = threshold
            rule['compiled_count_threshold'] = compiled_count_threshold
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                
                # Check required patterns
                for i, compiled_group in enumerate(rule['compiled_patterns']):
                    group_match = False
                    for pat in compiled_group:
                        matches = mol.GetSubstructMatches(pat)
                        if matches:
                            # If a count threshold is specified for this pattern
                            if 'compiled_count_threshold' in rule and pat in rule['compiled_count_threshold']:
                                threshold = rule['compiled_count_threshold'][pat]
                                if len(matches) >= threshold:
                                    group_match = True
                                    break
                            else:
                                group_match = True
                                break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df
