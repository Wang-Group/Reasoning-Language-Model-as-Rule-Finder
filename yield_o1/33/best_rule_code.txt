def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and substructures
    
    # General patterns
    amine_group = '[NX3;H2]'  # Primary amine
    carboxylic_acid = '[CX3](=O)[O;H1,-]'  # Carboxylic acid group (protonated or deprotonated)
    hydroxyl_group = '[OX2H]'  # Hydroxyl group
    thiol_group = '[SX2H]'  # Thiol group
    ketone_group = '[CX3](=O)[#6]'  # Ketone group
    aldehyde_group = '[CX3H](=O)'  # Aldehyde group
    aromatic_ring = '[a]'  # Aromatic atom
    aromatic_carboxylic_acid = '[c][CX3](=O)[O;H1,-]'  # Aromatic carboxylic acid
    nitro_group = '[NX3](=O)[O-]'  # Nitro group
    halogen = '[F,Cl,Br,I]'  # Halogens
    ether_linkage = '[OD2]([#6])[#6]'  # Ether linkage
    indole_ring = 'c1c[cH]c2c1cccc2'  # Indole ring
    pyridine_ring = 'n1ccccc1'  # Pyridine ring
    
    # Rule-specific patterns
    
    # Rule 1: α-amino acids with two carboxyl groups
    alpha_amino_acid = '[NX3;H2][CX4H]([#6])[CX3](=O)[O;H1,-]'
    
    # Rule 2: Aromatic carboxylic acids substituted at the para position with coordinating groups
    para_amino_benzoic_acid = 'c1ccc([NX3;H2])cc1C(=O)[O;H1,-]'
    para_hydroxy_benzoic_acid = 'c1ccc([OX2H])cc1C(=O)[O;H1,-]'
    para_nitro_benzoic_acid = 'c1ccc([NX3](=O)[O-])cc1C(=O)[O;H1,-]'
    para_methyl_benzoic_acid = 'c1ccc(C)cc1C(=O)[O;H1,-]'
    para_formyl_benzoic_acid = 'c1ccc(C=O)cc1C(=O)[O;H1,-]'
    
    # Rule 3: Nitrogen heterocycles capable of coordinating with metal centers
    nitrogen_heterocycle = '[n]'
    
    # Rule 4: Polyhydroxy carboxylic acids
    polyhydroxy = '[#6][OX2H][#6][OX2H][#6][OX2H]'
    
    # Rule 5: Medium-chain aliphatic carboxylic acids (6 to 10 carbons)
    medium_chain_carboxylic_acid = '[#6]-' * 5 + '[CX3](=O)[O;H1,-]'
    terminal_polar_groups = '[#6][OX2H]', '[#6][NX3;H2]'
    
    # Rule 6: Thiol groups on short aliphatic chains
    short_aliphatic_thiol = '[#6][#6][#6][SX2H]'
    aromatic_thiol = '[c][SX2H]'
    
    # Rule 7: Aldehyde groups
    
    # Rule 8: Amide bonds within structures (excluding simple amino acids)
    amide_bond = '[NX3][CX3](=O)[#6]'
    
    # Rule 9: Strongly electron-withdrawing groups such as perfluoroalkyl chains
    perfluoroalkyl = '[CX4]([F])([F])[F]'
    
    # Rule 10: Polyether chains
    polyether_chain = '([#6][OX2][#6]){2,}'
    
    # Rule 11: Ketone groups adjacent to carboxylic acid groups or within aliphatic chain
    alpha_keto_acid = '[#6][CX3](=O)[#6][CX3](=O)[O;H1,-]'
    conjugated_ketone = '[#6]=[CX3](=O)[#6]'
    
    # Rule 12: Indole or other large aromatic systems
    indole = 'c1c[cH]c2c1cccc2'
    
    # Rule 13: Terminal amino groups on aliphatic chains
    terminal_alkyl_amino = '[NX3;H2][#6]' * 5 + '[CX3](=O)[O;H1,-]'
    
    # Rule 14: Aromatic carboxylic acids with ortho-hydroxyl groups
    ortho_hydroxy_benzoic_acid = 'c1cc([OX2H])ccc1C(=O)[O;H1,-]'
    
    # Rule 15: Phenolic hydroxyl groups attached to aliphatic chains
    aliphatic_phenol = '[c][CX4][CX3](=O)[O;H1,-]'
    aromatic_phenol = '[c][OX2H]'
    
    # Compile SMARTS patterns
    pattern_dict = {
        'amine_group': Chem.MolFromSmarts(amine_group),
        'carboxylic_acid': Chem.MolFromSmarts(carboxylic_acid),
        'hydroxyl_group': Chem.MolFromSmarts(hydroxyl_group),
        'thiol_group': Chem.MolFromSmarts(thiol_group),
        'ketone_group': Chem.MolFromSmarts(ketone_group),
        'aldehyde_group': Chem.MolFromSmarts(aldehyde_group),
        'aromatic_ring': Chem.MolFromSmarts(aromatic_ring),
        'aromatic_carboxylic_acid': Chem.MolFromSmarts(aromatic_carboxylic_acid),
        'nitro_group': Chem.MolFromSmarts(nitro_group),
        'halogen': Chem.MolFromSmarts(halogen),
        'ether_linkage': Chem.MolFromSmarts(ether_linkage),
        'indole_ring': Chem.MolFromSmarts(indole_ring),
        'pyridine_ring': Chem.MolFromSmarts(pyridine_ring),
        'alpha_amino_acid': Chem.MolFromSmarts(alpha_amino_acid),
        'para_amino_benzoic_acid': Chem.MolFromSmarts(para_amino_benzoic_acid),
        'para_hydroxy_benzoic_acid': Chem.MolFromSmarts(para_hydroxy_benzoic_acid),
        'para_nitro_benzoic_acid': Chem.MolFromSmarts(para_nitro_benzoic_acid),
        'para_methyl_benzoic_acid': Chem.MolFromSmarts(para_methyl_benzoic_acid),
        'para_formyl_benzoic_acid': Chem.MolFromSmarts(para_formyl_benzoic_acid),
        'nitrogen_heterocycle': Chem.MolFromSmarts(nitrogen_heterocycle),
        'polyhydroxy': Chem.MolFromSmarts(polyhydroxy),
        'medium_chain_carboxylic_acid': Chem.MolFromSmarts(medium_chain_carboxylic_acid),
        'terminal_polar_group_1': Chem.MolFromSmarts(terminal_polar_groups[0]),
        'terminal_polar_group_2': Chem.MolFromSmarts(terminal_polar_groups[1]),
        'short_aliphatic_thiol': Chem.MolFromSmarts(short_aliphatic_thiol),
        'aromatic_thiol': Chem.MolFromSmarts(aromatic_thiol),
        'amide_bond': Chem.MolFromSmarts(amide_bond),
        'perfluoroalkyl': Chem.MolFromSmarts(perfluoroalkyl),
        'polyether_chain': Chem.MolFromSmarts(polyether_chain),
        'alpha_keto_acid': Chem.MolFromSmarts(alpha_keto_acid),
        'conjugated_ketone': Chem.MolFromSmarts(conjugated_ketone),
        'indole': Chem.MolFromSmarts(indole),
        'terminal_alkyl_amino': Chem.MolFromSmarts(terminal_alkyl_amino),
        'ortho_hydroxy_benzoic_acid': Chem.MolFromSmarts(ortho_hydroxy_benzoic_acid),
        'aliphatic_phenol': Chem.MolFromSmarts(aliphatic_phenol),
        'aromatic_phenol': Chem.MolFromSmarts(aromatic_phenol)
    }
    
    # Define the rules
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are α-amino acids with two carboxyl groups (dicarboxylic amino acids) give high yield.',
            'patterns': ['alpha_amino_acid'],
            'counts': { 'carboxylic_acid': 2 },
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers that are aromatic carboxylic acids substituted at the para position with coordinating groups (e.g., amino, hydroxy, nitro) give high yield; those with non-coordinating substituents (e.g., methyl, formyl) give low yield.',
            'patterns_high': ['para_amino_benzoic_acid', 'para_hydroxy_benzoic_acid', 'para_nitro_benzoic_acid'],
            'patterns_low': ['para_methyl_benzoic_acid', 'para_formyl_benzoic_acid'],
            'prediction_high': 1,
            'prediction_low': -1
        },
        {
            'number': 3,
            'description': 'Modifiers containing nitrogen heterocycles capable of coordinating with metal centers give high yield.',
            'patterns': ['nitrogen_heterocycle', 'carboxylic_acid'],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers with multiple hydroxyl groups on aliphatic chains (polyhydroxy carboxylic acids) give high yield.',
            'patterns': ['polyhydroxy', 'carboxylic_acid'],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers that are medium-chain aliphatic carboxylic acids (6 to 10 carbons) without additional polar functional groups give high yield; those with terminal polar groups give low yield.',
            'patterns_high': ['medium_chain_carboxylic_acid'],
            'patterns_low': ['terminal_polar_group_1', 'terminal_polar_group_2'],
            'prediction_high': 1,
            'prediction_low': -1
        },
        {
            'number': 6,
            'description': 'Modifiers with thiol (–SH) groups on short aliphatic chains (three carbons or fewer) give high yield; those with thiol groups attached to aromatic rings give low yield.',
            'patterns_high': ['short_aliphatic_thiol'],
            'patterns_low': ['aromatic_thiol'],
            'prediction_high': 1,
            'prediction_low': -1
        },
        {
            'number': 7,
            'description': 'Modifiers containing aldehyde (formyl) groups give low yield.',
            'patterns': ['aldehyde_group'],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Modifiers with amide bonds within their structures (excluding simple amino acids) give low yield.',
            'patterns': ['amide_bond'],
            'exclude_patterns': ['alpha_amino_acid'],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers with strongly electron-withdrawing groups such as perfluoroalkyl chains give low yield.',
            'patterns': ['perfluoroalkyl'],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers containing polyether chains (i.e., multiple ether linkages) give low yield.',
            'patterns': ['polyether_chain'],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Modifiers with ketone groups adjacent to carboxylic acid groups or within the aliphatic chain give low yield unless the ketone is part of an extended conjugated system, which can give high yield.',
            'patterns_low': ['alpha_keto_acid'],
            'patterns_high': ['conjugated_ketone'],
            'prediction_low': -1,
            'prediction_high': 1
        },
        {
            'number': 12,
            'description': 'Modifiers containing indole or other large aromatic systems give high yield.',
            'patterns': ['indole'],
            'prediction': 1
        },
        {
            'number': 13,
            'description': 'Modifiers with terminal amino groups on aliphatic chains (alkylamines) give high yield.',
            'patterns': ['terminal_alkyl_amino'],
            'prediction': 1
        },
        {
            'number': 14,
            'description': 'Modifiers that are aromatic carboxylic acids with ortho-hydroxyl groups (salicylic acid derivatives) give low yield.',
            'patterns': ['ortho_hydroxy_benzoic_acid'],
            'prediction': -1
        },
        {
            'number': 15,
            'description': 'Modifiers with phenolic hydroxyl groups attached to aliphatic chains give high yield; those with phenolic groups directly linked to the aromatic carboxylic acid ring give low yield.',
            'patterns_high': ['aliphatic_phenol'],
            'patterns_low': ['aromatic_phenol', 'aromatic_carboxylic_acid'],
            'prediction_high': 1,
            'prediction_low': -1
        }
    ]
    
    # Initialize the result matrix
    results = []
    
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = False
                # Check for high yield patterns
                if 'patterns_high' in rule:
                    high_match = False
                    for pat_name in rule['patterns_high']:
                        pattern = pattern_dict[pat_name]
                        if mol.HasSubstructMatch(pattern):
                            high_match = True
                            break
                    if high_match:
                        match = True
                        row.append(rule['prediction_high'])
                        continue
                # Check for low yield patterns
                if 'patterns_low' in rule:
                    low_match = False
                    for pat_name in rule['patterns_low']:
                        pattern = pattern_dict[pat_name]
                        if mol.HasSubstructMatch(pattern):
                            low_match = True
                            break
                    if low_match:
                        match = True
                        row.append(rule['prediction_low'])
                        continue
                # Check exclude patterns
                if 'exclude_patterns' in rule:
                    exclude = False
                    for pat_name in rule['exclude_patterns']:
                        pattern = pattern_dict[pat_name]
                        if mol.HasSubstructMatch(pattern):
                            exclude = True
                            break
                    if exclude:
                        match = False
                        row.append(0)
                        continue
                # Check required patterns
                if 'patterns' in rule:
                    required_match = True
                    for pat_name in rule['patterns']:
                        pattern = pattern_dict[pat_name]
                        if not mol.HasSubstructMatch(pattern):
                            required_match = False
                            break
                    if required_match:
                        match = True
                        # Check for count thresholds if any
                        if 'counts' in rule:
                            count_match = True
                            for count_pat_name, threshold in rule['counts'].items():
                                count_pattern = pattern_dict[count_pat_name]
                                matches = mol.GetSubstructMatches(count_pattern)
                                if len(matches) < threshold:
                                    count_match = False
                                    break
                            if count_match:
                                row.append(rule['prediction'])
                            else:
                                row.append(0)
                        else:
                            row.append(rule['prediction'])
                    else:
                        row.append(0)
                else:
                    if not match:
                        row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df
