def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1]'
    
    # Amino group (-NH2)
    amino_group = '[NX3][H2]'
    
    # Hydroxy group (-OH)
    hydroxy_group = '[OX2H]'
    
    # Thiol group (-SH)
    thiol_group = '[SX2H]'
    
    # Aliphatic chain of ≤5 carbons
    short_aliphatic_chain = '[C;X4H2][C;X4H2][C;X4H2][C;X4H2][C;X4H2]'
    
    # Aliphatic chain of ≥6 carbons
    long_aliphatic_chain = '[C;X4H2][C;X4H2][C;X4H2][C;X4H2][C;X4H2][C;X4H2]'
    
    # Aromatic ring
    aromatic_ring = 'a'
    
    # Electron-donating groups (EDGs) on aromatic ring
    edg_on_aromatic = ['[c][NX3;H2,H1]', '[c][OX2H]']
    
    # Electron-withdrawing groups (EWGs) on aromatic ring
    ewg_on_aromatic = ['[c][NX3+](=O)[O-]', '[c][CX3](=O)[OX1H0-,OX2H1]', '[c][F,Cl,Br,I]']
    
    # Nitrogen-containing heterocycle with carboxylic acid group
    nitrogen_heterocycle_carboxylic_acid = '[n,a][a][a][CX3](=O)[OX1H0-,OX2H1]'
    
    # Polyether chain (-O-)
    polyether_chain = '[#6][OX2][#6][OX2][#6]'
    
    # Bulky nonpolar aromatic side chain (e.g., phenylalanine)
    bulky_aromatic_side_chain = '[CX4][CX3](=O)[NX3][CX4][c]'
    
    # Amide bond adjacent to aromatic ring
    amide_adjacent_aromatic = '[c][CX3](=O)[NX3]'
    
    # Fluorinated alkyl chain or trifluoromethyl group
    fluorinated_alkyl_chain = '[CX4][F,Cl,Br,I]'
    trifluoromethyl_group = '[CX4](F)(F)F'
    
    # Thiol group on aromatic ring
    thiol_on_aromatic = '[c][SX2H]'
    
    # Ortho-substituted hydroxy or amino groups on aromatic ring
    ortho_substituted_hydroxy_amino = '[c]1[c][c][c][c][c]1[OX2H,NX3;H2,H1]'
    
    # Amide bond within aliphatic chain
    amide_within_aliphatic_chain = '[C][CX3](=O)[NX3][C]'
    
    # Aromatic ring separated from carboxylic acid by short aliphatic chain (2-4 carbons)
    aromatic_ring_short_chain_carboxylic_acid = '[c][C;X4][C;X4][C;X4][CX3](=O)[OX1H0-,OX2H1]'
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are α-amino dicarboxylic acids (amino acids with two carboxyl groups) give high yield.',
            'patterns': [
                [amino_group],  # Amino group
                [carboxylic_acid],  # Carboxylic acid group
            ],
            'count_thresholds': {
                carboxylic_acid: 2  # At least two carboxylic acid groups
            },
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers that are aromatic carboxylic acids with para-substituted electron-donating groups (e.g., amino, hydroxy) give high yield.',
            'patterns': [
                [aromatic_ring],  # Aromatic ring
                [carboxylic_acid],  # Carboxylic acid group
                edg_on_aromatic  # Electron-donating groups on aromatic ring
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers that are nitrogen-containing heterocyclic carboxylic acids give high yield.',
            'patterns': [
                [nitrogen_heterocycle_carboxylic_acid],  # Nitrogen-containing heterocycle with carboxylic acid
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers with short aliphatic chains (≤5 carbons) bearing polar functional groups (e.g., amino, thiol) give high yield.',
            'patterns': [
                [short_aliphatic_chain],  # Short aliphatic chain
                [amino_group, thiol_group],  # Polar functional groups
            ],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers that are polyhydroxylated aliphatic carboxylic acids (sugar acids) give high yield.',
            'patterns': [
                [carboxylic_acid],  # Carboxylic acid group
                [hydroxy_group],  # Hydroxy group
            ],
            'count_thresholds': {
                hydroxy_group: 2  # At least two hydroxy groups
            },
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers that are aromatic carboxylic acids with para-substituted electron-withdrawing groups (e.g., nitro, formyl) give low yield.',
            'patterns': [
                [aromatic_ring],  # Aromatic ring
                [carboxylic_acid],  # Carboxylic acid group
                ewg_on_aromatic  # Electron-withdrawing groups on aromatic ring
            ],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Modifiers with long aliphatic chains (≥6 carbons) regardless of functional groups give low yield.',
            'patterns': [
                [long_aliphatic_chain],  # Long aliphatic chain
            ],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Modifiers containing polyether chains (multiple ether linkages in aliphatic chains) give low yield.',
            'patterns': [
                [polyether_chain],  # Polyether chain
            ],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers with bulky nonpolar aromatic side chains (e.g., phenyl groups) give low yield.',
            'patterns': [
                [bulky_aromatic_side_chain],  # Bulky aromatic side chain
            ],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers containing amide bonds adjacent to aromatic rings give low yield.',
            'patterns': [
                [amide_adjacent_aromatic],  # Amide bond adjacent to aromatic ring
            ],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Modifiers with fluorinated alkyl chains or trifluoromethyl groups give low yield.',
            'patterns': [
                [fluorinated_alkyl_chain, trifluoromethyl_group],  # Fluorinated groups
            ],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'Modifiers with thiol groups on aromatic rings give low yield.',
            'patterns': [
                [thiol_on_aromatic],  # Thiol group on aromatic ring
            ],
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Modifiers that are aromatic carboxylic acids with ortho-substituted hydroxy or amino groups give high yield.',
            'patterns': [
                [aromatic_ring],  # Aromatic ring
                [carboxylic_acid],  # Carboxylic acid group
                [ortho_substituted_hydroxy_amino],  # Ortho-substituted hydroxy or amino groups
            ],
            'prediction': 1
        },
        {
            'number': 14,
            'description': 'Modifiers with amide bonds within aliphatic chains give low yield.',
            'patterns': [
                [amide_within_aliphatic_chain],  # Amide bond within aliphatic chain
            ],
            'prediction': -1
        },
        {
            'number': 15,
            'description': 'Modifiers with aromatic rings separated from carboxylic acid groups by short aliphatic chains (2–4 carbons) give high yield.',
            'patterns': [
                [aromatic_ring_short_chain_carboxylic_acid],  # Aromatic ring separated by short chain to carboxylic acid
            ],
            'prediction': 1
        },
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(p) for p in group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for group in rule['exclude_patterns']:
                compiled_group = [Chem.MolFromSmarts(p) for p in group]
                compiled_excludes.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_excludes
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for idx, compiled_group in enumerate(rule['compiled_patterns']):
                    group_match = False
                    for pat in compiled_group:
                        matches = mol.GetSubstructMatches(pat)
                        if matches:
                            # If a count threshold is specified for this pattern
                            if 'count_thresholds' in rule and pat is not None:
                                smarts = Chem.MolToSmarts(pat)
                                if smarts in rule['count_thresholds']:
                                    threshold = rule['count_thresholds'][smarts]
                                    if len(matches) >= threshold:
                                        group_match = True
                                        break
                                else:
                                    group_match = True
                                    break
                            else:
                                group_match = True
                                break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df
