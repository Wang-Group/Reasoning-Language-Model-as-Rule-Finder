def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and substructures with corrections from suggestions
    
    # Carboxylic acid group (-COOH), both protonated and deprotonated forms
    carboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1]'
    
    # Alpha-amino acid pattern (Suggestion 6)
    alpha_amino_acid = '[NX3;H2][CX4H]([#6])[CX3](=O)[OX1H0-,OX2H1]'
    
    # Hydroxyl group (-OH), excluding those in carboxylic acids (Suggestion 1)
    hydroxyl_group = '[OX2H][#6;!$(C=O)]'
    
    # Amino group (-NH2 or -NH-), excluding amide nitrogens (Suggestion 4)
    amino_group = '[NX3;H2,H1;!$(NC=O)]'
    
    # Sulfhydryl group (-SH)
    sulfhydryl_group = '[SX2H]'
    
    # Ether linkage (-O-)
    ether_linkage = '[#6][OX2][#6]'
    
    # Aromatic ring
    aromatic_ring = '[a]'
    
    # Aromatic carboxylic acid
    aromatic_carboxylic_acid = '[c][CX3](=O)[OX1H0-,OX2H1]'
    
    # Nitro group (-NO2)
    nitro_group = '[NX3+](=O)[O-]'
    
    # Halogens
    halogen = '[F,Cl,Br,I]'
    
    # Electron-withdrawing groups (EWGs) for Rule 3
    ewg_patterns = [nitro_group, '[CH2Br]', amino_group]
    
    # Aldehyde group (-CHO)
    aldehyde_group = '[CX3H1](=O)[#6]'
    
    # Nitrogen atom in ring (Suggestion 5)
    nitrogen_in_ring = '[n]'
    
    # Carbonyl group adjacent to coordination site (Suggestion 2)
    carbonyl_adjacent = '[CX3](=O)[#6;!$(C(=O)[O,N])]-[C,N,O,S]'
    
    # Polyether chain pattern (for Rule 8)
    polyether_chain = '[#6][OX2][#6][OX2][#6][OX2][#6]'
    
    # Perfluoroalkyl chain (for Rule 9)
    perfluoroalkyl_chain = '[CX4;H0](F)(F)(F)'
    
    # Aliphatic chain with sulfhydryl group (for Rule 10)
    aliphatic_sulfhydryl = '[#6][#6][SX2H]'
    
    # Flexible aliphatic linker to aromatic ring (four or more carbons, for Rule 11)
    flexible_aliphatic_linker = '[CX4H2][CX4H2][CX4H2][CX4H2][c]'
    
    # Short aliphatic chain to aromatic ring (three or fewer carbons, for Rule 12)
    short_aliphatic_linker = '[CX4H2][CX4H2][CX4H2][c]'
    
    # Polar functional group on long aliphatic chain (for Rule 14)
    polar_on_long_chain = '[CX4][CX4][CX4][CX4][OX2H,NX3;H2,H1;!$(NC=O)]'
    
    # Methoxy group on aromatic ring (for Rule 15)
    methoxy_on_aromatic = '[c][OX2][CH3]'
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Rule 1: Amino Dicarboxylic Acids Yield High',
            'required': [
                alpha_amino_acid
            ],
            'required_counts': {
                carboxylic_acid: 2
            },
            'forbidden': [
                aromatic_ring
            ],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Rule 2: Straight-Chain Aliphatic Carboxylic Acids Without Additional Functional Groups Yield High',
            'required': [
                carboxylic_acid
            ],
            'forbidden': [
                aromatic_ring,
                hydroxyl_group,
                amino_group,
                sulfhydryl_group,
                halogen,
                ether_linkage
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Rule 3: Aromatic Carboxylic Acids with Electron-Withdrawing Para Substituents Yield High',
            'required': [
                aromatic_carboxylic_acid
            ],
            'substituents': ewg_patterns,
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Rule 4: Modifiers with Aldehyde Groups Yield Low',
            'required': [
                aldehyde_group
            ],
            'prediction': -1
        },
        {
            'number': 5,
            'description': 'Rule 5: Modifiers with Nitrogen-Containing Heterocycles Yield High',
            'required': [
                nitrogen_in_ring,
                carboxylic_acid
            ],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Rule 6: Modifiers with Bulky Aromatic Side Chains Yield Low',
            'required': [
                aromatic_ring,
                '[CX4][c]',  # Aliphatic carbon attached to aromatic ring
                carboxylic_acid
            ],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Rule 7: Linear Aliphatic Carboxylic Acids with Multiple Hydroxyl Groups Yield High',
            'required': [
                carboxylic_acid,
                hydroxyl_group
            ],
            'required_counts': {
                hydroxyl_group: 2
            },
            'forbidden': [
                aromatic_ring
            ],
            'prediction': 1
        },
        {
            'number': 8,
            'description': 'Rule 8: Modifiers with Polyether Chains Yield Low',
            'required': [
                carboxylic_acid,
                polyether_chain
            ],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Rule 9: Modifiers with Perfluoroalkyl Chains Yield Low',
            'required': [
                carboxylic_acid,
                perfluoroalkyl_chain
            ],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Rule 10: Modifiers with Sulfhydryl Groups on Aliphatic Chains Yield High',
            'required': [
                carboxylic_acid,
                aliphatic_sulfhydryl
            ],
            'forbidden': [
                aromatic_ring
            ],
            'prediction': 1
        },
        {
            'number': 11,
            'description': 'Rule 11: Modifiers with Flexible Aliphatic Linkers to Aromatic Rings Yield High',
            'required': [
                carboxylic_acid,
                flexible_aliphatic_linker
            ],
            'prediction': 1
        },
        {
            'number': 12,
            'description': 'Rule 12: Modifiers with Short Aliphatic Chains to Aromatic Rings Yield Low',
            'required': [
                carboxylic_acid,
                short_aliphatic_linker
            ],
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Rule 13: Modifiers with Carbonyl Groups Adjacent to Coordination Sites Yield Low',
            'required': [
                carboxylic_acid,
                carbonyl_adjacent
            ],
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'Rule 14: Modifiers with Polar Functional Groups on Long Aliphatic Chains Yield Low',
            'required': [
                carboxylic_acid,
                polar_on_long_chain
            ],
            'prediction': -1
        },
        {
            'number': 15,
            'description': 'Rule 15: Modifiers with Methoxy Groups on Aromatic Rings Yield High',
            'required': [
                aromatic_carboxylic_acid,
                methoxy_on_aromatic
            ],
            'prediction': 1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        rule['compiled_required'] = [Chem.MolFromSmarts(pat) for pat in rule.get('required', [])]
        rule['compiled_forbidden'] = [Chem.MolFromSmarts(pat) for pat in rule.get('forbidden', [])]
        if 'substituents' in rule:
            rule['compiled_substituents'] = [Chem.MolFromSmarts(pat) for pat in rule.get('substituents', [])]
        # Compile required counts patterns
        counts = rule.get('required_counts', {})
        rule['compiled_counts'] = {Chem.MolFromSmarts(pat): count for pat, count in counts.items()}
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check forbidden patterns
                for pat in rule.get('compiled_forbidden', []):
                    if mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Check required patterns
                for pat in rule.get('compiled_required', []):
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Check required counts
                counts = rule.get('compiled_counts', {})
                for pat, count in counts.items():
                    matches = mol.GetSubstructMatches(pat)
                    if len(matches) < count:
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Check substituents for Rule 3
                if 'compiled_substituents' in rule:
                    substituent_match = False
                    for sub_pat in rule['compiled_substituents']:
                        if mol.HasSubstructMatch(sub_pat):
                            substituent_match = True
                            break
                    if not substituent_match:
                        match = False
                if not match:
                    row.append(0)
                    continue
                # All conditions met
                row.append(rule['prediction'])
            except Exception:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f"Rule {rule['number']}" for rule in rules])
    return df
