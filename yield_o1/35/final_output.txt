
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

1. **Aliphatic Amino Acids (Short-Chain)**:
   - **Description**: Modifiers that are **aliphatic amino acids** containing both a **primary amino group (-NH₂)** and a **carboxylic acid group (-COOH)** on **short carbon chains (2-5 carbons)** tend to result in **high yield**.
   - **Examples**: **(2S)-2-aminobutanedioic acid (aspartic acid)**, **(2S)-2-aminopentanedioic acid (glutamic acid)**, **5-aminopentanoic acid**.

2. **Aromatic Carboxylic Acids with Electron-Withdrawing Groups at Para Position**:
   - **Description**: Modifiers that are **aromatic carboxylic acids** with **electron-withdrawing groups (EWGs)** such as **amino (-NH₂)** or **nitro (-NO₂)** at the **para position** relative to the carboxylic acid group tend to result in **high yield**.
   - **Examples**: **4-aminobenzoic acid**, **4-nitrobenzoic acid**.

3. **Aromatic Carboxylic Acids with Electron-Donating Groups at Para Position**:
   - **Description**: Modifiers that are **aromatic carboxylic acids** with **electron-donating groups (EDGs)** such as **methyl (-CH₃)** or **hydroxyl (-OH)** at the **para position** tend to result in **low yield**.
   - **Examples**: **4-methylbenzoic acid**, **4-hydroxybenzoic acid**, **3-(4-hydroxyphenyl)propanoic acid**.

4. **Heteroaromatic Carboxylic Acids**:
   - **Description**: Modifiers containing **heteroaromatic rings** (e.g., **pyridine**, **pyrazole**, **pyridone**) directly attached to the **carboxylic acid group** tend to result in **high yield**.
   - **Examples**: **Pyridine-3-carboxylic acid (nicotinic acid)**, **1H-pyrazole-4-carboxylic acid**, **2-oxo-1H-pyridine-4-carboxylic acid**.

5. **Aliphatic Carboxylic Acids with Thiol Groups (Short-Chain)**:
   - **Description**: Modifiers that are **short-chain aliphatic carboxylic acids** (3-5 carbons) containing a **thiol group (-SH)** tend to result in **high yield**.
   - **Example**: **3-sulfanylpropanoic acid**.

6. **Long-Chain Aliphatic Carboxylic Acids without Polar Substituents**:
   - **Description**: Modifiers that are **long-chain (6 or more carbons) aliphatic carboxylic acids** without additional **polar functional groups** tend to result in **high yield**.
   - **Example**: **Octanoic acid**.

7. **Modifiers with Aldehyde Groups on Aromatic Rings**:
   - **Description**: Modifiers containing an **aldehyde group (-CHO)** on the **aromatic ring** tend to result in **low yield**, possibly due to side reactions or catalyst deactivation.
   - **Examples**: **4-formylbenzoic acid**, **5-formyl-2-hydroxybenzoic acid**.

8. **Modifiers with Multiple Fluorine Atoms or Perfluorinated Chains**:
   - **Description**: Modifiers with **multiple fluorine atoms** or **perfluorinated alkyl chains** tend to result in **low yield**, likely due to their strong electron-withdrawing effects.
   - **Example**: **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**.

9. **Aromatic Amino Acids**:
   - **Description**: Modifiers that are **amino acids with aromatic side chains** tend to result in **high yield**.
   - **Examples**: **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid (tryptophan)**, **(2S)-2-amino-3-phenylpropanoic acid (phenylalanine)**.

10. **Modifiers with Short-Chain Polyfunctional Ethers**:
    - **Description**: Modifiers containing **ether linkages (-O-)** and **multiple hydroxyl groups (-OH)** on **short aliphatic chains** tend to result in **high yield**.
    - **Example**: **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid**.

11. **Modifiers with Long-Chain Polyfunctional Ethers**:
    - **Description**: Modifiers with **ether linkages (-O-)** and **multiple oxygen-containing groups** on **long aliphatic chains** tend to result in **low yield**.
    - **Example**: **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**.

12. **Modifiers Capable of Metal Chelation**:
    - **Description**: Modifiers that have **bulky substituents** or multiple functional groups capable of **chelating metal centers** tend to result in **low yield** due to possible interference with the catalyst.
    - **Example**: **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid**.

13. **Aromatic Thiol Modifiers**:
    - **Description**: Modifiers with **thiol groups (-SH)** attached to an **aromatic ring** tend to result in **low yield**, potentially due to strong binding to the metal catalyst.
    - **Example**: **4-sulfanylbenzoic acid**.

14. **Long-Chain Aliphatic Acids with Polar Substituents**:
    - **Description**: Modifiers that are **long-chain aliphatic carboxylic acids** (6 or more carbons) containing additional **polar functional groups** like **hydroxyl (-OH)** or **amino (-NH₂)** tend to result in **low yield**.
    - **Examples**: **7-hydroxyheptanoic acid**, **7-aminoheptanoic acid**, **8-aminooctanoic acid**.

15. **Modifiers with Electron-Donating Aromatic Chains**:
    - **Description**: Modifiers where the **carboxylic acid group** is attached to an aliphatic chain linked to an **aromatic ring with electron-donating groups (EDGs)** tend to result in **low yield**.
    - **Examples**: **5-(4-hydroxyphenyl)pentanoic acid**, **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid**.

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,-1,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,1,0,0,0,0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1
0,0,0,1,0,0,0,0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0
0,0,0,1,1,0,0,0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0
0,0,0,1,0,0,0,0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0,1,0,0,0,0,-1,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,1,0,0,0,0,-1,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,-1,0
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,-1,-1
0,0,0,1,0,0,0,0,0,0,0,0,0,-1,0
0,0,0,1,0,0,0,0,0,0,0,0,0,-1,0
0,0,0,1,0,0,0,0,0,0,0,0,0,-1,0
0,0,0,1,0,0,0,0,0,0,0,0,0,-1,0
1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1
0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1
0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1
0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0

---------------------------------------------------------------


    Train Accuracy: 0.6; Test Accuracy: 1.0
    Train Support: 0.45714285714285713; Test Support: 1.0
    Train Confidence: 0.5517241379310345; Test Confidence: 1.0
    Train Lift: 1.1359026369168355; Test Lift: NONE
    Train Leverage: 0.05469387755102034; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    import pandas as pd
    from rdkit import Chem
    from rdkit.Chem import rdChemReactions

    # Define SMARTS patterns and compile them
    
    # Common patterns
    carboxylic_acid = Chem.MolFromSmarts('[CX3](=O)[OX2H1]')  # -COOH
    primary_amine = Chem.MolFromSmarts('[NX3H2]')  # -NH2
    aromatic_ring = Chem.MolFromSmarts('a1aaaaa1')  # Aromatic ring
    electron_withdrawing_groups = [
        Chem.MolFromSmarts('[NX3H2]'),  # -NH2
        Chem.MolFromSmarts('[NX3](=O)[OX1-]'),  # Nitro group (-NO2)
        Chem.MolFromSmarts('[NX3+](=O)[O-]'),  # Nitro group (-NO2)
    ]
    electron_donating_groups = [
        Chem.MolFromSmarts('[CH3]'),  # -CH3
        Chem.MolFromSmarts('[OX2H]'),  # -OH
    ]
    thiol_group = Chem.MolFromSmarts('[SX2H]')  # -SH
    aldehyde_group = Chem.MolFromSmarts('[CX3H1](=O)[#6]')  # -CHO
    fluorine_atom = Chem.MolFromSmarts('F')  # -F
    amino_acid_pattern = Chem.MolFromSmarts('[NX3H2][CX4][CX3](=O)[OX2H1]')  # Amino acid pattern
    heteroaromatic_with_COOH = Chem.MolFromSmarts('[a][CX3](=O)[OX2H1]')  # Heteroaromatic ring with -COOH
    aromatic_thiol = Chem.MolFromSmarts('[c][SX2H]')  # Aromatic ring with -SH
    
    # Rules definition
    rules = [
        {
            'number': 1,
            'description': 'Aliphatic Amino Acids (Short-Chain)',
            'prediction': 1,
            'function': rule1_function
        },
        {
            'number': 2,
            'description': 'Aromatic Carboxylic Acids with Electron-Withdrawing Groups at Para Position',
            'prediction': 1,
            'function': rule2_function
        },
        {
            'number': 3,
            'description': 'Aromatic Carboxylic Acids with Electron-Donating Groups at Para Position',
            'prediction': -1,
            'function': rule3_function
        },
        {
            'number': 4,
            'description': 'Heteroaromatic Carboxylic Acids',
            'prediction': 1,
            'function': rule4_function
        },
        {
            'number': 5,
            'description': 'Aliphatic Carboxylic Acids with Thiol Groups (Short-Chain)',
            'prediction': 1,
            'function': rule5_function
        },
        {
            'number': 6,
            'description': 'Long-Chain Aliphatic Carboxylic Acids without Polar Substituents',
            'prediction': 1,
            'function': rule6_function
        },
        {
            'number': 7,
            'description': 'Modifiers with Aldehyde Groups on Aromatic Rings',
            'prediction': -1,
            'function': rule7_function
        },
        {
            'number': 8,
            'description': 'Modifiers with Multiple Fluorine Atoms or Perfluorinated Chains',
            'prediction': -1,
            'function': rule8_function
        },
        {
            'number': 9,
            'description': 'Aromatic Amino Acids',
            'prediction': 1,
            'function': rule9_function
        },
        {
            'number': 10,
            'description': 'Modifiers with Short-Chain Polyfunctional Ethers',
            'prediction': 1,
            'function': rule10_function
        },
        {
            'number': 11,
            'description': 'Modifiers with Long-Chain Polyfunctional Ethers',
            'prediction': -1,
            'function': rule11_function
        },
        {
            'number': 12,
            'description': 'Modifiers Capable of Metal Chelation',
            'prediction': -1,
            'function': rule12_function
        },
        {
            'number': 13,
            'description': 'Aromatic Thiol Modifiers',
            'prediction': -1,
            'function': rule13_function
        },
        {
            'number': 14,
            'description': 'Long-Chain Aliphatic Acids with Polar Substituents',
            'prediction': -1,
            'function': rule14_function
        },
        {
            'number': 15,
            'description': 'Modifiers with Electron-Donating Aromatic Chains',
            'prediction': -1,
            'function': rule15_function
        },
    ]
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = rule['function'](mol)
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f"Rule {rule['number']}" for rule in rules])
    return df

# Define functions for each rule

def rule1_function(mol):
    """
    Rule 1: Modifiers that are aliphatic amino acids containing both a primary amino group (-NH2) 
    and a carboxylic acid group (-COOH) on short carbon chains (2-5 carbons) tend to result in high yield.
    """
    primary_amine = Chem.MolFromSmarts('[NX3H2]')
    carboxylic_acid = Chem.MolFromSmarts('[CX3](=O)[OX2H1]')
    if mol.HasSubstructMatch(primary_amine) and mol.HasSubstructMatch(carboxylic_acid):
        # Find the matching atoms
        amine_atoms = mol.GetSubstructMatches(primary_amine)
        acid_atoms = mol.GetSubstructMatches(carboxylic_acid)
        for amine_atom in amine_atoms:
            for acid_atom in acid_atoms:
                # Compute the shortest path between N and C=O carbon
                path = Chem.rdmolops.GetShortestPath(mol, amine_atom[0], acid_atom[0])
                # Count the number of carbons in the path (excluding the N and C atoms)
                carbon_count = sum(1 for atom_idx in path[1:-1] if mol.GetAtomWithIdx(atom_idx).GetAtomicNum() == 6)
                # Adjust for direct connection
                if carbon_count >= 2 and carbon_count <= 5:
                    return True
    return False

def rule2_function(mol):
    """
    Rule 2: Modifiers that are aromatic carboxylic acids with electron-withdrawing groups (EWGs) 
    such as amino (-NH2) or nitro (-NO2) at the para position relative to the carboxylic acid group tend to result in high yield.
    """
    carboxylic_acid = Chem.MolFromSmarts('c[C](=O)[O]')  # Aromatic carboxylic acid
    ewg_patterns = [
        Chem.MolFromSmarts('c[NX3H2]'),  # Amino group on aromatic ring
        Chem.MolFromSmarts('c[NX3+](=O)[O-]'),  # Nitro group on aromatic ring
        Chem.MolFromSmarts('c[NX3](=O)[OX1-]'),  # Nitro group variation
    ]
    matches = mol.GetSubstructMatches(carboxylic_acid)
    if matches:
        # For each match, check for EWGs at para position
        for match in matches:
            c_atom_idx = match[1]  # Carbon atom connected to carboxylic acid
            c_atom = mol.GetAtomWithIdx(c_atom_idx)
            ring_info = mol.GetRingInfo()
            if ring_info.IsAtomInRingOfSize(c_atom_idx, 6):
                # Get the ring atoms
                ring_atoms = [atom_idx for atom_idx in ring_info.AtomRings() if c_atom_idx in atom_idx][0]
                # Find para position (opposite atom in ring)
                idx_in_ring = ring_atoms.index(c_atom_idx)
                para_atom_idx = ring_atoms[(idx_in_ring + 3) % 6]
                para_atom = mol.GetAtomWithIdx(para_atom_idx)
                # Check if para_atom matches any EWG pattern
                for ewg in ewg_patterns:
                    if mol.HasSubstructMatch(ewg, useChirality=False, atomIdx=para_atom_idx):
                        return True
    return False

def rule3_function(mol):
    """
    Rule 3: Modifiers that are aromatic carboxylic acids with electron-donating groups (EDGs) 
    such as methyl (-CH3) or hydroxyl (-OH) at the para position tend to result in low yield.
    """
    carboxylic_acid = Chem.MolFromSmarts('c[C](=O)[O]')
    edg_patterns = [
        Chem.MolFromSmarts('c[CH3]'),  # Methyl group on aromatic ring
        Chem.MolFromSmarts('c[OH]'),    # Hydroxyl group on aromatic ring
    ]
    matches = mol.GetSubstructMatches(carboxylic_acid)
    if matches:
        for match in matches:
            c_atom_idx = match[1]
            c_atom = mol.GetAtomWithIdx(c_atom_idx)
            ring_info = mol.GetRingInfo()
            if ring_info.IsAtomInRingOfSize(c_atom_idx, 6):
                ring_atoms = [atom_idx for atom_idx in ring_info.AtomRings() if c_atom_idx in atom_idx][0]
                idx_in_ring = ring_atoms.index(c_atom_idx)
                para_atom_idx = ring_atoms[(idx_in_ring + 3) % 6]
                para_atom = mol.GetAtomWithIdx(para_atom_idx)
                for edg in edg_patterns:
                    if mol.HasSubstructMatch(edg, useChirality=False, atomIdx=para_atom_idx):
                        return True
    return False

def rule4_function(mol):
    """
    Rule 4: Modifiers containing heteroaromatic rings (e.g., pyridine, pyrazole, pyridone) directly attached to the carboxylic acid group tend to result in high yield.
    """
    pattern = Chem.MolFromSmarts('[a][CX3](=O)[OX2H1]')
    if mol.HasSubstructMatch(pattern):
        return True
    return False

def rule5_function(mol):
    """
    Rule 5: Modifiers that are short-chain aliphatic carboxylic acids (3-5 carbons) containing a thiol group (-SH) tend to result in high yield.
    """
    thiol = Chem.MolFromSmarts('[SX2H]')
    carboxylic_acid = Chem.MolFromSmarts('[CX3](=O)[OX2H1]')
    if mol.HasSubstructMatch(thiol) and mol.HasSubstructMatch(carboxylic_acid):
        # Check the chain length between thiol and carboxylic acid
        thiol_atoms = mol.GetSubstructMatches(thiol)
        acid_atoms = mol.GetSubstructMatches(carboxylic_acid)
        for thiol_atom in thiol_atoms:
            for acid_atom in acid_atoms:
                path = Chem.rdmolops.GetShortestPath(mol, thiol_atom[0], acid_atom[0])
                carbon_count = sum(1 for idx in path if mol.GetAtomWithIdx(idx).GetAtomicNum() == 6)
                if 3 <= carbon_count <= 5:
                    return True
    return False

def rule6_function(mol):
    """
    Rule 6: Modifiers that are long-chain (6 or more carbons) aliphatic carboxylic acids without additional polar functional groups tend to result in high yield.
    """
    carboxylic_acid = Chem.MolFromSmarts('[CX3](=O)[OX2H1]')
    polar_groups = [
        Chem.MolFromSmarts('[OX2H]'),  # Hydroxyl group
        Chem.MolFromSmarts('[NX3H2]'),  # Primary amine
        Chem.MolFromSmarts('[SX2H]'),   # Thiol
    ]
    if mol.HasSubstructMatch(carboxylic_acid):
        # Count carbons
        carbon_atoms = [atom for atom in mol.GetAtoms() if atom.GetAtomicNum() == 6]
        if len(carbon_atoms) >= 6:
            # Check for absence of polar groups
            for pg in polar_groups:
                if mol.HasSubstructMatch(pg):
                    return False
            return True
    return False

def rule7_function(mol):
    """
    Rule 7: Modifiers containing an aldehyde group (-CHO) on the aromatic ring tend to result in low yield.
    """
    aldehyde_on_aromatic = Chem.MolFromSmarts('c[C](=O)[H]')
    if mol.HasSubstructMatch(aldehyde_on_aromatic):
        return True
    return False

def rule8_function(mol):
    """
    Rule 8: Modifiers with multiple fluorine atoms or perfluorinated alkyl chains tend to result in low yield.
    """
    fluorine_atoms = [atom for atom in mol.GetAtoms() if atom.GetAtomicNum() == 9]
    if len(fluorine_atoms) >= 2:
        return True
    return False

def rule9_function(mol):
    """
    Rule 9: Modifiers that are amino acids with aromatic side chains tend to result in high yield.
    """
    amino_acid = Chem.MolFromSmarts('[NX3H2][CX4][CX3](=O)[OX2H1]')  # General amino acid pattern
    aromatic_ring = Chem.MolFromSmarts('a1aaaaa1')
    if mol.HasSubstructMatch(amino_acid) and mol.HasSubstructMatch(aromatic_ring):
        return True
    return False

def rule10_function(mol):
    """
    Rule 10: Modifiers containing ether linkages (-O-) and multiple hydroxyl groups (-OH) on short aliphatic chains tend to result in high yield.
    """
    ether_linkage = Chem.MolFromSmarts('[CX4][OX2][CX4]')
    hydroxyl_group = Chem.MolFromSmarts('[OX2H]')
    if mol.HasSubstructMatch(ether_linkage):
        hydroxyl_matches = mol.GetSubstructMatches(hydroxyl_group)
        if len(hydroxyl_matches) >= 2:
            # Check chain length
            carbon_atoms = [atom for atom in mol.GetAtoms() if atom.GetAtomicNum() == 6]
            if len(carbon_atoms) <= 6:
                return True
    return False

def rule11_function(mol):
    """
    Rule 11: Modifiers with ether linkages (-O-) and multiple oxygen-containing groups on long aliphatic chains tend to result in low yield.
    """
    ether_linkage = Chem.MolFromSmarts('[CX4][OX2][CX4]')
    oxygen_atoms = [atom for atom in mol.GetAtoms() if atom.GetAtomicNum() == 8]
    if mol.HasSubstructMatch(ether_linkage) and len(oxygen_atoms) >= 3:
        carbon_atoms = [atom for atom in mol.GetAtoms() if atom.GetAtomicNum() == 6]
        if len(carbon_atoms) >= 6:
            return True
    return False

def rule12_function(mol):
    """
    Rule 12: Modifiers that have bulky substituents or multiple functional groups capable of chelating metal centers tend to result in low yield.
    """
    chelating_groups = [
        Chem.MolFromSmarts('[OX2H][CX4][NX3H2]'),  # Hydroxyl and amine on adjacent carbons
        Chem.MolFromSmarts('[OX2H][CX4][OX2H]'),   # Two hydroxyls on adjacent carbons
        Chem.MolFromSmarts('[NX3H2][CX4][NX3H2]'), # Two amines on adjacent carbons
    ]
    for cg in chelating_groups:
        if mol.HasSubstructMatch(cg):
            return True
    return False

def rule13_function(mol):
    """
    Rule 13: Modifiers with thiol groups (-SH) attached to an aromatic ring tend to result in low yield.
    """
    aromatic_thiol = Chem.MolFromSmarts('c[S][H]')
    if mol.HasSubstructMatch(aromatic_thiol):
        return True
    return False

def rule14_function(mol):
    """
    Rule 14: Modifiers that are long-chain aliphatic carboxylic acids (6 or more carbons) containing additional polar functional groups like hydroxyl (-OH) or amino (-NH2) tend to result in low yield.
    """
    carboxylic_acid = Chem.MolFromSmarts('[CX3](=O)[OX2H1]')
    polar_groups = [
        Chem.MolFromSmarts('[OX2H]'),  # Hydroxyl group
        Chem.MolFromSmarts('[NX3H2]'),  # Primary amine
    ]
    if mol.HasSubstructMatch(carboxylic_acid):
        carbon_atoms = [atom for atom in mol.GetAtoms() if atom.GetAtomicNum() == 6]
        if len(carbon_atoms) >= 6:
            for pg in polar_groups:
                if mol.HasSubstructMatch(pg):
                    return True
    return False

def rule15_function(mol):
    """
    Rule 15: Modifiers where the carboxylic acid group is attached to an aliphatic chain linked to an aromatic ring with electron-donating groups (EDGs) tend to result in low yield.
    """
    carboxylic_acid = Chem.MolFromSmarts('[CX3](=O)[OX2H1]')
    edg_on_aromatic = [
        Chem.MolFromSmarts('c[OX2H]'),  # Hydroxyl group on aromatic ring
        Chem.MolFromSmarts('c[OX2][CH3]'),  # Methoxy group on aromatic ring
    ]
    if mol.HasSubstructMatch(carboxylic_acid):
        for edg in edg_on_aromatic:
            if mol.HasSubstructMatch(edg):
                return True
    return False
--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

1. **Short-Chain Aliphatic Amino Acids Yield High**:
   - **Description**: Modifiers that are **short-chain (2 to 5 carbons) aliphatic amino acids** containing a **primary amino group (-NH₂)** and one or more **carboxylic acid groups (-COOH)** tend to result in **high yield**.
   - **Examples**:
     - **(2S)-2-aminobutanedioic acid** (Aspartic acid)
     - **(2S)-2-aminopentanedioic acid** (Glutamic acid)
     - **5-aminopentanoic acid**

2. **Long-Chain Aliphatic Carboxylic Acids Without Additional Polar Groups Yield High**:
   - **Description**: Modifiers that are **long-chain (6 or more carbons) aliphatic carboxylic acids** without additional **polar functional groups** tend to result in **high yield**.
   - **Example**:
     - **Octanoic acid**

3. **Long-Chain Aliphatic Carboxylic Acids with Terminal Polar Groups Yield Low**:
   - **Description**: Modifiers that are **long-chain aliphatic carboxylic acids** (6 or more carbons) containing additional **polar functional groups** such as **hydroxyl (-OH)** or **amino (-NH₂)** groups at the **terminal positions** tend to result in **low yield**.
   - **Examples**:
     - **7-hydroxyheptanoic acid**
     - **7-aminoheptanoic acid**
     - **8-aminooctanoic acid**

4. **Aromatic Carboxylic Acids with Electron-Withdrawing Groups at Para Position Yield High**:
   - **Description**: Modifiers that are **aromatic carboxylic acids** with **electron-withdrawing groups (EWGs)** such as **nitro (-NO₂)** or **bromomethyl (-CH₂Br)** at the **para position** relative to the **carboxylic acid group** tend to result in **high yield**.
   - **Examples**:
     - **4-nitrobenzoic acid**
     - **4-(bromomethyl)benzoic acid**

5. **Aromatic Carboxylic Acids with Electron-Donating Groups at Para Position Yield Low**:
   - **Description**: Modifiers that are **aromatic carboxylic acids** with **electron-donating groups (EDGs)** such as **methyl (-CH₃)** or **hydroxyl (-OH)** at the **para position** tend to result in **low yield**.
   - **Examples**:
     - **4-methylbenzoic acid**
     - **3-(4-hydroxyphenyl)propanoic acid**

6. **Para-Amino Substituted Aromatic Carboxylic Acids Yield High**:
   - **Description**: Modifiers that are **aromatic carboxylic acids** with a **para amino group (-NH₂)** tend to result in **high yield**, possibly due to favorable interactions with the catalyst.
   - **Example**:
     - **4-aminobenzoic acid**

7. **Amino Acids with Aromatic Side Chains Yield Low, Unless Containing Indole Ring**:
   - **Description**: Modifiers that are **amino acids with aromatic side chains** tend to result in **low yield**, unless the side chain contains an **indole ring**, which yields **high yield**.
   - **Examples**:
     - **Low Yield**: **(2S)-2-amino-3-phenylpropanoic acid** (Phenylalanine)
     - **High Yield**: **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (Tryptophan)

8. **Modifiers with Aldehyde Groups Attached to Aromatic Rings Yield Low**:
   - **Description**: Modifiers containing an **aldehyde group (-CHO)** attached to an **aromatic ring** tend to result in **low yield**.
   - **Examples**:
     - **4-formylbenzoic acid**
     - **5-formyl-2-hydroxybenzoic acid**

9. **Heteroaromatic Carboxylic Acids Yield High**:
   - **Description**: Modifiers containing **heteroaromatic rings** (rings containing at least one heteroatom like nitrogen or oxygen) directly attached to the **carboxylic acid group** tend to result in **high yield**.
   - **Examples**:
     - **Pyridine-3-carboxylic acid** (Nicotinic acid)
     - **1H-pyrazole-4-carboxylic acid**

10. **Modifiers with Electron-Rich Heterocycles Yield High**:
    - **Description**: Modifiers containing **electron-rich heterocycles** such as **pyridones** or **benzofurans** attached to the **carboxylic acid group** tend to result in **high yield**.
    - **Examples**:
      - **2-oxo-1H-pyridine-4-carboxylic acid**
      - **1,3-dioxo-2-benzofuran-5-carboxylic acid**

11. **Modifiers with Thiol Groups Yield High or Low Depending on Structure**:
    - **Description**: Modifiers with **thiol groups (-SH)** show different outcomes based on their structure:
      - **Short aliphatic chains with thiol groups** tend to result in **high yield**.
      - **Aromatic rings with thiol groups** tend to result in **low yield**.
    - **Examples**:
      - **High Yield**: **3-sulfanylpropanoic acid**
      - **Low Yield**: **4-sulfanylbenzoic acid**

12. **Modifiers with Perfluorinated Aliphatic Chains Yield Low**:
    - **Description**: Modifiers with **perfluorinated alkyl chains** tend to result in **low yield**, possibly due to their strong electron-withdrawing effects.
    - **Example**:
      - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**

13. **Modifiers with Long Polyether Chains Yield Low**:
    - **Description**: Modifiers with **long-chain polyethers** (multiple **-O-** linkages) tend to result in **low yield**, possibly due to steric hindrance.
    - **Example**:
      - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**

14. **Modifiers with Short Polyol Chains Yield High**:
    - **Description**: Modifiers with **short-chain polyols** (multiple **hydroxyl groups (-OH)**) tend to result in **high yield**, potentially enhancing solubility or catalyst interaction.
    - **Examples**:
      - **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid**
      - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid**

15. **Modifiers with Conjugated Carbonyl Groups Yield Low**:
    - **Description**: Modifiers containing **conjugated carbonyl groups** (such as **ketones, amides, or acid anhydrides**) adjacent to **aromatic rings** tend to result in **low yield**, possibly due to their strong coordination with the metal catalyst.
    - **Examples**:
      - **4-oxoheptanedioic acid**
      - **2-[(4-hydroxybenzoyl)amino]acetic acid**

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.5142857142857142; Test Accuracy: 0.0
    Train Support: 0.0; Test Support: 0.0
    Train Confidence: 0.5; Test Confidence: 0.5
    Train Lift: 1.0; Test Lift: NONE
    Train Leverage: 0.0; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    import pandas as pd
    from rdkit import Chem

    # Define the rules with their associated SMARTS patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are short-chain (2 to 5 carbons) aliphatic amino acids containing a primary amino group (-NH2) and one or more carboxylic acid groups (-COOH), yield high',
            'patterns': [
                ['[NX3H2][CX4]'],  # Primary aliphatic amine
                ['[CX3](=O)[OX1H0-,OX1H1]']  # Carboxylic acid
            ],
            'exclude_patterns': [
                ['[a]']  # Exclude aromatic rings
            ],
            'count_conditions': [
                {'atom': 'C', 'min_count': 2, 'max_count': 5}
            ],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers that are long-chain (6 or more carbons) aliphatic carboxylic acids without additional polar functional groups, yield high',
            'patterns': [
                ['[CX3](=O)[OX1H0-,OX1H1]']  # Carboxylic acid
            ],
            'exclude_patterns': [
                ['[O;!$(O=C[O,H])]'],  # Exclude oxygen atoms not in carboxylic acid
                ['[N]'],  # Exclude nitrogen atoms
                ['[S]'],  # Exclude sulfur atoms
                ['[P]'],  # Exclude phosphorus atoms
                ['[a]']   # Exclude aromatic rings
            ],
            'count_conditions': [
                {'atom': 'C', 'min_count': 6}
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Long-chain aliphatic carboxylic acids (6 or more carbons) with terminal polar groups (-OH or -NH2), yield low',
            'patterns': [
                ['[CX3](=O)[OX1H0-,OX1H1]'],  # Carboxylic acid
                ['[OX2H][CH2]'],
                ['[NX3H2][CH2]']
            ],
            'exclude_patterns': [
                ['[a]']   # Exclude aromatic rings
            ],
            'count_conditions': [
                {'atom': 'C', 'min_count': 6}
            ],
            'prediction': -1
        },
        {
            'number': 4,
            'description': 'Aromatic carboxylic acids with electron-withdrawing groups at para position, yield high',
            'patterns': [
                ['c1cc([CX3](=O)[OX1H0-,OX1H1])ccc1[EWG]'],  # Aromatic carboxylic acid with EWG at para
            ],
            'substitutions': {
                'EWG': ['[NX3](=O)=O', '[CX4][F,Cl,Br,I]']  # Nitro group or halomethyl
            },
            'prediction': 1
        },
        {
            'number':5,
            'description':'Aromatic carboxylic acids with electron-donating groups at para position, yield low',
            'patterns': [
                ['c1cc([CX3](=O)[OX1H0-,OX1H1])ccc1[EDG]'],  # Aromatic carboxylic acid with EDG at para
            ],
            'substitutions': {
                'EDG': ['[OX2H]', '[CH3]']  # Hydroxyl group or methyl group
            },
            'prediction': -1
        }
        # Additional rules would be defined here
    ]

    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(p) for p in group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns

        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for group in rule['exclude_patterns']:
                compiled_group = [Chem.MolFromSmarts(p) for p in group]
                compiled_excludes.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_excludes

        # Handle substitutions in patterns
        if 'substitutions' in rule:
            expanded_patterns = []
            for pattern in rule['patterns']:
                if any(key in pattern[0] for key in rule['substitutions']):
                    for key, subs in rule['substitutions'].items():
                        for sub in subs:
                            new_pattern = pattern[0].replace(key, sub)
                            expanded_patterns.append([new_pattern])
                else:
                    expanded_patterns.append(pattern)
            rule['patterns'] = expanded_patterns
            # Re-compile patterns after substitution
            compiled_patterns = []
            for group in rule.get('patterns', []):
                compiled_group = [Chem.MolFromSmarts(p) for p in group]
                compiled_patterns.append(compiled_group)
            rule['compiled_patterns'] = compiled_patterns

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        if mol.HasSubstructMatch(pat):
                            group_match = True
                            break
                    if not group_match:
                        match = False
                        break
                # Check count conditions if any
                if 'count_conditions' in rule:
                    for condition in rule['count_conditions']:
                        atom_symbol = condition['atom']
                        atom_count = len([atom for atom in mol.GetAtoms() if atom.GetSymbol() == atom_symbol])
                        min_count = condition.get('min_count', 0)
                        max_count = condition.get('max_count', float('inf'))
                        if not (min_count <= atom_count <= max_count):
                            match = False
                            break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df
--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

1. **Aliphatic Amino Acids Without Aromatic Side Chains Yield High**:
   - **Description**: Modifiers that are **aliphatic amino acids** without **aromatic side chains** tend to result in **high yield**. These compounds feature **amino group(s) (-NH₂)** and **carboxylic acid group(s) (-COOH)** on an **aliphatic backbone**.
   - **Examples**:
     - **(2S)-2-aminobutanedioic acid** (Aspartic acid)
     - **(2S)-2-aminopentanedioic acid** (Glutamic acid)
     - **5-aminopentanoic acid** (5-Aminovaleric acid)

2. **Long-Chain Aliphatic Carboxylic Acids Without Additional Polar Groups Yield High**:
   - **Description**: Modifiers that are **long-chain aliphatic carboxylic acids** (chains of 6 or more carbons) without any additional **polar functional groups** (e.g., hydroxyl, amino, or thiol groups) tend to result in **high yield**. The hydrophobic nature may favor interaction with the catalyst's environment.
   - **Example**:
     - **Octanoic acid**

3. **Long-Chain Aliphatic Carboxylic Acids with Terminal Polar Groups Yield Low**:
   - **Description**: Modifiers that are **long-chain aliphatic carboxylic acids** containing additional **terminal polar functional groups** such as **hydroxyl (-OH)** or **amino (-NH₂)** tend to result in **low yield**. The polar groups may interfere with the catalyst's active sites or solubility.
   - **Examples**:
     - **7-hydroxyheptanoic acid**
     - **7-aminoheptanoic acid**
     - **8-aminooctanoic acid**

4. **Aromatic Carboxylic Acids with Electron-Withdrawing Groups at Para Position Yield High**:
   - **Description**: Modifiers that are **aromatic carboxylic acids** with **electron-withdrawing groups (EWGs)** at the **para position** relative to the **carboxylic acid group** tend to result in **high yield**. EWGs can stabilize interactions with the metal catalyst by delocalizing electron density.
   - **Examples**:
     - **4-nitrobenzoic acid**
     - **4-(bromomethyl)benzoic acid**

5. **Aromatic Carboxylic Acids with Electron-Donating Groups at Para Position Yield Low**:
   - **Description**: Modifiers that are **aromatic carboxylic acids** with **electron-donating groups (EDGs)** such as **methyl (-CH₃)** or **hydroxyl (-OH)** at the **para position** tend to result in **low yield**. EDGs can increase electron density, potentially destabilizing catalyst interactions.
   - **Examples**:
     - **4-methylbenzoic acid**
     - **3-(4-hydroxyphenyl)propanoic acid**

6. **Modifiers with Aldehyde Groups Attached to Aromatic Rings Yield Low**:
   - **Description**: Modifiers containing an **aldehyde group (-CHO)** directly attached to an **aromatic ring** tend to result in **low yield**. The aldehyde group may coordinate strongly with the catalyst, inhibiting its activity.
   - **Examples**:
     - **4-formylbenzoic acid**
     - **5-formyl-2-hydroxybenzoic acid**

7. **Heteroaromatic Carboxylic Acids Yield High**:
   - **Description**: Modifiers that are **heteroaromatic carboxylic acids** (aromatic rings containing heteroatoms like nitrogen or oxygen) tend to result in **high yield**. The heteroatoms may facilitate beneficial coordination with the metal catalyst.
   - **Examples**:
     - **Pyridine-3-carboxylic acid** (Nicotinic acid)
     - **1H-pyrazole-4-carboxylic acid**
     - **2-oxo-1H-pyridine-4-carboxylic acid**

8. **Modifiers with Thiol Groups on Short Aliphatic Chains Yield High**:
   - **Description**: Modifiers with **thiol groups (-SH)** on **short aliphatic chains** tend to result in **high yield**, possibly due to favorable sulfur-metal interactions enhancing catalyst activity.
   - **Example**:
     - **3-sulfanylpropanoic acid**

9. **Modifiers with Long Polyether Chains Yield Low**:
   - **Description**: Modifiers containing **long-chain polyethers** (multiple **ether linkages -O-**) tend to result in **low yield**. The flexible ether chains may interfere with catalyst interactions or solubility.
   - **Examples**:
     - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**
     - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**

10. **Modifiers with Multiple Hydroxyl Groups on Short Chains Yield High**:
    - **Description**: Modifiers that are **short-chain polyols** (compounds with multiple **hydroxyl groups (-OH)**) tend to result in **high yield**. The hydroxyl groups may enhance solubility and promote effective dispersion of the catalyst.
    - **Examples**:
      - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (Gluconic acid)
      - **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid**

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10
1,0,-1,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,1
0,0,-1,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,1
1,0,0,0,0,0,0,0,0,0
0,0,-1,0,0,0,0,0,0,0
0,1,-1,0,0,0,0,0,0,0
0,0,-1,0,0,0,0,0,0,1
0,0,-1,0,0,0,0,0,0,0
0,0,-1,0,0,0,0,0,0,0
0,0,-1,0,0,0,0,0,0,1
0,0,-1,0,0,0,0,0,0,0
0,0,-1,0,0,0,0,0,0,0
0,0,-1,0,0,0,0,0,0,0
0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,-1,0,0,0,1,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,1,0,0
0,0,-1,0,-1,-1,0,0,0,0
0,0,-1,0,0,-1,0,0,0,0
0,0,-1,1,0,0,0,0,0,0
0,0,-1,0,0,0,0,0,0,0
0,1,-1,0,-1,0,0,0,0,0
1,0,-1,0,0,0,0,0,0,0
0,0,-1,0,0,0,0,0,0,0
0,0,-1,0,0,0,0,0,0,0
0,0,-1,0,0,0,0,0,0,0
0,0,-1,0,0,0,0,0,0,0
0,0,-1,0,0,0,0,0,0,0
0,0,-1,0,0,0,0,0,0,0
0,0,-1,0,0,0,0,0,0,0
1,0,-1,0,0,0,0,0,0,0
1,0,-1,0,0,0,0,0,0,0
1,0,-1,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6571428571428571; Test Accuracy: 1.0
    Train Support: 0.2857142857142857; Test Support: 0.5
    Train Confidence: 0.7758620689655172; Test Confidence: 0.75
    Train Lift: 1.54017354068064; Test Lift: NONE
    Train Leverage: 0.0551020408163265; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define necessary SMARTS patterns
    carboxylic_acid_patterns = ['[CX3](=O)[OX2H1]', '[CX3](=O)[O-]']
    primary_amine_pattern = '[NX3H2]'
    hydroxyl_pattern = '[OX2H]'
    thiol_pattern = '[SX2H]'
    aromatic_atom_pattern = '[a]'
    aromatic_carboxylic_acid_pattern = '[c][CX3](=O)[OX2H1]'
    aldehyde_on_aromatic_pattern = '[c][CX3H](=O)'
    # EWG patterns
    ewg_patterns = ['[c][F,Cl,Br,I]', '[c][NX3](=O)[O-]', '[c][CX3](=O)[OX1]', '[c][CX4](F)(F)F']
    # EDG patterns
    edg_patterns = ['[c][OX2H]', '[c][OX2][CH3]', '[c][CH3]', '[c][NX3;H2,H1][#6]']
    ether_linkage_pattern = '[#6][OX2][#6]'
    polyether_pattern = f'({ether_linkage_pattern}){{2,}}'
    heteroaromatic_ring_pattern = '[n,o,s]1cccc1'

    # Define the rules
    rules = [
        # Rule 1
        {
            'number': 1,
            'description': 'Aliphatic Amino Acids Without Aromatic Side Chains Yield High',
            'prediction': 1,
            'include_patterns': [
                [primary_amine_pattern],
                carboxylic_acid_patterns
            ],
            'exclude_patterns': [
                [aromatic_atom_pattern]
            ]
        },
        # Rule 2
        {
            'number': 2,
            'description': 'Long-Chain Aliphatic Carboxylic Acids Without Additional Polar Groups Yield High',
            'prediction': 1,
            'include_patterns': [
                carboxylic_acid_patterns
            ],
            'conditions': {
                'min_num_carbons': 6,
                'max_heteroatoms': 2  # Only O atoms in carboxyl group
            }
        },
        # Rule 3
        {
            'number': 3,
            'description': 'Long-Chain Aliphatic Carboxylic Acids with Terminal Polar Groups Yield Low',
            'prediction': -1,
            'include_patterns': [
                carboxylic_acid_patterns,
                [hydroxyl_pattern, primary_amine_pattern]
            ],
            'conditions': {
                'min_num_carbons': 6
            }
        },
        # Rule 4
        {
            'number': 4,
            'description': 'Aromatic Carboxylic Acids with Electron-Withdrawing Groups at Para Position Yield High',
            'prediction': 1,
            'include_patterns': [
                [aromatic_carboxylic_acid_pattern],
                ewg_patterns
            ]
        },
        # Rule 5
        {
            'number': 5,
            'description': 'Aromatic Carboxylic Acids with Electron-Donating Groups at Para Position Yield Low',
            'prediction': -1,
            'include_patterns': [
                [aromatic_carboxylic_acid_pattern],
                edg_patterns
            ]
        },
        # Rule 6
        {
            'number': 6,
            'description': 'Modifiers with Aldehyde Groups Attached to Aromatic Rings Yield Low',
            'prediction': -1,
            'include_patterns': [
                [aldehyde_on_aromatic_pattern]
            ]
        },
        # Rule 7
        {
            'number': 7,
            'description': 'Heteroaromatic Carboxylic Acids Yield High',
            'prediction': 1,
            'include_patterns': [
                [heteroaromatic_ring_pattern],
                carboxylic_acid_patterns
            ]
        },
        # Rule 8
        {
            'number': 8,
            'description': 'Modifiers with Thiol Groups on Short Aliphatic Chains Yield High',
            'prediction': 1,
            'include_patterns': [
                [thiol_pattern]
            ],
            'conditions': {
                'max_num_carbons': 5,
                'exclude_aromatic': True
            }
        },
        # Rule 9
        {
            'number': 9,
            'description': 'Modifiers with Long Polyether Chains Yield Low',
            'prediction': -1,
            'include_patterns': [
                [polyether_pattern]
            ]
        },
        # Rule 10
        {
            'number': 10,
            'description': 'Modifiers with Multiple Hydroxyl Groups on Short Chains Yield High',
            'prediction': 1,
            'include_patterns': [
                [hydroxyl_pattern]
            ],
            'conditions': {
                'min_num_hydroxyls': 2,
                'max_num_carbons': 6
            }
        },
    ]

    # Compile the patterns
    for rule in rules:
        compiled_include = []
        for group in rule.get('include_patterns', []):
            compiled_group = [Chem.MolFromSmarts(pat) for pat in group]
            compiled_include.append(compiled_group)
        rule['compiled_include'] = compiled_include

        compiled_exclude = []
        for group in rule.get('exclude_patterns', []):
            compiled_group = [Chem.MolFromSmarts(pat) for pat in group]
            compiled_exclude.append(compiled_group)
        rule['compiled_exclude'] = compiled_exclude

    # Process each SMILES string
    results = []
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If parsing fails, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Exclude patterns
                for group in rule.get('compiled_exclude', []):
                    for pat in group:
                        if pat is None:
                            continue
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        break
                if not match:
                    row.append(0)
                    continue
                # Include patterns
                for group in rule.get('compiled_include', []):
                    group_match = False
                    for pat in group:
                        if pat is None:
                            continue
                        if mol.HasSubstructMatch(pat):
                            group_match = True
                            break
                    if not group_match:
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Additional conditions
                conditions = rule.get('conditions', {})
                if 'min_num_carbons' in conditions or 'max_num_carbons' in conditions:
                    # Count number of carbons
                    num_carbons = sum(1 for atom in mol.GetAtoms() if atom.GetAtomicNum() == 6)
                    if 'min_num_carbons' in conditions and num_carbons < conditions['min_num_carbons']:
                        match = False
                        row.append(0)
                        continue
                    if 'max_num_carbons' in conditions and num_carbons > conditions['max_num_carbons']:
                        match = False
                        row.append(0)
                        continue
                if 'max_heteroatoms' in conditions:
                    # Count total heteroatoms (non C and H)
                    num_heteroatoms = sum(1 for atom in mol.GetAtoms() if atom.GetAtomicNum() not in (1,6))
                    if num_heteroatoms > conditions['max_heteroatoms']:
                        match = False
                        row.append(0)
                        continue
                if 'exclude_aromatic' in conditions and conditions['exclude_aromatic']:
                    # Exclude molecules containing aromatic atoms
                    if mol.HasSubstructMatch(Chem.MolFromSmarts(aromatic_atom_pattern)):
                        match = False
                        row.append(0)
                        continue
                if 'min_num_hydroxyls' in conditions:
                    # Count number of hydroxyl groups
                    hydroxyl_pat = Chem.MolFromSmarts(hydroxyl_pattern)
                    num_hydroxyls = len(mol.GetSubstructMatches(hydroxyl_pat))
                    if num_hydroxyls < conditions['min_num_hydroxyls']:
                        match = False
                        row.append(0)
                        continue
                # If we reach here, the rule matches
                row.append(rule['prediction'])
            except Exception as e:
                # In case of error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

1. **Long-Chain Aliphatic Carboxylic Acids without Polar Functional Groups Yield High**:
   - **Description**: Modifiers that are **linear aliphatic carboxylic acids** with **six or more carbons** in the chain and **no additional polar functional groups** (such as hydroxyl or amino groups) tend to result in **high yield**. The long hydrophobic chains may interact favorably with the catalyst or substrate.
   - **Example**:
     - **Octanoic acid** – High yield
   - **Counter-Examples**:
     - **7-hydroxyheptanoic acid** – Low yield (presence of a hydroxyl group reduces yield)
     - **7-aminoheptanoic acid** – Low yield (presence of an amino group reduces yield)

2. **Short-Chain Aliphatic Amino Acids Yield High; Longer Chains Yield Low**:
   - **Description**: Modifiers that are **aliphatic α-amino acids** with **five or fewer carbons** in the main chain result in **high yield**. **Longer-chain amino acids** (more than five carbons) tend to result in **low yield**, possibly due to increased steric hindrance or reduced solubility.
   - **Examples**:
     - **High Yield**:
       - **(2S)-2-aminobutanedioic acid** (Aspartic acid)
       - **(2S)-2-aminopentanedioic acid** (Glutamic acid)
       - **5-aminopentanoic acid**
     - **Low Yield**:
       - **7-aminoheptanoic acid**
       - **8-aminooctanoic acid**

3. **Aromatic Carboxylic Acids with Electron-Withdrawing Groups at Para Position Yield High**:
   - **Description**: Modifiers that are **aromatic carboxylic acids** with **strong electron-withdrawing groups (EWGs)** such as **nitro (-NO₂)**, **bromomethyl (-CH₂Br)**, or **amino (-NH₂)** at the **para position** tend to result in **high yield**. EWGs can enhance coordination with the catalyst by stabilizing negative charge or facilitating metal binding.
   - **Examples**:
     - **4-nitrobenzoic acid**
     - **4-(bromomethyl)benzoic acid**
     - **4-aminobenzoic acid**
   - **Counter-Example**:
     - **4-methylbenzoic acid** – Low yield (electron-donating methyl group decreases effectiveness)

4. **Heteroaromatic Carboxylic Acids Yield High**:
   - **Description**: Modifiers that are **heteroaromatic carboxylic acids** containing heteroatoms like **nitrogen** or **oxygen** (e.g., **pyridine**, **pyrazole**) tend to result in **high yield**. The heteroatoms can coordinate with metal centers, enhancing interaction with the catalyst.
   - **Examples**:
     - **Pyridine-3-carboxylic acid** (Nicotinic acid)
     - **1H-pyrazole-4-carboxylic acid**
     - **2-oxo-1H-pyridine-4-carboxylic acid**
   - **Counter-Example**:
     - **4-pyridin-4-ylbenzoic acid** – Low yield (steric hindrance from multiple aromatic rings)

5. **Modifiers with Aldehyde or Ketone Groups Attached to Aromatic Rings Yield Low**:
   - **Description**: Modifiers with **aldehyde (-CHO)** or **ketone (>C=O)** groups directly attached to **aromatic rings** tend to result in **low yield**. These groups may strongly coordinate with the catalyst's active sites, inhibiting activity or altering electronic properties unfavorably.
   - **Examples**:
     - **4-formylbenzoic acid**
     - **5-formyl-2-hydroxybenzoic acid**
   - **Counter-Example**:
     - **4-aminobenzoic acid** – High yield (amino group enhances yield)

6. **Modifiers with Thiol Groups on Aliphatic Chains Yield High**:
   - **Description**: Modifiers with **thiol groups (-SH)** attached to **aliphatic chains** tend to result in **high yield**, likely due to effective coordination with metal centers in the catalyst. Thiol groups can act as ligands, enhancing catalyst performance.
   - **Example**:
     - **3-sulfanylpropanoic acid** – High yield
   - **Counter-Example**:
     - **4-sulfanylbenzoic acid** – Low yield (thiol group on aromatic ring may cause steric hindrance)

7. **Perfluorinated Aliphatic Carboxylic Acids Yield Low**:
   - **Description**: Modifiers that are **perfluorinated aliphatic carboxylic acids** (multiple **fluorine atoms** attached to the carbon chain) tend to result in **low yield**. The strong electron-withdrawing effect and extreme hydrophobicity may adversely affect catalyst interaction and solubility.
   - **Example**:
     - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**

8. **Alpha-Amino Acids with Aromatic Side Chains Yield Differently Based on Ring Type**:
   - **Description**: **Alpha-amino acids** with **heteroaromatic side chains** (e.g., **indole** in **tryptophan**) result in **high yield**, possibly due to enhanced coordination through heteroatoms. Amino acids with **phenyl** side chains (e.g., **phenylalanine**) without heteroatoms tend to result in **low yield** due to lack of beneficial interactions and potential steric hindrance.
   - **Examples**:
     - **High Yield**:
       - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (Tryptophan)
     - **Low Yield**:
       - **(2S)-2-amino-3-phenylpropanoic acid** (Phenylalanine)

9. **Modifiers with Polyether Chains Yield Low**:
   - **Description**: Modifiers containing **polyether chains** (multiple **ether linkages -O-**) tend to result in **low yield**. The flexible ether chains may not position functional groups optimally for catalyst interaction and can affect solubility unfavorably.
   - **Examples**:
     - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**
     - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**

10. **Modifiers with Multiple Hydroxyl Groups on Aliphatic Chains Yield High**:
    - **Description**: Modifiers that are **polyhydroxylated aliphatic carboxylic acids** (multiple **hydroxyl groups (-OH)** on the aliphatic chain) tend to result in **high yield**. The hydroxyl groups enhance solubility and provide multiple coordination sites for catalyst interaction.
    - **Example**:
      - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (Gluconic acid)
    - **Counter-Example**:
      - **7-hydroxyheptanoic acid** – Low yield (single hydroxyl group less impactful)

11. **Modifiers with Multiple Aromatic Rings Connected Directly Yield Low**:
    - **Description**: Modifiers containing **multiple aromatic rings** connected **directly** or through **short linkers** (less than three carbons) tend to result in **low yield**. Increased steric bulk and potential for π-π stacking can interfere with catalyst coordination.
    - **Examples**:
      - **4-pyridin-4-ylbenzoic acid** – Low yield
      - **2-[(4-hydroxybenzoyl)amino]acetic acid**
    - **Counter-Example**:
      - **4-pyridin-4-ylbutanoic acid** – High yield (longer aliphatic linker reduces steric hindrance)

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11
0,-1,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0
0,-1,1,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0
0,0,0,1,0,0,0,0,0,0,0
0,-1,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,-1,0,1,0,0,0,-1,0,0,0
0,0,0,1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,-1,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,-1,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,-1,0,0,0,0,0,0,0,0,0
0,-1,0,0,0,0,0,0,0,0,0
0,-1,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.7714285714285715; Test Accuracy: 1.0
    Train Support: 0.10857142857142857; Test Support: 0.2
    Train Confidence: 0.9205128205128205; Test Confidence: 0.6
    Train Lift: 1.825079604491369; Test Lift: NONE
    Train Leverage: 0.042775510204081636; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    
    # Hydroxyl group (-OH)
    hydroxyl_group = '[OX2H]'
    
    # Amino group (-NH2 or -NH-)
    amino_group = '[NX3;$([H2,$([H1][#6])])]'  # Primary or secondary amine
    
    # Long aliphatic chain (6 or more carbons)
    long_aliphatic_chain = '[CH2]CCCC[CH2]'
    
    # Aliphatic chain of five or fewer carbons
    short_aliphatic_chain = '[CH2][CH2][CH2][CH2][CH2]'
    
    # Aromatic ring
    aromatic_ring = 'c1ccccc1'
    
    # Electron-withdrawing groups (EWGs) at para position
    nitro_group_para = 'c1ccc(cc1)[NX3](=O)=O'
    bromo_group_para = 'c1ccc(cc1)CBr'
    amino_group_para = 'c1ccc(cc1)[NH2]'
    
    # Heteroaromatic rings
    heteroaromatic_ring = '[a;!c]'
    
    # Aldehyde group attached to aromatic ring
    aromatic_aldehyde = 'c[C](=O)[H]'
    
    # Ketone group attached to aromatic ring
    aromatic_ketone = 'cC(=O)C'
    
    # Thiol group on aliphatic chain
    thiol_aliphatic = '[CX4][SX2H]'
    
    # Perfluorinated aliphatic chain
    perfluoro_chain = '[CF3][CF2][CX3](=O)[OX2H1]'
    
    # Indole ring (heteroaromatic side chain)
    indole_ring = 'c1ccc2c(c1)[nH]c2'
    
    # Phenyl ring (aromatic side chain)
    phenyl_ring = 'c1ccccc1'
    
    # Polyether chain
    polyether_chain = '[OX2][CX4][CX4][OX2][CX4][CX4][OX2]'
    
    # Multiple hydroxyl groups on aliphatic chain
    polyhydroxylated_aliphatic = '[CX4][OX2H][CX4][OX2H][CX4][OX2H]'
    
    # Multiple aromatic rings connected directly
    multiple_aromatic_rings = 'c1ccccc1c2ccccc2'
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Long-chain aliphatic carboxylic acids without polar functional groups yield high',
            'patterns': [
                carboxylic_acid,
                long_aliphatic_chain
            ],
            'exclude_patterns': [
                hydroxyl_group,
                amino_group
            ],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Short-chain aliphatic amino acids yield high; longer chains yield low',
            'patterns': [
                carboxylic_acid,
                amino_group
            ],
            'chain_length_threshold': 5,
            'prediction': 1,
            'low_prediction': -1
        },
        {
            'number': 3,
            'description': 'Aromatic carboxylic acids with electron-withdrawing groups at para position yield high',
            'patterns': [
                carboxylic_acid,
                aromatic_ring
            ],
            'ewg_patterns': [
                nitro_group_para,
                bromo_group_para,
                amino_group_para
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Heteroaromatic carboxylic acids yield high',
            'patterns': [
                carboxylic_acid,
                heteroaromatic_ring
            ],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers with aldehyde or ketone groups attached to aromatic rings yield low',
            'patterns': [
                aromatic_aldehyde,
                aromatic_ketone
            ],
            'prediction': -1
        },
        {
            'number': 6,
            'description': 'Modifiers with thiol groups on aliphatic chains yield high',
            'patterns': [
                carboxylic_acid,
                thiol_aliphatic
            ],
            'exclude_patterns': [
                aromatic_ring
            ],
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'Perfluorinated aliphatic carboxylic acids yield low',
            'patterns': [
                perfluoro_chain
            ],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Alpha-amino acids with heteroaromatic side chains yield high; with phenyl side chains yield low',
            'patterns': [
                carboxylic_acid,
                amino_group
            ],
            'side_chain_patterns': [
                indole_ring
            ],
            'exclude_side_chain_patterns': [
                phenyl_ring
            ],
            'prediction': 1,
            'low_prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers with polyether chains yield low',
            'patterns': [
                carboxylic_acid,
                polyether_chain
            ],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers with multiple hydroxyl groups on aliphatic chains yield high',
            'patterns': [
                carboxylic_acid,
                polyhydroxylated_aliphatic
            ],
            'prediction': 1
        },
        {
            'number': 11,
            'description': 'Modifiers with multiple aromatic rings connected directly yield low',
            'patterns': [
                carboxylic_acid,
                multiple_aromatic_rings
            ],
            'prediction': -1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for pat in rule.get('patterns', []):
            compiled_patterns.append(Chem.MolFromSmarts(pat))
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_exclude_patterns = []
            for pat in rule['exclude_patterns']:
                compiled_exclude_patterns.append(Chem.MolFromSmarts(pat))
            rule['compiled_exclude_patterns'] = compiled_exclude_patterns
        # Compile EWG patterns if any
        if 'ewg_patterns' in rule:
            compiled_ewg_patterns = []
            for pat in rule['ewg_patterns']:
                compiled_ewg_patterns.append(Chem.MolFromSmarts(pat))
            rule['compiled_ewg_patterns'] = compiled_ewg_patterns
        # Compile side chain patterns if any
        if 'side_chain_patterns' in rule:
            compiled_side_chain_patterns = []
            for pat in rule['side_chain_patterns']:
                compiled_side_chain_patterns.append(Chem.MolFromSmarts(pat))
            rule['compiled_side_chain_patterns'] = compiled_side_chain_patterns
        # Compile exclude side chain patterns if any
        if 'exclude_side_chain_patterns' in rule:
            compiled_exclude_side_chain_patterns = []
            for pat in rule['exclude_side_chain_patterns']:
                compiled_exclude_side_chain_patterns.append(Chem.MolFromSmarts(pat))
            rule['compiled_exclude_side_chain_patterns'] = compiled_exclude_side_chain_patterns
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'compiled_exclude_patterns' in rule:
                    for pat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for pat in rule['compiled_patterns']:
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Additional checks for specific rules
                if rule['number'] == 2:
                    # Check chain length
                    num_carbons = len([atom for atom in mol.GetAtoms() if atom.GetAtomicNum() == 6])
                    if num_carbons <= rule['chain_length_threshold']:
                        prediction = rule['prediction']
                    else:
                        prediction = rule['low_prediction']
                    row.append(prediction)
                    continue
                if rule['number'] == 3:
                    # Check for EWG at para position
                    ewg_match = False
                    for ewg_pat in rule['compiled_ewg_patterns']:
                        if mol.HasSubstructMatch(ewg_pat):
                            ewg_match = True
                            break
                    if not ewg_match:
                        match = False
                        row.append(0)
                        continue
                if rule['number'] == 4:
                    # Check if molecule is heteroaromatic
                    is_heteroaromatic = False
                    for atom in mol.GetAtoms():
                        if atom.GetIsAromatic() and atom.GetAtomicNum() not in [6]:
                            is_heteroaromatic = True
                            break
                    if not is_heteroaromatic:
                        match = False
                        row.append(0)
                        continue
                if rule['number'] == 8:
                    # Check for side chain patterns
                    side_chain_match = False
                    for pat in rule['compiled_side_chain_patterns']:
                        if mol.HasSubstructMatch(pat):
                            side_chain_match = True
                            break
                    if side_chain_match:
                        prediction = rule['prediction']
                        row.append(prediction)
                        continue
                    exclude_side_chain_match = False
                    for pat in rule['compiled_exclude_side_chain_patterns']:
                        if mol.HasSubstructMatch(pat):
                            exclude_side_chain_match = True
                            break
                    if exclude_side_chain_match:
                        prediction = rule['low_prediction']
                        row.append(prediction)
                        continue
                    else:
                        row.append(0)
                        continue
                # If all patterns match
                row.append(rule['prediction'])
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

1. **Long-Chain Aliphatic Carboxylic Acids without Polar Functional Groups Yield High**:
   - **Description**: Modifiers that are **linear aliphatic carboxylic acids** with **six or more carbons** in the chain and **no additional polar functional groups** (such as hydroxyl or amino groups) tend to result in **high yield**. These hydrophobic chains may enhance favorable interactions with the catalyst or substrate.
   - **Example**:
     - **Octanoic acid** – High yield
   - **Counter-Examples**:
     - **7-hydroxyheptanoic acid** – Low yield (presence of a hydroxyl group reduces yield)
     - **7-aminoheptanoic acid** – Low yield (presence of an amino group reduces yield)

2. **Short-Chain Aliphatic Amino Acids Yield High; Longer Chains Yield Low**:
   - **Description**: Modifiers that are **aliphatic α-amino acids** with **five or fewer carbons** in the main chain result in **high yield**. **Longer-chain amino acids** (more than five carbons) tend to result in **low yield**, possibly due to increased steric hindrance or reduced solubility.
   - **Examples**:
     - **High Yield**:
       - **(2S)-2-aminobutanedioic acid** (Aspartic acid)
       - **(2S)-2-aminopentanedioic acid** (Glutamic acid)
       - **5-aminopentanoic acid**
     - **Low Yield**:
       - **7-aminoheptanoic acid**
       - **8-aminooctanoic acid**

3. **Aromatic Carboxylic Acids with Para-Substituted Electron-Donating Groups Yield High**:
   - **Description**: Modifiers that are **aromatic carboxylic acids** with **para-substituents** that are **electron-donating groups capable of coordinating** with metals (e.g., **amino (-NH₂)**, **hydroxy (-OH)**) tend to result in **high yield**. These groups may enhance coordination with the metal center of the catalyst.
   - **Examples**:
     - **4-aminobenzoic acid** – High yield
     - **5-(4-hydroxyphenyl)pentanoic acid** – High yield
   - **Counter-Examples**:
     - **4-methylbenzoic acid** – Low yield (methyl group lacks strong electron-donating ability and coordination capability)
     - **4-formylbenzoic acid** – Low yield (formyl group is electron-withdrawing)

4. **Heteroaromatic Carboxylic Acids Yield High**:
   - **Description**: Modifiers that are **heteroaromatic carboxylic acids** containing heteroatoms like **nitrogen** or **oxygen** (e.g., **pyridine**, **pyrazole**, **pyridone**) tend to result in **high yield**. The heteroatoms can coordinate with metal centers, enhancing interaction with the catalyst.
   - **Examples**:
     - **Pyridine-3-carboxylic acid** (Nicotinic acid) – High yield
     - **1H-pyrazole-4-carboxylic acid** – High yield
     - **2-oxo-1H-pyridine-4-carboxylic acid** – High yield
   - **Counter-Example**:
     - **4-pyridin-4-ylbenzoic acid** – Low yield (steric hindrance or less effective coordination due to multiple aromatic rings)

5. **Modifiers with Aldehyde or Ketone Groups Attached to Aromatic Rings Yield Low**:
   - **Description**: Modifiers with **aldehyde (-CHO)** or **ketone (>C=O)** groups directly attached to **aromatic rings** tend to result in **low yield**. These electron-withdrawing groups may interact unfavorably with the catalyst or inhibit catalytic activity.
   - **Examples**:
     - **4-formylbenzoic acid** – Low yield
     - **5-formyl-2-hydroxybenzoic acid** – Low yield
   - **Counter-Examples**:
     - **4-nitrobenzoic acid** – High yield (although nitro is electron-withdrawing, it may participate differently in coordination)
     - **4-aminobenzoic acid** – High yield (electron-donating group)

6. **Modifiers with Thiol Groups on Short Aliphatic Chains Yield High**:
   - **Description**: Modifiers with **thiol groups (-SH)** attached to **short aliphatic chains** tend to result in **high yield**, likely due to effective coordination with metal centers in the catalyst. Thiol groups can act as ligands, enhancing catalyst performance.
   - **Example**:
     - **3-sulfanylpropanoic acid** – High yield
   - **Counter-Example**:
     - **4-sulfanylbenzoic acid** – Low yield (thiol group on aromatic ring may not enhance yield due to steric or electronic factors)

7. **Perfluorinated Aliphatic Carboxylic Acids Yield Low**:
   - **Description**: Modifiers that are **perfluorinated aliphatic carboxylic acids** (multiple **fluorine atoms** attached to the carbon chain) tend to result in **low yield**. The strong electron-withdrawing effect and extreme hydrophobicity may adversely affect catalyst interaction and solubility.
   - **Example**:
     - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid** – Low yield

8. **Alpha-Amino Acids with Heteroaromatic Side Chains Yield High; Phenyl Side Chains Yield Low**:
   - **Description**: **Alpha-amino acids** with **heteroaromatic side chains** (e.g., **indole** in **tryptophan**) result in **high yield**, possibly due to enhanced coordination through heteroatoms. Amino acids with **phenyl** side chains (e.g., **phenylalanine**) without heteroatoms tend to result in **low yield** due to lack of beneficial coordination and potential steric hindrance.
   - **Examples**:
     - **High Yield**:
       - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (Tryptophan)
     - **Low Yield**:
       - **(2S)-2-amino-3-phenylpropanoic acid** (Phenylalanine)

9. **Modifiers with Polyether Chains Yield Low**:
   - **Description**: Modifiers containing **polyether chains** (multiple **ether linkages -O-**) tend to result in **low yield**. The flexible ether chains may not position functional groups optimally for catalyst interaction and can affect solubility unfavorably.
   - **Examples**:
     - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid** – Low yield
     - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid** – Low yield

10. **Modifiers with Multiple Hydroxyl Groups on Aliphatic Chains Yield High**:
    - **Description**: Modifiers that are **polyhydroxylated aliphatic carboxylic acids** (multiple **hydroxyl groups (-OH)** on the aliphatic chain) tend to result in **high yield**. The hydroxyl groups enhance solubility and provide multiple coordination sites for catalyst interaction.
    - **Example**:
      - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (Gluconic acid) – High yield
    - **Counter-Example**:
      - **7-hydroxyheptanoic acid** – Low yield (single hydroxyl group less impactful)

11. **Modifiers with Multiple Aromatic Rings Connected Directly Yield Low**:
    - **Description**: Modifiers containing **multiple aromatic rings** connected **directly** or through **short linkers** (less than three carbons) tend to result in **low yield**. Increased steric bulk and potential for π-π stacking can interfere with catalyst coordination.
    - **Examples**:
      - **4-pyridin-4-ylbenzoic acid** – Low yield
      - **2-[(4-hydroxybenzoyl)amino]acetic acid** – Low yield
    - **Counter-Example**:
      - **4-pyridin-4-ylbutanoic acid** – High yield (longer aliphatic linker reduces steric hindrance)

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0

---------------------------------------------------------------


    Train Accuracy: 0.5142857142857142; Test Accuracy: 0.0
    Train Support: 0.0; Test Support: 0.0
    Train Confidence: 0.5; Test Confidence: 0.5
    Train Lift: 1.0; Test Lift: NONE
    Train Leverage: 0.0; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    from rdkit import Chem
    import pandas as pd

    # Define helper function for chain traversal
    def traverse_chain(atom, visited):
        if atom.GetIdx() in visited:
            return 0
        if atom.IsInRing():
            return 0
        visited.add(atom.GetIdx())
        length = 1
        for neighbor in atom.GetNeighbors():
            if neighbor.GetAtomicNum() == 6 and not neighbor.IsInRing():
                length = max(length, 1 + traverse_chain(neighbor, visited))
        return length

    # Initialize the list of rules
    rules = []

    # Rule 1: Long-Chain Aliphatic Carboxylic Acids without Polar Functional Groups Yield High
    rules.append({
        'number': 1,
        'description': 'Modifiers that are linear aliphatic carboxylic acids with six or more carbons in the chain and no additional polar functional groups tend to result in high yield.',
        'prediction': 1,
        'include_patterns': ['[CX3](=O)[OX1-,OX2H1]'],  # Carboxylic acid group
        'exclude_patterns': ['[OX2H]', '[NX3H2,NX3H1]'],  # Exclude hydroxyl and amino groups
        'chain_length_min': 6  # Minimum chain length required
    })

    # Rule 2: Short-Chain Aliphatic Amino Acids Yield High; Longer Chains Yield Low
    rules.append({
        'number': 2,
        'description': 'Aliphatic alpha-amino acids with five or fewer carbons in the main chain result in high yield; longer chains yield low.',
        'prediction': 1,
        'include_patterns': ['[NX3H2][CX4H]([CX3](=O)[OX1-,OX2H1])[CX4]'],  # Alpha-amino acid pattern
        'exclude_patterns': [],
        'chain_length_max': 5  # Maximum chain length allowed
    })

    # Additional rules can be added here following the same structure
    # For brevity, only the first two rules are implemented in detail

    # Compile patterns
    for rule in rules:
        rule['compiled_include'] = [Chem.MolFromSmarts(pat) for pat in rule.get('include_patterns', [])]
        rule['compiled_exclude'] = [Chem.MolFromSmarts(pat) for pat in rule.get('exclude_patterns', [])]

    # Initialize results
    results = []

    # Process each SMILES
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Exclude patterns
                for pat in rule.get('compiled_exclude', []):
                    if mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Include patterns
                for pat in rule.get('compiled_include', []):
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Additional checks
                if 'chain_length_min' in rule or 'chain_length_max' in rule:
                    # Find the relevant functional group
                    if 'chain_length_min' in rule:
                        target_chain_length = rule['chain_length_min']
                    else:
                        target_chain_length = rule['chain_length_max']
                    functional_group_pat = Chem.MolFromSmarts(rule['include_patterns'][0])
                    matches = mol.GetSubstructMatches(functional_group_pat)
                    if matches:
                        chain_lengths = []
                        for match_atoms in matches:
                            # Get the relevant atom index (e.g., carbon in carboxylic acid)
                            atom_idx = match_atoms[0]
                            chain_length = traverse_chain_length(mol, atom_idx)
                            chain_lengths.append(chain_length)
                        if chain_lengths:
                            if 'chain_length_min' in rule:
                                if max(chain_lengths) < rule['chain_length_min']:
                                    match = False
                            else:
                                if min(chain_lengths) > rule['chain_length_max']:
                                    match = False
                        else:
                            match = False
                    else:
                        match = False
                    if not match:
                        row.append(0)
                        continue
                # If all checks passed
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                row.append(0)
        results.append(row)
    # Create DataFrame
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

    # Helper function for chain length traversal
    def traverse_chain_length(mol, atom_idx):
        from collections import deque
        visited = set()
        queue = deque()
        queue.append((atom_idx, 0))
        max_length = 0
        while queue:
            current_idx, length = queue.popleft()
            if current_idx in visited:
                continue
            visited.add(current_idx)
            atom = mol.GetAtomWithIdx(current_idx)
            if atom.GetAtomicNum() != 6 or atom.IsInRing():  # Only aliphatic carbons
                continue
            max_length = max(max_length, length)
            for neighbor in atom.GetNeighbors():
                queue.append((neighbor.GetIdx(), length+1))
        return max_length

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

1. **Modifiers That Are Short-Chain Aliphatic Carboxylic Acids with Amino Groups Near the Carboxylate Yield High**

   - **Description**: Modifiers that are **aliphatic carboxylic acids** with **chains of six or fewer carbons**, containing an **amino group (-NH₂)** at the **alpha or gamma position** relative to the carboxylate group, tend to result in **high yield**. The proximity of the amino group enhances **coordination** with the metal center in the catalyst.

   - **Examples**:
     - **(2S)-2-aminobutanedioic acid** (Aspartic acid) – High yield
     - **(2S)-2-aminopentanedioic acid** (Glutamic acid) – High yield
     - **5-aminopentanoic acid** – High yield

   - **Counter-Examples**:
     - **7-aminoheptanoic acid** – Low yield (amino group too distant from the carboxylate)
     - **8-aminooctanoic acid** – Low yield

2. **Modifiers That Are Aromatic Carboxylic Acids with Para-Substituted Amino or Hydroxyl Groups Yield High**

   - **Description**: Modifiers that are **aromatic carboxylic acids** with **electron-donating groups** such as **amino (-NH₂)** or **hydroxyl (-OH)** groups in the **para position** tend to result in **high yield**. These substituents enhance **metal coordination** through the aromatic ring.

   - **Examples**:
     - **4-aminobenzoic acid** – High yield
     - **5-(4-hydroxyphenyl)pentanoic acid** – High yield
     - **4-nitrobenzoic acid** – High yield (nitro group can participate in coordination despite being electron-withdrawing)

   - **Counter-Examples**:
     - **4-methylbenzoic acid** – Low yield (methyl group is not an effective coordinating ligand)
     - **4-formylbenzoic acid** – Low yield (aldehyde group is electron-withdrawing and less effective in coordination)

3. **Modifiers That Are Heteroaromatic Carboxylic Acids Containing Nitrogen Heterocycles Yield High**

   - **Description**: Modifiers that are **heteroaromatic carboxylic acids** with **nitrogen-containing rings** (e.g., **pyridine**, **pyrazole**) tend to result in **high yield**. Nitrogen atoms in the ring enhance **coordination** with the metal center.

   - **Examples**:
     - **Pyridine-3-carboxylic acid** (Nicotinic acid) – High yield
     - **1H-pyrazole-4-carboxylic acid** – High yield

   - **Counter-Example**:
     - **4-pyridin-4-ylbenzoic acid** – Low yield (possible **steric hindrance** due to multiple aromatic rings connected directly)

4. **Modifiers That Are Aliphatic Carboxylic Acids with Long Hydrocarbon Chains and No Additional Polar Groups Yield High**

   - **Description**: Modifiers that are **aliphatic carboxylic acids** with **chains of eight or more carbons** and **no additional polar functional groups** tend to result in **high yield**. The long hydrophobic chains may enhance interactions with the **reaction medium** and **catalyst surface**.

   - **Example**:
     - **Octanoic acid** – High yield

   - **Counter-Examples**:
     - **7-hydroxyheptanoic acid** – Low yield (presence of a hydroxyl group may interfere with interactions)
     - **7-aminoheptanoic acid** – Low yield

5. **Modifiers with Multiple Hydroxyl Groups on Short Aliphatic Chains Yield High**

   - **Description**: Modifiers that are **short-chain aliphatic carboxylic acids** containing **multiple hydroxyl groups (-OH)** tend to result in **high yield**. Multiple hydroxyl groups increase **solubility** and provide additional **coordination sites**.

   - **Example**:
     - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (Gluconic acid) – High yield

   - **Counter-Example**:
     - **7-hydroxyheptanoic acid** – Low yield (only one hydroxyl group on a longer chain)

6. **Modifiers That Are Perfluorinated Aliphatic Carboxylic Acids Yield Low**

   - **Description**: Modifiers with **perfluorinated chains** (chains where hydrogen atoms are replaced with **fluorine**) tend to result in **low yield**. The strong **electron-withdrawing** effect and extreme **hydrophobicity** reduce the modifier's ability to coordinate with the metal center.

   - **Example**:
     - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid** – Low yield

7. **Modifiers Containing Polyether Chains Yield Low**

   - **Description**: Modifiers with **polyether chains** (multiple **ether linkages -O-**) tend to result in **low yield**. The flexibility of the ether chains may hinder effective **coordination** with the catalyst, and their hydrophilicity may negatively affect the reaction environment.

   - **Examples**:
     - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid** – Low yield
     - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid** – Low yield

8. **Alpha-Amino Acids with Heteroaromatic Side Chains Yield High; Those with Non-Heteroaromatic Side Chains Yield Low**

   - **Description**: **Alpha-amino acids** with **heteroaromatic side chains** (e.g., **indole** ring in **tryptophan**) tend to result in **high yield** due to enhanced **metal coordination**. Amino acids with **non-heteroaromatic side chains** (e.g., **phenylalanine**) generally result in **low yield**.

   - **Examples**:
     - **High Yield**:
       - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (Tryptophan)
     - **Low Yield**:
       - **(2S)-2-amino-3-phenylpropanoic acid** (Phenylalanine)

9. **Modifiers with Multiple Aromatic Rings Connected Directly Yield Low; Those Connected via Aliphatic Linkers Yield High**

   - **Description**: Modifiers with **multiple aromatic rings** connected **directly** (e.g., **biaryl compounds**) tend to result in **low yield** due to **steric hindrance** affecting coordination. If the rings are connected via an **aliphatic linker**, the hindrance is reduced, leading to **high yield**.

   - **Examples**:
     - **Low Yield**:
       - **4-pyridin-4-ylbenzoic acid**
     - **High Yield**:
       - **4-pyridin-4-ylbutanoic acid** – High yield (aliphatic linker present)

10. **Modifiers That Are Aromatic Carboxylic Acids with Electron-Withdrawing Aldehyde or Keto Groups Yield Low**

    - **Description**: Modifiers with **electron-withdrawing groups** such as **aldehyde (-CHO)** or **keto (>C=O)** groups attached to the **aromatic ring** tend to result in **low yield**. These groups decrease the **electron density** on the ring, hindering **metal coordination**.

    - **Examples**:
      - **4-formylbenzoic acid** – Low yield
      - **5-formyl-2-hydroxybenzoic acid** – Low yield

11. **Modifiers with Aromatic Rings Substituted with Methoxy Groups Yield High**

    - **Description**: Modifiers that are **aromatic carboxylic acids** with **methoxy (-OCH₃)** substituents tend to result in **high yield**. Methoxy groups are **electron-donating** and enhance **coordination** with the metal catalyst.

    - **Example**:
      - **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid** – High yield

    - **Counter-Example**:
      - **3-(4-hydroxyphenyl)propanoic acid** – Low yield (hydroxy group may not be positioned optimally for coordination)

12. **Modifiers with Thiol Groups on Short Aliphatic Chains Yield High; Those with Thiol Groups Directly Attached to Aromatics Yield Low**

    - **Description**: Modifiers with **thiol groups (-SH)** on **short aliphatic chains** tend to result in **high yield** due to effective **coordination** with the metal center. However, if the thiol group is **directly attached to an aromatic ring**, the modifier tends to result in **low yield**, possibly due to **steric or electronic factors**.

    - **Examples**:
      - **High Yield**:
        - **3-sulfanylpropanoic acid**
      - **Low Yield**:
        - **4-sulfanylbenzoic acid**

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12
1,0,0,0,0,0,0,-1,0,0,0,0
1,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,1
0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.5428571428571428; Test Accuracy: 0.0
    Train Support: 0.02857142857142857; Test Support: 1.0
    Train Confidence: 0.25; Test Confidence: 1.0
    Train Lift: 0.48611111111111116; Test Lift: NONE
    Train Leverage: -0.02857142857142857; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for the rules

    # Rule 1: Modifiers that are short-chain aliphatic carboxylic acids with amino groups near the carboxylate yield high
    # Carboxylic acid group
    carboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1]'
    # Primary amine group
    primary_amine = '[NX3;H2]'
    # Define SMARTS for amino group at alpha or gamma position relative to carboxylate
    # Alpha position
    alpha_amino_acid = '[NX3;H2][CH][CX3](=O)[OX1H0-,OX2H1]'
    # Gamma position
    gamma_amino_acid = '[NX3;H2][CH2][CH2][CX3](=O)[OX1H0-,OX2H1]'

    # Rule 2: Aromatic carboxylic acids with para-substituted amino or hydroxyl groups yield high
    para_amino_acid = 'c1ccc(N)cc1C(=O)[O;H1,-]'
    para_hydroxy_acid = 'c1ccc(O)cc1C(=O)[O;H1,-]'

    # Rule 3: Heteroaromatic carboxylic acids containing nitrogen heterocycles yield high
    heteroaromatic_carboxylic_acid = '[nH0;R][c;R]C(=O)[O;H1,-]'

    # Rule 4: Aliphatic carboxylic acids with long hydrocarbon chains and no additional polar groups yield high
    long_chain_carboxylic_acid = '[CH3][CH2][CH2][CH2][CH2][CH2][CH2][CH2]C(=O)[O;H1,-]'

    # Rule 5: Modifiers with multiple hydroxyl groups on short aliphatic chains yield high
    polyhydroxy_acid = '[CX4;H1][OX2H][CX4;H1][OX2H][CX4;H1]C(=O)[O;H1,-]'

    # Rule 6: Modifiers that are perfluorinated aliphatic carboxylic acids yield low
    perfluorinated_acid = '[CX4](F)(F)(F)[CX4](F)(F)[CX4](F)(F)C(=O)[O;H1,-]'

    # Rule 7: Modifiers containing polyether chains yield low
    polyether_chain = '[OX2][CX4][CX4][OX2][CX4][CX4][OX2]'

    # Rule 8: Alpha-amino acids with heteroaromatic side chains yield high; those with non-heteroaromatic side chains yield low
    alpha_amino_acid = '[NX3;H2][CH][C](=O)[O;H1,-]'
    heteroaromatic_side_chain = '[c,n,o,s]1[c,n,o,s][c,n,o,s][c,n,o,s][c,n,o,s][c,n,o,s]1'

    # Rule 9: Modifiers with multiple aromatic rings connected directly yield low; those connected via aliphatic linkers yield high
    biphenyl = 'c1ccccc1c2ccccc2'
    linked_aromatics = 'c1ccccc1CCc2ccccc2'

    # Rule 10: Aromatic carboxylic acids with electron-withdrawing aldehyde or keto groups yield low
    aromatic_aldehyde_acid = 'c1ccc(C=O)cc1C(=O)[O;H1,-]'
    aromatic_ketone_acid = 'c1ccc(C(=O)[#6])cc1C(=O)[O;H1,-]'

    # Rule 11: Modifiers with aromatic rings substituted with methoxy groups yield high
    methoxy_aromatic_acid = 'c1ccc(OC)cc1C(=O)[O;H1,-]'

    # Rule 12: Modifiers with thiol groups on short aliphatic chains yield high; those with thiol groups directly attached to aromatics yield low
    aliphatic_thiol_acid = '[SX2H][CX4][CX4]C(=O)[O;H1,-]'
    aromatic_thiol_acid = 'c1ccc(S)cc1C(=O)[O;H1,-]'

    # Define rules as list of dictionaries
    rules = [
        {
            'number': 1,
            'description': 'Short-chain aliphatic carboxylic acids with amino groups near the carboxylate yield high',
            'patterns': [alpha_amino_acid, gamma_amino_acid],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Aromatic carboxylic acids with para-substituted amino or hydroxyl groups yield high',
            'patterns': [para_amino_acid, para_hydroxy_acid],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Heteroaromatic carboxylic acids containing nitrogen heterocycles yield high',
            'patterns': [heteroaromatic_carboxylic_acid],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Aliphatic carboxylic acids with long hydrocarbon chains and no additional polar groups yield high',
            'patterns': [long_chain_carboxylic_acid],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers with multiple hydroxyl groups on short aliphatic chains yield high',
            'patterns': [polyhydroxy_acid],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers that are perfluorinated aliphatic carboxylic acids yield low',
            'patterns': [perfluorinated_acid],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Modifiers containing polyether chains yield low',
            'patterns': [polyether_chain],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Alpha-amino acids with heteroaromatic side chains yield high; non-heteroaromatic side chains yield low',
            'patterns': [alpha_amino_acid],
            'side_chain': heteroaromatic_side_chain,
            'prediction': 1,
            'negative_prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers with multiple aromatic rings connected directly yield low; via aliphatic linkers yield high',
            'patterns': [biphenyl],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Aromatic carboxylic acids with electron-withdrawing aldehyde or keto groups yield low',
            'patterns': [aromatic_aldehyde_acid, aromatic_ketone_acid],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Modifiers with aromatic rings substituted with methoxy groups yield high',
            'patterns': [methoxy_aromatic_acid],
            'prediction': 1
        },
        {
            'number': 12,
            'description': 'Modifiers with thiol groups on short aliphatic chains yield high; directly attached to aromatics yield low',
            'patterns': [aliphatic_thiol_acid],
            'negative_patterns': [aromatic_thiol_acid],
            'prediction': 1,
            'negative_prediction': -1
        }
    ]

    # Compile patterns
    for rule in rules:
        compiled_patterns = [Chem.MolFromSmarts(p) for p in rule.get('patterns', [])]
        rule['compiled_patterns'] = compiled_patterns
        if 'negative_patterns' in rule:
            compiled_negative_patterns = [Chem.MolFromSmarts(p) for p in rule['negative_patterns']]
            rule['compiled_negative_patterns'] = compiled_negative_patterns
        if 'side_chain' in rule:
            rule['compiled_side_chain'] = Chem.MolFromSmarts(rule['side_chain'])

    # Initialize results
    results = []

    # Process each SMILES
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = False
                for pat in rule['compiled_patterns']:
                    if mol.HasSubstructMatch(pat):
                        match = True
                        break
                if match:
                    # Additional checks
                    if 'compiled_negative_patterns' in rule:
                        negative_match = False
                        for neg_pat in rule['compiled_negative_patterns']:
                            if mol.HasSubstructMatch(neg_pat):
                                negative_match = True
                                break
                        if negative_match:
                            row.append(rule.get('negative_prediction', 0))
                            continue
                    if 'compiled_side_chain' in rule:
                        if mol.HasSubstructMatch(rule['compiled_side_chain']):
                            row.append(rule['prediction'])
                        else:
                            row.append(rule.get('negative_prediction', 0))
                    else:
                        row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)

    # Create DataFrame
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df
--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

---

1. **Alpha-Amino Dicarboxylic Acids Yield High**

   - **Description**: Modifiers that are **alpha-amino acids with two carboxylic acid groups** (dicarboxylic acids) result in **high yield**. The presence of both the amino group and two carboxylate groups provides multiple sites for strong **coordination** with the metal center of the catalyst, enhancing reactivity.

   - **Examples**:
     - **(2S)-2-aminobutanedioic acid** (Aspartic acid) – High yield
     - **(2S)-2-aminopentanedioic acid** (Glutamic acid) – High yield

   - **Counter-Example**:
     - **(2S)-2-amino-3-phenylpropanoic acid** (Phenylalanine) – Low yield (single carboxylate group and bulky aromatic side chain reduce coordination ability)

---

2. **Straight-Chain Aliphatic Carboxylic Acids Without Additional Polar Groups Yield High; Introduction of Polar Groups Reduces Yield**

   - **Description**: Modifiers that are **straight-chain aliphatic carboxylic acids** with **no additional polar functional groups** (like **octanoic acid**) tend to result in **high yield** due to minimal steric hindrance and favorable hydrophobic interactions. Incorporating **polar groups** (e.g., **hydroxyl (-OH)**, **amino (-NH₂)**) into the aliphatic chain decreases yield, possibly due to altered hydrophilicity and interference with **catalyst coordination**.

   - **Examples**:
     - **High Yield**:
       - **Octanoic acid** – High yield
       - **5-aminopentanoic acid** – High yield (amino group at a favorable position)
     - **Low Yield**:
       - **7-hydroxyheptanoic acid**
       - **7-aminoheptanoic acid**
       - **8-aminooctanoic acid**

---

3. **Aromatic Carboxylic Acids with Para Electron-Donating Groups Yield High; Those with Electron-Withdrawing Groups Yield Low**

   - **Description**: Modifiers that are **aromatic carboxylic acids** with **electron-donating groups** (e.g., **amino (-NH₂)**, **hydroxyl (-OH)**, **methoxy (-OCH₃)**) at the **para position** enhance **electron density** on the aromatic ring, improving **metal coordination** and resulting in **high yield**. **Electron-withdrawing groups** at the para position decrease electron density, leading to **low yield**.

   - **Examples**:
     - **High Yield**:
       - **4-aminobenzoic acid**
       - **5-(4-hydroxyphenyl)pentanoic acid**
       - **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid**
     - **Low Yield**:
       - **4-formylbenzoic acid**
       - **4-methylbenzoic acid** (methyl group is weakly donating but may not enhance coordination significantly)

   - **Exception**:
     - **4-nitrobenzoic acid** – High yield (despite the nitro group being electron-withdrawing, it may coordinate through oxygen atoms)

---

4. **Heteroaromatic Carboxylic Acids Containing Nitrogen Atoms Yield High**

   - **Description**: Modifiers that are **heteroaromatic carboxylic acids** with **nitrogen atoms** in the ring (such as **pyridine** and **pyrazole**) tend to result in **high yield**. The lone pair electrons on nitrogen enhance **coordination** with the metal center.

   - **Examples**:
     - **Pyridine-3-carboxylic acid** (Nicotinic acid)
     - **1H-pyrazole-4-carboxylic acid**
     - **2-oxo-1H-pyridine-4-carboxylic acid**

   - **Counter-Example**:
     - **4-pyridin-4-ylbenzoic acid** – Low yield (rigidity and possible steric hindrance reduce effective coordination)

---

5. **Modifiers with Flexible Aliphatic Linkers Between Functional Groups Yield High; Rigid Structures Yield Low**

   - **Description**: Modifiers featuring **flexible aliphatic chains** connecting functional groups (e.g., aromatic rings, heterocycles) allow better **conformational adjustment** and more effective **coordination** with the metal center, resulting in **high yield**. Rigid structures or directly connected aromatic systems may cause **steric hindrance**, leading to **low yield**.

   - **Examples**:
     - **High Yield**:
       - **4-pyridin-4-ylbutanoic acid**
       - **5-(4-hydroxyphenyl)pentanoic acid**
     - **Low Yield**:
       - **4-pyridin-4-ylbenzoic acid** (directly connected rings without flexible linker)

---

6. **Modifiers with Polyether Chains Yield Low**

   - **Description**: Modifiers containing **polyether chains** (multiple ether linkages, such as **-O-(CH₂CH₂O)_n-**) are highly **flexible** and **hydrophilic**, which may disrupt the reaction environment and hinder **effective coordination** with the metal center, resulting in **low yield**.

   - **Examples**:
     - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**
     - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**

---

7. **Modifiers with Thiol Groups on Short Aliphatic Chains Yield High; Those Attached Directly to Aromatics Yield Low**

   - **Description**: Modifiers possessing **thiol groups (-SH)** on **short aliphatic chains** can form strong **coordination bonds** with metals due to sulfur's affinity for metal centers, leading to **high yield**. When the thiol group is **directly attached to an aromatic ring**, it may not coordinate as effectively, resulting in **low yield**.

   - **Examples**:
     - **High Yield**:
       - **3-sulfanylpropanoic acid**
     - **Low Yield**:
       - **4-sulfanylbenzoic acid**

---

8. **Modifiers with Multiple Hydroxyl Groups on Short Aliphatic Chains Yield High**

   - **Description**: Modifiers that are **short-chain aliphatic carboxylic acids** with **multiple hydroxyl groups (-OH)** provide additional **coordination sites** and enhance **water solubility**, facilitating better interaction with the metal center and resulting in **high yield**.

   - **Example**:
     - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (Gluconic acid)

---

9. **Modifiers with Ketone Groups Adjacent to Carboxylic Acid Yield Low**

   - **Description**: Modifiers that have **ketone groups (-C=O)** adjacent to the **carboxylic acid group** are more **electron-withdrawing**, which reduces the **electron density** available for effective **metal coordination**, leading to **low yield**.

   - **Example**:
     - **4-oxoheptanedioic acid**

---

10. **Modifiers with Perfluoroalkyl Chains Yield Low**

    - **Description**: Modifiers containing **perfluoroalkyl chains** (alkyl chains where hydrogen atoms are replaced with **fluorine**) exhibit strong **electron-withdrawing effects** and extreme **hydrophobicity**, leading to poor **metal coordination** and resulting in **low yield**.

    - **Example**:
      - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**

---

11. **Modifiers with Bulky or Sterically Hindered Groups Near Coordination Sites Yield Low**

    - **Description**: Modifiers featuring **bulky groups** near potential **coordination sites** can hinder interaction with the metal center due to **steric hindrance**, resulting in **low yield**.

    - **Examples**:
      - **(2S)-2-amino-3-phenylpropanoic acid** (Phenylalanine)
      - **4-pyridin-4-ylbenzoic acid**

---

12. **Modifiers with Conjugated Systems and Electron-Rich Functional Groups Yield High**

    - **Description**: Modifiers that contain **conjugated systems** (like aromatic rings) along with **electron-rich functional groups** (such as **methoxy (-OCH₃)**, **hydroxyl (-OH)**) can enhance coordination through **delocalized electron density**, leading to **high yield**.

    - **Examples**:
      - **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid**
      - **1,3-dioxo-2-benzofuran-5-carboxylic acid**

---

13. **Modifiers with Aldehyde Groups on Aromatic Rings Yield Low**

    - **Description**: Modifiers with **aldehyde groups (-CHO)** attached to **aromatic rings** decrease **electron density** on the ring and reduce the effectiveness of **metal coordination**, resulting in **low yield**.

    - **Examples**:
      - **4-formylbenzoic acid**
      - **5-formyl-2-hydroxybenzoic acid**

---

14. **Modifiers with Nitro Groups on Aromatic Rings Yield High**

    - **Description**: Although **nitro groups (-NO₂)** are typically **electron-withdrawing**, they can coordinate with metals through their **oxygen atoms**, resulting in **high yield** in specific cases.

    - **Example**:
      - **4-nitrobenzoic acid**

---

15. **Modifiers with Polycyclic Aromatic Systems Containing Oxygen or Nitrogen Atoms Yield High**

    - **Description**: Modifiers containing **polycyclic aromatic systems** with **heteroatoms** (like **oxygen** or **nitrogen**) can provide multiple **coordination sites** and enhance **π-electron delocalization**, improving interaction with the metal center and resulting in **high yield**.

    - **Examples**:
      - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (Tryptophan)
      - **2-oxo-1H-pyridine-4-carboxylic acid**

---

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
1,0,0,0,1,0,0,1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,1,0,0,1,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,1
0,0,0,0,1,0,0,1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,1
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,1
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,1,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,1
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,1
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
0,0,0,0,1,0,0,1,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,1,0,0,1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.7428571428571429; Test Accuracy: 1.0
    Train Support: 0.09387755102040816; Test Support: 0.0
    Train Confidence: 0.8196428571428571; Test Confidence: 0.42857142857142855
    Train Lift: 1.6264297385620916; Test Lift: NONE
    Train Leverage: 0.014577259475218667; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    carboxylate_anion = '[CX3](=O)[O-]'
    primary_amine = '[NX3H2]'  # Primary amine (-NH2)
    amino_acid_alpha_carbon = '[CX4H]'  # Alpha carbon in amino acids
    
    hydroxyl_group = '[OX2H]'
    amino_group = '[NX3H2,NX3H1,NX3H0]'
    
    aromatic_ring = '[a]'
    benzene_ring = 'c1ccccc1'
    aromatic_carboxylic_acid = 'c1ccccc1C(=O)O'
    para_amino_benzoic_acid = 'c1cc(N)ccc1C(=O)O'
    para_hydroxy_benzoic_acid = 'c1cc(O)ccc1C(=O)O'
    para_methoxy_benzoic_acid = 'c1cc(OC)ccc1C(=O)O'
    
    electron_withdrawing_group_on_aromatic = '[c][CX3](=O)[CX3H]'
    nitro_group_on_aromatic = '[c][NX3](=O)=O'
    
    pyridine_ring = 'n1ccccc1'
    heteroaromatic_carboxylic_acid = '[nH]1cccc1C(=O)O'
    
    thiol_aliphatic_chain = '[#6][SX2H]'
    thiol_on_aromatic = '[c][SX2H]'
    
    multiple_hydroxyl_groups = '[OX2H]'
    ketone_adjacent_to_carboxylic_acid = '[CX3](=O)[CX3](=O)[OX1H]'
    
    perfluoroalkyl_chain = '[CX4]([F])([F])[F]'
    
    bulky_groups = '[CX3H1](c)(c)[*]'  # Tertiary carbon
    
    conjugated_system_with_electron_rich_groups = '[c][OX2H,OX2][c]'
    
    aldehyde_group_on_aromatic = '[c][CX3H1]=O'
    
    nitro_group_on_aromatic = '[c][NX3](=O)=O'
    
    polycyclic_aromatic_with_heteroatoms = '[c][n,o][c][c][c][c]'
    
    # Compile SMARTS patterns
    patterns = {
        'carboxylic_acid': Chem.MolFromSmarts(carboxylic_acid),
        'carboxylate_anion': Chem.MolFromSmarts(carboxylate_anion),
        'primary_amine': Chem.MolFromSmarts(primary_amine),
        'amino_acid_alpha_carbon': Chem.MolFromSmarts(amino_acid_alpha_carbon),
        'hydroxyl_group': Chem.MolFromSmarts(hydroxyl_group),
        'amino_group': Chem.MolFromSmarts(amino_group),
        'aromatic_ring': Chem.MolFromSmarts(aromatic_ring),
        'benzene_ring': Chem.MolFromSmarts(benzene_ring),
        'aromatic_carboxylic_acid': Chem.MolFromSmarts(aromatic_carboxylic_acid),
        'para_amino_benzoic_acid': Chem.MolFromSmarts(para_amino_benzoic_acid),
        'para_hydroxy_benzoic_acid': Chem.MolFromSmarts(para_hydroxy_benzoic_acid),
        'para_methoxy_benzoic_acid': Chem.MolFromSmarts(para_methoxy_benzoic_acid),
        'electron_withdrawing_group_on_aromatic': Chem.MolFromSmarts(electron_withdrawing_group_on_aromatic),
        'nitro_group_on_aromatic': Chem.MolFromSmarts(nitro_group_on_aromatic),
        'pyridine_ring': Chem.MolFromSmarts(pyridine_ring),
        'thiol_aliphatic_chain': Chem.MolFromSmarts(thiol_aliphatic_chain),
        'thiol_on_aromatic': Chem.MolFromSmarts(thiol_on_aromatic),
        'multiple_hydroxyl_groups': Chem.MolFromSmarts(multiple_hydroxyl_groups),
        'ketone_adjacent_to_carboxylic_acid': Chem.MolFromSmarts(ketone_adjacent_to_carboxylic_acid),
        'perfluoroalkyl_chain': Chem.MolFromSmarts(perfluoroalkyl_chain),
        'bulky_groups': Chem.MolFromSmarts(bulky_groups),
        'conjugated_system_with_electron_rich_groups': Chem.MolFromSmarts(conjugated_system_with_electron_rich_groups),
        'aldehyde_group_on_aromatic': Chem.MolFromSmarts(aldehyde_group_on_aromatic),
        'polycyclic_aromatic_with_heteroatoms': Chem.MolFromSmarts(polycyclic_aromatic_with_heteroatoms),
    }
    
    # Define the rules as a list of dictionaries
    rules = [
        {
            'number': 1,
            'description': 'Alpha-Amino Dicarboxylic Acids Yield High',
            'patterns': [
                patterns['primary_amine'],
                patterns['amino_acid_alpha_carbon'],
                patterns['carboxylic_acid'],
            ],
            'count_patterns': [
                (patterns['carboxylic_acid'], 2)  # At least 2 carboxylic acid groups
            ],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Straight-Chain Aliphatic Carboxylic Acids Without Additional Polar Groups Yield High; Introduction of Polar Groups Reduces Yield',
            'patterns': [
                patterns['carboxylic_acid'],
            ],
            'exclude_patterns': [
                patterns['hydroxyl_group'],
                patterns['amino_group'],
                patterns['aromatic_ring'],
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Aromatic Carboxylic Acids with Para Electron-Donating Groups Yield High; Those with Electron-Withdrawing Groups Yield Low',
            'patterns': [
                patterns['aromatic_carboxylic_acid'],
                patterns['para_amino_benzoic_acid'],
                patterns['para_hydroxy_benzoic_acid'],
                patterns['para_methoxy_benzoic_acid'],
            ],
            'exclude_patterns': [
                patterns['electron_withdrawing_group_on_aromatic'],
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Heteroaromatic Carboxylic Acids Containing Nitrogen Atoms Yield High',
            'patterns': [
                patterns['pyridine_ring'],
                patterns['carboxylic_acid'],
            ],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers with Flexible Aliphatic Linkers Between Functional Groups Yield High; Rigid Structures Yield Low',
            'patterns': [
                patterns['carboxylic_acid'],
            ],
            'exclude_patterns': [
                patterns['bulky_groups'],
                patterns['aromatic_ring'],
            ],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers with Polyether Chains Yield Low',
            'patterns': [
                Chem.MolFromSmarts('[#6][OX2][#6][OX2][#6][OX2][#6]'),  # Simple polyether chain pattern
            ],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Modifiers with Thiol Groups on Short Aliphatic Chains Yield High; Those Attached Directly to Aromatics Yield Low',
            'patterns': [
                patterns['thiol_aliphatic_chain'],
                patterns['carboxylic_acid'],
            ],
            'exclude_patterns': [
                patterns['thiol_on_aromatic'],
            ],
            'prediction': 1
        },
        {
            'number': 8,
            'description': 'Modifiers with Multiple Hydroxyl Groups on Short Aliphatic Chains Yield High',
            'patterns': [
                patterns['carboxylic_acid'],
            ],
            'count_patterns': [
                (patterns['multiple_hydroxyl_groups'], 2)  # At least 2 hydroxyl groups
            ],
            'prediction': 1
        },
        {
            'number': 9,
            'description': 'Modifiers with Ketone Groups Adjacent to Carboxylic Acid Yield Low',
            'patterns': [
                patterns['ketone_adjacent_to_carboxylic_acid'],
            ],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers with Perfluoroalkyl Chains Yield Low',
            'patterns': [
                patterns['perfluoroalkyl_chain'],
            ],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Modifiers with Bulky or Sterically Hindered Groups Near Coordination Sites Yield Low',
            'patterns': [
                patterns['carboxylic_acid'],
                patterns['bulky_groups'],
            ],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'Modifiers with Conjugated Systems and Electron-Rich Functional Groups Yield High',
            'patterns': [
                patterns['conjugated_system_with_electron_rich_groups'],
                patterns['carboxylic_acid'],
            ],
            'prediction': 1
        },
        {
            'number': 13,
            'description': 'Modifiers with Aldehyde Groups on Aromatic Rings Yield Low',
            'patterns': [
                patterns['aldehyde_group_on_aromatic'],
            ],
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'Modifiers with Nitro Groups on Aromatic Rings Yield High',
            'patterns': [
                patterns['nitro_group_on_aromatic'],
            ],
            'prediction': 1
        },
        {
            'number': 15,
            'description': 'Modifiers with Polycyclic Aromatic Systems Containing Oxygen or Nitrogen Atoms Yield High',
            'patterns': [
                patterns['polycyclic_aromatic_with_heteroatoms'],
                patterns['carboxylic_acid'],
            ],
            'prediction': 1
        },
    ]
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for pat in rule['exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for pat in rule.get('patterns', []):
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                # Check count patterns if any
                if 'count_patterns' in rule:
                    for pat, count_threshold in rule['count_patterns']:
                        matches = mol.GetSubstructMatches(pat)
                        if len(matches) < count_threshold:
                            match = False
                            break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f"Rule {rule['number']}" for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

---

1. **Alpha-Amino Dicarboxylic Acids Yield High**

   - **Description**: Modifiers that are **alpha-amino acids** with **two carboxylic acid groups** (dicarboxylic acids) result in **high yield**. The presence of both the amino group and two carboxylate groups enhances **metal coordination** with the catalyst.

   - **Examples**:
     - **(2S)-2-aminobutanedioic acid** (Aspartic acid) – High yield
     - **(2S)-2-aminopentanedioic acid** (Glutamic acid) – High yield

   - **Counter-Example**:
     - **(2S)-2-amino-3-phenylpropanoic acid** (Phenylalanine) – Low yield (monocarboxylic acid and bulky aromatic side chain)

---

2. **Aliphatic Carboxylic Acids Without Additional Polar Functional Groups Yield High**

   - **Description**: Modifiers that are **straight-chain aliphatic carboxylic acids** with **no additional polar functional groups** (e.g., hydroxyl, amino) result in **high yield**. The absence of polar groups minimizes **undesired interactions** and steric hindrance, promoting better **catalyst interaction**.

   - **Example**:
     - **Octanoic acid** – High yield

   - **Counter-Examples**:
     - **7-hydroxyheptanoic acid** – Low yield (presence of hydroxyl group)
     - **7-aminoheptanoic acid** – Low yield (presence of amino group)
     - **8-aminooctanoic acid** – Low yield

---

3. **Modifiers with Flexible Aliphatic Chains Connecting Functional Groups Yield High**

   - **Description**: Modifiers featuring **functional groups** (e.g., aromatic rings, heterocycles) connected to the **carboxylic acid** via **flexible aliphatic chains** (typically 3 or more carbons) result in **high yield**. The flexibility allows for better **conformational adjustment** and effective **metal coordination**.

   - **Examples**:
     - **5-(4-hydroxyphenyl)pentanoic acid** – High yield
     - **4-pyridin-4-ylbutanoic acid** – High yield

   - **Counter-Example**:
     - **3-(4-hydroxyphenyl)propanoic acid** – Low yield (shorter linker reduces flexibility)
     - **4-pyridin-4-ylbenzoic acid** – Low yield (rigid connection without flexible linker)

---

4. **Modifiers with Multiple Hydroxyl Groups on Short Aliphatic Chains Yield High**

   - **Description**: Modifiers that are **short-chain aliphatic carboxylic acids** with **multiple hydroxyl groups (-OH)** provide additional **coordination sites**, enhancing interaction with the metal center and resulting in **high yield**.

   - **Examples**:
     - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (Gluconic acid) – High yield
     - **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid** – High yield

   - **Counter-Example**:
     - **7-hydroxyheptanoic acid** – Low yield (only one hydroxyl group)

---

5. **Heteroaromatic Carboxylic Acids Containing Nitrogen Yield High**

   - **Description**: Modifiers that are **heteroaromatic carboxylic acids** with **nitrogen atoms** in the ring tend to yield **high**. Nitrogen atoms enhance **metal coordination** through lone pair electrons.

   - **Examples**:
     - **Pyridine-3-carboxylic acid** (Nicotinic acid) – High yield
     - **1H-pyrazole-4-carboxylic acid** – High yield
     - **2-oxo-1H-pyridine-4-carboxylic acid** – High yield

   - **Counter-Example**:
     - **4-pyridin-4-ylbenzoic acid** – Low yield (rigid structure may hinder coordination)

---

6. **Modifiers with Polyether Chains Yield Low**

   - **Description**: Modifiers containing **polyether chains** (multiple ether linkages, e.g., **-O-(CH₂CH₂O)_n-**) yield **low** due to increased **flexibility** and **hydrophilicity**, which can disrupt the reaction environment and hinder **effective metal coordination**.

   - **Examples**:
     - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid** – Low yield
     - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid** – Low yield

---

7. **Aromatic Carboxylic Acids with Strong Electron-Withdrawing Groups Yield High**

   - **Description**: Modifiers that are **aromatic carboxylic acids** with strong **electron-withdrawing groups** (e.g., **nitro (-NO₂)**, **bromomethyl (-CH₂Br)**) attached directly to the ring result in **high yield**. These groups increase the **electrophilicity** of the aromatic ring, enhancing **metal coordination**.

   - **Examples**:
     - **4-nitrobenzoic acid** – High yield
     - **4-(bromomethyl)benzoic acid** – High yield

   - **Counter-Example**:
     - **4-methylbenzoic acid** – Low yield (methyl is electron-donating)
     - **4-formylbenzoic acid** – Low yield (aldehyde may interfere with coordination)

---

8. **Modifiers with Bulky or Rigid Structures Near Coordination Sites Yield Low**

   - **Description**: Modifiers featuring **bulky substituents** or **rigid structures** near potential **coordination sites** hinder interaction with the metal center due to **steric hindrance**, leading to **low yield**.

   - **Examples**:
     - **(2S)-2-amino-3-phenylpropanoic acid** (Phenylalanine) – Low yield
     - **4-pyridin-4-ylbenzoic acid** – Low yield

---

9. **Modifiers with Aldehyde Groups on Aromatic Rings Yield Low**

   - **Description**: Modifiers with **aldehyde groups (-CHO)** attached to **aromatic rings** result in **low yield** due to decreased **electron density** and potential for **side reactions**, which reduce the effectiveness of **metal coordination**.

   - **Examples**:
     - **4-formylbenzoic acid** – Low yield
     - **5-formyl-2-hydroxybenzoic acid** – Low yield

---

10. **Modifiers with Perfluoroalkyl Chains Yield Low**

    - **Description**: Modifiers containing **perfluoroalkyl chains** (fully fluorinated alkyl chains) exhibit strong **electron-withdrawing effects** and extreme **hydrophobicity**, leading to poor **metal coordination** and resulting in **low yield**.

    - **Example**:
      - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid** – Low yield

---

11. **Modifiers with Polar Groups on Aliphatic Chains Yield Low**

    - **Description**: Modifiers that are **aliphatic carboxylic acids** with additional **polar functional groups** (e.g., **amino**, **hydroxyl**) on the chain yield **low**. These polar groups can interfere with the **hydrophobic environment** and disrupt **metal coordination**.

    - **Examples**:
      - **7-aminoheptanoic acid** – Low yield
      - **7-hydroxyheptanoic acid** – Low yield
      - **8-aminooctanoic acid** – Low yield

---

12. **Modifiers with Polycyclic Aromatic Systems Containing Heteroatoms Yield High**

    - **Description**: Modifiers containing **polycyclic aromatic systems** with **heteroatoms** (e.g., **nitrogen**, **oxygen**) provide multiple **coordination sites** and enhanced **electron delocalization**, leading to **high yield**.

    - **Examples**:
      - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (Tryptophan) – High yield
      - **1,3-dioxo-2-benzofuran-5-carboxylic acid** – High yield

---

13. **Modifiers with Single Hydroxyl Groups on Aromatic Rings Yield Low**

    - **Description**: Modifiers that are **aromatic carboxylic acids** with a **single hydroxyl group (-OH)** attached directly to the ring yield **low**. The lone hydroxyl may not provide sufficient **coordination ability** and can engage in **intramolecular hydrogen bonding**, reducing **metal interaction**.

    - **Examples**:
      - **4-hydroxybenzoic acid** – Low yield
      - **3-(4-hydroxyphenyl)propanoic acid** – Low yield

---

14. **Modifiers with Multiple Methoxy Groups on Aromatic Rings Yield High**

    - **Description**: Modifiers featuring **aromatic rings** with **multiple methoxy groups (-OCH₃)** enhance **electron density** and offer potential **coordination sites**, resulting in **high yield**.

    - **Example**:
      - **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid** – High yield

---

15. **Modifiers with Carbonyl Groups Between Functional Groups Yield Variable Yields**

    - **Description**: Modifiers with **carbonyl groups (-C=O)** between functional groups can have variable effects on yield. While **ketones adjacent to carboxylic acids** often yield **low** due to reduced **electron density** for coordination, the presence of additional **electron-donating groups** can mitigate this effect.

    - **Example of Low Yield**:
      - **4-oxoheptanedioic acid** – Low yield

    - **Example of High Yield**:
      - **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid** – High yield (methoxy groups enhance electron density)

---

**End of Rules**

---

These rules have been formulated by analyzing the provided dataset and considering the underlying **physical-chemical properties** influencing the reaction yield. The rules prioritize broader coverage of the dataset and combine multiple **sub-structural features** to clearly predict **high** or **low** yield outcomes for modifiers fitting their descriptions.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,1,-1,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,-1,0,0
0,0,0,0,1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,-1,0,0
0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,1,0,0,-1
0,0,0,0,1,0,0,-1,0,0
0,0,0,0,1,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,-1,0
0,0,0,0,0,0,0,-1,-1,0
0,0,0,0,0,0,1,-1,0,0
0,0,0,0,1,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,1,0,0,-1
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6571428571428571; Test Accuracy: 1.0
    Train Support: 0.07857142857142857; Test Support: 0.0
    Train Confidence: 0.8333333333333334; Test Confidence: 0.5
    Train Lift: 1.6775599128540306; Test Lift: NONE
    Train Leverage: 0.027959183673469386; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define general SMARTS patterns
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    amino_group_primary = '[NX3;H2]'  # Primary amine
    amino_group_secondary = '[NX3;H1][#6]'
    hydroxyl_group = '[OX2H]'
    aromatic_ring = 'a'
    ether_linkage = '[#6][OX2][#6]'
    thiol_group = '[SX2H]'
    nitro_group = '[NX3](=O)[O-]'
    halogens = '[F,Cl,Br,I]'
    perfluoroalkyl = '[CX4]([F,Cl,Br,I])([F,Cl,Br,I])[F,Cl,Br,I]'
    aldehyde_group = '[CX3H1](=O)'
    methoxy_group = '[OX2][CH3]'
    ketone_group = '[#6][CX3](=O)[#6]'
    aromatic_hydroxyl = '[c][OX2H]'
    methoxy_on_aromatic = '[c][OX2][CH3]'
    amide_adjacent_aromatic = '[c][CX3](=O)[NX3;H0,H1,H2]'
    polyether_chain = '[#6][OX2][#6][OX2][#6]'
    perfluoroalkyl_chain = '[CX4]([F,Cl,Br,I])([F,Cl,Br,I])[F,Cl,Br,I]'
    
    # Initialize rules list
    rules = []

    # Rule 1: Alpha-Amino Dicarboxylic Acids Yield High
    rule1 = {
        'number': 1,
        'description': 'Alpha-Amino Dicarboxylic Acids Yield High',
        'patterns': [
            [ '[NX3;H2][CH1][CX4][CX3](=O)[OX2H1]' ],  # Alpha amino acid group
            [ carboxylic_acid ]  # Additional carboxylic acid group
        ],
        'count_threshold': { carboxylic_acid: 2 },  # At least 2 carboxylic acid groups
        'prediction': 1
    }
    rules.append(rule1)

    # Rule 2: Aliphatic Carboxylic Acids Without Additional Polar Functional Groups Yield High
    rule2 = {
        'number': 2,
        'description': 'Aliphatic Carboxylic Acids Without Additional Polar Functional Groups Yield High',
        'patterns': [
            [ carboxylic_acid ],  # Contains carboxylic acid
        ],
        'exclude_patterns': [
            [ amino_group_primary, amino_group_secondary, hydroxyl_group, thiol_group, ether_linkage, halogens, aromatic_ring ]  # Exclude polar groups and aromatic rings
        ],
        'prediction': 1
    }
    rules.append(rule2)

    # Rule 3: Modifiers with Flexible Aliphatic Chains Connecting Functional Groups Yield High
    rule3 = {
        'number': 3,
        'description': 'Modifiers with Flexible Aliphatic Chains Connecting Functional Groups Yield High',
        'patterns': [
            [ carboxylic_acid ],  # Contains carboxylic acid
            [ '[CX4][CX4][CX4][CX4][a]' ]  # Flexible aliphatic chain (4 or more carbons) connected to aromatic ring or heterocycle
        ],
        'prediction': 1
    }
    rules.append(rule3)

    # Rule 4: Modifiers with Multiple Hydroxyl Groups on Short Aliphatic Chains Yield High
    rule4 = {
        'number': 4,
        'description': 'Modifiers with Multiple Hydroxyl Groups on Short Aliphatic Chains Yield High',
        'patterns': [
            [ carboxylic_acid ],  # Contains carboxylic acid
            [ hydroxyl_group ]  # Hydroxyl group
        ],
        'count_threshold': { hydroxyl_group: 2 },  # At least 2 hydroxyl groups
        'prediction': 1
    }
    rules.append(rule4)

    # Rule 5: Heteroaromatic Carboxylic Acids Containing Nitrogen Yield High
    rule5 = {
        'number': 5,
        'description': 'Heteroaromatic Carboxylic Acids Containing Nitrogen Yield High',
        'patterns': [
            [ carboxylic_acid ],  # Contains carboxylic acid
            [ 'n' ]  # Contains nitrogen in aromatic ring
        ],
        'prediction': 1
    }
    rules.append(rule5)

    # Rule 6: Modifiers with Polyether Chains Yield Low
    rule6 = {
        'number': 6,
        'description': 'Modifiers with Polyether Chains Yield Low',
        'patterns': [
            [ polyether_chain ],  # Polyether chain pattern
        ],
        'prediction': -1
    }
    rules.append(rule6)

    # Rule 7: Aromatic Carboxylic Acids with Strong Electron-Withdrawing Groups Yield High
    rule7 = {
        'number': 7,
        'description': 'Aromatic Carboxylic Acids with Strong Electron-Withdrawing Groups Yield High',
        'patterns': [
            [ carboxylic_acid ],  # Contains carboxylic acid
            [ nitro_group, halogens ]  # Electron-withdrawing groups on aromatic ring
        ],
        'prediction': 1
    }
    rules.append(rule7)

    # Rule 8: Modifiers with Bulky or Rigid Structures Near Coordination Sites Yield Low
    rule8 = {
        'number': 8,
        'description': 'Modifiers with Bulky or Rigid Structures Near Coordination Sites Yield Low',
        'patterns': [
            [ carboxylic_acid ],  # Contains carboxylic acid
            [ '[#6](c1ccccc1)' ]  # Bulky aromatic substituent adjacent to functional group
        ],
        'prediction': -1
    }
    rules.append(rule8)

    # Rule 9: Modifiers with Aldehyde Groups on Aromatic Rings Yield Low
    rule9 = {
        'number': 9,
        'description': 'Modifiers with Aldehyde Groups on Aromatic Rings Yield Low',
        'patterns': [
            [ aldehyde_group ],  # Aldehyde group
            [ 'c' ]  # Aromatic ring
        ],
        'prediction': -1
    }
    rules.append(rule9)

    # Rule 10: Modifiers with Perfluoroalkyl Chains Yield Low
    rule10 = {
        'number': 10,
        'description': 'Modifiers with Perfluoroalkyl Chains Yield Low',
        'patterns': [
            [ perfluoroalkyl_chain ],  # Perfluoroalkyl chain
        ],
        'prediction': -1
    }
    rules.append(rule10)

    # Additional rules (11 to 15) can be defined similarly...

    # Compile SMARTS patterns for each rule
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(p) for p in group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for group in rule['exclude_patterns']:
                compiled_group = [Chem.MolFromSmarts(p) for p in group]
                compiled_excludes.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_excludes

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        matches = mol.GetSubstructMatches(pat)
                        if matches:
                            # If a count threshold is specified for this pattern
                            if 'count_threshold' in rule and pat.GetSmarts() in rule['count_threshold']:
                                threshold = rule['count_threshold'][pat.GetSmarts()]
                                if len(matches) >= threshold:
                                    group_match = True
                                    break
                            else:
                                group_match = True
                                break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

---

**Rule 1: Amino Dicarboxylic Acids Yield High**

- **Description**: Modifiers that are **α-amino acids** with **two carboxylic acid groups** (dicarboxylic acids) result in **high yield**. The combination of an amino group and two carboxylate groups enhances **metal coordination** with the catalyst.

- **Examples**:
  - **(2S)-2-aminobutanedioic acid** (Aspartic acid) – **High yield**
  - **(2S)-2-aminopentanedioic acid** (Glutamic acid) – **High yield**

- **Counter-Example**:
  - **(2S)-2-amino-3-phenylpropanoic acid** (Phenylalanine) – **Low yield** (monocarboxylic acid with a bulky aromatic side chain)

---

**Rule 2: Straight-Chain Aliphatic Carboxylic Acids Without Additional Functional Groups Yield High**

- **Description**: Modifiers that are **straight-chain aliphatic carboxylic acids** with **no additional polar functional groups** (e.g., hydroxyl, amino) result in **high yield**. The absence of extra polar groups minimizes undesired interactions, promoting better **catalyst interaction**.

- **Example**:
  - **Octanoic acid** – **High yield**

- **Counter-Examples**:
  - **7-hydroxyheptanoic acid** – **Low yield** (presence of a hydroxyl group)
  - **8-aminooctanoic acid** – **Low yield** (presence of an amino group)

---

**Rule 3: Aromatic Carboxylic Acids with Electron-Withdrawing Para Substituents Yield High**

- **Description**: Modifiers that are **aromatic carboxylic acids** with strong **electron-withdrawing groups** in the **para position** (e.g., nitro **–NO₂**, bromomethyl **–CH₂Br**, amino **–NH₂**) result in **high yield**. These groups increase the **electrophilicity** of the ring, enhancing **metal coordination**.

- **Examples**:
  - **4-nitrobenzoic acid** – **High yield**
  - **4-(bromomethyl)benzoic acid** – **High yield**
  - **4-aminobenzoic acid** – **High yield**

- **Counter-Examples**:
  - **4-methylbenzoic acid** – **Low yield** (methyl is electron-donating)
  - **4-formylbenzoic acid** – **Low yield** (aldehyde can interfere with coordination)

---

**Rule 4: Modifiers with Aldehyde Groups Yield Low**

- **Description**: Modifiers containing **aldehyde groups (–CHO)** on aromatic rings result in **low yield**. Aldehydes can engage in **side reactions** and may disrupt **metal coordination**.

- **Examples**:
  - **4-formylbenzoic acid** – **Low yield**
  - **5-formyl-2-hydroxybenzoic acid** – **Low yield**

---

**Rule 5: Modifiers with Nitrogen-Containing Heterocycles Yield High**

- **Description**: Modifiers that are **heteroaromatic carboxylic acids** with **nitrogen atoms** in the ring tend to yield **high**. Nitrogen atoms provide lone pairs that enhance **metal coordination**.

- **Examples**:
  - **Pyridine-3-carboxylic acid** (Nicotinic acid) – **High yield**
  - **1H-pyrazole-4-carboxylic acid** – **High yield**
  - **2-oxo-1H-pyridine-4-carboxylic acid** – **High yield**

- **Counter-Example**:
  - **4-pyridin-4-ylbenzoic acid** – **Low yield** (possible steric hindrance due to rigid structure)

---

**Rule 6: Modifiers with Bulky Aromatic Side Chains Yield Low**

- **Description**: Modifiers featuring **bulky aromatic side chains** near potential **coordination sites** hinder interaction with the metal center due to **steric hindrance**, leading to **low yield**.

- **Example**:
  - **(2S)-2-amino-3-phenylpropanoic acid** (Phenylalanine) – **Low yield**

- **Counter-Example**:
  - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (Tryptophan) – **High yield** (indole ring's nitrogen aids coordination)

---

**Rule 7: Linear Aliphatic Carboxylic Acids with Multiple Hydroxyl Groups Yield High**

- **Description**: Modifiers that are **straight-chain aliphatic carboxylic acids** with **multiple hydroxyl groups (–OH)** provide additional **coordination sites**, resulting in **high yield**.

- **Example**:
  - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (Gluconic acid) – **High yield**

- **Counter-Example**:
  - **7-hydroxyheptanoic acid** – **Low yield** (only one hydroxyl group)

---

**Rule 8: Modifiers with Polyether Chains Yield Low**

- **Description**: Modifiers containing **polyether chains** (multiple ether linkages, e.g., **–O–(CH₂CH₂O)_n–**) yield **low** due to increased **flexibility** and **hydrophilicity**, which can disrupt the reaction environment and hinder **effective metal coordination**.

- **Example**:
  - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid** – **Low yield**

---

**Rule 9: Modifiers with Perfluoroalkyl Chains Yield Low**

- **Description**: Modifiers containing **perfluoroalkyl chains** (fully fluorinated alkyl chains) exhibit strong **electron-withdrawing effects** and extreme **hydrophobicity**, leading to poor **metal coordination** and resulting in **low yield**.

- **Example**:
  - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid** – **Low yield**

---

**Rule 10: Modifiers with Sulfhydryl Groups on Aliphatic Chains Yield High**

- **Description**: Modifiers with **sulfhydryl groups (–SH)** attached to **aliphatic chains** provide strong **coordination sites** with metal centers, resulting in **high yield**.

- **Example**:
  - **3-sulfanylpropanoic acid** – **High yield**

- **Counter-Example**:
  - **4-sulfanylbenzoic acid** – **Low yield** (–SH attached to aromatic ring may engage in unwanted interactions)

---

**Rule 11: Modifiers with Flexible Aliphatic Linkers to Aromatic Rings Yield High**

- **Description**: Modifiers featuring **aromatic rings** connected to the **carboxylic acid** via **flexible aliphatic chains** (four or more carbons) allow for better **conformational adjustment** and effective **metal coordination**, resulting in **high yield**.

- **Examples**:
  - **5-(4-hydroxyphenyl)pentanoic acid** – **High yield**
  - **4-pyridin-4-ylbutanoic acid** – **High yield**

- **Counter-Example**:
  - **3-(4-hydroxyphenyl)propanoic acid** – **Low yield** (shorter linker reduces flexibility)

---

**Rule 12: Modifiers with Short Aliphatic Chains to Aromatic Rings Yield Low**

- **Description**: Modifiers with **aromatic rings** connected to the **carboxylic acid** via **short aliphatic chains** (three carbons or fewer) result in **low yield**, possibly due to **limited flexibility** affecting **metal coordination**.

- **Example**:
  - **3-(4-hydroxyphenyl)propanoic acid** – **Low yield**

---

**Rule 13: Modifiers with Carbonyl Groups Adjacent to Coordination Sites Yield Low**

- **Description**: Modifiers containing **carbonyl groups (–C=O)** adjacent to potential coordination sites may interfere with **metal binding** or participate in **side reactions**, leading to **low yield**.

- **Examples**:
  - **4-oxoheptanedioic acid** – **Low yield**
  - **4-formylbenzoic acid** – **Low yield**

---

**Rule 14: Modifiers with Polar Functional Groups on Long Aliphatic Chains Yield Low**

- **Description**: Modifiers that are **long-chain aliphatic carboxylic acids** with additional **polar functional groups** (e.g., hydroxyl, amino) on the chain yield **low**. These polar groups can disrupt the **hydrophobic environment** and hinder **metal coordination**.

- **Examples**:
  - **7-hydroxyheptanoic acid** – **Low yield**
  - **7-aminoheptanoic acid** – **Low yield**
  - **8-aminooctanoic acid** – **Low yield**

---

**Rule 15: Modifiers with Methoxy Groups on Aromatic Rings Yield High**

- **Description**: Modifiers featuring **aromatic rings** with **methoxy groups (–OCH₃)** enhance **electron density** and offer potential **coordination sites**, resulting in **high yield**.

- **Example**:
  - **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid** – **High yield**

- **Counter-Example**:
  - **4-methylbenzoic acid** – **Low yield** (methyl group is less impactful on electron density)

---

**End of Rules**

---

These rules have been developed by carefully analyzing the dataset and considering the underlying **physical and chemical properties** that influence the reaction yield. Each rule combines multiple **sub-structural features** to predict whether a modifier will result in a **high** or **low** yield in the reaction. The rules aim to cover a broad range of the dataset while maintaining a balance between simplicity and complexity, ensuring they are both comprehensive and practical for predicting outcomes.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0
1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0
0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,1,0,0,0,0,0,-1,0,0
0,0,0,0,0,-1,0,0,0,0,1,-1,-1,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,1,0,0,0,0,0,-1,-1,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0
0,0,0,0,1,-1,0,0,0,0,0,0,-1,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,1,0,0,-1,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,1,-1,0,0,0,0,0,-1,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0
0,1,0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0
0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0

---------------------------------------------------------------


    Train Accuracy: 0.8285714285714286; Test Accuracy: 1.0
    Train Support: 0.05714285714285714; Test Support: 0.0
    Train Confidence: 0.8055555555555557; Test Confidence: 0.5
    Train Lift: 1.5663580246913582; Test Lift: NONE
    Train Leverage: 0.02068027210884354; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and substructures with corrections from suggestions
    
    # Carboxylic acid group (-COOH), both protonated and deprotonated forms
    carboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1]'
    
    # Alpha-amino acid pattern (Suggestion 6)
    alpha_amino_acid = '[NX3;H2][CX4H]([#6])[CX3](=O)[OX1H0-,OX2H1]'
    
    # Hydroxyl group (-OH), excluding those in carboxylic acids (Suggestion 1)
    hydroxyl_group = '[OX2H][#6;!$(C=O)]'
    
    # Amino group (-NH2 or -NH-), excluding amide nitrogens (Suggestion 4)
    amino_group = '[NX3;H2,H1;!$(NC=O)]'
    
    # Sulfhydryl group (-SH)
    sulfhydryl_group = '[SX2H]'
    
    # Ether linkage (-O-)
    ether_linkage = '[#6][OX2][#6]'
    
    # Aromatic ring
    aromatic_ring = '[a]'
    
    # Aromatic carboxylic acid
    aromatic_carboxylic_acid = '[c][CX3](=O)[OX1H0-,OX2H1]'
    
    # Nitro group (-NO2)
    nitro_group = '[NX3+](=O)[O-]'
    
    # Halogens
    halogen = '[F,Cl,Br,I]'
    
    # Electron-withdrawing groups (EWGs) for Rule 3
    ewg_patterns = [nitro_group, '[CH2Br]', amino_group]
    
    # Aldehyde group (-CHO)
    aldehyde_group = '[CX3H1](=O)[#6]'
    
    # Nitrogen atom in ring (Suggestion 5)
    nitrogen_in_ring = '[n]'
    
    # Carbonyl group adjacent to coordination site (Suggestion 2)
    carbonyl_adjacent = '[CX3](=O)[#6;!$(C(=O)[O,N])]-[C,N,O,S]'
    
    # Polyether chain pattern (for Rule 8)
    polyether_chain = '[#6][OX2][#6][OX2][#6][OX2][#6]'
    
    # Perfluoroalkyl chain (for Rule 9)
    perfluoroalkyl_chain = '[CX4;H0](F)(F)(F)'
    
    # Aliphatic chain with sulfhydryl group (for Rule 10)
    aliphatic_sulfhydryl = '[#6][#6][SX2H]'
    
    # Flexible aliphatic linker to aromatic ring (four or more carbons, for Rule 11)
    flexible_aliphatic_linker = '[CX4H2][CX4H2][CX4H2][CX4H2][c]'
    
    # Short aliphatic chain to aromatic ring (three or fewer carbons, for Rule 12)
    short_aliphatic_linker = '[CX4H2][CX4H2][CX4H2][c]'
    
    # Polar functional group on long aliphatic chain (for Rule 14)
    polar_on_long_chain = '[CX4][CX4][CX4][CX4][OX2H,NX3;H2,H1;!$(NC=O)]'
    
    # Methoxy group on aromatic ring (for Rule 15)
    methoxy_on_aromatic = '[c][OX2][CH3]'
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Rule 1: Amino Dicarboxylic Acids Yield High',
            'required': [
                alpha_amino_acid
            ],
            'required_counts': {
                carboxylic_acid: 2
            },
            'forbidden': [
                aromatic_ring
            ],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Rule 2: Straight-Chain Aliphatic Carboxylic Acids Without Additional Functional Groups Yield High',
            'required': [
                carboxylic_acid
            ],
            'forbidden': [
                aromatic_ring,
                hydroxyl_group,
                amino_group,
                sulfhydryl_group,
                halogen,
                ether_linkage
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Rule 3: Aromatic Carboxylic Acids with Electron-Withdrawing Para Substituents Yield High',
            'required': [
                aromatic_carboxylic_acid
            ],
            'substituents': ewg_patterns,
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Rule 4: Modifiers with Aldehyde Groups Yield Low',
            'required': [
                aldehyde_group
            ],
            'prediction': -1
        },
        {
            'number': 5,
            'description': 'Rule 5: Modifiers with Nitrogen-Containing Heterocycles Yield High',
            'required': [
                nitrogen_in_ring,
                carboxylic_acid
            ],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Rule 6: Modifiers with Bulky Aromatic Side Chains Yield Low',
            'required': [
                aromatic_ring,
                '[CX4][c]',  # Aliphatic carbon attached to aromatic ring
                carboxylic_acid
            ],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Rule 7: Linear Aliphatic Carboxylic Acids with Multiple Hydroxyl Groups Yield High',
            'required': [
                carboxylic_acid,
                hydroxyl_group
            ],
            'required_counts': {
                hydroxyl_group: 2
            },
            'forbidden': [
                aromatic_ring
            ],
            'prediction': 1
        },
        {
            'number': 8,
            'description': 'Rule 8: Modifiers with Polyether Chains Yield Low',
            'required': [
                carboxylic_acid,
                polyether_chain
            ],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Rule 9: Modifiers with Perfluoroalkyl Chains Yield Low',
            'required': [
                carboxylic_acid,
                perfluoroalkyl_chain
            ],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Rule 10: Modifiers with Sulfhydryl Groups on Aliphatic Chains Yield High',
            'required': [
                carboxylic_acid,
                aliphatic_sulfhydryl
            ],
            'forbidden': [
                aromatic_ring
            ],
            'prediction': 1
        },
        {
            'number': 11,
            'description': 'Rule 11: Modifiers with Flexible Aliphatic Linkers to Aromatic Rings Yield High',
            'required': [
                carboxylic_acid,
                flexible_aliphatic_linker
            ],
            'prediction': 1
        },
        {
            'number': 12,
            'description': 'Rule 12: Modifiers with Short Aliphatic Chains to Aromatic Rings Yield Low',
            'required': [
                carboxylic_acid,
                short_aliphatic_linker
            ],
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Rule 13: Modifiers with Carbonyl Groups Adjacent to Coordination Sites Yield Low',
            'required': [
                carboxylic_acid,
                carbonyl_adjacent
            ],
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'Rule 14: Modifiers with Polar Functional Groups on Long Aliphatic Chains Yield Low',
            'required': [
                carboxylic_acid,
                polar_on_long_chain
            ],
            'prediction': -1
        },
        {
            'number': 15,
            'description': 'Rule 15: Modifiers with Methoxy Groups on Aromatic Rings Yield High',
            'required': [
                aromatic_carboxylic_acid,
                methoxy_on_aromatic
            ],
            'prediction': 1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        rule['compiled_required'] = [Chem.MolFromSmarts(pat) for pat in rule.get('required', [])]
        rule['compiled_forbidden'] = [Chem.MolFromSmarts(pat) for pat in rule.get('forbidden', [])]
        if 'substituents' in rule:
            rule['compiled_substituents'] = [Chem.MolFromSmarts(pat) for pat in rule.get('substituents', [])]
        # Compile required counts patterns
        counts = rule.get('required_counts', {})
        rule['compiled_counts'] = {Chem.MolFromSmarts(pat): count for pat, count in counts.items()}
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check forbidden patterns
                for pat in rule.get('compiled_forbidden', []):
                    if mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Check required patterns
                for pat in rule.get('compiled_required', []):
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Check required counts
                counts = rule.get('compiled_counts', {})
                for pat, count in counts.items():
                    matches = mol.GetSubstructMatches(pat)
                    if len(matches) < count:
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Check substituents for Rule 3
                if 'compiled_substituents' in rule:
                    substituent_match = False
                    for sub_pat in rule['compiled_substituents']:
                        if mol.HasSubstructMatch(sub_pat):
                            substituent_match = True
                            break
                    if not substituent_match:
                        match = False
                if not match:
                    row.append(0)
                    continue
                # All conditions met
                row.append(rule['prediction'])
            except Exception:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f"Rule {rule['number']}" for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

---

**Rule 1: Aliphatic Carboxylic Acids Without Additional Polar Functional Groups Yield High**

- **Description**: Modifiers that are **straight-chain aliphatic carboxylic acids** without additional **polar functional groups** (such as hydroxyl or amino groups) result in **high yield**. The simplicity of the structure allows for effective **metal coordination** without interference from polar side chains.

- **Example**:
  - **Octanoic acid** – **High yield**

- **Counter-Examples**:
  - **7-hydroxyheptanoic acid** – **Low yield** (contains a hydroxyl group)
  - **7-aminoheptanoic acid** – **Low yield** (contains an amino group)
  - **8-aminooctanoic acid** – **Low yield** (contains an amino group)

---

**Rule 2: Amino Acids with Side Chains Containing Polar or Metal-Coordinating Functional Groups Yield High**

- **Description**: Modifiers that are **amino acids** with side chains containing **polar** or **metal-coordinating functional groups** (such as carboxylate, hydroxyl, amino, or sulfur-containing groups) result in **high yield**. These groups enhance **interaction** with the metal center of the catalyst through **coordination bonds**.

- **Examples**:
  - **(2S)-2-aminobutanedioic acid** (Aspartic acid) – **High yield**
  - **(2S)-2-aminopentanedioic acid** (Glutamic acid) – **High yield**
  - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (Tryptophan) – **High yield**
  - **5-aminopentanoic acid** – **High yield**

- **Counter-Example**:
  - **(2S)-2-amino-3-phenylpropanoic acid** (Phenylalanine) – **Low yield** (side chain lacks polar or coordinating groups)

---

**Rule 3: Aromatic Carboxylic Acids with Strong Electron-Withdrawing Groups Yield High**

- **Description**: Modifiers that are **aromatic carboxylic acids** with strong **electron-withdrawing groups** (e.g., nitro, amino) at the **para position** relative to the carboxyl group result in **high yield**. These groups increase the **acidity** of the carboxylic acid and enhance **metal coordination**.

- **Examples**:
  - **4-nitrobenzoic acid** – **High yield**
  - **4-aminobenzoic acid** – **High yield**

- **Counter-Example**:
  - **4-methylbenzoic acid** – **Low yield** (methyl group is electron-donating)

---

**Rule 4: Heteroaromatic Carboxylic Acids Containing Nitrogen Atoms Yield High**

- **Description**: Modifiers that are **heteroaromatic carboxylic acids** with **nitrogen atoms** in the ring result in **high yield**. Nitrogen atoms provide **lone pairs** that facilitate strong **metal coordination** with the catalyst.

- **Examples**:
  - **Pyridine-3-carboxylic acid** – **High yield**
  - **1H-pyrazole-4-carboxylic acid** – **High yield**
  - **2-oxo-1H-pyridine-4-carboxylic acid** – **High yield**

- **Counter-Example**:
  - **4-pyridin-4-ylbenzoic acid** – **Low yield** (steric hindrance due to additional aromatic ring)

---

**Rule 5: Modifiers with Sulfhydryl Groups on Short Aliphatic Chains Yield High**

- **Description**: Modifiers with **sulfhydryl groups (–SH)** attached to **short aliphatic chains** enhance **metal coordination** due to the strong affinity of sulfur atoms for metal centers, resulting in **high yield**.

- **Example**:
  - **3-sulfanylpropanoic acid** – **High yield**

- **Counter-Example**:
  - **4-sulfanylbenzoic acid** – **Low yield** (–SH group attached to an aromatic ring may cause steric hindrance or reduced flexibility)

---

**Rule 6: Modifiers with Aldehyde Functional Groups Yield Low**

- **Description**: Modifiers containing **aldehyde groups (–CHO)** result in **low yield**. Aldehyde groups can undergo **side reactions** or interfere with **metal coordination**, reducing the effectiveness of the catalyst.

- **Examples**:
  - **4-formylbenzoic acid** – **Low yield**
  - **5-formyl-2-hydroxybenzoic acid** – **Low yield**

---

**Rule 7: Modifiers with Polyether Chains Yield Low**

- **Description**: Modifiers containing **polyether chains** (multiple ether linkages like –O–(CH₂CH₂O)ₙ–) result in **low yield**. The increased **flexibility** and **hydrophilicity** can disrupt the reaction environment and interfere with **metal coordination**.

- **Examples**:
  - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid** – **Low yield**
  - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid** – **Low yield**

---

**Rule 8: Modifiers with Fluorinated Alkyl Chains Yield Low**

- **Description**: Modifiers containing **fluorinated alkyl chains** exhibit strong **electron-withdrawing effects** and extreme **hydrophobicity**, which can reduce **metal coordination** efficiency and result in **low yield**.

- **Examples**:
  - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid** – **Low yield**
  - **4-[(2,2,2-trifluoroacetyl)amino]butanoic acid** – **Low yield**

---

**Rule 9: Modifiers with Ketone Functionalities Near Coordination Sites Yield Low**

- **Description**: Modifiers that have additional **ketone groups** (carbonyl groups) near potential **coordination sites** may interfere with metal binding or participate in **side reactions**, leading to **low yield**.

- **Example**:
  - **4-oxoheptanedioic acid** – **Low yield**

---

**Rule 10: Modifiers with Amide Linkages Yield Low**

- **Description**: Modifiers containing **amide bonds** yield **low** because the resonance stabilization reduces the availability of lone pairs on nitrogen for **metal coordination**.

- **Examples**:
  - **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid** – **Low yield**
  - **2-[(4-hydroxybenzoyl)amino]acetic acid** – **Low yield**

---

**Rule 11: Modifiers with Aromatic Rings Connected via Flexible Aliphatic Chains Yield High**

- **Description**: Modifiers where an **aromatic ring** is connected to the **carboxylic acid** through a **flexible aliphatic linker** (four or more carbon atoms) result in **high yield**. The flexibility allows the aromatic ring to adjust and facilitate **metal coordination** without steric hindrance.

- **Examples**:
  - **5-(4-hydroxyphenyl)pentanoic acid** – **High yield**
  - **4-pyridin-4-ylbutanoic acid** – **High yield**
  - **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid** – **High yield**

- **Counter-Example**:
  - **3-(4-hydroxyphenyl)propanoic acid** – **Low yield** (shorter linker limits flexibility, increasing steric hindrance)

---

**Rule 12: Modifiers with Bulky Aromatic Side Chains Yield Low Unless They Contain Coordinating Heteroatoms**

- **Description**: Modifiers with **bulky aromatic side chains** typically result in **low yield** due to **steric hindrance**, unless the side chains contain **heteroatoms** (such as nitrogen) that can participate in **metal coordination**.

- **Examples**:
  - **(2S)-2-amino-3-phenylpropanoic acid** (Phenylalanine) – **Low yield**
  - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (Tryptophan) – **High yield** (indole nitrogen aids coordination)

---

**Rule 13: Modifiers with Long Aliphatic Chains Bearing Polar Functional Groups Yield Low**

- **Description**: Modifiers that are **long-chain aliphatic carboxylic acids** with additional **polar functional groups** (such as hydroxyl or amino groups) along the chain result in **low yield**. The polar groups can disrupt hydrophobic interactions and hinder effective **catalyst engagement**.

- **Examples**:
  - **7-hydroxyheptanoic acid** – **Low yield**
  - **7-aminoheptanoic acid** – **Low yield**
  - **8-aminooctanoic acid** – **Low yield**

---

**Rule 14: Modifiers with Methoxy Groups on Aromatic Rings Yield High**

- **Description**: Modifiers featuring **aromatic rings** with **methoxy groups (–OCH₃)** enhance **electron density** and provide potential **coordination sites**, resulting in **high yield**.

- **Example**:
  - **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid** – **High yield**

---

**Rule 15: Modifiers Containing Multiple Hydroxyl Groups Yield High**

- **Description**: Modifiers that contain **multiple hydroxyl groups** (polyhydroxy compounds) can enhance **metal coordination** through **chelation**, resulting in **high yield**.

- **Example**:
  - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (Gluconic acid) – **High yield**

---

**End of Rules**

---

These rules have been formulated by analyzing the dataset and considering the underlying **physical and chemical properties** that affect the reaction yield. Each rule combines multiple **sub-structural features**, such as functional groups and molecular frameworks, to predict whether a modifier will result in a **high** or **low** yield. The set of rules aims to cover a broad range of the dataset while maintaining a balance between **simplicity** and **complexity**, providing practical guidance for predicting outcomes in the reaction.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,1,-1,0,0,0
0,0,0,1,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,1,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,1,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,-1,0,0,-1,0,0,0
0,0,0,0,0,-1,0,0,-1,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0
0,0,0,1,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,-1,0,1,0
0,0,0,0,0,0,0,0,-1,-1,0,-1,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6857142857142857; Test Accuracy: 1.0
    Train Support: 0.05714285714285714; Test Support: 0.3333333333333333
    Train Confidence: 1.0; Test Confidence: 0.6666666666666666
    Train Lift: 2.0588235294117645; Test Lift: NONE
    Train Leverage: 0.02938775510204081; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    
    # Common patterns
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    amino_group = '[NX3;H2,H1;!$(NC=O)]'
    hydroxyl_group = '[OX2H]'  # Hydroxyl group
    sulfhydryl_group = '[SX2H]'  # Thiol group
    aliphatic_chain_5plus = '[C;H2][C;H2][C;H2][C;H2][C;H2]'
    aromatic_ring = '[a]'
    
    # Electron-withdrawing groups (EWGs)
    nitro_group = '[NX3](=O)=O'
    amino_electron_withdrawing = '[NX3;H2,H1][#6](=O)'  # Amide linkage as EWG
    halogens = '[F,Cl,Br,I]'
    
    # Electron-donating groups (EDGs)
    methoxy_group = '[OX2][CH3]'
    
    # Patterns for specific rules
    
    # Rule 1: Aliphatic Carboxylic Acids Without Additional Polar Functional Groups Yield High
    rule1_patterns = [carboxylic_acid, aliphatic_chain_5plus]
    rule1_exclude = [hydroxyl_group, amino_group, sulfhydryl_group, aromatic_ring]
    
    # Rule 2: Amino Acids with Side Chains Containing Polar or Metal-Coordinating Functional Groups Yield High
    polar_side_chains = ['[CX3](=O)[OX2H1]', hydroxyl_group, amino_group, sulfhydryl_group]
    rule2_patterns = [carboxylic_acid, amino_group] + polar_side_chains
    
    # Rule 3: Aromatic Carboxylic Acids with Strong Electron-Withdrawing Groups Yield High
    aromatic_carboxylic_acid = '[c][CX3](=O)[OX2H1]'
    ewg = [nitro_group, amino_group]
    rule3_patterns = [aromatic_carboxylic_acid] + ewg
    
    # Rule 4: Heteroaromatic Carboxylic Acids Containing Nitrogen Atoms Yield High
    heteroaromatic_nitrogen = '[n]'
    rule4_patterns = [aromatic_carboxylic_acid, heteroaromatic_nitrogen]
    
    # Rule 5: Modifiers with Sulfhydryl Groups on Short Aliphatic Chains Yield High
    short_aliphatic_chain = '[C;H2][C;H2][C;H2]'
    rule5_patterns = [carboxylic_acid, sulfhydryl_group, short_aliphatic_chain]
    
    # Rule 6: Modifiers with Aldehyde Functional Groups Yield Low
    aldehyde_group = '[CX3H1](=O)'
    rule6_patterns = [aldehyde_group]
    
    # Rule 7: Modifiers with Polyether Chains Yield Low
    polyether_chain = '[$([#6][OX2][#6][OX2][#6])]'  # At least two ether linkages
    rule7_patterns = [polyether_chain]
    
    # Rule 8: Modifiers with Fluorinated Alkyl Chains Yield Low
    fluorinated_alkyl_chain = '[CX4][F][F][F]'  # Trifluoromethyl group as example
    rule8_patterns = [fluorinated_alkyl_chain]
    
    # Rule 9: Modifiers with Ketone Functionalities Near Coordination Sites Yield Low
    ketone_group = '[CX3](=O)[#6]'
    rule9_patterns = [ketone_group, carboxylic_acid]
    
    # Rule 10: Modifiers with Amide Linkages Yield Low
    amide_group = '[CX3](=O)[NX3;H2,H1]'  # Amide linkage
    rule10_patterns = [amide_group]
    
    # Rule 11: Modifiers with Aromatic Rings Connected via Flexible Aliphatic Chains Yield High
    flexible_linker = '[C;H2][C;H2][C;H2][C;H2]'
    rule11_patterns = [aromatic_ring, flexible_linker, carboxylic_acid]
    
    # Rule 12: Modifiers with Bulky Aromatic Side Chains Yield Low Unless They Contain Coordinating Heteroatoms
    bulky_aromatic_side_chain = '[C][c]'
    rule12_patterns = [bulky_aromatic_side_chain, carboxylic_acid]
    rule12_exclude = [heteroaromatic_nitrogen]
    
    # Rule 13: Modifiers with Long Aliphatic Chains Bearing Polar Functional Groups Yield Low
    long_aliphatic_chain = '[C;H2][C;H2][C;H2][C;H2][C;H2][C;H2][C;H2]'
    polar_groups = [hydroxyl_group, amino_group]
    rule13_patterns = [long_aliphatic_chain, carboxylic_acid] + polar_groups
    
    # Rule 14: Modifiers with Methoxy Groups on Aromatic Rings Yield High
    aromatic_methoxy = '[c][OX2][CH3]'
    rule14_patterns = [aromatic_ring, methoxy_group, carboxylic_acid]
    
    # Rule 15: Modifiers Containing Multiple Hydroxyl Groups Yield High
    multiple_hydroxyls = '[OX2H][#6][OX2H]'  # At least two hydroxyl groups
    rule15_patterns = [multiple_hydroxyls, carboxylic_acid]
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Aliphatic Carboxylic Acids Without Additional Polar Functional Groups Yield High',
            'patterns': rule1_patterns,
            'exclude_patterns': rule1_exclude,
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Amino Acids with Side Chains Containing Polar or Metal-Coordinating Functional Groups Yield High',
            'patterns': rule2_patterns,
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Aromatic Carboxylic Acids with Strong Electron-Withdrawing Groups Yield High',
            'patterns': rule3_patterns,
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Heteroaromatic Carboxylic Acids Containing Nitrogen Atoms Yield High',
            'patterns': rule4_patterns,
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers with Sulfhydryl Groups on Short Aliphatic Chains Yield High',
            'patterns': rule5_patterns,
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers with Aldehyde Functional Groups Yield Low',
            'patterns': rule6_patterns,
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Modifiers with Polyether Chains Yield Low',
            'patterns': rule7_patterns,
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Modifiers with Fluorinated Alkyl Chains Yield Low',
            'patterns': rule8_patterns,
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers with Ketone Functionalities Near Coordination Sites Yield Low',
            'patterns': rule9_patterns,
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers with Amide Linkages Yield Low',
            'patterns': rule10_patterns,
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Modifiers with Aromatic Rings Connected via Flexible Aliphatic Chains Yield High',
            'patterns': rule11_patterns,
            'prediction': 1
        },
        {
            'number': 12,
            'description': 'Modifiers with Bulky Aromatic Side Chains Yield Low Unless They Contain Coordinating Heteroatoms',
            'patterns': rule12_patterns,
            'exclude_patterns': rule12_exclude,
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Modifiers with Long Aliphatic Chains Bearing Polar Functional Groups Yield Low',
            'patterns': rule13_patterns,
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'Modifiers with Methoxy Groups on Aromatic Rings Yield High',
            'patterns': rule14_patterns,
            'prediction': 1
        },
        {
            'number': 15,
            'description': 'Modifiers Containing Multiple Hydroxyl Groups Yield High',
            'patterns': rule15_patterns,
            'prediction': 1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for p in rule.get('patterns', []):
            pat = Chem.MolFromSmarts(p)
            if pat:
                compiled_patterns.append(pat)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for p in rule['exclude_patterns']:
                pat = Chem.MolFromSmarts(p)
                if pat:
                    compiled_excludes.append(pat)
            rule['compiled_exclude_patterns'] = compiled_excludes
        else:
            rule['compiled_exclude_patterns'] = []
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                for pat in rule.get('compiled_exclude_patterns', []):
                    if mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Check required patterns
                for pat in rule['compiled_patterns']:
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

---

**Rule 1: Modifiers with Carboxylic Acid and Metal-Coordinating Functional Groups Yield High**

- **Description**: Modifiers that contain a **carboxylic acid group** along with additional **metal-coordinating functional groups** (such as amino, hydroxyl, or heteroatoms like nitrogen) result in **high yield**. These coordinating groups enhance **metal binding** and stabilize the catalytic species.

- **Examples**:
  - **(2S)-2-aminopentanedioic acid** (Glutamic acid) – **High yield**
  - **(2S)-2-aminobutanedioic acid** (Aspartic acid) – **High yield**
  - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (Gluconic acid) – **High yield**
  - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (Tryptophan) – **High yield**
  - **4-aminobenzoic acid** – **High yield**
  - **5-aminopentanoic acid** – **High yield**
  - **Pyridine-3-carboxylic acid** (Nicotinic acid) – **High yield**

---

**Rule 2: Modifiers Containing Aldehyde Groups Yield Low**

- **Description**: Modifiers with **aldehyde functional groups** (–CHO) result in **low yield**. The aldehyde group may participate in unwanted side reactions or form inactive complexes with the metal catalyst, reducing its availability.

- **Examples**:
  - **4-formylbenzoic acid** – **Low yield**
  - **5-formyl-2-hydroxybenzoic acid** – **Low yield**

---

**Rule 3: Sulfhydryl Groups on Aliphatic Chains Yield High; On Aromatic Rings Yield Low**

- **Description**: Modifiers with **sulfhydryl groups (–SH)** attached to **aliphatic chains** enhance **metal coordination** and result in **high yield**. However, when the –SH group is attached directly to an **aromatic ring**, steric hindrance and reduced orbital overlap lead to **low yield**.

- **High Yield Example**:
  - **3-sulfanylpropanoic acid** – **High yield**

- **Low Yield Example**:
  - **4-sulfanylbenzoic acid** – **Low yield**

---

**Rule 4: Straight-Chain Aliphatic Carboxylic Acids Without Additional Functional Groups Yield High**

- **Description**: Modifiers that are **straight-chain aliphatic carboxylic acids** with no additional functional groups result in **high yield**. The lack of polar or bulky groups minimizes steric hindrance and allows effective **metal coordination**.

- **Example**:
  - **Octanoic acid** – **High yield**

- **Counter-Example**:
  - **7-hydroxyheptanoic acid** – **Low yield** (hydroxyl group introduces competition for metal binding)

---

**Rule 5: Bulky Substituents Near Coordination Sites Yield Low**

- **Description**: Modifiers with **bulky groups** near potential **metal coordination sites** hinder effective binding due to **steric hindrance**, resulting in **low yield**.

- **Examples**:
  - **(2S)-2-amino-3-phenylpropanoic acid** (Phenylalanine) – **Low yield**
  - **4-pyridin-4-ylbenzoic acid** – **Low yield**
  - **2-[(4-hydroxybenzoyl)amino]acetic acid** – **Low yield**

---

**Rule 6: Flexible Linkers Between Aromatic Rings and Carboxylic Acids Yield High**

- **Description**: Modifiers where an **aromatic ring** is connected to the **carboxylic acid** via a flexible **aliphatic linker** (typically four or more carbons) result in **high yield**. The flexibility allows the coordinating groups to adopt favorable conformations for **metal binding**.

- **Examples**:
  - **5-(4-hydroxyphenyl)pentanoic acid** – **High yield**
  - **4-pyridin-4-ylbutanoic acid** – **High yield**

- **Counter-Example**:
  - **3-(4-hydroxyphenyl)propanoic acid** – **Low yield** (shorter linker reduces flexibility)

---

**Rule 7: Modifiers with Polyether Chains Yield Low**

- **Description**: Modifiers containing **polyether chains** (e.g., –(OCH₂CH₂)ₙ–) result in **low yield**. These chains increase hydrophilicity and introduce conformational flexibility, which can disrupt **metal coordination**.

- **Examples**:
  - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid** – **Low yield**
  - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid** – **Low yield**

---

**Rule 8: Modifiers with Multiple Hydroxyl Groups Yield High**

- **Description**: Modifiers possessing **multiple hydroxyl groups** enhance **chelation** with metal centers, leading to **high yield** through the formation of stable complexes.

- **Example**:
  - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (Gluconic acid) – **High yield**

---

**Rule 9: Electron-Withdrawing Trifluoromethyl Ketones Yield Low**

- **Description**: Modifiers with strong **electron-withdrawing groups** like **trifluoromethyl ketones** reduce electron density on coordinating atoms, weakening **metal coordination** and resulting in **low yield**.

- **Example**:
  - **4-[(2,2,2-trifluoroacetyl)amino]butanoic acid** – **Low yield**

---

**Rule 10: Heteroaromatic Carboxylic Acids with Nitrogen in the Ring Yield High**

- **Description**: Modifiers that are **heteroaromatic carboxylic acids** containing a **nitrogen atom** in the ring enhance **metal coordination** through the lone pair on nitrogen, resulting in **high yield**.

- **Examples**:
  - **Pyridine-3-carboxylic acid** – **High yield**
  - **1H-pyrazole-4-carboxylic acid** – **High yield**
  - **2-oxo-1H-pyridine-4-carboxylic acid** – **High yield**

---

**Rule 11: Ketone Groups Adjacent to Carboxylic Acid Yield Low**

- **Description**: Modifiers with **ketone groups** near the **carboxylic acid** can interfere with **metal coordination** due to competition or steric effects, leading to **low yield**.

- **Example**:
  - **4-oxoheptanedioic acid** – **Low yield**

---

**Rule 12: Aromatic Rings Directly Attached to Carboxylic Acid without Coordinating Groups Yield Low**

- **Description**: Modifiers where the **aromatic ring** is directly attached to the **carboxylic acid** and lacks additional coordinating groups result in **low yield** due to limited **metal interaction**.

- **Examples**:
  - **4-methylbenzoic acid** – **Low yield**

---

**Rule 13: Long Aliphatic Chains with Polar Groups Yield Low**

- **Description**: Modifiers with **long aliphatic chains** (more than six carbons) containing **polar functional groups** (like hydroxyl or amino groups) may have reduced **metal coordination** efficiency due to increased chain length and flexibility, resulting in **low yield**.

- **Examples**:
  - **7-hydroxyheptanoic acid** – **Low yield**
  - **7-aminoheptanoic acid** – **Low yield**
  - **8-aminooctanoic acid** – **Low yield**

---

**Rule 14: Amino Acids with Bulky Sulfur-Containing Side Chains Yield Low**

- **Description**: **Amino acids** with bulky **sulfur-containing side chains** (e.g., methionine derivatives) exhibit **low yield** due to **steric hindrance** that impedes effective **metal coordination**.

- **Example**:
  - **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid** – **Low yield**

---

**Rule 15: Modifiers with Electron-Donating Groups on Aromatic Rings Yield Variable Results**

- **Description**: Modifiers with **electron-donating groups** (such as methoxy, methyl) on **aromatic rings** can influence yield variably. Their impact depends on the overall structure and the presence of other coordinating groups.

- **Examples**:
  - **4-methylbenzoic acid** – **Low yield** (no additional coordinating groups)
  - **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid** – **High yield** (flexible linker and potential coordination through methoxy groups)

---

**End of Rules**

---

These rules are based on an analysis of the provided dataset and consider the **physicochemical properties** influencing the reaction yield. Each rule combines multiple **substructural features** to predict whether a modifier will result in a **high** or **low** yield. The set of rules aims to cover a broad range of the dataset while balancing **simplicity** and **complexity** to provide practical guidance for predicting reaction outcomes.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 3.1,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,-1,0,0,1,0,0,0,0,0,0,0
1,0,0,0,0,-1,1,0,1,0,0,0,0,0,0,0
1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,0
1,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
1,-1,0,0,0,-1,0,0,1,0,0,0,0,0,0,0
1,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,-1,0,0,0,0,1,0,0,0,0,0
1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0
1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,-1,0,0,1,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
1,0,0,0,0,-1,0,0,1,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.7714285714285715; Test Accuracy: 1.0
    Train Support: 0.06984126984126984; Test Support: 0.0
    Train Confidence: 0.8407407407407407; Test Confidence: 0.5
    Train Lift: 1.6991648511256352; Test Lift: NONE
    Train Leverage: 0.0070748299319727875; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and substructures

    # Carboxylic acid group (-COOH) and carboxylate anion (-COO-)
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    carboxylate_anion = '[CX3](=O)[O-]'

    # Aldehyde group (-CHO)
    aldehyde = '[CX3H1](=O)[#6]'

    # Sulfhydryl groups (-SH) on aliphatic and aromatic chains
    sulfhydryl_aliphatic = '[SX2H][!c]'
    sulfhydryl_aromatic = '[SX2H][c]'

    # Straight-chain aliphatic carboxylic acids (without additional functional groups)
    straight_chain_acid = '[#6]-[CX3](=O)[OX2H1]'

    # Bulky substituents near coordination sites (e.g., phenyl groups near amino acids)
    bulky_substituent = '[#6]([#6])([#6])[#6]'

    # Flexible linkers between aromatic rings and carboxylic acids (e.g., -(CH2)4-)
    flexible_linker = '[a][CX4][CX4][CX4][CX4][CX3](=O)[OX2H1]'

    # Polyether chains (e.g., -OCH2CH2O-)
    polyether_chain = '[OX2][CX4][CX4][OX2]'

    # Multiple hydroxyl groups (-OH)
    hydroxyl_group = '[OX2H]'

    # Trifluoromethyl ketone (-CO-CF3)
    trifluoromethyl_ketone = '[CX3](=O)[CX4](F)(F)F'

    # Heteroaromatic carboxylic acids with nitrogen in the ring
    heteroaromatic_nitrogen = '[n][c][c][c][c][CX3](=O)[OX2H1]'

    # Ketone group adjacent to carboxylic acid (-CO-COOH)
    ketone_adjacent_acid = '[#6][CX3](=O)[CX3](=O)[OX2H1]'

    # Aromatic ring directly attached to carboxylic acid without coordinating groups
    aromatic_acid = '[c][CX3](=O)[OX2H1]'

    # Long aliphatic chains with polar groups (>6 carbons with -OH or -NH2)
    long_chain_polar = '[#6]-[CH2]{5,}-[OH,NH2]'

    # Bulky sulfur-containing side chains (e.g., methionine derivatives)
    bulky_sulfur_side_chain = '[#16][CX4][CX4][CX4]'

    # Electron-donating groups on aromatic rings (-OCH3, -CH3)
    edg_on_aromatic = '[c][OX2][CH3]', '[c][CH3]'

    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers with Carboxylic Acid and Metal-Coordinating Functional Groups Yield High',
            'patterns': [
                [carboxylic_acid, carboxylate_anion],  # Carboxylic acid group
                [hydroxyl_group, '[NX3;H2,H1]', '[n]']  # Hydroxyl, amino, or nitrogen heteroatom
            ],
            'logic': 'AND',
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers Containing Aldehyde Groups Yield Low',
            'patterns': [
                [aldehyde]  # Aldehyde group
            ],
            'prediction': -1
        },
        {
            'number': 3,
            'description': 'Sulfhydryl Groups on Aliphatic Chains Yield High',
            'patterns': [
                [sulfhydryl_aliphatic]  # Aliphatic -SH
            ],
            'prediction': 1
        },
        {
            'number': 3.1,
            'description': 'Sulfhydryl Groups on Aromatic Rings Yield Low',
            'patterns': [
                [sulfhydryl_aromatic]  # Aromatic -SH
            ],
            'prediction': -1
        },
        {
            'number': 4,
            'description': 'Straight-Chain Aliphatic Carboxylic Acids Without Additional Functional Groups Yield High',
            'patterns': [
                [straight_chain_acid]  # Straight-chain acid
            ],
            'exclude_patterns': [
                [hydroxyl_group, '[NX3;H2,H1]', '[OX2][CX4][CX4][OX2]', '[n]', '[c]']  # Exclude other functional groups
            ],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Bulky Substituents Near Coordination Sites Yield Low',
            'patterns': [
                [bulky_substituent]  # Bulky groups
            ],
            'prediction': -1
        },
        {
            'number': 6,
            'description': 'Flexible Linkers Between Aromatic Rings and Carboxylic Acids Yield High',
            'patterns': [
                [flexible_linker]  # Flexible linker
            ],
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'Modifiers with Polyether Chains Yield Low',
            'patterns': [
                [polyether_chain]  # Polyether chains
            ],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Modifiers with Multiple Hydroxyl Groups Yield High',
            'patterns': [
                [hydroxyl_group]  # Hydroxyl group
            ],
            'count_threshold': {'[OX2H]': 2},  # At least 2 hydroxyl groups
            'prediction': 1
        },
        {
            'number': 9,
            'description': 'Electron-Withdrawing Trifluoromethyl Ketones Yield Low',
            'patterns': [
                [trifluoromethyl_ketone]  # CF3 ketone
            ],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Heteroaromatic Carboxylic Acids with Nitrogen in the Ring Yield High',
            'patterns': [
                [heteroaromatic_nitrogen]  # Heteroaromatic with N
            ],
            'prediction': 1
        },
        {
            'number': 11,
            'description': 'Ketone Groups Adjacent to Carboxylic Acid Yield Low',
            'patterns': [
                [ketone_adjacent_acid]  # Ketone adjacent to acid
            ],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'Aromatic Rings Directly Attached to Carboxylic Acid without Coordinating Groups Yield Low',
            'patterns': [
                [aromatic_acid]  # Aromatic ring with acid
            ],
            'exclude_patterns': [
                [hydroxyl_group, '[NX3;H2,H1]', '[n]']  # Exclude coordinating groups
            ],
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Long Aliphatic Chains with Polar Groups Yield Low',
            'patterns': [
                [long_chain_polar]  # Long chain with polar groups
            ],
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'Amino Acids with Bulky Sulfur-Containing Side Chains Yield Low',
            'patterns': [
                [bulky_sulfur_side_chain]  # Bulky sulfur side chains
            ],
            'prediction': -1
        },
        {
            'number': 15,
            'description': 'Modifiers with Electron-Donating Groups on Aromatic Rings Yield Variable Results',
            'patterns': [
                list(edg_on_aromatic)  # EDGs on aromatic rings
            ],
            'prediction': 0  # Variable results
        },
    ]

    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(p) for p in group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for group in rule['exclude_patterns']:
                compiled_group = [Chem.MolFromSmarts(p) for p in group]
                compiled_excludes.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_excludes

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Logic handling between patterns
                if 'logic' in rule and rule['logic'] == 'AND':
                    # All pattern groups must match
                    for compiled_group in rule['compiled_patterns']:
                        group_match = False
                        for pat in compiled_group:
                            if mol.HasSubstructMatch(pat):
                                group_match = True
                                break
                        if not group_match:
                            match = False
                            break
                else:
                    # Any pattern matches in each group
                    for compiled_group in rule['compiled_patterns']:
                        group_match = False
                        for pat in compiled_group:
                            if mol.HasSubstructMatch(pat):
                                group_match = True
                                break
                        if not group_match:
                            match = False
                            break
                # Check count thresholds if any
                if match and 'count_threshold' in rule:
                    for smarts, threshold in rule['count_threshold'].items():
                        pat = Chem.MolFromSmarts(smarts)
                        matches = mol.GetSubstructMatches(pat)
                        if len(matches) < threshold:
                            match = False
                            break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

---

**Rule 1: Modifiers That Are α-Amino Acids with Small or Aliphatic Side Chains Yield High**

- **Description**: Modifiers that are **α-amino acids** with **small or aliphatic side chains** (i.e., side chains without bulky aromatic or heterocyclic groups) result in **high yield**. The close proximity of the **amino group** and **carboxylic acid** allows for effective **bidentate coordination** with the metal center, enhancing catalyst performance.

- **Examples**:
  - **(2S)-2-aminobutanedioic acid** (Aspartic acid) – **High yield**
  - **(2S)-2-aminopentanedioic acid** (Glutamic acid) – **High yield**
  - **5-aminopentanoic acid** – **High yield**

- **Counter-Example**:
  - **(2S)-2-amino-3-phenylpropanoic acid** (Phenylalanine) – **Low yield** (bulky aromatic side chain causes steric hindrance)
  
---

**Rule 2: Modifiers with Carboxylic Acid Attached to Aromatic Rings Bearing Electron-Donating Groups Yield High**

- **Description**: Modifiers that have a **carboxylic acid** group directly attached to an **aromatic ring** with **electron-donating substituents** (e.g., **amino**, **hydroxyl**) in the **para position** result in **high yield**. These substituents increase the **electron density** on the aromatic ring and provide additional **coordination sites** via their lone pairs, facilitating stronger interaction with the metal center.

- **Examples**:
  - **4-aminobenzoic acid** – **High yield**
  - **5-(4-hydroxyphenyl)pentanoic acid** – **High yield**
  - **4-nitrobenzoic acid** – **High yield** (nitro group can coordinate despite being electron-withdrawing due to its ability to delocalize electrons)

- **Counter-Examples**:
  - **4-methylbenzoic acid** – **Low yield** (methyl group does not provide effective coordination)
  - **4-formylbenzoic acid** – **Low yield** (aldehyde group withdraws electron density and lacks coordination ability)

---

**Rule 3: Modifiers Containing Nitrogen Heterocycles with Carboxylic Acid Yield High**

- **Description**: Modifiers that feature a **nitrogen-containing heterocycle** directly connected to a **carboxylic acid** group result in **high yield**. The **lone pair electrons** on the nitrogen atom(s) enhance **metal coordination**, forming stable complexes that improve catalytic activity.

- **Examples**:
  - **Pyridine-3-carboxylic acid** (Nicotinic acid) – **High yield**
  - **1H-pyrazole-4-carboxylic acid** – **High yield**
  - **2-oxo-1H-pyridine-4-carboxylic acid** – **High yield**

- **Counter-Example**:
  - **4-pyridin-4-ylbenzoic acid** – **Low yield** (the nitrogen heterocycle is not optimally positioned for effective coordination due to steric hindrance)

---

**Rule 4: Modifiers with Multiple Hydroxyl Groups on an Aliphatic Chain Yield High**

- **Description**: Modifiers possessing a **carboxylic acid** and multiple **hydroxyl groups** on an **aliphatic chain** or cyclic structure result in **high yield**. The multiple hydroxyl groups provide additional **coordination sites** and enhance **chelation** with the metal center, stabilizing the catalyst.

- **Examples**:
  - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (Gluconic acid) – **High yield**
  - **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid** – **High yield**

---

**Rule 5: Modifiers with Strong Electron-Withdrawing Groups Adjacent to Carboxylic Acid Yield Low**

- **Description**: Modifiers that have strong **electron-withdrawing groups** (e.g., **aldehyde**, **trifluoromethyl**, **perfluoroalkyl groups**) adjacent to the **carboxylic acid** result in **low yield**. These groups decrease the **electron density** on the coordinating oxygen atoms, weakening **metal-ligand interactions** essential for effective catalysis.

- **Examples**:
  - **4-formylbenzoic acid** – **Low yield**
  - **5-formyl-2-hydroxybenzoic acid** – **Low yield**
  - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid** – **Low yield**
  - **4-[(2,2,2-trifluoroacetyl)amino]butanoic acid** – **Low yield**

---

**Rule 6: Modifiers with Long Aliphatic Chains Terminated with Polar Groups Yield Low**

- **Description**: Modifiers featuring **long aliphatic chains** (seven or more carbon atoms) with **terminal polar groups** (e.g., **amino**, **hydroxyl**) yield **low yield**. The extended chain length reduces the solubility and impedes effective **metal coordination** due to increased flexibility and potential steric hindrance at the active site.

- **Examples**:
  - **7-aminoheptanoic acid** – **Low yield**
  - **8-aminooctanoic acid** – **Low yield**
  - **7-hydroxyheptanoic acid** – **Low yield**

- **Counter-Example**:
  - **Octanoic acid** – **High yield** (lacks terminal polar group, allowing better incorporation into the catalyst structure)

---

**Rule 7: Modifiers Containing Sulfhydryl Groups on Short Aliphatic Chains Yield High**

- **Description**: Modifiers with a **carboxylic acid** and an adjacent **sulfhydryl group (–SH)** on a **short aliphatic chain** (typically three carbon atoms) result in **high yield**. The **thiol group** serves as a strong **soft ligand**, forming stable complexes with the metal center via **thiol-metal coordination**.

- **Example**:
  - **3-sulfanylpropanoic acid** – **High yield**

- **Counter-Example**:
  - **4-sulfanylbenzoic acid** – **Low yield** (thiol group attached to an aromatic ring may experience reduced coordinating ability due to conjugation and steric factors)

---

**Rule 8: Modifiers with Polyether Chains Yield Low**

- **Description**: Modifiers containing **polyether chains** (e.g., repeating **–O–CH₂–CH₂–** units) result in **low yield**. The polyether moiety introduces **conformational flexibility** and increased **hydrophilicity**, which can disrupt the catalyst structure and diminish effective **metal coordination**.

- **Examples**:
  - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid** – **Low yield**
  - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid** – **Low yield**

---

**Rule 9: Modifiers with Bulky Substituents Near Coordination Sites Yield Low**

- **Description**: Modifiers that have **bulky substituents** (e.g., aromatic rings, large alkyl groups) near potential **metal coordination sites** exhibit **low yield**. These bulky groups cause **steric hindrance**, obstructing the approach of metal ions and preventing effective catalyst assembly.

- **Examples**:
  - **(2S)-2-amino-3-phenylpropanoic acid** (Phenylalanine) – **Low yield**
  - **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid** – **Low yield** (bulky methylsulfanyl side chain interferes with coordination)

- **Counter-Example**:
  - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (Tryptophan) – **High yield** (indole ring may participate in additional coordination through the nitrogen atom)

---

**Rule 10: Modifiers with Ketone Groups Adjacent to Carboxylic Acid Yield Low**

- **Description**: Modifiers possessing **ketone groups** adjacent to the **carboxylic acid** interfere with **metal coordination**, leading to **low yield**. The carbonyl oxygen of the ketone can compete with the carboxylate oxygen for coordination, creating unstable or less effective catalyst structures.

- **Examples**:
  - **4-oxoheptanedioic acid** – **Low yield**
  - **2-[(4-hydroxybenzoyl)amino]acetic acid** – **Low yield** (ketone group adjacent to the coordination site disrupts binding)

---

**Rule 11: Modifiers with Electron-Donating Groups on Short Aliphatic Chains Yield High**

- **Description**: Modifiers featuring a **carboxylic acid** and an **electron-donating group** (e.g., **hydroxyl**, **methoxy**) on a **short aliphatic chain** (up to six carbon atoms) result in **high yield**. The electron-donating group increases **electron density** at the coordination site and facilitates stronger **metal-ligand interactions**.

- **Examples**:
  - **5-(4-hydroxyphenyl)pentanoic acid** – **High yield**
  - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (Tryptophan) – **High yield**

---

**Rule 12: Modifiers with Carboxylic Acid Attached to Aromatic Rings Without Coordinating Substituents Yield Low**

- **Description**: Modifiers where the **carboxylic acid** is directly attached to an **aromatic ring** that lacks additional **coordinating substituents** (e.g., **hydroxyl**, **amino**, **nitro**) yield **low yield**. The absence of extra coordination sites and the delocalization of electron density over the aromatic system reduce **metal-binding affinity**.

- **Examples**:
  - **4-methylbenzoic acid** – **Low yield**
  - **4-pyridin-4-ylbenzoic acid** – **Low yield**

- **Counter-Examples**:
  - **4-aminobenzoic acid** – **High yield** (amino group provides additional coordination)
  - **4-nitrobenzoic acid** – **High yield** (nitro group can coordinate with metal center)

---

**Rule 13: Modifiers with Perfluorinated Alkyl Chains Yield Low**

- **Description**: Modifiers that contain **perfluorinated alkyl chains** adjacent to the **carboxylic acid** result in **low yield**. The highly **electronegative fluorine atoms** withdraw electron density, significantly reducing the ability of the carboxylate oxygen to coordinate with the metal.

- **Example**:
  - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid** – **Low yield**

---

**Rule 14: Modifiers with Terminal Electron-Withdrawing Groups on Short Aliphatic Chains Yield Low**

- **Description**: Modifiers that have **electron-withdrawing groups** (e.g., **aldehyde**, **trifluoroacetyl**) at the **terminal position** of a **short aliphatic chain** result in **low yield**. These groups decrease the electron density necessary for effective **metal coordination**.

- **Example**:
  - **4-[(2,2,2-trifluoroacetyl)amino]butanoic acid** – **Low yield**

---

**Rule 15: Modifiers with Hydroxyl Groups on Long Aliphatic Chains Yield Low**

- **Description**: Modifiers with **hydroxyl groups** on **long aliphatic chains** (seven or more carbon atoms) yield **low yield**. The increased chain length combined with polar groups may lead to unfavorable interactions and reduced **metal coordination**.

- **Example**:
  - **7-hydroxyheptanoic acid** – **Low yield**

---

**End of Rules**

---

These rules are derived from a detailed analysis of the provided dataset and are designed to capture the relationship between the **structural features** of the molecular modifiers and the observed **reaction yields**. Each rule combines multiple **functional group characteristics** and considers relevant **physicochemical properties** such as **metal coordination ability**, **electron density**, and **steric effects**.

The rules aim to:

- **Predict Yield Outcomes**: Clearly indicate whether a modifier fitting the rule is expected to produce a **high** or **low** yield.
- **Cover a Broad Dataset Range**: Address a wide variety of modifiers in the dataset, balancing generality and specificity.
- **Combine Substructures**: Integrate multiple functional groups or structural features to provide a more comprehensive prediction.
- **Reflect Physicochemical Principles**: Base the rules on fundamental chemical concepts, such as **coordination chemistry** and **electronic effects**, to ensure they are scientifically grounded.
- **Balance Complexity**: Include both simple rules with broad applicability and more complex rules that account for specific cases, ensuring an effective overall predictive framework.

These rules serve as guidelines for predicting the effectiveness of molecular modifiers in the given radical-mediated remote δ-C(sp³)–H bond functionalization reaction, aiding in the selection and design of modifiers for optimized yields.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.5428571428571428; Test Accuracy: 0.0
    Train Support: 0.02857142857142857; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 2.0588235294117645; Test Lift: NONE
    Train Leverage: 0.014693877551020406; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    
    # Rule definitions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are α-amino acids with small or aliphatic side chains yield high',
            'patterns': [
                ['[CX3](=O)[OX1H]'],  # Carboxylic acid group
                ['[NX3H2]-[CX4H]-[CX3](=O)[OX1H]'],  # Alpha amino acid pattern
            ],
            'exclude_patterns': [
                ['[CX4H]([NX3H2])([a])[CX3](=O)[OX1H]'],  # Exclude aromatic side chains
            ],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers with carboxylic acid attached to aromatic rings bearing electron-donating groups yield high',
            'patterns': [
                ['[c][CX3](=O)[OX1H]'],  # Carboxylic acid attached to aromatic ring
                ['[c][NX3;H2,H1][c]', '[c][OX2H][c]'],  # Electron-donating groups on aromatic ring
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers containing nitrogen heterocycles with carboxylic acid yield high',
            'patterns': [
                ['[n]1ccccc1', '[n]1ccncc1', '[n]1c[nH]cnc1'],  # Nitrogen heterocycles
                ['[CX3](=O)[OX1H]'],  # Carboxylic acid group
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers with multiple hydroxyl groups on an aliphatic chain yield high',
            'patterns': [
                ['[OX2H][CX4][CX4][OX2H]'],  # Multiple hydroxyl groups on aliphatic chain
                ['[CX3](=O)[OX1H]'],  # Carboxylic acid group
            ],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers with strong electron-withdrawing groups adjacent to carboxylic acid yield low',
            'patterns': [
                ['[CX3](=O)[CX3](=O)[OX1H]', '[CX3](=O)[CX4](C(F)(F)F)[OX1H]'],  # Ketone or trifluoromethyl adjacent to carboxylic acid
            ],
            'prediction': -1
        },
        {
            'number': 6,
            'description': 'Modifiers with long aliphatic chains terminated with polar groups yield low',
            'patterns': [
                ['[CH2][CH2][CH2][CH2][CH2][CH2][CH2][*][OX2H1,NX3H2]'],  # Long aliphatic chain with terminal polar group
            ],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Modifiers containing sulfhydryl groups on short aliphatic chains yield high',
            'patterns': [
                ['[SX2H][CX4][CX4][CX3](=O)[OX1H]'],  # Sulfhydryl group on short chain with carboxylic acid
            ],
            'prediction': 1
        },
        {
            'number': 8,
            'description': 'Modifiers with polyether chains yield low',
            'patterns': [
                ['[CX4][OX2][CX4][OX2][CX4][OX2][CX4]'],  # Polyether chain
            ],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers with bulky substituents near coordination sites yield low',
            'patterns': [
                ['[CX3](=O)[OX1H][CX4]([*])[CX3](=O)[OX1H]'],  # Bulky group near carboxylic acid
            ],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers with ketone groups adjacent to carboxylic acid yield low',
            'patterns': [
                ['[CX3](=O)[CX3](=O)[OX1H]'],  # Ketone adjacent to carboxylic acid
            ],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Modifiers with electron-donating groups on short aliphatic chains yield high',
            'patterns': [
                ['[CX4][OX2H][CX4][CX3](=O)[OX1H]'],  # Hydroxyl group on short chain with carboxylic acid
            ],
            'prediction': 1
        },
        {
            'number': 12,
            'description': 'Modifiers with carboxylic acid attached to aromatic rings without coordinating substituents yield low',
            'patterns': [
                ['[c][CX3](=O)[OX1H]'],  # Carboxylic acid attached to aromatic ring
            ],
            'exclude_patterns': [
                ['[c][NX3;H2,H1][c]', '[c][OX2H][c]', '[c][NX3+](=O)[O-][c]'],  # Exclude if coordinating substituents are present
            ],
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Modifiers with perfluorinated alkyl chains yield low',
            'patterns': [
                ['[CX4](C(F)(F)F)[CX3](=O)[OX1H]'],  # Perfluorinated alkyl chain adjacent to carboxylic acid
            ],
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'Modifiers with terminal electron-withdrawing groups on short aliphatic chains yield low',
            'patterns': [
                ['[CX3](=O)[CX4][CX4][NX3](C(F)(F)F)[OX1H]'],  # Electron-withdrawing group at terminal position
            ],
            'prediction': -1
        },
        {
            'number': 15,
            'description': 'Modifiers with hydroxyl groups on long aliphatic chains yield low',
            'patterns': [
                ['[CH2][CH2][CH2][CH2][CH2][CH2][CH2][OX2H]'],  # Hydroxyl group on long aliphatic chain
            ],
            'prediction': -1
        },
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(p) for p in group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for group in rule['exclude_patterns']:
                compiled_group = [Chem.MolFromSmarts(p) for p in group]
                compiled_excludes.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_excludes
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        matches = mol.GetSubstructMatches(pat)
                        if matches:
                            group_match = True
                            break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

---

**Rule 1: Modifiers That Can Form Strong Bidentate or Multidentate Coordination with the Metal Yield High**

- **Description**: Modifiers possessing functional groups that provide **multiple coordination sites**—such as a **carboxylate group** in proximity to additional **amino**, **hydroxyl**, or **thiol** groups—result in **high yield**. These groups enhance **chelation** with the metal center, stabilizing the catalyst structure.

- **Examples**:
  - **(2S)-2-aminobutanedioic acid** (Aspartic acid) – **High yield**
  - **(2S)-2-aminopentanedioic acid** (Glutamic acid) – **High yield**
  - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (Gluconic acid) – **High yield**
  - **3-sulfanylpropanoic acid** – **High yield**

- **Underlying Chemistry**: Multiple coordination sites allow for stronger and more stable **metal-ligand complexes** via **chelation**, enhancing catalytic activity.

---

**Rule 2: Modifiers with Carboxylic Acid Attached to an Aromatic Ring Bearing Additional Coordinating Groups Yield High**

- **Description**: Modifiers where a **carboxylic acid** is attached to an **aromatic ring** that also bears **electron-donating substituents** capable of coordination (e.g., **amino**, **hydroxyl**, **heterocyclic nitrogen atoms**) result in **high yield**. These substituents increase **electron density**, strengthening **metal-ligand interactions**.

- **Examples**:
  - **4-aminobenzoic acid** – **High yield**
  - **Pyridine-3-carboxylic acid** (Nicotinic acid) – **High yield**
  - **1H-pyrazole-4-carboxylic acid** – **High yield**
  - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (Tryptophan) – **High yield**

- **Counter-Example**:
  - **4-methylbenzoic acid** – **Low yield** (methyl group lacks coordinating ability)

- **Underlying Chemistry**: Electron-donating groups enhance **metal affinity** by increasing **electron density** at the coordination site.

---

**Rule 3: Modifiers with Aromatic Carboxylic Acids Lacking Coordinating Groups or Bearing Electron-Withdrawing Groups Yield Low**

- **Description**: Modifiers where the **carboxylic acid** is attached to an **aromatic ring** that either lacks additional **coordinating substituents** or contains **electron-withdrawing groups** (e.g., **formyl**, **nitro**, **fluoroalkyl**) result in **low yield**. These features decrease **electron density** and weaken **metal-ligand interactions**.

- **Examples**:
  - **4-formylbenzoic acid** – **Low yield**
  - **4-nitrobenzoic acid** – **Low yield**
  - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid** – **Low yield**

- **Underlying Chemistry**: Electron-withdrawing groups reduce the **nucleophilicity** of coordinating atoms, impairing **metal binding**.

---

**Rule 4: Aliphatic Carboxylic Acids with Long Alkyl Chains and No Additional Polar Groups Yield High**

- **Description**: **Long-chain aliphatic carboxylic acids** without additional **polar or coordinating groups** yield **high yield**. The simplicity of the structure allows the **carboxylate group** to effectively coordinate with the metal center without steric hindrance.

- **Example**:
  - **Octanoic acid** – **High yield**

- **Underlying Chemistry**: The hydrophobic alkyl chain does not interfere with metal coordination, and the **carboxylate group** can stabilize the metal catalyst.

---

**Rule 5: Aliphatic Carboxylic Acids with Long Chains and Terminal Polar Groups Yield Low**

- **Description**: **Long-chain aliphatic carboxylic acids** that have **terminal polar groups** such as **amino** or **hydroxyl** groups yield **low yield**. These terminal groups can cause **steric hindrance** or introduce **unfavorable interactions** that disrupt metal coordination.

- **Examples**:
  - **7-aminoheptanoic acid** – **Low yield**
  - **7-hydroxyheptanoic acid** – **Low yield**
  - **8-aminooctanoic acid** – **Low yield**

- **Underlying Chemistry**: Terminal polar groups may interfere with the arrangement of ligands around the metal, reducing catalytic efficiency.

---

**Rule 6: Modifiers Containing Flexible Polyether Chains Yield Low**

- **Description**: Modifiers with **polyether chains** (e.g., repeating **–O–CH₂–CH₂–** units) result in **low yield**. The flexibility and hydrophilicity of these chains can disrupt the **structural integrity** of the catalyst and interfere with **metal-ligand binding**.

- **Examples**:
  - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid** – **Low yield**
  - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid** – **Low yield**

- **Underlying Chemistry**: Polyether chains increase **conformational freedom** and can solvate metal ions, hindering effective coordination.

---

**Rule 7: Modifiers with Spacer Chains Between Carboxylate and Coordinating Groups Yield High**

- **Description**: Modifiers featuring a **spacer chain** separating the **carboxylate group** from an additional **coordinating group** (e.g., **aromatic ring with coordinating substituents**) result in **high yield**. The spacer allows optimal orientation for simultaneous binding.

- **Examples**:
  - **4-pyridin-4-ylbutanoic acid** – **High yield**
  - **5-(4-hydroxyphenyl)pentanoic acid** – **High yield**

- **Counter-Examples**:
  - **4-pyridin-4-ylbenzoic acid** – **Low yield** (no spacer chain)
  - **3-(4-hydroxyphenyl)propanoic acid** – **Low yield** (shorter chain may not provide optimal geometry)

- **Underlying Chemistry**: The spacer chain adjusts the **geometric arrangement** of coordinating groups, facilitating better **metal complexation**.

---

**Rule 8: Modifiers with Bulky Hydrophobic Substituents Near Coordination Sites Yield Low**

- **Description**: Modifiers that have **bulky hydrophobic groups** (e.g., **phenyl rings**) adjacent to potential coordination sites yield **low yield**. These groups create **steric hindrance**, impeding effective **metal-ligand coordination**.

- **Example**:
  - **(2S)-2-amino-3-phenylpropanoic acid** (Phenylalanine) – **Low yield**

- **Underlying Chemistry**: Steric bulk near the coordination site prevents proper **metal binding**, reducing catalyst formation.

---

**Rule 9: Modifiers with Strong Electron-Withdrawing Groups Adjacent to Coordination Sites Yield Low**

- **Description**: Modifiers possessing **electron-withdrawing groups** (e.g., **ketones**, **aldehydes**, **perfluoroalkyl groups**) adjacent to the **carboxylate group** result in **low yield**. These groups decrease **electron density**, weakening **metal coordination**.

- **Examples**:
  - **4-oxoheptanedioic acid** – **Low yield**
  - **5-formyl-2-hydroxybenzoic acid** – **Low yield**
  - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid** – **Low yield**

- **Underlying Chemistry**: Reduced electron density at the coordination site diminishes **nucleophilicity**, impairing **bond formation** with the metal.

---

**Rule 10: Modifiers with Multiple Hydroxyl Groups on a Short Aliphatic Chain Yield High**

- **Description**: Modifiers containing a **carboxylic acid** and multiple **hydroxyl groups** on a **short aliphatic chain** result in **high yield**. The hydroxyl groups provide additional **coordination sites**, enhancing **metal chelation**.

- **Example**:
  - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (Gluconic acid) – **High yield**

- **Underlying Chemistry**: Multiple hydroxyl groups increase the potential for **multidentate binding**, stabilizing the metal complex.

---

**End of Rules**

---

These rules are formulated to capture the key structural features that influence the **yield** in the radical-mediated remote δ-C(sp³)–H bond functionalization reaction. Each rule integrates relevant **functional groups** and considers **physicochemical principles** affecting **metal coordination** and **catalytic activity**.

**Key Considerations in These Rules**:

- **Metal Coordination**: Functional groups that can **coordinate** with the metal (e.g., **amino**, **hydroxyl**, **thiol**) enhance catalyst formation.

- **Electron Density**: Electron-donating groups increase **electron density**, improving **metal-ligand interactions**. Electron-withdrawing groups have the opposite effect.

- **Steric Effects**: Bulky groups near coordination sites may cause **steric hindrance**, impeding effective binding.

- **Spatial Arrangement**: Spacer chains can optimize the **geometry** for simultaneous binding of multiple groups.

- **Flexibility and Hydrophilicity**: Highly flexible or hydrophilic chains (e.g., polyethers) may disrupt the **catalyst structure**.

**By following these refined rules, researchers can**:

- **Predict Yield Outcomes**: Determine whether a modifier is likely to result in a **high** or **low** yield based on its structure.

- **Design Effective Modifiers**: Utilize the rules to design new modifiers that are more likely to enhance the reaction yield.

- **Understand Structure-Activity Relationships**: Gain insights into how specific functional groups and structural features influence catalytic performance.

These rules strike a balance between **simplicity and specificity**, providing a practical framework for analyzing and predicting the effects of different molecular modifiers on the reaction yield.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10
1,0,0,0,0,0,1,0,0,0
1,0,0,0,0,0,1,0,0,0
1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,1,0,0,0
1,1,0,0,0,0,0,0,0,0
1,0,0,1,0,0,1,0,0,0
1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,1,0,0,0
1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,1,0,0,0
1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,-1,0,0,0,0
1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,1,0,0,0
1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,-1,0,0,0,0
1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,1,0,0,0
1,0,0,0,0,-1,0,0,0,0
1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0
1,0,0,1,0,0,1,0,0,0
1,0,0,0,0,0,0,0,0,0
1,0,0,1,0,0,1,0,0,0
1,0,0,0,0,-1,0,0,0,0
1,0,0,1,0,0,1,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6; Test Accuracy: 0.0
    Train Support: 0.1; Test Support: 0.0
    Train Confidence: 0.425; Test Confidence: 0.25
    Train Lift: 0.826388888888889; Test Lift: NONE
    Train Leverage: -0.0028571428571428446; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    carboxylic_acid = Chem.MolFromSmarts('[CX3](=O)[OX2H1]')  # Carboxylic acid group
    amino_group = Chem.MolFromSmarts('[NX3;H2]')  # Primary amino group (-NH2)
    hydroxyl_group = Chem.MolFromSmarts('[OX2H]')  # Hydroxyl group (-OH)
    thiol_group = Chem.MolFromSmarts('[SX2H]')  # Thiol group (-SH)
    aromatic_ring = Chem.MolFromSmarts('a')  # Aromatic atom
    aromatic_carboxylic_acid = Chem.MolFromSmarts('[a][CX3](=O)[OX2H1]')  # Aromatic carboxylic acid
    electron_donating_group = Chem.MolFromSmarts('[a][NX3;H2,H1;!$(NC=O),!$(NC=S)]')  # Amino group on aromatic ring
    electron_withdrawing_group = Chem.MolFromSmarts('[a][CX3](=O)[#6]')  # Carbonyl group on aromatic ring
    long_aliphatic_chain = Chem.MolFromSmarts('[CH2][CH2][CH2][CH2][CH2]')  # Aliphatic chain of five carbons
    polar_terminal_group = Chem.MolFromSmarts('[#6][CH2][CH2][CH2][CH2][CH2][X]')  # Terminal polar group
    polyether_chain = Chem.MolFromSmarts('[$([#6][OX2][#6])]*[$([#6][OX2][#6])]')  # Polyether chain (-O-CH2-CH2-)
    spacer_chain = Chem.MolFromSmarts('[CX4]([#6])[#6][#6][CX3](=O)[OX2H1]')  # Spacer chain with carboxylic acid
    bulky_group = Chem.MolFromSmarts('[#6][CX3](=O)[OX2H1][c]')  # Bulky group near carboxylic acid
    electron_withdrawing_adjacent = Chem.MolFromSmarts('[CX3](=O)[CX3](=O)[OX2H1]')  # Adjacent electron-withdrawing groups
    multiple_hydroxyls = Chem.MolFromSmarts('[CX4][$([OX2H][CX4])][$([OX2H][CX4])]')  # Multiple hydroxyl groups
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that can form strong bidentate or multidentate coordination with the metal yield high.',
            'patterns': [carboxylic_acid],
            'additional_patterns': [amino_group, hydroxyl_group, thiol_group],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers with carboxylic acid attached to an aromatic ring bearing additional coordinating groups yield high.',
            'patterns': [aromatic_carboxylic_acid],
            'additional_patterns': [electron_donating_group],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers with aromatic carboxylic acids lacking coordinating groups or bearing electron-withdrawing groups yield low.',
            'patterns': [aromatic_carboxylic_acid],
            'exclude_patterns': [electron_donating_group],
            'additional_patterns': [electron_withdrawing_group],
            'prediction': -1
        },
        {
            'number': 4,
            'description': 'Aliphatic carboxylic acids with long alkyl chains and no additional polar groups yield high.',
            'patterns': [carboxylic_acid, long_aliphatic_chain],
            'exclude_patterns': [polar_terminal_group],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Aliphatic carboxylic acids with long chains and terminal polar groups yield low.',
            'patterns': [carboxylic_acid, long_aliphatic_chain, polar_terminal_group],
            'prediction': -1
        },
        {
            'number': 6,
            'description': 'Modifiers containing flexible polyether chains yield low.',
            'patterns': [carboxylic_acid, polyether_chain],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Modifiers with spacer chains between carboxylate and coordinating groups yield high.',
            'patterns': [spacer_chain],
            'prediction': 1
        },
        {
            'number': 8,
            'description': 'Modifiers with bulky hydrophobic substituents near coordination sites yield low.',
            'patterns': [bulky_group],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers with strong electron-withdrawing groups adjacent to coordination sites yield low.',
            'patterns': [electron_withdrawing_adjacent],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers with multiple hydroxyl groups on a short aliphatic chain yield high.',
            'patterns': [carboxylic_acid, multiple_hydroxyls],
            'prediction': 1
        },
    ]
    
    # Initialize the result matrix
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for pat in rule['exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for pat in rule['patterns']:
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                # Check additional patterns if any
                if 'additional_patterns' in rule and match:
                    additional_match = False
                    for pat in rule['additional_patterns']:
                        if mol.HasSubstructMatch(pat):
                            additional_match = True
                            break
                    if not additional_match:
                        match = False
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df
--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

---

**Rule 1: Modifiers That Are α-Amino Dicarboxylic Acids Yield High**

- **Description**: Modifiers that are **α-amino dicarboxylic acids**, where an amino group is on the α-carbon of a dicarboxylic acid (e.g., aspartic acid, glutamic acid), result in **high yield**.

- **Examples**:
  - **(2S)-2-aminobutanedioic acid** (Aspartic acid) – **High yield**
  - **(2S)-2-aminopentanedioic acid** (Glutamic acid) – **High yield**

- **Counter-Example**:
  - **(2S)-2-amino-3-phenylpropanoic acid** (Phenylalanine) – **Low yield** (lacks second carboxylic acid group)

- **Underlying Chemistry**: The presence of two carboxylate groups and an amino group allows for effective **tridentate coordination** with the metal center, forming stable chelate complexes that enhance catalytic activity.

---

**Rule 2: Modifiers That Are Aromatic Carboxylic Acids with Para-Amino or Hydroxy Groups Yield High**

- **Description**: Modifiers that have a **carboxylic acid** directly attached to an **aromatic ring** bearing a **para-amino** or **para-hydroxy** group result in **high yield**.

- **Examples**:
  - **4-aminobenzoic acid** – **High yield**
  - **5-(4-hydroxyphenyl)pentanoic acid** – **High yield**

- **Counter-Examples**:
  - **4-methylbenzoic acid** – **Low yield** (methyl is less effective in coordination)
  - **4-formylbenzoic acid** – **Low yield** (aldehyde can interfere with coordination)

- **Underlying Chemistry**: **Electron-donating groups** like amino and hydroxy enhance electron density on the aromatic ring, facilitating better **π-interactions** and coordination with the metal center.

---

**Rule 3: Modifiers That Are Heteroaromatic Carboxylic Acids with Adjacent Donor Atoms Yield High**

- **Description**: Modifiers that are **heteroaromatic carboxylic acids** where a heteroatom (e.g., nitrogen) is adjacent to the carboxyl group, allowing for **bidentate chelation**, result in **high yield**.

- **Examples**:
  - **Pyridine-3-carboxylic acid** (Nicotinic acid) – **High yield**
  - **1H-pyrazole-4-carboxylic acid** – **High yield**
  - **2-oxo-1H-pyridine-4-carboxylic acid** – **High yield**

- **Counter-Example**:
  - **4-pyridin-4-ylbenzoic acid** – **Low yield** (pyridine nitrogen too distant from carboxylate)

- **Underlying Chemistry**: The **adjacent heteroatom** provides an additional coordination site, forming stable chelate rings with the metal center, enhancing catalytic performance.

---

**Rule 4: Modifiers That Are Straight-Chain Aliphatic Carboxylic Acids Without Terminal Polar Groups Yield High**

- **Description**: Simple **straight-chain aliphatic carboxylic acids** without additional **terminal polar groups** (like hydroxyl or amino) result in **high yield**.

- **Example**:
  - **Octanoic acid** – **High yield**

- **Counter-Examples**:
  - **7-hydroxyheptanoic acid** – **Low yield** (terminal hydroxyl group)
  - **7-aminoheptanoic acid** – **Low yield** (terminal amino group)

- **Underlying Chemistry**: The absence of terminal polar groups prevents **undesired interactions** or **steric hindrance**, allowing effective coordination with the metal center.

---

**Rule 5: Modifiers Containing Flexible Polyether Chains Yield Low**

- **Description**: Modifiers with **flexible polyether chains** (e.g., repeating **–O–CH₂–CH₂–** units) result in **low yield**.

- **Example**:
  - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid** – **Low yield**

- **Underlying Chemistry**: The flexibility and **conformational freedom** of polyether chains hinder effective coordination by preventing the carboxylate group from appropriately interacting with the metal center.

---

**Rule 6: Modifiers with Sulfanyl Groups Adjacent to Carboxylic Acid Yield High**

- **Description**: Modifiers featuring a **sulfanyl group** (**–SH**) directly next to the **carboxylic acid** group result in **high yield**.

- **Example**:
  - **3-sulfanylpropanoic acid** – **High yield**

- **Counter-Example**:
  - **4-sulfanylbenzoic acid** – **Low yield** (sulfanyl group on aromatic ring reduces effectiveness)

- **Underlying Chemistry**: The **thiol group** adjacent to the carboxylate can act as an additional coordination site, forming stable complexes with the metal center.

---

**Rule 7: Modifiers That Are Aromatic Carboxylic Acids with Para-Nitro Groups Yield High**

- **Description**: Modifiers where the **aromatic carboxylic acid** is substituted with a **para-nitro group** result in **high yield**.

- **Example**:
  - **4-nitrobenzoic acid** – **High yield**

- **Counter-Examples**:
  - **4-formylbenzoic acid** – **Low yield** (aldehyde group affects differently)
  - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid** – **Low yield** (perfluoroalkyl group is too electron-withdrawing)

- **Underlying Chemistry**: The **nitro group** can facilitate **π-backbonding** and stabilize the metal complex through resonance, enhancing catalytic activity.

---

**Rule 8: Modifiers with Long Aliphatic Chains Terminated with Polar Groups Yield Low**

- **Description**: Aliphatic carboxylic acids with **long chains** terminated by **polar functional groups** (like hydroxyl or amino groups) result in **low yield**.

- **Examples**:
  - **7-hydroxyheptanoic acid** – **Low yield**
  - **8-aminooctanoic acid** – **Low yield**

- **Underlying Chemistry**: Terminal polar groups on long chains can introduce **flexibility** and **undesired interactions**, interfering with effective metal coordination.

---

**Rule 9: Modifiers with Additional Carbonyl Groups Near Carboxylic Acid Yield Low**

- **Description**: Modifiers possessing **aldehyde** or **ketone groups** adjacent to the **carboxylic acid** result in **low yield**.

- **Examples**:
  - **4-formylbenzoic acid** – **Low yield**
  - **4-oxoheptanedioic acid** – **Low yield**

- **Underlying Chemistry**: Additional carbonyl groups can **withdraw electron density** from the carboxylate or compete for coordination, reducing the effectiveness of catalyst formation.

---

**Rule 10: Modifiers with Aromatic Carboxylic Acids Linked via Amide Bonds Yield Low**

- **Description**: Modifiers where the **carboxylic acid** is connected to an **aromatic ring** through an **amide bond** result in **low yield**.

- **Example**:
  - **2-[(4-hydroxybenzoyl)amino]acetic acid** – **Low yield**

- **Underlying Chemistry**: The amide linkage may reduce the availability of coordination sites and introduce **steric hindrance**, impeding effective interaction with the metal center.

---

**Rule 11: Modifiers That Are α-Amino Acids with Heteroaromatic Side Chains Yield High**

- **Description**: **α-Amino acids** whose side chains are **heteroaromatic rings** capable of additional coordination result in **high yield**.

- **Example**:
  - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (Tryptophan) – **High yield**

- **Counter-Example**:
  - **(2S)-2-amino-3-phenylpropanoic acid** (Phenylalanine) – **Low yield** (phenyl ring lacks heteroatoms)

- **Underlying Chemistry**: The **heteroaromatic side chain** with donor atoms can engage in coordination, enhancing the stability and activity of the metal complex.

---

**Rule 12: Modifiers with Perfluoroalkyl Groups Yield Low**

- **Description**: Modifiers containing **perfluoroalkyl chains** (fully fluorinated alkyl chains) result in **low yield**.

- **Example**:
  - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid** – **Low yield**

- **Underlying Chemistry**: **Strong electron-withdrawing effects** of perfluoroalkyl groups decrease the electron density on the carboxylate, hindering effective coordination with the metal center.

---

**Rule 13: Modifiers with Multiple Hydroxyl Groups Near Carboxylic Acid Yield High**

- **Description**: Modifiers with a **carboxylic acid** group and **multiple hydroxyl groups** in close proximity result in **high yield**.

- **Examples**:
  - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (Gluconic acid) – **High yield**
  - **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid** – **High yield**

- **Underlying Chemistry**: **Hydroxyl groups** can engage in additional coordination or hydrogen bonding, enhancing the stability of the metal complex.

---

**Rule 14: Modifiers with Ether Linkages Between Carboxylic Acid and Side Chains Yield Low**

- **Description**: Modifiers where the **carboxylic acid** is connected to **side chains** via **ether bonds** result in **low yield**.

- **Example**:
  - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid** – **Low yield**

- **Underlying Chemistry**: **Ether linkages** introduce flexibility and may prevent the carboxylate from effectively coordinating with the metal center due to increased distance and conformational variability.

---

**Rule 15: Modifiers with Aromatic Ketones Adjacent to Carboxylic Acid Yield High**

- **Description**: Modifiers featuring an **aromatic ketone group** adjacent to the **carboxylic acid** result in **high yield**.

- **Example**:
  - **1,3-dioxo-2-benzofuran-5-carboxylic acid** – **High yield**

- **Underlying Chemistry**: The **conjugated system** of the aromatic ketone may facilitate better **delocalization of electron density**, enhancing coordination with the metal center.

---

**End of Rules**

---

These rules capture the relationship between the structural features of molecular modifiers and their impact on the yield of the radical-mediated remote δ-C(sp³)–H bond functionalization reaction:

- **Coordination Capability**: Modifiers with functional groups (e.g., amino, hydroxyl, sulfanyl) positioned to coordinate effectively with the metal center promote high yields by stabilizing the catalytic complex.

- **Electronic Effects**: Electron-donating groups enhance metal coordination, while strongly electron-withdrawing groups can either hinder or, in specific cases (like nitro groups), enhance coordination depending on the overall structure.

- **Steric Considerations**: Modifiers with flexible chains or steric hindrance due to bulky groups or functional groups can negatively impact yield by preventing effective interaction with the catalyst.

By understanding these relationships, researchers can predict the performance of potential modifiers and design new ones to optimize reaction outcomes.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0
1,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0
1,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,-1,0,0,0,-1,0,0,0
0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,-1,0,0,0,-1,0,0,0
0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.5714285714285714; Test Accuracy: 0.0
    Train Support: 0.05714285714285714; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 2.0588235294117645; Test Lift: NONE
    Train Leverage: 0.02938775510204081; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    carboxylic_acid = '[CX3](=O)[OX2H1]'  # Carboxylic acid group (-COOH)
    amino_group = '[NX3;H2,H1][CX4]'      # Primary or secondary amine attached to carbon
    hydroxyl_group = '[OX2H]'             # Hydroxyl group (-OH)
    sulfanyl_group = '[SX2H]'             # Sulfanyl (thiol) group
    nitro_group = '[NX3](=O)[O-]'         # Nitro group (-NO2)
    perfluoroalkyl = 'C(F)(F)F'           # Trifluoromethyl group as perfluoroalkyl
    aromatic_ring = 'a'                   # Aromatic atom
    aromatic_carboxylic_acid = '[a][CX3](=O)[OX2H1]'  # Aromatic carboxylic acid
    ether_linkage = '[CX4][OX2][CX4]'     # Ether linkage (-O-)
    amide_bond = '[CX3](=O)[NX3][CX3](=O)[OX2H1]'  # Amide bond linking to carboxylic acid
    ketone_adjacent_carboxylic = '[CX3](=O)[CX3](=O)[OX2H1]'  # Ketone adjacent to carboxylic acid
    
    # Define SMARTS patterns for each rule
    patterns = {
        'Rule 1': {
            'description': 'Modifiers that are α-amino dicarboxylic acids yield high',
            'patterns': [
                '[NX3;H2,H1][CX4][CX3](=O)[OX2H1]',  # α-amino acid
            ],
            'count_patterns': {carboxylic_acid: 2},  # At least two carboxylic acid groups
            'prediction': 1
        },
        'Rule 2': {
            'description': 'Modifiers that are aromatic carboxylic acids with para-amino or hydroxy groups yield high',
            'patterns': [
                '[cH]:[cH]:[c](:[cH]):[cH][c][CX3](=O)[OX2H1]',  # Para-amino or para-hydroxy benzoic acid
            ],
            'sub_patterns': [
                '[c][NX3;H2,H1]',  # Para-amino group
                '[c][OX2H]',       # Para-hydroxy group
            ],
            'prediction': 1
        },
        'Rule 3': {
            'description': 'Modifiers that are heteroaromatic carboxylic acids with adjacent donor atoms yield high',
            'patterns': [
                '[n,c][n][c][CX3](=O)[OX2H1]',   # Heteroaromatic with adjacent donor atom to carboxylic acid
            ],
            'prediction': 1
        },
        'Rule 4': {
            'description': 'Modifiers that are straight-chain aliphatic carboxylic acids without terminal polar groups yield high',
            'patterns': [
                'C{6}[CX3](=O)[OX2H1]',  # Aliphatic chain with 6 carbons ending with carboxylic acid
            ],
            'exclude_patterns': [
                '[OX2H]',      # Exclude hydroxyl groups
                '[NX3;H2,H1]', # Exclude amino groups
            ],
            'prediction': 1
        },
        'Rule 5': {
            'description': 'Modifiers containing flexible polyether chains yield low',
            'patterns': [
                '(OCC){2,}',  # Polyether chain repeated at least twice
            ],
            'prediction': -1
        },
        'Rule 6': {
            'description': 'Modifiers with sulfanyl groups adjacent to carboxylic acid yield high',
            'patterns': [
                '[SX2H][CX4][CX3](=O)[OX2H1]',  # Thiol group adjacent to carboxylic acid
            ],
            'prediction': 1
        },
        'Rule 7': {
            'description': 'Modifiers that are aromatic carboxylic acids with para-nitro groups yield high',
            'patterns': [
                '[cH]:[cH]:[c](:[cH]):[cH][c][CX3](=O)[OX2H1]',  # Aromatic carboxylic acid
            ],
            'sub_patterns': [
                '[c][NX3](=O)[OX1-]',  # Para-nitro group
            ],
            'prediction': 1
        },
        'Rule 8': {
            'description': 'Modifiers with long aliphatic chains terminated with polar groups yield low',
            'patterns': [
                'C{5,}[OX2H,NX3;H2,H1]',  # Aliphatic chain of at least 5 carbons ending with polar group
            ],
            'prediction': -1
        },
        'Rule 9': {
            'description': 'Modifiers with additional carbonyl groups near carboxylic acid yield low',
            'patterns': [
                '[CX3](=O)[CX3](=O)[OX2H1]',  # Adjacent carbonyl groups to carboxylic acid
            ],
            'prediction': -1
        },
        'Rule 10': {
            'description': 'Modifiers with aromatic carboxylic acids linked via amide bonds yield low',
            'patterns': [
                '[c][CX3](=O)[NX3][CX3](=O)[OX2H1]',  # Amide bond linking aromatic ring to carboxylic acid
            ],
            'prediction': -1
        },
        'Rule 11': {
            'description': 'Modifiers that are α-amino acids with heteroaromatic side chains yield high',
            'patterns': [
                '[NX3;H2,H1][CX4][CX3](=O)[OX2H1][c,n][c,n][c,n]',  # α-Amino acid with heteroaromatic side chain
            ],
            'prediction': 1
        },
        'Rule 12': {
            'description': 'Modifiers with perfluoroalkyl groups yield low',
            'patterns': [
                'C(F)(F)(F)',  # Trifluoromethyl group
            ],
            'prediction': -1
        },
        'Rule 13': {
            'description': 'Modifiers with multiple hydroxyl groups near carboxylic acid yield high',
            'patterns': [
                '[CX4](O)(O)[CX3](=O)[OX2H1]',  # Multiple hydroxyl groups near carboxylic acid
            ],
            'prediction': 1
        },
        'Rule 14': {
            'description': 'Modifiers with ether linkages between carboxylic acid and side chains yield low',
            'patterns': [
                '[CX3](=O)[OX2][CX4][OX2]',  # Ether linkage between carboxylic acid and side chain
            ],
            'prediction': -1
        },
        'Rule 15': {
            'description': 'Modifiers with aromatic ketones adjacent to carboxylic acid yield high',
            'patterns': [
                '[c][CX3](=O)[c][CX3](=O)[OX2H1]',  # Aromatic ketone adjacent to carboxylic acid
            ],
            'prediction': 1
        },
    }
    
    # Compile SMARTS patterns
    for rule_key in patterns.keys():
        rule = patterns[rule_key]
        compiled_patterns = []
        for smarts in rule['patterns']:
            pat = Chem.MolFromSmarts(smarts)
            if pat is not None:
                compiled_patterns.append(pat)
        rule['compiled_patterns'] = compiled_patterns
        # Compile sub-patterns if any
        if 'sub_patterns' in rule:
            compiled_sub_patterns = []
            for smarts in rule['sub_patterns']:
                pat = Chem.MolFromSmarts(smarts)
                if pat is not None:
                    compiled_sub_patterns.append(pat)
            rule['compiled_sub_patterns'] = compiled_sub_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_exclude_patterns = []
            for smarts in rule['exclude_patterns']:
                pat = Chem.MolFromSmarts(smarts)
                if pat is not None:
                    compiled_exclude_patterns.append(pat)
            rule['compiled_exclude_patterns'] = compiled_exclude_patterns
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(patterns))
            continue
        row = []
        for rule_key in patterns.keys():
            rule = patterns[rule_key]
            try:
                match = True
                # Check exclude patterns if any
                if 'compiled_exclude_patterns' in rule:
                    for pat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                if not match:
                    row.append(0)
                    continue
                # Check required patterns
                for pat in rule['compiled_patterns']:
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Check sub-patterns if any (e.g., for para-substituents)
                if 'compiled_sub_patterns' in rule:
                    sub_match = False
                    for pat in rule['compiled_sub_patterns']:
                        if mol.HasSubstructMatch(pat):
                            sub_match = True
                            break
                    if not sub_match:
                        match = False
                if not match:
                    row.append(0)
                    continue
                # Check count patterns if any
                if 'count_patterns' in rule:
                    for smarts, min_count in rule['count_patterns'].items():
                        pattern = Chem.MolFromSmarts(smarts)
                        if pattern is not None:
                            matches = mol.GetSubstructMatches(pattern)
                            if len(matches) < min_count:
                                match = False
                                break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=patterns.keys())
    return df
--------------------------------------------------