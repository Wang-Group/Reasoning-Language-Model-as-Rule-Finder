def rule2matrix(smiles_list):
    # Import necessary RDKit functions
    from rdkit import Chem
    
    # Define SMARTS patterns for the rules
    # Rule 1: Aliphatic Î±-amino acids with a free amino group adjacent to the carboxyl group
    rule1_pattern = Chem.MolFromSmarts('[NX3H2][CX4][CX3](=O)[OX2H]')
    
    # Rule 2: Carboxyl group directly attached to a nitrogen-containing heterocycle
    rule2_pattern = Chem.MolFromSmarts('[cR][CX3](=O)[OX2H]')
    
    # Rule 3: Multiple hydroxyl groups on an aliphatic chain (at least two)
    rule3_pattern = Chem.MolFromSmarts('[CX4][OX2H]')  # Hydroxyl group on aliphatic carbon
    
    # Rule 4a: Aliphatic thiol groups yield high yield
    rule4a_pattern = Chem.MolFromSmarts('[CX4][SX2H]')
    # Rule 4b: Aromatic thiol groups yield low yield
    rule4b_pattern = Chem.MolFromSmarts('[c][SX2H]')
    
    # Rule 5: Reactive aldehyde or ketone groups yield low yield
    rule5_patterns = [
        Chem.MolFromSmarts('[CX3H](=O)[#6]'),  # Aldehyde
        Chem.MolFromSmarts('[CX3](=O)[CX4]')   # Ketone
    ]
    
    # Rule 6: Perfluoroalkyl chains yield low yield
    rule6_pattern = Chem.MolFromSmarts('[CX4]([F])([F])[F]')  # Carbon with three fluorines
    
    # Rule 7: Amide functional groups yield low yield
    rule7_pattern = Chem.MolFromSmarts('[CX3](=O)[NX3]')
    
    # Rule 8: Polyether chains (multiple ether linkages) yield low yield
    rule8_pattern = Chem.MolFromSmarts('[OX2][CX4][OX2][CX4][OX2]')
    
    # Rule 9: Aromatic rings connected via an aliphatic chain of four or more carbons to the carboxyl group yield high yield
    rule9_pattern = Chem.MolFromSmarts('[c][CX4][CX4][CX4][CX4][CX3](=O)[OX2H]')
    
    # Rule 10: Bulky aromatic substituents directly adjacent to the carboxyl group yield low yield
    rule10_pattern = Chem.MolFromSmarts('[c][CX4][CX3](=O)[OX2H]')
    
    # Prepare list of rules with their patterns and predictions
    rules = [
        {'number': 1, 'pattern': rule1_pattern, 'prediction': 1},
        {'number': 2, 'pattern': rule2_pattern, 'prediction': 1},
        {'number': 3, 'pattern': rule3_pattern, 'count_threshold': 2, 'prediction': 1},
        {'number': 4, 'pattern_high': rule4a_pattern, 'pattern_low': rule4b_pattern, 'prediction_high': 1, 'prediction_low': -1},
        {'number': 5, 'patterns': rule5_patterns, 'prediction': -1},
        {'number': 6, 'pattern': rule6_pattern, 'prediction': -1},
        {'number': 7, 'pattern': rule7_pattern, 'prediction': -1},
        {'number': 8, 'pattern': rule8_pattern, 'prediction': -1},
        {'number': 9, 'pattern': rule9_pattern, 'prediction': 1},
        {'number': 10, 'pattern': rule10_pattern, 'prediction': -1}
    ]
    
    # Initialize the result list
    results = []
    
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                if rule['number'] == 2:
                    # Special handling for Rule 2
                    matches = mol.GetSubstructMatches(rule['pattern'])
                    match_found = False
                    for match in matches:
                        c_atom_idx = match[0]
                        c_atom = mol.GetAtomWithIdx(c_atom_idx)
                        ring_info = mol.GetRingInfo()
                        if ring_info.IsAtomInRingOfSize(c_atom_idx, 5) or ring_info.IsAtomInRingOfSize(c_atom_idx, 6):
                            # Get the ring atoms
                            ring_atoms = [set(ring) for ring in ring_info.AtomRings() if c_atom_idx in ring]
                            for ring in ring_atoms:
                                # Check if the ring contains nitrogen
                                for atom_idx in ring:
                                    atom = mol.GetAtomWithIdx(atom_idx)
                                    if atom.GetAtomicNum() == 7:
                                        match_found = True
                                        break
                                if match_found:
                                    break
                        if match_found:
                            break
                    row.append(rule['prediction'] if match_found else 0)
                elif rule['number'] == 3:
                    # Rule 3: Count the number of hydroxyl groups on aliphatic carbons
                    matches = mol.GetSubstructMatches(rule['pattern'])
                    count = len(matches)
                    row.append(rule['prediction'] if count >= rule['count_threshold'] else 0)
                elif rule['number'] == 4:
                    # Rule 4: Check for aliphatic or aromatic thiol groups
                    match_high = mol.HasSubstructMatch(rule['pattern_high'])
                    match_low = mol.HasSubstructMatch(rule['pattern_low'])
                    if match_high:
                        row.append(rule['prediction_high'])
                    elif match_low:
                        row.append(rule['prediction_low'])
                    else:
                        row.append(0)
                elif rule['number'] == 5:
                    # Rule 5: Check for aldehyde or ketone groups
                    match_found = False
                    for pattern in rule['patterns']:
                        if mol.HasSubstructMatch(pattern):
                            match_found = True
                            break
                    row.append(rule['prediction'] if match_found else 0)
                else:
                    # General case
                    if mol.HasSubstructMatch(rule['pattern']):
                        row.append(rule['prediction'])
                    else:
                        row.append(0)
            except Exception:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df
