def rule2matrix(smiles_list):
    # Define the rules with their associated SMARTS patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are alpha-amino acids with side-chain carboxyl groups yield a high yield.',
            'patterns': [
                '[NX3;H2][CX4H][CX4][CX3](=O)[OX2H1]',  # Alpha-amino acid backbone with side-chain carboxyl
                '[CX3](=O)[OX2H1]'  # Side-chain carboxyl group
            ],
            'exclude_patterns': [],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers that are aliphatic carboxylic acids with unbranched carbon chains of five or more carbons and no polar substituents yield a high yield.',
            'patterns': [
                '[CX3](=O)[OX2H1][CH2][CH2][CH2][CH2][CH3]',  # Unbranched aliphatic carboxylic acid with 5 carbons
            ],
            'exclude_patterns': [
                '[#6][!C;!H]'  # Exclude polar substituents
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers that are aromatic carboxylic acids substituted at the para position with strong electron-withdrawing groups yield a high yield.',
            'patterns': [
                'c1ccc(cc1)[CX3](=O)[OX2H1]',  # Aromatic carboxylic acid
                'c1ccc([NX3+](=O)[O-])cc1'  # Para-substituted with nitro group
            ],
            'exclude_patterns': [],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers that are aromatic carboxylic acids with aldehyde groups directly attached to the aromatic ring yield a low yield.',
            'patterns': [
                'c1cc([CX3H]=O)ccc1[CX3](=O)[OX2H1]',  # Aromatic carboxylic acid with aldehyde
            ],
            'exclude_patterns': [],
            'prediction': -1
        },
        {
            'number': 5,
            'description': 'Modifiers that are aliphatic carboxylic acids containing thiol groups yield a high yield; aromatic thiol carboxylic acids yield a low yield.',
            'patterns': [
                '[CX3](=O)[OX2H1][CX4][SX2H]',  # Aliphatic carboxylic acid with thiol
            ],
            'exclude_patterns': [],
            'prediction': 1
        },
        {
            'number': 5.1,
            'description': 'Aromatic thiol carboxylic acids yield a low yield.',
            'patterns': [
                'c1cc([SX2H])ccc1[CX3](=O)[OX2H1]',  # Aromatic carboxylic acid with thiol
            ],
            'exclude_patterns': [],
            'prediction': -1
        },
        {
            'number': 6,
            'description': 'Modifiers that are pyridine carboxylic acids with the carboxyl group directly attached to the pyridine ring yield a high yield.',
            'patterns': [
                'n1ccccc1[CX3](=O)[OX2H1]',  # Pyridine carboxylic acid
            ],
            'exclude_patterns': [],
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'Modifiers with multiple hydroxyl groups near the carboxyl group yield a high yield.',
            'patterns': [
                '[CX3](=O)[OX2H1][C;!H0]([OX2H])[C;!H0]([OX2H])[C;!H0]([OX2H])',  # Multiple hydroxyls near carboxyl
            ],
            'exclude_patterns': [],
            'prediction': 1
        },
        {
            'number': 8,
            'description': 'Modifiers containing amide functional groups adjacent to the carboxylic acid yield a low yield.',
            'patterns': [
                '[CX3](=O)[NX3][CX3](=O)[OX2H1]',  # Amide adjacent to carboxylic acid
            ],
            'exclude_patterns': [],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers that are polyether carboxylic acids with ether linkages distant from the carboxyl group yield a low yield.',
            'patterns': [
                '[OX2][CX4][CX4][OX2][CX4][CX4][CX3](=O)[OX2H1]',  # Polyether chain ending with carboxylic acid
            ],
            'exclude_patterns': [],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers containing perfluorinated chains yield a low yield.',
            'patterns': [
                '[CX4]([F,Cl,Br,I])([F,Cl,Br,I])[CX4]([F,Cl,Br,I])([F,Cl,Br,I])[CX3](=O)[OX2H1]',  # Perfluorinated chain with carboxylic acid
            ],
            'exclude_patterns': [],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Modifiers that are aromatic carboxylic acids with methoxy groups on the aromatic ring yield a high yield.',
            'patterns': [
                'c1cc(OC)c(cc1)[CX3](=O)[OX2H1]',  # Methoxy-substituted aromatic carboxylic acid
            ],
            'exclude_patterns': [],
            'prediction': 1
        },
        {
            'number': 12,
            'description': 'Modifiers that are simple aromatic carboxylic acids with alkyl substituents yield a low yield.',
            'patterns': [
                'c1cc([CX4H3])ccc1[CX3](=O)[OX2H1]',  # Alkyl-substituted aromatic carboxylic acid
            ],
            'exclude_patterns': [],
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Modifiers containing heterocyclic rings with additional coordinating heteroatoms yield a high yield.',
            'patterns': [
                '[n,o,s]1cccc1[CX3](=O)[OX2H1]',  # Heterocyclic ring with carboxylic acid
            ],
            'exclude_patterns': [],
            'prediction': 1
        },
        {
            'number': 14,
            'description': 'Modifiers that are aromatic carboxylic acids with hydroxyl groups ortho to the carboxyl group yield a low yield.',
            'patterns': [
                'c1cc(c(c(c1)O)[CX3](=O)[OX2H1])',  # Ortho-hydroxylated aromatic carboxylic acid
            ],
            'exclude_patterns': [],
            'prediction': -1
        },
        {
            'number': 15,
            'description': 'Modifiers with bulky substituents adjacent to coordinating groups yield a low yield.',
            'patterns': [
                '[CX3](=O)[OX2H1][CX4][CX3](=O)[CX4]([CX4]([CX4H3])[CX4H3])[CF3]',  # Bulky substituent near carboxyl
            ],
            'exclude_patterns': [],
            'prediction': -1
        },
    ]

    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for smarts in rule.get('patterns', []):
            mol = Chem.MolFromSmarts(smarts)
            compiled_patterns.append(mol)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        compiled_excludes = []
        for smarts in rule.get('exclude_patterns', []):
            mol = Chem.MolFromSmarts(smarts)
            compiled_excludes.append(mol)
        rule['compiled_exclude_patterns'] = compiled_excludes

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                for pat in rule['compiled_exclude_patterns']:
                    if mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Check required patterns
                for pat in rule['compiled_patterns']:
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df
