
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

1. **Rule 1: Linear Aliphatic Carboxylic Acids with Medium Chain Lengths (6–8 Carbons) and No Terminal Polar Groups Yield High**

   *Modifiers that are linear aliphatic carboxylic acids with chain lengths between 6 and 8 carbons and lack terminal polar substituents (e.g., hydroxyl or amino groups) result in high yield.*

   **Example Modifier:**

   - **Octanoic acid** (Entry 5, High Yield)

   **Counterexamples:**

   - **7-Aminoheptanoic acid** (Entry 32, Low Yield)
   - **7-Hydroxyheptanoic acid** (Entry 30, Low Yield)

   **Underlying Physico-Chemical Rationale:**

   - Medium-chain aliphatic acids enhance hydrophobic interactions with the catalyst's nonpolar regions, improving binding efficiency. Terminal polar groups may disrupt these interactions or introduce unfavorable solvation effects, reducing yield.

2. **Rule 2: Amino Acids with Side Chain Carboxylic Acid Groups Yield High**

   *Modifiers that are amino acids possessing side chains with additional carboxylic acid groups lead to high yield.*

   **Example Modifiers:**

   - **(2S)-2-Aminobutanedioic acid** (Aspartic acid, Entry 2, High Yield)
   - **(2S)-2-Aminopentanedioic acid** (Glutamic acid, Entry 0, High Yield)

   **Counterexample:**

   - **(2S)-6-Acetamido-2-aminohexanoic acid** (Entry 34, Low Yield)

   **Underlying Physico-Chemical Rationale:**

   - Additional carboxylate groups can coordinate with metal centers in the catalyst, enhancing binding and facilitating electron transfer. Modifiers lacking these groups may not interact as effectively.

3. **Rule 3: Aromatic Carboxylic Acids with Para-Substituted Electron-Withdrawing, Metal-Coordinating Groups Yield High**

   *Modifiers that are aromatic carboxylic acids with para-position electron-withdrawing substituents capable of coordinating with metal centers—such as amino, nitro, or halogen groups—result in high yield.*

   **Example Modifiers:**

   - **4-Aminobenzoic acid** (Entry 4, High Yield)
   - **4-Nitrobenzoic acid** (Entry 21, High Yield)
   - **4-(Bromomethyl)benzoic acid** (Entry 1, High Yield)

   **Counterexample:**

   - **4-Methylbenzoic acid** (Entry 23, Low Yield)

   **Underlying Physico-Chemical Rationale:**

   - Electron-withdrawing, coordinating groups enhance interaction with the catalyst's metal center, facilitating catalytic activity. Electron-donating groups may decrease binding affinity and catalytic efficiency.

4. **Rule 4: Modifiers Containing Nitrogenous Heterocycles Directly Attached to Carboxylic Acid Yield High**

   *Modifiers with nitrogen-containing heterocyclic rings directly attached to the carboxylic acid group yield high, especially when the ring nitrogen can coordinate with metal centers.*

   **Example Modifiers:**

   - **Pyridine-3-carboxylic acid** (Entry 22, High Yield)
   - **1H-Pyrazole-4-carboxylic acid** (Entry 16, High Yield)
   - **2-Oxo-1H-pyridine-4-carboxylic acid** (Entry 8, High Yield)

   **Counterexample:**

   - **4-Pyridin-4-ylbenzoic acid** (Entry 12, Low Yield)

   **Underlying Physico-Chemical Rationale:**

   - Direct attachment allows the heterocycle to effectively coordinate with the catalyst's metal center. Indirect attachment via a phenyl ring may introduce steric hindrance, reducing binding efficiency.

5. **Rule 5: Modifiers with Formyl Groups on Aromatic Rings Yield Low**

   *Modifiers that have aldehyde (formyl) groups attached to aromatic rings result in low yield.*

   **Example Modifiers:**

   - **4-Formylbenzoic acid** (Entry 20, Low Yield)
   - **5-Formyl-2-hydroxybenzoic acid** (Entry 19, Low Yield)

   **Underlying Physico-Chemical Rationale:**

   - Formyl groups may undergo side reactions or irreversibly bind to the catalyst, inhibiting its activity and leading to lower yields.

6. **Rule 6: Modifiers with Polyether Chains Yield Low**

   *Modifiers containing polyether chains (multiple ether linkages) result in low yield.*

   **Example Modifiers:**

   - **2-[2-(2-Methoxyethoxy)ethoxy]acetic acid** (Entry 11, Low Yield)
   - **3-[2-(2-Aminoethoxy)ethoxy]propanoic acid** (Entry 33, Low Yield)

   **Underlying Physico-Chemical Rationale:**

   - Polyether chains may adopt conformations that hinder effective interaction with the catalyst or sequester catalytic species, reducing yield.

7. **Rule 7: Modifiers with Aliphatic Thiol Groups Yield High; Those with Aromatic Thiol Groups Yield Low**

   *Modifiers possessing thiol (-SH) groups on aliphatic chains result in high yield, whereas those with thiol groups on aromatic rings result in low yield.*

   **Example Modifiers:**

   - **High Yield:** **3-Sulfanylpropanoic acid** (Entry 18)
   - **Low Yield:** **4-Sulfanylbenzoic acid** (Entry 10)

   **Underlying Physico-Chemical Rationale:**

   - Aliphatic thiols can form favorable, reversible interactions with the catalyst without causing deactivation. Aromatic thiols may bind too strongly or participate in side reactions that poison the catalyst.

8. **Rule 8: Modifiers with Perfluorinated Aliphatic Chains Yield Low**

   *Modifiers containing perfluorinated aliphatic chains result in low yield.*

   **Example Modifier:**

   - **2,2,3,3,4,4,5,5,5-Nonafluoropentanoic acid** (Entry 14, Low Yield)

   **Underlying Physico-Chemical Rationale:**

   - The strong electron-withdrawing nature and hydrophobicity of fluorinated chains reduce the ability of the modifier to interact with the catalyst, potentially causing phase separation or repulsion.

9. **Rule 9: Modifiers with Aromatic Rings Connected via Flexible Aliphatic Linkers (≥4 Carbons) Yield High**

   *Modifiers where an aromatic ring is connected to the carboxylic acid via a flexible aliphatic linker of four or more carbons yield high; shorter linkers yield low.*

   **Example Modifiers:**

   - **High Yield:** **5-(4-Hydroxyphenyl)pentanoic acid** (Entry 7)
   - **High Yield:** **4-Pyridin-4-ylbutanoic acid** (Entry 25)
   - **Low Yield:** **3-(4-Hydroxyphenyl)propanoic acid** (Entry 31)

   **Underlying Physico-Chemical Rationale:**

   - Longer aliphatic linkers provide flexibility, reducing steric hindrance and allowing better alignment with the catalyst's active site.

10. **Rule 10: Modifiers with Multiple Hydroxyl Groups on Aliphatic Chains Yield High**

    *Modifiers containing multiple hydroxyl (-OH) groups on aliphatic chains tend to result in high yield.*

    **Example Modifier:**

    - **(2R,3S,4R,5R)-2,3,4,5,6-Pentahydroxyhexanoic acid** (Entry 9, High Yield)

    **Counterexample:**

    - **7-Hydroxyheptanoic acid** (Entry 30, Low Yield)

    **Underlying Physico-Chemical Rationale:**

    - Multiple hydroxyl groups can form extensive hydrogen-bonding networks with the catalyst, enhancing binding affinity and catalytic activity. Single hydroxyl groups may not provide sufficient interaction.

11. **Rule 11: Modifiers with Amide Groups Yield Low**

    *Modifiers containing amide functionalities result in low yield.*

    **Example Modifiers:**

    - **2-[(4-Hydroxybenzoyl)amino]acetic acid** (Entry 27, Low Yield)
    - **(2S)-6-Acetamido-2-aminohexanoic acid** (Entry 34, Low Yield)

    **Underlying Physico-Chemical Rationale:**

    - Amide groups may reduce the ability of the modifier to coordinate with the catalyst due to resonance stabilization, decreasing interaction and catalytic efficiency.

12. **Rule 12: Modifiers with Electron-Donating Groups on Aromatic Rings Yield Low**

    *Modifiers with electron-donating substituents (e.g., methyl, methoxy) on aromatic rings yield low, unless compensated by other coordinating groups.*

    **Example Modifier:**

    - **Low Yield:** **4-Methylbenzoic acid** (Entry 23)

    **Exception:**

    - **High Yield:** **4-(3,4-Dimethoxyphenyl)-4-oxobutanoic acid** (Entry 26)

    **Underlying Physico-Chemical Rationale:**

    - Electron-donating groups may decrease binding affinity by reducing the electrophilicity of the aromatic ring. Exceptions occur when additional functional groups enhance interaction.

13. **Rule 13: Modifiers with Ketone Groups Adjacent to Carboxylic Acid Yield Low**

    *Modifiers with ketone groups directly adjacent to the carboxylic acid group result in low yield.*

    **Example Modifier:**

    - **4-Oxoheptanedioic acid** (Entry 28, Low Yield)

    **Underlying Physico-Chemical Rationale:**

    - Carbonyl groups adjacent to carboxylic acids may interfere with coordination or participate in side reactions, hindering catalytic activity.

14. **Rule 14: Modifiers with Indole or Tryptophan Structures Yield High**

    *Modifiers containing indole moieties, such as tryptophan derivatives, yield high.*

    **Example Modifier:**

    - **(2R)-2-Amino-3-(1H-indol-3-yl)propanoic acid** (Entry 15, High Yield)

    **Underlying Physico-Chemical Rationale:**

    - Indole rings can coordinate with metal centers and engage in π-stacking interactions, enhancing binding and catalytic efficiency.

15. **Rule 15: Modifiers with Cyclic Anhydrides or Lactones Yield High**

    *Modifiers containing cyclic anhydride or lactone structures result in high yield.*

    **Example Modifier:**

    - **1,3-Dioxo-2-benzofuran-5-carboxylic acid** (Entry 17, High Yield)

    **Underlying Physico-Chemical Rationale:**

    - These cyclic structures may offer multiple coordination sites and rigid frameworks that facilitate effective interaction with the catalyst.

**End of Rules**

---

These rules are crafted to predict whether a molecular modifier will result in a high or low yield based on specific combinations of substructures and functional groups. By focusing on the interplay of multiple functional groups and their physico-chemical properties, the rules aim to cover a broad range of the dataset while balancing simplicity and specificity. Each rule provides a clear guideline for predicting the reaction outcome and is supported by an underlying rationale rooted in chemical interactions with the catalyst.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,1,0,1,0,0,0,0,0,0,0,0,0,1,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,1,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,1,0,0,0,0,0,0,0,0,-1,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,-1,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.7428571428571429; Test Accuracy: 0.0
    Train Support: 0.08571428571428572; Test Support: 0.0
    Train Confidence: 0.9666666666666668; Test Confidence: 0.5
    Train Lift: 1.9596949891067539; Test Lift: NONE
    Train Leverage: 0.04016326530612244; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Import necessary modules
    from rdkit import Chem
    import pandas as pd
    
    # Define SMARTS patterns for functional groups and substructures
    carboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1]'
    amino_acid = '[NX3;H2,H1][CX4][CX3](=O)[OX1H0-,OX2H1]'
    aromatic_ring = '[a]'
    para_substituted_aromatic = '[c][c]([c])[c](*)[c][c]'
    electron_withdrawing_groups = '[F,Cl,Br,I,NX3(+),NX4(+)]'
    nitrogen_heterocycle = '[n]'
    formyl_group = '[CX3H1](=O)[#6]'
    polyether_chain = '([OX2H0][CX4H2])*[OX2H0][CX4H2]'
    aliphatic_thiol = '[CX4][SX2H]'
    aromatic_thiol = '[c][SX2H]'
    perfluoro_chain = '[CX4](F)(F)F'
    hydroxyl_group = '[OX2H]'
    multiple_hydroxyls = '([OX2H][CX4]){2,}'
    amide_group = '[CX3](=O)[NX3]'
    indole = 'c1ccc2c(c1)cc[nH]2'
    cyclic_anhydride = '[O]=[C]1OC(=O)[C@H]1'
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Linear aliphatic carboxylic acids with chain lengths between 6 and 8 carbons and no terminal polar substituents result in high yield.',
            'function': rule1,
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Amino acids possessing side chains with additional carboxylic acid groups lead to high yield.',
            'patterns': [carboxylic_acid, amino_acid],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Aromatic carboxylic acids with para-position electron-withdrawing substituents yield high.',
            'patterns': [carboxylic_acid, para_substituted_aromatic, electron_withdrawing_groups],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers with nitrogen-containing heterocyclic rings directly attached to the carboxylic acid group yield high.',
            'patterns': [carboxylic_acid, nitrogen_heterocycle],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers that have aldehyde (formyl) groups attached to aromatic rings result in low yield.',
            'patterns': [formyl_group, aromatic_ring],
            'prediction': -1
        },
        {
            'number': 6,
            'description': 'Modifiers containing polyether chains result in low yield.',
            'patterns': [polyether_chain],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Modifiers possessing thiol (-SH) groups on aliphatic chains result in high yield; those with thiol groups on aromatic rings result in low yield.',
            'function': rule7,
        },
        {
            'number': 8,
            'description': 'Modifiers containing perfluorinated aliphatic chains result in low yield.',
            'patterns': [perfluoro_chain],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers where an aromatic ring is connected to the carboxylic acid via a flexible aliphatic linker of four or more carbons yield high; shorter linkers yield low.',
            'function': rule9,
        },
        {
            'number': 10,
            'description': 'Modifiers containing multiple hydroxyl (-OH) groups on aliphatic chains tend to result in high yield.',
            'patterns': [carboxylic_acid, multiple_hydroxyls],
            'prediction': 1
        },
        {
            'number': 11,
            'description': 'Modifiers containing amide functionalities result in low yield.',
            'patterns': [amide_group],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'Modifiers with electron-donating substituents (e.g., methyl, methoxy) on aromatic rings yield low, unless compensated by other coordinating groups.',
            'function': rule12,
        },
        {
            'number': 13,
            'description': 'Modifiers with ketone groups directly adjacent to the carboxylic acid group result in low yield.',
            'patterns': ['[CX3](=O)[CX3](=O)[OX1H0-,OX2H1]'],
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'Modifiers containing indole moieties yield high.',
            'patterns': [indole],
            'prediction': 1
        },
        {
            'number': 15,
            'description': 'Modifiers containing cyclic anhydride or lactone structures result in high yield.',
            'patterns': [cyclic_anhydride],
            'prediction': 1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        if 'patterns' in rule:
            compiled_patterns = []
            for pat in rule['patterns']:
                compiled_patterns.append(Chem.MolFromSmarts(pat))
            rule['compiled_patterns'] = compiled_patterns
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = False
                if 'function' in rule:
                    # Apply custom function for complex rules
                    match, prediction = rule['function'](mol)
                    if match:
                        row.append(prediction)
                    else:
                        row.append(0)
                    continue
                # Check required patterns
                for pat in rule.get('compiled_patterns', []):
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                    else:
                        match = True
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

# Custom functions for complex rules

def rule1(mol):
    # Rule 1: Linear aliphatic carboxylic acids with chain lengths between 6 and 8 carbons and no terminal polar groups
    try:
        # Check for carboxylic acid group
        carboxylic_acid_pat = Chem.MolFromSmarts('[CX3](=O)[OX1H0-,OX2H1]')
        if not mol.HasSubstructMatch(carboxylic_acid_pat):
            return False, 0
        # Check for no rings
        if mol.GetRingInfo().NumRings() > 0:
            return False, 0
        # Check for no branching (all non-terminal carbons have exactly two bonds)
        for atom in mol.GetAtoms():
            if atom.GetAtomicNum() == 6:
                if atom.GetDegree() > 2 and not atom.IsInRing():
                    return False, 0
        # Count total number of carbons
        carbon_count = sum(1 for atom in mol.GetAtoms() if atom.GetAtomicNum() == 6)
        if carbon_count < 6 or carbon_count > 8:
            return False, 0
        # Check for other functional groups (exclude only C, H, O in carboxylic acid)
        allowed_atoms = {1, 6, 8}
        for atom in mol.GetAtoms():
            if atom.GetAtomicNum() == 8:
                # Oxygen atoms should be part of carboxylic acid
                if not atom.GetSymbol() == 'O':
                    return False, 0
            if atom.GetAtomicNum() not in allowed_atoms:
                return False, 0
        # Check for terminal polar groups (hydroxyl or amino groups)
        hydroxyl_pat = Chem.MolFromSmarts('[CX4H2][OX2H]')
        amino_pat = Chem.MolFromSmarts('[CX4H2][NX3H2]')
        if mol.HasSubstructMatch(hydroxyl_pat) or mol.HasSubstructMatch(amino_pat):
            return False, 0
        return True, 1
    except:
        return False, 0

def rule7(mol):
    # Rule 7: Aliphatic thiol groups yield high; aromatic thiol groups yield low
    try:
        aliph_thiol_pat = Chem.MolFromSmarts('[CX4][SX2H]')
        arom_thiol_pat = Chem.MolFromSmarts('[c][SX2H]')
        if mol.HasSubstructMatch(aliph_thiol_pat):
            return True, 1
        elif mol.HasSubstructMatch(arom_thiol_pat):
            return True, -1
        else:
            return False, 0
    except:
        return False, 0

def rule9(mol):
    # Rule 9: Aromatic ring connected via aliphatic linker of ≥4 carbons to carboxylic acid
    try:
        linker_length = 4
        pattern = f'c-C{{{linker_length},}}-C(=O)[O,H]'
        pat = Chem.MolFromSmarts(pattern)
        if mol.HasSubstructMatch(pat):
            return True, 1
        else:
            # Check for shorter linkers
            short_linker_pat = Chem.MolFromSmarts('c-C-C(=O)[O,H]')
            if mol.HasSubstructMatch(short_linker_pat):
                return True, -1
            else:
                return False, 0
    except:
        return False, 0

def rule12(mol):
    # Rule 12: Modifiers with electron-donating groups on aromatic rings yield low
    try:
        edg_patterns = ['[c][OX2H]', '[c][OX2][CH3]', '[c][CH3]']
        carboxylic_acid_pat = Chem.MolFromSmarts('[CX3](=O)[OX1H0-,OX2H1]')
        if not mol.HasSubstructMatch(carboxylic_acid_pat):
            return False, 0
        for edg_smarts in edg_patterns:
            pat = Chem.MolFromSmarts(edg_smarts)
            if mol.HasSubstructMatch(pat):
                return True, -1
        return False, 0
    except:
        return False, 0

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

---

**Rule 1: Linear Aliphatic Carboxylic Acids with Medium Chain Lengths (6–8 Carbons) and No Terminal Polar Groups Yield High**

*Modifiers that are linear aliphatic carboxylic acids with chain lengths between 6 and 8 carbons and lack terminal polar substituents (e.g., hydroxyl, amino, or other polar groups) result in high yield.*

**Example Modifier:**

- **Octanoic acid** (Entry 5, High Yield)

**Counterexamples:**

- **7-Aminoheptanoic acid** (Entry 32, Low Yield)
- **7-Hydroxyheptanoic acid** (Entry 30, Low Yield)

**Underlying Physico-Chemical Rationale:**

- Medium-chain aliphatic acids enhance hydrophobic interactions with the catalyst's nonpolar regions, improving binding efficiency. Terminal polar groups may disrupt these interactions or introduce unfavorable solvation effects, reducing yield.

---

**Rule 2: Amino Acids with Side Chain Carboxylic Acid Groups Yield High**

*Modifiers that are amino acids possessing side chains with additional carboxylic acid groups lead to high yield.*

**Example Modifiers:**

- **(2S)-2-Aminobutanedioic acid** (Aspartic acid, Entry 2, High Yield)
- **(2S)-2-Aminopentanedioic acid** (Glutamic acid, Entry 0, High Yield)

**Counterexample:**

- **(2S)-2-Amino-3-phenylpropanoic acid** (Phenylalanine, Entry 13, Low Yield)

**Underlying Physico-Chemical Rationale:**

- Additional carboxylate groups can coordinate with metal centers in the catalyst, enhancing binding and facilitating electron transfer. Modifiers lacking these groups may not interact as effectively.

---

**Rule 3: Aromatic Carboxylic Acids with Para-Substituted Electron-Withdrawing, Metal-Coordinating Groups Yield High**

*Modifiers that are aromatic carboxylic acids with electron-withdrawing substituents at the para position capable of coordinating with metal centers—such as amino, nitro, or halogen groups—result in high yield.*

**Example Modifiers:**

- **4-Aminobenzoic acid** (Entry 4, High Yield)
- **4-Nitrobenzoic acid** (Entry 21, High Yield)
- **4-(Bromomethyl)benzoic acid** (Entry 1, High Yield)

**Counterexample:**

- **4-Methylbenzoic acid** (Entry 23, Low Yield)

**Underlying Physico-Chemical Rationale:**

- Electron-withdrawing, coordinating groups enhance interaction with the catalyst's metal center, facilitating catalytic activity. Electron-donating groups may decrease binding affinity and catalytic efficiency.

---

**Rule 4: Modifiers Containing Nitrogen Heterocycles Directly Attached to Carboxylic Acid Yield High**

*Modifiers with nitrogen-containing heterocyclic rings directly attached to the carboxylic acid group yield high, especially when the ring nitrogen can coordinate with metal centers.*

**Example Modifiers:**

- **Pyridine-3-carboxylic acid** (Entry 22, High Yield)
- **1H-Pyrazole-4-carboxylic acid** (Entry 16, High Yield)
- **2-Oxo-1H-pyridine-4-carboxylic acid** (Entry 8, High Yield)

**Counterexample:**

- **4-Pyridin-4-ylbenzoic acid** (Entry 12, Low Yield)

**Underlying Physico-Chemical Rationale:**

- Direct attachment allows the heterocycle to effectively coordinate with the catalyst's metal center. Indirect attachment via a phenyl ring may introduce steric hindrance, reducing binding efficiency.

---

**Rule 5: Modifiers with Flexible Aliphatic Linkers Connecting Aromatic Rings to Carboxylic Acids Yield High**

*Modifiers where an aromatic ring is connected to the carboxylic acid via a flexible aliphatic linker of four or more carbons yield high; shorter linkers or rigid linkages yield low.*

**Example Modifiers:**

- **5-(4-Hydroxyphenyl)pentanoic acid** (Entry 7, High Yield)
- **4-Pyridin-4-ylbutanoic acid** (Entry 25, High Yield)

**Counterexamples:**

- **3-(4-Hydroxyphenyl)propanoic acid** (Entry 31, Low Yield)
- **4-Pyridin-4-ylbenzoic acid** (Entry 12, Low Yield)

**Underlying Physico-Chemical Rationale:**

- Longer aliphatic linkers provide flexibility, reducing steric hindrance and allowing better alignment with the catalyst's active site. Rigid linkages or short chains may prevent effective interaction.

---

**Rule 6: Modifiers with Multiple Hydroxyl Groups on Aliphatic Chains and Carboxylic Acids Yield High**

*Modifiers containing multiple hydroxyl (-OH) groups on aliphatic chains in addition to a carboxylic acid group tend to result in high yield.*

**Example Modifier:**

- **(2R,3S,4R,5R)-2,3,4,5,6-Pentahydroxyhexanoic acid** (Entry 9, High Yield)

**Counterexample:**

- **7-Hydroxyheptanoic acid** (Entry 30, Low Yield)

**Underlying Physico-Chemical Rationale:**

- Multiple hydroxyl groups can form extensive hydrogen-bonding networks with the catalyst, enhancing binding affinity and catalytic activity. Single hydroxyl groups may not provide sufficient interaction.

---

**Rule 7: Modifiers with Aliphatic Thiol Groups and Carboxylic Acids Yield High; Those with Aromatic Thiol Groups Yield Low**

*Modifiers possessing thiol (-SH) groups on aliphatic chains along with a carboxylic acid result in high yield, whereas those with thiol groups on aromatic rings result in low yield.*

**Example Modifiers:**

- **High Yield:** **3-Sulfanylpropanoic acid** (Entry 18, High Yield)
- **Low Yield:** **4-Sulfanylbenzoic acid** (Entry 10, Low Yield)

**Underlying Physico-Chemical Rationale:**

- Aliphatic thiols can form favorable, reversible interactions with the catalyst without causing deactivation. Aromatic thiols may bind too strongly or participate in side reactions that poison the catalyst.

---

**Rule 8: Modifiers with Electron-Withdrawing Carbonyl Substituents on Aromatic Rings Yield Low**

*Modifiers that have electron-withdrawing carbonyl groups (e.g., formyl or ketone) attached to aromatic rings result in low yield.*

**Example Modifiers:**

- **4-Formylbenzoic acid** (Entry 20, Low Yield)
- **5-Formyl-2-hydroxybenzoic acid** (Entry 19, Low Yield)
- **2-[(4-Hydroxybenzoyl)amino]acetic acid** (Entry 27, Low Yield)

**Underlying Physico-Chemical Rationale:**

- Carbonyl groups on aromatic rings may interfere with binding to the catalyst or participate in side reactions, hindering catalytic activity.

---

**Rule 9: Modifiers with Polyether Chains and Terminal Polar Groups Yield Low**

*Modifiers containing polyether chains (multiple ether linkages) and terminal polar groups (e.g., amino or carboxyl) result in low yield.*

**Example Modifiers:**

- **2-[2-(2-Methoxyethoxy)ethoxy]acetic acid** (Entry 11, Low Yield)
- **3-[2-(2-Aminoethoxy)ethoxy]propanoic acid** (Entry 33, Low Yield)

**Underlying Physico-Chemical Rationale:**

- Polyether chains may adopt conformations that hinder effective interaction with the catalyst or sequester catalytic species, and terminal polar groups may introduce unfavorable interactions.

---

**Rule 10: Modifiers with Perfluorinated Aliphatic Chains Yield Low**

*Modifiers containing perfluorinated aliphatic chains result in low yield.*

**Example Modifier:**

- **2,2,3,3,4,4,5,5,5-Nonafluoropentanoic acid** (Entry 14, Low Yield)

**Underlying Physico-Chemical Rationale:**

- The strong electron-withdrawing nature and hydrophobicity of fluorinated chains reduce the ability of the modifier to interact with the catalyst, potentially causing phase separation or repulsion.

---

**Rule 11: Amino Acids with Aromatic Side Chains Yield Low Unless Containing Additional Carboxylic Acid Groups**

*Modifiers that are amino acids with aromatic side chains yield low unless they also contain additional functional groups that enhance coordination with the catalyst, such as additional carboxylic acid groups.*

**Example Modifier:**

- **Low Yield:** **(2S)-2-Amino-3-phenylpropanoic acid** (Phenylalanine, Entry 13)

- **High Yield Exception:** **(2R)-2-Amino-3-(1H-indol-3-yl)propanoic acid** (Tryptophan, Entry 15, High Yield)

**Underlying Physico-Chemical Rationale:**

- Aromatic side chains alone may not provide sufficient interaction with the catalyst. However, indole rings may offer additional coordination sites or interactions enhancing the yield.

---

**Rule 12: Modifiers with Amide Functionalities Adjacent to Aromatic Rings Yield Low**

*Modifiers containing amide linkages directly attached to aromatic rings tend to result in low yield.*

**Example Modifiers:**

- **(2S)-6-Acetamido-2-aminohexanoic acid** (Entry 34, Low Yield)
- **2-[(4-Hydroxybenzoyl)amino]acetic acid** (Entry 27, Low Yield)

**Underlying Physico-Chemical Rationale:**

- Amide groups may reduce the ability of the modifier to coordinate with the catalyst due to resonance stabilization, decreasing interaction and catalytic efficiency.

---

**Rule 13: Modifiers with Electron-Donating Groups on Aromatic Rings Yield Low Unless Compensated by Additional Coordinating Functionalities**

*Modifiers with electron-donating substituents (e.g., methyl, methoxy) on aromatic rings yield low unless they possess other groups that enhance coordination with the catalyst.*

**Example Modifier:**

- **Low Yield:** **4-Methylbenzoic acid** (Entry 23)

**Exception:**

- **High Yield:** **4-(3,4-Dimethoxyphenyl)-4-oxobutanoic acid** (Entry 26)

**Underlying Physico-Chemical Rationale:**

- Electron-donating groups decrease the acidity of the carboxylic acid and reduce binding affinity. However, the presence of additional coordinating groups or flexible linkers can compensate and enhance interaction with the catalyst.

---

**Rule 14: Modifiers with Cyclic Anhydrides or Lactones Yield High**

*Modifiers containing cyclic anhydride or lactone structures result in high yield.*

**Example Modifier:**

- **1,3-Dioxo-2-benzofuran-5-carboxylic acid** (Entry 17, High Yield)

**Underlying Physico-Chemical Rationale:**

- These cyclic structures offer multiple coordination sites and a rigid framework that facilitates effective interaction with the catalyst.

---

**Rule 15: Modifiers with Ketone Groups on Aliphatic Chains Yield Low**

*Modifiers with ketone groups on aliphatic chains, particularly adjacent to carboxylic acids, result in low yield.*

**Example Modifier:**

- **4-Oxoheptanedioic acid** (Entry 28, Low Yield)

**Underlying Physico-Chemical Rationale:**

- Ketone groups on aliphatic chains may interfere with coordination to the catalyst or participate in side reactions, reducing catalytic efficiency.

---

**End of Rules**

---

These rules have been carefully crafted to align with the dataset and the specified requirements:

- **Combination of Functional Groups:** Each rule focuses on modifiers that combine multiple substructures or functional groups, illustrating how these combinations influence the yield.

- **Physico-Chemical Properties:** The underlying rationale for each rule considers physico-chemical interactions, such as coordination with metal centers, hydrophobic interactions, hydrogen bonding, and electronic effects.

- **Predictive Clarity:** Each rule clearly states whether modifiers fitting the description are expected to yield high or low outcomes.

- **Coverage Balance:** The rules aim to cover a broad range of the dataset, balancing between simple rules with high coverage (e.g., Rule 1) and more specific rules with lower coverage (e.g., Rule 14).

- **Improvement Over Previous Rules:** The rules have been refined to combine multiple substructures, incorporate more detailed physico-chemical reasoning, and enhance accuracy based on the dataset analysis. Ambiguous or less supported rules have been revised or replaced.

By following these rules, one can predict the expected yield outcome for a given molecular modifier based on its structural features, aiding in the optimization and control of the remote δ-C(sp³)–H bond functionalization reaction.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,1
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,1
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.5428571428571428; Test Accuracy: 1.0
    Train Support: 0.05714285714285714; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 1.9444444444444446; Test Lift: NONE
    Train Leverage: 0.02775510204081633; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Linear aliphatic carboxylic acids with chain lengths between 6 and 8 carbons and no terminal polar groups yield high.',
            'include_patterns': ['[CX3](=O)[OX1H1]'],  # Carboxylic acid
            'exclude_patterns': ['[!#6]'],  # Exclude any non-carbon atoms in the chain
            'function': 'rule1',
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Amino acids with side chain carboxylic acid groups yield high.',
            'include_patterns': ['[NX3][CX4][CX3](=O)[OX1H1]', '[CX3](=O)[OX1H1]'],  # Amino acid backbone and additional carboxylic acid
            'function': 'rule2',
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Aromatic carboxylic acids with para-substituted electron-withdrawing, metal-coordinating groups yield high.',
            'include_patterns': ['c1ccc([C](=O)[O])[c][G1]]', '[G2]'],  # Placeholder patterns
            'function': 'rule3',
            'prediction': 1
        },
        # ... Define other rules similarly
    ]
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                # Call the function associated with the rule
                match = globals()[rule['function']](mol)
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f"Rule {rule['number']}" for rule in rules])
    return df

# Define functions for each rule

def rule1(mol):
    """Rule 1: Linear aliphatic carboxylic acids with medium chain lengths (6–8 carbons) and no terminal polar groups yield high."""
    try:
        # Check for carboxylic acid group
        carboxylic_acid = Chem.MolFromSmarts('[CX3](=O)[OX1H1]')
        if not mol.HasSubstructMatch(carboxylic_acid):
            return False
        # Count the number of carbons in the longest carbon chain
        ri = mol.GetRingInfo()
        if ri.IsInitialized() and ri.NumRings() > 0:
            return False  # Exclude cyclic compounds
        carbon_chain = max((len(path) for path in Chem.GetSymmSSSR(mol) if all(mol.GetAtomWithIdx(idx).GetAtomicNum() == 6 for idx in path)), default=0)
        paths = Chem.FindAllPathsOfLengthN(mol, 8, useBonds=False)
        max_chain_length = 0
        for path in paths:
            if all(mol.GetAtomWithIdx(idx).GetAtomicNum() == 6 for idx in path):
                max_chain_length = max(max_chain_length, len(path))
        if 6 <= max_chain_length <= 8:
            # Check for terminal polar groups
            polar_groups = ['[!#6;!H0]']
            for pg in polar_groups:
                polar_pat = Chem.MolFromSmarts(pg)
                if mol.HasSubstructMatch(polar_pat):
                    return False
            return True
        return False
    except:
        return False

def rule2(mol):
    """Rule 2: Amino acids with side chain carboxylic acid groups yield high."""
    try:
        # Check for amino acid backbone
        amino_acid = Chem.MolFromSmarts('[NX3][CX4][CX3](=O)[OX1H1]')
        if not mol.HasSubstructMatch(amino_acid):
            return False
        # Check for additional carboxylic acid in side chain
        carboxylic_acid = Chem.MolFromSmarts('[CX3](=O)[OX1H1]')
        matches = mol.GetSubstructMatches(carboxylic_acid)
        if len(matches) > 1:
            return True
        return False
    except:
        return False

def rule3(mol):
    """Rule 3: Aromatic carboxylic acids with para-substituted electron-withdrawing, metal-coordinating groups yield high."""
    try:
        # Check for aromatic carboxylic acid
        aromatic_acid = Chem.MolFromSmarts('c1ccc([C](=O)[O])cc1')
        if not mol.HasSubstructMatch(aromatic_acid):
            return False
        # Check for para-substituted EWG capable of metal coordination
        ewgs = ['[c][NX3;H2,H1,H0]', '[c][Cl]', '[c][Br]', '[c][F]', '[c][NX3+](=O)[O-]']
        for ewg in ewgs:
            ewg_pat = Chem.MolFromSmarts(ewg)
            if mol.HasSubstructMatch(ewg_pat):
                return True
        return False
    except:
        return False

# ... Define functions for other rules similarly

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

---

### **Rule 1: Linear Aliphatic Carboxylic Acids (6–8 Carbons) Without Terminal Polar Groups Yield High**

*Modifiers that are straight-chain aliphatic carboxylic acids with chain lengths between 6 and 8 carbons and **do not** have terminal polar groups (e.g., hydroxyl, amino) result in **high yield**.*

**Example Modifier:**

- **Octanoic acid** (Entry 5, High Yield)

**Counterexamples:**

- **7-Hydroxyheptanoic acid** (Entry 30, Low Yield)
- **7-Aminoheptanoic acid** (Entry 32, Low Yield)

**Underlying Physico-Chemical Explanation:**

- Nonpolar aliphatic chains enhance hydrophobic interactions with the catalyst framework, promoting better integration of the modifier. Terminal polar groups introduce hydrophilicity, disrupting these interactions and leading to decreased yields.

---

### **Rule 2: Aliphatic Dicarboxylic Acids Without Additional Carbonyl Groups Yield High**

*Modifiers that are aliphatic dicarboxylic acids **without** additional carbonyl functionalities (e.g., ketones, aldehydes) result in **high yield**.*

**Example Modifiers:**

- **(2S)-2-Aminobutanedioic acid** (Aspartic Acid, Entry 2, High Yield)
- **(2S)-2-Aminopentanedioic acid** (Glutamic Acid, Entry 0, High Yield)

**Counterexample:**

- **4-Oxoheptanedioic acid** (Entry 28, Low Yield) *(Presence of a ketone group)*

**Underlying Physico-Chemical Explanation:**

- Dicarboxylic acids can chelate metal centers via both carboxylate groups, enhancing catalyst stability and activity. Additional carbonyl groups may interfere with metal coordination, reducing effectiveness.

---

### **Rule 3: Aromatic Carboxylic Acids with Electron-Donating Groups at Para Position Yield High**

*Modifiers that are aromatic carboxylic acids with strong electron-donating substituents (e.g., amino, hydroxyl) at the para position relative to the carboxyl group result in **high yield**.*

**Example Modifiers:**

- **4-Aminobenzoic acid** (Entry 4, High Yield)
- **4-Nitrobenzoic acid** (Entry 21, High Yield) *(Nitro group acts as a strong electron-withdrawing group but can also stabilize negative charge via resonance, enhancing coordination)*

**Counterexamples:**

- **4-Methylbenzoic acid** (Entry 23, Low Yield) *(Methyl is a weak electron-donating group)*
- **4-Formylbenzoic acid** (Entry 20, Low Yield)

**Underlying Physico-Chemical Explanation:**

- Electron-donating groups increase the electron density of the carboxylate, enhancing its ability to coordinate with metal ions in the catalyst. This improved coordination facilitates electron transfer essential for catalysis.

---

### **Rule 4: Modifiers with Nitrogen Heterocycles Directly Attached to Carboxylic Acid Yield High**

*Modifiers containing nitrogen-containing heterocyclic rings directly attached to a carboxylic acid group result in **high yield**.*

**Example Modifiers:**

- **Pyridine-3-carboxylic acid** (Niacin, Entry 22, High Yield)
- **1H-Pyrazole-4-carboxylic acid** (Entry 16, High Yield)

**Counterexample:**

- **4-Pyridin-4-ylbenzoic acid** (Entry 12, Low Yield) *(Steric hindrance due to additional phenyl ring)*

**Underlying Physico-Chemical Explanation:**

- Nitrogen atoms in heterocycles can act as additional coordination sites with metal centers. Direct attachment ensures optimal positioning for coordination, enhancing catalytic activity.

---

### **Rule 5: Modifiers with Aliphatic Thiol Groups Yield High**

*Modifiers containing aliphatic thiol (-SH) groups along with a carboxylic acid result in **high yield**.*

**Example Modifier:**

- **3-Sulfanylpropanoic acid** (Entry 18, High Yield)

**Counterexample:**

- **4-Sulfanylbenzoic acid** (Entry 10, Low Yield) *(Aromatic thiol group may lead to catalyst poisoning)*

**Underlying Physico-Chemical Explanation:**

- Aliphatic thiols can form favorable interactions with metal centers without causing deactivation. Aromatic thiols may bind too strongly or interfere with the catalyst's active sites.

---

### **Rule 6: Modifiers with Long Aliphatic Chains Linking Aromatic Rings Yield High**

*Modifiers featuring aromatic rings connected to carboxylic acids through aliphatic chains of four or more carbons result in **high yield**.*

**Example Modifiers:**

- **5-(4-Hydroxyphenyl)pentanoic acid** (Entry 7, High Yield)
- **4-Pyridin-4-ylbutanoic acid** (Entry 25, High Yield)

**Counterexample:**

- **3-(4-Hydroxyphenyl)propanoic acid** (Entry 31, Low Yield) *(Shorter chain length)*

**Underlying Physico-Chemical Explanation:**

- Longer aliphatic linkers reduce steric hindrance, allowing better interaction and flexibility between the modifier and the catalyst's active sites.

---

### **Rule 7: Modifiers with Multiple Hydroxyl Groups on Aliphatic Chains Yield High**

*Modifiers with aliphatic chains bearing multiple hydroxyl groups in addition to the carboxylic acid result in **high yield**.*

**Example Modifiers:**

- **(2R,3S,4R,5R)-2,3,4,5,6-Pentahydroxyhexanoic acid** (Gluconic Acid, Entry 9, High Yield)
- **2-[[1,3-Dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid** (Entry 6, High Yield)

**Counterexample:**

- **7-Hydroxyheptanoic acid** (Entry 30, Low Yield) *(Single terminal hydroxyl group)*

**Underlying Physico-Chemical Explanation:**

- Multiple hydroxyl groups enhance hydrogen bonding and solubility, improving the modifier's interaction with the catalyst framework.

---

### **Rule 8: Modifiers with Electron-Withdrawing Groups Adjacent to Carboxylic Acid Yield Low**

*Modifiers where strong electron-withdrawing groups (e.g., aldehyde, ketone, trifluoroacetyl) are adjacent to the carboxylic acid result in **low yield**.*

**Example Modifiers:**

- **4-Formylbenzoic acid** (Entry 20, Low Yield)
- **4-Oxoheptanedioic acid** (Entry 28, Low Yield)
- **4-[(2,2,2-Trifluoroacetyl)amino]butanoic acid** (Entry 29, Low Yield)

**Underlying Physico-Chemical Explanation:**

- Electron-withdrawing groups decrease the electron density of the carboxylate, diminishing its ability to coordinate with metal centers. They may also participate in side reactions, reducing catalyst efficiency.

---

### **Rule 9: Modifiers with Polyether Chains Yield Low**

*Modifiers that contain polyether chains (multiple ether linkages) result in **low yield**.*

**Example Modifiers:**

- **2-[2-(2-Methoxyethoxy)ethoxy]acetic acid** (Entry 11, Low Yield)
- **3-[2-(2-Aminoethoxy)ethoxy]propanoic acid** (Entry 33, Low Yield)

**Underlying Physico-Chemical Explanation:**

- Polyether chains introduce flexibility and electron-rich oxygens that may interfere with metal coordination or catalyst structure, leading to decreased activity.

---

### **Rule 10: Modifiers with Bulky Aromatic Substituents Adjacent to Carboxylic Acid Yield Low**

*Modifiers where bulky aromatic groups are directly adjacent to the carboxylic acid group result in **low yield**.*

**Example Modifiers:**

- **(2S)-2-Amino-3-phenylpropanoic acid** (Phenylalanine, Entry 13, Low Yield)
- **4-Pyridin-4-ylbenzoic acid** (Entry 12, Low Yield)

**Underlying Physico-Chemical Explanation:**

- Bulky groups near the carboxylate can cause steric hindrance, impeding effective coordination with metal centers in the catalyst.

---

### **Rule 11: Modifiers with Perfluoroalkyl Chains Yield Low**

*Modifiers possessing perfluoroalkyl chains result in **low yield**.*

**Example Modifier:**

- **2,2,3,3,4,4,5,5,5-Nonafluoropentanoic acid** (Entry 14, Low Yield)

**Underlying Physico-Chemical Explanation:**

- Perfluoroalkyl groups are highly electron-withdrawing and hydrophobic, which can reduce solubility and hinder interactions with the catalyst's active sites.

---

### **Rule 12: Modifiers with Conjugated Carbonyl Systems Yield High**

*Modifiers containing conjugated carbonyl systems or fused aromatic rings with a carboxylic acid result in **high yield**.*

**Example Modifiers:**

- **1,3-Dioxo-2-benzofuran-5-carboxylic acid** (Entry 17, High Yield)
- **2-Oxo-1H-pyridine-4-carboxylic acid** (Entry 8, High Yield)

**Underlying Physico-Chemical Explanation:**

- Conjugated systems can delocalize electron density, enhancing coordination with metal centers and facilitating electron transfer processes in catalysis.

---

### **Rule 13: Modifiers with Free Amino Groups on Aliphatic Chains Yield High**

*Modifiers with saturated aliphatic chains containing free amino groups result in **high yield**.*

**Example Modifier:**

- **5-Aminopentanoic acid** (Entry 3, High Yield)

**Counterexample:**

- **(2S)-6-Acetamido-2-aminohexanoic acid** (Entry 34, Low Yield) *(Amide linkage reduces availability of amino group for coordination)*

**Underlying Physico-Chemical Explanation:**

- Free amino groups can coordinate with metal centers, enhancing the catalyst's performance. Amide groups are less effective due to resonance stabilization and reduced lone pair availability.

---

### **Rule 14: Modifiers with Indole or Fused Nitrogen Heterocycles Yield High**

*Modifiers containing indole rings or fused nitrogen-containing heterocycles result in **high yield**.*

**Example Modifier:**

- **(2R)-2-Amino-3-(1H-indol-3-yl)propanoic acid** (Tryptophan, Entry 15, High Yield)

**Underlying Physico-Chemical Explanation:**

- Fused heterocycles provide extended π-systems and additional coordination sites, enhancing interaction with the catalyst's metal centers and improving catalytic activity.

---

### **Rule 15: Modifiers with Reactive Aldehyde or Ketone Groups Yield Low**

*Modifiers containing reactive functional groups such as aldehydes or ketones that may interfere with the catalyst result in **low yield**.*

**Example Modifiers:**

- **5-Formyl-2-hydroxybenzoic acid** (Entry 19, Low Yield)
- **4-[(2,2,2-Trifluoroacetyl)amino]butanoic acid** (Entry 29, Low Yield)

**Underlying Physico-Chemical Explanation:**

- Reactive groups can undergo side reactions or bind irreversibly to metal centers, leading to catalyst deactivation and reduced yields.

---

**End of Rules**

---

These rules illustrate how specific combinations of functional groups and structural features in the molecular modifiers influence the yield of the radical-mediated remote δ-C(sp³)–H bond functionalization reaction. By understanding these relationships and the underlying physico-chemical principles, researchers can design or select modifiers that enhance catalytic performance and optimize reaction outcomes.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,1,0,0
0,1,0,0,0,0,1,0,0,0,0,0,1,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0
0,1,0,0,0,0,1,0,0,0,0,0,1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,1,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
0,0,0,0,0,1,1,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,1,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,1,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,1,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
0,0,0,0,0,1,1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,1,0,0

---------------------------------------------------------------


    Train Accuracy: 0.7428571428571429; Test Accuracy: 1.0
    Train Support: 0.09523809523809523; Test Support: 0.0
    Train Confidence: 0.7056878306878307; Test Confidence: 0.4166666666666667
    Train Lift: 1.4018246187363834; Test Lift: NONE
    Train Leverage: 0.013469387755102043; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    # Dicarboxylic acid (two -COOH groups)
    dicarboxylic_acid = '[#6][CX3](=O)[O][#6]*[CX3](=O)[O]'
    # Hydroxyl group (-OH)
    hydroxyl_group = '[OX2H]'
    # Amino group (-NH2)
    amino_group = '[NX3H2]'
    # Thiol group (-SH)
    thiol_group = '[SX2H]'
    # Ether linkage (-O-)
    ether_linkage = '[#6][OX2][#6]'
    # Pyridine ring
    pyridine_ring = 'n1ccccc1'
    # Aromatic ring
    aromatic_ring = 'c1ccccc1'
    # Electron-donating groups (EDGs)
    edg = ['[OX2H]', '[NX3H2]', '[NX3H1][#6]']  # Hydroxyl and amino groups
    # Electron-withdrawing groups (EWGs) adjacent to carboxylic acid
    ewg_adjacent = ['[CX3](=O)[CX3H]', '[CX3](=O)[CX3]']  # Aldehyde or ketone adjacent to COOH
    # Polyether chain
    polyether_chain = '[#6][OX2][#6][OX2][#6]'
    # Perfluoroalkyl chain
    perfluoroalkyl_chain = '[CX4]([F])([F])([F])'
    # Aldehyde group
    aldehyde_group = '[CX3H1](=O)[#6]'
    # Ketone group
    ketone_group = '[#6][CX3](=O)[#6]'
    # Indole ring
    indole_ring = 'c1ccc2c(c1)[nH]c3c2cccc3'
    
    # Initialize the rules
    rules = [
        {
            'number': 1,
            'description': 'Linear Aliphatic Carboxylic Acids (6–8 Carbons) Without Terminal Polar Groups Yield High',
            'patterns': [
                carboxylic_acid  # Carboxylic acid group
            ],
            'exclude_patterns': [
                aromatic_ring  # Exclude aromatic rings
            ],
            'additional_conditions': 'rule1_conditions',
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Aliphatic Dicarboxylic Acids Without Additional Carbonyl Groups Yield High',
            'patterns': [
                carboxylic_acid  # Carboxylic acid group
            ],
            'additional_conditions': 'rule2_conditions',
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Aromatic Carboxylic Acids with Electron-Donating Groups at Para Position Yield High',
            'patterns': [
                carboxylic_acid,  # Carboxylic acid group
                aromatic_ring  # Aromatic ring
            ],
            'additional_conditions': 'rule3_conditions',
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers with Nitrogen Heterocycles Directly Attached to Carboxylic Acid Yield High',
            'patterns': [
                carboxylic_acid,
                pyridine_ring  # Nitrogen heterocycles
            ],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers with Aliphatic Thiol Groups Yield High',
            'patterns': [
                carboxylic_acid,
                thiol_group  # Aliphatic thiol group
            ],
            'exclude_patterns': [
                aromatic_ring  # Exclude aromatic thiols
            ],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers with Long Aliphatic Chains Linking Aromatic Rings Yield High',
            'patterns': [
                carboxylic_acid,
                aromatic_ring  # Aromatic ring
            ],
            'additional_conditions': 'rule6_conditions',
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'Modifiers with Multiple Hydroxyl Groups on Aliphatic Chains Yield High',
            'patterns': [
                carboxylic_acid,
                hydroxyl_group  # Hydroxyl group
            ],
            'additional_conditions': 'rule7_conditions',
            'prediction': 1
        },
        {
            'number': 8,
            'description': 'Modifiers with Electron-Withdrawing Groups Adjacent to Carboxylic Acid Yield Low',
            'patterns': [
                carboxylic_acid,
                ewg_adjacent[0],  # Aldehyde adjacent to COOH
                ewg_adjacent[1]   # Ketone adjacent to COOH
            ],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers with Polyether Chains Yield Low',
            'patterns': [
                carboxylic_acid,
                polyether_chain  # Polyether chain
            ],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers with Bulky Aromatic Substituents Adjacent to Carboxylic Acid Yield Low',
            'patterns': [
                carboxylic_acid,
                aromatic_ring  # Aromatic ring directly attached to COOH
            ],
            'additional_conditions': 'rule10_conditions',
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Modifiers with Perfluoroalkyl Chains Yield Low',
            'patterns': [
                carboxylic_acid,
                perfluoroalkyl_chain
            ],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'Modifiers with Conjugated Carbonyl Systems Yield High',
            'patterns': [
                carboxylic_acid,
                '[#6]=[#6]-[#6](=O)-[#6]'  # Conjugated carbonyl systems
            ],
            'prediction': 1
        },
        {
            'number': 13,
            'description': 'Modifiers with Free Amino Groups on Aliphatic Chains Yield High',
            'patterns': [
                carboxylic_acid,
                amino_group
            ],
            'exclude_patterns': [
                aromatic_ring  # Exclude aromatic amines
            ],
            'prediction': 1
        },
        {
            'number': 14,
            'description': 'Modifiers with Indole or Fused Nitrogen Heterocycles Yield High',
            'patterns': [
                carboxylic_acid,
                indole_ring
            ],
            'prediction': 1
        },
        {
            'number': 15,
            'description': 'Modifiers with Reactive Aldehyde or Ketone Groups Yield Low',
            'patterns': [
                carboxylic_acid,
                aldehyde_group,
                ketone_group
            ],
            'prediction': -1
        }
    ]

    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for smarts in rule.get('patterns', []):
            compiled_patterns.append(Chem.MolFromSmarts(smarts))
        rule['compiled_patterns'] = compiled_patterns

        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_exclude_patterns = []
            for smarts in rule['exclude_patterns']:
                compiled_exclude_patterns.append(Chem.MolFromSmarts(smarts))
            rule['compiled_exclude_patterns'] = compiled_exclude_patterns

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for pat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for pat in rule['compiled_patterns']:
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Apply additional conditions if any
                if 'additional_conditions' in rule:
                    condition_name = rule['additional_conditions']
                    if condition_name == 'rule1_conditions':
                        if not rule1_conditions(mol):
                            match = False
                    elif condition_name == 'rule2_conditions':
                        if not rule2_conditions(mol):
                            match = False
                    elif condition_name == 'rule3_conditions':
                        if not rule3_conditions(mol):
                            match = False
                    elif condition_name == 'rule6_conditions':
                        if not rule6_conditions(mol):
                            match = False
                    elif condition_name == 'rule7_conditions':
                        if not rule7_conditions(mol):
                            match = False
                    elif condition_name == 'rule10_conditions':
                        if not rule10_conditions(mol):
                            match = False
                    if not match:
                        row.append(0)
                        continue
                # If all checks passed
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

# Define additional condition functions

def rule1_conditions(mol):
    # Check for linear aliphatic chain with 6-8 carbons without terminal polar groups
    try:
        carboxylic_acid = Chem.MolFromSmarts('[CX3](=O)[OX2H1]')
        matches = mol.GetSubstructMatches(carboxylic_acid)
        if not matches:
            return False
        # Assume only one carboxylic acid group for simplicity
        match = matches[0]
        carboxy_carbon = match[0]
        # Use BFS to find the longest carbon chain
        from collections import deque
        visited = set()
        queue = deque([(carboxy_carbon, 0)])
        max_chain_length = 0
        while queue:
            atom_idx, length = queue.popleft()
            if atom_idx in visited:
                continue
            visited.add(atom_idx)
            atom = mol.GetAtomWithIdx(atom_idx)
            if atom.GetAtomicNum() != 6:
                continue
            max_chain_length = max(max_chain_length, length)
            for neighbor in atom.GetNeighbors():
                neighbor_idx = neighbor.GetIdx()
                if neighbor_idx not in visited:
                    queue.append((neighbor_idx, length + 1))
        if 6 <= max_chain_length <= 8:
            # Check for terminal polar groups
            for atom in mol.GetAtoms():
                if atom.GetAtomicNum() in [7, 8]:
                    if atom.GetDegree() == 1:
                        return False
            return True
        else:
            return False
    except:
        return False

def rule2_conditions(mol):
    # Check for aliphatic dicarboxylic acids without additional carbonyl groups
    try:
        carboxylic_acid = Chem.MolFromSmarts('[CX3](=O)[OX2H1]')
        matches = mol.GetSubstructMatches(carboxylic_acid)
        if len(matches) != 2:
            return False
        # Check for additional carbonyl groups
        carbonyl_group = Chem.MolFromSmarts('[CX3](=O)[#6]')
        carbonyl_matches = mol.GetSubstructMatches(carbonyl_group)
        if len(carbonyl_matches) > 2:
            return False
        return True
    except:
        return False

def rule3_conditions(mol):
    # Check for electron-donating groups at para position on aromatic ring
    try:
        # Identify aromatic rings with carboxylic acid
        aro_cooh = Chem.MolFromSmarts('c[c](=O)O')
        aro_matches = mol.GetSubstructMatches(aro_cooh)
        if not aro_matches:
            return False
        # For each match, check for EDG at para position
        for match in aro_matches:
            ring_info = mol.GetRingInfo()
            atom_idx = match[0]
            rings = ring_info.AtomRings()
            for ring in rings:
                if atom_idx in ring and len(ring) == 6:
                    idx_in_ring = ring.index(atom_idx)
                    para_idx = ring[(idx_in_ring + 3) % 6]
                    para_atom = mol.GetAtomWithIdx(para_idx)
                    for neighbor in para_atom.GetNeighbors():
                        if neighbor.GetAtomicNum() in [7, 8]:
                            return True
        return False
    except:
        return False

def rule6_conditions(mol):
    # Check for aliphatic chain of four or more carbons linking aromatic ring and carboxylic acid
    try:
        # Find paths between aromatic ring and carboxylic acid
        aromatic = Chem.MolFromSmarts('c')
        carboxylic_acid = Chem.MolFromSmarts('[CX3](=O)[OX2H1]')
        aro_matches = mol.GetSubstructMatches(aromatic)
        cooh_matches = mol.GetSubstructMatches(carboxylic_acid)
        if not aro_matches or not cooh_matches:
            return False
        for aro_atom in aro_matches:
            for cooh_atom in cooh_matches:
                path = Chem.rdmolops.GetShortestPath(mol, aro_atom[0], cooh_atom[0])
                if path and len(path) >= 6:  # 4 carbons + 2 functional groups
                    return True
        return False
    except:
        return False

def rule7_conditions(mol):
    # Check for multiple hydroxyl groups on aliphatic chains
    try:
        hydroxyl_group = Chem.MolFromSmarts('[OX2H]')
        hydroxyl_matches = mol.GetSubstructMatches(hydroxyl_group)
        if len(hydroxyl_matches) >= 2:
            return True
        else:
            return False
    except:
        return False

def rule10_conditions(mol):
    # Check for bulky aromatic substituents adjacent to carboxylic acid
    try:
        aro_cooh = Chem.MolFromSmarts('c[C](=O)O')
        matches = mol.GetSubstructMatches(aro_cooh)
        if matches:
            return True
        else:
            return False
    except:
        return False

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

---

**Rule 1:** *Modifiers that are aliphatic α-amino acids with a free amino group adjacent to the carboxyl group yield **high yield***.

- **Examples:**
  - (2S)-2-Aminopentanedioic acid (Glutamic acid)
  - (2S)-2-Aminobutanedioic acid (Aspartic acid)
  - 5-Aminopentanoic acid

- **Counterexamples:**
  - 7-Aminoheptanoic acid *(Amino group not adjacent to carboxyl group)*
  - (2S)-6-Acetamido-2-aminohexanoic acid *(Amide group reduces amino availability)*

---

**Rule 2:** *Modifiers where the carboxyl group is directly attached to a nitrogen-containing heterocycle yield **high yield***.

- **Examples:**
  - Pyridine-3-carboxylic acid (Niacin)
  - 1H-Pyrazole-4-carboxylic acid
  - 2-Oxo-1H-pyridine-4-carboxylic acid

- **Counterexample:**
  - 4-Pyridin-4-ylbenzoic acid *(Nitrogen heterocycle not directly attached)*

---

**Rule 3:** *Modifiers containing multiple hydroxyl groups on an aliphatic chain yield **high yield***.

- **Examples:**
  - (2R,3S,4R,5R)-2,3,4,5,6-Pentahydroxyhexanoic acid (Gluconic acid)
  - 2-[[1,3-Dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid

- **Counterexamples:**
  - 7-Hydroxyheptanoic acid *(Single hydroxyl group)*
  - 3-(4-Hydroxyphenyl)propanoic acid *(Hydroxyl on aromatic ring)*

---

**Rule 4:** *Modifiers with **aliphatic thiol groups** yield **high yield**; modifiers with **aromatic thiol groups** yield **low yield***.

- **Example (High Yield):**
  - 3-Sulfanylpropanoic acid

- **Example (Low Yield):**
  - 4-Sulfanylbenzoic acid

---

**Rule 5:** *Modifiers containing reactive **aldehyde** or **ketone** groups yield **low yield***.

- **Examples:**
  - 4-Formylbenzoic acid
  - 5-Formyl-2-hydroxybenzoic acid
  - 4-Oxoheptanedioic acid

---

**Rule 6:** *Modifiers with **perfluoroalkyl chains** yield **low yield***.

- **Example:**
  - 2,2,3,3,4,4,5,5,5-Nonafluoropentanoic acid

---

**Rule 7:** *Modifiers containing **amide functional groups** yield **low yield***.

- **Examples:**
  - (2S)-6-Acetamido-2-aminohexanoic acid
  - 2-[(4-Hydroxybenzoyl)amino]acetic acid

---

**Rule 8:** *Modifiers containing **polyether chains** (multiple ether linkages) yield **low yield***.

- **Examples:**
  - 2-[2-(2-Methoxyethoxy)ethoxy]acetic acid
  - 3-[2-(2-Aminoethoxy)ethoxy]propanoic acid

---

**Rule 9:** *Modifiers with **aromatic rings connected via an aliphatic chain of four or more carbons** to the carboxyl group yield **high yield***.

- **Examples:**
  - 5-(4-Hydroxyphenyl)pentanoic acid
  - 4-Pyridin-4-ylbutanoic acid

- **Counterexample:**
  - 3-(4-Hydroxyphenyl)propanoic acid *(Shorter aliphatic chain)*

---

**Rule 10:** *Modifiers with **bulky aromatic substituents directly adjacent** to the carboxyl group yield **low yield***.

- **Examples:**
  - (2S)-2-Amino-3-phenylpropanoic acid (Phenylalanine)
  - 4-Pyridin-4-ylbenzoic acid

- **Counterexample (High Yield):**
  - (2R)-2-Amino-3-(1H-indol-3-yl)propanoic acid (Tryptophan) *(Additional coordination with indole nitrogen)*

---

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10
0,0,0,0,-1,0,0,0,0,0
1,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
1,0,0,0,-1,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0
0,0,1,0,-1,0,0,0,0,0
0,0,0,0,-1,0,0,0,1,0
0,1,0,0,0,0,0,0,0,0
0,0,1,0,-1,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
1,0,0,0,-1,0,0,0,0,0
0,0,0,0,-1,-1,0,0,0,0
1,0,0,0,-1,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,1,-1,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,-1,0,0,0
0,0,0,0,-1,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0
0,0,0,0,-1,0,-1,0,0,0
0,0,0,0,-1,0,0,0,0,0
0,0,0,0,-1,-1,-1,0,0,0
0,0,0,0,-1,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0
1,0,0,0,-1,0,-1,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.8; Test Accuracy: 1.0
    Train Support: 0.11071428571428571; Test Support: 0.125
    Train Confidence: 0.895; Test Confidence: 0.5625
    Train Lift: 1.7840277777777778; Test Lift: NONE
    Train Leverage: 0.033163265306122444; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Import necessary RDKit functions
    from rdkit import Chem
    
    # Define SMARTS patterns for the rules
    # Rule 1: Aliphatic α-amino acids with a free amino group adjacent to the carboxyl group
    rule1_pattern = Chem.MolFromSmarts('[NX3H2][CX4][CX3](=O)[OX2H]')
    
    # Rule 2: Carboxyl group directly attached to a nitrogen-containing heterocycle
    rule2_pattern = Chem.MolFromSmarts('[cR][CX3](=O)[OX2H]')
    
    # Rule 3: Multiple hydroxyl groups on an aliphatic chain (at least two)
    rule3_pattern = Chem.MolFromSmarts('[CX4][OX2H]')  # Hydroxyl group on aliphatic carbon
    
    # Rule 4a: Aliphatic thiol groups yield high yield
    rule4a_pattern = Chem.MolFromSmarts('[CX4][SX2H]')
    # Rule 4b: Aromatic thiol groups yield low yield
    rule4b_pattern = Chem.MolFromSmarts('[c][SX2H]')
    
    # Rule 5: Reactive aldehyde or ketone groups yield low yield
    rule5_patterns = [
        Chem.MolFromSmarts('[CX3H](=O)[#6]'),  # Aldehyde
        Chem.MolFromSmarts('[CX3](=O)[CX4]')   # Ketone
    ]
    
    # Rule 6: Perfluoroalkyl chains yield low yield
    rule6_pattern = Chem.MolFromSmarts('[CX4]([F])([F])[F]')  # Carbon with three fluorines
    
    # Rule 7: Amide functional groups yield low yield
    rule7_pattern = Chem.MolFromSmarts('[CX3](=O)[NX3]')
    
    # Rule 8: Polyether chains (multiple ether linkages) yield low yield
    rule8_pattern = Chem.MolFromSmarts('[OX2][CX4][OX2][CX4][OX2]')
    
    # Rule 9: Aromatic rings connected via an aliphatic chain of four or more carbons to the carboxyl group yield high yield
    rule9_pattern = Chem.MolFromSmarts('[c][CX4][CX4][CX4][CX4][CX3](=O)[OX2H]')
    
    # Rule 10: Bulky aromatic substituents directly adjacent to the carboxyl group yield low yield
    rule10_pattern = Chem.MolFromSmarts('[c][CX4][CX3](=O)[OX2H]')
    
    # Prepare list of rules with their patterns and predictions
    rules = [
        {'number': 1, 'pattern': rule1_pattern, 'prediction': 1},
        {'number': 2, 'pattern': rule2_pattern, 'prediction': 1},
        {'number': 3, 'pattern': rule3_pattern, 'count_threshold': 2, 'prediction': 1},
        {'number': 4, 'pattern_high': rule4a_pattern, 'pattern_low': rule4b_pattern, 'prediction_high': 1, 'prediction_low': -1},
        {'number': 5, 'patterns': rule5_patterns, 'prediction': -1},
        {'number': 6, 'pattern': rule6_pattern, 'prediction': -1},
        {'number': 7, 'pattern': rule7_pattern, 'prediction': -1},
        {'number': 8, 'pattern': rule8_pattern, 'prediction': -1},
        {'number': 9, 'pattern': rule9_pattern, 'prediction': 1},
        {'number': 10, 'pattern': rule10_pattern, 'prediction': -1}
    ]
    
    # Initialize the result list
    results = []
    
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                if rule['number'] == 2:
                    # Special handling for Rule 2
                    matches = mol.GetSubstructMatches(rule['pattern'])
                    match_found = False
                    for match in matches:
                        c_atom_idx = match[0]
                        c_atom = mol.GetAtomWithIdx(c_atom_idx)
                        ring_info = mol.GetRingInfo()
                        if ring_info.IsAtomInRingOfSize(c_atom_idx, 5) or ring_info.IsAtomInRingOfSize(c_atom_idx, 6):
                            # Get the ring atoms
                            ring_atoms = [set(ring) for ring in ring_info.AtomRings() if c_atom_idx in ring]
                            for ring in ring_atoms:
                                # Check if the ring contains nitrogen
                                for atom_idx in ring:
                                    atom = mol.GetAtomWithIdx(atom_idx)
                                    if atom.GetAtomicNum() == 7:
                                        match_found = True
                                        break
                                if match_found:
                                    break
                        if match_found:
                            break
                    row.append(rule['prediction'] if match_found else 0)
                elif rule['number'] == 3:
                    # Rule 3: Count the number of hydroxyl groups on aliphatic carbons
                    matches = mol.GetSubstructMatches(rule['pattern'])
                    count = len(matches)
                    row.append(rule['prediction'] if count >= rule['count_threshold'] else 0)
                elif rule['number'] == 4:
                    # Rule 4: Check for aliphatic or aromatic thiol groups
                    match_high = mol.HasSubstructMatch(rule['pattern_high'])
                    match_low = mol.HasSubstructMatch(rule['pattern_low'])
                    if match_high:
                        row.append(rule['prediction_high'])
                    elif match_low:
                        row.append(rule['prediction_low'])
                    else:
                        row.append(0)
                elif rule['number'] == 5:
                    # Rule 5: Check for aldehyde or ketone groups
                    match_found = False
                    for pattern in rule['patterns']:
                        if mol.HasSubstructMatch(pattern):
                            match_found = True
                            break
                    row.append(rule['prediction'] if match_found else 0)
                else:
                    # General case
                    if mol.HasSubstructMatch(rule['pattern']):
                        row.append(rule['prediction'])
                    else:
                        row.append(0)
            except Exception:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

---

**Rule 1:** *Modifiers that are **aliphatic α-amino acids** with a free amino group adjacent to the carboxyl group yield **high yield\***.

- **Examples:**
  - (2S)-2-Aminopentanedioic acid (Glutamic acid)
  - (2S)-2-Aminobutanedioic acid (Aspartic acid)
  - 5-Aminopentanoic acid

- **Counterexamples:**
  - 7-Aminoheptanoic acid *(Amino group not adjacent to carboxyl)*
  - (2S)-6-Acetamido-2-aminohexanoic acid *(Amide group reduces amino availability)*

---

**Rule 2:** *Modifiers where the carboxyl group is directly attached to a **nitrogen-containing heterocycle** yield **high yield\***.

- **Examples:**
  - Pyridine-3-carboxylic acid (Niacin)
  - 1H-Pyrazole-4-carboxylic acid
  - 2-Oxo-1H-pyridine-4-carboxylic acid

- **Counterexample:**
  - 4-Pyridin-4-ylbenzoic acid *(Heterocycle not directly attached to carboxyl)*

---

**Rule 3:** *Modifiers with **aliphatic chains containing multiple hydroxyl groups** yield **high yield\***.

- **Examples:**
  - (2R,3S,4R,5R)-2,3,4,5,6-Pentahydroxyhexanoic acid (Gluconic acid)
  - 2-[[1,3-Dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid

- **Counterexamples:**
  - 7-Hydroxyheptanoic acid *(Single hydroxyl group)*
  - 3-(4-Hydroxyphenyl)propanoic acid *(Hydroxyl on aromatic ring)*

---

**Rule 4:** *Modifiers containing **aliphatic thiol groups** yield **high yield\***; modifiers with **aromatic thiol groups** yield **low yield\***.

- **Example (High Yield):**
  - 3-Sulfanylpropanoic acid

- **Example (Low Yield):**
  - 4-Sulfanylbenzoic acid

---

**Rule 5:** *Modifiers with **reactive aldehyde or ketone groups** yield **low yield\***.

- **Examples:**
  - 4-Formylbenzoic acid
  - 5-Formyl-2-hydroxybenzoic acid
  - 4-Oxoheptanedioic acid

---

**Rule 6:** *Modifiers with **perfluoroalkyl chains** yield **low yield\***.

- **Example:**
  - 2,2,3,3,4,4,5,5,5-Nonafluoropentanoic acid

---

**Rule 7:** *Modifiers containing **amide functional groups** yield **low yield\***.

- **Examples:**
  - (2S)-6-Acetamido-2-aminohexanoic acid
  - 2-[(4-Hydroxybenzoyl)amino]acetic acid

---

**Rule 8:** *Modifiers containing **polyether chains** (multiple ether linkages) yield **low yield\***.

- **Examples:**
  - 2-[2-(2-Methoxyethoxy)ethoxy]acetic acid
  - 3-[2-(2-Aminoethoxy)ethoxy]propanoic acid

---

**Rule 9:** *Modifiers with **aromatic rings connected via an aliphatic chain of four or more carbons** to the carboxyl group yield **high yield\***.

- **Examples:**
  - 5-(4-Hydroxyphenyl)pentanoic acid
  - 4-Pyridin-4-ylbutanoic acid

- **Counterexample:**
  - 3-(4-Hydroxyphenyl)propanoic acid *(Shorter aliphatic chain, leads to low yield)*

---

**Rule 10:** *Modifiers with **bulky aromatic substituents directly adjacent** to the carboxyl group yield **low yield\***.

- **Examples:**
  - (2S)-2-Amino-3-phenylpropanoic acid (Phenylalanine)
  - 4-Pyridin-4-ylbenzoic acid

- **Counterexample (High Yield):**
  - 4-Aminobenzoic acid *(Amino group may enhance coordination with catalyst)*

---

**Rule 11:** *Modifiers containing **electron-withdrawing groups** on the aromatic ring yield **high yield\***.

- **Example:**
  - 4-Nitrobenzoic acid

- **Counterexample:**
  - 4-Methylbenzoic acid *(Electron-donating group, leads to low yield)*

---

**Rule 12:** *Modifiers with **aromatic carboxylic acids** yield **variable outcomes** depending on substituents.*

- **High Yield Examples:**
  - 4-Aminobenzoic acid
  - 4-Nitrobenzoic acid

- **Low Yield Examples:**
  - 4-Methylbenzoic acid
  - 4-Formylbenzoic acid

---

**Rule 13:** *Modifiers containing **bulky or sterically hindered groups** distant from the carboxyl group can yield **high yield\*** if they do not interfere with catalyst access.

- **Examples:**
  - (2R)-2-Amino-3-(1H-indol-3-yl)propanoic acid (Tryptophan)
  - 1,3-Dioxo-2-benzofuran-5-carboxylic acid

---

**Rule 14:** *Modifiers with **long aliphatic chains** yield **high yield\***.

- **Example:**
  - Octanoic acid

- **Counterexample:**
  - 7-Hydroxyheptanoic acid *(Hydroxyl group may interfere with catalyst)*

---

**Rule 15:** *Modifiers containing **substituted aromatic rings with electron-donating groups** directly attached yield **low yield\***.

- **Example:**
  - 4-Methylbenzoic acid

- **Counterexample (High Yield):**
  - 4-Nitrobenzoic acid *(Electron-withdrawing group)*

---

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 4.1,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,-1,0,0,0,0,0,0,0,1,1,0
1,0,1,0,0,-1,0,0,0,0,0,0,0,1,1,0
0,0,0,0,0,-1,0,0,0,0,-1,0,0,1,0,0
1,0,1,0,0,-1,0,0,0,0,0,0,0,1,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,0,1,1,0
0,0,0,0,0,-1,0,0,0,0,-1,0,0,1,0,-1
0,0,0,0,0,-1,0,0,0,0,0,0,0,1,1,0
0,0,1,0,0,-1,0,0,0,0,0,0,0,1,0,0
0,0,1,0,0,-1,0,0,0,1,0,0,0,1,1,0
0,1,0,0,0,-1,0,0,0,0,-1,0,0,1,0,0
0,0,1,0,0,-1,0,0,0,0,0,0,0,1,1,0
0,0,0,0,-1,-1,0,0,0,0,-1,0,0,1,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,0,1,0,0
0,1,0,0,0,-1,0,0,0,0,-1,0,0,1,0,0
1,0,0,0,0,-1,0,0,0,0,0,0,0,1,0,-1
0,0,0,0,0,-1,0,0,0,0,0,0,0,1,1,0
1,1,0,0,0,-1,0,0,0,0,0,0,0,1,0,-1
0,1,0,0,0,-1,0,0,0,0,-1,0,0,1,0,0
0,0,0,0,0,-1,0,0,0,0,-1,0,0,1,0,0
0,0,0,1,0,-1,0,0,0,0,0,0,0,1,0,0
0,0,1,0,0,-1,0,0,0,0,-1,0,0,1,0,0
0,0,0,0,0,-1,0,0,0,0,-1,0,0,1,0,0
0,0,0,0,0,-1,0,0,0,0,-1,0,0,1,0,0
0,1,0,0,0,-1,0,0,0,0,-1,0,0,1,0,0
0,0,0,0,0,-1,0,0,0,0,-1,0,0,1,0,0
0,0,0,0,0,-1,0,-1,0,0,0,0,0,1,0,0
0,1,0,0,0,-1,0,0,0,0,0,0,0,1,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,0,1,0,0
0,0,1,0,0,-1,0,-1,0,0,0,0,0,1,0,-1
0,0,1,0,0,-1,0,0,0,0,0,0,0,1,1,0
0,0,0,0,0,-1,0,-1,0,0,0,0,0,1,0,0
0,0,1,0,0,-1,0,0,0,0,0,0,0,1,1,0
0,0,1,0,0,-1,0,0,0,0,0,0,0,1,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,0,1,1,0
0,0,0,0,0,-1,0,0,0,0,0,0,0,1,0,0
1,0,0,0,0,-1,0,-1,0,0,0,0,0,1,1,0

---------------------------------------------------------------


    Train Accuracy: 0.6285714285714286; Test Accuracy: 0.0
    Train Support: 0.11428571428571428; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 2.0588235294117645; Test Lift: NONE
    Train Leverage: 0.05877551020408162; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    import pandas as pd
    from rdkit import Chem

    # Define SMARTS patterns for functional groups and structural features
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    primary_amine = '[NX3H2]'
    alpha_amino_acid = '[NX3H2][CX4H]([#6])[CX3](=O)[OX2H1]'
    nitrogen_heterocycle = '[n]'  # Any nitrogen atom in a ring
    hydroxyl_group = '[OX2H]'
    thiol_group = '[SX2H]'
    aromatic_thiol = 'c[SX2H]'
    aldehyde = '[CX3H1](=O)[#6]'
    ketone = '[CX3](=O)[#6]'
    perfluoroalkyl = '[CX4]([F,Cl,Br,I])[F,Cl,Br,I][F,Cl,Br,I]'
    amide = '[CX3](=O)[NX3]'
    ether_linkage = '[OD2]([#6])[#6]'
    polyether_chain = '([#6][OD2][#6]){2,}'  # Two or more ether linkages
    long_aliphatic_chain = '[C;!R][C;!R][C;!R][C;!R][C;!R]'  # Chain of 5 or more aliphatic carbons
    aromatic_ring = 'a1aaaaa1'
    aromatic_ring_adjacent_carboxyl = '[c][CX3](=O)[OX2H1]'
    electron_withdrawing_group = ['[CX3](=O)[OX2H1]', '[CX3](=O)[#6]', '[NX3](=O)=O', '[F,Cl,Br,I]', '[CX4]([F,Cl,Br,I])[F,Cl,Br,I][F,Cl,Br,I]']
    electron_donating_group = ['[OX2H]', '[OX2][#6]', '[NX3H2,NX3H1][#6]']

    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are aliphatic α-amino acids with a free amino group adjacent to the carboxyl group yield high yield.',
            'patterns': [alpha_amino_acid],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers where the carboxyl group is directly attached to a nitrogen-containing heterocycle yield high yield.',
            'patterns': [carboxylic_acid, '[#6][CX3](=O)[OX2H1]', '[n]'],
            'logic': 'AND',
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers with aliphatic chains containing multiple hydroxyl groups yield high yield.',
            'patterns': [carboxylic_acid, hydroxyl_group],
            'count_threshold': {hydroxyl_group: 2},
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers containing aliphatic thiol groups yield high yield; modifiers with aromatic thiol groups yield low yield.',
            'patterns': [thiol_group],
            'exclude_patterns': [aromatic_thiol],
            'prediction': 1
        },
        {
            'number': 4.1,
            'description': 'Modifiers containing aromatic thiol groups yield low yield.',
            'patterns': [aromatic_thiol],
            'prediction': -1
        },
        {
            'number': 5,
            'description': 'Modifiers with reactive aldehyde or ketone groups yield low yield.',
            'patterns': [aldehyde, ketone],
            'prediction': -1
        },
        {
            'number': 6,
            'description': 'Modifiers with perfluoroalkyl chains yield low yield.',
            'patterns': [perfluoroalkyl],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Modifiers containing amide functional groups yield low yield.',
            'patterns': [amide],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Modifiers containing polyether chains (multiple ether linkages) yield low yield.',
            'patterns': [polyether_chain],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers with aromatic rings connected via an aliphatic chain of four or more carbons to the carboxyl group yield high yield.',
            'patterns': [carboxylic_acid, aromatic_ring, long_aliphatic_chain],
            'logic': 'AND',
            'prediction': 1
        },
        {
            'number': 10,
            'description': 'Modifiers with bulky aromatic substituents directly adjacent to the carboxyl group yield low yield.',
            'patterns': [aromatic_ring_adjacent_carboxyl],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Modifiers containing electron-withdrawing groups on the aromatic ring yield high yield.',
            'patterns': electron_withdrawing_group + [aromatic_ring],
            'logic': 'AND',
            'prediction': 1
        },
        {
            'number': 12,
            'description': 'Modifiers with aromatic carboxylic acids yield variable outcomes depending on substituents.',
            'patterns': [aromatic_ring, carboxylic_acid],
            'prediction': 0
        },
        {
            'number': 13,
            'description': 'Modifiers containing bulky or sterically hindered groups distant from the carboxyl group can yield high yield if they do not interfere with catalyst access.',
            'patterns': [carboxylic_acid],
            'prediction': 1
        },
        {
            'number': 14,
            'description': 'Modifiers with long aliphatic chains yield high yield.',
            'patterns': [long_aliphatic_chain],
            'prediction': 1
        },
        {
            'number': 15,
            'description': 'Modifiers containing substituted aromatic rings with electron-donating groups directly attached yield low yield.',
            'patterns': electron_donating_group + [aromatic_ring],
            'logic': 'AND',
            'prediction': -1
        }
    ]

    # Compile SMARTS patterns
    for rule in rules:
        try:
            rule['compiled_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule['patterns']]
            if 'exclude_patterns' in rule:
                rule['compiled_exclude_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule['exclude_patterns']]
            if 'count_threshold' in rule:
                rule['compiled_counts'] = {Chem.MolFromSmarts(pat): threshold for pat, threshold in rule['count_threshold'].items()}
        except:
            pass  # Handle any errors in compiling patterns

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = False
                # Check exclude patterns if any
                if 'compiled_exclude_patterns' in rule:
                    for pat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    else:
                        match = True
                else:
                    match = True
                # Check required patterns
                if match:
                    logic = rule.get('logic', 'OR')
                    if logic == 'AND':
                        for pat in rule['compiled_patterns']:
                            if not mol.HasSubstructMatch(pat):
                                match = False
                                break
                    else:  # Default to OR logic
                        for pat in rule['compiled_patterns']:
                            if mol.HasSubstructMatch(pat):
                                match = True
                                break
                            else:
                                match = False
                    if match and 'compiled_counts' in rule:
                        for pat, threshold in rule['compiled_counts'].items():
                            matches = mol.GetSubstructMatches(pat)
                            if len(matches) < threshold:
                                match = False
                                break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except:
                row.append(0)
        results.append(row)

    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df
--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

---

**Rule 1:** *Modifiers that are **α-amino acids with side chains capable of metal coordination** (e.g., carboxyl groups, nitrogen-containing aromatics) yield **high yield\***. Modifiers that are α-amino acids with non-coordinating side chains yield **low yield\***.

- **High Yield Examples:**
  - **(2S)-2-Aminopentanedioic acid** *(Glutamic acid; side chain with carboxyl group)*
  - **(2S)-2-Aminobutanedioic acid** *(Aspartic acid; side chain with carboxyl group)*
  - **(2R)-2-Amino-3-(1H-indol-3-yl)propanoic acid** *(Tryptophan; side chain with indole ring containing nitrogen)*

- **Low Yield Counterexample:**
  - **(2S)-2-Amino-3-phenylpropanoic acid** *(Phenylalanine; side chain is a phenyl group, lacks metal-coordinating ability)*

---

**Rule 2:** *Modifiers where the **carboxyl group is directly attached to a nitrogen-containing heteroaromatic ring** yield **high yield\***.

- **High Yield Examples:**
  - **Pyridine-3-carboxylic acid** *(Niacin)*
  - **1H-Pyrazole-4-carboxylic acid**
  - **2-Oxo-1H-pyridine-4-carboxylic acid**

- **Low Yield Counterexample:**
  - **4-Pyridin-4-ylbenzoic acid** *(Pyridine ring not directly attached to carboxyl group)*

---

**Rule 3:** *Modifiers that are **aliphatic carboxylic acids with multiple hydroxyl groups** yield **high yield\***; those with single hydroxyl groups yield **low yield\***.

- **High Yield Examples:**
  - **(2R,3S,4R,5R)-2,3,4,5,6-Pentahydroxyhexanoic acid** *(Gluconic acid)*
  - **2-[[1,3-Dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid**

- **Low Yield Counterexample:**
  - **7-Hydroxyheptanoic acid** *(Single hydroxyl group)*

---

**Rule 4:** *Modifiers containing **aliphatic thiol (sulfhydryl) groups** yield **high yield\***; modifiers with **thiol groups on aromatic rings** yield **low yield\***.

- **High Yield Example:**
  - **3-Sulfanylpropanoic acid**

- **Low Yield Counterexample:**
  - **4-Sulfanylbenzoic acid**

---

**Rule 5:** *Modifiers that are **aromatic carboxylic acids with para-substituents capable of metal coordination** (e.g., amino, nitro groups) yield **high yield\***; those with non-coordinating substituents yield **low yield\***.

- **High Yield Examples:**
  - **4-Aminobenzoic acid**
  - **4-Nitrobenzoic acid**

- **Low Yield Counterexample:**
  - **4-Methylbenzoic acid** *(Methyl group is non-coordinating)*

---

**Rule 6:** *Modifiers with **long aliphatic chains (≥8 carbons) without interfering polar groups** yield **high yield\***; introducing polar groups reduces yield.

- **High Yield Example:**
  - **Octanoic acid**

- **Low Yield Counterexamples:**
  - **7-Aminoheptanoic acid** *(Terminal amino group introduces polarity)*
  - **7-Hydroxyheptanoic acid** *(Terminal hydroxyl group introduces polarity)*

---

**Rule 7:** *Modifiers with **aromatic rings connected via an aliphatic chain of four or more carbons** to the carboxyl group yield **high yield\***; shorter chains yield **low yield\***.

- **High Yield Examples:**
  - **5-(4-Hydroxyphenyl)pentanoic acid** *(Chain length of 5 carbons)*
  - **4-Pyridin-4-ylbutanoic acid** *(Chain length of 4 carbons)*

- **Low Yield Counterexample:**
  - **3-(4-Hydroxyphenyl)propanoic acid** *(Chain length of 3 carbons)*

---

**Rule 8:** *Modifiers with **reactive functional groups** (e.g., aldehyde, ketone, amide, perfluoroalkyl, polyether chains) yield **low yield\***.

- **Low Yield Examples:**
  - **4-Formylbenzoic acid** *(Aldehyde group)*
  - **4-Oxoheptanedioic acid** *(Ketone group)*
  - **(2S)-6-Acetamido-2-aminohexanoic acid** *(Amide group)*
  - **2,2,3,3,4,4,5,5,5-Nonafluoropentanoic acid** *(Perfluoroalkyl chain)*
  - **2-[2-(2-Methoxyethoxy)ethoxy]acetic acid** *(Polyether chain)*

---

**Rule 9:** *Modifiers where the **carboxyl group is directly attached to an aromatic ring without metal-coordinating substituents** yield **low yield\***.

- **Low Yield Examples:**
  - **4-Methylbenzoic acid**
  - **4-Pyridin-4-ylbenzoic acid** *(Pyridine ring not directly attached to carboxyl group)*
  - **4-[(2,2,2-Trifluoroacetyl)amino]butanoic acid** *(Non-coordinating substituent)*

---

**Rule 10:** *Modifiers containing **polyether chains** (multiple ether linkages) yield **low yield\***.

- **Low Yield Examples:**
  - **2-[2-(2-Methoxyethoxy)ethoxy]acetic acid**
  - **3-[2-(2-Aminoethoxy)ethoxy]propanoic acid**

---

**Rule 11:** *Modifiers with **perfluoroalkyl chains** yield **low yield\***.

- **Low Yield Example:**
  - **2,2,3,3,4,4,5,5,5-Nonafluoropentanoic acid**

---

**Rule 12:** *Modifiers containing **amide functional groups** yield **low yield\***.

- **Low Yield Examples:**
  - **(2S)-6-Acetamido-2-aminohexanoic acid**
  - **2-[(4-Hydroxybenzoyl)amino]acetic acid**
  - **4-[(2,2,2-Trifluoroacetyl)amino]butanoic acid**

---

**Rule 13:** *Modifiers with **reactive carbonyl groups (aldehydes or ketones) adjacent to aromatic rings** yield **low yield\***.

- **Low Yield Examples:**
  - **4-Formylbenzoic acid**
  - **5-Formyl-2-hydroxybenzoic acid**

---

**End of Rules**

---

These rules are designed to predict whether a molecular modifier will result in a high or low yield in the radical-mediated remote δ-C(sp³)–H bond functionalization reaction based on the presence of specific functional groups and structural motifs. The rules are informed by the following chemical insights:

1. **Metal Coordination Ability:** Functional groups capable of coordinating with metal ions (e.g., amino, nitro, heterocyclic nitrogen) can enhance interactions with the Fe catalyst, leading to higher yields (Rules 1, 2, 5).

2. **Aliphatic Chains and Polarity:** Long aliphatic carboxylic acids without polar groups improve compatibility with the reaction medium and catalyst, resulting in higher yields (Rule 6). Introduction of polar groups like hydroxyl or amino groups increases polarity and may interfere with catalyst interactions, reducing yield.

3. **Chain Length to Aromatic Rings:** The length of the aliphatic chain connecting an aromatic ring to the carboxyl group influences the modifier's flexibility and ability to interact with the catalyst. Longer chains (≥4 carbons) allow better alignment and interaction, enhancing yield (Rule 7).

4. **Multiple Hydroxyl Groups:** Aliphatic carboxylic acids with multiple hydroxyl groups can facilitate hydrogen bonding and increase solubility, improving catalyst interaction and yield (Rule 3).

5. **Reactivity of Functional Groups:** Reactive functional groups like aldehydes, ketones, amides, perfluoroalkyl chains, and polyether chains can interfere with the catalyst or react undesirably, leading to lower yields (Rules 8, 10, 11, 12, 13).

6. **Thiols:** Aliphatic thiol groups can act as ligands and enhance catalyst interaction, resulting in high yield. However, thiol groups on aromatic rings may lead to steric hindrance or unfavorable electronic effects, reducing yield (Rule 4).

7. **Direct Attachment of Functional Groups:** The position of functional groups relative to the carboxyl group and aromatic rings is critical. Direct attachment of coordinating groups to the aromatic ring improves metal coordination and yield, while non-direct attachment reduces these benefits (Rule 2, Rule 9).

These rules balance specificity and coverage, providing a framework to predict the effect of different molecular modifiers on the reaction yield. By combining multiple functional group features and considering underlying chemical properties, the rules aim to guide the selection and design of modifiers to optimize reaction outcomes.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 1.1,Rule 3,Rule 3.1,Rule 4,Rule 4.1,Rule 5,Rule 5.1,Rule 6,Rule 6.1,Rule 7
1,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0
1,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0
0,-1,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0
0,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,1,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,-1,0,0,0
1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0
0,-1,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.5428571428571428; Test Accuracy: 0.0
    Train Support: 0.0380952380952381; Test Support: 0.0
    Train Confidence: 0.8333333333333334; Test Confidence: 0.5
    Train Lift: 1.6775599128540304; Test Lift: NONE
    Train Leverage: 0.01006802721088435; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and features
    
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1]'
    
    # Primary amine group (-NH2)
    primary_amino_group = '[NX3;H2][#6]'
    
    # Side chain with carboxyl group
    side_chain_carboxyl = '[CH2][CX3](=O)[OX1H0-,OX2H1]'
    
    # Side chain with nitrogen-containing aromatic ring
    side_chain_nitrogen_aromatic = '[CH2][c;n]'
    
    # Hydroxyl group (-OH)
    hydroxyl_group = '[OX2H]'
    
    # Thiol group on aliphatic carbon
    aliphatic_thiol = '[SX2H][#6;!a]'
    
    # Thiol group on aromatic carbon
    aromatic_thiol = '[SX2H][c]'
    
    # Ketone group (carbonyl group)
    ketone_group = '[#6][CX3](=O)[#6]'
    
    # Aldehyde group
    aldehyde_group = '[CX3H](=O)[#6]'
    
    # Amide group
    amide_group = '[NX3][CX3](=O)[#6]'
    
    # Perfluoroalkyl chain
    perfluoroalkyl_chain = '[CX4](F)(F)F'
    
    # Polyether chain (multiple ether linkages)
    polyether_chain = '[#6][OX2][#6][OX2][#6]'
    
    # Long aliphatic chain (>=8 carbons without polar groups)
    long_aliphatic_chain = '[CH2][CH2][CH2][CH2][CH2][CH2][CH2][CH2]'
    
    # Aromatic carboxylic acid
    aromatic_carboxylic_acid = '[c][CX3](=O)[OX1H0-,OX2H1]'
    
    # Aromatic ring connected via aliphatic chain of four or more carbons to carboxyl group
    aromatic_ring_long_chain = '[CX3](=O)[OX1H0-,OX2H1][CH2][CH2][CH2][CH2][a]'
    
    # Reactive functional groups (aldehydes, ketones)
    reactive_carbonyl = '[#6][CX3](=O)[#6]'
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'High yield: Modifiers that are α-amino acids with side chains capable of metal coordination (e.g., carboxyl groups, nitrogen-containing aromatics).',
            'patterns': [
                [carboxylic_acid],
                [primary_amino_group],
                [side_chain_carboxyl, side_chain_nitrogen_aromatic]
            ],
            'prediction': 1
        },
        {
            'number': 1.1,
            'description': 'Low yield: Modifiers that are α-amino acids with non-coordinating side chains.',
            'patterns': [
                [carboxylic_acid],
                [primary_amino_group]
            ],
            'exclude_patterns': [
                [side_chain_carboxyl, side_chain_nitrogen_aromatic]
            ],
            'prediction': -1
        },
        {
            'number': 3,
            'description': 'High yield: Modifiers that are aliphatic carboxylic acids with multiple hydroxyl groups.',
            'patterns': [
                [carboxylic_acid],
                [hydroxyl_group]
            ],
            'prediction': 1,
            'count_threshold': {'[OX2H]': 2}  # At least two hydroxyl groups
        },
        {
            'number': 3.1,
            'description': 'Low yield: Aliphatic carboxylic acids with single hydroxyl group.',
            'patterns': [
                [carboxylic_acid],
                [hydroxyl_group]
            ],
            'prediction': -1,
            'count_threshold': {'[OX2H]': 1}  # Exactly one hydroxyl group
        },
        {
            'number': 4,
            'description': 'High yield: Modifiers containing aliphatic thiol (sulfhydryl) groups.',
            'patterns': [
                [aliphatic_thiol]
            ],
            'prediction': 1
        },
        {
            'number': 4.1,
            'description': 'Low yield: Modifiers with thiol groups on aromatic rings.',
            'patterns': [
                [aromatic_thiol]
            ],
            'prediction': -1
        },
        {
            'number': 5,
            'description': 'High yield: Aromatic carboxylic acids with para-substituents capable of metal coordination (e.g., amino, nitro groups).',
            'patterns': [
                [aromatic_carboxylic_acid],
                ['[c][NX3;H2,H1][c]'],  # Amino group on aromatic ring
                ['[c][NX3+](=O)[O-]']     # Nitro group on aromatic ring
            ],
            'prediction': 1
        },
        {
            'number': 5.1,
            'description': 'Low yield: Aromatic carboxylic acids with non-coordinating substituents.',
            'patterns': [
                [aromatic_carboxylic_acid]
            ],
            'exclude_patterns': [
                ['[c][NX3;H2,H1][c]'],
                ['[c][NX3+](=O)[O-]']
            ],
            'prediction': -1
        },
        {
            'number': 6,
            'description': 'High yield: Modifiers with long aliphatic chains (≥8 carbons) without interfering polar groups.',
            'patterns': [
                [long_aliphatic_chain],
                [carboxylic_acid]
            ],
            'exclude_patterns': [
                [hydroxyl_group, primary_amino_group, ketone_group, aldehyde_group, amide_group]
            ],
            'prediction': 1
        },
        {
            'number': 6.1,
            'description': 'Low yield: Introducing polar groups reduces yield.',
            'patterns': [
                [long_aliphatic_chain],
                [carboxylic_acid],
                [hydroxyl_group, primary_amino_group, ketone_group, aldehyde_group, amide_group]
            ],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'High yield: Aromatic rings connected via an aliphatic chain of four or more carbons to the carboxyl group.',
            'patterns': [
                [aromatic_ring_long_chain]
            ],
            'prediction': 1
        },
        # Additional rules can be defined similarly
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(pat) for pat in group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns

        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_exclude_patterns = []
            for group in rule['exclude_patterns']:
                compiled_group = [Chem.MolFromSmarts(pat) for pat in group]
                compiled_exclude_patterns.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_exclude_patterns

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        group_match = False
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                group_match = True
                                break
                        if group_match:
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        matches = mol.GetSubstructMatches(pat)
                        if matches:
                            # If a count threshold is specified for this pattern
                            if 'count_threshold' in rule and pat.GetSmarts() in rule['count_threshold']:
                                threshold = rule['count_threshold'][pat.GetSmarts()]
                                if len(matches) >= threshold:
                                    group_match = True
                                    break
                            else:
                                group_match = True
                                break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

---

**Rule 1:** *Modifiers that are **α-amino acids with side chains containing carboxylate groups** yield a **high yield**. The presence of additional carboxylate groups enhances metal coordination with the catalyst.*

- **High Yield Examples:**
  - **(2S)-2-Aminobutanedioic acid** (Aspartic acid)
  - **(2S)-2-Aminopentanedioic acid** (Glutamic acid)

- **Low Yield Counterexample:**
  - **(2S)-2-Amino-3-phenylpropanoic acid** (Phenylalanine; side chain lacks coordinating groups)

---

**Rule 2:** *Modifiers that are **aromatic carboxylic acids with para-substituted amino or nitro groups** yield a **high yield**. Substituents capable of metal coordination at the para position enhance interaction with the catalyst. Modifiers with non-coordinating substituents yield a **low yield**.*

- **High Yield Examples:**
  - **4-Aminobenzoic acid**
  - **4-Nitrobenzoic acid**

- **Low Yield Counterexamples:**
  - **4-Methylbenzoic acid** (Methyl group lacks coordinating ability)
  - **4-Formylbenzoic acid** (Aldehyde can interfere with catalysis)

---

**Rule 3:** *Modifiers where the **carboxyl group is directly attached to a nitrogen-containing heteroaromatic ring**, such as pyridine or pyrazole, yield a **high yield**. If the nitrogen-containing ring is not directly attached or is separated by another ring, the yield is **low**.*

- **High Yield Examples:**
  - **Pyridine-3-carboxylic acid** (Niacin)
  - **1H-Pyrazole-4-carboxylic acid**
  - **2-Oxo-1H-pyridine-4-carboxylic acid**

- **Low Yield Counterexample:**
  - **4-Pyridin-4-ylbenzoic acid** (Pyridine ring attached via a benzene ring)

---

**Rule 4:** *Modifiers that are **polyhydroxy aliphatic carboxylic acids** (containing multiple hydroxyl groups) yield a **high yield**. Single hydroxyl groups on long chains or aromatic rings yield a **low yield** due to insufficient interaction with the catalyst.*

- **High Yield Examples:**
  - **(2R,3S,4R,5R)-2,3,4,5,6-Pentahydroxyhexanoic acid** (Gluconic acid)
  - **2-[[1,3-Dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid**

- **Low Yield Counterexamples:**
  - **7-Hydroxyheptanoic acid** (Single hydroxyl group on a long chain)
  - **3-(4-Hydroxyphenyl)propanoic acid** (Hydroxyl on aromatic ring with short chain)

---

**Rule 5:** *Modifiers containing **aliphatic thiol (sulfhydryl) groups** yield a **high yield**. In contrast, modifiers with **aromatic thiol groups** yield a **low yield** due to less effective coordination.*

- **High Yield Example:**
  - **3-Sulfanylpropanoic acid**

- **Low Yield Counterexample:**
  - **4-Sulfanylbenzoic acid**

---

**Rule 6:** *Modifiers that are **aliphatic carboxylic acids with long carbon chains (6 or more carbons) and no polar substituents** yield a **high yield**. Introducing polar groups like hydroxyl or amino groups reduces the yield to **low** because they can interfere with catalyst interactions.*

- **High Yield Example:**
  - **Octanoic acid**

- **Low Yield Counterexamples:**
  - **7-Hydroxyheptanoic acid** (Hydroxyl group adds polarity)
  - **7-Aminoheptanoic acid** (Amino group adds polarity)

---

**Rule 7:** *Modifiers where an **aromatic ring is connected to the carboxyl group via an aliphatic chain of four or more carbons** yield a **high yield**. Chains shorter than four carbons yield a **low yield** due to inadequate spatial alignment with the catalyst.*

- **High Yield Examples:**
  - **5-(4-Hydroxyphenyl)pentanoic acid** (Chain length of 5 carbons)
  - **4-Pyridin-4-ylbutanoic acid** (Chain length of 4 carbons)

- **Low Yield Counterexample:**
  - **3-(4-Hydroxyphenyl)propanoic acid** (Chain length of 3 carbons)

---

**Rule 8:** *Modifiers containing **amide functional groups** yield a **low yield**. The amide group can coordinate with the metal center in a way that deactivates the catalyst or hinders its activity.*

- **Low Yield Examples:**
  - **(2S)-6-Acetamido-2-aminohexanoic acid**
  - **2-[[(2S)-2-Amino-4-methylsulfanylbutanoyl]amino]acetic acid**
  - **2-[(4-Hydroxybenzoyl)amino]acetic acid**

---

**Rule 9:** *Modifiers with **strong electron-withdrawing groups** such as **perfluoroalkyl chains** or **trifluoroacetyl groups** yield a **low yield**. These groups can disrupt electron density and interfere with catalyst interactions.*

- **Low Yield Examples:**
  - **2,2,3,3,4,4,5,5,5-Nonafluoropentanoic acid**
  - **4-[(2,2,2-Trifluoroacetyl)amino]butanoic acid**

---

**Rule 10:** *Modifiers containing **reactive carbonyl groups adjacent to aromatic rings**, such as aldehydes or ketones, yield a **low yield**. These groups can participate in side reactions or bind irreversibly to the catalyst.*

- **Low Yield Examples:**
  - **4-Formylbenzoic acid**
  - **5-Formyl-2-hydroxybenzoic acid**
  - **4-Oxoheptanedioic acid**

---

**Rule 11:** *Modifiers that are **α-amino acids with bulky or non-coordinating side chains** yield a **low yield**. Bulky groups can cause steric hindrance, and non-coordinating groups do not facilitate effective interaction with the catalyst.*

- **Low Yield Examples:**
  - **(2S)-2-Amino-3-phenylpropanoic acid** (Phenylalanine)
  - **(2S)-6-Acetamido-2-aminohexanoic acid** (Modified lysine)

---

**Rule 12:** *Modifiers with **polyether chains** yield a **low yield**. The flexibility and polarity of polyether chains can interfere with proper catalyst binding and activity.*

- **Low Yield Examples:**
  - **2-[2-(2-Methoxyethoxy)ethoxy]acetic acid**
  - **3-[2-(2-Aminoethoxy)ethoxy]propanoic acid**

---

**Rule 13:** *Modifiers containing **heteroatoms capable of chelation**, such as nitrogen in indole rings, directly attached to the amino acid backbone yield a **high yield**. Effective chelation enhances catalyst interaction.*

- **High Yield Example:**
  - **(2R)-2-Amino-3-(1H-indol-3-yl)propanoic acid** (Tryptophan)

---

**Rule 14:** *Modifiers with **bromomethyl groups on an aromatic ring** yield a **high yield**. The bromine atom can enhance interaction with the catalyst through halogen bonding or increased electrophilicity.*

- **High Yield Example:**
  - **4-(Bromomethyl)benzoic acid**

---

**Rule 15:** *Modifiers that are **aromatic carboxylic acids with para-substituted hydroxyl groups** yield variable results. If the hydroxyl-substituted aromatic ring is connected via a longer aliphatic chain (4 or more carbons), the yield is **high**; if connected directly or via a short chain, the yield is **low** due to steric and electronic factors.*

- **High Yield Example:**
  - **5-(4-Hydroxyphenyl)pentanoic acid** (Hydroxylated phenyl ring connected via a 5-carbon chain)

- **Low Yield Counterexample:**
  - **3-(4-Hydroxyphenyl)propanoic acid** (Connected via a 3-carbon chain)

---

**End of Rules**

---

**Summary of Chemical Insights:**

1. **Metal Coordination Ability:** Functional groups such as amino, carboxylate, and nitrogen-containing heterocycles enhance coordination with the Fe ion in the catalyst, improving yield (Rules 1, 2, 3, 5, 13).

2. **Aromatic Substitution Patterns:** The position and type of substituents on aromatic rings significantly affect metal coordination. Para-substituted amino or nitro groups increase yield, while non-coordinating groups decrease yield (Rule 2).

3. **Chain Length and Flexibility:** Longer aliphatic chains without polar substituents promote better interaction with hydrophobic regions of the catalyst (Rule 6). Flexibility provided by longer chains connecting aromatic rings allows for optimal alignment with the catalyst (Rules 6, 7).

4. **Hydroxyl Group Effects:** Multiple hydroxyl groups in aliphatic carboxylic acids enhance solubility and hydrogen bonding with the catalyst, improving yield. Single hydroxyl groups on long chains or directly on aromatic rings may not provide the same benefit (Rule 4).

5. **Thiol Groups:** Aliphatic thiols effectively coordinate with metal centers, enhancing yield. Aromatic thiols may be less effective due to steric hindrance or reduced accessibility (Rule 5).

6. **Electron-Withdrawing Groups:** Strong electron-withdrawing groups disrupt electron density around coordinating atoms, interfering with catalyst interactions and reducing yield (Rule 9).

7. **Reactive Functional Groups:** Functional groups like aldehydes, ketones, and amides can react with or deactivate the catalyst, leading to lower yields (Rules 8, 10).

8. **Steric Effects and Side Chain Influence:** Bulky side chains or non-coordinating groups in amino acids hinder effective catalyst interaction (Rule 11).

9. **Polyether Chains Interference:** Polyether chains introduce flexibility and polarity that can disrupt proper catalyst binding (Rule 12).

10. **Chelation Enhancers:** Heteroatoms in specific structural contexts, such as indole rings in tryptophan, facilitate chelation and improve yield (Rule 13).

11. **Halogen Effects:** Halogenated substituents like bromomethyl groups can enhance interactions with the catalyst, possibly through halogen bonding or activation of the aromatic ring (Rule 14).

12. **Substituent Positioning:** The effect of substituents such as hydroxyl groups on aromatic rings depends on their position and the length of the connecting chain, influencing steric and electronic factors (Rule 15).

These rules provide a framework for predicting whether a molecular modifier will yield a high or low result based on its structural features. They emphasize the importance of metal coordination, electronic effects, steric factors, and specific functional groups in influencing the reaction's outcome. By considering these rules, chemists can design or select modifiers to optimize the yield of the radical-mediated remote δ-C(sp³)–H bond functionalization reaction.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15,Rule 16
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6857142857142857; Test Accuracy: 0.0
    Train Support: 0.08571428571428572; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 2.0588235294117645; Test Lift: NONE
    Train Leverage: 0.04408163265306122; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define the rules with their associated SMARTS patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'High yield: α-amino acids with side chains containing carboxylate groups.',
            'patterns': [
                # α-amino acid backbone
                '[NX3][CHX4][CX3](=O)[OX1H1]',
                # Additional carboxylate group in the side chain
                '[CX3](=O)[OX1H1,O-]'
            ],
            'count_patterns': {
                '[CX3](=O)[OX1H1,O-]': 2  # At least two carboxylate groups
            },
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'High yield: Aromatic carboxylic acids with para-substituted amino or nitro groups.',
            'patterns': [
                # Benzoic acid core
                '[c][c]([c][c][c][c][CX3](=O)[OX1H1,O-])[c]',
                # Para-substituted amino or nitro group
                '[NX3H2,NX3+](=O)[O-]', '[NX3H2]',
            ],
            'para_substitution': True,
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'High yield: Carboxyl group directly attached to nitrogen-containing heteroaromatic rings.',
            'patterns': [
                # Carboxyl group attached to pyridine or pyrazole
                '[n][c](=O)[OX1H1,O-]',
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'High yield: Polyhydroxy aliphatic carboxylic acids (multiple hydroxyl groups).',
            'patterns': [
                # Carboxylic acid group
                '[CX3](=O)[OX1H1,O-]',
                # Hydroxyl groups
                '[OX2H]'
            ],
            'count_patterns': {
                '[OX2H]': 2  # At least two hydroxyl groups
            },
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'High yield: Aliphatic thiol (sulfhydryl) groups.',
            'patterns': [
                # Aliphatic thiol
                '[#6][SX2H]'
            ],
            'exclude_patterns': [
                '[a]'  # Exclude aromatic thiols
            ],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'High yield: Aliphatic carboxylic acids with long carbon chains (6+ carbons) and no polar substituents.',
            'patterns': [
                # Carboxylic acid group
                '[CX3](=O)[OX1H1,O-]',
                # Long aliphatic chain
                '[CH2]' * 6
            ],
            'exclude_patterns': [
                '[OX2H]', '[NX3H2]', '[#7]', '[#8]', '[#16]', '[F,Cl,Br,I]'  # Exclude polar groups
            ],
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'High yield: Aromatic ring connected via an aliphatic chain of 4+ carbons to a carboxyl group.',
            'patterns': [
                # Aromatic ring
                '[c]',
                # Aliphatic chain of 4+ carbons
                '[CH2]' * 4,
                # Carboxylic acid group
                '[CX3](=O)[OX1H1,O-]'
            ],
            'prediction': 1
        },
        {
            'number': 8,
            'description': 'Low yield: Modifiers containing amide functional groups.',
            'patterns': [
                '[NX3][CX3](=O)[#6]',  # Amide group
            ],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Low yield: Modifiers with strong electron-withdrawing groups like perfluoroalkyl chains or trifluoroacetyl groups.',
            'patterns': [
                '[CX4][F][F][F]',  # Trifluoromethyl group
                '[CX3](=O)[CX4][F][F][F]'  # Trifluoroacetyl group
            ],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Low yield: Modifiers with reactive carbonyl groups adjacent to aromatic rings.',
            'patterns': [
                '[c][CX3](=O)[#6]',  # Carbonyl adjacent to aromatic ring
            ],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Low yield: α-amino acids with bulky or non-coordinating side chains.',
            'patterns': [
                # α-amino acid backbone
                '[NX3][CHX4][CX3](=O)[OX1H1]',
                # Bulky side chains (e.g., phenyl group)
                '[#6][CHX4][c]'
            ],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'Low yield: Modifiers with polyether chains.',
            'patterns': [
                'OCCOCC',  # Simple polyether chain fragment
            ],
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'High yield: Modifiers containing heteroatoms capable of chelation, such as nitrogen in indole rings, directly attached to amino acid backbone.',
            'patterns': [
                # α-amino acid backbone
                '[NX3][CHX4][CX3](=O)[OX1H1]',
                # Indole ring connected to side chain
                '[CH2][c]1[cH][n][cH][cH][c]1'
            ],
            'prediction': 1
        },
        {
            'number': 14,
            'description': 'High yield: Modifiers with bromomethyl groups on an aromatic ring.',
            'patterns': [
                '[c][CH2Br]',
            ],
            'prediction': 1
        },
        {
            'number': 15,
            'description': 'Variable yield: Aromatic carboxylic acids with para-substituted hydroxyl groups connected via longer aliphatic chains (4+ carbons) yield high; shorter chains yield low.',
            'patterns': [
                # Aromatic ring with hydroxyl group
                '[c][c][c][c][c][c][OH]',
                # Aliphatic chain (variable length)
                '[CH2]{4,}',  # 4 or more carbons
                # Carboxylic acid group
                '[CX3](=O)[OX1H1,O-]'
            ],
            'prediction': 1
        },
        {
            'number': 16,
            'description': 'Low yield: Same as Rule 15 but with chains shorter than 4 carbons.',
            'patterns': [
                # Aromatic ring with hydroxyl group
                '[c][c][c][c][c][c][OH]',
                # Aliphatic chain (less than 4 carbons)
                '[CH2]{1,3}',  # 1 to 3 carbons
                # Carboxylic acid group
                '[CX3](=O)[OX1H1,O-]'
            ],
            'prediction': -1
        }
    ]

    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for smarts in rule.get('patterns', []):
            try:
                pat = Chem.MolFromSmarts(smarts)
                compiled_patterns.append(pat)
            except Exception:
                compiled_patterns.append(None)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for smarts in rule['exclude_patterns']:
                try:
                    pat = Chem.MolFromSmarts(smarts)
                    compiled_excludes.append(pat)
                except Exception:
                    compiled_excludes.append(None)
            rule['compiled_exclude_patterns'] = compiled_excludes

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'compiled_exclude_patterns' in rule:
                    for pat in rule['compiled_exclude_patterns']:
                        if pat is not None and mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for pat in rule['compiled_patterns']:
                    if pat is not None:
                        if not mol.HasSubstructMatch(pat):
                            match = False
                            break
                if 'count_patterns' in rule and match:
                    for smarts, count in rule['count_patterns'].items():
                        pat = Chem.MolFromSmarts(smarts)
                        if pat is not None:
                            matches = mol.GetSubstructMatches(pat)
                            if len(matches) < count:
                                match = False
                                break
                if 'para_substitution' in rule and match:
                    # Specific logic for para substitution
                    match = False
                    # Identify aromatic rings with carboxylic acid
                    carboxylic_acid = Chem.MolFromSmarts('[c][CX3](=O)[OX1H1,O-]')
                    matches = mol.GetSubstructMatches(carboxylic_acid)
                    for m in matches:
                        atom_indices = list(m)
                        aromatic_carbon = mol.GetAtomWithIdx(atom_indices[0])
                        para_atom = None
                        # Find para atom
                        for bond in aromatic_carbon.GetBonds():
                            neighbor = bond.GetOtherAtom(aromatic_carbon)
                            if neighbor.GetIdx() == atom_indices[1]:
                                continue
                            if neighbor.GetIsAromatic():
                                path = Chem.GetShortestPath(mol, neighbor.GetIdx(), atom_indices[1])
                                if len(path) == 4:
                                    para_atom = neighbor
                                    break
                        if para_atom:
                            # Check if para_atom has amino or nitro group
                            for pat in rule['compiled_patterns'][1:]:
                                if mol.HasSubstructMatch(pat, useChirality=False, atomIdx=para_atom.GetIdx()):
                                    match = True
                                    break
                            if match:
                                break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f"Rule {rule['number']}" for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

---

**Rule 1:** *Modifiers that are **α-amino acids containing additional carboxylic acid groups** (i.e., dicarboxylic α-amino acids) yield a **high yield**. The presence of both amino and extra carboxyl groups enhances metal coordination with the catalyst.*

- **High Yield Examples:**
  - **(2S)-2-Aminobutanedioic acid** (Aspartic acid)
  - **(2S)-2-Aminopentanedioic acid** (Glutamic acid)

- **Low Yield Counterexample:**
  - **(2S)-2-Amino-3-phenylpropanoic acid** (Phenylalanine; lacks extra carboxyl group)

---

**Rule 2:** *Modifiers that are **aromatic carboxylic acids with polar para-substituents**, such as amino, nitro, or bromomethyl groups, yield a **high yield**. Polar substituents at the para position enhance interaction with the catalyst.*

- **High Yield Examples:**
  - **4-Aminobenzoic acid**
  - **4-Nitrobenzoic acid**
  - **4-(Bromomethyl)benzoic acid**

- **Low Yield Counterexamples:**
  - **4-Methylbenzoic acid** (Methyl group is non-polar)
  - **4-Formylbenzoic acid** (Aldehyde group may hinder coordination)

---

**Rule 3:** *Modifiers that are **heterocyclic aromatic carboxylic acids containing nitrogen atoms in the ring** yield a **high yield**. Nitrogen atoms act as additional coordination sites with the metal center.*

- **High Yield Examples:**
  - **Pyridine-3-carboxylic acid** (Niacin)
  - **1H-Pyrazole-4-carboxylic acid**

- **Low Yield Counterexample:**
  - **4-Pyridin-4-ylbenzoic acid** (Pyridine ring attached via another aromatic ring may hinder coordination)

---

**Rule 4:** *Modifiers that are **straight-chain aliphatic carboxylic acids without polar substituents** yield a **high yield**. The hydrophobic chain may enhance interactions with the catalyst surface.*

- **High Yield Example:**
  - **Octanoic acid**

- **Low Yield Counterexample:**
  - **7-Hydroxyheptanoic acid** (Contains polar hydroxyl group)

---

**Rule 5:** *Modifiers that are **aliphatic carboxylic acids with multiple hydroxyl groups** yield a **high yield**. Multiple hydroxyl groups enhance coordination and hydrogen bonding with the catalyst.*

- **High Yield Example:**
  - **(2R,3S,4R,5R)-2,3,4,5,6-Pentahydroxyhexanoic acid** (Gluconic acid)

- **Low Yield Example:**
  - **7-Hydroxyheptanoic acid** (Only one hydroxyl group)

---

**Rule 6:** *Modifiers containing **ether linkages (polyether chains)** yield a **low yield**. Ether oxygens may interfere with optimal metal coordination or alter solubility unfavorably.*

- **Low Yield Examples:**
  - **2-[2-(2-Methoxyethoxy)ethoxy]acetic acid**
  - **3-[2-(2-Aminoethoxy)ethoxy]propanoic acid**

---

**Rule 7:** *Modifiers containing **aldehyde or ketone groups adjacent to the carboxylic acid** yield a **low yield**. These groups may react with the catalyst or hinder coordination.*

- **Low Yield Examples:**
  - **4-Formylbenzoic acid**
  - **5-Formyl-2-hydroxybenzoic acid**
  - **4-Oxoheptanedioic acid**

---

**Rule 8:** *Modifiers with **perfluorinated alkyl chains** or strong **electron-withdrawing groups** yield a **low yield**. Electron-withdrawing effects reduce the ability of the modifier to coordinate with the metal center.*

- **Low Yield Examples:**
  - **2,2,3,3,4,4,5,5,5-Nonafluoropentanoic acid**
  - **4-[(2,2,2-Trifluoroacetyl)amino]butanoic acid**

---

**Rule 9:** *Modifiers with **amide functional groups adjacent to the carboxylic acid** yield a **low yield**. Amide resonance stabilization reduces electron density available for metal coordination.*

- **Low Yield Examples:**
  - **(2S)-6-Acetamido-2-aminohexanoic acid**
  - **2-[(4-Hydroxybenzoyl)amino]acetic acid**

---

**Rule 10:** *Modifiers that are **aromatic carboxylic acids with electron-donating groups directly attached to the ring** yield a **high yield**. Electron-rich rings enhance interaction with the metal center.*

- **High Yield Examples:**
  - **1,3-Dioxo-2-benzofuran-5-carboxylic acid**
  - **2-Oxo-1H-pyridine-4-carboxylic acid**

---

**Rule 11:** *Modifiers that are **aliphatic carboxylic acids with thiol groups** yield a **high yield**, while **aromatic thiol acids** yield a **low yield**. Aliphatic thiols enhance metal coordination more effectively.*

- **High Yield Example:**
  - **3-Sulfanylpropanoic acid**

- **Low Yield Example:**
  - **4-Sulfanylbenzoic acid**

---

**Rule 12:** *Modifiers containing **bulky substituents near key functional groups** yield a **low yield** due to steric hindrance affecting interaction with the catalyst.*

- **Low Yield Examples:**
  - **4-Pyridin-4-ylbenzoic acid**
  - **2-[(4-Hydroxybenzoyl)amino]acetic acid**

---

**Rule 13:** *Modifiers that are **aromatic compounds connected through a spacer aliphatic chain (four or more carbons) to polar functional groups** yield a **high yield**. The spacer allows optimal positioning for interaction with the catalyst.*

- **High Yield Examples:**
  - **5-(4-Hydroxyphenyl)pentanoic acid**
  - **4-Pyridin-4-ylbutanoic acid**

- **Low Yield Counterexample:**
  - **3-(4-Hydroxyphenyl)propanoic acid** (Shorter chain may not position the functional group effectively)

---

**Rule 14:** *Modifiers that are **α-amino acids with aromatic side chains lacking heteroatoms** yield a **low yield**. Lack of additional coordination sites reduces interaction with the catalyst.*

- **Low Yield Example:**
  - **(2S)-2-Amino-3-phenylpropanoic acid** (Phenylalanine)

---

**Rule 15:** *Modifiers that are **α-amino acids with aromatic side chains containing nitrogen heterocycles** yield a **high yield**. Nitrogen in the side chain enhances coordination with the metal center.*

- **High Yield Example:**
  - **(2R)-2-Amino-3-(1H-indol-3-yl)propanoic acid** (Tryptophan)

---

**End of Rules**

---

**Summary of Chemical Insights:**

1. **Enhanced Metal Coordination Increases Yield:**
   - **Multiple Carboxylic Acids (Rule 1):** Additional carboxyl groups provide more coordination sites.
   - **Amino Groups (Rules 1 & 2):** Amino groups offer lone pairs for coordination.
   - **Hydroxyl Groups (Rule 5):** Multiple hydroxyls facilitate hydrogen bonding and metal binding.
   - **Nitrogen Heterocycles (Rules 3 & 15):** Nitrogen atoms act as strong coordinating sites.
   - **Aliphatic Thiols (Rule 11):** Thiol groups bind effectively with metals.

2. **Chain Length and Positioning:**
   - **Aliphatic Chains (Rule 4):** Unsubstituted chains enhance dispersion and catalyst interaction.
   - **Spacer Chains (Rule 13):** Lengthy linkers position functional groups favorably for metal coordination.

3. **Impact of Substituents on Aromatic Rings:**
   - **Polar Para-Substituents (Rule 2):** Substituents like amino, nitro, or bromomethyl enhance interactions.
   - **Electron-Rich Rings (Rule 10):** Aromatic systems with electron-donating groups or heteroatoms increase yield.

4. **Functional Groups That Decrease Yield:**
   - **Amides Near Carboxylic Acids (Rule 9):** Resonance reduces availability of lone pairs for coordination.
   - **Ethers and Polyethers (Rule 6):** Ether oxygens may disrupt binding or solubility.
   - **Aldehydes and Ketones (Rule 7):** Reactive carbonyl groups can form unwanted complexes.
   - **Perfluorinated Chains (Rule 8):** Electron-withdrawing fluorines reduce coordination ability.
   - **Bulky Substituents (Rule 12):** Large groups hinder access to the metal center.

5. **Electron-Withdrawing Groups:**
   - **Negative Impact (Rules 7 & 8):** Groups that pull electron density away from coordinating atoms decrease yield.

6. **Aromatic Side Chains:**
   - **With Heteroatoms (Rule 15):** Side chains like indole rings enhance coordination.
   - **Without Heteroatoms (Rule 14):** Simple phenyl rings without additional donors are less effective.

By applying these rules, one can predict the influence of different molecular modifiers on the reaction yield. Selecting modifiers with functional groups that enhance metal coordination and catalyst stability—such as additional carboxyl groups, amino groups, nitrogen heterocycles, multiple hydroxyls, and aliphatic thiols—while avoiding those that interfere with catalyst activity or coordination—like amides, ethers, aldehydes, ketones, and strong electron-withdrawing groups—will optimize the reaction outcome.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
1,0,0,0,1,0,-1,0,0,0,0,0,0,0,0
0,1,0,0,0,0,-1,0,0,0,0,-1,0,0,0
1,0,0,0,1,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
0,1,0,0,0,0,-1,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,1,0,-1,0,0,0,0,-1,0,0,0
0,1,0,0,1,0,-1,0,0,1,0,-1,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0
0,0,0,0,1,0,-1,0,0,0,0,0,0,0,0
0,1,0,0,0,0,-1,0,0,0,0,-1,0,0,0
0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0
0,0,1,0,0,0,-1,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,-1,1,0,0
0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0
0,1,1,0,0,0,-1,0,0,0,0,-1,1,0,0
0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0
0,0,0,0,0,-1,-1,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,-1,0,0,0,1,0,0,0,0
0,1,0,0,1,0,-1,0,0,1,0,-1,0,0,0
0,1,0,0,0,0,-1,0,0,0,0,-1,0,0,0
0,1,0,0,0,0,-1,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0
0,0,0,0,0,-1,-1,0,0,1,0,-1,0,0,0
0,1,0,0,1,0,-1,0,-1,1,0,-1,0,0,0
0,0,0,0,1,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0
0,0,0,0,1,0,-1,0,0,0,0,0,0,0,0
0,1,0,0,1,0,-1,0,0,1,0,-1,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6285714285714286; Test Accuracy: 0.0
    Train Support: 0.11428571428571428; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 2.0588235294117645; Test Lift: NONE
    Train Leverage: 0.05877551020408162; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and substructures
    carboxylic_acid = '[CX3](=O)[OX2H1]'  # Carboxylic acid group (-COOH)
    amino_group = '[NX3;H2,H1][CX4]'  # Primary or secondary amine
    extra_carboxylic_acid = '[#6][CX3](=O)[OX2H1]'  # Additional carboxylic acid group
    aromatic_ring = 'c1ccccc1'  # Benzene ring
    polar_para_substituents = {'amino': 'N', 'nitro': 'N(=O)=O', 'bromomethyl': 'CBr'}
    nitrogen_heterocycle = '[n]'  # Nitrogen atom in aromatic ring
    hydroxyl_group = '[OX2H]'  # Hydroxyl group (-OH)
    thiol_group = '[SX2H]'  # Thiol group (-SH)
    aldehyde_ketone = '[CX3H0](=O)[#6]'  # Aldehyde or ketone adjacent to a carbon
    ether_linkage = '[#6][OX2][#6]'  # Ether linkage (-O-)
    perfluoro_alkyl = '[CX4]([F,Cl,Br,I])([F,Cl,Br,I])[F,Cl,Br,I]'  # Perfluorinated groups
    amide_group = '[NX3][CX3](=O)[#6]'  # Amide group adjacent to carbonyl
    bulky_groups = '[#6][#6]([#6])[#6]'  # Tertiary carbon (bulky group)
    aliphatic_chain_5plus = '[CX4][CX4][CX4][CX4][CX4]'  # Aliphatic chain of 5 carbons
    spacer_chain_four_more = '[#6]-[#6]-[#6]-[#6]-*'  # Spacer chain of 4 or more carbons
    aromatic_thiol = 'c[SX2H]'  # Thiol attached to aromatic ring
    amino_acid_aromatic = '[NX3;H2][CX4H]([#6])[c]'  # Amino acid with aromatic side chain
    nitrogen_heterocycle_side_chain = '[NX3;H2][CX4H]([#6])[#6][n]'  # Amino acid with nitrogen heterocycle side chain
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'High Yield: α-amino acids containing additional carboxylic acid groups (dicarboxylic α-amino acids).',
            'patterns': [[amino_group], [carboxylic_acid]],
            'additional_checks': {
                'carboxylic_acid_count': 2  # At least two carboxylic acid groups
            },
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'High Yield: Aromatic carboxylic acids with polar para-substituents (amino, nitro, bromomethyl).',
            'patterns': [[aromatic_ring], [carboxylic_acid]],
            'substituents': [
                'c1ccc([NX3H2,H1])cc1',   # Para amino
                'c1ccc([N+](=O)[O-])cc1', # Para nitro
                'c1ccc(CBr)cc1'           # Para bromomethyl
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'High Yield: Heterocyclic aromatic carboxylic acids containing nitrogen atoms in the ring.',
            'patterns': [[aromatic_ring], [carboxylic_acid], [nitrogen_heterocycle]],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'High Yield: Straight-chain aliphatic carboxylic acids without polar substituents.',
            'patterns': [[aliphatic_chain_5plus], [carboxylic_acid]],
            'exclude_patterns': [[hydroxyl_group]],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'High Yield: Aliphatic carboxylic acids with multiple hydroxyl groups.',
            'patterns': [[carboxylic_acid], [hydroxyl_group]],
            'additional_checks': {
                'hydroxyl_group_count': 2  # At least two hydroxyl groups
            },
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Low Yield: Modifiers containing ether linkages (polyether chains).',
            'patterns': [[ether_linkage]],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Low Yield: Modifiers containing aldehyde or ketone groups adjacent to the carboxylic acid.',
            'patterns': [[aldehyde_ketone], [carboxylic_acid]],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Low Yield: Modifiers with perfluorinated alkyl chains or strong electron-withdrawing groups.',
            'patterns': [[perfluoro_alkyl]],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Low Yield: Modifiers with amide functional groups adjacent to the carboxylic acid.',
            'patterns': [[amide_group], [carboxylic_acid]],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'High Yield: Aromatic carboxylic acids with electron-donating groups directly attached to the ring.',
            'patterns': [[aromatic_ring], [carboxylic_acid]],
            'substituents': [
                'c1c(O)cccc1',      # Hydroxyl group on aromatic ring
                'c1c(OC)cccc1'      # Methoxy group on aromatic ring
            ],
            'prediction': 1
        },
        {
            'number': 11,
            'description': 'High Yield: Aliphatic carboxylic acids with thiol groups; Aromatic thiol acids yield low yield.',
            'patterns': [[thiol_group], [carboxylic_acid]],
            'exclude_patterns': [[aromatic_thiol]],
            'prediction': 1
        },
        {
            'number': 12,
            'description': 'Low Yield: Modifiers containing bulky substituents near key functional groups.',
            'patterns': [[bulky_groups]],
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'High Yield: Aromatic compounds connected through a spacer aliphatic chain (four or more carbons) to polar functional groups.',
            'patterns': [[aromatic_ring], [spacer_chain_four_more], [polar_para_substituents['amino']]],
            'prediction': 1
        },
        {
            'number': 14,
            'description': 'Low Yield: α-amino acids with aromatic side chains lacking heteroatoms.',
            'patterns': [[amino_acid_aromatic]],
            'exclude_patterns': [[nitrogen_heterocycle_side_chain]],
            'prediction': -1
        },
        {
            'number': 15,
            'description': 'High Yield: α-amino acids with aromatic side chains containing nitrogen heterocycles.',
            'patterns': [[amino_acid_aromatic], [nitrogen_heterocycle_side_chain]],
            'prediction': 1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(p) for p in group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for group in rule['exclude_patterns']:
                compiled_group = [Chem.MolFromSmarts(p) for p in group]
                compiled_excludes.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_excludes
        # Compile substituent patterns if any
        if 'substituents' in rule:
            rule['compiled_substituents'] = [Chem.MolFromSmarts(p) for p in rule['substituents']]
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        matches = mol.GetSubstructMatches(pat)
                        if matches:
                            group_match = True
                            break
                    if not group_match:
                        match = False
                        break
                # Additional checks
                if match and 'additional_checks' in rule:
                    for check, value in rule['additional_checks'].items():
                        if check == 'carboxylic_acid_count':
                            ca_pat = Chem.MolFromSmarts(carboxylic_acid)
                            ca_matches = mol.GetSubstructMatches(ca_pat)
                            if len(ca_matches) < value:
                                match = False
                                break
                        if check == 'hydroxyl_group_count':
                            oh_pat = Chem.MolFromSmarts(hydroxyl_group)
                            oh_matches = mol.GetSubstructMatches(oh_pat)
                            if len(oh_matches) < value:
                                match = False
                                break
                # Check substituents if any
                if match and 'compiled_substituents' in rule:
                    substituent_match = False
                    for sub_pat in rule['compiled_substituents']:
                        if mol.HasSubstructMatch(sub_pat):
                            substituent_match = True
                            break
                    if not substituent_match:
                        match = False
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df
--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

---

**Rule 1:** *Modifiers that are **α-amino acids with side-chain carboxyl groups**, such as aspartic acid and glutamic acid, yield a **high yield**. The presence of an extra carboxyl group in the side chain enhances metal coordination with the catalyst due to additional coordinating sites.*

- **High Yield Examples:**
  - **(2S)-2-Aminobutanedioic acid** (Aspartic acid)
  - **(2S)-2-Aminopentanedioic acid** (Glutamic acid)

- **Low Yield Counterexample:**
  - **(2S)-2-Amino-3-phenylpropanoic acid** (Phenylalanine; lacks side-chain carboxyl group)

---

**Rule 2:** *Modifiers that are **aliphatic carboxylic acids with unbranched carbon chains of five or more carbons** yield a **high yield** when **no polar substituents** are present in the chain. The non-polar nature of the chain facilitates favorable interactions with the catalyst's hydrophobic regions.*

- **High Yield Example:**
  - **Octanoic acid**

- **Low Yield Examples:**
  - **7-Hydroxyheptanoic acid** (Contains hydroxyl group)
  - **7-Aminoheptanoic acid** (Contains amino group)

- **High Yield Exception:**
  - **5-Aminopentanoic acid** (Shorter chain with amino group but still yields high yield due to optimal chain length and positioning of the amino group facilitating coordination)

---

**Rule 3:** *Modifiers that are **aromatic carboxylic acids substituted at the para position with strong electron-withdrawing groups**, such as nitro groups, yield a **high yield**. Electron-withdrawing groups increase the acidity of the carboxyl group, enhancing metal coordination through deprotonation and interaction with the catalyst.*

- **High Yield Example:**
  - **4-Nitrobenzoic acid**

- **Low Yield Counterexample:**
  - **4-Methylbenzoic acid** (Methyl group is electron-donating and decreases acidity, reducing coordination efficiency)

---

**Rule 4:** *Modifiers that are **aromatic carboxylic acids with aldehyde (formyl) groups directly attached to the aromatic ring** yield a **low yield**. Aldehyde groups can participate in side reactions or affect metal coordination negatively due to their reactivity.*

- **Low Yield Examples:**
  - **4-Formylbenzoic acid**
  - **5-Formyl-2-hydroxybenzoic acid**

---

**Rule 5:** *Modifiers that are **aliphatic carboxylic acids containing thiol (–SH) groups** yield a **high yield**, while **aromatic thiol carboxylic acids** yield a **low yield**. Aliphatic thiols enhance metal coordination without steric hindrance from aromatic rings, whereas aromatic thiols may suffer from reduced accessibility and steric effects.*

- **High Yield Example:**
  - **3-Sulfanylpropanoic acid**

- **Low Yield Example:**
  - **4-Sulfanylbenzoic acid**

---

**Rule 6:** *Modifiers that are **pyridine carboxylic acids with the carboxyl group directly attached to the pyridine ring** yield a **high yield**. The nitrogen atom in the pyridine ring acts as an additional coordination site, strengthening metal-ligand interactions.*

- **High Yield Examples:**
  - **Pyridine-3-carboxylic acid** (Niacin)
  - **2-Oxo-1H-pyridine-4-carboxylic acid**

- **Low Yield Counterexample:**
  - **4-Pyridin-4-ylbenzoic acid** (Pyridine ring is not directly bonded to the carboxyl group, reducing coordination efficiency)

---

**Rule 7:** *Modifiers with **multiple hydroxyl groups near the carboxyl group** yield a **high yield**. Multiple hydroxyl groups can form additional hydrogen bonds and coordinate with metal centers, enhancing the overall binding affinity to the catalyst.*

- **High Yield Examples:**
  - **(2R,3S,4R,5R)-2,3,4,5,6-Pentahydroxyhexanoic acid** (Gluconic acid)
  - **2-[[1,3-Dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid**

- **Low Yield Counterexample:**
  - **7-Hydroxyheptanoic acid** (Hydroxyl group is distant from the carboxyl group and less effective in coordination)

---

**Rule 8:** *Modifiers containing **amide functional groups adjacent to the carboxylic acid** yield a **low yield**. The resonance stabilization in amide groups reduces the availability of lone pairs on nitrogen and oxygen atoms for effective metal coordination.*

- **Low Yield Examples:**
  - **(2S)-6-Acetamido-2-aminohexanoic acid**
  - **2-[(4-Hydroxybenzoyl)amino]acetic acid**

---

**Rule 9:** *Modifiers that are **polyether carboxylic acids** with ether linkages distant from the carboxyl group yield a **low yield**. The ether oxygens may not be positioned favorably for coordination and can introduce steric hindrance or alter solubility properties unfavorably.*

- **Low Yield Examples:**
  - **2-[2-(2-Methoxyethoxy)ethoxy]acetic acid**
  - **3-[2-(2-Aminoethoxy)ethoxy]propanoic acid**

---

**Rule 10:** *Modifiers containing **perfluorinated chains** yield a **low yield**. The strong electron-withdrawing effects of fluorine atoms reduce electron density on coordinating atoms, diminishing their ability to interact with the metal center.*

- **Low Yield Example:**
  - **2,2,3,3,4,4,5,5,5-Nonafluoropentanoic acid**

---

**Rule 11:** *Modifiers that are **aromatic carboxylic acids with methoxy groups on the aromatic ring** yield a **high yield**. Methoxy groups are electron-donating, increasing electron density on the aromatic ring and carboxyl oxygen, enhancing coordination with the metal catalyst.*

- **High Yield Example:**
  - **4-(3,4-Dimethoxyphenyl)-4-oxobutanoic acid**

- **Low Yield Counterexample:**
  - **3-(4-Hydroxyphenyl)propanoic acid** (Hydroxy group may not provide the same electron-donating effect due to positioning and potential hydrogen bonding)

---

**Rule 12:** *Modifiers that are **simple aromatic carboxylic acids with alkyl substituents** yield a **low yield**. Alkyl groups are electron-donating but may not sufficiently enhance coordination, and lack additional coordinating functional groups.*

- **Low Yield Examples:**
  - **4-Methylbenzoic acid**
  - **5-(4-Methylphenyl)pentanoic acid**

---

**Rule 13:** *Modifiers containing **heterocyclic rings with additional coordinating heteroatoms** yield a **high yield**. Heteroatoms like nitrogen or oxygen in rings can provide extra sites for metal coordination.*

- **High Yield Examples:**
  - **1H-Pyrazole-4-carboxylic acid**
  - **1,3-Dioxo-2-benzofuran-5-carboxylic acid**

---

**Rule 14:** *Modifiers that are **aromatic carboxylic acids with hydroxyl groups ortho to the carboxyl group** yield a **low yield**. Intramolecular hydrogen bonding between the hydroxyl and carboxyl groups may reduce their availability for coordination with the metal center.*

- **Low Yield Example:**
  - **5-Formyl-2-hydroxybenzoic acid**

---

**Rule 15:** *Modifiers with **bulky substituents adjacent to coordinating groups** yield a **low yield**. Steric hindrance can impede effective interaction between the modifier and the metal center of the catalyst.*

- **Low Yield Example:**
  - **4-[(2,2,2-Trifluoroacetyl)amino]butanoic acid**

---

**End of Rules**

---

These rules predict whether a molecular modifier will result in a high or low yield in the radical-mediated remote δ-C(sp³)–H bond functionalization reaction based on combinations of sub-structures (functional groups) present in the modifier. They consider underlying physical-chemical properties such as metal coordination ability, electron density, steric effects, and the capacity of functional groups to enhance or hinder interaction with the catalyst.

By applying these rules, chemists can select or design molecular modifiers that are more likely to optimize the yield of the reaction. The focus is on modifiers that enhance coordination with the metal center through additional coordinating sites, increased acidity, or electron-donating effects that increase electron density on coordinating atoms. Conversely, modifiers that interfere with catalyst activity due to steric hindrance, reduced electron density, or intramolecular interactions that sequester coordinating atoms are avoided.

------------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 5.1,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.5428571428571428; Test Accuracy: 0.0
    Train Support: 0.02857142857142857; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 2.0588235294117645; Test Lift: NONE
    Train Leverage: 0.014693877551020406; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define the rules with their associated SMARTS patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are alpha-amino acids with side-chain carboxyl groups yield a high yield.',
            'patterns': [
                '[NX3;H2][CX4H][CX4][CX3](=O)[OX2H1]',  # Alpha-amino acid backbone with side-chain carboxyl
                '[CX3](=O)[OX2H1]'  # Side-chain carboxyl group
            ],
            'exclude_patterns': [],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers that are aliphatic carboxylic acids with unbranched carbon chains of five or more carbons and no polar substituents yield a high yield.',
            'patterns': [
                '[CX3](=O)[OX2H1][CH2][CH2][CH2][CH2][CH3]',  # Unbranched aliphatic carboxylic acid with 5 carbons
            ],
            'exclude_patterns': [
                '[#6][!C;!H]'  # Exclude polar substituents
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers that are aromatic carboxylic acids substituted at the para position with strong electron-withdrawing groups yield a high yield.',
            'patterns': [
                'c1ccc(cc1)[CX3](=O)[OX2H1]',  # Aromatic carboxylic acid
                'c1ccc([NX3+](=O)[O-])cc1'  # Para-substituted with nitro group
            ],
            'exclude_patterns': [],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers that are aromatic carboxylic acids with aldehyde groups directly attached to the aromatic ring yield a low yield.',
            'patterns': [
                'c1cc([CX3H]=O)ccc1[CX3](=O)[OX2H1]',  # Aromatic carboxylic acid with aldehyde
            ],
            'exclude_patterns': [],
            'prediction': -1
        },
        {
            'number': 5,
            'description': 'Modifiers that are aliphatic carboxylic acids containing thiol groups yield a high yield; aromatic thiol carboxylic acids yield a low yield.',
            'patterns': [
                '[CX3](=O)[OX2H1][CX4][SX2H]',  # Aliphatic carboxylic acid with thiol
            ],
            'exclude_patterns': [],
            'prediction': 1
        },
        {
            'number': 5.1,
            'description': 'Aromatic thiol carboxylic acids yield a low yield.',
            'patterns': [
                'c1cc([SX2H])ccc1[CX3](=O)[OX2H1]',  # Aromatic carboxylic acid with thiol
            ],
            'exclude_patterns': [],
            'prediction': -1
        },
        {
            'number': 6,
            'description': 'Modifiers that are pyridine carboxylic acids with the carboxyl group directly attached to the pyridine ring yield a high yield.',
            'patterns': [
                'n1ccccc1[CX3](=O)[OX2H1]',  # Pyridine carboxylic acid
            ],
            'exclude_patterns': [],
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'Modifiers with multiple hydroxyl groups near the carboxyl group yield a high yield.',
            'patterns': [
                '[CX3](=O)[OX2H1][C;!H0]([OX2H])[C;!H0]([OX2H])[C;!H0]([OX2H])',  # Multiple hydroxyls near carboxyl
            ],
            'exclude_patterns': [],
            'prediction': 1
        },
        {
            'number': 8,
            'description': 'Modifiers containing amide functional groups adjacent to the carboxylic acid yield a low yield.',
            'patterns': [
                '[CX3](=O)[NX3][CX3](=O)[OX2H1]',  # Amide adjacent to carboxylic acid
            ],
            'exclude_patterns': [],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers that are polyether carboxylic acids with ether linkages distant from the carboxyl group yield a low yield.',
            'patterns': [
                '[OX2][CX4][CX4][OX2][CX4][CX4][CX3](=O)[OX2H1]',  # Polyether chain ending with carboxylic acid
            ],
            'exclude_patterns': [],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers containing perfluorinated chains yield a low yield.',
            'patterns': [
                '[CX4]([F,Cl,Br,I])([F,Cl,Br,I])[CX4]([F,Cl,Br,I])([F,Cl,Br,I])[CX3](=O)[OX2H1]',  # Perfluorinated chain with carboxylic acid
            ],
            'exclude_patterns': [],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Modifiers that are aromatic carboxylic acids with methoxy groups on the aromatic ring yield a high yield.',
            'patterns': [
                'c1cc(OC)c(cc1)[CX3](=O)[OX2H1]',  # Methoxy-substituted aromatic carboxylic acid
            ],
            'exclude_patterns': [],
            'prediction': 1
        },
        {
            'number': 12,
            'description': 'Modifiers that are simple aromatic carboxylic acids with alkyl substituents yield a low yield.',
            'patterns': [
                'c1cc([CX4H3])ccc1[CX3](=O)[OX2H1]',  # Alkyl-substituted aromatic carboxylic acid
            ],
            'exclude_patterns': [],
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Modifiers containing heterocyclic rings with additional coordinating heteroatoms yield a high yield.',
            'patterns': [
                '[n,o,s]1cccc1[CX3](=O)[OX2H1]',  # Heterocyclic ring with carboxylic acid
            ],
            'exclude_patterns': [],
            'prediction': 1
        },
        {
            'number': 14,
            'description': 'Modifiers that are aromatic carboxylic acids with hydroxyl groups ortho to the carboxyl group yield a low yield.',
            'patterns': [
                'c1cc(c(c(c1)O)[CX3](=O)[OX2H1])',  # Ortho-hydroxylated aromatic carboxylic acid
            ],
            'exclude_patterns': [],
            'prediction': -1
        },
        {
            'number': 15,
            'description': 'Modifiers with bulky substituents adjacent to coordinating groups yield a low yield.',
            'patterns': [
                '[CX3](=O)[OX2H1][CX4][CX3](=O)[CX4]([CX4]([CX4H3])[CX4H3])[CF3]',  # Bulky substituent near carboxyl
            ],
            'exclude_patterns': [],
            'prediction': -1
        },
    ]

    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for smarts in rule.get('patterns', []):
            mol = Chem.MolFromSmarts(smarts)
            compiled_patterns.append(mol)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        compiled_excludes = []
        for smarts in rule.get('exclude_patterns', []):
            mol = Chem.MolFromSmarts(smarts)
            compiled_excludes.append(mol)
        rule['compiled_exclude_patterns'] = compiled_excludes

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                for pat in rule['compiled_exclude_patterns']:
                    if mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Check required patterns
                for pat in rule['compiled_patterns']:
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------