def rule2matrix(smiles_list):
    # Define SMARTS patterns for various functional groups and structural features
    
    # Functional groups and patterns for rules
    # Rule 1: α-amino acids with coordinating functional groups within three carbons of the α-carbon
    alpha_amino_acid = '[C@@H](N*)C(=O)O'  # Basic α-amino acid backbone
    coordinating_groups_within_three_carbons = [
        '[C;X4][C;X4][C;X4](O)',     # Hydroxyl group within three carbons
        '[C;X4][C;X4][C;X4](N)',     # Amino group within three carbons
        '[C;X4][C;X4][C;X4](S)',     # Sulfhydryl group within three carbons
        '[C;X4][C;X4](C(=O)O)',     # Carboxyl group within three carbons
    ]
    
    # Rule 2: α-amino acids with non-coordinating side chains
    non_coordinating_alpha_amino_acid = alpha_amino_acid  # Same backbone without additional groups
    
    # Rule 3: Aromatic carboxylic acids with electron-withdrawing substituents at the para position
    aromatic_carboxylic_acid = 'c1ccc(cc1)C(=O)O'
    electron_withdrawing_para = [
        'c1ccc([N+](=O)[O-])cc1',    # Nitro group at para position
        'c1ccc(Br)cc1',              # Bromine at para position
        'c1ccc(Cl)cc1',              # Chlorine at para position
        'c1ccc(F)cc1',               # Fluorine at para position
        'c1ccc(I)cc1',               # Iodine at para position
    ]
    
    # Rule 4: Aromatic carboxylic acids with electron-donating substituents directly attached
    electron_donating_direct = [
        'c1ccc(O)cc1',               # Hydroxyl group directly attached
        'c1ccc(OC)cc1',              # Methoxy group directly attached
        'c1ccc(C)cc1',               # Methyl group directly attached
    ]
    
    # Rule 5: Nitrogen-containing heterocyclic carboxylic acids
    nitrogen_heterocycle_carboxylic_acid = [
        'n1cccc1C(=O)O',             # Pyridine-3-carboxylic acid
        'n1ccnc1C(=O)O',             # Pyrimidine carboxylic acid
        'c1cnc(C(=O)O)cn1',          # Pyrazole-4-carboxylic acid
    ]
    
    # Rule 6: Bulky aromatic systems directly adjacent to the carboxyl group
    bulky_aromatic_adjacent = 'c1ccccc1cC(=O)O'  # Biphenyl carboxylic acid as example
    
    # Rule 7: Aromatic ring bearing coordinating groups connected via flexible chain (3-5 carbons)
    aromatic_with_flexible_chain = [
        '[OX2H][CX4][CX4][CX4][c]',  # Hydroxyl group connected via 3-carbon chain to aromatic ring
        '[NX3H2][CX4][CX4][CX4][c]', # Amino group connected via 3-carbon chain to aromatic ring
    ]
    
    # Rule 8: Flexible polyether chains terminating in carboxylic acid
    polyether_chain = 'OCCOCCOCC(=O)O'  # Polyether chain example
    
    # Rule 9: Additional coordinating groups within three carbons of carboxyl group in aliphatic chains
    coordinating_groups_near_carboxyl = [
        '[C;X4][C;X4][OX2H]',        # Hydroxyl within three carbons of carboxyl
        '[C;X4][C;X4][NX3H2]',       # Amino within three carbons of carboxyl
        '[C;X4][C;X4][SX2H]',        # Thiol within three carbons of carboxyl
    ]
    
    # Rule 10: Strong electron-withdrawing perfluoroalkyl groups adjacent to carboxyl group
    perfluoroalkyl_adjacent = 'C(F)(F)C(=O)O'  # Example with CF2 group
    
    # Rule 11: Functional groups located more than three carbons away from carboxyl group
    distant_functional_groups = [
        '[C;X4][C;X4][C;X4][C;X4][OX2H]',  # Hydroxyl group more than three carbons away
        '[C;X4][C;X4][C;X4][C;X4][NX3H2]', # Amino group more than three carbons away
    ]
    
    # Rule 12: Unbranched medium-chain aliphatic carboxylic acids without additional functional groups
    unbranched_aliphatic_acid = 'CCCCCCCC(=O)O'  # Octanoic acid example
    
    # Rule 13: Aldehyde, ketone, or acylamide groups adjacent to carboxyl group
    adjacent_electrophilic_groups = [
        '[CX3](=O)[CX3H1]',          # Ketone adjacent to carboxyl
        '[CX3H1](=O)[CX3](=O)O',     # Aldehyde adjacent to carboxyl
        'NC(=O)[CX3](=O)O',          # Amide adjacent to carboxyl
    ]
    
    # Rule 14: Conjugated systems adjacent to carboxyl group with heteroatoms
    conjugated_systems_with_heteroatoms = [
        '[c][c][c](=O)O',            # Aromatic system adjacent to carboxyl
        '[c][n][c](=O)O',            # Heteroaromatic adjacent to carboxyl
    ]
    
    # Rule 15: Aromatic carboxylic acids with electron-donating groups serving as coordinating sites
    aromatic_with_donating_groups = [
        'c1ccc(N)cc1C(=O)O',         # Amino group on aromatic ring
        'c1ccc(O)cc1C(=O)O',         # Hydroxyl group on aromatic ring
    ]
    
    # Compile all patterns
    patterns = {
        1: {
            'patterns': [alpha_amino_acid] + coordinating_groups_within_three_carbons,
            'prediction': 1
        },
        2: {
            'patterns': [non_coordinating_alpha_amino_acid],
            'exclude': coordinating_groups_within_three_carbons,
            'prediction': -1
        },
        3: {
            'patterns': [aromatic_carboxylic_acid] + electron_withdrawing_para,
            'prediction': 1
        },
        4: {
            'patterns': electron_donating_direct + [aromatic_carboxylic_acid],
            'prediction': -1
        },
        5: {
            'patterns': nitrogen_heterocycle_carboxylic_acid,
            'prediction': 1
        },
        6: {
            'patterns': [bulky_aromatic_adjacent],
            'prediction': -1
        },
        7: {
            'patterns': aromatic_with_flexible_chain,
            'prediction': 1
        },
        8: {
            'patterns': [polyether_chain],
            'prediction': -1
        },
        9: {
            'patterns': coordinating_groups_near_carboxyl,
            'prediction': 1
        },
        10: {
            'patterns': [perfluoroalkyl_adjacent],
            'prediction': -1
        },
        11: {
            'patterns': distant_functional_groups,
            'prediction': -1
        },
        12: {
            'patterns': [unbranched_aliphatic_acid],
            'prediction': 1
        },
        13: {
            'patterns': adjacent_electrophilic_groups,
            'prediction': -1
        },
        14: {
            'patterns': conjugated_systems_with_heteroatoms,
            'prediction': 1
        },
        15: {
            'patterns': aromatic_with_donating_groups,
            'prediction': 1
        },
    }
    
    # Compile SMARTS patterns
    for rule_num, rule in patterns.items():
        compiled_patterns = []
        for smarts in rule.get('patterns', []):
            mol = Chem.MolFromSmarts(smarts)
            if mol:
                compiled_patterns.append(mol)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude' in rule:
            compiled_excludes = []
            for smarts in rule['exclude']:
                mol = Chem.MolFromSmarts(smarts)
                if mol:
                    compiled_excludes.append(mol)
            rule['compiled_exclude'] = compiled_excludes
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*15)
            continue
        row = []
        for rule_num in range(1,16):
            rule = patterns[rule_num]
            try:
                match = True
                # Check exclude patterns if any
                if 'compiled_exclude' in rule:
                    for pat in rule['compiled_exclude']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for pat in rule['compiled_patterns']:
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {i}' for i in range(1,16)])
    return df
