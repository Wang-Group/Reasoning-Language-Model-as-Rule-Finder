
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: **High Yield** occurs when the modifier is an **amino acid with side chains containing additional carboxylic acid groups or polar heteroaromatic rings with nitrogen heteroatoms**. These functionalities enhance metal coordination through multiple coordination sites.
  - *Examples*: **(2S)-2-aminobutanedioic acid** (Aspartic acid, entry 2), **(2S)-2-aminopentanedioic acid** (Glutamic acid, entry 0), **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (Tryptophan, entry 14).

- **Rule 2**: **Low Yield** occurs when the modifier is an **amino acid with hydrophobic side chains lacking additional coordination sites**, such as aliphatic or aromatic hydrocarbons without heteroatoms. The absence of effective coordination functionalities reduces catalyst interaction.
  - *Examples*: **(2S)-2-amino-3-phenylpropanoic acid** (Phenylalanine, entry 12), **(2S)-6-acetamido-2-aminohexanoic acid** (Lysine derivative, entry 33).

- **Rule 3**: **High Yield** is observed when the modifier is an **aromatic carboxylic acid with electron-donating or coordination-capable substituents at the para position**, such as **amino (–NH₂)**, **hydroxyl (–OH)**, **nitro (–NO₂)**, or **bromomethyl (–CH₂Br)**. These substituents enhance interaction with the catalyst through electron donation and coordination.
  - *Examples*: **4-aminobenzoic acid** (entry 3), **5-(4-hydroxyphenyl)pentanoic acid** (entry 6), **4-nitrobenzoic acid** (entry 20), **4-(bromomethyl)benzoic acid** (entry 1).

- **Rule 4**: **Low Yield** occurs when the modifier is an **aromatic carboxylic acid with electron-withdrawing or non-coordinating substituents at the para position**, such as **methyl (–CH₃)** or **formyl (–CHO)**. These groups do not facilitate effective catalyst interaction due to lack of coordination ability or electron withdrawal.
  - *Examples*: **4-methylbenzoic acid** (entry 22), **4-formylbenzoic acid** (entry 19).

- **Rule 5**: **High Yield** is achieved when the modifier is a **heteroaromatic carboxylic acid**, where the carboxyl group is directly attached to a heteroaromatic ring containing nitrogen or oxygen. Heteroatoms provide additional coordination sites for metal centers.
  - *Examples*: **Pyridine-3-carboxylic acid** (Niacin, entry 21), **1H-pyrazole-4-carboxylic acid** (entry 15), **2-oxo-1H-pyridine-4-carboxylic acid** (Chelidamic acid, entry 7).

- **Rule 6**: **Low Yield** results when the modifier is an **aromatic carboxylic acid with multiple aromatic rings (biaryl systems)**, leading to steric hindrance and reduced flexibility, which impede effective catalyst coordination.
  - *Examples*: **4-pyridin-4-ylbenzoic acid** (entry 11), **2-[(4-hydroxybenzoyl)amino]acetic acid** (entry 26).

- **Rule 7**: **High Yield** is observed with modifiers that are **polyhydroxylated aliphatic carboxylic acids**. Multiple hydroxyl groups can chelate metal centers, enhancing catalyst stability and activity through strong coordination.
  - *Examples*: **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (Gluconic acid, entry 8), **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid** (entry 5).

- **Rule 8**: **Low Yield** occurs when the modifier contains **flexible polyether chains or ether linkages**, such as those resembling polyethylene glycol (PEG). These structures introduce flexibility and steric hindrance, disrupting effective catalyst coordination.
  - *Examples*: **2-[2-(2-methoxyethoxy)ethoxy]acetic acid** (entry 10), **3-[2-(2-aminoethoxy)ethoxy]propanoic acid** (entry 32).

- **Rule 9**: **Low Yield** results when the modifier contains **strongly electron-withdrawing fluorinated groups**, such as **perfluoroalkyl chains** or **trifluoromethyl groups**. These groups withdraw electron density, destabilizing interactions with the metal catalyst.
  - *Examples*: **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid** (entry 13), **4-[(2,2,2-trifluoroacetyl)amino]butanoic acid** (entry 28).

- **Rule 10**: **Low Yield** results when the modifier is an **aliphatic carboxylic acid with distal (ω-position) polar functional groups**, such as **hydroxyl (–OH)** or **amino (–NH₂)** groups. These distal polar groups can interfere with catalyst binding or create unfavorable interactions.
  - *Examples*: **7-hydroxyheptanoic acid** (entry 29), **7-aminoheptanoic acid** (entry 31), **8-aminooctanoic acid** (entry 34).

- **Rule 11**: **High Yield** occurs when the modifier is a **short-chain aliphatic monocarboxylic acid without additional polar functional groups**, allowing unhindered coordination with the catalyst.
  - *Example*: **Octanoic acid** (entry 4).

- **Rule 12**: **Low Yield** occurs when the modifier contains **aldehyde (–CHO) functional groups adjacent to aromatic rings**, which may undergo side reactions or inhibit catalyst function by forming inactive complexes.
  - *Examples*: **4-formylbenzoic acid** (entry 19), **5-formyl-2-hydroxybenzoic acid** (entry 18).

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
1,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0
0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.5428571428571428; Test Accuracy: 0.0
    Train Support: 0.02857142857142857; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 2.058823529411765; Test Lift: NONE
    Train Leverage: 0.014693877551020407; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    '''
    Converts a list of SMILES strings into a feature matrix based on the specified rules.
    Each rule corresponds to a column in the output DataFrame.
    '''
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'High Yield: Amino acids with side chains containing additional carboxylic acid groups or polar heteroaromatic rings with nitrogen heteroatoms.',
            'patterns': [
                '[NX3H2][CX4H][CX3](=O)[OX2H1]',  # Amino acid backbone
                '[CX3](=O)[OX2H1]',                # Additional carboxylic acid group
                '[n]',                             # Heteroaromatic ring with nitrogen
            ],
            'logical_operator': 'and',
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Low Yield: Amino acids with hydrophobic side chains lacking additional coordination sites.',
            'patterns': [
                '[NX3H2][CX4H][CX3](=O)[OX2H1]',  # Amino acid backbone
                '[C;H3,H2][C;H2][C;H2][C;H3]',     # Aliphatic side chain
            ],
            'logical_operator': 'and',
            'prediction': -1
        },
        {
            'number': 3,
            'description': 'High Yield: Aromatic carboxylic acids with electron-donating or coordination-capable substituents at the para position.',
            'patterns': [
                'c1ccc(cc1)[CX3](=O)[OX2H1]',     # Benzoic acid
                '[c][NX3H2]',                     # Amino group on aromatic ring
                '[c][OX2H]',                      # Hydroxyl group on aromatic ring
                '[c][NX3+](=O)[O-]',              # Nitro group on aromatic ring
                '[c]C([Br])[CX3](=O)[OX2H1]',     # Bromomethyl at para position
            ],
            'logical_operator': 'and',
            'prediction': 1
        },
        # Additional rules can be defined here
    ]

    # Compile patterns
    for rule in rules:
        compiled_patterns = []
        for pat in rule['patterns']:
            compiled_patterns.append(Chem.MolFromSmarts(pat))
        rule['compiled_patterns'] = compiled_patterns

    # Initialize results
    results = []

    # Process each SMILES
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # Append zeros in case of failure
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                if rule['logical_operator'] == 'and':
                    match = all([mol.HasSubstructMatch(pat) for pat in rule['compiled_patterns']])
                elif rule['logical_operator'] == 'or':
                    match = any([mol.HasSubstructMatch(pat) for pat in rule['compiled_patterns']])
                else:
                    match = False
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: **High Yield** occurs when the modifier is an **amino acid containing side chains with additional carboxyl or hydroxyl groups**. These groups enhance coordination with the metal center, stabilizing the catalyst and improving yield.
  - *Examples*: **(2S)-2-aminobutanedioic acid** (Aspartic acid, Entry 2), **(2S)-2-aminopentanedioic acid** (Glutamic acid, Entry 0)

- **Rule 2**: **High Yield** is observed when the modifier is an **aromatic carboxylic acid substituted with amino (–NH₂) groups at the para position**. The amino group increases electron density on the aromatic ring, enhancing metal coordination.
  - *Example*: **4-aminobenzoic acid** (Entry 3)

- **Rule 3**: **High Yield** occurs with modifiers that are **heteroaromatic carboxylic acids containing nitrogen atoms capable of coordinating with the metal center**. The heteroatoms facilitate chelation, improving catalyst efficiency.
  - *Examples*: **1H-pyrazole-4-carboxylic acid** (Entry 15), **pyridine-3-carboxylic acid** (Nicotinic acid, Entry 21), **2-oxo-1H-pyridine-4-carboxylic acid** (Chelidamic acid, Entry 7)

- **Rule 4**: **High Yield** is achieved with modifiers that are **polyhydroxylated aliphatic acids** where multiple hydroxyl groups are adjacent to the carboxyl group. These hydroxyl groups provide additional coordination sites for the metal.
  - *Example*: **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (Gluconic acid, Entry 8)

- **Rule 5**: **High Yield** results when the modifier is an **aromatic carboxylic acid substituted with methoxy (–OCH₃) or hydroxyl (–OH) groups on the aromatic ring**, enhancing electron density and metal coordination.
  - *Examples*: **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid** (Entry 25), **5-(4-hydroxyphenyl)pentanoic acid** (Entry 6)

- **Rule 6**: **High Yield** occurs when the modifier is a **simple aliphatic carboxylic acid without additional functional groups** that might interfere with coordination. Its simplicity allows effective interaction with the metal center.
  - *Example*: **Octanoic acid** (Entry 4)

- **Rule 7**: **Low Yield** occurs when the modifier is an **amino acid with hydrophobic side chains lacking additional coordinating groups**, such as aliphatic or aromatic hydrocarbons without heteroatoms. The absence of coordination sites reduces effective metal interaction.
  - *Examples*: **(2S)-2-amino-3-phenylpropanoic acid** (Phenylalanine, Entry 12), **8-aminooctanoic acid** (Entry 34)

- **Rule 8**: **Low Yield** results when the modifier contains **long aliphatic chains with polar functional groups distant from the carboxyl group**, such as hydroxyl or amino groups. The increased flexibility and distance diminish effective coordination with the metal center.
  - *Examples*: **7-hydroxyheptanoic acid** (Entry 29), **7-aminoheptanoic acid** (Entry 31)

- **Rule 9**: **Low Yield** occurs with modifiers containing **flexible polyether chains**, which increase conformational flexibility and reduce effective metal coordination due to entropic factors.
  - *Examples*: **2-[2-(2-methoxyethoxy)ethoxy]acetic acid** (Entry 10), **3-[2-(2-aminoethoxy)ethoxy]propanoic acid** (Entry 32)

- **Rule 10**: **Low Yield** is observed when the modifier contains **thiol (–SH) groups**, which may lead to side reactions or bind irreversibly to the metal center, decreasing catalyst activity.
  - *Example*: **4-sulfanylbenzoic acid** (Entry 9)

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1
0,0,0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.5714285714285714; Test Accuracy: 0.0
    Train Support: 0.05714285714285714; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 2.058823529411765; Test Lift: NONE
    Train Leverage: 0.029387755102040815; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:

def rule2matrix(smiles_list):
    # Define the rules with their associated SMARTS patterns
    rules = [
        {
            'number': 1,
            'description': 'High Yield: Amino acids with side chains containing additional carboxyl or hydroxyl groups.',
            'patterns': [
                Chem.MolFromSmarts('[NX3;H2,H1][CX4;H][CX3](=O)[OX2H1]'),  # Amino acid backbone
                Chem.MolFromSmarts('[CX3](=O)[OX2H1]'),  # Additional carboxyl group
                Chem.MolFromSmarts('[OX2H][CX4]'),  # Additional hydroxyl group
            ],
            'logic': 'and',
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'High Yield: Aromatic carboxylic acid substituted with amino (–NH₂) groups at the para position.',
            'patterns': [
                Chem.MolFromSmarts('c1cc(N)ccc1C(=O)O'),  # Para-amino benzoic acid pattern
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'High Yield: Heteroaromatic carboxylic acids containing nitrogen atoms.',
            'patterns': [
                Chem.MolFromSmarts('c1ncccc1C(=O)O'),  # Pyridine carboxylic acid
                Chem.MolFromSmarts('c1c[nH]c(=O)cc1C(=O)O'),  # Chelidamic acid pattern
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'High Yield: Polyhydroxylated aliphatic acids with multiple hydroxyl groups adjacent to the carboxyl group.',
            'patterns': [
                Chem.MolFromSmarts('C(=O)O[C@H](O)[C@H](O)[C@H](O)CO'),  # Gluconic acid pattern
                Chem.MolFromSmarts('[CX3](=O)[OX2H1][CX4][OX2H][CX4][OX2H][CX4][OX2H]'),  # General polyhydroxylated acid
            ],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'High Yield: Aromatic carboxylic acids substituted with methoxy (–OCH₃) or hydroxyl (–OH) groups on the aromatic ring.',
            'patterns': [
                Chem.MolFromSmarts('c1cc(OC)ccc1C(=O)O'),  # Methoxy substituted
                Chem.MolFromSmarts('c1cc(O)ccc1C(=O)O'),  # Hydroxyl substituted
            ],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'High Yield: Simple aliphatic carboxylic acids without additional functional groups.',
            'patterns': [
                Chem.MolFromSmarts('C(=O)O'),  # Carboxylic acid
            ],
            'exclude_patterns': [
                Chem.MolFromSmarts('[#7,#8,#15,#16,#17,#35,#53]'),  # Exclude N, O, P, S, Cl, Br, I
                Chem.MolFromSmarts('c'),  # Exclude aromatic rings
            ],
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'Low Yield: Amino acids with hydrophobic side chains lacking additional coordinating groups.',
            'patterns': [
                Chem.MolFromSmarts('[NX3;H2,H1][CX4;H][CX3](=O)[OX2H1]'),  # Amino acid backbone
            ],
            'exclude_patterns': [
                Chem.MolFromSmarts('[#7,#8,#15,#16]'),  # Exclude heteroatoms in side chain
            ],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Low Yield: Long aliphatic chains with polar functional groups distant from the carboxyl group.',
            'patterns': [
                Chem.MolFromSmarts('C(=O)OCCCCCC[OX2H,NX3H2]'),  # Carboxylic acid with long chain and polar group
            ],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Low Yield: Modifiers containing flexible polyether chains.',
            'patterns': [
                Chem.MolFromSmarts('[OX2][CX4][CX4][OX2][CX4][CX4][OX2]'),  # Polyether chain
            ],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Low Yield: Modifiers containing thiol (–SH) groups.',
            'patterns': [
                Chem.MolFromSmarts('[SX2H]'),  # Thiol group
            ],
            'prediction': -1
        }
    ]

    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for pat in rule['exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for pat in rule['patterns']:
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=['Rule {}'.format(rule['number']) for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: **High Yield** is observed when the modifier is an **amino acid with side chains containing additional carboxyl groups**, providing multiple coordination sites to the metal center. This enhances catalyst stability and efficiency.
  - *Examples*: **(2S)-2-aminobutanedioic acid** (Aspartic acid, Entry 2), **(2S)-2-aminopentanedioic acid** (Glutamic acid, Entry 0)

- **Rule 2**: **High Yield** occurs when the modifier is an **aromatic carboxylic acid with electron-withdrawing groups at the para position**, such as nitro or bromomethyl groups. These increase the acidity of the carboxyl group, enhancing its ability to coordinate with the metal center.
  - *Examples*: **4-nitrobenzoic acid** (Entry 20), **4-(bromomethyl)benzoic acid** (Entry 1)

- **Rule 3**: **High Yield** is achieved when the modifier is a **heteroaromatic carboxylic acid containing nitrogen atoms capable of coordinating with the metal center**. Nitrogen heteroatoms act as additional coordination sites, stabilizing the catalyst.
  - *Examples*: **pyridine-3-carboxylic acid** (Nicotinic acid, Entry 21), **1H-pyrazole-4-carboxylic acid** (Entry 15), **2-oxo-1H-pyridine-4-carboxylic acid** (Chelidamic acid, Entry 7)

- **Rule 4**: **Low Yield** occurs when the modifier is an **aromatic carboxylic acid with electron-donating groups at the para position**, such as methyl or hydroxyl groups. These decrease the acidity of the carboxyl group, reducing its coordination ability.
  - *Examples*: **4-methylbenzoic acid** (Entry 22), **3-(4-hydroxyphenyl)propanoic acid** (Entry 30)

- **Rule 5**: **Low Yield** results when the modifier contains **aldehyde groups adjacent to the aromatic ring and carboxyl group**. Aldehyde groups may interfere with metal coordination or participate in side reactions, hindering catalyst performance.
  - *Examples*: **4-formylbenzoic acid** (Entry 19), **5-formyl-2-hydroxybenzoic acid** (Entry 18)

- **Rule 6**: **Low Yield** is observed with modifiers containing **long aliphatic chains with polar functional groups distant from the carboxyl group**, such as terminal hydroxyl or amino groups. The increased flexibility and distance reduce effective metal coordination.
  - *Examples*: **7-hydroxyheptanoic acid** (Entry 29), **8-aminooctanoic acid** (Entry 34), **7-aminoheptanoic acid** (Entry 31)

- **Rule 7**: **High Yield** occurs when the modifier is an **aliphatic carboxylic acid with multiple hydroxyl groups near the carboxyl group**. These hydroxyl groups provide additional coordination sites, enhancing interaction with the metal center.
  - *Example*: **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (Gluconic acid, Entry 8)

- **Rule 8**: **Low Yield** is observed when the modifier contains **flexible ether linkages or polyether chains**, which increase conformational flexibility and reduce effective metal coordination due to entropic factors.
  - *Examples*: **2-[2-(2-methoxyethoxy)ethoxy]acetic acid** (Entry 10), **3-[2-(2-aminoethoxy)ethoxy]propanoic acid** (Entry 32)

- **Rule 9**: **High Yield** is achieved with modifiers that have **thiol (–SH) groups near the carboxyl group**, providing additional coordination sites without causing detrimental side reactions. This enhances catalyst stability.
  - *Example*: **3-sulfanylpropanoic acid** (Entry 17)

- **Rule 10**: **Low Yield** occurs when the modifier is an **amino acid with hydrophobic side chains lacking additional coordinating groups**, such as phenyl or aliphatic chains without heteroatoms. The absence of coordination sites reduces effective metal interaction.
  - *Examples*: **(2S)-2-amino-3-phenylpropanoic acid** (Phenylalanine, Entry 12), **(2S)-6-acetamido-2-aminohexanoic acid** (Entry 33)

- **Rule 11**: **High Yield** is observed with modifiers featuring **fused aromatic ring systems with potential coordination sites**, such as indole or benzofuran rings. These structures enhance interaction with the metal center.
  - *Examples*: **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (Tryptophan, Entry 14), **1,3-dioxo-2-benzofuran-5-carboxylic acid** (Entry 16)

- **Rule 12**: **High Yield** occurs when the modifier is an **aromatic or aliphatic carboxylic acid substituted with hydroxyl (–OH) or methoxy (–OCH₃) groups positioned to enhance coordination**. These groups act as additional coordination sites.
  - *Examples*: **5-(4-hydroxyphenyl)pentanoic acid** (Entry 6), **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid** (Entry 25)

- **Rule 13**: **Low Yield** results when the modifier contains **strong electron-withdrawing groups such as multiple fluorines**, which decrease electron density on the carboxylate, reducing coordination capability.
  - *Example*: **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid** (Entry 13)

- **Rule 14**: **High Yield** can be achieved with **simple aliphatic carboxylic acids without interfering functional groups**, allowing effective coordination with the metal center due to minimal steric hindrance.
  - *Example*: **octanoic acid** (Entry 4)

- **Rule 15**: **Low Yield** occurs when the modifier may **chelate the metal center too strongly**, potentially deactivating it. Over-chelation can inhibit the catalytic activity.
  - *Example*: **4-pyridin-4-ylbenzoic acid** (Entry 11)

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
1,0,0,0,0,0,0,0,0,0,0,1,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,1,0,0,0
1,0,0,0,0,0,0,0,0,0,0,1,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,1,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
0,0,0,-1,0,0,0,0,1,0,0,1,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,1,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,1,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
0,0,1,-1,0,0,0,0,0,0,1,1,0,0,0
0,0,0,0,0,0,0,0,0,0,1,1,0,0,0
0,0,0,-1,0,0,0,-1,0,0,1,1,0,0,0
0,0,0,0,0,0,0,0,1,0,0,1,0,0,0
0,0,0,-1,-1,0,0,0,0,0,0,1,0,0,0
0,0,0,-1,-1,0,0,0,0,0,0,1,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
0,0,0,-1,0,0,0,-1,0,0,0,1,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,1,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,1,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,1,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,1,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6857142857142857; Test Accuracy: 0.0
    Train Support: 0.09714285714285714; Test Support: 0.0
    Train Confidence: 0.8066666666666666; Test Confidence: 0.5
    Train Lift: 1.614270152505447; Test Lift: NONE
    Train Leverage: 0.02155102040816327; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and substructures
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    amino_acid_backbone = '[NX3;H2][CX4][CX3](=O)[OX2H1]'
    additional_carboxylic_acid = '[CX3](=O)[OX2H1]'
    aromatic_ring = 'c1ccccc1'
    electron_withdrawing_groups = ['[NX3+(=O)[O-]]', '[F,Cl,Br,I]', '[CX3](=O)[OX1]']  # Nitro, halogens, carbonyl
    electron_donating_groups = ['[OX2H]', '[OX2][CH3]', '[NX3;H2]', '[NX3;H1][#6]']  # Hydroxyl, methoxy, amino groups
    heteroaromatic_ring = '[n,o,s]1cccc1'
    aldehyde_group = '[CX3H1](=O)'
    long_aliphatic_chain = '[CH2][CH2][CH2][CH2][CH2]'
    hydroxyl_near_carboxyl = '[#6][CX3](=O)[OX2H1][#6][OX2H]'  # Hydroxyl within one bond from carboxylic acid
    ether_linkage = '[OD2]([#6])[#6]'
    thiol_group = '[#16X2H]'
    fused_aromatic_ring = '*1***[*R]1'  # Simplified pattern for fused ring
    multiple_fluorines = '[#6][F][F][F]'  # Trifluoromethyl as example
    chelating_groups = '[#7,#8,#16][#6][#7,#8,#16]'  # Two donor atoms connected via carbon
    # Compile SMARTS patterns
    smarts_patterns = {
        'carboxylic_acid': Chem.MolFromSmarts(carboxylic_acid),
        'amino_acid_backbone': Chem.MolFromSmarts(amino_acid_backbone),
        'additional_carboxylic_acid': Chem.MolFromSmarts(additional_carboxylic_acid),
        'aromatic_ring': Chem.MolFromSmarts(aromatic_ring),
        'heteroaromatic_ring': Chem.MolFromSmarts(heteroaromatic_ring),
        'aldehyde_group': Chem.MolFromSmarts(aldehyde_group),
        'long_aliphatic_chain': Chem.MolFromSmarts(long_aliphatic_chain),
        'hydroxyl_near_carboxyl': Chem.MolFromSmarts(hydroxyl_near_carboxyl),
        'ether_linkage': Chem.MolFromSmarts(ether_linkage),
        'thiol_group': Chem.MolFromSmarts(thiol_group),
        'fused_aromatic_ring': Chem.MolFromSmarts(fused_aromatic_ring),
        'multiple_fluorines': Chem.MolFromSmarts(multiple_fluorines),
        'chelating_groups': Chem.MolFromSmarts(chelating_groups),
    }
    # Electron-withdrawing groups
    ewg_patterns = [Chem.MolFromSmarts(pat) for pat in electron_withdrawing_groups]
    # Electron-donating groups
    edg_patterns = [Chem.MolFromSmarts(pat) for pat in electron_donating_groups]
    # Define the rules
    rules = [
        {
            'number': 1,
            'description': 'High Yield when the modifier is an amino acid with side chains containing additional carboxyl groups.',
            'patterns': [
                smarts_patterns['amino_acid_backbone'],
            ],
            'additional_counts': {
                smarts_patterns['carboxylic_acid']: 2,
            },
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'High Yield when the modifier is an aromatic carboxylic acid with electron-withdrawing groups at the para position.',
            'patterns': [
                smarts_patterns['aromatic_ring'],
                smarts_patterns['carboxylic_acid'],
            ],
            'ewg_patterns': ewg_patterns,
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'High Yield when the modifier is a heteroaromatic carboxylic acid containing nitrogen atoms capable of coordinating with the metal center.',
            'patterns': [
                smarts_patterns['heteroaromatic_ring'],
                smarts_patterns['carboxylic_acid'],
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Low Yield when the modifier is an aromatic carboxylic acid with electron-donating groups at the para position.',
            'patterns': [
                smarts_patterns['aromatic_ring'],
                smarts_patterns['carboxylic_acid'],
            ],
            'edg_patterns': edg_patterns,
            'prediction': -1
        },
        {
            'number': 5,
            'description': 'Low Yield when the modifier contains aldehyde groups adjacent to the aromatic ring and carboxyl group.',
            'patterns': [
                smarts_patterns['aromatic_ring'],
                smarts_patterns['carboxylic_acid'],
                smarts_patterns['aldehyde_group'],
            ],
            'prediction': -1
        },
        {
            'number': 6,
            'description': 'Low Yield observed with modifiers containing long aliphatic chains with polar functional groups distant from the carboxyl group.',
            'patterns': [
                smarts_patterns['long_aliphatic_chain'],
                smarts_patterns['carboxylic_acid'],
            ],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'High Yield when the modifier is an aliphatic carboxylic acid with multiple hydroxyl groups near the carboxyl group.',
            'patterns': [
                smarts_patterns['hydroxyl_near_carboxyl'],
            ],
            'prediction': 1
        },
        {
            'number': 8,
            'description': 'Low Yield observed when the modifier contains flexible ether linkages or polyether chains.',
            'patterns': [
                smarts_patterns['ether_linkage'],
            ],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'High Yield achieved with modifiers that have thiol (–SH) groups near the carboxyl group.',
            'patterns': [
                smarts_patterns['thiol_group'],
                smarts_patterns['carboxylic_acid'],
            ],
            'prediction': 1
        },
        {
            'number': 10,
            'description': 'Low Yield when the modifier is an amino acid with hydrophobic side chains lacking additional coordinating groups.',
            'patterns': [
                smarts_patterns['amino_acid_backbone'],
            ],
            'exclude_patterns': [
                smarts_patterns['carboxylic_acid'],
                Chem.MolFromSmarts('[#7,#8,#16]'),  # Exclude additional donor atoms in side chains
            ],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'High Yield with modifiers featuring fused aromatic ring systems with potential coordination sites.',
            'patterns': [
                smarts_patterns['fused_aromatic_ring'],
                smarts_patterns['carboxylic_acid'],
            ],
            'prediction': 1
        },
        {
            'number': 12,
            'description': 'High Yield occurs when the modifier is an aromatic or aliphatic carboxylic acid substituted with hydroxyl (–OH) or methoxy (–OCH₃) groups positioned to enhance coordination.',
            'patterns': [
                smarts_patterns['carboxylic_acid'],
            ],
            'coordination_groups': edg_patterns,
            'prediction': 1
        },
        {
            'number': 13,
            'description': 'Low Yield results when the modifier contains strong electron-withdrawing groups such as multiple fluorines.',
            'patterns': [
                smarts_patterns['multiple_fluorines'],
            ],
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'High Yield can be achieved with simple aliphatic carboxylic acids without interfering functional groups.',
            'patterns': [
                smarts_patterns['carboxylic_acid'],
            ],
            'exclude_patterns': [
                Chem.MolFromSmarts('[!#6]'),  # Exclude heteroatoms
            ],
            'prediction': 1
        },
        {
            'number': 15,
            'description': 'Low Yield occurs when the modifier may chelate the metal center too strongly.',
            'patterns': [
                smarts_patterns['chelating_groups'],
            ],
            'prediction': -1
        },
    ]
    # Initialize results list
    results = []
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for pat in rule['exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for pat in rule['patterns']:
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Check additional counts if any
                if 'additional_counts' in rule:
                    for pat, count in rule['additional_counts'].items():
                        matches = mol.GetSubstructMatches(pat)
                        if len(matches) < count:
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check electron-withdrawing groups
                if 'ewg_patterns' in rule:
                    ewg_match = False
                    for ewg_pat in rule['ewg_patterns']:
                        if mol.HasSubstructMatch(ewg_pat):
                            ewg_match = True
                            break
                    if not ewg_match:
                        match = False
                # Check electron-donating groups
                if 'edg_patterns' in rule:
                    edg_match = False
                    for edg_pat in rule['edg_patterns']:
                        if mol.HasSubstructMatch(edg_pat):
                            edg_match = True
                            break
                    if not edg_match:
                        match = False
                # Check coordination groups
                if 'coordination_groups' in rule:
                    coord_match = False
                    for coord_pat in rule['coordination_groups']:
                        if mol.HasSubstructMatch(coord_pat):
                            coord_match = True
                            break
                    if not coord_match:
                        match = False
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: **High Yield** is achieved when the modifier is an **amino acid with side chains containing additional carboxyl groups or nitrogen-containing heterocycles capable of coordination**, such as aspartic acid, glutamic acid, or tryptophan. These side chains provide multiple coordination sites to the metal center, enhancing catalyst stability and efficiency.
  - *Examples*: **(2S)-2-aminobutanedioic acid** *(Aspartic acid, Entry 2)*, **(2S)-2-aminopentanedioic acid** *(Glutamic acid, Entry 0)*, **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** *(Tryptophan, Entry 14)*

- **Rule 2**: **Low Yield** occurs when the modifier is an **aromatic carboxylic acid with electron-donating groups at the para position**, such as methyl or phenolic hydroxyl groups. These groups decrease the acidity of the carboxyl group and reduce its ability to effectively coordinate with the metal center.
  - *Examples*: **4-methylbenzoic acid** *(Entry 22)*, **3-(4-hydroxyphenyl)propanoic acid** *(Entry 30)*

- **Rule 3**: **High Yield** is observed with modifiers that are **aromatic carboxylic acids featuring amino groups at the para position**, where the amino group can act as an additional coordination site, enhancing metal binding and catalyst performance.
  - *Example*: **4-aminobenzoic acid** *(Entry 3)*

- **Rule 4**: **Low Yield** results when the modifier contains **aldehyde groups adjacent to aromatic rings and carboxyl groups**, such as in formylbenzoic acids. Aldehyde groups may interfere with metal coordination or participate in side reactions, hindering catalyst efficiency.
  - *Examples*: **4-formylbenzoic acid** *(Entry 19)*, **5-formyl-2-hydroxybenzoic acid** *(Entry 18)*

- **Rule 5**: **Low Yield** is observed with modifiers containing **long aliphatic chains (seven carbons or more) with polar functional groups distant from the carboxyl group**, such as terminal hydroxyl or amino groups. The increased chain length and flexibility reduce effective metal coordination due to steric and entropic factors.
  - *Examples*: **7-hydroxyheptanoic acid** *(Entry 29)*, **7-aminoheptanoic acid** *(Entry 31)*, **8-aminooctanoic acid** *(Entry 34)*

- **Rule 6**: **High Yield** occurs with **simple aliphatic carboxylic acids lacking additional interfering functional groups**, allowing effective coordination with the metal center due to minimal steric hindrance and optimal spatial orientation.
  - *Example*: **octanoic acid** *(Entry 4)*

- **Rule 7**: **Low Yield** results when the modifier contains **flexible ether linkages or polyether chains**, such as poly(ethylene glycol) analogs. These structures increase conformational flexibility and create entropic barriers, reducing effective metal coordination.
  - *Examples*: **2-[2-(2-methoxyethoxy)ethoxy]acetic acid** *(Entry 10)*, **3-[2-(2-aminoethoxy)ethoxy]propanoic acid** *(Entry 32)*

- **Rule 8**: **High Yield** is achieved when the modifier is a **heteroaromatic carboxylic acid containing nitrogen atoms positioned to coordinate with the metal center**. Nitrogen heteroatoms act as additional Lewis bases, stabilizing the catalyst through chelation without causing excessive steric hindrance.
  - *Examples*: **pyridine-3-carboxylic acid** *(Nicotinic acid, Entry 21)*, **1H-pyrazole-4-carboxylic acid** *(Entry 15)*, **2-oxo-1H-pyridine-4-carboxylic acid** *(Chelidamic acid, Entry 7)*

- **Rule 9**: **Low Yield** occurs when the modifier may **over-chelate or strongly bind to the metal center**, potentially deactivating it or hindering catalytic activity due to steric hindrance or excessive coordination. Modifiers with multiple aromatic rings and multiple coordinating groups can cause this effect.
  - *Example*: **4-pyridin-4-ylbenzoic acid** *(Entry 11)*

- **Rule 10**: **High Yield** is observed with modifiers containing **aliphatic thiol (–SH) groups adjacent to the carboxyl group**, providing additional coordination sites without significant steric hindrance. Thiol groups enhance interaction with the metal center through strong metal-sulfur bonds.
  - *Example*: **3-sulfanylpropanoic acid** *(Entry 17)*

- **Rule 11**: **Low Yield** is observed when the modifier contains **perfluorinated alkyl groups adjacent to the carboxyl group**. The strong electron-withdrawing effect of fluorine atoms decreases the nucleophilicity of the carboxylate oxygen and may introduce steric hindrance, reducing the ability to coordinate with the metal center.
  - *Example*: **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid** *(Entry 13)*

- **Rule 12**: **High Yield** is achieved with modifiers that have **multiple hydroxyl groups adjacent to the carboxyl group without flexible ether linkages**, such as polyhydroxy acids. The presence of several hydroxyl groups enhances coordination through multiple hydrogen bonds or direct coordination, stabilizing the catalyst.
  - *Example*: **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** *(Gluconic acid, Entry 8)*

- **Rule 13**: **Low Yield** occurs with modifiers that are **amino acids possessing hydrophobic side chains without additional coordinating functional groups**, leading to diminished interaction with the metal center due to lack of auxiliary coordination sites.
  - *Examples*: **(2S)-2-amino-3-phenylpropanoic acid** *(Phenylalanine, Entry 12)*, **(2S)-6-acetamido-2-aminohexanoic acid** *(Entry 33)*

- **Rule 14**: **High Yield** is observed when modifiers contain **aromatic groups linked via longer aliphatic chains (four carbons or more)**, distancing potential steric hindrance from the metal coordination site at the carboxyl group. This allows the carboxyl group to effectively coordinate without interference from bulky groups.
  - *Examples*: **5-(4-hydroxyphenyl)pentanoic acid** *(Entry 6)*, **4-pyridin-4-ylbutanoic acid** *(Entry 24)*

- **Rule 15**: **Low Yield** results when the modifier contains **amide functionalities involving the carboxyl group**, converting it into an amide bond. This transformation reduces or eliminates the ability of the original carboxyl group to coordinate with the metal center.
  - *Example*: **2-[(4-hydroxybenzoyl)amino]acetic acid** *(Entry 26)*

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,1,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,0,0,1,0
0,0,0,0,0,1,0,1,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
1,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,-1,0,0,0,0
1,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,1,0,0,0,0,0,0,0
0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,0,0,0,-1
0,0,0,0,0,1,0,1,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,0,0,0,-1
0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,0,0,0,-1
0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
1,0,0,0,0,1,0,0,0,0,0,0,-1,0,-1
0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.8285714285714286; Test Accuracy: 1.0
    Train Support: 0.11428571428571428; Test Support: 0.14285714285714285
    Train Confidence: 0.867391304347826; Test Confidence: 0.5714285714285714
    Train Lift: 1.707374254049446; Test Lift: NONE
    Train Leverage: 0.031370262390670554; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and substructures
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1]'
    
    # Amino group (-NH2)
    primary_amino = '[NX3][H][H]'
    amino_acid_alpha = '[NX3][CX4H]([*])[CX3](=O)[OX1H0-,OX2H1]'
    
    # Additional carboxyl groups
    additional_carboxylic_acid = '[#6][CX3](=O)[OX1H0-,OX2H1]'
    
    # Nitrogen-containing heterocycles
    nitrogen_heterocycle = '[n]'
    
    # Aromatic ring with electron-donating groups at para position (e.g., methyl or hydroxyl)
    para_methyl = 'c1ccc(cc1)[CX4H3]'
    para_hydroxyl = 'c1ccc(cc1)[OX2H]'
    
    # Aromatic carboxylic acid
    aromatic_carboxylic_acid = 'c1ccccc1C(=O)[OX1H0-,OX2H1]'
    
    # Amino group at para position on aromatic ring
    para_amino = 'c1ccc(cc1)[NX3][H][H]'
    
    # Aldehyde group adjacent to aromatic ring
    aromatic_aldehyde = 'c1cc([CX3H1]=O)ccc1'
    
    # Long aliphatic chain (seven or more carbons) with polar functional group at the end
    long_aliphatic_chain = '[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[*]'
    terminal_hydroxyl = '[OX2H]'
    terminal_amino = '[NX3][H][H]'
    
    # Ether linkages or polyether chains
    ether_linkage = '[#6][OX2][#6]'
    polyether_chain = '([#6][OX2])+[#6]'
    
    # Heteroaromatic carboxylic acid containing nitrogen atoms
    heteroaromatic_nitrogen = '[n]1ccccc1'
    
    # Multiple aromatic rings and coordinating groups (may over-chelate)
    multiple_aromatic_rings = 'c1ccccc1c2ccccc2'
    multiple_coordinating_groups = '[$([nX2H0]),$([OX2H]),$([SX2H])]'
    
    # Aliphatic thiol group adjacent to carboxyl group
    adjacent_thiol = '[SX2H][CX4][CX3](=O)[OX1H0-,OX2H1]'
    
    # Perfluorinated alkyl groups adjacent to carboxyl group
    perfluoro_alkyl = '[CX4]([F,Cl,Br,I])([F,Cl,Br,I])[CX4]([F,Cl,Br,I])([F,Cl,Br,I])[CX3](=O)[OX1H0-,OX2H1]'
    
    # Multiple hydroxyl groups adjacent to carboxyl group
    multiple_adjacent_hydroxyls = '[CX4]([OX2H])[CX4]([OX2H])[CX3](=O)[OX1H0-,OX2H1]'
    
    # Amino acids with hydrophobic side chains and no additional coordinating groups
    hydrophobic_side_chain = '[CX4][CX4][CX4][CX3](=O)[OX1H0-,OX2H1]'
    
    # Aromatic group linked via longer aliphatic chains (four or more carbons)
    aromatic_long_chain = 'c1ccccc1CCCC[CX3](=O)[OX1H0-,OX2H1]'
    
    # Amide functionalities involving the carboxyl group
    amide_bond = '[CX3](=O)[NX3]'
    
    # Rules definition
    rules = [
        {
            'number': 1,
            'description': 'High Yield: Amino acid with side chains containing additional carboxyl groups or nitrogen-containing heterocycles.',
            'patterns': [amino_acid_alpha],
            'additional_patterns': [additional_carboxylic_acid, nitrogen_heterocycle],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Low Yield: Aromatic carboxylic acid with electron-donating groups at the para position (methyl or hydroxyl).',
            'patterns': [aromatic_carboxylic_acid],
            'additional_patterns': [para_methyl, para_hydroxyl],
            'prediction': -1
        },
        {
            'number': 3,
            'description': 'High Yield: Aromatic carboxylic acids with amino groups at the para position.',
            'patterns': [aromatic_carboxylic_acid, para_amino],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Low Yield: Modifier contains aldehyde groups adjacent to aromatic rings and carboxyl groups.',
            'patterns': [aromatic_carboxylic_acid, aromatic_aldehyde],
            'prediction': -1
        },
        {
            'number': 5,
            'description': 'Low Yield: Modifier contains long aliphatic chains (≥7 carbons) with polar functional groups distant from the carboxyl group.',
            'patterns': [long_aliphatic_chain],
            'additional_patterns': [terminal_hydroxyl, terminal_amino],
            'prediction': -1
        },
        {
            'number': 6,
            'description': 'High Yield: Simple aliphatic carboxylic acids lacking additional interfering functional groups.',
            'patterns': [carboxylic_acid],
            'exclude_patterns': [primary_amino, ether_linkage, aromatic_carboxylic_acid],
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'Low Yield: Modifier contains flexible ether linkages or polyether chains.',
            'patterns': [carboxylic_acid, ether_linkage],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'High Yield: Heteroaromatic carboxylic acid containing nitrogen atoms positioned to coordinate.',
            'patterns': [carboxylic_acid, heteroaromatic_nitrogen],
            'prediction': 1
        },
        {
            'number': 9,
            'description': 'Low Yield: Modifier may over-chelate or strongly bind to the metal center.',
            'patterns': [multiple_aromatic_rings, multiple_coordinating_groups],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'High Yield: Modifier contains aliphatic thiol (-SH) groups adjacent to the carboxyl group.',
            'patterns': [adjacent_thiol],
            'prediction': 1
        },
        {
            'number': 11,
            'description': 'Low Yield: Modifier contains perfluorinated alkyl groups adjacent to the carboxyl group.',
            'patterns': [perfluoro_alkyl],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'High Yield: Modifier has multiple hydroxyl groups adjacent to the carboxyl group without flexible ether linkages.',
            'patterns': [multiple_adjacent_hydroxyls],
            'exclude_patterns': [ether_linkage],
            'prediction': 1
        },
        {
            'number': 13,
            'description': 'Low Yield: Amino acids possessing hydrophobic side chains without additional coordinating functional groups.',
            'patterns': [amino_acid_alpha, hydrophobic_side_chain],
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'High Yield: Modifiers contain aromatic groups linked via longer aliphatic chains (≥4 carbons).',
            'patterns': [aromatic_long_chain],
            'prediction': 1
        },
        {
            'number': 15,
            'description': 'Low Yield: Modifier contains amide functionalities involving the carboxyl group.',
            'patterns': [amide_bond],
            'prediction': -1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for smarts in rule.get('patterns', []):
            mol = Chem.MolFromSmarts(smarts)
            compiled_patterns.append(mol)
        rule['compiled_patterns'] = compiled_patterns
        # Compile additional patterns if any
        if 'additional_patterns' in rule:
            compiled_additional = []
            for smarts in rule['additional_patterns']:
                mol = Chem.MolFromSmarts(smarts)
                compiled_additional.append(mol)
            rule['compiled_additional'] = compiled_additional
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for smarts in rule['exclude_patterns']:
                mol = Chem.MolFromSmarts(smarts)
                compiled_excludes.append(mol)
            rule['compiled_exclude_patterns'] = compiled_excludes
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for pat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for pat in rule['compiled_patterns']:
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Check additional patterns (at least one must match)
                if 'compiled_additional' in rule:
                    additional_match = False
                    for pat in rule['compiled_additional']:
                        if mol.HasSubstructMatch(pat):
                            additional_match = True
                            break
                    if not additional_match:
                        match = False
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df
--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1 (High Yield)**: Modifiers that are **α-amino dicarboxylic acids** with **short aliphatic chains**. The proximity of two carboxyl groups and an amino group provides multiple coordination sites, enhancing metal binding and catalyst performance.
  - *Examples*: **(2S)-2-aminobutanedioic acid** *(Aspartic acid, Entry 2)*, **(2S)-2-aminopentanedioic acid** *(Glutamic acid, Entry 0)*

- **Rule 2 (High Yield)**: Modifiers that are **aromatic carboxylic acids with electron-withdrawing substituents at the para position**, such as **nitro**, **bromo**, or **amino groups**. These substituents increase the acidity of the carboxyl group, improving metal coordination.
  - *Examples*: **4-nitrobenzoic acid** *(Entry 20)*, **4-(bromomethyl)benzoic acid** *(Entry 1)*, **4-aminobenzoic acid** *(Entry 3)*

- **Rule 3 (Low Yield)**: Modifiers that are **aromatic carboxylic acids with electron-donating substituents at the para position**, such as **methyl** or **methoxy groups**, which decrease the acidity of the carboxyl group and weaken metal coordination.
  - *Examples*: **4-methylbenzoic acid** *(Entry 22)*, **3-(4-hydroxyphenyl)propanoic acid** *(Entry 30)*

- **Rule 4 (High Yield)**: Modifiers containing **heteroaromatic rings with nitrogen atoms** capable of coordinating with the metal center, enhancing interaction and catalyst activity.
  - *Examples*: **pyridine-3-carboxylic acid** *(Nicotinic acid, Entry 21)*, **1H-pyrazole-4-carboxylic acid** *(Entry 15)*, **2-oxo-1H-pyridine-4-carboxylic acid** *(Entry 7)*

- **Rule 5 (Low Yield)**: Modifiers that are **aliphatic carboxylic acids with long carbon chains (more than 6 carbons) and lacking additional coordinating groups**, leading to steric hindrance and reduced coordination efficiency.
  - *Examples*: **7-hydroxyheptanoic acid** *(Entry 29)*, **7-aminoheptanoic acid** *(Entry 31)*, **8-aminooctanoic acid** *(Entry 34)*

- **Rule 6 (High Yield)**: Modifiers where a **flexible aliphatic chain connects the carboxyl group to a coordinating functional group** (e.g., **hydroxyl**, **amino**) located **three or more carbons away**, allowing optimal flexibility for coordination without steric hindrance.
  - *Example*: **5-(4-hydroxyphenyl)pentanoic acid** *(Entry 6)*

- **Rule 7 (Low Yield)**: Modifiers containing **oligoether chains or flexible ether linkages**, which introduce conformational flexibility and entropic barriers that hinder effective metal coordination.
  - *Examples*: **2-[2-(2-methoxyethoxy)ethoxy]acetic acid** *(Entry 10)*, **3-[2-(2-aminoethoxy)ethoxy]propanoic acid** *(Entry 32)*

- **Rule 8 (Low Yield)**: Modifiers with **functional groups that can interfere with metal coordination**, such as **aldehydes**, **ketones**, or **amides** adjacent to the carboxyl group. These groups may form internal hydrogen bonds or compete for metal binding, reducing catalyst efficiency.
  - *Examples*: **4-formylbenzoic acid** *(Entry 19)*, **4-oxoheptanedioic acid** *(Entry 27)*, **2-[(4-hydroxybenzoyl)amino]acetic acid** *(Entry 26)*

- **Rule 9 (High Yield)**: Modifiers with **multiple hydroxyl groups** in close proximity to the carboxyl group, providing additional coordination through oxygen atoms and enhancing metal binding.
  - *Example*: **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** *(Gluconic acid, Entry 8)*

- **Rule 10 (High Yield)**: Modifiers that are **amino acids with aromatic side chains capable of additional coordination**, such as **indole or heterocyclic rings**, enhancing interaction with the metal center.
  - *Example*: **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** *(Tryptophan, Entry 14)*

- **Rule 11 (Low Yield)**: Modifiers that are **amino acids with non-coordinating or hydrophobic side chains**, which do not provide additional coordination sites and thus have reduced metal interaction.
  - *Example*: **(2S)-2-amino-3-phenylpropanoic acid** *(Phenylalanine, Entry 12)*

- **Rule 12 (Low Yield)**: Modifiers with **perfluoroalkyl groups or strong electron-withdrawing substituents** that excessively reduce electron density on coordinating atoms, weakening metal-ligand interactions.
  - *Example*: **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid** *(Entry 13)*

- **Rule 13 (High Yield)**: Modifiers with **thiol groups adjacent to the carboxyl group**, offering additional coordination via sulfur atoms, which strengthen metal binding due to soft-soft interactions.
  - *Example*: **3-sulfanylpropanoic acid** *(Entry 17)*

- **Rule 14 (Low Yield)**: Modifiers where the **thiol group is distant from the carboxyl group or attached to an aromatic ring**, reducing its effectiveness in coordinating with the metal center.
  - *Example*: **4-sulfanylbenzoic acid** *(Entry 9)*

- **Rule 15 (High Yield)**: Modifiers with **conjugated systems or fused ring structures adjacent to the carboxyl group**, such as **benzofuran or indole rings**, allowing for electron delocalization and stronger metal coordination.
  - *Example*: **1,3-dioxo-2-benzofuran-5-carboxylic acid** *(Entry 16)*

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
1,0,0,0,0,1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,-1,0,0,0
1,0,0,1,0,0,0,0,0,1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,-1,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,1,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0
1,0,0,0,-1,1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
1,0,0,0,0,1,0,0,0,0,0,0,0,0,0
1,0,0,0,-1,1,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.7142857142857143; Test Accuracy: 0.0
    Train Support: 0.06666666666666667; Test Support: 0.2222222222222222
    Train Confidence: 0.6574074074074073; Test Confidence: 0.6111111111111112
    Train Lift: 1.3015916243040426; Test Lift: NONE
    Train Leverage: 0.00498866213151928; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for substructures used in rules
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    carboxylate_anion = '[CX3](=O)[O-]'
    primary_amine = '[NX3;H2][#6]'
    secondary_amine = '[NX3;H1][#6][#6]'
    amino_acid_alpha = '[NX3;H2][CX4H]([#6])[CX3](=O)[OX1H0-,OX2H1]'
    aromatic_ring = 'c1ccccc1'
    electron_withdrawing_para = '[cH]-[c]([cH])-[c](=[O,N])[!#1]'
    electron_donating_para = '[cH]-[c]([cH])-[c][OX2H,OX2][#6]'
    heteroaromatic_nitrogen = '[n]1cccc1'
    long_aliphatic_chain = '[CH2]' * 6
    hydroxyl_group = '[OX2H]'
    thiol_adjacent = '[#16X2H][CX3](=O)[OX1H0-,OX2H1]'
    conjugated_system = '[#6]=[#6]-[#6]=[#6]'
    fused_ring_adjacent_carboxyl = '[#6](=O)[OX1H0-,OX2H1][a]1[a][a][a][a][a]1'
    
    # Compile SMARTS patterns
    patterns = {
        'Rule 1': [
            Chem.MolFromSmarts(carboxylic_acid),
            Chem.MolFromSmarts(primary_amine),
            Chem.MolFromSmarts('[#6]-[#6]-[#6]')  # Short aliphatic chain
        ],
        'Rule 2': [
            Chem.MolFromSmarts(carboxylic_acid),
            Chem.MolFromSmarts(electron_withdrawing_para)
        ],
        'Rule 3': [
            Chem.MolFromSmarts(carboxylic_acid),
            Chem.MolFromSmarts(electron_donating_para)
        ],
        'Rule 4': [
            Chem.MolFromSmarts(carboxylic_acid),
            Chem.MolFromSmarts(heteroaromatic_nitrogen)
        ],
        'Rule 5': [
            Chem.MolFromSmarts(carboxylic_acid),
            Chem.MolFromSmarts(long_aliphatic_chain)
        ],
        'Rule 6': [
            Chem.MolFromSmarts(carboxylic_acid),
            Chem.MolFromSmarts(hydroxyl_group),
            Chem.MolFromSmarts('[#6]-[#6]-[#6]-[#6]-[#6]')  # Aliphatic chain of 5 carbons
        ],
        'Rule 7': [
            Chem.MolFromSmarts(carboxylic_acid),
            Chem.MolFromSmarts('[#6][OX2][#6]')  # Ether linkage
        ],
        'Rule 8': [
            Chem.MolFromSmarts(carboxylic_acid),
            Chem.MolFromSmarts('[#6][CX3](=O)[#6]')  # Ketone adjacent to carboxyl
        ],
        'Rule 9': [
            Chem.MolFromSmarts(carboxylic_acid),
            Chem.MolFromSmarts('[OX2H][OX2H]')  # Multiple hydroxyl groups
        ],
        'Rule 10': [
            Chem.MolFromSmarts(carboxylic_acid),
            Chem.MolFromSmarts('[#6][c]1c[cH][nH]c1')  # Indole ring
        ],
        'Rule 11': [
            Chem.MolFromSmarts(carboxylic_acid),
            Chem.MolFromSmarts('[#6][CH2][c]1ccccc1')  # Phenylalanine side chain
        ],
        'Rule 12': [
            Chem.MolFromSmarts(carboxylic_acid),
            Chem.MolFromSmarts('[CX4][F,Cl,Br,I]')  # Perfluoroalkyl group
        ],
        'Rule 13': [
            Chem.MolFromSmarts(carboxylic_acid),
            Chem.MolFromSmarts(thiol_adjacent)
        ],
        'Rule 14': [
            Chem.MolFromSmarts(carboxylic_acid),
            Chem.MolFromSmarts('[#16X2H][c]')  # Thiol on aromatic ring
        ],
        'Rule 15': [
            Chem.MolFromSmarts(fused_ring_adjacent_carboxyl)
        ],
    }
    
    # Initialize the results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(patterns))
            continue
        row = []
        for rule_name, smarts_list in patterns.items():
            try:
                matches = all(mol.HasSubstructMatch(pat) for pat in smarts_list)
                if matches:
                    if 'Rule 3' in rule_name or 'Rule 5' in rule_name or 'Rule 7' in rule_name or 'Rule 8' in rule_name or 'Rule 11' in rule_name or 'Rule 12' in rule_name or 'Rule 14' in rule_name:
                        row.append(-1)  # Low Yield
                    else:
                        row.append(1)   # High Yield
                else:
                    row.append(0)
            except Exception:
                row.append(0)
        results.append(row)
    
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=patterns.keys())
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1 (High Yield)**: Modifiers that are **α-amino dicarboxylic acids**, where an amino group is adjacent to two carboxyl groups on a short aliphatic chain. This configuration offers multiple coordination sites for the metal center, enhancing catalyst performance.
  - *Examples*: **(2S)-2-aminobutanedioic acid** *(Aspartic acid, Entry 2)*, **(2S)-2-aminopentanedioic acid** *(Glutamic acid, Entry 0)*

- **Rule 2 (High Yield)**: Modifiers that are **aromatic carboxylic acids with electron-withdrawing substituents at the para position**, such as **nitro**, **bromo**, or **amino groups**. These substituents increase the acidity of the carboxyl group, improving metal coordination.
  - *Examples*: **4-nitrobenzoic acid** *(Entry 20)*, **4-(bromomethyl)benzoic acid** *(Entry 1)*, **4-aminobenzoic acid** *(Entry 3)*

- **Rule 3 (Low Yield)**: Modifiers that are **aromatic carboxylic acids with electron-donating substituents at the para position**, like **methyl** or **methoxy groups**, which decrease the acidity of the carboxyl group and weaken metal coordination.
  - *Examples*: **4-methylbenzoic acid** *(Entry 22)*, **3-(4-hydroxyphenyl)propanoic acid** *(Entry 30)*

- **Rule 4 (High Yield)**: Modifiers containing **heteroaromatic rings with nitrogen atoms**, such as **pyridine** or **pyrazole**, capable of coordinating with the metal center and enhancing catalyst activity.
  - *Examples*: **pyridine-3-carboxylic acid** *(Nicotinic acid, Entry 21)*, **1H-pyrazole-4-carboxylic acid** *(Entry 15)*, **2-oxo-1H-pyridine-4-carboxylic acid** *(Entry 7)*

- **Rule 5 (Low Yield)**: Modifiers that are **aliphatic carboxylic acids with functional groups (e.g., amino, hydroxy) located more than four carbons away from the carboxyl group**. The distant functional groups are less effective in coordinating with the metal center, reducing catalyst efficiency.
  - *Examples*: **7-hydroxyheptanoic acid** *(Entry 29)*, **7-aminoheptanoic acid** *(Entry 31)*, **8-aminooctanoic acid** *(Entry 34)*

- **Rule 6 (High Yield)**: Modifiers where a **flexible aliphatic chain connects the carboxyl group to an aromatic ring with additional coordinating groups** (e.g., **hydroxy**, **methoxy**). This flexibility allows optimal positioning for metal coordination.
  - *Examples*: **5-(4-hydroxyphenyl)pentanoic acid** *(Entry 6)*, **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid** *(Entry 25)*

- **Rule 7 (Low Yield)**: Modifiers containing **flexible ether linkages or oligoether chains**, which introduce conformational flexibility and entropic barriers that hinder effective metal coordination.
  - *Examples*: **2-[2-(2-methoxyethoxy)ethoxy]acetic acid** *(Entry 10)*, **3-[2-(2-aminoethoxy)ethoxy]propanoic acid** *(Entry 32)*

- **Rule 8 (Low Yield)**: Modifiers with **strong electron-withdrawing groups like perfluoroalkyl chains** attached to the carboxyl group, which excessively reduce electron density on coordinating atoms and weaken metal-ligand interactions.
  - *Example*: **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid** *(Entry 13)*

- **Rule 9 (High Yield)**: Modifiers with **additional coordinating groups adjacent to the carboxyl group**, such as **thiol** or **multiple hydroxyl groups**, enhancing metal coordination through multiple binding sites.
  - *Examples*: **3-sulfanylpropanoic acid** *(Entry 17)*, **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** *(Gluconic acid, Entry 8)*

- **Rule 10 (Low Yield)**: Modifiers with **functional groups that can interfere with metal coordination**, such as **aldehydes**, **ketones**, or **amides** adjacent to the carboxyl group. These groups may form internal hydrogen bonds or compete for metal binding, reducing catalyst efficiency.
  - *Examples*: **4-formylbenzoic acid** *(Entry 19)*, **4-oxoheptanedioic acid** *(Entry 27)*

- **Rule 11 (High Yield)**: Modifiers that are **amino acids with aromatic or heterocyclic side chains capable of additional coordination**, such as **indole rings**, enhancing interaction with the metal center.
  - *Example*: **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** *(Tryptophan, Entry 14)*

- **Rule 12 (Low Yield)**: Modifiers that are **amino acids with hydrophobic side chains lacking coordinating groups**, which do not provide additional sites for metal interaction.
  - *Example*: **(2S)-2-amino-3-phenylpropanoic acid** *(Phenylalanine, Entry 12)*

- **Rule 13 (Low Yield)**: Modifiers with **multiple rigid aromatic rings directly connected without flexible linkers**, leading to steric hindrance and reduced coordination efficiency.
  - *Example*: **4-pyridin-4-ylbenzoic acid** *(Entry 11)*

- **Rule 14 (High Yield)**: Modifiers with **fused aromatic rings or conjugated systems adjacent to the carboxyl group**, such as **benzofuran** or **indole structures**, promoting electron delocalization and stronger metal coordination.
  - *Example*: **1,3-dioxo-2-benzofuran-5-carboxylic acid** *(Entry 16)*

- **Rule 15 (Low Yield)**: Modifiers that are **peptide-like structures or contain amide bonds distant from the carboxyl group**, which may introduce steric hindrance or compete with the carboxyl group for metal binding, reducing catalyst effectiveness.
  - *Examples*: **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid** *(Entry 23)*, **(2S)-6-acetamido-2-aminohexanoic acid** *(Entry 33)*

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6; Test Accuracy: 0.0
    Train Support: 0.08571428571428572; Test Support: 0.0
    Train Confidence: 0.9; Test Confidence: 0.5
    Train Lift: 1.7957516339869284; Test Lift: NONE
    Train Leverage: 0.036326530612244896; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define electron-withdrawing groups (EWGs) and electron-donating groups (EDGs)
    EWG_SMARTS = ['[F]', '[Cl]', '[Br]', '[I]', '[N+](=O)[O-]', '[C]#N', '[CX3](=O)[OX1H0-,OX2H1]', '[S](=O)(=O)[O-]', '[CX4](F)(F)F']
    EDG_SMARTS = ['[OH]', '[OCH3]', '[NH2]', '[CH3]', '[O][CX4H2][CX4H3]']

    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'High Yield: Modifiers that are alpha-amino dicarboxylic acids.',
            'patterns': [
                '[NX3;H2][CX4H]([CX3](=O)[OX1H0-,OX2H1])[CX4][CX3](=O)[OX1H0-,OX2H1]'
            ],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'High Yield: Aromatic carboxylic acids with electron-withdrawing substituents at the para position.',
            'patterns': [],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Low Yield: Aromatic carboxylic acids with electron-donating substituents at the para position.',
            'patterns': [],
            'prediction': -1
        },
        {
            'number': 4,
            'description': 'High Yield: Modifiers containing heteroaromatic rings with nitrogen atoms.',
            'patterns': [
                '[nH]1cccc1',        # Pyrrole
                '[n]1ccccc1',        # Pyridine
                '[nH]1cccnc1',       # Pyrimidine
                '[n]1c[nH]cc1'       # Pyrazole
            ],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Low Yield: Aliphatic carboxylic acids with functional groups more than four carbons away from the carboxyl group.',
            'patterns': [
                '[CX3](=O)[OX1H0-,OX2H1][CX4H2]{4,}[NX3H2,OX2H1]'
            ],
            'prediction': -1
        },
        {
            'number': 6,
            'description': 'High Yield: Flexible aliphatic chains connecting the carboxyl group to an aromatic ring with coordinating groups.',
            'patterns': [
                '[CX3](=O)[OX1H0-,OX2H1][CX4H2][CX4H2][CX4H2][c][$(O),$(OC)]'
            ],
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'Low Yield: Modifiers containing flexible ether linkages or oligoether chains.',
            'patterns': [
                '[CX4H2][OX2][CX4H2][OX2][CX4H2]'  # Ether linkages
            ],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Low Yield: Modifiers with strong electron-withdrawing groups like perfluoroalkyl chains.',
            'patterns': [
                '[CX4]([F])([F])[F]'  # Trifluoromethyl group
            ],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'High Yield: Modifiers with additional coordinating groups adjacent to the carboxyl group.',
            'patterns': [
                '[CX3](=O)[OX1H0-,OX2H1][CX4][$(O),$(S),$(N)]'  # Coordinating groups adjacent to COOH
            ],
            'prediction': 1
        },
        {
            'number': 10,
            'description': 'Low Yield: Modifiers with functional groups that interfere with metal coordination.',
            'patterns': [
                '[CX3](=O)[CX3](=O)[OX1H0-,OX2H1]',  # Adjacent ketone groups
                '[CX3](=O)[NX3][CX3](=O)'            # Amide groups adjacent to COOH
            ],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'High Yield: Amino acids with aromatic or heterocyclic side chains capable of additional coordination.',
            'patterns': [
                '[NX3;H2][CX4H]([CX3](=O)[OX1H0-,OX2H1])[CX4][c]',  # Aromatic side chain
                '[NX3;H2][CX4H]([CX3](=O)[OX1H0-,OX2H1])[CX4][n]'    # Heterocyclic side chain
            ],
            'prediction': 1
        },
        {
            'number': 12,
            'description': 'Low Yield: Amino acids with hydrophobic side chains lacking coordinating groups.',
            'patterns': [
                '[NX3;H2][CX4H]([CX3](=O)[OX1H0-,OX2H1])[CX4][CX4H2]{2,}'  # Aliphatic side chain
            ],
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Low Yield: Modifiers with multiple rigid aromatic rings directly connected.',
            'patterns': [
                'c1ccc(cc1)-c2ccccc2'  # Biphenyl structure
            ],
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'High Yield: Modifiers with fused aromatic rings or conjugated systems adjacent to the carboxyl group.',
            'patterns': [
                'c1ccc2c(c1)ccc(=O)o2'  # Benzofuranone with COOH
            ],
            'prediction': 1
        },
        {
            'number': 15,
            'description': 'Low Yield: Modifiers that are peptide-like structures or contain amide bonds distant from the carboxyl group.',
            'patterns': [
                '[NX3][CX3](=O)[NX3][CX4][CX4][CX3](=O)[OX1H0-,OX2H1]',  # Peptide-like chain
                '[CX3](=O)[NX3][CX3](=O)'                                 # Amide groups
            ],
            'prediction': -1
        }
    ]

    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for patt in rule.get('patterns', []):
            # Handle EWG and EDG substitutions if necessary
            if '[EWG]' in patt or '[EDG]' in patt:
                substituent_list = EWG_SMARTS if '[EWG]' in patt else EDG_SMARTS
                for sub in substituent_list:
                    smarts = patt.replace('[EWG]', sub).replace('[EDG]', sub)
                    mol = Chem.MolFromSmarts(smarts)
                    if mol:
                        compiled_patterns.append(mol)
            else:
                mol = Chem.MolFromSmarts(patt)
                if mol:
                    compiled_patterns.append(mol)
        rule['compiled_patterns'] = compiled_patterns

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match_found = False
                for pat in rule['compiled_patterns']:
                    if mol.HasSubstructMatch(pat):
                        match_found = True
                        break
                if match_found:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    column_names = [f'Rule {rule["number"]}' for rule in rules]
    df = pd.DataFrame(results, columns=column_names)
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

1. **Rule 1 (High Yield)**: Modifiers that are **α-amino acids containing an additional carboxyl group in the side chain**, such as aspartic acid and glutamic acid. The presence of multiple carboxyl groups enhances metal coordination through chelation, increasing catalytic activity.
   - *Examples*: **(2S)-2-aminobutanedioic acid** *(Aspartic acid, Entry 2)*, **(2S)-2-aminopentanedioic acid** *(Glutamic acid, Entry 0)*

2. **Rule 2 (Low Yield)**: Modifiers that are **amino acids with hydrophobic side chains lacking heteroatoms or additional coordinating groups**, such as phenylalanine. The absence of extra coordination sites leads to weaker metal interactions and lower yields.
   - *Example*: **(2S)-2-amino-3-phenylpropanoic acid** *(Phenylalanine, Entry 12)*

3. **Rule 3 (High Yield)**: Modifiers that are **aromatic carboxylic acids with electron-withdrawing substituents at the para position**, such as **nitro**, **bromo**, or **amino** groups. Electron-withdrawing groups increase the acidity of the carboxyl group, enhancing metal coordination and catalytic efficiency.
   - *Examples*: **4-nitrobenzoic acid** *(Entry 20)*, **4-(bromomethyl)benzoic acid** *(Entry 1)*, **4-aminobenzoic acid** *(Entry 3)*

4. **Rule 4 (Low Yield)**: Modifiers that are **aromatic carboxylic acids with electron-donating substituents at the para position**, like **methyl** or **methoxy** groups. Electron-donating groups decrease the acidity of the carboxyl group, weakening metal coordination and reducing yield.
   - *Examples*: **4-methylbenzoic acid** *(Entry 22)*, **3-(4-hydroxyphenyl)propanoic acid** *(Entry 30)*

5. **Rule 5 (High Yield)**: Modifiers containing **nitrogenous heteroaromatic rings with carboxyl groups**, such as **pyridine** or **pyrazole** carboxylic acids. Nitrogen atoms provide additional coordination sites, enhancing metal complex stability and catalytic performance.
   - *Examples*: **pyridine-3-carboxylic acid** *(Nicotinic acid, Entry 21)*, **1H-pyrazole-4-carboxylic acid** *(Entry 15)*

6. **Rule 6 (Low Yield)**: Modifiers with **flexible ether linkages or oligoether chains**, which introduce conformational flexibility that hinders effective metal coordination. The increased mobility reduces the stability of the metal-modifier complex, leading to lower yields.
   - *Examples*: **2-[2-(2-methoxyethoxy)ethoxy]acetic acid** *(Entry 10)*, **3-[2-(2-aminoethoxy)ethoxy]propanoic acid** *(Entry 32)*

7. **Rule 7 (High Yield)**: Modifiers possessing **additional coordinating groups near the carboxyl group**, such as **hydroxyl** or **thiol** groups within three carbons. These groups provide extra binding sites for the metal, stabilizing the catalyst and enhancing reactivity.
   - *Examples*: **3-sulfanylpropanoic acid** *(Entry 17)*, **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** *(Gluconic acid, Entry 8)*

8. **Rule 8 (Low Yield)**: Modifiers with **functional groups adjacent to the carboxyl group that can interfere with metal coordination**, such as **aldehyde**, **ketone**, or **amide** groups. These groups may chelate the metal or form intramolecular interactions, reducing effective coordination.
   - *Examples*: **4-formylbenzoic acid** *(Entry 19)*, **4-oxoheptanedioic acid** *(Entry 27)*

9. **Rule 9 (Low Yield)**: Modifiers that are **aliphatic carboxylic acids with functional groups (e.g., hydroxy, amino) located more than four carbons away from the carboxyl group**. Distant functional groups are less effective in metal coordination, resulting in lower catalytic activity.
   - *Examples*: **7-hydroxyheptanoic acid** *(Entry 29)*, **8-aminooctanoic acid** *(Entry 34)*

10. **Rule 10 (High Yield)**: Modifiers containing **aromatic systems with fused rings or extended conjugation adjacent to the carboxyl group**, such as benzofuran derivatives or indole-containing amino acids. Conjugated systems facilitate electron delocalization, strengthening metal-ligand interactions.
    - *Examples*: **1,3-dioxo-2-benzofuran-5-carboxylic acid** *(Entry 16)*, **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** *(Tryptophan, Entry 14)*

11. **Rule 11 (Low Yield)**: Modifiers with **strong electron-withdrawing perfluoroalkyl groups near the carboxyl group**. These groups excessively withdraw electron density, weakening the coordinating ability of the carboxyl oxygen and decreasing yield.
    - *Example*: **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid** *(Entry 13)*

12. **Rule 12 (High Yield)**: Modifiers where a **flexible aliphatic chain connects the carboxyl group to an aromatic ring with additional coordinating groups**, such as **hydroxy** or **pyridinyl** groups. The chain allows optimal positioning for metal coordination, enhancing catalytic efficiency.
    - *Examples*: **5-(4-hydroxyphenyl)pentanoic acid** *(Entry 6)*, **4-pyridin-4-ylbutanoic acid** *(Entry 24)*

13. **Rule 13 (Low Yield)**: Modifiers that are **peptide-like molecules or contain amide linkages**, which may compete with the carboxyl group for metal binding or introduce steric hindrance, reducing catalyst effectiveness.
    - *Examples*: **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid** *(Entry 23)*, **(2S)-6-acetamido-2-aminohexanoic acid** *(Entry 33)*

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13
0,0,0,0,0,0,1,0,-1,0,0,1,0
1,0,0,0,0,0,1,0,-1,0,0,0,0
0,0,1,0,0,0,1,0,0,0,0,0,0
1,0,0,0,0,0,1,0,0,0,0,0,0
0,0,1,0,0,0,1,0,-1,0,0,0,0
0,0,0,0,0,0,1,0,0,0,0,1,0
0,0,0,0,0,0,1,0,-1,0,0,0,0
0,0,0,0,0,0,1,0,-1,0,0,1,0
0,0,0,0,1,0,1,0,0,0,0,0,0
0,0,0,0,0,0,1,0,-1,0,0,0,0
0,0,0,0,0,0,1,0,0,0,0,0,0
0,0,0,0,0,-1,1,0,0,0,0,0,0
0,0,0,0,1,0,1,0,0,0,0,0,0
0,0,1,0,0,0,1,0,0,0,0,0,0
0,0,0,0,0,0,1,0,0,0,0,0,0
0,0,1,0,1,0,1,0,0,0,0,0,0
0,0,0,0,0,0,1,0,0,0,0,0,0
0,0,0,0,0,0,1,0,0,0,0,0,0
0,0,0,0,0,0,1,0,0,0,0,0,0
0,0,0,0,0,0,1,0,0,0,0,0,0
0,0,0,0,0,0,1,0,0,0,0,0,0
0,0,1,0,0,0,1,0,0,0,0,0,0
0,0,0,0,1,0,1,0,0,0,0,0,0
0,0,0,-1,0,0,1,0,0,0,0,0,0
0,0,0,0,0,0,1,0,-1,0,0,0,-1
0,0,0,0,1,0,1,0,0,0,0,0,0
0,0,0,-1,0,-1,1,0,0,0,0,0,0
0,0,0,0,0,0,1,0,-1,0,0,0,-1
0,0,0,0,0,0,1,0,-1,0,0,0,0
0,0,0,0,0,0,1,0,0,0,0,0,-1
0,0,0,0,0,0,1,0,-1,0,0,1,0
0,0,0,0,0,0,1,0,-1,0,0,0,0
0,0,0,0,0,0,1,0,-1,0,0,1,0
0,0,0,0,0,-1,1,0,-1,0,0,0,0
0,0,0,0,0,0,1,0,0,0,0,1,-1
0,0,0,0,0,0,1,0,-1,0,0,1,0

---------------------------------------------------------------


    Train Accuracy: 0.7428571428571429; Test Accuracy: 0.0
    Train Support: 0.08095238095238096; Test Support: 0.0
    Train Confidence: 0.7944444444444443; Test Confidence: 0.5
    Train Lift: 1.5943173565722588; Test Lift: NONE
    Train Leverage: 0.031156462585034017; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    amino_acid_backbone = '[NX3][CHX4][CX3](=O)[OX2H1]'
    additional_carboxylic_acid = '[CX3](=O)[OX2H1]'
    hydroxy_group = '[OX2H]'
    thiol_group = '[SX2H]'
    ether_linkage = '[#6][OX2][#6]'
    pyridine_ring = '[n][c][c][c][c][c]'
    nitro_group = '[NX3](=O)[O-]'
    bromo_group = '[Br]'
    amino_group = '[NX3;H2]'  # Primary amine
    methyl_group = '[CH3]'
    methoxy_group = '[OX2][CH3]'
    aldehyde_group = '[CX3H1](=O)'
    ketone_group = '[#6][CX3](=O)[#6]'
    amide_group = '[NX3][CX3](=O)[#6]'
    perfluoroalkyl_group = '[CX4](F)(F)(F)'
    aromatic_ring = 'a1aaaaa1'
    indole_ring = 'c1cc2c(cc1)[nH]c2'
    benzofuran_ring = 'c1cc2occc2c1'
    aliphatic_chain = '[CX4H2][CX4H2][CX4H2][CX4H2]'

    # Compile SMARTS patterns
    patterns = {
        'carboxylic_acid': Chem.MolFromSmarts(carboxylic_acid),
        'amino_acid_backbone': Chem.MolFromSmarts(amino_acid_backbone),
        'additional_carboxylic_acid': Chem.MolFromSmarts(additional_carboxylic_acid),
        'hydroxy_group': Chem.MolFromSmarts(hydroxy_group),
        'thiol_group': Chem.MolFromSmarts(thiol_group),
        'ether_linkage': Chem.MolFromSmarts(ether_linkage),
        'pyridine_ring': Chem.MolFromSmarts(pyridine_ring),
        'nitro_group': Chem.MolFromSmarts(nitro_group),
        'bromo_group': Chem.MolFromSmarts(bromo_group),
        'amino_group': Chem.MolFromSmarts(amino_group),
        'methyl_group': Chem.MolFromSmarts(methyl_group),
        'methoxy_group': Chem.MolFromSmarts(methoxy_group),
        'aldehyde_group': Chem.MolFromSmarts(aldehyde_group),
        'ketone_group': Chem.MolFromSmarts(ketone_group),
        'amide_group': Chem.MolFromSmarts(amide_group),
        'perfluoroalkyl_group': Chem.MolFromSmarts(perfluoroalkyl_group),
        'aromatic_ring': Chem.MolFromSmarts(aromatic_ring),
        'indole_ring': Chem.MolFromSmarts(indole_ring),
        'benzofuran_ring': Chem.MolFromSmarts(benzofuran_ring),
        'aliphatic_chain': Chem.MolFromSmarts(aliphatic_chain),
    }

    # Define the rules
    rules = [
        {
            'number': 1,
            'description': 'High Yield: α-amino acids containing an additional carboxyl group in the side chain.',
            'patterns': [
                'amino_acid_backbone',
            ],
            'count_patterns': {
                'additional_carboxylic_acid': 2,
            },
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Low Yield: Amino acids with hydrophobic side chains lacking heteroatoms or additional coordinating groups.',
            'patterns': [
                'amino_acid_backbone',
            ],
            'exclude_patterns': [
                'hydroxy_group',
                'thiol_group',
                'additional_carboxylic_acid',
            ],
            'prediction': -1
        },
        {
            'number': 3,
            'description': 'High Yield: Aromatic carboxylic acids with electron-withdrawing substituents at the para position.',
            'patterns': [
                'aromatic_ring',
                'carboxylic_acid',
                ['nitro_group', 'bromo_group', 'amino_group'],
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Low Yield: Aromatic carboxylic acids with electron-donating substituents at the para position.',
            'patterns': [
                'aromatic_ring',
                'carboxylic_acid',
                ['methyl_group', 'methoxy_group'],
            ],
            'prediction': -1
        },
        {
            'number': 5,
            'description': 'High Yield: Nitrogenous heteroaromatic rings with carboxyl groups.',
            'patterns': [
                'pyridine_ring',
                'carboxylic_acid',
            ],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Low Yield: Modifiers with flexible ether linkages or oligoether chains.',
            'patterns': [
                'ether_linkage',
            ],
            'count_threshold': {
                'ether_linkage': 2,
            },
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'High Yield: Modifiers with additional coordinating groups near the carboxyl group (within three carbons).',
            'patterns': [
                'carboxylic_acid',
                ['hydroxy_group', 'thiol_group'],
            ],
            'within_bonds': 3,
            'prediction': 1
        },
        {
            'number': 8,
            'description': 'Low Yield: Functional groups adjacent to the carboxyl group that interfere with metal coordination.',
            'patterns': [
                'carboxylic_acid',
                ['aldehyde_group', 'ketone_group', 'amide_group'],
            ],
            'adjacent': True,
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Low Yield: Aliphatic carboxylic acids with functional groups more than four carbons away.',
            'patterns': [
                'carboxylic_acid',
                ['hydroxy_group', 'amino_group'],
            ],
            'min_distance': 5,
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'High Yield: Aromatic systems with fused rings or extended conjugation adjacent to the carboxyl group.',
            'patterns': [
                ['indole_ring', 'benzofuran_ring'],
                'carboxylic_acid',
            ],
            'prediction': 1
        },
        {
            'number': 11,
            'description': 'Low Yield: Modifiers with strong electron-withdrawing perfluoroalkyl groups near the carboxyl group.',
            'patterns': [
                'carboxylic_acid',
                'perfluoroalkyl_group',
            ],
            'adjacent': True,
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'High Yield: Flexible aliphatic chain connects carboxyl group to aromatic ring with additional coordinating groups.',
            'patterns': [
                'carboxylic_acid',
                'aliphatic_chain',
                ['hydroxy_group', 'pyridine_ring'],
            ],
            'prediction': 1
        },
        {
            'number': 13,
            'description': 'Low Yield: Peptide-like molecules or contain amide linkages.',
            'patterns': [
                'amide_group',
            ],
            'prediction': -1
        },
    ]

    # Initialize results
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If molecule can't be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns
                if 'exclude_patterns' in rule:
                    for ep in rule['exclude_patterns']:
                        ep_mol = patterns[ep]
                        if mol.HasSubstructMatch(ep_mol):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check patterns
                for pat_list in rule['patterns']:
                    if isinstance(pat_list, list):
                        sub_match = False
                        for pat_name in pat_list:
                            pat_mol = patterns[pat_name]
                            if mol.HasSubstructMatch(pat_mol):
                                sub_match = True
                                break
                        if not sub_match:
                            match = False
                            break
                    else:
                        pat_mol = patterns[pat_list]
                        if not mol.HasSubstructMatch(pat_mol):
                            match = False
                            break
                # Additional conditions
                if match:
                    # Count patterns
                    if 'count_patterns' in rule:
                        for cp_name, cp_count in rule['count_patterns'].items():
                            cp_mol = patterns[cp_name]
                            matches = mol.GetSubstructMatches(cp_mol)
                            if len(matches) < cp_count:
                                match = False
                                break
                    # Count threshold
                    if 'count_threshold' in rule:
                        for ct_name, ct_value in rule['count_threshold'].items():
                            ct_mol = patterns[ct_name]
                            matches = mol.GetSubstructMatches(ct_mol)
                            if len(matches) < ct_value:
                                match = False
                                break
                    # Within bonds condition
                    if 'within_bonds' in rule:
                        within_bonds = rule['within_bonds']
                        fg_matches = [mol.GetSubstructMatches(patterns[pat]) for pat in rule['patterns'][1]]
                        ca_matches = mol.GetSubstructMatches(patterns[rule['patterns'][0]])
                        found = False
                        for ca in ca_matches:
                            for fg_list in fg_matches:
                                for fg in fg_list:
                                    path_length = Chem.GetShortestPath(mol, ca[0], fg[0])
                                    if len(path_length)-1 <= within_bonds:
                                        found = True
                                        break
                                if found:
                                    break
                            if found:
                                break
                        if not found:
                            match = False
                    # Adjacent condition
                    if match and 'adjacent' in rule and rule['adjacent']:
                        fg_matches = [mol.GetSubstructMatches(patterns[pat]) for pat in rule['patterns'][1]]
                        ca_matches = mol.GetSubstructMatches(patterns[rule['patterns'][0]])
                        found = False
                        for ca in ca_matches:
                            for fg_list in fg_matches:
                                for fg in fg_list:
                                    bonds = mol.GetBondBetweenAtoms(ca[0], fg[0])
                                    if bonds:
                                        found = True
                                        break
                                if found:
                                    break
                            if found:
                                break
                        if not found:
                            match = False
                    # Minimum distance condition
                    if match and 'min_distance' in rule:
                        min_distance = rule['min_distance']
                        fg_matches = [mol.GetSubstructMatches(patterns[pat]) for pat in rule['patterns'][1]]
                        ca_matches = mol.GetSubstructMatches(patterns[rule['patterns'][0]])
                        found = False
                        for ca in ca_matches:
                            for fg_list in fg_matches:
                                for fg in fg_list:
                                    path_length = Chem.GetShortestPath(mol, ca[0], fg[0])
                                    if len(path_length)-1 >= min_distance:
                                        found = True
                                        break
                                if found:
                                    break
                            if found:
                                break
                        if not found:
                            match = False
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

1. **Rule 1 (High Yield)**: Modifiers that are **α-amino acids with additional carboxylic acid groups in the side chain**. The presence of multiple carboxylate groups enhances metal chelation, improving catalytic activity.
   - *Examples*: **(2S)-2-aminopentanedioic acid** *(Glutamic acid, Entry 0)*, **(2S)-2-aminobutanedioic acid** *(Aspartic acid, Entry 2)*

2. **Rule 2 (Low Yield)**: Modifiers that are **α-amino acids with hydrophobic side chains lacking additional coordinating groups**. The absence of extra coordination sites reduces metal binding efficiency.
   - *Example*: **(2S)-2-amino-3-phenylpropanoic acid** *(Phenylalanine, Entry 12)*

3. **Rule 3 (High Yield)**: Modifiers that are **aromatic carboxylic acids with electron-withdrawing substituents at the para position**, such as **nitro** or **halogen** groups. These increase the acidity of the carboxyl group, enhancing metal coordination.
   - *Examples*: **4-nitrobenzoic acid** *(Entry 20)*, **4-(bromomethyl)benzoic acid** *(Entry 1)*

4. **Rule 4 (Low Yield)**: Modifiers that are **aromatic carboxylic acids with electron-donating substituents at the para position**, like **methyl** groups. Electron-donating groups decrease the acidity of the carboxyl group, weakening metal coordination.
   - *Example*: **4-methylbenzoic acid** *(Entry 22)*

5. **Rule 5 (Exception to Rule 4, High Yield)**: Modifiers that are **aromatic carboxylic acids with amino groups at the para position**. The amino group, despite being electron-donating, can act as an additional coordination site due to the lone pair on nitrogen.
   - *Example*: **4-aminobenzoic acid** *(Entry 3)*

6. **Rule 6 (Low Yield)**: Modifiers with **bulky aromatic systems adjacent to the carboxyl group**, causing steric hindrance that impedes effective metal coordination.
   - *Example*: **4-pyridin-4-ylbenzoic acid** *(Entry 11)*

7. **Rule 7 (High Yield)**: Modifiers containing **nitrogenous heteroaromatic rings with carboxyl groups**, such as **pyridine** or **pyrazole** carboxylic acids. Nitrogen atoms provide additional coordination sites, enhancing catalyst stability.
   - *Examples*: **pyridine-3-carboxylic acid** *(Nicotinic acid, Entry 21)*, **1H-pyrazole-4-carboxylic acid** *(Entry 15)*

8. **Rule 8 (Low Yield)**: Modifiers with **flexible polyether chains**. The conformational flexibility hinders effective metal coordination, reducing catalytic efficiency.
   - *Examples*: **2-[2-(2-methoxyethoxy)ethoxy]acetic acid** *(Entry 10)*, **3-[2-(2-aminoethoxy)ethoxy]propanoic acid** *(Entry 32)*

9. **Rule 9 (High Yield)**: Modifiers possessing **additional coordinating groups (hydroxyl or thiol) within three carbons of the carboxyl group**. These groups enhance metal binding and stabilize the catalyst.
   - *Examples*: **3-sulfanylpropanoic acid** *(Entry 17)*, **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** *(Gluconic acid, Entry 8)*

10. **Rule 10 (Low Yield)**: Modifiers with **strong electron-withdrawing perfluoroalkyl groups near the carboxyl group**. Excessive electron withdrawal weakens the coordinating ability of the carboxyl oxygen.
    - *Example*: **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid** *(Entry 13)*

11. **Rule 11 (High Yield)**: Modifiers that are **unbranched aliphatic carboxylic acids without additional distant functional groups**, allowing effective coordination through the carboxyl group.
    - *Example*: **octanoic acid** *(Entry 4)*

12. **Rule 12 (Low Yield)**: Modifiers with **long-chain aliphatic carboxylic acids (>6 carbons) having distant functional groups (e.g., hydroxyl, amino) beyond three carbons from the carboxyl group**. Distant groups are less effective in metal coordination.
    - *Examples*: **7-hydroxyheptanoic acid** *(Entry 29)*, **7-aminoheptanoic acid** *(Entry 31)*, **8-aminooctanoic acid** *(Entry 34)*

13. **Rule 13 (High Yield)**: Modifiers with **aromatic rings connected via flexible aliphatic chains bearing coordinating groups on the ring**, facilitating effective metal binding.
    - *Example*: **5-(4-hydroxyphenyl)pentanoic acid** *(Entry 6)*

14. **Rule 14 (Low Yield)**: Modifiers with **aldehyde or ketone groups adjacent to the carboxyl group**. These groups can interfere with metal coordination due to competing interactions.
    - *Examples*: **4-formylbenzoic acid** *(Entry 19)*, **5-formyl-2-hydroxybenzoic acid** *(Entry 18)*

15. **Rule 15 (High Yield)**: Modifiers containing **conjugated systems adjacent to the carboxyl group**, such as **indole** or **benzofuran** rings. Conjugation enhances electron delocalization, strengthening metal-ligand interactions.
    - *Examples*: **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** *(Tryptophan, Entry 14)*, **1,3-dioxo-2-benzofuran-5-carboxylic acid** *(Entry 16)*

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5
0,0,0,0,0
1,0,0,0,0
0,0,1,-1,0
1,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,-1,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,-1,0
0,0,0,0,0
0,0,0,0,0
0,0,0,-1,0
0,0,0,0,0
0,0,0,0,0
0,0,0,-1,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0
0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6; Test Accuracy: 0.0
    Train Support: 0.04285714285714286; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 2.058823529411765; Test Lift: NONE
    Train Leverage: 0.022040816326530613; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and structural features
    
    # Common functional groups
    carboxylic_acid = '[CX3](=O)[OX2H1]'  # Carboxylic acid group
    amino_group = '[NX3;H2,H1;!$(NC=O)]'  # Primary or secondary amine, exclude amides
    alpha_amino_acid = '[NX3;H2,H1][CX4H][CX3](=O)[OX2H1]'  # Alpha amino acid pattern
    hydroxyl_group = '[OX2H]'  # Hydroxyl group
    thiol_group = '[SX2H]'  # Thiol group
    
    aromatic_ring = 'c1ccccc1'  # Benzene ring
    halogen = '[F,Cl,Br,I]'
    nitro_group = '[NX3](=O)[O-]'
    electron_withdrawing_group = '[F,Cl,Br,I,$([NX3](=O)[O-])]'  # Halogens or nitro group
    electron_donating_group = '[OX2H,OX2][#6]'  # Hydroxyl or methoxy group
    para_substituted_aromatic_carboxylic_acid = '[c]1cc([#6])[c][c][c]1C(=O)[O,H]'
    
    # Compile SMARTS patterns
    patterns = {
        'carboxylic_acid': Chem.MolFromSmarts(carboxylic_acid),
        'amino_group': Chem.MolFromSmarts(amino_group),
        'alpha_amino_acid': Chem.MolFromSmarts(alpha_amino_acid),
        'hydroxyl_group': Chem.MolFromSmarts(hydroxyl_group),
        'thiol_group': Chem.MolFromSmarts(thiol_group),
        'aromatic_ring': Chem.MolFromSmarts(aromatic_ring),
        'halogen': Chem.MolFromSmarts(halogen),
        'nitro_group': Chem.MolFromSmarts(nitro_group),
        'electron_withdrawing_group': Chem.MolFromSmarts(electron_withdrawing_group),
        'electron_donating_group': Chem.MolFromSmarts(electron_donating_group),
        'para_substituted_aromatic_carboxylic_acid': Chem.MolFromSmarts(para_substituted_aromatic_carboxylic_acid)
    }
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'High Yield: Modifiers that are α-amino acids with additional carboxylic acid groups in the side chain.',
            'patterns': ['alpha_amino_acid'],
            'additional_counts': {'carboxylic_acid': 2},  # At least 2 carboxylic acid groups
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Low Yield: Modifiers that are α-amino acids with hydrophobic side chains lacking additional coordinating groups.',
            'patterns': ['alpha_amino_acid'],
            'exclude_patterns': ['hydroxyl_group', 'thiol_group', 'amino_group', 'carboxylic_acid'],  # Exclude additional coordinating groups
            'additional_counts': {'carboxylic_acid': 1},  # Only one carboxylic acid group
            'prediction': -1
        },
        {
            'number': 3,
            'description': 'High Yield: Modifiers that are aromatic carboxylic acids with electron-withdrawing substituents at the para position.',
            'patterns': ['para_substituted_aromatic_carboxylic_acid', 'electron_withdrawing_group'],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Low Yield: Modifiers that are aromatic carboxylic acids with electron-donating substituents at the para position.',
            'patterns': ['para_substituted_aromatic_carboxylic_acid', 'electron_donating_group'],
            'prediction': -1
        },
        {
            'number': 5,
            'description': 'High Yield: Modifiers that are aromatic carboxylic acids with amino groups at the para position.',
            'patterns': ['para_substituted_aromatic_carboxylic_acid', 'amino_group'],
            'prediction': 1
        },
        # Define other rules (6 to 15) with appropriate patterns and predictions
    ]
    
    # Compile exclude patterns
    for rule in rules:
        if 'exclude_patterns' in rule:
            rule['compiled_exclude_patterns'] = [patterns[pat] for pat in rule['exclude_patterns']]
        else:
            rule['compiled_exclude_patterns'] = []
        rule['compiled_patterns'] = [patterns[pat] for pat in rule['patterns']]
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns
                for pat in rule['compiled_exclude_patterns']:
                    if mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Check required patterns
                for pat in rule['compiled_patterns']:
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                # Check additional counts if any
                if match and 'additional_counts' in rule:
                    for pat_name, count in rule['additional_counts'].items():
                        pat = patterns[pat_name]
                        matches = mol.GetSubstructMatches(pat)
                        if len(matches) < count:
                            match = False
                            break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df
--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

1. **Rule 1 (High Yield)**: Modifiers that are **α-amino acids with additional coordinating functional groups** (e.g., **carboxyl**, **hydroxyl**, **amino**, **sulfhydryl**) in the side chain within three carbons of the α-carbon. These groups enhance metal coordination through chelation, stabilizing the catalyst.
   - *Examples*: **(2S)-2-aminopentanedioic acid** *(Glutamic acid, Entry 0)*, **(2S)-2-aminobutanedioic acid** *(Aspartic acid, Entry 2)*, **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** *(Tryptophan, Entry 14)*

2. **Rule 2 (Low Yield)**: Modifiers that are **α-amino acids with non-coordinating side chains**, lacking additional donor atoms near the α-carbon. The absence of effective coordinating groups reduces metal-binding efficiency.
   - *Examples*: **(2S)-2-amino-3-phenylpropanoic acid** *(Phenylalanine, Entry 12)*, **(2S)-6-acetamido-2-aminohexanoic acid** *(N-Acetyllysine, Entry 33)*

3. **Rule 3 (High Yield)**: Modifiers that are **aromatic carboxylic acids with electron-withdrawing substituents** (e.g., **nitro**, **halogen**) at the para position. These substituents increase the acidity and coordinating ability of the carboxyl group.
   - *Examples*: **4-nitrobenzoic acid** *(Entry 20)*, **4-(bromomethyl)benzoic acid** *(Entry 1)*

4. **Rule 4 (Low Yield)**: Modifiers that are **aromatic carboxylic acids with electron-donating substituents** (e.g., **methyl**, **methoxy**) directly attached to the aromatic ring without spacer chains. These groups decrease the acidity and coordinating ability of the carboxyl group.
   - *Example*: **4-methylbenzoic acid** *(Entry 22)*

5. **Rule 5 (High Yield)**: Modifiers that are **nitrogen-containing heterocyclic carboxylic acids**, where nitrogen atoms serve as additional coordination sites, enhancing metal binding and catalyst stability.
   - *Examples*: **pyridine-3-carboxylic acid** *(Nicotinic acid, Entry 21)*, **1H-pyrazole-4-carboxylic acid** *(Entry 15)*, **2-oxo-1H-pyridine-4-carboxylic acid** *(Entry 7)*

6. **Rule 6 (Low Yield)**: Modifiers with **bulky aromatic systems directly adjacent to the carboxyl group**, causing steric hindrance that impedes effective metal coordination.
   - *Example*: **4-pyridin-4-ylbenzoic acid** *(Entry 11)*

7. **Rule 7 (High Yield)**: Modifiers where an **aromatic ring bearing additional coordinating groups** (e.g., **hydroxyl**, **amino**) is connected to the carboxyl group via a **flexible aliphatic chain** of 3–5 carbons. The chain reduces steric hindrance, and the coordinating groups enhance metal binding.
   - *Examples*: **5-(4-hydroxyphenyl)pentanoic acid** *(Entry 6)*, **4-pyridin-4-ylbutanoic acid** *(Entry 24)*

8. **Rule 8 (Low Yield)**: Modifiers with **flexible polyether chains** terminating in a carboxylic acid group. The conformational flexibility hinders effective metal coordination, reducing catalytic efficiency.
   - *Examples*: **2-[2-(2-methoxyethoxy)ethoxy]acetic acid** *(Entry 10)*, **3-[2-(2-aminoethoxy)ethoxy]propanoic acid** *(Entry 32)*

9. **Rule 9 (High Yield)**: Modifiers possessing **additional coordinating groups** (e.g., **hydroxyl**, **thiol**, **amino**) within **three carbons of the carboxyl group** in aliphatic chains. These groups enhance metal binding via chelation, stabilizing the catalyst.
   - *Examples*: **3-sulfanylpropanoic acid** *(Entry 17)*, **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid** *(Entry 5)*

10. **Rule 10 (Low Yield)**: Modifiers with **strong electron-withdrawing perfluoroalkyl groups** adjacent to the carboxyl group. Excessive electron withdrawal destabilizes carboxylate-metal interactions, weakening coordination.
     - *Example*: **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid** *(Entry 13)*

11. **Rule 11 (Low Yield)**: Modifiers with **functional groups (e.g., hydroxyl, amino) located more than three carbons away** from the carboxyl group in aliphatic chains. Distant groups are less effective in metal coordination.
     - *Examples*: **7-hydroxyheptanoic acid** *(Entry 29)*, **7-aminoheptanoic acid** *(Entry 31)*, **8-aminooctanoic acid** *(Entry 34)*

12. **Rule 12 (High Yield)**: Modifiers that are **unbranched medium-chain aliphatic carboxylic acids** (e.g., **octanoic acid**) without additional functional groups. The lack of steric hindrance allows effective coordination through the carboxyl group.
     - *Example*: **octanoic acid** *(Entry 4)*

13. **Rule 13 (Low Yield)**: Modifiers with **aldehyde, ketone, or acylamide groups adjacent to the carboxyl group**. These groups can compete with the carboxylate for metal coordination, reducing efficiency.
     - *Examples*: **4-formylbenzoic acid** *(Entry 19)*, **5-formyl-2-hydroxybenzoic acid** *(Entry 18)*, **4-oxoheptanedioic acid** *(Entry 27)*

14. **Rule 14 (High Yield)**: Modifiers containing **conjugated systems adjacent to the carboxyl group**, especially with **heteroatoms** capable of coordination (e.g., **oxygen**, **nitrogen**). Conjugation and heteroatoms enhance electron delocalization and strengthen metal-ligand interactions.
     - *Examples*: **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** *(Tryptophan, Entry 14)*, **1,3-dioxo-2-benzofuran-5-carboxylic acid** *(Entry 16)*

15. **Rule 15 (High Yield)**: Modifiers that are **aromatic carboxylic acids with electron-donating groups that serve as additional coordinating sites** (e.g., **amino**, **hydroxyl**) directly attached to the aromatic ring. These groups can enhance metal coordination through chelation.
     - *Example*: **4-aminobenzoic acid** *(Entry 3)*

**End of Rules**

These rules capture the relationship between molecular modifiers and the yield of the radical-mediated remote δ-C(sp³)–H bond functionalization reaction. By considering functional groups, their positions, and the underlying physicochemical properties, the rules can predict whether a modifier will result in a high or low yield. Modifiers that facilitate effective metal coordination through additional coordinating groups and optimal molecular geometry tend to enhance the catalyst's stability and activity, leading to higher yields. Conversely, modifiers that hinder coordination due to steric effects, lack of coordinating groups, or excessive electron-withdrawing effects often result in lower yields.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,1,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.5142857142857142; Test Accuracy: 0.0
    Train Support: 0.02857142857142857; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 1.9444444444444446; Test Lift: NONE
    Train Leverage: 0.013877551020408165; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for various functional groups and structural features
    
    # Functional groups and patterns for rules
    # Rule 1: α-amino acids with coordinating functional groups within three carbons of the α-carbon
    alpha_amino_acid = '[C@@H](N*)C(=O)O'  # Basic α-amino acid backbone
    coordinating_groups_within_three_carbons = [
        '[C;X4][C;X4][C;X4](O)',     # Hydroxyl group within three carbons
        '[C;X4][C;X4][C;X4](N)',     # Amino group within three carbons
        '[C;X4][C;X4][C;X4](S)',     # Sulfhydryl group within three carbons
        '[C;X4][C;X4](C(=O)O)',     # Carboxyl group within three carbons
    ]
    
    # Rule 2: α-amino acids with non-coordinating side chains
    non_coordinating_alpha_amino_acid = alpha_amino_acid  # Same backbone without additional groups
    
    # Rule 3: Aromatic carboxylic acids with electron-withdrawing substituents at the para position
    aromatic_carboxylic_acid = 'c1ccc(cc1)C(=O)O'
    electron_withdrawing_para = [
        'c1ccc([N+](=O)[O-])cc1',    # Nitro group at para position
        'c1ccc(Br)cc1',              # Bromine at para position
        'c1ccc(Cl)cc1',              # Chlorine at para position
        'c1ccc(F)cc1',               # Fluorine at para position
        'c1ccc(I)cc1',               # Iodine at para position
    ]
    
    # Rule 4: Aromatic carboxylic acids with electron-donating substituents directly attached
    electron_donating_direct = [
        'c1ccc(O)cc1',               # Hydroxyl group directly attached
        'c1ccc(OC)cc1',              # Methoxy group directly attached
        'c1ccc(C)cc1',               # Methyl group directly attached
    ]
    
    # Rule 5: Nitrogen-containing heterocyclic carboxylic acids
    nitrogen_heterocycle_carboxylic_acid = [
        'n1cccc1C(=O)O',             # Pyridine-3-carboxylic acid
        'n1ccnc1C(=O)O',             # Pyrimidine carboxylic acid
        'c1cnc(C(=O)O)cn1',          # Pyrazole-4-carboxylic acid
    ]
    
    # Rule 6: Bulky aromatic systems directly adjacent to the carboxyl group
    bulky_aromatic_adjacent = 'c1ccccc1cC(=O)O'  # Biphenyl carboxylic acid as example
    
    # Rule 7: Aromatic ring bearing coordinating groups connected via flexible chain (3-5 carbons)
    aromatic_with_flexible_chain = [
        '[OX2H][CX4][CX4][CX4][c]',  # Hydroxyl group connected via 3-carbon chain to aromatic ring
        '[NX3H2][CX4][CX4][CX4][c]', # Amino group connected via 3-carbon chain to aromatic ring
    ]
    
    # Rule 8: Flexible polyether chains terminating in carboxylic acid
    polyether_chain = 'OCCOCCOCC(=O)O'  # Polyether chain example
    
    # Rule 9: Additional coordinating groups within three carbons of carboxyl group in aliphatic chains
    coordinating_groups_near_carboxyl = [
        '[C;X4][C;X4][OX2H]',        # Hydroxyl within three carbons of carboxyl
        '[C;X4][C;X4][NX3H2]',       # Amino within three carbons of carboxyl
        '[C;X4][C;X4][SX2H]',        # Thiol within three carbons of carboxyl
    ]
    
    # Rule 10: Strong electron-withdrawing perfluoroalkyl groups adjacent to carboxyl group
    perfluoroalkyl_adjacent = 'C(F)(F)C(=O)O'  # Example with CF2 group
    
    # Rule 11: Functional groups located more than three carbons away from carboxyl group
    distant_functional_groups = [
        '[C;X4][C;X4][C;X4][C;X4][OX2H]',  # Hydroxyl group more than three carbons away
        '[C;X4][C;X4][C;X4][C;X4][NX3H2]', # Amino group more than three carbons away
    ]
    
    # Rule 12: Unbranched medium-chain aliphatic carboxylic acids without additional functional groups
    unbranched_aliphatic_acid = 'CCCCCCCC(=O)O'  # Octanoic acid example
    
    # Rule 13: Aldehyde, ketone, or acylamide groups adjacent to carboxyl group
    adjacent_electrophilic_groups = [
        '[CX3](=O)[CX3H1]',          # Ketone adjacent to carboxyl
        '[CX3H1](=O)[CX3](=O)O',     # Aldehyde adjacent to carboxyl
        'NC(=O)[CX3](=O)O',          # Amide adjacent to carboxyl
    ]
    
    # Rule 14: Conjugated systems adjacent to carboxyl group with heteroatoms
    conjugated_systems_with_heteroatoms = [
        '[c][c][c](=O)O',            # Aromatic system adjacent to carboxyl
        '[c][n][c](=O)O',            # Heteroaromatic adjacent to carboxyl
    ]
    
    # Rule 15: Aromatic carboxylic acids with electron-donating groups serving as coordinating sites
    aromatic_with_donating_groups = [
        'c1ccc(N)cc1C(=O)O',         # Amino group on aromatic ring
        'c1ccc(O)cc1C(=O)O',         # Hydroxyl group on aromatic ring
    ]
    
    # Compile all patterns
    patterns = {
        1: {
            'patterns': [alpha_amino_acid] + coordinating_groups_within_three_carbons,
            'prediction': 1
        },
        2: {
            'patterns': [non_coordinating_alpha_amino_acid],
            'exclude': coordinating_groups_within_three_carbons,
            'prediction': -1
        },
        3: {
            'patterns': [aromatic_carboxylic_acid] + electron_withdrawing_para,
            'prediction': 1
        },
        4: {
            'patterns': electron_donating_direct + [aromatic_carboxylic_acid],
            'prediction': -1
        },
        5: {
            'patterns': nitrogen_heterocycle_carboxylic_acid,
            'prediction': 1
        },
        6: {
            'patterns': [bulky_aromatic_adjacent],
            'prediction': -1
        },
        7: {
            'patterns': aromatic_with_flexible_chain,
            'prediction': 1
        },
        8: {
            'patterns': [polyether_chain],
            'prediction': -1
        },
        9: {
            'patterns': coordinating_groups_near_carboxyl,
            'prediction': 1
        },
        10: {
            'patterns': [perfluoroalkyl_adjacent],
            'prediction': -1
        },
        11: {
            'patterns': distant_functional_groups,
            'prediction': -1
        },
        12: {
            'patterns': [unbranched_aliphatic_acid],
            'prediction': 1
        },
        13: {
            'patterns': adjacent_electrophilic_groups,
            'prediction': -1
        },
        14: {
            'patterns': conjugated_systems_with_heteroatoms,
            'prediction': 1
        },
        15: {
            'patterns': aromatic_with_donating_groups,
            'prediction': 1
        },
    }
    
    # Compile SMARTS patterns
    for rule_num, rule in patterns.items():
        compiled_patterns = []
        for smarts in rule.get('patterns', []):
            mol = Chem.MolFromSmarts(smarts)
            if mol:
                compiled_patterns.append(mol)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude' in rule:
            compiled_excludes = []
            for smarts in rule['exclude']:
                mol = Chem.MolFromSmarts(smarts)
                if mol:
                    compiled_excludes.append(mol)
            rule['compiled_exclude'] = compiled_excludes
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*15)
            continue
        row = []
        for rule_num in range(1,16):
            rule = patterns[rule_num]
            try:
                match = True
                # Check exclude patterns if any
                if 'compiled_exclude' in rule:
                    for pat in rule['compiled_exclude']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for pat in rule['compiled_patterns']:
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {i}' for i in range(1,16)])
    return df

--------------------------------------------------