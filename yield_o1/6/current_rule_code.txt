def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and structural features
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX1H]'
    
    from rdkit import Chem
    import pandas as pd
    
    # Rule 1: Modifiers containing carboxylic acid and amino group within two carbon atoms
    # Including amino group attached directly to alpha carbon
    rule1_patterns = [
        Chem.MolFromSmarts('[CX3](=O)[OX1H][CX4]([NX3;H2,H1])'),  # Amino group attached to alpha carbon
        Chem.MolFromSmarts('[CX3](=O)[OX1H][CX4][NX3;H2,H1]'),  # Amino group connected via one carbon
        Chem.MolFromSmarts('[CX3](=O)[OX1H][CX4][CX4][NX3;H2,H1]'),  # Amino group connected via two carbons
    ]
    
    # Rule 2: Modifiers with carboxylic acid and multiple hydroxyl groups on adjacent carbons near the carboxyl group
    rule2_pattern = Chem.MolFromSmarts('[CX3](=O)[OX1H][C;H1]([OX2H])[C;H1]([OX2H])[C;H1]([OX2H])')
    
    # Rule 3: Modifiers with carboxylic acid and aliphatic thiol groups within two to three carbons
    rule3_patterns = [
        Chem.MolFromSmarts('[CX3](=O)[OX1H][CX4][SX2H]'),  # Thiol connected via one carbon
        Chem.MolFromSmarts('[CX3](=O)[OX1H][CX4][CX4][SX2H]'),  # Thiol connected via two carbons
        Chem.MolFromSmarts('[CX3](=O)[OX1H][CX4][CX4][CX4][SX2H]'),  # Thiol connected via three carbons
        Chem.MolFromSmarts('[CX3](=O)[OX1H][CX4]([CX4][SX2H])'),  # Branched connection to thiol
    ]
    
    # Rule 4: Modifiers with carboxylic acid and electron-withdrawing groups on aromatic rings (e.g., nitro or halogens)
    # Pattern for aromatic ring with carboxylic acid and EWG attached
    rule4_pattern = Chem.MolFromSmarts('c1ccc(cc1[CX3](=O)[OX1H])[F,Cl,Br,I,$(N(=O)=O)]')
    
    # Rule 5: Modifiers with carboxylic acid and electron-donating groups on aromatic rings yielding low yield
    # Pattern for aromatic ring with carboxylic acid and EDG attached
    rule5_pattern = Chem.MolFromSmarts('c1ccc(cc1[CX3](=O)[OX1H])[OX2H,NX3H2,$(OC)]')
    
    # Rule 6: Modifiers with carboxylic acid and nitrogen heterocycles directly attached or in short chains
    rule6_patterns = [
        Chem.MolFromSmarts('[n][c][CX3](=O)[OX1H]'),  # Nitrogen heterocycle directly attached to carboxylic acid
        Chem.MolFromSmarts('[n][c][CX4][CX3](=O)[OX1H]'),  # Connected via one carbon
        Chem.MolFromSmarts('[n][c][CX4][CX4][CX3](=O)[OX1H]'),  # Connected via two carbons
    ]
    
    # Rule 7: Modifiers with bulky hydrophobic side chains yielding variable yields
    # High yield if additional donor atoms are present
    rule7_high_yield_patterns = [
        Chem.MolFromSmarts('[CX3](=O)[OX1H][CX4][CX4]([NX3;H2,H1])[c]'),  # Carboxylic acid connected to amino group and aromatic ring
    ]
    rule7_low_yield_patterns = [
        Chem.MolFromSmarts('[CX3](=O)[OX1H][CX4][CX4][c]'),  # Carboxylic acid connected to aromatic ring without donor atoms
    ]
    
    # Rule 8: Modifiers with flexible ether linkages in aliphatic chains yielding low yield
    # Pattern broadened as per suggestion
    rule8_patterns = [
        Chem.MolFromSmarts('[CX3](=O)[OX1H][CX4][OX2][CX4]'),  # Ether linkage after one carbon
        Chem.MolFromSmarts('[CX3](=O)[OX1H][CX4][CX4][OX2][CX4]'),  # Ether linkage after two carbons
        Chem.MolFromSmarts('[CX3](=O)[OX1H][CX4][CX4][CX4][OX2][CX4]'),  # Ether linkage after three carbons
    ]
    
    # Rule 9: Modifiers with carboxylic acid and additional carbonyl groups leading to competing coordination yielding low yield
    rule9_pattern = Chem.MolFromSmarts('[CX3](=O)[OX1H][CX4][CX3](=O)')  # Carboxylic acid with adjacent carbonyl group
    
    # Rule 10: Aliphatic carboxylic acids without additional donor groups yielding low yield
    # Need to exclude molecules with additional donor groups near the carboxylic acid
    rule10_pattern = Chem.MolFromSmarts('[CX3](=O)[OX1H][CX4][CX4]')  # Carboxylic acid followed by two carbons
    # Exclude patterns
    rule10_excludes = [
        Chem.MolFromSmarts('[CX3](=O)[OX1H][CX4][!#6]'),  # Heteroatom connected to the first carbon after COOH
        Chem.MolFromSmarts('[CX3](=O)[OX1H][CX4][CX4][!#6]'),  # Heteroatom connected to the second carbon
        Chem.MolFromSmarts('[CX3](=O)[OX1H][*]=[O,N,S]'),  # Carbonyl group adjacent to carboxylic acid
    ]
    
    # Rule 11: Modifiers with chelating groups in rigid ring systems yielding high yield
    rule11_pattern = Chem.MolFromSmarts('O=C1C=CC(=O)C=C1C(=O)O')  # Chelating groups in cyclic structure
    
    # Rule 12: Modifiers with carboxylic acid and electron-withdrawing fluoroalkyl or sulfonyl groups yielding low yield
    rule12_patterns = [
        Chem.MolFromSmarts('[CX3](=O)[OX1H][CX4][CX4]([CX3](F)(F)F)'),  # Carboxylic acid connected to trifluoromethyl group
        Chem.MolFromSmarts('[CX3](=O)[OX1H][*][SX4](=O)(=O)[O]'),  # Carboxylic acid connected to sulfonyl group
    ]
    
    # Rule 13: Modifiers with carboxylic acid and thioether groups yielding low yield
    rule13_pattern = Chem.MolFromSmarts('[CX3](=O)[OX1H][CX4][SX2][CX4]')  # Carboxylic acid connected to thioether
    
    # Rule 14: Modifiers with carboxylic acid and adjacent amide groups yielding low yield
    rule14_pattern = Chem.MolFromSmarts('[CX3](=O)[OX1H][NX3][CX3](=O)')  # Carboxylic acid adjacent to amide group
    
    # Construct the list of rules with their associated patterns and predictions
    rules = [
        {'name': 'Rule 1', 'patterns': rule1_patterns, 'prediction': 1},
        {'name': 'Rule 2', 'patterns': [rule2_pattern], 'prediction': 1},
        {'name': 'Rule 3', 'patterns': rule3_patterns, 'prediction': 1},
        {'name': 'Rule 4', 'patterns': [rule4_pattern], 'prediction': 1},
        {'name': 'Rule 5', 'patterns': [rule5_pattern], 'prediction': -1},
        {'name': 'Rule 6', 'patterns': rule6_patterns, 'prediction': 1},
        {'name': 'Rule 7 High Yield', 'patterns': rule7_high_yield_patterns, 'prediction': 1},
        {'name': 'Rule 7 Low Yield', 'patterns': rule7_low_yield_patterns, 'prediction': -1},
        {'name': 'Rule 8', 'patterns': rule8_patterns, 'prediction': -1},
        {'name': 'Rule 9', 'patterns': [rule9_pattern], 'prediction': -1},
        {'name': 'Rule 10', 'patterns': [rule10_pattern], 'excludes': rule10_excludes, 'prediction': -1},
        {'name': 'Rule 11', 'patterns': [rule11_pattern], 'prediction': 1},
        {'name': 'Rule 12', 'patterns': rule12_patterns, 'prediction': -1},
        {'name': 'Rule 13', 'patterns': [rule13_pattern], 'prediction': -1},
        {'name': 'Rule 14', 'patterns': [rule14_pattern], 'prediction': -1}
    ]

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'excludes' in rule:
                    for exclude in rule['excludes']:
                        if mol.HasSubstructMatch(exclude):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for patt in rule['patterns']:
                    if not mol.HasSubstructMatch(patt):
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[rule['name'] for rule in rules])
    return df