
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: Modifiers that are α-amino acids with side chains containing additional carboxylate groups (acidic side chains) yield **high** yield.
  - *Examples*: (2S)-2-aminobutanedioic acid (aspartic acid), (2S)-2-aminopentanedioic acid (glutamic acid).

- **Rule 2**: Modifiers that are α-amino acids with hydrophobic or unfunctionalized side chains yield **low** yield.
  - *Examples*: (2S)-2-amino-3-phenylpropanoic acid (phenylalanine), (2S)-6-acetamido-2-aminohexanoic acid (acetylated lysine).

- **Rule 3**: Modifiers that are benzoic acid derivatives substituted at the para position with electron-donating groups (e.g., amino) or strong electron-withdrawing groups (e.g., nitro, bromomethyl) yield **high** yield, while those with weak electron-donating groups (e.g., methyl) or groups that can engage in side reactions (e.g., formyl, thiol) yield **low** yield.
  - *High yield examples*: 4-aminobenzoic acid, 4-nitrobenzoic acid, 4-(bromomethyl)benzoic acid.
  - *Low yield examples*: 4-methylbenzoic acid, 4-formylbenzoic acid, 4-sulfanylbenzoic acid.

- **Rule 4**: Modifiers containing nitrogen heterocycles yield **high** yield.
  - *Examples*: Pyridine-3-carboxylic acid (nicotinic acid), 1H-pyrazole-4-carboxylic acid, 2-oxo-1H-pyridine-4-carboxylic acid.

- **Rule 5**: Modifiers with multiple hydroxyl groups on short aliphatic chains (e.g., sugar acids or polyols) yield **high** yield.
  - *Example*: (2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid (gluconic acid).

- **Rule 6**: Modifiers containing aldehyde or ketone groups directly attached to aromatic rings yield **low** yield.
  - *Examples*: 4-formylbenzoic acid, 5-formyl-2-hydroxybenzoic acid.

- **Rule 7**: Modifiers that are aliphatic carboxylic acids with amino groups located within five carbons of the carboxylate group yield **high** yield; those with longer aliphatic chains yield **low** yield.
  - *High yield example*: 5-aminopentanoic acid.
  - *Low yield examples*: 7-aminoheptanoic acid, 8-aminooctanoic acid.

- **Rule 8**: Modifiers with aliphatic thiol groups yield **high** yield; those with aromatic thiol groups yield **low** yield.
  - *High yield example*: 3-sulfanylpropanoic acid.
  - *Low yield example*: 4-sulfanylbenzoic acid.

- **Rule 9**: Modifiers with highly fluorinated aliphatic chains yield **low** yield.
  - *Example*: 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid.

- **Rule 10**: Modifiers containing aliphatic ether linkages yield **low** yield.
  - *Example*: 2-[2-(2-methoxyethoxy)ethoxy]acetic acid.

- **Rule 11**: Modifiers where a pyridine ring is connected to the carboxylate via an aliphatic linker yield **high** yield; those connected via aromatic rings yield **low** yield.
  - *High yield example*: 4-pyridin-4-ylbutanoic acid.
  - *Low yield example*: 4-pyridin-4-ylbenzoic acid.

- **Rule 12**: Modifiers with aliphatic thioether groups yield **low** yield.
  - *Example*: 2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid.

- **Rule 13**: Modifiers with aliphatic chains longer than five carbons without additional functional groups yield **low** yield, whereas those with aromatic rings or multiple hydroxyl groups yield **high** yield.
  - *Low yield examples*: 7-hydroxyheptanoic acid, 7-aminoheptanoic acid, 8-aminooctanoic acid.
  - *High yield example*: 5-(4-hydroxyphenyl)pentanoic acid.

- **Rule 14**: Modifiers containing aliphatic ketone groups adjacent to aromatic rings yield **high** yield.
  - *Example*: 4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid.

- **Rule 15**: Modifiers containing aromatic rings fused with lactone or cyclic anhydride structures yield **high** yield.
  - *Example*: 1,3-dioxo-2-benzofuran-5-carboxylic acid.

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6285714285714286; Test Accuracy: 0.0
    Train Support: 0.14285714285714285; Test Support: 0.0
    Train Confidence: 0.8333333333333334; Test Confidence: 0.5
    Train Lift: 1.715686274509804; Test Lift: NONE
    Train Leverage: 0.05959183673469387; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Import necessary RDKit functions
    from rdkit import Chem
    from rdkit.Chem import AllChem
    
    # Initialize the list of rules with their SMARTS patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are α-amino acids with side chains containing additional carboxylate groups (acidic side chains) yield high yield.',
            'patterns': [
                '[NX3][CX4H]([CX3](=O)[OX1H])[CX4][CX3](=O)[OX1H]'  # Alpha-amino acid with extra carboxylic acid in side chain
            ],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers that are α-amino acids with hydrophobic or unfunctionalized side chains yield low yield.',
            'patterns': [
                '[NX3][CX4H]([CX3](=O)[OX1H])[CX4][C]'  # Alpha-amino acid with hydrophobic side chain
            ],
            'exclude_patterns': [
                '[CX4][#7,#8,#16]'  # Exclude functionalized side chains
            ],
            'prediction': -1
        },
        {
            'number': 3,
            'description': 'Modifiers that are benzoic acid derivatives substituted at the para position with electron-donating groups (e.g., amino) or strong electron-withdrawing groups (e.g., nitro, bromomethyl) yield high yield, while those with weak electron-donating groups (e.g., methyl) or groups that can engage in side reactions (e.g., formyl, thiol) yield low yield.',
            'patterns': [
                '[cH]1ccc([NX3H2,NX3H1,NX3H0], [NX3+](=O)[O-], [BrC], [CX3](=O)[OX1H0-])cc1[CX3](=O)[OX1H]'  # Substituted benzoic acids with EDGs or EWGs at para position
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers that are benzoic acid derivatives substituted at the para position with weak electron-donating groups or groups that can engage in side reactions yield low yield.',
            'patterns': [
                '[cH]1ccc([CH3], [CX3H]=O, [SX2H])cc1[CX3](=O)[OX1H]'  # Substituted benzoic acids with methyl, formyl, thiol at para position
            ],
            'prediction': -1
        },
        {
            'number': 4,
            'description': 'Modifiers containing nitrogen heterocycles yield high yield.',
            'patterns': [
                '[n]'  # Any nitrogen heterocycle
            ],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers with multiple hydroxyl groups on short aliphatic chains (e.g., sugar acids or polyols) yield high yield.',
            'patterns': [
                '[CX4][OX2H][CX4][OX2H][CX4][OX2H][CX3](=O)[OX1H]'  # Multiple hydroxyls on aliphatic chain ending with carboxylic acid
            ],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers containing aldehyde or ketone groups directly attached to aromatic rings yield low yield.',
            'patterns': [
                '[c][CX3H0](=O)'  # Aldehyde or ketone attached to aromatic ring
            ],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Modifiers that are aliphatic carboxylic acids with amino groups located within five carbons of the carboxylate group yield high yield; those with longer aliphatic chains yield low yield.',
            'patterns': [
                '[NX3H2][CX4][CX4][CX4][CX3](=O)[OX1H]',  # Amino group within 5 carbons of carboxylate
                '[NX3H2][CX4][CX4][CX4][CX4][CX3](=O)[OX1H]'  # Amino group farther than 5 carbons
            ],
            'predictions': [1, -1]
        },
        {
            'number': 8,
            'description': 'Modifiers with aliphatic thiol groups yield high yield; those with aromatic thiol groups yield low yield.',
            'patterns': [
                '[SX2H][CX4][CX3](=O)[OX1H]',  # Aliphatic thiol
                '[SX2H][c][CX3](=O)[OX1H]'  # Aromatic thiol
            ],
            'predictions': [1, -1]
        },
        {
            'number': 9,
            'description': 'Modifiers with highly fluorinated aliphatic chains yield low yield.',
            'patterns': [
                '[CX4]([F])([F])[CX4]([F])([F])[CX3](=O)[OX1H]'  # Highly fluorinated chain
            ],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers containing aliphatic ether linkages yield low yield.',
            'patterns': [
                '[CX4][OX2][CX4][OX2][CX4][OX2][CX3](=O)[OX1H]'  # Aliphatic ether linkages
            ],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Modifiers where a pyridine ring is connected to the carboxylate via an aliphatic linker yield high yield; those connected via aromatic rings yield low yield.',
            'patterns': [
                '[n][CX4][CX4][CX3](=O)[OX1H]',  # Pyridine connected via aliphatic linker
                '[n][c][CX3](=O)[OX1H]'  # Pyridine connected via aromatic ring
            ],
            'predictions': [1, -1]
        },
        {
            'number': 12,
            'description': 'Modifiers with aliphatic thioether groups yield low yield.',
            'patterns': [
                '[CX4][SX2][CX4][CX3](=O)[OX1H]'  # Aliphatic thioether
            ],
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Modifiers with aliphatic chains longer than five carbons without additional functional groups yield low yield, whereas those with aromatic rings or multiple hydroxyl groups yield high yield.',
            'patterns': [
                '[CX4][CX4][CX4][CX4][CX4][CX3](=O)[OX1H]',  # Long aliphatic chain
                '[CX4][CX4][CX4][OX2H][CX3](=O)[OX1H]',  # With hydroxyl group
                '[CX4][c][CX3](=O)[OX1H]'  # With aromatic ring
            ],
            'predictions': [-1, 1, 1]
        },
        {
            'number': 14,
            'description': 'Modifiers containing aliphatic ketone groups adjacent to aromatic rings yield high yield.',
            'patterns': [
                '[c][CX3](=O)[CX4][CX3](=O)[OX1H]'  # Aliphatic ketone adjacent to aromatic ring
            ],
            'prediction': 1
        },
        {
            'number': 15,
            'description': 'Modifiers containing aromatic rings fused with lactone or cyclic anhydride structures yield high yield.',
            'patterns': [
                '[c]1[c][c](=O)[o][c](=O)[c]1'  # Aromatic ring fused with lactone or cyclic anhydride
            ],
            'prediction': 1
        }
    ]
    
    # Compile patterns
    for rule in rules:
        if 'patterns' in rule:
            rule['compiled_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule['patterns']]
        if 'exclude_patterns' in rule:
            rule['compiled_exclude_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule['exclude_patterns']]
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = False
                # Check exclude patterns first
                if 'compiled_exclude_patterns' in rule:
                    for ex_pat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(ex_pat):
                            match = False
                            break
                    else:
                        match = True
                else:
                    match = True
                if match:
                    # Check the patterns
                    if 'compiled_patterns' in rule:
                        for idx, pat in enumerate(rule['compiled_patterns']):
                            if mol.HasSubstructMatch(pat):
                                prediction = rule.get('prediction')
                                if 'predictions' in rule:
                                    prediction = rule['predictions'][idx]
                                row.append(prediction)
                                break
                        else:
                            row.append(0)
                    else:
                        row.append(0)
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

1. **Rule 1**: Modifiers that are **aromatic carboxylic acids** with a **strong electron-withdrawing group** at the **para position** yield **high** yield; those with **electron-donating groups** or **weak withdrawing groups** yield **low** yield.
   - *High Yield Examples*:
     - **4-nitrobenzoic acid** (para-nitro group)
     - **4-(bromomethyl)benzoic acid** (para-bromomethyl group)
   - *Low Yield Examples*:
     - **4-methylbenzoic acid** (para-methyl group)
     - **4-formylbenzoic acid** (para-formyl group)

2. **Rule 2**: Modifiers that are **aromatic carboxylic acids** with a **para-amino group** yield **high** yield due to potential coordination with metal ions.
   - *High Yield Example*:
     - **4-aminobenzoic acid**
   - *Note*: The amino group can act as a chelating agent despite being an electron-donating group.

3. **Rule 3**: Modifiers containing **nitrogen-containing heterocycles** directly attached to the **carboxylic acid** yield **high** yield; those connected via an **aromatic linker** yield **low** yield.
   - *High Yield Examples*:
     - **Pyridine-3-carboxylic acid** (nicotinic acid)
     - **1H-pyrazole-4-carboxylic acid**
     - **2-oxo-1H-pyridine-4-carboxylic acid**
   - *Low Yield Example*:
     - **4-pyridin-4-ylbenzoic acid** (heterocycle connected via an aromatic ring)

4. **Rule 4**: Modifiers that are **α-amino acids** with **acidic side chains** (additional carboxyl groups) yield **high** yield; those with **hydrophobic or basic side chains** yield **low** yield.
   - *High Yield Examples*:
     - **(2S)-2-aminobutanedioic acid** (aspartic acid)
     - **(2S)-2-aminopentanedioic acid** (glutamic acid)
   - *Low Yield Examples*:
     - **(2S)-2-amino-3-phenylpropanoic acid** (phenylalanine)
     - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (tryptophan, exception: yields high due to aromatic indole ring aiding coordination)
     - **(2S)-6-acetamido-2-aminohexanoic acid** (acetylated lysine)

5. **Rule 5**: Modifiers with **multiple hydroxyl groups** on a **short aliphatic chain (≤6 carbons)** yield **high** yield; those with **longer chains** or **single hydroxyl groups** yield **low** yield.
   - *High Yield Examples*:
     - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (gluconic acid)
     - **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid**
   - *Low Yield Example*:
     - **7-hydroxyheptanoic acid** (long chain with single hydroxyl)

6. **Rule 6**: Modifiers with **short aliphatic chains (≤5 carbons)** bearing an **amino group** yield **high** yield; those with **longer chains** yield **low** yield.
   - *High Yield Example*:
     - **5-aminopentanoic acid**
   - *Low Yield Examples*:
     - **7-aminoheptanoic acid**
     - **8-aminooctanoic acid**

7. **Rule 7**: Modifiers containing an **aliphatic thiol group** yield **high** yield; those with a **thiol group on an aromatic ring** yield **low** yield.
   - *High Yield Example*:
     - **3-sulfanylpropanoic acid**
   - *Low Yield Example*:
     - **4-sulfanylbenzoic acid**

8. **Rule 8**: Modifiers with **fluorinated aliphatic chains** yield **low** yield due to strong electron-withdrawing effects disrupting coordination.
   - *Low Yield Example*:
     - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**

9. **Rule 9**: Modifiers containing **ether linkages** in **aliphatic chains** yield **low** yield, possibly due to increased flexibility reducing effective coordination.
   - *Low Yield Examples*:
     - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**
     - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**

10. **Rule 10**: Modifiers with **aldehyde groups** attached to **aromatic rings** yield **low** yield due to potential side reactions or deactivation.
    - *Low Yield Examples*:
      - **4-formylbenzoic acid**
      - **5-formyl-2-hydroxybenzoic acid**

11. **Rule 11**: Modifiers with **aromatic ketone groups** conjugated with **electron-donating substituents** yield **high** yield by enhancing coordination.
    - *High Yield Example*:
      - **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid**

12. **Rule 12**: Modifiers that are **long-chain aliphatic acids (>6 carbons)** without additional **coordination sites** yield **low** yield.
    - *Low Yield Examples*:
      - **7-hydroxyheptanoic acid**
      - **7-aminoheptanoic acid**
      - **8-aminooctanoic acid**

13. **Rule 13**: Modifiers containing **aromatic rings fused to lactone or cyclic anhydride structures** yield **high** yield by providing rigid coordination sites.
    - *High Yield Example*:
      - **1,3-dioxo-2-benzofuran-5-carboxylic acid**

14. **Rule 14**: Modifiers with **aromatic heterocycles** connected via a **short aliphatic linker** to the **carboxyl group** yield **high** yield.
    - *High Yield Example*:
      - **4-pyridin-4-ylbutanoic acid**

15. **Rule 15**: Modifiers with **thioether groups** in the **side chain** yield **low** yield due to possible interference with catalyst sites.
    - *Low Yield Example*:
      - **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid**

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 9,Rule 8,Rule 10,Rule 15
0,0,0,1,0,0,0,0,0,0
0,0,1,1,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0
0,0,1,1,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0
0,0,0,1,0,0,-1,0,0,0
0,0,0,1,0,0,0,0,0,0
0,0,1,1,0,0,0,0,0,0
0,0,0,1,0,0,0,-1,0,0
0,0,1,1,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0
0,0,0,1,0,1,0,0,0,0
0,0,0,1,0,0,0,0,-1,0
0,0,0,1,0,0,0,0,-1,0
0,0,0,1,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,-1
0,0,0,1,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0
0,0,0,1,0,0,0,-1,0,0
0,0,0,1,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0
0,0,0,1,0,0,-1,0,0,0
0,0,1,1,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6857142857142857; Test Accuracy: 1.0
    Train Support: 0.05; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 1.9444444444444446; Test Lift: NONE
    Train Leverage: 0.02428571428571429; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define the SMARTS patterns for various functional groups and substructures
    # Aromatic carboxylic acid
    aromatic_carboxylic_acid = '[c][CX3](=O)[O;H1,-]'  # Aromatic ring attached to a carboxylic acid
    
    # Electron-withdrawing groups (EWGs)
    ewg_patterns = ['[CX3](=O)[OX1H0-,OX2H1]',  # Carboxylic acid or carboxylate
                    '[CX3]=[OX1]',  # Carbonyl group
                    '[NX3+](=O)[O-]',  # Nitro group
                    '[F,Cl,Br,I]',  # Halogens
                    '[CX4]([F])([F])[F]']  # Trifluoromethyl group
    
    # Electron-donating groups (EDGs)
    edg_patterns = ['[OX2H]',  # Hydroxyl group
                    '[OX2][#6]',  # Alkoxy group
                    '[NX3;H2,H1][#6]']  # Amino group
    
    # Aromatic amino group at para position
    para_amino_group = 'c1ccc([NX3;H2,H1][#6])cc1'  # Para-amino substituted benzene ring
    
    # Nitrogen-containing heterocycles directly attached to carboxylic acid
    nitrogen_heterocycle_carboxylic_acid = '[nH0;r5,r6][CX3](=O)[OX1H0-,OX2H1]'  # Heterocycle with nitrogen attached to carboxylic acid
    
    # Nitrogen-containing heterocycles connected via aromatic linker
    nitrogen_heterocycle_via_aromatic = '[nH0;r5,r6]-c-[c][CX3](=O)[OX1H0-,OX2H1]'  # Heterocycle connected via aromatic ring to carboxylic acid
    
    # Alpha-amino acids with acidic side chains
    alpha_amino_acid_acidic = '[NX3;H2][CX4H]([#6])[CX3](=O)[OX1H0-,OX2H1]'  # Alpha-amino acid
    acidic_side_chain = '[CX3](=O)[OX1H0-,OX2H1]'  # Additional carboxyl group
    
    # Alpha-amino acids with hydrophobic or basic side chains
    hydrophobic_side_chains = ['[CX4][CH2][CH2][CH2][CH3]',  # Long aliphatic chain
                               '[c]']  # Aromatic ring
    basic_side_chains = '[NX3;H2,H1]'  # Amino group
    
    # Multiple hydroxyl groups on short aliphatic chain (≤6 carbons)
    multiple_hydroxyls_short_chain = '[#6][OX2H]'  # Hydroxyl groups on carbon chain
    
    # Single hydroxyl group on long chain (>6 carbons)
    single_hydroxyl_long_chain = '[CH2]'*7 + '[OX2H]'  # 7-carbon chain with hydroxyl
    
    # Short aliphatic chains (≤5 carbons) bearing an amino group
    short_chain_amino_group = '[NX3;H2,H1][CH2][CH2][CH2][CH3]'  # Amino group on short chain
    
    # Long aliphatic chains (>5 carbons) bearing an amino group
    long_chain_amino_group = '[NX3;H2,H1][CH2]'*6 + '[CH3]'  # Amino group on long chain
    
    # Aliphatic thiol group
    aliphatic_thiol = '[SX2H][CH2]'  # Thiol group on aliphatic chain
    
    # Thiol group on aromatic ring
    aromatic_thiol = '[SX2H][c]'  # Thiol group attached to aromatic ring
    
    # Fluorinated aliphatic chains
    fluorinated_chain = '[CX4H0][F]'  # Carbon atom with fluorine attached
    
    # Ether linkages in aliphatic chains
    ether_linkage = '[CX4][OX2][CX4]'  # Ether linkage in aliphatic chain
    
    # Aldehyde groups attached to aromatic rings
    aldehyde_on_aromatic = '[c][CX3H]=O'  # Aldehyde group on aromatic ring
    
    # Aromatic ketone groups conjugated with electron-donating substituents
    aromatic_ketone_edg = '[c][CX3](=O)[c][OX2H]'  # Ketone adjacent to aromatic ring with EDG
    
    # Aromatic rings fused to lactone or cyclic anhydride structures
    aromatic_fused_lactone = '[c]1ccc2c1OC(=O)[c]2'  # Aromatic ring fused to lactone
    
    # Aromatic heterocycles connected via short aliphatic linker to carboxyl group
    heterocycle_short_linker = '[nH0;r5,r6][CH2][CX3](=O)[OX1H0-,OX2H1]'  # Heterocycle connected via short linker to carboxylic acid
    
    # Thioether groups in side chain
    thioether_side_chain = '[CX4][SX2][CX4]'  # Thioether linkage
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 2,
            'description': 'Modifiers that are aromatic carboxylic acids with a para-amino group yield high yield.',
            'patterns': [aromatic_carboxylic_acid, para_amino_group],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers containing nitrogen-containing heterocycles directly attached to the carboxylic acid yield high yield.',
            'patterns': [nitrogen_heterocycle_carboxylic_acid],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers that are α-amino acids with acidic side chains (additional carboxyl groups) yield high yield.',
            'patterns': [alpha_amino_acid_acidic, acidic_side_chain],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers with multiple hydroxyl groups on a short aliphatic chain (≤6 carbons) yield high yield.',
            'patterns': [multiple_hydroxyls_short_chain],
            'count_threshold': {'[OX2H]': 2},  # At least 2 hydroxyl groups
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers with short aliphatic chains (≤5 carbons) bearing an amino group yield high yield.',
            'patterns': [short_chain_amino_group],
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'Modifiers containing an aliphatic thiol group yield high yield.',
            'patterns': [aliphatic_thiol],
            'prediction': 1
        },
        {
            'number': 9,
            'description': 'Modifiers containing ether linkages in aliphatic chains yield low yield.',
            'patterns': [ether_linkage],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Modifiers with fluorinated aliphatic chains yield low yield due to strong electron-withdrawing effects disrupting coordination.',
            'patterns': [fluorinated_chain],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers with aldehyde groups attached to aromatic rings yield low yield.',
            'patterns': [aldehyde_on_aromatic],
            'prediction': -1
        },
        {
            'number': 15,
            'description': 'Modifiers with thioether groups in the side chain yield low yield due to possible interference with catalyst sites.',
            'patterns': [thioether_side_chain],
            'prediction': -1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for smarts in rule.get('patterns', []):
            pat = Chem.MolFromSmarts(smarts)
            if pat:
                compiled_patterns.append(pat)
            else:
                compiled_patterns.append(None)  # Handle invalid SMARTS patterns
        rule['compiled_patterns'] = compiled_patterns
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check required patterns
                for pat in rule['compiled_patterns']:
                    if pat is None:
                        match = False
                        break
                    matches = mol.GetSubstructMatches(pat)
                    if not matches:
                        match = False
                        break
                    else:
                        # If a count threshold is specified for this pattern
                        if 'count_threshold' in rule:
                            smarts = Chem.MolToSmarts(pat)
                            threshold = rule['count_threshold'].get(smarts, 1)
                            if len(matches) < threshold:
                                match = False
                                break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

1. **Rule 1**: Modifiers that are **α-amino acids** with **acidic side chains** or **hydroxyl-rich side chains** yield **high** yield; those with **nonpolar or bulky side chains** yield **low** yield.
   - *High Yield Examples*:
     - **(2S)-2-aminobutanedioic acid** (aspartic acid)
     - **(2S)-2-aminopentanedioic acid** (glutamic acid)
     - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (tryptophan)
   - *Low Yield Examples*:
     - **(2S)-2-amino-3-phenylpropanoic acid** (phenylalanine)
     - **(2S)-6-acetamido-2-aminohexanoic acid** (acetylated lysine)
     - **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid** (methionine derivative)

2. **Rule 2**: Modifiers that are **aromatic carboxylic acids** with **electron-withdrawing groups** at the **para position** yield **high** yield; those with **electron-donating groups** yield **low** yield.
   - *High Yield Examples*:
     - **4-nitrobenzoic acid** (para-nitro group)
     - **4-(bromomethyl)benzoic acid** (para-bromomethyl group)
   - *Low Yield Examples*:
     - **4-methylbenzoic acid** (para-methyl group)
     - **4-formylbenzoic acid** (para-formyl group)

3. **Rule 3**: Modifiers that are **aromatic carboxylic acids** with **nitrogen-containing heterocycles** directly attached to the **carboxyl group** yield **high** yield; those connected via an **aromatic linker** yield **low** yield.
   - *High Yield Examples*:
     - **Pyridine-3-carboxylic acid** (nicotinic acid)
     - **1H-pyrazole-4-carboxylic acid**
     - **2-oxo-1H-pyridine-4-carboxylic acid**
   - *Low Yield Example*:
     - **4-pyridin-4-ylbenzoic acid** (heterocycle connected via an aromatic ring)

4. **Rule 4**: Modifiers with **aliphatic carboxylic acids** containing **amino groups** on **short chains (≤6 carbons)** yield **high** yield; those with **longer chains (>6 carbons)** yield **low** yield.
   - *High Yield Example*:
     - **5-aminopentanoic acid**
   - *Low Yield Examples*:
     - **7-aminoheptanoic acid**
     - **8-aminooctanoic acid**

5. **Rule 5**: Modifiers containing **multiple hydroxyl groups** on **short aliphatic chains** yield **high** yield; those with **single hydroxyl groups** or **long aliphatic chains** yield **low** yield.
   - *High Yield Examples*:
     - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (gluconic acid)
     - **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid**
   - *Low Yield Examples*:
     - **7-hydroxyheptanoic acid**
     - **3-(4-hydroxyphenyl)propanoic acid**

6. **Rule 6**: Modifiers with **aliphatic thiol groups** yield **high** yield; those with **aromatic thiol groups** yield **low** yield.
   - *High Yield Example*:
     - **3-sulfanylpropanoic acid**
   - *Low Yield Example*:
     - **4-sulfanylbenzoic acid**

7. **Rule 7**: Modifiers containing **ether linkages** in **long aliphatic chains** yield **low** yield due to increased flexibility reducing effective coordination.
   - *Low Yield Examples*:
     - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**
     - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**

8. **Rule 8**: Modifiers containing **aldehyde or ketone groups** attached to **aromatic rings** yield **low** yield due to potential side reactions or interference with catalyst sites.
   - *Low Yield Examples*:
     - **4-formylbenzoic acid**
     - **5-formyl-2-hydroxybenzoic acid**

9. **Rule 9**: Modifiers with **bulky hydrophobic side chains** without additional **coordination sites** yield **low** yield due to steric hindrance and lack of effective interaction with the catalyst.
   - *Low Yield Examples*:
     - **(2S)-2-amino-3-phenylpropanoic acid** (phenylalanine)
     - **(2S)-6-acetamido-2-aminohexanoic acid** (acetylated lysine)

10. **Rule 10**: Modifiers with **heterocyclic aromatic rings** attached via a **short aliphatic linker** to the **carboxyl group** yield **high** yield due to favorable coordination.
    - *High Yield Example*:
      - **4-pyridin-4-ylbutanoic acid**

11. **Rule 11**: Modifiers containing **fluorinated aliphatic chains** yield **low** yield due to strong electron-withdrawing effects that may interfere with coordination.
    - *Low Yield Example*:
      - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**

12. **Rule 12**: Modifiers with **aromatic ketone groups** conjugated with **electron-donating substituents** yield **high** yield by enhancing coordination through resonance.
    - *High Yield Example*:
      - **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid**

13. **Rule 13**: Modifiers with **hydroxyl groups** in the **ortho position** to the **carboxyl group** on aromatic rings yield **low** yield due to internal hydrogen bonding reducing effective coordination.
    - *Low Yield Example*:
      - **5-formyl-2-hydroxybenzoic acid**

14. **Rule 14**: Modifiers containing **strong electron-withdrawing groups** on **aliphatic chains**, such as **trifluoroacetyl groups**, yield **low** yield due to potential interference with catalyst coordination.
    - *Low Yield Example*:
      - **4-[(2,2,2-trifluoroacetyl)amino]butanoic acid**

15. **Rule 15**: Modifiers with **rigid structures containing fused rings** capable of **chelation** yield **high** yield by effectively stabilizing the metal center.
    - *High Yield Example*:
      - **1,3-dioxo-2-benzofuran-5-carboxylic acid**

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,1,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,1,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,1,0,0,-1,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0
0,1,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,1,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0
0,1,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,1,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,1,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,1,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6285714285714286; Test Accuracy: 0.0
    Train Support: 0.6285714285714286; Test Support: 0.0
    Train Confidence: 0.6285714285714286; Test Confidence: 0.0
    Train Lift: 1.2352941176470589; Test Lift: NONE
    Train Leverage: 0.1175510204081633; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Initialize the list to hold the results
    results = []
    
    # Define SMARTS patterns and functions for each rule
    rules = []
    
    # Rule 1: α-amino acids with acidic or hydroxyl-rich side chains (High Yield: 1), nonpolar or bulky side chains (Low Yield: -1)
    # Define patterns for α-amino acids
    alpha_amino_acid = Chem.MolFromSmarts('[NX3][CX4H]([*])[CX3](=O)[OX1H]')
    
    # Patterns for acidic side chains (additional carboxylic acid group)
    acidic_side_chain = Chem.MolFromSmarts('[CX3](=O)[OX1H]')
    
    # Patterns for hydroxyl-rich side chains (at least two hydroxyl groups)
    hydroxyl_group = Chem.MolFromSmarts('[OX2H]')
    
    # Patterns for nonpolar or bulky side chains (aromatic rings or long aliphatic chains)
    bulky_side_chain = Chem.MolFromSmarts('[C;X4][C;X4][C;X4][C;X4]')  # Chain of at least 4 carbons
    aromatic_ring = Chem.MolFromSmarts('c1ccccc1')
    
    rules.append({'number': 1, 'name': 'Rule 1',
                  'high_patterns': [alpha_amino_acid],
                  'high_additional': [{'pattern': acidic_side_chain, 'min_count': 2},
                                      {'pattern': hydroxyl_group, 'min_count': 2}],
                  'low_additional': [{'pattern': bulky_side_chain, 'min_count': 1},
                                     {'pattern': aromatic_ring, 'min_count': 1}],
                  'prediction_high': 1, 'prediction_low': -1})
    
    # Rule 2: Aromatic carboxylic acids with EWG at para position (High Yield: 1), with EDG (Low Yield: -1)
    aromatic_carboxylic_acid = Chem.MolFromSmarts('c1ccc(C(=O)O)cc1')
    
    # Electron-withdrawing groups (EWGs)
    ewg = [Chem.MolFromSmarts(pat) for pat in ['[CX3](=O)[OX1H]', '[CX3]=[OX1]', '[NX3](=O)=O', '[F,Cl,Br,I]', '[CX4][F][F][F]']]
    
    # Electron-donating groups (EDGs)
    edg = [Chem.MolFromSmarts(pat) for pat in ['[OX2H]', '[OX2][#6]', '[NX3;H2,H1][#6]']]
    
    rules.append({'number': 2, 'name': 'Rule 2',
                  'base_pattern': aromatic_carboxylic_acid,
                  'ewg': ewg, 'edg': edg,
                  'prediction_high': 1, 'prediction_low': -1})
    
    # Rule 3: Aromatic carboxylic acids with nitrogen-containing heterocycles directly attached (High Yield: 1), connected via aromatic linker (Low Yield: -1)
    aromatic_carboxylic_acid = Chem.MolFromSmarts('[cH]1[cH][cH][cH][cH][c]1C(=O)O')
    nitrogen_heterocycle_direct = Chem.MolFromSmarts('[n]1cccc1')
    nitrogen_heterocycle_linker = Chem.MolFromSmarts('[c]1[c][c][c][c][c]1[c][n]1cccc1')
    
    rules.append({'number': 3, 'name': 'Rule 3',
                  'base_pattern': aromatic_carboxylic_acid,
                  'high_pattern': nitrogen_heterocycle_direct,
                  'low_pattern': nitrogen_heterocycle_linker,
                  'prediction_high': 1, 'prediction_low': -1})
    
    # Rule 4: Aliphatic carboxylic acids with amino groups on short chains ≤6 carbons (High Yield: 1), longer chains >6 carbons (Low Yield: -1)
    aliphatic_carboxylic_acid = Chem.MolFromSmarts('[CX3](=O)[OX1H]')
    amino_group = Chem.MolFromSmarts('[NX3;H2,H1][C]')
    
    rules.append({'number': 4, 'name': 'Rule 4',
                  'carboxylic_acid': aliphatic_carboxylic_acid,
                  'amino_group': amino_group,
                  'max_chain_length_high': 6,
                  'prediction_high': 1, 'prediction_low': -1})
    
    # Rule 5: Multiple hydroxyl groups on short aliphatic chains (High Yield: 1), single hydroxyl groups or long chains (Low Yield: -1)
    rules.append({'number': 5, 'name': 'Rule 5',
                  'hydroxyl_group': hydroxyl_group,
                  'max_chain_length_high': 6,
                  'min_hydroxyls_high': 2,
                  'prediction_high': 1, 'prediction_low': -1})
    
    # Rule 6: Aliphatic thiol groups (High Yield: 1), aromatic thiol groups (Low Yield: -1)
    aliphatic_thiol = Chem.MolFromSmarts('[SX2H][CX4]')
    aromatic_thiol = Chem.MolFromSmarts('[SX2H][c]')
    
    rules.append({'number': 6, 'name': 'Rule 6',
                  'aliphatic_thiol': aliphatic_thiol,
                  'aromatic_thiol': aromatic_thiol,
                  'prediction_high': 1, 'prediction_low': -1})
    
    # Rule 7: Ether linkages in long aliphatic chains (Low Yield: -1)
    ether_linkage = Chem.MolFromSmarts('[CX4][OX2][CX4]')
    
    rules.append({'number': 7, 'name': 'Rule 7',
                  'ether_linkage': ether_linkage,
                  'min_chain_length_low': 6,
                  'prediction_low': -1})
    
    # Rule 8: Aldehyde or ketone groups attached to aromatic rings (Low Yield: -1)
    aldehyde_ketone_aromatic = Chem.MolFromSmarts('[c][CX3](=O)[CX4H]')
    
    rules.append({'number': 8, 'name': 'Rule 8',
                  'aldehyde_ketone_aromatic': aldehyde_ketone_aromatic,
                  'prediction_low': -1})
    
    # Rule 9: Bulky hydrophobic side chains without additional coordination sites (Low Yield: -1)
    bulky_hydrophobic = Chem.MolFromSmarts('c1ccccc1')  # Aromatic ring as bulky hydrophobic group
    
    rules.append({'number': 9, 'name': 'Rule 9',
                  'bulky_hydrophobic': bulky_hydrophobic,
                  'no_donor_sites': True,
                  'prediction_low': -1})
    
    # Rule 10: Heterocyclic aromatic rings attached via short aliphatic linker to carboxyl group (High Yield: 1)
    heterocycle_aliphatic_linker = Chem.MolFromSmarts('[n][CX4][CX3](=O)[OX1H]')
    
    rules.append({'number': 10, 'name': 'Rule 10',
                  'heterocycle_aliphatic_linker': heterocycle_aliphatic_linker,
                  'prediction_high': 1})
    
    # Rule 11: Fluorinated aliphatic chains (Low Yield: -1)
    fluorinated_chain = Chem.MolFromSmarts('[CX4][F][F][F]')
    
    rules.append({'number': 11, 'name': 'Rule 11',
                  'fluorinated_chain': fluorinated_chain,
                  'prediction_low': -1})
    
    # Rule 12: Aromatic ketone groups conjugated with electron-donating substituents (High Yield: 1)
    aromatic_ketone = Chem.MolFromSmarts('[c][CX3](=O)[c]')
    electron_donating_substituents = edg  # Use previously defined EDGs
    
    rules.append({'number': 12, 'name': 'Rule 12',
                  'aromatic_ketone': aromatic_ketone,
                  'edg': electron_donating_substituents,
                  'prediction_high': 1})
    
    # Rule 13: Hydroxyl groups ortho to carboxyl group on aromatic rings (Low Yield: -1)
    ortho_hydroxyl_carboxyl = Chem.MolFromSmarts('c1c(O)cccc1C(=O)O')
    
    rules.append({'number': 13, 'name': 'Rule 13',
                  'ortho_hydroxyl_carboxyl': ortho_hydroxyl_carboxyl,
                  'prediction_low': -1})
    
    # Rule 14: Strong electron-withdrawing groups on aliphatic chains (e.g., trifluoroacetyl groups) (Low Yield: -1)
    trifluoroacetyl = Chem.MolFromSmarts('[CX3](=O)[CX4][F][F][F]')
    
    rules.append({'number': 14, 'name': 'Rule 14',
                  'trifluoroacetyl': trifluoroacetyl,
                  'prediction_low': -1})
    
    # Rule 15: Rigid structures containing fused rings capable of chelation (High Yield: 1)
    fused_rings = Chem.MolFromSmarts('c1ccc2c(c1)C(=O)Oc3ccccc23')  # Benzofuran-1,3-dione as an example
    
    rules.append({'number': 15, 'name': 'Rule 15',
                  'fused_rings': fused_rings,
                  'prediction_high': 1})
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = False
                # Implement each rule logic
                if rule['number'] == 1:
                    # Rule 1 logic
                    if mol.HasSubstructMatch(rule['high_patterns'][0]):
                        # Check for high yield conditions
                        acidic_matches = mol.GetSubstructMatches(rule['high_additional'][0]['pattern'])
                        hydroxyl_matches = mol.GetSubstructMatches(rule['high_additional'][1]['pattern'])
                        if len(acidic_matches) >= rule['high_additional'][0]['min_count'] or \
                           len(hydroxyl_matches) >= rule['high_additional'][1]['min_count']:
                            row.append(rule['prediction_high'])
                            continue
                        # Check for low yield conditions
                        bulky_matches = mol.GetSubstructMatches(rule['low_additional'][0]['pattern'])
                        aromatic_matches = mol.GetSubstructMatches(rule['low_additional'][1]['pattern'])
                        if len(bulky_matches) >= rule['low_additional'][0]['min_count'] or \
                           len(aromatic_matches) >= rule['low_additional'][1]['min_count']:
                            row.append(rule['prediction_low'])
                            continue
                    row.append(0)
                elif rule['number'] == 2:
                    # Rule 2 logic
                    if mol.HasSubstructMatch(rule['base_pattern']):
                        ewg_match = any(mol.HasSubstructMatch(ewg) for ewg in rule['ewg'])
                        edg_match = any(mol.HasSubstructMatch(edg) for edg in rule['edg'])
                        if ewg_match:
                            row.append(rule['prediction_high'])
                            continue
                        elif edg_match:
                            row.append(rule['prediction_low'])
                            continue
                    row.append(0)
                elif rule['number'] == 3:
                    # Rule 3 logic
                    if mol.HasSubstructMatch(rule['base_pattern']):
                        if mol.HasSubstructMatch(rule['high_pattern']):
                            row.append(rule['prediction_high'])
                            continue
                        elif mol.HasSubstructMatch(rule['low_pattern']):
                            row.append(rule['prediction_low'])
                            continue
                    row.append(0)
                elif rule['number'] == 4:
                    # Rule 4 logic
                    if mol.HasSubstructMatch(rule['carboxylic_acid']) and mol.HasSubstructMatch(rule['amino_group']):
                        # Calculate chain length
                        chains = Chem.GetShortestPath(mol, mol.GetSubstructMatch(rule['amino_group'])[0][0], mol.GetSubstructMatch(rule['carboxylic_acid'])[0][0])
                        if len(chains) - 1 <= rule['max_chain_length_high']:
                            row.append(rule['prediction_high'])
                            continue
                        else:
                            row.append(rule['prediction_low'])
                            continue
                    row.append(0)
                elif rule['number'] == 5:
                    # Rule 5 logic
                    hydroxyl_matches = mol.GetSubstructMatches(rule['hydroxyl_group'])
                    if len(hydroxyl_matches) >= rule['min_hydroxyls_high']:
                        # Check chain length
                        atoms = [atom.GetIdx() for atom in mol.GetAtoms() if atom.GetAtomicNum() == 6]
                        if len(atoms) <= rule['max_chain_length_high']:
                            row.append(rule['prediction_high'])
                            continue
                        else:
                            row.append(rule['prediction_low'])
                            continue
                    elif len(hydroxyl_matches) == 1:
                        row.append(rule['prediction_low'])
                        continue
                    row.append(0)
                elif rule['number'] == 6:
                    # Rule 6 logic
                    if mol.HasSubstructMatch(rule['aliphatic_thiol']):
                        row.append(rule['prediction_high'])
                        continue
                    elif mol.HasSubstructMatch(rule['aromatic_thiol']):
                        row.append(rule['prediction_low'])
                        continue
                    row.append(0)
                elif rule['number'] == 7:
                    # Rule 7 logic
                    if mol.HasSubstructMatch(rule['ether_linkage']):
                        # Check chain length
                        carbons = [atom for atom in mol.GetAtoms() if atom.GetAtomicNum() == 6]
                        if len(carbons) >= rule['min_chain_length_low']:
                            row.append(rule['prediction_low'])
                            continue
                    row.append(0)
                elif rule['number'] == 8:
                    # Rule 8 logic
                    if mol.HasSubstructMatch(rule['aldehyde_ketone_aromatic']):
                        row.append(rule['prediction_low'])
                        continue
                    row.append(0)
                elif rule['number'] == 9:
                    # Rule 9 logic
                    if mol.HasSubstructMatch(rule['bulky_hydrophobic']):
                        if rule['no_donor_sites']:
                            donor_atoms = [atom for atom in mol.GetAtoms() if atom.GetAtomicNum() in [7,8,16]]
                            if not donor_atoms:
                                row.append(rule['prediction_low'])
                                continue
                    row.append(0)
                elif rule['number'] == 10:
                    # Rule 10 logic
                    if mol.HasSubstructMatch(rule['heterocycle_aliphatic_linker']):
                        row.append(rule['prediction_high'])
                        continue
                    row.append(0)
                elif rule['number'] == 11:
                    # Rule 11 logic
                    if mol.HasSubstructMatch(rule['fluorinated_chain']):
                        row.append(rule['prediction_low'])
                        continue
                    row.append(0)
                elif rule['number'] == 12:
                    # Rule 12 logic
                    if mol.HasSubstructMatch(rule['aromatic_ketone']):
                        edg_match = any(mol.HasSubstructMatch(edg) for edg in rule['edg'])
                        if edg_match:
                            row.append(rule['prediction_high'])
                            continue
                    row.append(0)
                elif rule['number'] == 13:
                    # Rule 13 logic
                    if mol.HasSubstructMatch(rule['ortho_hydroxyl_carboxyl']):
                        row.append(rule['prediction_low'])
                        continue
                    row.append(0)
                elif rule['number'] == 14:
                    # Rule 14 logic
                    if mol.HasSubstructMatch(rule['trifluoroacetyl']):
                        row.append(rule['prediction_low'])
                        continue
                    row.append(0)
                elif rule['number'] == 15:
                    # Rule 15 logic
                    if mol.HasSubstructMatch(rule['fused_rings']):
                        row.append(rule['prediction_high'])
                        continue
                    row.append(0)
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f"Rule {rule['number']}" for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

1. **Rule 1**: Modifiers that are **α-amino acids** with **acidic side chains** (additional carboxyl groups) yield **high** yield; those with **nonpolar or bulky hydrophobic side chains** yield **low** yield.
   - *High Yield Examples*:
     - **(2S)-2-aminobutanedioic acid** (aspartic acid)
     - **(2S)-2-aminopentanedioic acid** (glutamic acid)
   - *Low Yield Examples*:
     - **(2S)-2-amino-3-phenylpropanoic acid** (phenylalanine)
     - **(2S)-6-acetamido-2-aminohexanoic acid** (acetylated lysine)

2. **Rule 2**: Modifiers that are **aromatic carboxylic acids** with **strong electron-withdrawing groups** at the **para position** yield **high** yield; those with **electron-donating groups** or less withdrawing groups yield **low** yield.
   - *High Yield Examples*:
     - **4-nitrobenzoic acid** (para-nitro group)
     - **4-(bromomethyl)benzoic acid** (para-bromomethyl group)
   - *Low Yield Examples*:
     - **4-methylbenzoic acid** (para-methyl group)
     - **4-formylbenzoic acid** (para-formyl group)

3. **Rule 3**: Modifiers that are **aromatic carboxylic acids** with **nitrogen-containing heterocycles** directly attached to the **aromatic ring** yield **high** yield.
   - *High Yield Examples*:
     - **Pyridine-3-carboxylic acid** (nicotinic acid)
     - **1H-pyrazole-4-carboxylic acid**
     - **2-oxo-1H-pyridine-4-carboxylic acid**

4. **Rule 4**: Modifiers containing **multiple hydrophilic functional groups** (e.g., **amino**, **hydroxyl**) within **short aliphatic chains** (≤6 carbons) yield **high** yield.
   - *High Yield Examples*:
     - **5-aminopentanoic acid**
     - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (gluconic acid)
     - **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid**
   - *Low Yield Examples*:
     - **7-hydroxyheptanoic acid** (longer chain)
     - **3-(4-hydroxyphenyl)propanoic acid** (fewer hydroxyl groups)

5. **Rule 5**: Modifiers with **bulky hydrophobic aromatic side chains** yield **low** yield due to **steric hindrance** and poor coordination with the catalyst.
   - *Low Yield Examples*:
     - **(2S)-2-amino-3-phenylpropanoic acid** (phenylalanine)
     - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (tryptophan)

6. **Rule 6**: Modifiers with **aliphatic thiol groups** yield **high** yield; those with **aromatic thiol groups** yield **low** yield.
   - *High Yield Example*:
     - **3-sulfanylpropanoic acid**
   - *Low Yield Example*:
     - **4-sulfanylbenzoic acid**

7. **Rule 7**: Modifiers with **long aliphatic chains** (>6 carbons) without additional **polar functional groups** yield **low** yield due to poor solubility and reduced interaction with the catalyst.
   - *Low Yield Examples*:
     - **7-aminoheptanoic acid**
     - **8-aminooctanoic acid**

8. **Rule 8**: Modifiers containing **ether linkages** in **flexible aliphatic chains** yield **low** yield due to decreased effective coordination with the catalyst.
   - *Low Yield Examples*:
     - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**
     - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**

9. **Rule 9**: Modifiers with **strong electron-withdrawing groups** on **aliphatic chains**, such as **perfluorinated chains**, yield **low** yield due to interference with catalyst coordination.
   - *Low Yield Example*:
     - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**

10. **Rule 10**: Modifiers that are **aromatic carboxylic acids** with **amino groups** in the **para position** yield **high** yield due to enhanced coordination ability.
    - *High Yield Example*:
      - **4-aminobenzoic acid**

11. **Rule 11**: Modifiers with **functional groups capable of chelation** (e.g., adjacent carbonyls, hydroxyls) in **rigid ring systems** yield **high** yield by effectively stabilizing the metal center.
    - *High Yield Example*:
      - **1,3-dioxo-2-benzofuran-5-carboxylic acid**

12. **Rule 12**: Modifiers with **aldehyde or ketone groups** attached to **aromatic rings** yield **low** yield due to potential side reactions or blocking of active sites.
    - *Low Yield Examples*:
      - **4-formylbenzoic acid**
      - **5-formyl-2-hydroxybenzoic acid**

13. **Rule 13**: Modifiers with **heteroaromatic rings** connected via **short aliphatic chains** to the **carboxyl group** yield **high** yield due to favorable interactions with the metal center.
    - *High Yield Example*:
      - **4-pyridin-4-ylbutanoic acid**

**End of Rules**

---

**Explanation and Analysis:**

The above rules have been generated by analyzing the provided dataset and considering the structural features that correlate with high or low yields in the radical-mediated remote δ-C(sp³)–H bond functionalization reaction. The rules focus on combinations of functional groups and substructures within the molecular modifiers, linking them to the observed yields based on underlying chemical principles.

- **Hydrophilic vs. Hydrophobic Interactions:** Rules 1, 4, and 5 highlight the importance of hydrophilic functional groups (e.g., amino, hydroxyl) in promoting high yields through enhanced coordination with the catalyst. Conversely, bulky hydrophobic groups can hinder this interaction.
- **Electronic Effects:** Rules 2, 9, and 12 address how electron-withdrawing and electron-donating groups influence the yield. Strong electron-withdrawing groups can enhance coordination or deactivate interfering sites, while electron-donating groups may reduce effectiveness.
- **Steric Considerations:** Rules 5 and 7 consider the impact of steric hindrance due to bulky groups or long aliphatic chains, which can impede effective catalyst interaction.
- **Coordination Ability:** Rules 6, 10, 11, and 13 emphasize functional groups capable of coordinating with the metal center (e.g., thiols, amines, chelating rings), which enhance catalytic activity and increase yields.
- **Flexibility and Chain Length:** Rule 8 notes that excessive flexibility from ether linkages can reduce effective coordination by allowing the modifier to adopt conformations less favorable for interaction with the catalyst.
- **Potential Side Reactions:** Rule 12 points out that certain functional groups, like aldehydes and ketones attached to aromatic rings, may engage in side reactions or block active sites, leading to lower yields.

These rules aim to cover a broad range of the dataset while balancing simplicity and complexity. They can be used to predict the yield outcome for new modifiers based on their structural features, aiding in the rational design of modifiers for optimized catalytic activity.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13
0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
-1,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0
-1,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.5714285714285714; Test Accuracy: 0.0
    Train Support: 0.07142857142857142; Test Support: 0.0
    Train Confidence: 0.875; Test Confidence: 0.5
    Train Lift: 1.7299836601307192; Test Lift: NONE
    Train Leverage: 0.028163265306122454; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Initialize the list to hold results
    results = []

    # Define SMARTS patterns for each rule
    
    # Rule 1 patterns
    # α-amino acid with carboxylic acid
    alpha_amino_acid = '[NX3;H2][C@@H]([#6])[CX3](=O)[O;H1,-]'
    # Additional carboxyl group (acidic side chain)
    additional_carboxyl = '[CX3](=O)[O;H1,-]'
    # Bulky hydrophobic aromatic side chain (e.g., phenylalanine)
    bulky_hydrophobic_aromatic = '[NX3;H2][C@@H]([CH2][c])[CX3](=O)[O;H1,-]'
    # Nonpolar aliphatic side chain (e.g., leucine, isoleucine)
    nonpolar_aliphatic = '[NX3;H2][C@@H]([CH2][CH3])[CX3](=O)[O;H1,-]'

    # Rule 2 patterns
    # Aromatic carboxylic acid
    aromatic_carboxylic_acid = 'c1ccc(cc1)C(=O)O'
    # Electron-withdrawing groups (EWG) at para position
    para_EWG = 'c1cc([CX3](=O)[O;H1,-])cc([F,Cl,Br,I,$(N(=O)=O),$(C#N),$(C(=O)[O;H1,-])])c1'
    # Electron-donating groups (EDG) at para position
    para_EDG = 'c1cc([CX3](=O)[O;H1,-])cc([NH2,OH,OCH3,CH3])c1'

    # Rule 3 patterns
    # Aromatic carboxylic acid with nitrogen-containing heterocycles directly attached
    heteroaromatic_carb_acid = '[n][c]1cccc1C(=O)[O;H1,-]'

    # Rule 4 patterns
    # Short aliphatic chain (≤6 carbons) with multiple hydrophilic functional groups
    short_aliphatic_chain = '[CX3](=O)[O;H1,-][CH2]{0,5}[CH2]'
    hydrophilic_groups = '[OX2H,NX3H2,NX3H1]'

    # Rule 5 patterns
    # Bulky hydrophobic aromatic side chain (same as in Rule 1 low prediction)
    # Already defined above as bulky_hydrophobic_aromatic

    # Rule 6 patterns
    # Aliphatic thiol
    aliphatic_thiol = '[CX3](=O)[O;H1,-][CH2,CH][CH2,CH][SX2H]'
    # Aromatic thiol
    aromatic_thiol = '[CX3](=O)[O;H1,-][c][SX2H]'

    # Rule 7 patterns
    # Long aliphatic chains (>6 carbons) without additional polar functional groups
    long_aliphatic_chain = '[CH2][CH2][CH2][CH2][CH2][CH2][CH2]'
    polar_groups = '[#7,#8,#15,#16]'

    # Rule 8 patterns
    # Ether linkages in flexible aliphatic chains
    ether_linkage = '[OX2][CX4]'

    # Rule 9 patterns
    # Strong electron-withdrawing groups on aliphatic chains (perfluorinated chains)
    perfluorinated_chain = '[CX4]([F])([F])[F]'

    # Rule 10 patterns
    # Aromatic carboxylic acids with amino groups in the para position
    para_amino_group = 'c1cc([CX3](=O)[O;H1,-])cc(N)c1'

    # Rule 11 patterns
    # Functional groups capable of chelation in rigid ring systems
    chelating_rings = '[c][CX3](=O)[OX1H0][c][CX3](=O)[O;H1,-]'

    # Rule 12 patterns
    # Aromatic aldehyde or ketone groups attached to aromatic rings
    aromatic_aldehyde = 'c[CX3H1](=O)'
    aromatic_ketone = 'c[CX3](=O)[#6]'

    # Rule 13 patterns
    # Heteroaromatic rings connected via short aliphatic chains to carboxyl group
    heteroaromatic_chain = '[n,o,s][c][CH2][CH2][CX3](=O)[O;H1,-]'

    # Compile SMARTS patterns
    pattern_dict = {
        'Rule 1_high': Chem.MolFromSmarts(alpha_amino_acid),
        'Rule 1_high_additional_carboxyl': Chem.MolFromSmarts(additional_carboxyl),
        'Rule 1_low_aromatic': Chem.MolFromSmarts(bulky_hydrophobic_aromatic),
        'Rule 1_low_aliphatic': Chem.MolFromSmarts(nonpolar_aliphatic),
        'Rule 2_high': Chem.MolFromSmarts(para_EWG),
        'Rule 2_low': Chem.MolFromSmarts(para_EDG),
        'Rule 3_high': Chem.MolFromSmarts(heteroaromatic_carb_acid),
        'Rule 4_high_chain': Chem.MolFromSmarts(short_aliphatic_chain),
        'Rule 4_high_hydrophilic': Chem.MolFromSmarts(hydrophilic_groups),
        'Rule 5_low': Chem.MolFromSmarts(bulky_hydrophobic_aromatic),
        'Rule 6_high': Chem.MolFromSmarts(aliphatic_thiol),
        'Rule 6_low': Chem.MolFromSmarts(aromatic_thiol),
        'Rule 7_low_chain': Chem.MolFromSmarts(long_aliphatic_chain),
        'Rule 7_low_polar': Chem.MolFromSmarts(polar_groups),
        'Rule 8_low': Chem.MolFromSmarts(ether_linkage),
        'Rule 9_low': Chem.MolFromSmarts(perfluorinated_chain),
        'Rule 10_high': Chem.MolFromSmarts(para_amino_group),
        'Rule 11_high': Chem.MolFromSmarts(chelating_rings),
        'Rule 12_low_aldehyde': Chem.MolFromSmarts(aromatic_aldehyde),
        'Rule 12_low_ketone': Chem.MolFromSmarts(aromatic_ketone),
        'Rule 13_high': Chem.MolFromSmarts(heteroaromatic_chain)
    }

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*13)
            continue
        row = []

        # Rule 1
        try:
            match_alpha_amino = mol.HasSubstructMatch(pattern_dict['Rule 1_high'])
            if match_alpha_amino:
                num_carboxyl = len(mol.GetSubstructMatches(pattern_dict['Rule 1_high_additional_carboxyl']))
                if num_carboxyl > 1:
                    row.append(1)
                elif mol.HasSubstructMatch(pattern_dict['Rule 1_low_aromatic']) or mol.HasSubstructMatch(pattern_dict['Rule 1_low_aliphatic']):
                    row.append(-1)
                else:
                    row.append(0)
            else:
                row.append(0)
        except:
            row.append(0)

        # Rule 2
        try:
            match_aromatic_carb_acid = mol.HasSubstructMatch(Chem.MolFromSmarts(aromatic_carboxylic_acid))
            if match_aromatic_carb_acid:
                if mol.HasSubstructMatch(pattern_dict['Rule 2_high']):
                    row.append(1)
                elif mol.HasSubstructMatch(pattern_dict['Rule 2_low']):
                    row.append(-1)
                else:
                    row.append(0)
            else:
                row.append(0)
        except:
            row.append(0)

        # Rule 3
        try:
            match_rule3 = mol.HasSubstructMatch(pattern_dict['Rule 3_high'])
            row.append(1 if match_rule3 else 0)
        except:
            row.append(0)

        # Rule 4
        try:
            match_chain = mol.HasSubstructMatch(pattern_dict['Rule 4_high_chain'])
            hydrophilic_matches = mol.GetSubstructMatches(pattern_dict['Rule 4_high_hydrophilic'])
            if match_chain and len(hydrophilic_matches) > 1:
                row.append(1)
            else:
                row.append(0)
        except:
            row.append(0)

        # Rule 5
        try:
            match_rule5 = mol.HasSubstructMatch(pattern_dict['Rule 5_low'])
            row.append(-1 if match_rule5 else 0)
        except:
            row.append(0)

        # Rule 6
        try:
            match_aliphatic_thiol = mol.HasSubstructMatch(pattern_dict['Rule 6_high'])
            if match_aliphatic_thiol:
                row.append(1)
            else:
                match_aromatic_thiol = mol.HasSubstructMatch(pattern_dict['Rule 6_low'])
                row.append(-1 if match_aromatic_thiol else 0)
        except:
            row.append(0)

        # Rule 7
        try:
            match_long_chain = mol.HasSubstructMatch(pattern_dict['Rule 7_low_chain'])
            match_polar_groups = mol.HasSubstructMatch(pattern_dict['Rule 7_low_polar'])
            if match_long_chain and not match_polar_groups:
                row.append(-1)
            else:
                row.append(0)
        except:
            row.append(0)

        # Rule 8
        try:
            match_rule8 = mol.HasSubstructMatch(pattern_dict['Rule 8_low'])
            row.append(-1 if match_rule8 else 0)
        except:
            row.append(0)

        # Rule 9
        try:
            match_rule9 = mol.HasSubstructMatch(pattern_dict['Rule 9_low'])
            row.append(-1 if match_rule9 else 0)
        except:
            row.append(0)

        # Rule 10
        try:
            match_rule10 = mol.HasSubstructMatch(pattern_dict['Rule 10_high'])
            row.append(1 if match_rule10 else 0)
        except:
            row.append(0)

        # Rule 11
        try:
            match_rule11 = mol.HasSubstructMatch(pattern_dict['Rule 11_high'])
            row.append(1 if match_rule11 else 0)
        except:
            row.append(0)

        # Rule 12
        try:
            match_aldehyde = mol.HasSubstructMatch(pattern_dict['Rule 12_low_aldehyde'])
            match_ketone = mol.HasSubstructMatch(pattern_dict['Rule 12_low_ketone'])
            if match_aldehyde or match_ketone:
                row.append(-1)
            else:
                row.append(0)
        except:
            row.append(0)

        # Rule 13
        try:
            match_rule13 = mol.HasSubstructMatch(pattern_dict['Rule 13_high'])
            row.append(1 if match_rule13 else 0)
        except:
            row.append(0)

        # Append the row to results
        results.append(row)

    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {i}' for i in range(1,14)])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

1. **Rule 1**: Modifiers that are **α-amino acids** with **acidic side chains** (additional carboxyl groups) yield **high** yield; those with **nonpolar or aromatic side chains** yield **low** yield.
   - *High Yield Examples*:
     - **(2S)-2-aminobutanedioic acid** (Aspartic acid)
     - **(2S)-2-aminopentanedioic acid** (Glutamic acid)
   - *Low Yield Examples*:
     - **(2S)-2-amino-3-phenylpropanoic acid** (Phenylalanine)
     - **(2S)-6-acetamido-2-aminohexanoic acid** (Acetylated lysine)

2. **Rule 2**: Modifiers that are **aromatic carboxylic acids** with **electron-withdrawing groups** at the **para position** yield **high** yield; those with **electron-donating groups** yield **low** yield.
   - *High Yield Examples*:
     - **4-nitrobenzoic acid** (para-nitro group)
     - **4-(bromomethyl)benzoic acid** (para-bromomethyl group)
   - *Low Yield Examples*:
     - **4-methylbenzoic acid** (para-methyl group)
     - **4-formylbenzoic acid** (para-formyl group)

3. **Rule 3**: Modifiers that are **aromatic carboxylic acids** with **amino groups** at the **para position** yield **high** yield due to enhanced coordination with the metal center.
   - *High Yield Example*:
     - **4-aminobenzoic acid**
   - *Low Yield Example*:
     - **4-methylbenzoic acid**

4. **Rule 4**: Modifiers containing **nitrogen heterocycles** directly attached to the **carboxyl group** yield **high** yield; those where the heterocycle is separated by additional rings yield **low** yield.
   - *High Yield Examples*:
     - **Pyridine-3-carboxylic acid** (nicotinic acid)
     - **1H-pyrazole-4-carboxylic acid**
     - **2-oxo-1H-pyridine-4-carboxylic acid**
   - *Low Yield Example*:
     - **4-pyridin-4-ylbenzoic acid** (heterocycle separated by benzene ring)

5. **Rule 5**: Modifiers with **multiple hydroxyl groups** within **short aliphatic chains** (≤6 carbons) yield **high** yield due to increased hydrophilicity and coordination sites.
   - *High Yield Examples*:
     - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (gluconic acid)
     - **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid**
   - *Low Yield Example*:
     - **7-hydroxyheptanoic acid** (longer chain with fewer hydroxyl groups)

6. **Rule 6**: Modifiers containing **aliphatic thiol groups** yield **high** yield; those with **aromatic thiol groups** yield **low** yield due to differences in coordination behavior.
   - *High Yield Example*:
     - **3-sulfanylpropanoic acid**
   - *Low Yield Example*:
     - **4-sulfanylbenzoic acid**

7. **Rule 7**: Modifiers with **long aliphatic chains** (>6 carbons) without additional **polar functional groups** yield **low** yield due to decreased solubility and poor catalyst interaction.
   - *Low Yield Examples*:
     - **7-aminoheptanoic acid**
     - **8-aminooctanoic acid**

8. **Rule 8**: Modifiers containing **ether linkages** in **flexible aliphatic chains** yield **low** yield due to decreased effective coordination with the catalyst.
   - *Low Yield Examples*:
     - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**
     - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**

9. **Rule 9**: Modifiers with **strong electron-withdrawing groups** on **aliphatic chains**, such as **fluorinated chains**, yield **low** yield due to interference with catalyst coordination.
   - *Low Yield Example*:
     - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**

10. **Rule 10**: Modifiers with **functional groups capable of chelation** (e.g., adjacent carbonyls or hydroxyls) in **rigid ring systems** yield **high** yield by stabilizing the metal center.
    - *High Yield Example*:
      - **1,3-dioxo-2-benzofuran-5-carboxylic acid**

11. **Rule 11**: Modifiers that are **α-amino acids** with **nitrogen-containing aromatic side chains** yield **high** yield due to additional coordination possibilities.
    - *High Yield Example*:
      - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (tryptophan)
    - *Low Yield Example*:
      - **(2S)-2-amino-3-phenylpropanoic acid** (phenylalanine)

12. **Rule 12**: Modifiers with **aldehyde or ketone groups** attached to **aromatic rings** yield **low** yield due to potential side reactions and active site blockage.
    - *Low Yield Examples*:
      - **4-formylbenzoic acid**
      - **5-formyl-2-hydroxybenzoic acid**

13. **Rule 13**: Modifiers containing **aromatic rings with methoxy groups** yield **low** yield due to electron-donating effects that reduce metal coordination efficiency.
    - *Low Yield Example*:
      - **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid**

14. **Rule 14**: Modifiers that are **aromatic carboxylic acids** with **hydroxyl groups** extending from a short aliphatic chain yield **high** yield due to increased flexibility and coordination.
    - *High Yield Example*:
      - **5-(4-hydroxyphenyl)pentanoic acid**
    - *Low Yield Example*:
      - **3-(4-hydroxyphenyl)propanoic acid** (shorter chain reduces flexibility)

15. **Rule 15**: Modifiers with **short-chain aliphatic acids** (≤6 carbons) containing **hydrophilic functional groups** (e.g., amino, hydroxyl) yield **high** yield by enhancing solubility and catalyst interaction.
    - *High Yield Examples*:
      - **5-aminopentanoic acid**
      - **3-sulfanylpropanoic acid**
    - *Low Yield Example*:
      - **7-hydroxyheptanoic acid** (longer chain)

**End of Rules**

---

**Explanation and Analysis:**

The generated rules are designed to capture the relationships between the structural features of molecular modifiers and the resulting high or low yields in the radical-mediated remote δ-C(sp³)–H bond functionalization reaction. These rules combine multiple functional groups and consider underlying physicochemical properties such as electronic effects, steric factors, and coordination capabilities with the catalyst.

- **Coordination Ability:** Rules 1, 3, 4, 5, 6, 10, and 11 emphasize the importance of functional groups (e.g., amino acids with acidic side chains, nitrogen heterocycles, multiple hydroxyl groups, thiols) that can effectively coordinate with the metal center, enhancing catalytic activity and resulting in high yields.

- **Electronic Effects:** Rules 2, 9, 12, and 13 focus on how electron-withdrawing or electron-donating groups influence yield. Electron-withdrawing groups (e.g., nitro, bromomethyl) at the para position of aromatic carboxylic acids enhance coordination with the catalyst, leading to high yields, while electron-donating groups (e.g., methyl, methoxy) reduce coordination efficiency and yield.

- **Steric Considerations and Chain Length:** Rules 7, 8, and 14 address how steric hindrance and chain length affect yield. Long aliphatic chains without additional polar groups decrease solubility and catalyst interaction (Rule 7), while flexible ether linkages can reduce effective coordination due to increased conformational freedom (Rule 8). The chain length in aromatic carboxylic acids with aliphatic extensions influences flexibility and coordination (Rule 14).

- **Functional Group Interactions:** Rules 12 and 13 highlight that certain functional groups can lead to low yields by engaging in side reactions or blocking active sites (e.g., aldehydes, ketones, methoxy groups on aromatic rings).

- **Hydrophilicity and Solubility:** Rule 15 underlines the role of hydrophilic functional groups in short-chain aliphatic acids, enhancing solubility and interaction with the catalyst, thus promoting high yields.

These rules strike a balance between coverage and specificity, allowing for the prediction of high or low yields based on the combination of structural features in the modifiers. By applying these rules, one can rationally design or select modifiers to optimize and control the yield of the target reaction. The rules have been refined to better align with the dataset and provide clearer guidance for future modifier selection.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6; Test Accuracy: 1.0
    Train Support: 0.0380952380952381; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 1.9444444444444446; Test Lift: NONE
    Train Leverage: 0.01850340136054422; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and structural motifs
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1]'
    
    # Primary amine group (-NH2)
    primary_amine = '[NX3H2]'
    
    # Alpha amino acid: amino group attached to alpha carbon of carboxylic acid
    alpha_amino_acid = '[NX3H2][CX4H]([*])[CX3](=O)[OX1H0-,OX2H1]'
    
    # Additional carboxyl group (for acidic side chains)
    additional_carboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1]'
    
    # Aromatic ring
    aromatic_ring = 'c1ccccc1'
    
    # Electron-withdrawing groups (EWGs) at para position
    ewg_para = 'c1ccc([CX3](=O)[OX1H0-,OX2H1])c([F,Cl,Br,I,$(N(=O)=O),$(C(F)(F)F)])c1'
    
    # Electron-donating groups (EDGs) at para position
    edg_para = 'c1ccc([CX3](=O)[OX1H0-,OX2H1])c([OX2H,$(OC),$(NC)])c1'
    
    # Amino group at para position
    amino_para = 'c1ccc([CX3](=O)[OX1H0-,OX2H1])c(N)c1'
    
    # Nitrogen heterocycles directly attached to carboxyl group
    nitrogen_heterocycle_carboxylic_acid = '[nH0r5,nH0r6][CX3](=O)[OX1H0-,OX2H1]'
    
    # Nitrogen heterocycles separated by additional rings (for exclusion)
    separated_heterocycle = '[c][c,n][CX3](=O)[OX1H0-,OX2H1]'
    
    # Multiple hydroxyl groups in short aliphatic chains (≤6 carbons)
    multiple_hydroxyls = '[OX2H][CX4][CX4][CX4][CX4][CX3](=O)[OX1H0-,OX2H1]'
    
    # Aliphatic thiol groups
    aliphatic_thiol = '[SX2H][CX4][CX3](=O)[OX1H0-,OX2H1]'
    
    # Aromatic thiol groups (for exclusion)
    aromatic_thiol = '[SX2H][c]'
    
    # Long aliphatic chains (>6 carbons) without polar functional groups
    long_aliphatic_chain = '[CX4][CX4][CX4][CX4][CX4][CX4][CX4][CX3](=O)[OX1H0-,OX2H1]'
    
    # Ether linkages in flexible aliphatic chains
    ether_linkage = '[CX4][OX2][CX4]'
    
    # Fluorinated chains (strong EWGs on aliphatic chains)
    fluorinated_chain = '[CX4](F)(F)[CX4](F)(F)[CX3](=O)[OX1H0-,OX2H1]'
    
    # Chelation-capable groups in rigid ring systems
    chelating_ring = '[O,S,N][r][O,S,N][CX3](=O)[OX1H0-,OX2H1]'
    
    # Nitrogen-containing aromatic side chains in α-amino acids
    nitrogen_aromatic_side_chain = '[NX3H2][CX4H]([c,n])[CX3](=O)[OX1H0-,OX2H1]'
    
    # Aldehyde or ketone groups attached to aromatic rings
    aldehyde_or_ketone_on_aromatic = 'c1ccc([CX3](=O)[CX4H0])cc1'
    
    # Methoxy groups on aromatic rings
    methoxy_on_aromatic = 'c1ccc([OX2][CX4H3])cc1'
    
    # Hydroxyl groups extending from short aliphatic chains attached to aromatic rings
    hydroxyl_on_short_chain = 'c1ccc([CX4][CX4][OX2H])cc1'
    
    # Short-chain aliphatic acids (≤6 carbons) with hydrophilic functional groups
    short_chain_hydrophilic = '[CX4][CX4][OX2H][CX3](=O)[OX1H0-,OX2H1]'
    
    # Prepare rules as a list of dictionaries
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are α-amino acids with acidic side chains yield high yield; those with nonpolar or aromatic side chains yield low yield.',
            'high_patterns': [
                alpha_amino_acid,
                additional_carboxylic_acid
            ],
            'low_patterns': [
                alpha_amino_acid,
                aromatic_ring
            ],
            'prediction_high': 1,
            'prediction_low': -1
        },
        {
            'number': 2,
            'description': 'Modifiers that are aromatic carboxylic acids with electron-withdrawing groups at the para position yield high yield; those with electron-donating groups yield low yield.',
            'high_patterns': [
                ewg_para
            ],
            'low_patterns': [
                edg_para
            ],
            'prediction_high': 1,
            'prediction_low': -1
        },
        {
            'number': 3,
            'description': 'Modifiers that are aromatic carboxylic acids with amino groups at the para position yield high yield.',
            'patterns': [
                amino_para
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers containing nitrogen heterocycles directly attached to the carboxyl group yield high yield; those where the heterocycle is separated by additional rings yield low yield.',
            'high_patterns': [
                nitrogen_heterocycle_carboxylic_acid
            ],
            'low_patterns': [
                separated_heterocycle
            ],
            'prediction_high': 1,
            'prediction_low': -1
        },
        {
            'number': 5,
            'description': 'Modifiers with multiple hydroxyl groups within short aliphatic chains (≤6 carbons) yield high yield.',
            'patterns': [
                multiple_hydroxyls
            ],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers containing aliphatic thiol groups yield high yield; those with aromatic thiol groups yield low yield.',
            'high_patterns': [
                aliphatic_thiol
            ],
            'low_patterns': [
                aromatic_thiol
            ],
            'prediction_high': 1,
            'prediction_low': -1
        },
        {
            'number': 7,
            'description': 'Modifiers with long aliphatic chains (>6 carbons) without additional polar functional groups yield low yield.',
            'patterns': [
                long_aliphatic_chain
            ],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Modifiers containing ether linkages in flexible aliphatic chains yield low yield.',
            'patterns': [
                ether_linkage
            ],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers with strong electron-withdrawing groups on aliphatic chains, such as fluorinated chains, yield low yield.',
            'patterns': [
                fluorinated_chain
            ],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Modifiers with functional groups capable of chelation in rigid ring systems yield high yield.',
            'patterns': [
                chelating_ring
            ],
            'prediction': 1
        },
        {
            'number': 11,
            'description': 'Modifiers that are α-amino acids with nitrogen-containing aromatic side chains yield high yield.',
            'patterns': [
                nitrogen_aromatic_side_chain
            ],
            'prediction': 1
        },
        {
            'number': 12,
            'description': 'Modifiers with aldehyde or ketone groups attached to aromatic rings yield low yield.',
            'patterns': [
                aldehyde_or_ketone_on_aromatic
            ],
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Modifiers containing aromatic rings with methoxy groups yield low yield.',
            'patterns': [
                methoxy_on_aromatic
            ],
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'Modifiers that are aromatic carboxylic acids with hydroxyl groups extending from a short aliphatic chain yield high yield.',
            'patterns': [
                hydroxyl_on_short_chain
            ],
            'prediction': 1
        },
        {
            'number': 15,
            'description': 'Modifiers with short-chain aliphatic acids (≤6 carbons) containing hydrophilic functional groups yield high yield.',
            'patterns': [
                short_chain_hydrophilic
            ],
            'prediction': 1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        if 'high_patterns' in rule:
            rule['compiled_high_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule['high_patterns']]
        if 'low_patterns' in rule:
            rule['compiled_low_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule['low_patterns']]
        if 'patterns' in rule:
            rule['compiled_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule['patterns']]
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = False
                if 'compiled_high_patterns' in rule:
                    match_high = all([mol.HasSubstructMatch(pat) for pat in rule['compiled_high_patterns']])
                    match_low = all([mol.HasSubstructMatch(pat) for pat in rule['compiled_low_patterns']])
                    if match_high:
                        row.append(rule['prediction_high'])
                    elif match_low:
                        row.append(rule['prediction_low'])
                    else:
                        row.append(0)
                elif 'compiled_patterns' in rule:
                    match = all([mol.HasSubstructMatch(pat) for pat in rule['compiled_patterns']])
                    if match:
                        row.append(rule['prediction'])
                    else:
                        row.append(0)
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

---

**Rule 1: Modifiers Containing Carboxylic Acid Groups and Additional Nitrogen Donor Atoms**

- **Description**: Modifiers that possess a **carboxylic acid group** along with at least one additional **nitrogen donor atom** (such as amino groups or nitrogen-containing heterocycles) tend to yield a **high** value of yield. The combination of these functional groups enhances coordination with the metal center, stabilizing the catalyst.

- **High Yield Examples**:
  - **(2S)-2-aminobutanedioic acid** (Aspartic acid)
  - **(2S)-2-aminopentanedioic acid** (Glutamic acid)
  - **5-aminopentanoic acid**
  - **4-aminobenzoic acid**
  - **Pyridine-3-carboxylic acid**
  - **1H-pyrazole-4-carboxylic acid**

- **Low Yield Examples**:
  - **(2S)-2-amino-3-phenylpropanoic acid** (Phenylalanine)
  - **7-aminoheptanoic acid**
  - **8-aminooctanoic acid**

---

**Rule 2: Aromatic Carboxylic Acids with Electron-Withdrawing Para Substituents**

- **Description**: Aromatic carboxylic acids that have strong **electron-withdrawing groups** (such as nitro or halogens) at the **para position** yield a **high** value of yield. These groups increase the acidity of the carboxylic acid and enhance metal coordination. Conversely, electron-donating groups at the same position lead to a **low** value of yield.

- **High Yield Examples**:
  - **4-nitrobenzoic acid**
  - **4-(bromomethyl)benzoic acid**

- **Low Yield Examples**:
  - **4-methylbenzoic acid**
  - **4-sulfanylbenzoic acid**

---

**Rule 3: Modifiers with Multiple Adjacent Hydroxyl Groups Near Carboxylic Acid**

- **Description**: Modifiers possessing **multiple hydroxyl groups adjacent to the carboxylic acid** yield a **high** value of yield due to their ability to **chelate** the metal center effectively.

- **High Yield Examples**:
  - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (Gluconic acid)
  - **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid**

- **Low Yield Examples**:
  - **7-hydroxyheptanoic acid**
  - **3-(4-hydroxyphenyl)propanoic acid**

---

**Rule 4: Modifiers with Aliphatic Thiol Groups**

- **Description**: Modifiers containing **aliphatic thiol groups** yield a **high** value of yield due to their strong affinity for metal ions, which aids in stabilizing the catalyst. **Aromatic thiol** counterparts yield a **low** value of yield.

- **High Yield Example**:
  - **3-sulfanylpropanoic acid**

- **Low Yield Example**:
  - **4-sulfanylbenzoic acid**

---

**Rule 5: Modifiers with Flexible Ether Linkages in Aliphatic Chains**

- **Description**: Modifiers that contain **flexible ether linkages** within aliphatic chains tend to yield a **low** value of yield. The increased **conformational freedom** reduces effective coordination with the metal center.

- **Low Yield Examples**:
  - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**
  - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**

---

**Rule 6: Modifiers with Bulky or Hydrophobic Side Chains**

- **Description**: Modifiers with **bulky**, **hydrophobic side chains**, particularly those with **aromatic** or **perfluorinated groups**, yield a **low** value of yield due to steric hindrance and reduced ability to coordinate with the metal center.

- **Low Yield Examples**:
  - **(2S)-2-amino-3-phenylpropanoic acid** (Phenylalanine)
  - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (Tryptophan)
  - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**

---

**Rule 7: Nitrogen Heterocycles Directly Attached to Carboxylic Acid**

- **Description**: Modifiers with **nitrogen-containing heterocycles** directly attached to the **carboxylic acid group** yield a **high** value of yield due to their ability to coordinate effectively with the metal center. If the heterocycle is separated from the carboxylic acid by additional rings, the yield may be **low** due to decreased coordination.

- **High Yield Examples**:
  - **Pyridine-3-carboxylic acid**
  - **2-oxo-1H-pyridine-4-carboxylic acid**

- **Low Yield Example**:
  - **4-pyridin-4-ylbenzoic acid**

---

**Rule 8: Modifiers with Additional Carbonyl Groups on Aromatic Rings Leading to Competing Coordination**

- **Description**: Modifiers that have additional **carbonyl groups** (such as aldehyde or ketone groups) on **aromatic rings** may yield a **low** value of yield due to potential competition for metal coordination, which can interfere with catalyst activity.

- **Low Yield Examples**:
  - **4-formylbenzoic acid**
  - **5-formyl-2-hydroxybenzoic acid**

---

**Rule 9: Modifiers with Electron-Donating Substituents on Aromatic Rings**

- **Description**: Modifiers containing **electron-donating groups** (such as methoxy or hydroxyl groups) on **aromatic rings** yield a **low** value of yield. These substituents decrease acidity and reduce the coordination ability of the carboxylic acid.

- **Low Yield Examples**:
  - **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid**
  - **3-(4-hydroxyphenyl)propanoic acid**

---

**Rule 10: Aliphatic Carboxylic Acids without Additional Donor Groups**

- **Description**: Modifiers that are **aliphatic carboxylic acids** lacking additional **donor functional groups** yield a **low** value of yield. The absence of other coordinating sites reduces their ability to effectively stabilize the metal center.

- **Low Yield Examples**:
  - **4-oxoheptanedioic acid**
  - **7-hydroxyheptanoic acid**
  - **7-aminoheptanoic acid**
  - **8-aminooctanoic acid**

---

**Rule 11: Modifiers with Chelating Groups in Rigid Ring Systems**

- **Description**: Modifiers that have **chelating functional groups** within **rigid ring systems** yield a **high** value of yield due to effective stabilization of the metal center through chelation.

- **High Yield Example**:
  - **1,3-dioxo-2-benzofuran-5-carboxylic acid**

---

**End of Rules**

---

These rules have been generated considering the underlying physicochemical properties that influence the reaction yield. They illustrate direct combinations of functional groups in the modifiers and their impact on the catalytic activity, enabling prediction of high or low yield for any structure fitting the descriptions.

**Key Factors Influencing Yield:**

1. **Coordination Ability with Metal Center**:
   - **High Yield**: Presence of additional nitrogen donor atoms, multiple adjacent hydroxyl groups, aliphatic thiol groups, and chelating groups in rigid ring systems enhance coordination (Rules 1, 3, 4, 7, 11).
   - **Low Yield**: Modifiers lacking sufficient coordination sites or having competing functional groups reduce catalyst effectiveness (Rules 5, 8, 10).

2. **Electronic Effects**:
   - **High Yield**: Electron-withdrawing groups increase acidity and coordination potential (Rule 2).
   - **Low Yield**: Electron-donating groups decrease acidity and coordination ability (Rule 9).

3. **Steric Hindrance**:
   - **High Yield**: Modifiers with minimal steric bulk near coordinating sites promote effective interaction (Rules 1, 3).
   - **Low Yield**: Bulky side chains or additional rings hinder coordination (Rule 6).

4. **Functional Group Interference**:
   - **Low Yield**: Additional carbonyl groups on aromatic rings can compete with the carboxylic acid for metal coordination (Rule 8).

5. **Molecular Flexibility**:
   - **High Yield**: Rigid structures promote effective chelation (Rule 11).
   - **Low Yield**: Flexible ether linkages decrease coordination efficiency (Rule 5).

**Conclusion:**

These refined rules serve as a practical guide for predicting and optimizing the yield of the radical-mediated remote δ-C(sp³)–H bond functionalization reaction. By considering the combination of functional groups and the underlying physicochemical properties, researchers can make informed decisions when selecting or designing molecular modifiers to enhance reaction outcomes.

------------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11
0,0,0,0,0,-1,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,-1,0,0,0
1,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,-1,0,0,0,0,0
1,0,0,0,0,-1,0,-1,0,0,0
1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0
1,0,0,0,0,-1,0,-1,0,0,0
0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,-1,0,-1,0,0,0
0,0,0,0,-1,0,0,0,0,0,0
1,0,0,0,0,-1,0,-1,0,0,0
1,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0
1,0,0,0,0,-1,0,0,0,0,0
1,0,0,0,0,-1,0,-1,0,0,0
0,0,0,0,0,-1,0,-1,0,0,0
0,0,0,1,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,-1,-1,0,0
0,0,0,0,0,-1,0,-1,0,0,0
0,0,0,0,0,-1,0,-1,0,0,0
1,0,0,0,0,-1,0,-1,0,0,0
0,0,0,0,0,-1,0,-1,0,0,0
1,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0
1,0,0,0,0,-1,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0
1,0,0,0,0,-1,0,0,0,0,0
1,0,0,0,-1,0,0,0,0,0,0
1,0,0,0,0,-1,0,0,0,0,0
1,0,0,0,0,-1,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6285714285714286; Test Accuracy: 0.0
    Train Support: 0.15714285714285714; Test Support: 0.0
    Train Confidence: 0.7479757085020243; Test Confidence: 0.4166666666666667
    Train Lift: 1.4834936448713538; Test Lift: NONE
    Train Leverage: 0.008027210884353748; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns

    # Common patterns
    carboxylic_acid = '[CX3](=O)[OX2H1]'  # Carboxylic acid group

    # Rule 1: Modifiers containing carboxylic acid and additional nitrogen donor atoms
    nitrogen_donor_atoms = ['[NX3;H2,H1,H0;!$([N]=*)]', '[n]']  # Amines and aromatic nitrogen

    # Rule 2: Aromatic carboxylic acids with electron-withdrawing para substituents
    electron_withdrawing_para_substituents = ['[c][c]([c][c][c][c][CX3](=O)[OX2H1])[F,Cl,Br,I,N+](=O)[O-]']

    # Rule 3: Modifiers with multiple adjacent hydroxyl groups near carboxylic acid
    multiple_adjacent_hydroxyls = '[CX4][OX2H][CX4][OX2H][CX4][OX2H]'  # Simplified pattern

    # Rule 4: Modifiers with aliphatic thiol groups
    aliphatic_thiol = '[SX2H][CX4]'  # Thiol attached to aliphatic carbon
    aromatic_thiol = '[SX2H][c]'  # Thiol attached to aromatic carbon

    # Rule 5: Modifiers with flexible ether linkages in aliphatic chains
    ether_linkage_in_chain = '[CX4][OX2][CX4]'

    # Rule 6: Modifiers with bulky or hydrophobic side chains
    bulky_hydrophobic_groups = ['[c]', '[CX4][CX4][CX4][CX4]']  # Aromatic rings or long chains

    # Rule 7: Nitrogen heterocycles directly attached to carboxylic acid
    nitrogen_heterocycle_attached_to_COOH = ['[n][CX3](=O)[OX2H1]', '[n][c][CX3](=O)[OX2H1]']

    # Rule 8: Modifiers with additional carbonyl groups on aromatic rings leading to competing coordination
    additional_carbonyl_on_aromatic_ring = '[c][CX3](=O)[O,N,S]'  # Carbonyl group on aromatic ring

    # Rule 9: Modifiers with electron-donating substituents on aromatic rings
    electron_donating_substituents_on_aromatic = ['[c][OX2H]', '[c][OX2][CX4]']

    # Rule 10: Aliphatic carboxylic acids without additional donor groups
    aliphatic_carboxylic_acid = '[CX3](=O)[OX2H1][CX4]'

    # Rule 11: Modifiers with chelating groups in rigid ring systems
    chelating_groups_in_rigid_ring = '[O,S,N]1[C,c][C,c][C,c][C,c][C,c]1[CX3](=O)[OX2H1]'

    # Now define the rules

    rules = [
        {
            'number': 1,
            'description': 'Modifiers containing carboxylic acid groups and additional nitrogen donor atoms',
            'patterns': [
                [carboxylic_acid],
                nitrogen_donor_atoms
            ],
            'prediction': 1,
        },
        {
            'number': 2,
            'description': 'Aromatic carboxylic acids with electron-withdrawing para substituents',
            'patterns': [
                electron_withdrawing_para_substituents
            ],
            'prediction': 1,
        },
        {
            'number': 3,
            'description': 'Modifiers with multiple adjacent hydroxyl groups near carboxylic acid',
            'patterns': [
                [multiple_adjacent_hydroxyls],
                [carboxylic_acid],
            ],
            'prediction': 1,
        },
        {
            'number': 4,
            'description': 'Modifiers with aliphatic thiol groups',
            'patterns': [
                [aliphatic_thiol],
                [carboxylic_acid],
            ],
            'exclude_patterns': [
                [aromatic_thiol],
            ],
            'prediction': 1,
        },
        {
            'number': 5,
            'description': 'Modifiers with flexible ether linkages in aliphatic chains',
            'patterns': [
                [ether_linkage_in_chain],
            ],
            'prediction': -1,
        },
        {
            'number': 6,
            'description': 'Modifiers with bulky or hydrophobic side chains',
            'patterns': [
                bulky_hydrophobic_groups,
            ],
            'prediction': -1,
        },
        {
            'number': 7,
            'description': 'Nitrogen heterocycles directly attached to carboxylic acid',
            'patterns': [
                nitrogen_heterocycle_attached_to_COOH,
            ],
            'prediction': 1,
        },
        {
            'number': 8,
            'description': 'Modifiers with additional carbonyl groups on aromatic rings leading to competing coordination',
            'patterns': [
                [additional_carbonyl_on_aromatic_ring],
            ],
            'prediction': -1,
        },
        {
            'number': 9,
            'description': 'Modifiers with electron-donating substituents on aromatic rings',
            'patterns': [
                electron_donating_substituents_on_aromatic,
                ['[c][CX3](=O)[OX2H1]'],
            ],
            'prediction': -1,
        },
        {
            'number': 10,
            'description': 'Aliphatic carboxylic acids without additional donor groups',
            'patterns': [
                [aliphatic_carboxylic_acid],
            ],
            'exclude_patterns': [
                nitrogen_donor_atoms,
                ['[OX2H]'],  # Exclude hydroxyl groups
                ['[SX2H]'],  # Exclude thiol groups
            ],
            'prediction': -1,
        },
        {
            'number': 11,
            'description': 'Modifiers with chelating groups in rigid ring systems',
            'patterns': [
                [chelating_groups_in_rigid_ring],
            ],
            'prediction': 1,
        },
    ]

    # Compile SMARTS patterns
    for rule in rules:
        rule['compiled_patterns'] = []
        for group in rule['patterns']:
            compiled_group = [Chem.MolFromSmarts(pat) for pat in group]
            rule['compiled_patterns'].append(compiled_group)
        # Compile exclude patterns
        if 'exclude_patterns' in rule:
            rule['compiled_exclude_patterns'] = []
            for group in rule['exclude_patterns']:
                compiled_group = [Chem.MolFromSmarts(pat) for pat in group]
                rule['compiled_exclude_patterns'].append(compiled_group)

    # Process each SMILES string
    results = []
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If molecule cannot be parsed, append zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns
                if 'compiled_exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check patterns
                for group in rule['compiled_patterns']:
                    group_match = False
                    for pat in group:
                        if mol.HasSubstructMatch(pat):
                            group_match = True
                            break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

---

**Rule 1: Modifiers Containing Carboxylic Acid and Additional Nitrogen Donor Groups (Amines) in Close Proximity**

- **Description**: Modifiers that have a **carboxylic acid group** and at least one **amino group** (primary or secondary amine) within two carbon atoms yield a **high** value of yield. The proximity of the amino group to the carboxyl group allows for effective **chelation** with the metal center, enhancing catalyst stability.

- **High Yield Examples**:
  - **(2S)-2-aminobutanedioic acid** (Aspartic acid)
  - **(2S)-2-aminopentanedioic acid** (Glutamic acid)
  - **5-aminopentanoic acid**
  - **4-aminobenzoic acid**

- **Low Yield Examples**:
  - **7-aminoheptanoic acid**
  - **8-aminooctanoic acid**

---

**Rule 2: Modifiers with Carboxylic Acid and Adjacent Multiple Hydroxyl Groups Allowing Chelation**

- **Description**: Modifiers with a **carboxylic acid group** and multiple **hydroxyl groups** located on adjacent carbons near the carboxyl group yield a **high** value of yield. These hydroxyl groups can form stable **chelate rings** with the metal center, enhancing coordination.

- **High Yield Examples**:
  - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (Gluconic acid)
  - **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid**

- **Low Yield Examples**:
  - **7-hydroxyheptanoic acid**
  - **3-(4-hydroxyphenyl)propanoic acid**

---

**Rule 3: Modifiers with Carboxylic Acid and Aliphatic Thiol Groups in Close Proximity**

- **Description**: Modifiers containing a **carboxylic acid group** and an **aliphatic thiol group** (–SH) within two to three carbon atoms yield a **high** yield due to the strong **metal-binding affinity** of thiol groups, facilitating better catalyst performance.

- **High Yield Example**:
  - **3-sulfanylpropanoic acid**

- **Low Yield Example**:
  - **4-sulfanylbenzoic acid** (Aromatic thiol)

---

**Rule 4: Modifiers with Carboxylic Acid and Electron-Withdrawing Groups on Aromatic Rings**

- **Description**: Aromatic carboxylic acids with **electron-withdrawing groups** (e.g., nitro, halogens, formyl) on the ring, especially at the **para position**, yield a **high** value of yield. These groups increase the acidity and electrophilicity of the carboxylic acid, enhancing **metal coordination**.

- **High Yield Examples**:
  - **4-nitrobenzoic acid**
  - **4-(bromomethyl)benzoic acid**

- **Low Yield Examples**:
  - **4-methylbenzoic acid** (Electron-donating methyl group)
  - **4-sulfanylbenzoic acid** (Electron-donating thiol group)

---

**Rule 5: Modifiers with Carboxylic Acid and Electron-Donating Groups on Aromatic Rings Yielding Low Yield**

- **Description**: Aromatic carboxylic acids with **electron-donating groups** (e.g., methoxy, methyl, hydroxyl, amino) on the aromatic ring, particularly at the **para position**, yield a **low** value of yield. These groups decrease the acidity and reduce the **metal-binding ability** of the carboxylic acid.

- **Low Yield Examples**:
  - **4-methylbenzoic acid**
  - **3-(4-hydroxyphenyl)propanoic acid**
  - **4-sulfanylbenzoic acid**

---

**Rule 6: Modifiers with Carboxylic Acid and Nitrogen Heterocycles Directly Attached or in Short Chains Yielding High Yield**

- **Description**: Modifiers that have a **carboxylic acid group** and a **nitrogen-containing heterocycle** (e.g., pyridine, pyrazole) either directly attached or connected by a short alkyl chain (one to three carbons) yield a **high** value of yield. The nitrogen atoms enhance **coordination** with the metal center.

- **High Yield Examples**:
  - **Pyridine-3-carboxylic acid**
  - **2-oxo-1H-pyridine-4-carboxylic acid**
  - **4-pyridin-4-ylbutanoic acid**

- **Low Yield Example**:
  - **4-pyridin-4-ylbenzoic acid** (Separation by additional aromatic ring reduces coordination)

---

**Rule 7: Modifiers with Bulky Hydrophobic Side Chains Yielding Variable Yields**

- **Description**: Modifiers with **bulky hydrophobic side chains**, such as **aromatic rings**, may yield either **high** or **low** yields depending on the presence of additional coordinating groups. If **additional donor atoms** (e.g., amino groups) are present, they can **overcome steric hindrance** and enhance yield.

- **High Yield Example**:
  - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (Tryptophan derivative with an amino group)

- **Low Yield Example**:
  - **(2S)-2-amino-3-phenylpropanoic acid** (Phenylalanine derivative without additional coordinating groups)

---

**Rule 8: Modifiers with Flexible Ether Linkages in Aliphatic Chains Yielding Low Yield**

- **Description**: Modifiers that have a **carboxylic acid group** and **flexible ether linkages** (–O–) within aliphatic chains yield a **low** value of yield. The increased **conformational flexibility** hinders effective coordination with the metal center.

- **Low Yield Examples**:
  - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**
  - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**

---

**Rule 9: Modifiers with Carboxylic Acid and Additional Carbonyl Groups Leading to Competing Coordination Yielding Low Yield**

- **Description**: Modifiers that have a **carboxylic acid group** and additional **carbonyl groups** (e.g., aldehyde, ketone) on the same molecule may yield a **low** value of yield. The additional carbonyl can **compete** for metal binding, disrupting catalyst activity.

- **Low Yield Examples**:
  - **4-formylbenzoic acid**
  - **5-formyl-2-hydroxybenzoic acid**

---

**Rule 10: Aliphatic Carboxylic Acids Without Additional Donor Groups Yielding Low Yield**

- **Description**: Straight-chain **aliphatic carboxylic acids** lacking additional **donor functional groups** (e.g., amino, hydroxyl, thiol groups) in close proximity to the carboxyl group yield a **low** value of yield. The absence of effective coordination sites limits interaction with the metal center.

- **Low Yield Examples**:
  - **7-hydroxyheptanoic acid** (Hydroxyl group distant from carboxyl group)
  - **8-aminooctanoic acid**

---

**Rule 11: Modifiers with Chelating Groups in Rigid Ring Systems Yielding High Yield**

- **Description**: Modifiers that possess **chelating functional groups** within **rigid ring systems**, such as adjacent carbonyl groups in a cyclic structure, yield a **high** value of yield. The rigidity facilitates stable **chelate formation** with the metal center.

- **High Yield Example**:
  - **1,3-dioxo-2-benzofuran-5-carboxylic acid**

---

**Rule 12: Modifiers with Carboxylic Acid and Electron-Withdrawing Fluoroalkyl or Sulfonyl Groups Yielding Low Yield**

- **Description**: Modifiers that have a **carboxylic acid group** and additional **fluoroalkyl** or **sulfonyl groups** yield a **low** value of yield despite their electron-withdrawing nature. These groups can introduce **steric hindrance** or unfavorable interactions, reducing catalyst efficiency.

- **Low Yield Examples**:
  - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**
  - **4-[(2,2,2-trifluoroacetyl)amino]butanoic acid**

---

**Rule 13: Modifiers with Carboxylic Acid and Thioether Groups Yielding Low Yield**

- **Description**: Modifiers containing a **carboxylic acid group** and a **thioether group** (–S–R) yield a **low** value of yield. Unlike thiols, thioethers have a reduced ability to coordinate with metal centers, diminishing catalytic activity.

- **Low Yield Example**:
  - **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid**

---

**Rule 14: Modifiers with Carboxylic Acid and Adjacent Amide Groups Yielding Low Yield**

- **Description**: Modifiers where the **carboxylic acid group** is adjacent to an **amide group** tend to yield a **low** value of yield. The **amide linkage** can interfere with coordination due to resonance stabilization, reducing its effectiveness as a donor site.

- **Low Yield Examples**:
  - **(2S)-6-acetamido-2-aminohexanoic acid**
  - **2-[(4-hydroxybenzoyl)amino]acetic acid**

---

**End of Rules**

---

These rules have been carefully formulated, considering the underlying physicochemical properties that influence the reaction yield. Each rule combines multiple functional groups, enhancing predictive power for the dataset. By applying these rules, one can predict whether a molecular modifier will result in a high or low yield based on its structural features.

**Key Factors Influencing Yield:**

1. **Coordination Ability with Metal Center**:
   - **High Yield**: Presence of multiple donor atoms (e.g., amino, hydroxyl, thiol groups) in proximity to the carboxylic acid enhances chelation and stabilizes the catalyst (Rules 1, 2, 3, 6, 11).
   - **Low Yield**: Absence of donor groups, or donor groups that are distant or part of interfering functionalities, reduce effective coordination (Rules 5, 8, 9, 10, 14).

2. **Electronic Effects**:
   - **High Yield**: Electron-withdrawing groups increase acidity and promote metal coordination by making the carboxylic acid more electrophilic (Rule 4).
   - **Low Yield**: Electron-donating groups decrease acidity and hinder coordination (Rule 5).

3. **Steric Hindrance and Molecular Flexibility**:
   - **High Yield**: Rigid structures and minimal steric hindrance facilitate effective metal-binding (Rules 2, 11).
   - **Low Yield**: Bulky side chains and flexible linkages can impede coordination due to steric and conformational effects (Rules 7, 8, 12).

4. **Functional Group Interference**:
   - **Low Yield**: Additional functional groups like amides or carbonyls can compete with carboxylic acids for metal coordination or reduce donor ability through resonance (Rules 9, 13, 14).

5. **Specific Functional Groups**:
   - **High Yield**: Aliphatic thiol groups (Rule 3) and nitrogen heterocycles in close proximity to the carboxyl group (Rule 6) enhance metal coordination.
   - **Low Yield**: Thioether groups and distant hydroxyl or amino groups are less effective in coordination (Rules 10, 13).

**Conclusion:**

These refined rules offer a robust framework for predicting the impact of molecular modifiers on the yield of the radical-mediated remote δ-C(sp³)–H bond functionalization reaction. By understanding and applying these rules, researchers can design and select modifiers that enhance catalytic performance, leading to optimized reaction conditions and improved yields.

------------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7 High Yield,Rule 7 Low Yield,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.5142857142857142; Test Accuracy: 0.0
    Train Support: 0.0; Test Support: 0.0
    Train Confidence: 0.5; Test Confidence: 0.5
    Train Lift: 1.0; Test Lift: NONE
    Train Leverage: 0.0; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and structural features
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX1H]'
    
    from rdkit import Chem
    import pandas as pd
    
    # Rule 1: Modifiers containing carboxylic acid and amino group within two carbon atoms
    # Including amino group attached directly to alpha carbon
    rule1_patterns = [
        Chem.MolFromSmarts('[CX3](=O)[OX1H][CX4]([NX3;H2,H1])'),  # Amino group attached to alpha carbon
        Chem.MolFromSmarts('[CX3](=O)[OX1H][CX4][NX3;H2,H1]'),  # Amino group connected via one carbon
        Chem.MolFromSmarts('[CX3](=O)[OX1H][CX4][CX4][NX3;H2,H1]'),  # Amino group connected via two carbons
    ]
    
    # Rule 2: Modifiers with carboxylic acid and multiple hydroxyl groups on adjacent carbons near the carboxyl group
    rule2_pattern = Chem.MolFromSmarts('[CX3](=O)[OX1H][C;H1]([OX2H])[C;H1]([OX2H])[C;H1]([OX2H])')
    
    # Rule 3: Modifiers with carboxylic acid and aliphatic thiol groups within two to three carbons
    rule3_patterns = [
        Chem.MolFromSmarts('[CX3](=O)[OX1H][CX4][SX2H]'),  # Thiol connected via one carbon
        Chem.MolFromSmarts('[CX3](=O)[OX1H][CX4][CX4][SX2H]'),  # Thiol connected via two carbons
        Chem.MolFromSmarts('[CX3](=O)[OX1H][CX4][CX4][CX4][SX2H]'),  # Thiol connected via three carbons
        Chem.MolFromSmarts('[CX3](=O)[OX1H][CX4]([CX4][SX2H])'),  # Branched connection to thiol
    ]
    
    # Rule 4: Modifiers with carboxylic acid and electron-withdrawing groups on aromatic rings (e.g., nitro or halogens)
    # Pattern for aromatic ring with carboxylic acid and EWG attached
    rule4_pattern = Chem.MolFromSmarts('c1ccc(cc1[CX3](=O)[OX1H])[F,Cl,Br,I,$(N(=O)=O)]')
    
    # Rule 5: Modifiers with carboxylic acid and electron-donating groups on aromatic rings yielding low yield
    # Pattern for aromatic ring with carboxylic acid and EDG attached
    rule5_pattern = Chem.MolFromSmarts('c1ccc(cc1[CX3](=O)[OX1H])[OX2H,NX3H2,$(OC)]')
    
    # Rule 6: Modifiers with carboxylic acid and nitrogen heterocycles directly attached or in short chains
    rule6_patterns = [
        Chem.MolFromSmarts('[n][c][CX3](=O)[OX1H]'),  # Nitrogen heterocycle directly attached to carboxylic acid
        Chem.MolFromSmarts('[n][c][CX4][CX3](=O)[OX1H]'),  # Connected via one carbon
        Chem.MolFromSmarts('[n][c][CX4][CX4][CX3](=O)[OX1H]'),  # Connected via two carbons
    ]
    
    # Rule 7: Modifiers with bulky hydrophobic side chains yielding variable yields
    # High yield if additional donor atoms are present
    rule7_high_yield_patterns = [
        Chem.MolFromSmarts('[CX3](=O)[OX1H][CX4][CX4]([NX3;H2,H1])[c]'),  # Carboxylic acid connected to amino group and aromatic ring
    ]
    rule7_low_yield_patterns = [
        Chem.MolFromSmarts('[CX3](=O)[OX1H][CX4][CX4][c]'),  # Carboxylic acid connected to aromatic ring without donor atoms
    ]
    
    # Rule 8: Modifiers with flexible ether linkages in aliphatic chains yielding low yield
    # Pattern broadened as per suggestion
    rule8_patterns = [
        Chem.MolFromSmarts('[CX3](=O)[OX1H][CX4][OX2][CX4]'),  # Ether linkage after one carbon
        Chem.MolFromSmarts('[CX3](=O)[OX1H][CX4][CX4][OX2][CX4]'),  # Ether linkage after two carbons
        Chem.MolFromSmarts('[CX3](=O)[OX1H][CX4][CX4][CX4][OX2][CX4]'),  # Ether linkage after three carbons
    ]
    
    # Rule 9: Modifiers with carboxylic acid and additional carbonyl groups leading to competing coordination yielding low yield
    rule9_pattern = Chem.MolFromSmarts('[CX3](=O)[OX1H][CX4][CX3](=O)')  # Carboxylic acid with adjacent carbonyl group
    
    # Rule 10: Aliphatic carboxylic acids without additional donor groups yielding low yield
    # Need to exclude molecules with additional donor groups near the carboxylic acid
    rule10_pattern = Chem.MolFromSmarts('[CX3](=O)[OX1H][CX4][CX4]')  # Carboxylic acid followed by two carbons
    # Exclude patterns
    rule10_excludes = [
        Chem.MolFromSmarts('[CX3](=O)[OX1H][CX4][!#6]'),  # Heteroatom connected to the first carbon after COOH
        Chem.MolFromSmarts('[CX3](=O)[OX1H][CX4][CX4][!#6]'),  # Heteroatom connected to the second carbon
        Chem.MolFromSmarts('[CX3](=O)[OX1H][*]=[O,N,S]'),  # Carbonyl group adjacent to carboxylic acid
    ]
    
    # Rule 11: Modifiers with chelating groups in rigid ring systems yielding high yield
    rule11_pattern = Chem.MolFromSmarts('O=C1C=CC(=O)C=C1C(=O)O')  # Chelating groups in cyclic structure
    
    # Rule 12: Modifiers with carboxylic acid and electron-withdrawing fluoroalkyl or sulfonyl groups yielding low yield
    rule12_patterns = [
        Chem.MolFromSmarts('[CX3](=O)[OX1H][CX4][CX4]([CX3](F)(F)F)'),  # Carboxylic acid connected to trifluoromethyl group
        Chem.MolFromSmarts('[CX3](=O)[OX1H][*][SX4](=O)(=O)[O]'),  # Carboxylic acid connected to sulfonyl group
    ]
    
    # Rule 13: Modifiers with carboxylic acid and thioether groups yielding low yield
    rule13_pattern = Chem.MolFromSmarts('[CX3](=O)[OX1H][CX4][SX2][CX4]')  # Carboxylic acid connected to thioether
    
    # Rule 14: Modifiers with carboxylic acid and adjacent amide groups yielding low yield
    rule14_pattern = Chem.MolFromSmarts('[CX3](=O)[OX1H][NX3][CX3](=O)')  # Carboxylic acid adjacent to amide group
    
    # Construct the list of rules with their associated patterns and predictions
    rules = [
        {'name': 'Rule 1', 'patterns': rule1_patterns, 'prediction': 1},
        {'name': 'Rule 2', 'patterns': [rule2_pattern], 'prediction': 1},
        {'name': 'Rule 3', 'patterns': rule3_patterns, 'prediction': 1},
        {'name': 'Rule 4', 'patterns': [rule4_pattern], 'prediction': 1},
        {'name': 'Rule 5', 'patterns': [rule5_pattern], 'prediction': -1},
        {'name': 'Rule 6', 'patterns': rule6_patterns, 'prediction': 1},
        {'name': 'Rule 7 High Yield', 'patterns': rule7_high_yield_patterns, 'prediction': 1},
        {'name': 'Rule 7 Low Yield', 'patterns': rule7_low_yield_patterns, 'prediction': -1},
        {'name': 'Rule 8', 'patterns': rule8_patterns, 'prediction': -1},
        {'name': 'Rule 9', 'patterns': [rule9_pattern], 'prediction': -1},
        {'name': 'Rule 10', 'patterns': [rule10_pattern], 'excludes': rule10_excludes, 'prediction': -1},
        {'name': 'Rule 11', 'patterns': [rule11_pattern], 'prediction': 1},
        {'name': 'Rule 12', 'patterns': rule12_patterns, 'prediction': -1},
        {'name': 'Rule 13', 'patterns': [rule13_pattern], 'prediction': -1},
        {'name': 'Rule 14', 'patterns': [rule14_pattern], 'prediction': -1}
    ]

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'excludes' in rule:
                    for exclude in rule['excludes']:
                        if mol.HasSubstructMatch(exclude):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for patt in rule['patterns']:
                    if not mol.HasSubstructMatch(patt):
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[rule['name'] for rule in rules])
    return df
--------------------------------------------------