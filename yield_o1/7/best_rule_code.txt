def rule2matrix(smiles_list):
    # Define SMARTS patterns for common functional groups
    carboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1]'
    amino_group = '[NX3][CX4]'
    aromatic_ring = '[a]'
    thiol_group = '[SX2H]'
    ether_linkage = '[#6][OX2][#6]'
    hydroxyl_group = '[OX2H]'
    halogens = '[F,Cl,Br,I]'
    nitro_group = '[NX3](=O)[OX1-]'
    carbonyl_group = '[CX3]=[OX1]'
    aldehyde_group = '[CX3H1](=O)'
    ketone_group = '[#6][CX3](=O)[#6]'
    fluorine_atoms = '[F]'
    amide_group = '[NX3][CX3](=O)[#6]'
    aromatic_amino_group = '[c][NX3H2]'
    amide_bond = '[NX3][CX3](=O)'
    # Define rules with their associated patterns and predictions
    rules = [
        {   # Rule 1
            'number': 1,
            'description': 'High yield: α-amino acids with additional carboxylate groups in their side chains.',
            'patterns': [
                [amino_group],  # Amino group attached to carbon
                [carboxylic_acid],  # Carboxylic acid group
            ],
            'counts': {
                carboxylic_acid: 2  # At least two carboxylic acid groups
            },
            'prediction': 1
        },
        {   # Rule 2
            'number': 2,
            'description': 'High yield: Aromatic carboxylic acids with an amino group (-NH2) at the para position.',
            'patterns': [
                ['c1ccc(N)cc1'],  # Aromatic ring with amino group at para position
                [carboxylic_acid],  # Carboxylic acid group
            ],
            'prediction': 1
        },
        {   # Rule 3
            'number': 3,
            'description': 'High yield: Aromatic carboxylic acids with electron-withdrawing groups at the para position.',
            'patterns': [
                ['c1ccc([NX3](=O)[OX1-])cc1', 'c1ccc([F,Cl,Br,I])cc1'],  # Nitro group or halogen at para position
                [carboxylic_acid],  # Carboxylic acid group
            ],
            'prediction': 1
        },
        {   # Rule 4
            'number': 4,
            'description': 'Low yield: Aromatic carboxylic acids with electron-donating groups at the para position.',
            'patterns': [
                ['c1ccc([OX2H,OX2][#6])cc1', 'c1ccc([CH3])cc1'],  # Hydroxyl or methyl group at para position
                [carboxylic_acid],  # Carboxylic acid group
            ],
            'prediction': -1
        },
        {   # Rule 5
            'number': 5,
            'description': 'High yield: Nitrogen-containing heteroaromatic carboxylic acids.',
            'patterns': [
                ['[nH]1cccc1', 'n1ccccc1'],  # Pyridine ring
                [carboxylic_acid],  # Carboxylic acid group
            ],
            'prediction': 1
        },
        {   # Rule 6
            'number': 6,
            'description': 'High yield if thiol group (-SH) on aliphatic chain; Low yield if thiol group attached to aromatic ring.',
            'patterns': [
                [thiol_group],  # Thiol group
                [carboxylic_acid],  # Carboxylic acid group
            ],
            'exclude_patterns': [
                [aromatic_ring],  # Exclude if thiol is attached to aromatic ring
            ],
            'prediction': 1
        },
        {   # Rule 7
            'number': 7,
            'description': 'High yield: Long-chain aliphatic carboxylic acids without additional functional groups.',
            'patterns': [
                ['C' * 7],  # Aliphatic chain of at least 7 carbons
                [carboxylic_acid],  # Carboxylic acid group
            ],
            'exclude_patterns': [
                [hydroxyl_group, amino_group, ether_linkage],  # Exclude additional polar groups
            ],
            'prediction': 1
        },
        {   # Rule 8
            'number': 8,
            'description': 'Low yield: Long-chain aliphatic carboxylic acids with additional polar functional groups.',
            'patterns': [
                ['C' * 7],  # Aliphatic chain of at least 7 carbons
                [carboxylic_acid],  # Carboxylic acid group
                [hydroxyl_group, amino_group, ether_linkage],  # Additional polar groups
            ],
            'prediction': -1
        },
        {   # Rule 9
            'number': 9,
            'description': 'Low yield: Modifiers containing aldehyde (-CHO) or ketone (>C=O) groups adjacent to the carboxylic acid.',
            'patterns': [
                [aldehyde_group, ketone_group],  # Aldehyde or ketone group
                [carboxylic_acid],  # Carboxylic acid group
            ],
            'prediction': -1
        },
        {   # Rule 10
            'number': 10,
            'description': 'Low yield: Modifiers with multiple ether linkages (-O-) or polyether chains.',
            'patterns': [
                [ether_linkage],  # Ether linkage
                [carboxylic_acid],  # Carboxylic acid group
            ],
            'count_thresholds': {
                ether_linkage: 2  # At least two ether linkages
            },
            'prediction': -1
        },
        {   # Rule 11
            'number': 11,
            'description': 'High yield if α-amino acids with nitrogen-containing aromatic side chains; Low yield if with non-nitrogenous aromatic side chains.',
            'patterns': [
                [amino_group],  # Amino group attached to alpha carbon
                ['[c][n]'],  # Nitrogen-containing aromatic ring
                [carboxylic_acid],  # Carboxylic acid group
            ],
            'prediction': 1
        },
        {   # Rule 12
            'number': 12,
            'description': 'Low yield: Modifiers with N-acetylated amino groups or blocked amino groups.',
            'patterns': [
                ['[NX3][CX3](=O)'],  # Amide bond (blocked amino group)
            ],
            'prediction': -1
        },
        {   # Rule 13
            'number': 13,
            'description': 'Low yield: Heavily fluorinated aliphatic carboxylic acids.',
            'patterns': [
                [fluorine_atoms],  # Multiple fluorine atoms
                [carboxylic_acid],  # Carboxylic acid group
            ],
            'count_thresholds': {
                fluorine_atoms: 3  # At least three fluorine atoms
            },
            'prediction': -1
        },
        {   # Rule 14
            'number': 14,
            'description': 'High yield: Modifiers with multiple hydroxyl groups (-OH) on aliphatic chains.',
            'patterns': [
                [hydroxyl_group],  # Hydroxyl group
                [carboxylic_acid],  # Carboxylic acid group
            ],
            'count_thresholds': {
                hydroxyl_group: 2  # At least two hydroxyl groups
            },
            'prediction': 1
        },
        {   # Rule 15
            'number': 15,
            'description': 'Low yield: Modifiers with amide linkages or peptide-like structures.',
            'patterns': [
                [amide_group],  # Amide group
            ],
            'prediction': -1
        }
    ]
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(p) for p in group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for group in rule['exclude_patterns']:
                compiled_group = [Chem.MolFromSmarts(p) for p in group]
                compiled_excludes.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_excludes
    # Process each SMILES string
    results = []
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        matches = mol.GetSubstructMatches(pat)
                        if matches:
                            # If a count threshold is specified for this pattern
                            if 'counts' in rule and pat.GetSmarts() in rule['counts']:
                                threshold = rule['counts'][pat.GetSmarts()]
                                if len(matches) >= threshold:
                                    group_match = True
                                    break
                            else:
                                group_match = True
                                break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df
