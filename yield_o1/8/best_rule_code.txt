def rule2matrix(smiles_list):
    """
    This function takes a list of SMILES strings and returns a DataFrame where each column corresponds to a rule,
    and each row corresponds to a SMILES string. The values are 1, -1, or 0, depending on whether the rule matches
    the molecule and predicts a high or low target value, or doesn't match.
    """

    # Define SMARTS patterns for the functional groups and substructures used in the rules

    # Carboxylic acid group (including carboxylate anion)
    carboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1]'

    # Amino acid backbone (simplified pattern: N-C-C backbone with amino and carboxylic acid groups)
    amino_acid_backbone = '[NX3H2][CX4][CX3](=O)[OX1H0-,OX2H1]'

    # Side chains with polar functional groups
    # Amino group (excluding amide nitrogen)
    amino_group = '[NX3;!$(N-C(=O))]'

    # Carboxyl group (excluding the one in the amino acid backbone)
    carboxyl_group = '[CX3](=O)[OX1H0-,OX2H1]'

    # Indole group
    indole_group = 'c1c[cH][nH]c2ccc1cc2'  # Indole pattern

    # Hydrophobic side chains (e.g., phenyl group)
    phenyl_group = 'c1ccccc1'

    # Electron-withdrawing groups attached to aromatic ring
    # Nitro group attached to aromatic ring
    nitro_group_on_aromatic = '[c][NX3+](=O)[O-]'

    # Bromomethyl group attached to aromatic ring
    bromomethyl_group_on_aromatic = '[c][CH2Br]'

    # Carbonyl group attached to aromatic ring
    carbonyl_group_on_aromatic = '[c][CX3](=O)[#6]'

    # Electron-donating groups attached to aromatic ring
    # Hydroxyl group attached to aromatic ring
    hydroxyl_group_on_aromatic = '[c][OX2H]'

    # Methoxy group attached to aromatic ring
    methoxy_group_on_aromatic = '[c][OX2][CH3]'

    # Aldehyde group on aromatic ring
    aromatic_aldehyde = '[c][CX3H](=O)'

    # Nitrogen heterocycles directly attached to carboxylic acid group (no intervening atoms)
    nitrogen_heterocycle_carboxylic_acid = '[n][CX3](=O)[OX1H0-,OX2H1]'

    # Nitrogen heterocycle attached via another aromatic ring (intervening atom(s))
    nitrogen_heterocycle_via_aromatic = '[n][c][c][CX3](=O)[OX1H0-,OX2H1]'

    # Fluorinated alkyl chains
    perfluoroalkyl_chain = '[CX4]([F])([F])[F]'

    # Thiol groups
    thiol_group_on_aliphatic = '[CX4][SX2H]'  # Thiol on aliphatic carbon

    thiol_group_on_aromatic = '[c][SX2H]'  # Thiol on aromatic carbon

    # Polyether chains (multiple ether linkages in aliphatic chains)
    polyether_chain = '[#6][OX2][#6][OX2][#6]'

    # Polyhydroxylated aliphatic chains (multiple hydroxyl groups)
    polyhydroxy_chain = '[#6][OX2H][#6][OX2H][#6]'

    # N-acyl derivatives of amino acids (N-acetylated amino acids)
    n_acyl_amino_acid = '[NX3][CX3](=O)[#6]'

    # Amino group at para position on aromatic ring attached to carboxylic acid
    para_amino_aromatic_carboxylic_acid = 'c1ccc(N)cc1C(=O)[OX1H0-,OX2H1]'

    # Electron-donating groups at para position on aromatic ring
    para_hydroxyl_aromatic_carboxylic_acid = 'c1ccc([OX2H])cc1C(=O)[OX1H0-,OX2H1]'
    para_methyl_aromatic_carboxylic_acid = 'c1ccc(C)cc1C(=O)[OX1H0-,OX2H1]'

    # Aliphatic dicarboxylic acids with keto groups in the chain
    dicarboxylic_acid_with_keto = 'O=C([#6])-[#6]-C(=O)[OX1H0-,OX2H1]'

    # Methoxy groups on aromatic rings
    methoxy_substituted_aromatic = '[c][OX2][CH3]'

    # High yield rules (predicted value 1)
    high_yield_rules = [
        {
            'number': 1,
            'description': 'Modifiers that are amino acids with polar or acidic side chains, such as additional carboxyl, amino, or indole groups.',
            'patterns': [
                amino_acid_backbone,
                [amino_group, carboxyl_group, indole_group]  # Side chains with any of these groups
            ],
            'logic': 'and',
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers that are aromatic carboxylic acids substituted with electron-withdrawing groups such as nitro, bromomethyl, or carbonyl groups.',
            'patterns': [
                aromatic_aldehyde,  # Aromatic carboxylic acid
                [nitro_group_on_aromatic, bromomethyl_group_on_aromatic, carbonyl_group_on_aromatic]  # Substituted with EWG
            ],
            'logic': 'and',
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers that are aliphatic carboxylic acids with unbranched hydrocarbon chains and no additional polar functional groups.',
            'patterns': [
                '[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-C(=O)[OX1H0-,OX2H1]',  # Unbranched aliphatic carboxylic acid chain
            ],
            'exclude_patterns': [hydroxyl_group_on_aromatic, amino_group, '[#6][OX2][#6]'],  # Exclude polar groups
            'logic': 'and',
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers containing nitrogen heterocycles directly attached to the carboxylic acid group.',
            'patterns': [
                nitrogen_heterocycle_carboxylic_acid
            ],
            'exclude_patterns': [nitrogen_heterocycle_via_aromatic],
            'logic': 'and',
            'prediction': 1
        },
        {
            'number': 8,
            'description': 'Modifiers containing thiol groups on aliphatic chains.',
            'patterns': [
                thiol_group_on_aliphatic,
            ],
            'exclude_patterns': [thiol_group_on_aromatic],  # Exclude thiol on aromatic ring
            'logic': 'and',
            'prediction': 1
        },
        {
            'number': 10,
            'description': 'Modifiers with polyhydroxylated aliphatic chains or multiple hydroxyl groups.',
            'patterns': [
                polyhydroxy_chain,
            ],
            'logic': 'and',
            'prediction': 1
        },
        {
            'number': 12,
            'description': 'Modifiers that are aromatic carboxylic acids substituted with amino groups at the para position.',
            'patterns': [
                para_amino_aromatic_carboxylic_acid
            ],
            'logic': 'and',
            'prediction': 1
        }
    ]
    # Low yield rules (predicted value -1)
    low_yield_rules = [
        {
            'number': 2,
            'description': 'Modifiers that are amino acids with hydrophobic side chains (e.g., phenyl group).',
            'patterns': [
                amino_acid_backbone,
                phenyl_group  # Hydrophobic side chain
            ],
            'exclude_patterns': [amino_group, carboxyl_group, indole_group],
            'logic': 'and',
            'prediction': -1
        },
        {
            'number': 3.1,  # To avoid conflict with rule 3
            'description': 'Modifiers that are aromatic carboxylic acids substituted with electron-donating groups like hydroxyl or methoxy.',
            'patterns': [
                aromatic_aldehyde,
                [hydroxyl_group_on_aromatic, methoxy_group_on_aromatic]
            ],
            'logic': 'and',
            'prediction': -1
        },
        {
            'number': 5,
            'description': 'Modifiers containing aldehyde (formyl) functional groups on an aromatic ring.',
            'patterns': [
                aromatic_aldehyde,
            ],
            'logic': 'and',
            'prediction': -1
        },
        {
            'number': 6.1,  # To avoid conflict with rule 6
            'description': 'Modifiers where the nitrogen heterocycle is attached via another aromatic ring.',
            'patterns': [
                nitrogen_heterocycle_via_aromatic
            ],
            'logic': 'and',
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Modifiers with fluorinated alkyl chains, such as perfluoroalkyl or trifluoromethyl groups.',
            'patterns': [
                perfluoroalkyl_chain
            ],
            'logic': 'and',
            'prediction': -1
        },
        {
            'number': 8.1,  # To avoid conflict with rule 8
            'description': 'Modifiers containing thiol groups on aromatic rings.',
            'patterns': [
                thiol_group_on_aromatic,
            ],
            'logic': 'and',
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers containing polyether chains or multiple ether linkages in aliphatic chains.',
            'patterns': [
                polyether_chain,
            ],
            'logic': 'and',
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Modifiers that are N-acyl derivatives of amino acids, such as N-acetylated amino acids.',
            'patterns': [
                n_acyl_amino_acid
            ],
            'logic': 'and',
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Modifiers that are aromatic carboxylic acids substituted with electron-donating groups like hydroxyl or alkyl groups at the para position.',
            'patterns': [
                aromatic_aldehyde,
                [para_hydroxyl_aromatic_carboxylic_acid, para_methyl_aromatic_carboxylic_acid]
            ],
            'logic': 'and',
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'Modifiers that are aliphatic dicarboxylic acids with keto groups in the chain.',
            'patterns': [
                dicarboxylic_acid_with_keto
            ],
            'logic': 'and',
            'prediction': -1
        },
        {
            'number': 15,
            'description': 'Modifiers containing methoxy groups on aromatic rings without additional electron-withdrawing groups.',
            'patterns': [
                methoxy_substituted_aromatic
            ],
            'logic': 'and',
            'prediction': -1
        }
    ]

    # Combine all rules
    rules = high_yield_rules + low_yield_rules

    # Helper function to compile SMARTS patterns
    def compile_patterns(patterns):
        compiled_patterns = []
        for pat in patterns:
            if isinstance(pat, list):
                compiled_group = [Chem.MolFromSmarts(p) for p in pat]
                compiled_patterns.append(compiled_group)
            else:
                compiled_patterns.append([Chem.MolFromSmarts(pat)])
        return compiled_patterns

    # Compile SMARTS patterns
    for rule in rules:
        rule['compiled_patterns'] = compile_patterns(rule['patterns'])
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            rule['compiled_exclude_patterns'] = compile_patterns(rule['exclude_patterns'])

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for compiled_group in rule['compiled_exclude_patterns']:
                        for pat in compiled_group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        if mol.HasSubstructMatch(pat):
                            group_match = True
                            break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                # print(f"Error processing rule {rule['number']} for SMILES {smi}: {e}")
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df
