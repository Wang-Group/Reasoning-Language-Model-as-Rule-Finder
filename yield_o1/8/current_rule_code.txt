def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and substructures
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    # Amino acid backbone (alpha-amino acid)
    alpha_amino_acid = '[NX3][CX4H]([*])[CX3](=O)[OX1H0-,OX2H1]'
    # Additional carboxylic acid group in side chain
    side_chain_carboxylic_acid = '[CX3](=O)[OX2H1]'
    
    # Electron-withdrawing groups (EWGs) on aromatic ring
    ewg_on_aromatic = '[c][NX3+](=O)[O-]', '[c][F,Cl,Br,I]', '[c][C](=O)[O;H1,-]'
    # Electron-donating groups (EDGs) on aromatic ring
    edg_on_aromatic = '[c][OX2H]', '[c][OX2][#6]', '[c][NX3;H2,H1][#6]'
    
    # Nitrogen heterocycles
    nitrogen_heterocycle = '[n]'
    
    # Aliphatic thiol adjacent to carboxylic acid
    aliphatic_thiol_adjacent_carboxy = '[SX2H][CX4][CX3](=O)[OX2H1]'
    # Aromatic thiol
    aromatic_thiol = '[c][SX2H]'
    
    # Hydroxyl groups adjacent to carboxylic acid
    hydroxyl_adjacent_carboxy = '[OX2H][CX4][CX3](=O)[OX2H1]'
    # Hydroxyl groups distant from carboxylic acid
    hydroxyl_distant_carboxy = '[CX3](=O)[OX2H1]~[*]~[OX2H]'
    
    # Amino groups within three carbons of carboxylic acid
    amino_within_three_carbons = '[NX3;H2,H1][CX4,CH2][CX4,CH2][CX3](=O)[OX2H1]'
    # Amino groups distant from carboxylic acid
    amino_distant = '[NX3;H2,H1]~[*]~[*]~[*]~[CX3](=O)[OX2H1]'
    
    # Ether linkages in backbone
    ether_linkage = '[#6][OX2][#6]'
    
    # Fluorinated aliphatic chains
    fluorinated_chain = '[CX4](F)(F)(F)'
    
    # Reactive carbonyl groups adjacent to carboxylic acid
    reactive_carbonyl_adjacent_carboxy = '[CX3]=[OX1][CX3](=O)[OX2H1]'
    
    # Acylated amino groups
    acylated_amino = '[NX3][CX3](=O)[#6]'
    
    # Biaryl structures
    biaryl = '[c]-[c]-[c](=O)[OX2H1]'
    
    # Fused aromatic rings with additional oxygen functionalities
    fused_aromatic_oxygen = '[c]1[c][c][o][c][c]1[CX3](=O)[OX2H1]'
    
    # Beta-phenylpropanoic acid structures
    beta_phenylpropanoic_acid = '[c][CX4][CX2][CX3](=O)[OX2H1]'
    
    # Aromatic amino groups
    aromatic_amino = '[c][NX3;H2,H1]'
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are α-amino acids with additional carboxylic acid groups (acidic side chains) result in a high yield; α-amino acids with neutral or basic side chains result in a low yield.',
            'high_patterns': [[alpha_amino_acid], [side_chain_carboxylic_acid]],
            'low_patterns': [[alpha_amino_acid]],
            'prediction_high': 1,
            'prediction_low': -1
        },
        {
            'number': 2,
            'description': 'Aromatic carboxylic acids with electron-withdrawing substituents (EWGs) on the ring result in a high yield; those with electron-donating substituents (EDGs) result in a low yield.',
            'high_patterns': [[carboxylic_acid], ewg_on_aromatic],
            'low_patterns': [[carboxylic_acid], edg_on_aromatic],
            'prediction_high': 1,
            'prediction_low': -1
        },
        {
            'number': 3,
            'description': 'Modifiers that are aromatic carboxylic acids containing nitrogen heterocycles result in a high yield due to additional coordination via the nitrogen atom.',
            'high_patterns': [[carboxylic_acid], [nitrogen_heterocycle]],
            'prediction_high': 1
        },
        {
            'number': 4,
            'description': 'Modifiers with aliphatic thiol groups (–SH) adjacent to the carboxylic acid result in a high yield; those with thiol groups on aromatic rings result in a low yield.',
            'high_patterns': [[aliphatic_thiol_adjacent_carboxy]],
            'low_patterns': [[aromatic_thiol]],
            'prediction_high': 1,
            'prediction_low': -1
        },
        {
            'number': 5,
            'description': 'Modifiers with aliphatic carboxylic acids having adjacent hydroxyl groups result in a high yield; those with hydroxyl groups distant from the carboxylic acid result in a low yield.',
            'high_patterns': [[hydroxyl_adjacent_carboxy]],
            'low_patterns': [[hydroxyl_distant_carboxy]],
            'prediction_high': 1,
            'prediction_low': -1
        },
        {
            'number': 6,
            'description': 'Modifiers with aliphatic carboxylic acids having amino groups within three carbons of the carboxylic acid result in a high yield; those with amino groups more distant result in a low yield.',
            'high_patterns': [[amino_within_three_carbons]],
            'low_patterns': [[amino_distant]],
            'prediction_high': 1,
            'prediction_low': -1
        },
        {
            'number': 7,
            'description': 'Modifiers that are simple aliphatic carboxylic acids without additional functional groups result in a high yield due to minimal steric hindrance and effective coordination.',
            'high_patterns': [[carboxylic_acid]],
            'exclude_patterns': [
                [alpha_amino_acid], [nitrogen_heterocycle], [aliphatic_thiol_adjacent_carboxy], [hydroxyl_adjacent_carboxy], [amino_within_three_carbons], [ether_linkage], [fluorinated_chain], [reactive_carbonyl_adjacent_carboxy], [acylated_amino], [aromatic_amino]
            ],
            'prediction_high': 1
        },
        {
            'number': 8,
            'description': 'Modifiers with flexible ether linkages within their backbone result in a low yield due to decreased coordination efficiency from increased conformational freedom.',
            'low_patterns': [[ether_linkage], [carboxylic_acid]],
            'prediction_low': -1
        },
        {
            'number': 9,
            'description': 'Modifiers with highly fluorinated aliphatic chains result in a low yield due to decreased electron density on coordinating atoms and increased hydrophobicity.',
            'low_patterns': [[fluorinated_chain], [carboxylic_acid]],
            'prediction_low': -1
        },
        {
            'number': 10,
            'description': 'Modifiers containing reactive carbonyl groups (aldehydes or ketones) adjacent to the carboxylic acid result in a low yield due to potential side reactions and reduced coordination ability.',
            'low_patterns': [[reactive_carbonyl_adjacent_carboxy]],
            'prediction_low': -1
        },
        {
            'number': 11,
            'description': 'Modifiers with acylated amino groups result in a low yield due to blocking of potential coordination sites necessary for effective metal binding.',
            'low_patterns': [[acylated_amino], [carboxylic_acid]],
            'prediction_low': -1
        },
        {
            'number': 12,
            'description': 'Modifiers with aromatic carboxylic acids possessing amino groups result in a high yield due to additional coordination via the amino group.',
            'high_patterns': [[aromatic_amino], [carboxylic_acid]],
            'prediction_high': 1
        },
        {
            'number': 13,
            'description': 'Modifiers with aromatic rings directly attached to additional aromatic rings (biaryl structures) result in a low yield due to steric hindrance and decreased coordination efficiency.',
            'low_patterns': [[biaryl]],
            'prediction_low': -1
        },
        {
            'number': 14,
            'description': 'Modifiers with fused aromatic rings containing additional oxygen functionalities adjacent to carboxylic acids result in a high yield due to enhanced coordination through multiple oxygen atoms.',
            'high_patterns': [[fused_aromatic_oxygen]],
            'prediction_high': 1
        },
        {
            'number': 15,
            'description': 'Modifiers with β-phenylpropanoic acid structures result in a low yield due to steric hindrance affecting coordination with the catalyst.',
            'low_patterns': [[beta_phenylpropanoic_acid]],
            'prediction_low': -1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        # Compile high yield patterns
        compiled_high_patterns = []
        for group in rule.get('high_patterns', []):
            compiled_group = [Chem.MolFromSmarts(p) for p in group]
            compiled_high_patterns.append(compiled_group)
        rule['compiled_high_patterns'] = compiled_high_patterns
        # Compile low yield patterns
        compiled_low_patterns = []
        for group in rule.get('low_patterns', []):
            compiled_group = [Chem.MolFromSmarts(p) for p in group]
            compiled_low_patterns.append(compiled_group)
        rule['compiled_low_patterns'] = compiled_low_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for group in rule['exclude_patterns']:
                compiled_group = [Chem.MolFromSmarts(p) for p in group]
                compiled_excludes.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_excludes
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = False
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if match == False:
                            break
                    else:
                        match = True
                else:
                    match = True
                if match:
                    # Check high yield patterns
                    high_match = True
                    for compiled_group in rule['compiled_high_patterns']:
                        group_match = False
                        for pat in compiled_group:
                            if mol.HasSubstructMatch(pat):
                                group_match = True
                                break
                        if not group_match:
                            high_match = False
                            break
                    # Check low yield patterns
                    low_match = True
                    for compiled_group in rule['compiled_low_patterns']:
                        group_match = False
                        for pat in compiled_group:
                            if mol.HasSubstructMatch(pat):
                                group_match = True
                                break
                        if not group_match:
                            low_match = False
                            break
                    if high_match and 'prediction_high' in rule:
                        row.append(rule['prediction_high'])
                    elif low_match and 'prediction_low' in rule:
                        row.append(rule['prediction_low'])
                    else:
                        row.append(0)
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df