
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: Modifiers that are amino acids with **acidic side chains containing carboxylic acid groups** result in **high yield**.
  - *Examples*: (2S)-2-aminopentanedioic acid (L-glutamic acid), (2S)-2-aminobutanedioic acid (L-aspartic acid), 5-aminopentanoic acid.

- **Rule 2**: Modifiers containing **aromatic rings directly substituted with strong electron-withdrawing groups** such as **nitro**, **bromomethyl**, or **carbonyl groups** lead to **high yield**.
  - *Examples*: 4-nitrobenzoic acid, 4-(bromomethyl)benzoic acid, 1,3-dioxo-2-benzofuran-5-carboxylic acid.

- **Rule 3**: Modifiers containing **aromatic rings substituted with electron-donating groups** like **methyl**, **hydroxyl**, or **methoxy groups**, without additional electron-withdrawing substituents, lead to **low yield**.
  - *Examples*: 4-methylbenzoic acid, 3-(4-hydroxyphenyl)propanoic acid, 2-[(4-hydroxybenzoyl)amino]acetic acid.

- **Rule 4**: Modifiers with **aldehyde (formyl) functional groups** result in **low yield**.
  - *Examples*: 4-formylbenzoic acid, 5-formyl-2-hydroxybenzoic acid.

- **Rule 5**: Modifiers with **perfluoroalkyl chains** or **trifluoromethyl groups** result in **low yield**.
  - *Examples*: 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid, 4-[(2,2,2-trifluoroacetyl)amino]butanoic acid.

- **Rule 6**: Modifiers that are **aliphatic carboxylic acids with unbranched hydrocarbon chains (6-8 carbons)** result in **high yield**.
  - *Example*: Octanoic acid.

- **Rule 7**: Modifiers that are **aliphatic carboxylic acids with additional polar functional groups** like **hydroxyl**, **amino**, or **ether linkages** result in **low yield**.
  - *Examples*: 7-hydroxyheptanoic acid, 7-aminoheptanoic acid, 3-[2-(2-aminoethoxy)ethoxy]propanoic acid, 8-aminooctanoic acid.

- **Rule 8**: Modifiers containing **nitrogen heterocycles** directly attached to a carboxylic acid group result in **high yield**.
  - *Examples*: Pyridine-3-carboxylic acid (nicotinic acid), 2-oxo-1H-pyridine-4-carboxylic acid, 1H-pyrazole-4-carboxylic acid.

- **Rule 9**: Modifiers that are **N-acyl derivatives of amino acids** (acylated amino groups) result in **low yield**.
  - *Example*: (2S)-6-acetamido-2-aminohexanoic acid (N-acetyl-L-lysine).

- **Rule 10**: Modifiers with **thiol (sulfanyl) groups on aliphatic chains** lead to **high yield**; those with thiol groups on **aromatic rings** lead to **low yield**.
  - *High Yield Example*: 3-sulfanylpropanoic acid.
  - *Low Yield Example*: 4-sulfanylbenzoic acid.

- **Rule 11**: Modifiers containing **indole rings**, especially amino acids with indole side chains, result in **high yield**.
  - *Example*: (2R)-2-amino-3-(1H-indol-3-yl)propanoic acid (L-tryptophan).

- **Rule 12**: Modifiers containing **multiple ether linkages (polyether chains)** result in **low yield**.
  - *Examples*: 2-[2-(2-methoxyethoxy)ethoxy]acetic acid, 3-[2-(2-aminoethoxy)ethoxy]propanoic acid.

- **Rule 13**: Modifiers with **phenolic hydroxyl groups** on aromatic rings lead to **low yield** unless accompanied by strong electron-withdrawing groups.
  - *Low Yield Examples*: 3-(4-hydroxyphenyl)propanoic acid, 5-formyl-2-hydroxybenzoic acid.
  - *High Yield Exception*: 2-oxo-1H-pyridine-4-carboxylic acid (contains a hydroxyl group but also a strong electron-withdrawing ketone).

- **Rule 14**: Modifiers containing **multiple hydroxyl groups (polyols) on aliphatic chains** lead to **high yield** due to increased coordination ability.
  - *Example*: (2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid (gluconic acid).

- **Rule 15**: Modifiers that are **diacids with keto groups** result in **low yield**.
  - *Example*: 4-oxoheptanedioic acid.

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
0,0,-1,-1,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6857142857142857; Test Accuracy: 0.0
    Train Support: 0.05357142857142857; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.375
    Train Lift: 1.9873366013071896; Test Lift: NONE
    Train Leverage: 0.026428571428571433; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and substructures
    # Common patterns
    carboxylic_acid = '[CX3](=O)[OX1H0]'  # Carboxylic acid group (-COOH)
    amino_group = '[NX3;H2,H1;!$(N=*);!$(N-C=[O,N,S])]'  # Primary or secondary amine
    aromatic_ring = '[a]'  # Aromatic atom
    nitro_group = '[NX3+(=O)[O-]]'  # Nitro group
    bromomethyl_group = '[CH2Br]'  # Bromomethyl group
    carbonyl_group = '[CX3](=O)[#6]'  # Carbonyl group attached to carbon
    methyl_on_aromatic = '[cH][CH3]'  # Methyl group on aromatic ring
    hydroxyl_on_aromatic = '[c][OX2H]'  # Hydroxyl group on aromatic ring
    methoxy_on_aromatic = '[c][OX2][CH3]'  # Methoxy group on aromatic ring
    aldehyde_group = '[CX3H](=O)[#6]'  # Aldehyde group
    trifluoromethyl_group = '[CX4](F)(F)F'  # Trifluoromethyl group
    perfluoroalkyl_group = '[CX4](F)(F)[F,Cl,Br,I]'  # Perfluoroalkyl group (simplified)
    thiol_aliphatic = '[CX4][SX2H]'  # Thiol group on aliphatic carbon
    thiol_aromatic = '[c][SX2H]'  # Thiol group on aromatic carbon
    indole_ring = 'c1cc2c([nH]1)cccc2'  # Indole ring
    ether_linkage = '[#6][OX2][#6]'  # Ether linkage
    hydroxyl_group = '[OX2H]'  # Hydroxyl group
    ketone_group = '[CX3](=O)[#6]'  # Ketone group
    diacid = '[#6][CX3](=O)[OX1H0][#6][CX3](=O)[OX1H0]'  # Diacid (simplified)
    nitrogen_heterocycle_carboxylic_acid = '[n,a][a][a][a][a][CX3](=O)[OX1H0]'  # Nitrogen heterocycle with COOH
    polyether_chain = '([#6][OX2]){2,}[#6]'  # Multiple ether linkages
    polyol_aliphatic = '[CX4H]([OX2H])[CX4H]([OX2H])[CX4H]([OX2H])'  # Multiple hydroxyls on aliphatic chain
    n_acyl_amino_acid = '[NX3][CX3](=O)[CX4][NX3;H2][CX3](=O)[OX1H0]'  # N-acyl derivative of amino acid

    # Electron-withdrawing groups (EWGs) on aromatic rings
    ewg_on_aromatic = ['[c][F,Cl,Br,I]', '[c][CX3](=O)[#6]', '[c][NX3+](=O)[O-]']

    rules = [
        # Rule 1
        {
            'number': 1,
            'description': 'Modifiers that are amino acids with acidic side chains containing carboxylic acid groups result in high yield.',
            'patterns': [
                [amino_group],
                [carboxylic_acid]
            ],
            'count_threshold': {carboxylic_acid: 2},
            'prediction': 1
        },
        # Rule 2
        {
            'number': 2,
            'description': 'Modifiers containing aromatic rings directly substituted with strong electron-withdrawing groups such as nitro, bromomethyl, or carbonyl groups lead to high yield.',
            'patterns': [
                ['[c][$([NX3+](=O)[O-])]', '[c][CH2Br]', '[c][CX3](=O)[#6]']
            ],
            'prediction': 1
        },
        # Rule 3
        {
            'number': 3,
            'description': 'Modifiers containing aromatic rings substituted with electron-donating groups like methyl, hydroxyl, or methoxy groups, without additional electron-withdrawing substituents, lead to low yield.',
            'patterns': [
                [methyl_on_aromatic, hydroxyl_on_aromatic, methoxy_on_aromatic]
            ],
            'exclude_patterns': [
                ewg_on_aromatic
            ],
            'prediction': -1
        },
        # Rule 4
        {
            'number': 4,
            'description': 'Modifiers with aldehyde (formyl) functional groups result in low yield.',
            'patterns': [
                [aldehyde_group]
            ],
            'prediction': -1
        },
        # Rule 5
        {
            'number': 5,
            'description': 'Modifiers with perfluoroalkyl chains or trifluoromethyl groups result in low yield.',
            'patterns': [
                [trifluoromethyl_group, perfluoroalkyl_group]
            ],
            'prediction': -1
        },
        # Rule 6
        {
            'number': 6,
            'description': 'Modifiers that are aliphatic carboxylic acids with unbranched hydrocarbon chains (6-8 carbons) result in high yield.',
            'patterns': [
                ['[CH3][CH2]{4,6}[CX3](=O)[OX1H0]']
            ],
            'exclude_patterns': [
                ['[*]~[*;!#6]']  # Exclude molecules with heteroatoms in the chain
            ],
            'prediction': 1
        },
        # Rule 7
        {
            'number': 7,
            'description': 'Modifiers that are aliphatic carboxylic acids with additional polar functional groups like hydroxyl, amino, or ether linkages result in low yield.',
            'patterns': [
                [carboxylic_acid],
                [hydroxyl_group, amino_group, ether_linkage]
            ],
            'prediction': -1
        },
        # Rule 8
        {
            'number': 8,
            'description': 'Modifiers containing nitrogen heterocycles directly attached to a carboxylic acid group result in high yield.',
            'patterns': [
                [nitrogen_heterocycle_carboxylic_acid]
            ],
            'prediction': 1
        },
        # Rule 9
        {
            'number': 9,
            'description': 'Modifiers that are N-acyl derivatives of amino acids (acylated amino groups) result in low yield.',
            'patterns': [
                [n_acyl_amino_acid]
            ],
            'prediction': -1
        },
        # Rule 10
        {
            'number': 10,
            'description': 'Modifiers with thiol (sulfanyl) groups on aliphatic chains lead to high yield; those with thiol groups on aromatic rings lead to low yield.',
            'patterns': [
                [thiol_aliphatic]
            ],
            'prediction': 1
        },
        {
            'number': 10,
            'description': 'Modifiers with thiol groups on aromatic rings lead to low yield.',
            'patterns': [
                [thiol_aromatic]
            ],
            'prediction': -1
        },
        # Rule 11
        {
            'number': 11,
            'description': 'Modifiers containing indole rings, especially amino acids with indole side chains, result in high yield.',
            'patterns': [
                [indole_ring]
            ],
            'prediction': 1
        },
        # Rule 12
        {
            'number': 12,
            'description': 'Modifiers containing multiple ether linkages (polyether chains) result in low yield.',
            'patterns': [
                [ether_linkage]
            ],
            'count_threshold': {ether_linkage: 2},
            'prediction': -1
        },
        # Rule 13
        {
            'number': 13,
            'description': 'Modifiers with phenolic hydroxyl groups on aromatic rings lead to low yield unless accompanied by strong electron-withdrawing groups.',
            'patterns': [
                [hydroxyl_on_aromatic]
            ],
            'exclude_patterns': [
                ewg_on_aromatic
            ],
            'prediction': -1
        },
        # Rule 14
        {
            'number': 14,
            'description': 'Modifiers containing multiple hydroxyl groups (polyols) on aliphatic chains lead to high yield due to increased coordination ability.',
            'patterns': [
                [hydroxyl_group]
            ],
            'count_threshold': {hydroxyl_group: 2},
            'prediction': 1
        },
        # Rule 15
        {
            'number': 15,
            'description': 'Modifiers that are diacids with keto groups result in low yield.',
            'patterns': [
                [diacid],
                [ketone_group]
            ],
            'prediction': -1
        }
    ]

    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(p) for p in group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for group in rule['exclude_patterns']:
                compiled_group = [Chem.MolFromSmarts(p) for p in group]
                compiled_excludes.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_excludes

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        matches = mol.GetSubstructMatches(pat)
                        if matches:
                            # If a count threshold is specified for this pattern
                            if 'count_threshold' in rule and pat.GetSmarts() in rule['count_threshold']:
                                threshold = rule['count_threshold'][pat.GetSmarts()]
                                if len(matches) >= threshold:
                                    group_match = True
                                    break
                            else:
                                group_match = True
                                break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: Modifiers that are **amino acids with side chains containing carboxylic acid groups** (i.e., **acidic amino acids**) result in **high yield**.
  - *High Yield Examples*: (2S)-2-aminopentanedioic acid (L-glutamic acid), (2S)-2-aminobutanedioic acid (L-aspartic acid), 5-aminopentanoic acid.

- **Rule 2**: Modifiers that are **aromatic carboxylic acids substituted with strong electron-withdrawing groups** such as **nitro** or **bromomethyl** groups lead to **high yield**.
  - *High Yield Examples*: 4-nitrobenzoic acid, 4-(bromomethyl)benzoic acid, 1,3-dioxo-2-benzofuran-5-carboxylic acid.

- **Rule 3**: Modifiers that are **aromatic carboxylic acids with electron-donating substituents** like **methyl**, **hydroxyl**, or **alkylthio** groups, without additional electron-withdrawing substituents, lead to **low yield**.
  - *Low Yield Examples*: 4-methylbenzoic acid, 3-(4-hydroxyphenyl)propanoic acid, 4-sulfanylbenzoic acid.

- **Rule 4**: Modifiers containing **aldehyde (formyl) functional groups** result in **low yield**.
  - *Low Yield Examples*: 4-formylbenzoic acid, 5-formyl-2-hydroxybenzoic acid.

- **Rule 5**: Modifiers that are **aliphatic carboxylic acids with unbranched hydrocarbon chains** and **no additional polar functional groups** lead to **high yield**.
  - *High Yield Example*: Octanoic acid.

- **Rule 6**: Modifiers that are **aliphatic carboxylic acids with additional polar functional groups** such as **hydroxyl**, **amino**, or **ether linkages** result in **low yield**.
  - *Low Yield Examples*: 7-hydroxyheptanoic acid, 7-aminoheptanoic acid, 8-aminooctanoic acid, 3-[2-(2-aminoethoxy)ethoxy]propanoic acid.

- **Rule 7**: Modifiers containing **nitrogen heterocycles directly attached to carboxylic acid groups** result in **high yield**.
  - *High Yield Examples*: Pyridine-3-carboxylic acid (nicotinic acid), 1H-pyrazole-4-carboxylic acid, 2-oxo-1H-pyridine-4-carboxylic acid.

- **Rule 8**: Modifiers with **perfluoroalkyl chains** or **trifluoromethyl groups** result in **low yield**.
  - *Low Yield Examples*: 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid, 4-[(2,2,2-trifluoroacetyl)amino]butanoic acid.

- **Rule 9**: Modifiers with **thiol (sulfanyl) groups** on **aliphatic chains** lead to **high yield**; those with thiol groups on **aromatic rings** lead to **low yield**.
  - *High Yield Example*: 3-sulfanylpropanoic acid.
  - *Low Yield Example*: 4-sulfanylbenzoic acid.

- **Rule 10**: Modifiers containing **multiple ether linkages (polyether chains)** result in **low yield**.
  - *Low Yield Examples*: 2-[2-(2-methoxyethoxy)ethoxy]acetic acid, 3-[2-(2-aminoethoxy)ethoxy]propanoic acid.

- **Rule 11**: Modifiers that are **N-acyl derivatives of amino acids** (acylated amino groups) result in **low yield**.
  - *Low Yield Example*: (2S)-6-acetamido-2-aminohexanoic acid (N-acetyl-L-lysine).

- **Rule 12**: Modifiers containing **indole rings**, such as in **tryptophan**, result in **high yield**.
  - *High Yield Example*: (2R)-2-amino-3-(1H-indol-3-yl)propanoic acid (L-tryptophan).

- **Rule 13**: Modifiers with **phenolic hydroxyl groups** on aromatic rings lead to **low yield** unless accompanied by strong electron-withdrawing groups.
  - *Low Yield Examples*: 3-(4-hydroxyphenyl)propanoic acid, 5-formyl-2-hydroxybenzoic acid.

- **Rule 14**: Modifiers containing **multiple hydroxyl groups (polyols) on aliphatic chains** lead to **high yield** due to increased coordination ability with metal centers.
  - *High Yield Examples*: (2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid (gluconic acid), 2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]amino]acetic acid.

- **Rule 15**: The **position of pyridyl substitution** affects yield: Modifiers where the **pyridyl group is attached via an aliphatic chain** result in **high yield**; modifiers where the **pyridyl group is directly attached to an aromatic ring** result in **low yield**.
  - *High Yield Example*: 4-pyridin-4-ylbutanoic acid.
  - *Low Yield Example*: 4-pyridin-4-ylbenzoic acid.

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6285714285714286; Test Accuracy: 1.0
    Train Support: 0.05714285714285714; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 1.9635076252723314; Test Lift: NONE
    Train Leverage: 0.028027210884353743; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and structural motifs
    
    # Rule 1: Amino acids with side chains containing carboxylic acid groups (acidic amino acids) result in high yield.
    # High Yield Examples: L-glutamic acid, L-aspartic acid, 5-aminopentanoic acid.
    # Corrected pattern as per Suggestion 1
    rule1_patterns = [
        '[NX3;H2][CX4H]([CX3](=O)[OX2H1])[#6][$([CX4][#6])]*[CX3](=O)[OX2H1]'
    ]
    rule1_prediction = 1
    
    # Rule 2: Aromatic carboxylic acids substituted with strong electron-withdrawing groups such as nitro or bromomethyl groups lead to high yield.
    # High Yield Examples: 4-nitrobenzoic acid, 4-(bromomethyl)benzoic acid.
    # Corrected patterns as per Suggestion 2
    aromatic_carboxylic_acid = '[c][c][c][c][c][c][CX3](=O)[OX2H1]'
    nitro_group_on_aromatic = '[c][NX3+(=O)[O-]]'
    bromomethyl_on_aromatic = '[c][CH2Br]'
    rule2_patterns = [
        [aromatic_carboxylic_acid, nitro_group_on_aromatic],
        [aromatic_carboxylic_acid, bromomethyl_on_aromatic]
    ]
    rule2_prediction = 1
    
    # Rule 3: Aromatic carboxylic acids with electron-donating substituents like methyl, hydroxyl, or alkylthio groups, without additional electron-withdrawing substituents, lead to low yield.
    # Low Yield Examples: 4-methylbenzoic acid, 3-(4-hydroxyphenyl)propanoic acid, 4-sulfanylbenzoic acid.
    # Corrected patterns as per Suggestion 3
    methyl_on_aromatic = '[c][CH3]'
    hydroxyl_on_aromatic = '[c][OX2H]'
    alkylthio_on_aromatic = '[c][SX2H]'
    methoxy_on_aromatic = '[c][OX2][CH3]'
    amino_on_aromatic = '[c][NX3;H2,H1]'
    # Exclude strong electron-withdrawing groups on aromatic ring
    strong_ewg_on_aromatic = [
        '[c][NX3+(=O)[O-]]',  # Nitro group
        '[c][CX3](=O)[OX2H1]',  # Carboxylic acid
        '[c][F,Cl,Br,I]',  # Halogens
        '[c]C#N',  # Cyano group
        '[c]S(=O)(=O)[O-]',  # Sulfonyl group
        '[c][SX4](=O)(=O)[OX1-]'  # Sulfate group
    ]
    rule3_patterns = [
        [aromatic_carboxylic_acid, methyl_on_aromatic],
        [aromatic_carboxylic_acid, hydroxyl_on_aromatic],
        [aromatic_carboxylic_acid, alkylthio_on_aromatic],
        [aromatic_carboxylic_acid, methoxy_on_aromatic],
        [aromatic_carboxylic_acid, amino_on_aromatic]
    ]
    rule3_exclude_patterns = strong_ewg_on_aromatic
    rule3_prediction = -1
    
    # Rule 4: Modifiers containing aldehyde (formyl) functional groups result in low yield.
    aldehyde_group = '[CX3H1](=O)[#6]'
    rule4_patterns = [aldehyde_group]
    rule4_prediction = -1
    
    # Rule 5: Aliphatic carboxylic acids with unbranched hydrocarbon chains and no additional polar functional groups lead to high yield.
    # High Yield Example: Octanoic acid.
    # Corrected pattern as per Suggestion 4
    # Aliphatic carboxylic acids with chain of 6 or more carbons
    rule5_patterns = [
        '[CX3](=O)[OX2H1][CH2][CH2][CH2][CH2][CH2][CH2][CH3]',  # Chain of 8 carbons
        '[CX3](=O)[OX2H1][CH2][CH2][CH2][CH2][CH2][CH3]',       # Chain of 7 carbons
        '[CX3](=O)[OX2H1][CH2][CH2][CH2][CH2][CH3]',            # Chain of 6 carbons
    ]
    # Exclude additional polar functional groups
    polar_functional_groups = [
        '[NX3;!$(N=C)]', '[OX2H]', '[OX2;!$(O=C)]', '[SX2H]', '[PX3]', '[#7]', '[#15]'
    ]
    rule5_exclude_patterns = polar_functional_groups
    rule5_prediction = 1
    
    # Rule 6: Aliphatic carboxylic acids with additional polar functional groups such as hydroxyl, amino, or ether linkages on the aliphatic chain result in low yield.
    # Low Yield Examples: 7-hydroxyheptanoic acid, 7-aminoheptanoic acid, 3-[2-(2-aminoethoxy)ethoxy]propanoic acid.
    # Corrected pattern as per Suggestion 5
    aliphatic_polar_chain = '[CX3](=O)[OX2H1][CX4][CX4][*]'
    polar_groups = ['[OX2H]', '[NX3H2]', '[OX2][CX4]']
    rule6_patterns = []
    for polar_group in polar_groups:
        pattern = '[CX3](=O)[OX2H1][*]' + polar_group + '[*]'
        rule6_patterns.append(pattern)
    rule6_prediction = -1
    
    # Rule 7: Modifiers containing nitrogen heterocycles directly attached to carboxylic acid groups result in high yield.
    # High Yield Examples: Pyridine-3-carboxylic acid (nicotinic acid), 1H-pyrazole-4-carboxylic acid, 2-oxo-1H-pyridine-4-carboxylic acid.
    nitrogen_heterocycle_carboxylic_acid = '[n][c][c][c][c][CX3](=O)[OX2H1]'
    rule7_patterns = [nitrogen_heterocycle_carboxylic_acid]
    rule7_prediction = 1
    
    # Rule 8: Modifiers with perfluoroalkyl chains or trifluoromethyl groups result in low yield.
    # Low Yield Examples: 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid, 4-[(2,2,2-trifluoroacetyl)amino]butanoic acid.
    perfluoroalkyl_chain = '[CX4]([F])([F])([F])[F]'
    trifluoromethyl_group = '[CX4]([F])([F])[F]'
    rule8_patterns = [perfluoroalkyl_chain, trifluoromethyl_group]
    rule8_prediction = -1
    
    # Rule 9: Modifiers with thiol (sulfanyl) groups on aliphatic chains lead to high yield; those with thiol groups on aromatic rings lead to low yield.
    aliphatic_thiol = '[CX4][CX4][SX2H]'
    aromatic_thiol = '[c][SX2H]'
    rule9_patterns_high = [aliphatic_thiol]
    rule9_patterns_low = [aromatic_thiol]
    rule9_prediction_high = 1
    rule9_prediction_low = -1
    
    # Rule 10: Modifiers containing multiple ether linkages (polyether chains) result in low yield.
    # Low Yield Examples: 2-[2-(2-methoxyethoxy)ethoxy]acetic acid, 3-[2-(2-aminoethoxy)ethoxy]propanoic acid.
    # Corrected pattern as per Suggestion 6
    polyether_chain = '[#6][OX2][#6][OX2][#6][OX2][#6]'
    rule10_patterns = [polyether_chain]
    rule10_prediction = -1
    
    # Rule 11: Modifiers that are N-acyl derivatives of amino acids (acylated amino groups) result in low yield.
    # Low Yield Example: (2S)-6-acetamido-2-aminohexanoic acid (N-acetyl-L-lysine).
    n_acylated_amino_acid = '[NX3][CX3](=O)[CX4][NX3][CX3](=O)[OX2H1]'
    rule11_patterns = [n_acylated_amino_acid]
    rule11_prediction = -1
    
    # Rule 12: Modifiers containing indole rings, such as in tryptophan, result in high yield.
    # High Yield Example: (2R)-2-amino-3-(1H-indol-3-yl)propanoic acid (L-tryptophan).
    indole_ring = 'c1ccc2c(c1)[nH]c2'
    rule12_patterns = [indole_ring]
    rule12_prediction = 1
    
    # Rule 13: Modifiers with phenolic hydroxyl groups on aromatic rings lead to low yield unless accompanied by strong electron-withdrawing groups.
    phenolic_hydroxyl = '[c][OX2H]'
    # Exclude if strong EWG is present
    rule13_patterns = [phenolic_hydroxyl]
    rule13_exclude_patterns = strong_ewg_on_aromatic
    rule13_prediction = -1
    
    # Rule 14: Modifiers containing multiple hydroxyl groups (polyols) on aliphatic chains lead to high yield.
    # High Yield Examples: gluconic acid
    # Corrected pattern as per Suggestion 7
    polyol_chain = '[CX4][OX2H][CX4][OX2H][CX4][OX2H][CX3](=O)[OX2H1]'
    rule14_patterns = [polyol_chain]
    rule14_prediction = 1
    
    # Rule 15: Position of pyridyl substitution affects yield: Modifiers where the pyridyl group is attached via an aliphatic chain result in high yield; modifiers where the pyridyl group is directly attached to an aromatic ring result in low yield.
    pyridyl_aliphatic_chain = '[n][CX4][CX3](=O)[OX2H1]'
    pyridyl_direct_attachment = '[c][c]1[c][n][c][c]1[CX3](=O)[OX2H1]'
    rule15_patterns_high = [pyridyl_aliphatic_chain]
    rule15_patterns_low = [pyridyl_direct_attachment]
    rule15_prediction_high = 1
    rule15_prediction_low = -1
    
    # Initialize list of rules
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are amino acids with side chains containing carboxylic acid groups (acidic amino acids) result in high yield.',
            'patterns': rule1_patterns,
            'prediction': rule1_prediction
        },
        {
            'number': 2,
            'description': 'Modifiers that are aromatic carboxylic acids substituted with strong electron-withdrawing groups such as nitro or bromomethyl groups lead to high yield.',
            'patterns': rule2_patterns,
            'prediction': rule2_prediction
        },
        {
            'number': 3,
            'description': 'Modifiers that are aromatic carboxylic acids with electron-donating substituents like methyl, hydroxyl, methoxy, amino, or alkylthio groups, without additional electron-withdrawing substituents, lead to low yield.',
            'patterns': rule3_patterns,
            'exclude_patterns': rule3_exclude_patterns,
            'prediction': rule3_prediction
        },
        {
            'number': 4,
            'description': 'Modifiers containing aldehyde (formyl) functional groups result in low yield.',
            'patterns': rule4_patterns,
            'prediction': rule4_prediction
        },
        {
            'number': 5,
            'description': 'Aliphatic carboxylic acids with unbranched hydrocarbon chains and no additional polar functional groups lead to high yield.',
            'patterns': rule5_patterns,
            'exclude_patterns': rule5_exclude_patterns,
            'prediction': rule5_prediction
        },
        {
            'number': 6,
            'description': 'Aliphatic carboxylic acids with additional polar functional groups such as hydroxyl, amino, or ether linkages result in low yield.',
            'patterns': rule6_patterns,
            'prediction': rule6_prediction
        },
        {
            'number': 7,
            'description': 'Modifiers containing nitrogen heterocycles directly attached to carboxylic acid groups result in high yield.',
            'patterns': rule7_patterns,
            'prediction': rule7_prediction
        },
        {
            'number': 8,
            'description': 'Modifiers with perfluoroalkyl chains or trifluoromethyl groups result in low yield.',
            'patterns': rule8_patterns,
            'prediction': rule8_prediction
        },
        {
            'number': 9,
            'description': 'Modifiers with thiol (sulfanyl) groups on aliphatic chains lead to high yield; those with thiol groups on aromatic rings lead to low yield.',
            'patterns_high': rule9_patterns_high,
            'patterns_low': rule9_patterns_low,
            'prediction_high': rule9_prediction_high,
            'prediction_low': rule9_prediction_low
        },
        {
            'number': 10,
            'description': 'Modifiers containing multiple ether linkages (polyether chains) result in low yield.',
            'patterns': rule10_patterns,
            'prediction': rule10_prediction
        },
        {
            'number': 11,
            'description': 'Modifiers that are N-acyl derivatives of amino acids (acylated amino groups) result in low yield.',
            'patterns': rule11_patterns,
            'prediction': rule11_prediction
        },
        {
            'number': 12,
            'description': 'Modifiers containing indole rings result in high yield.',
            'patterns': rule12_patterns,
            'prediction': rule12_prediction
        },
        {
            'number': 13,
            'description': 'Modifiers with phenolic hydroxyl groups on aromatic rings lead to low yield unless accompanied by strong electron-withdrawing groups.',
            'patterns': rule13_patterns,
            'exclude_patterns': rule13_exclude_patterns,
            'prediction': rule13_prediction
        },
        {
            'number': 14,
            'description': 'Modifiers containing multiple hydroxyl groups (polyols) on aliphatic chains lead to high yield.',
            'patterns': rule14_patterns,
            'prediction': rule14_prediction
        },
        {
            'number': 15,
            'description': 'Position of pyridyl substitution affects yield: Modifiers where the pyridyl group is attached via an aliphatic chain result in high yield; modifiers where the pyridyl group is directly attached to an aromatic ring result in low yield.',
            'patterns_high': rule15_patterns_high,
            'patterns_low': rule15_patterns_low,
            'prediction_high': rule15_prediction_high,
            'prediction_low': rule15_prediction_low
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        if 'patterns_high' in rule and 'patterns_low' in rule:
            # For rules with high and low predictions
            compiled_patterns_high = [Chem.MolFromSmarts(pat) for pat in rule['patterns_high']]
            compiled_patterns_low = [Chem.MolFromSmarts(pat) for pat in rule['patterns_low']]
            rule['compiled_patterns_high'] = compiled_patterns_high
            rule['compiled_patterns_low'] = compiled_patterns_low
        else:
            for pat in rule.get('patterns', []):
                if isinstance(pat, list):
                    compiled_group = [Chem.MolFromSmarts(p) for p in pat]
                    compiled_patterns.append(compiled_group)
                else:
                    compiled_patterns.append(Chem.MolFromSmarts(pat))
            rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_exclude_patterns = [Chem.MolFromSmarts(p) for p in rule['exclude_patterns']]
            rule['compiled_exclude_patterns'] = compiled_exclude_patterns
    
    # Initialize results list
    results = []
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = False
                if 'compiled_patterns_high' in rule and 'compiled_patterns_low' in rule:
                    # Check high prediction patterns
                    for pat in rule['compiled_patterns_high']:
                        if mol.HasSubstructMatch(pat):
                            match = True
                            row.append(rule['prediction_high'])
                            break
                    # If no match in high patterns, check low patterns
                    if not match:
                        for pat in rule['compiled_patterns_low']:
                            if mol.HasSubstructMatch(pat):
                                match = True
                                row.append(rule['prediction_low'])
                                break
                    if not match:
                        row.append(0)
                    continue
                # Check exclude patterns if any
                if 'compiled_exclude_patterns' in rule:
                    exclude_match = False
                    for pat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            exclude_match = True
                            break
                    if exclude_match:
                        row.append(0)
                        continue
                # Check required patterns
                for pat in rule['compiled_patterns']:
                    if isinstance(pat, list):
                        group_match = all(mol.HasSubstructMatch(sub_pat) for sub_pat in pat)
                    else:
                        group_match = mol.HasSubstructMatch(pat)
                    if group_match:
                        match = True
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df
--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: Modifiers that are **amino acids with side chains containing additional carboxylic acid groups or indole rings** result in **high yield**.
  - *Sub-structures Combined*: Amino group, α-carboxylic acid group, side chains with carboxylic acid or indole ring.
  - *High Yield Examples*:  
    - (2S)-2-aminopentanedioic acid (L-glutamic acid)
    - (2S)-2-aminobutanedioic acid (L-aspartic acid)
    - (2R)-2-amino-3-(1H-indol-3-yl)propanoic acid (L-tryptophan)

- **Rule 2**: Modifiers that are **aromatic carboxylic acids substituted with strong electron-withdrawing groups** such as **nitro, bromomethyl, or carbonyl groups** lead to **high yield**.
  - *Sub-structures Combined*: Aromatic ring, carboxylic acid group, electron-withdrawing substituents (e.g., nitro, bromomethyl, ketone groups).
  - *High Yield Examples*:  
    - 4-nitrobenzoic acid
    - 4-(bromomethyl)benzoic acid
    - 1,3-dioxo-2-benzofuran-5-carboxylic acid

- **Rule 3**: Modifiers that are **aromatic carboxylic acids with hydroxyl groups** result in **low yield**.
  - *Sub-structures Combined*: Aromatic ring, carboxylic acid group, hydroxyl group.
  - *Low Yield Examples*:  
    - 3-(4-hydroxyphenyl)propanoic acid
    - 2-[(4-hydroxybenzoyl)amino]acetic acid
    - 5-formyl-2-hydroxybenzoic acid

- **Rule 4**: Modifiers that are **aliphatic carboxylic acids with unbranched hydrocarbon chains and no additional polar functional groups** lead to **high yield**; introducing **polar groups** such as **hydroxyl**, **amino**, or **ether linkages** lowers the yield.
  - *Sub-structures Combined*: Aliphatic chain, carboxylic acid group, absence or presence of polar functional groups.
  - *High Yield Example*:  
    - Octanoic acid
  - *Low Yield Examples*:  
    - 7-hydroxyheptanoic acid
    - 7-aminoheptanoic acid
    - 8-aminooctanoic acid

- **Rule 5**: Modifiers containing **aldehyde (formyl) functional groups** lead to **low yield**.
  - *Sub-structures Combined*: Aldehyde group, carboxylic acid group.
  - *Low Yield Examples*:  
    - 4-formylbenzoic acid
    - 5-formyl-2-hydroxybenzoic acid

- **Rule 6**: Modifiers containing **nitrogen heterocycles directly attached to the carboxylic acid group** result in **high yield**; if the **nitrogen heterocycle is attached via an aromatic ring**, the yield is **low**.
  - *Sub-structures Combined*: Nitrogen heterocycle, carboxylic acid group, direct attachment versus linkage through an aromatic ring.
  - *High Yield Examples*:  
    - Pyridine-3-carboxylic acid (nicotinic acid)
    - 1H-pyrazole-4-carboxylic acid
    - 2-oxo-1H-pyridine-4-carboxylic acid
  - *Low Yield Example*:  
    - 4-pyridin-4-ylbenzoic acid

- **Rule 7**: Modifiers with **perfluoroalkyl chains** or **trifluoromethyl groups** result in **low yield**.
  - *Sub-structures Combined*: Perfluoroalkyl chain, trifluoromethyl group, carboxylic acid group.
  - *Low Yield Examples*:  
    - 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid
    - 4-[(2,2,2-trifluoroacetyl)amino]butanoic acid

- **Rule 8**: Modifiers with **thiol groups** attached to **aliphatic chains** lead to **high yield**, whereas **thiol groups on aromatic rings** result in **low yield**.
  - *Sub-structures Combined*: Thiol group, location (aliphatic chain vs. aromatic ring), carboxylic acid group.
  - *High Yield Example*:  
    - 3-sulfanylpropanoic acid
  - *Low Yield Example*:  
    - 4-sulfanylbenzoic acid

- **Rule 9**: Modifiers containing **polyether chains** result in **low yield**.
  - *Sub-structures Combined*: Multiple ether linkages, carboxylic acid group.
  - *Low Yield Examples*:  
    - 2-[2-(2-methoxyethoxy)ethoxy]acetic acid
    - 3-[2-(2-aminoethoxy)ethoxy]propanoic acid

- **Rule 10**: Modifiers containing **polyhydroxylated aliphatic chains** lead to **high yield**.
  - *Sub-structures Combined*: Multiple hydroxyl groups on aliphatic chain, carboxylic acid group.
  - *High Yield Examples*:  
    - (2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid (gluconic acid)
    - 2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]amino]acetic acid

- **Rule 11**: Modifiers that are **N-acyl derivatives of amino acids** (i.e., **N-acetylated amino acids**) result in **low yield**.
  - *Sub-structures Combined*: Amino acid backbone, N-acyl group, carboxylic acid group.
  - *Low Yield Example*:  
    - (2S)-6-acetamido-2-aminohexanoic acid (N-acetyl-L-lysine)

- **Rule 12**: Modifiers that are **aromatic carboxylic acids substituted with amino groups at the para position** result in **high yield**.
  - *Sub-structures Combined*: Aromatic ring, carboxylic acid group, amino group at para position.
  - *High Yield Example*:  
    - 4-aminobenzoic acid

- **Rule 13**: Modifiers that are **amino acids with hydrophobic side chains** (e.g., **aromatic rings without additional functional groups**) result in **low yield**.
  - *Sub-structures Combined*: Amino acid backbone, hydrophobic side chain, lack of polar functional groups.
  - *Low Yield Example*:  
    - (2S)-2-amino-3-phenylpropanoic acid (L-phenylalanine)

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13
0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,1,0,0,0,0,0
0,0,-1,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,-1,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6285714285714286; Test Accuracy: 1.0
    Train Support: 0.05714285714285714; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 1.9635076252723314; Test Lift: NONE
    Train Leverage: 0.028027210884353743; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and substructures
    # Amino acid backbone (alpha amino group and alpha carboxylic acid group)
    amino_acid_backbone = '[NX3;H2][CX4H]([#6])[CX3](=O)[O;H1]'  # Rule 1 & 13
    # Additional carboxylic acid group (excluding the backbone)
    carboxylic_acid = '[CX3](=O)[O;H1]'  # General carboxylic acid group
    # Indole ring
    indole_ring = 'c1c[nH]c2ccccc12'  # Rule 1
    # Aromatic carboxylic acid
    aromatic_carboxylic_acid = '[c][CX3](=O)[O;H1]'  # Rules 2 & 3 & 12
    # Electron-withdrawing groups on aromatic ring
    nitro_group = '[c][NX3+](=O)[O-]'  # Rule 2
    bromomethyl_group = '[c][CH2Br]'  # Rule 2
    ketone_group = '[c][CX3](=O)[#6]'  # Rule 2
    # Hydroxyl group on aromatic ring
    hydroxyl_on_aromatic = '[c][OX2H]'  # Rule 3
    # Unbranched aliphatic chain with carboxylic acid
    unbranched_aliphatic_acid = '[CH3][CH2][CH2][CH2][CH2][CX3](=O)[O;H1]'  # Rule 4 (High yield)
    # Polar groups
    hydroxyl_group = '[OX2H]'  # Hydroxyl group
    amino_group = '[NX3;H2,H1][#6]'  # Amino group
    ether_linkage = '[#6][OX2][#6]'  # Ether linkage
    # Aldehyde group
    aldehyde_group = '[CX3H](=O)'  # Rule 5
    # Nitrogen heterocycle directly attached to carboxylic acid
    nitrogen_heterocycle_acid = '[n][c][CX3](=O)[O;H1]'  # Rule 6 (High yield)
    # Nitrogen heterocycle attached via aromatic ring
    aromatic_ring = 'c1ccccc1'  # General aromatic ring
    nitrogen_heterocycle = '[n]'  # Any nitrogen heterocycle
    # Thiol groups
    thiol_on_aliphatic = '[CX4][SX2H]'  # Rule 8 (High yield)
    thiol_on_aromatic = '[c][SX2H]'  # Rule 8 (Low yield)
    # Polyether chain (at least two ether linkages)
    polyether_chain = '[#6][OX2][#6][OX2][#6]'  # Rule 9
    # Polyhydroxylated aliphatic chain (at least two hydroxyl groups)
    polyhydroxyl_aliphatic = '[#6][OX2H][#6][OX2H]'  # Rule 10
    # N-acylated amino acid
    n_acylated_amino_acid = '[NX3][CX3](=O)[#6][CX4][CX3](=O)[O;H1]'  # Rule 11
    # Amino group at para position on aromatic carboxylic acid
    para_amino_benzoic_acid = 'c1ccc(cc1[NX3;H2])[CX3](=O)[O;H1]'  # Rule 12
    # Hydrophobic side chain (aromatic ring without polar groups)
    hydrophobic_aromatic_side_chain = '[NX3;H2][CX4H]([#6])[CX3](=O)[O;H1].c1ccccc1'  # Rule 13
    # Trifluoromethyl group
    trifluoromethyl_group = '[CX4](F)(F)F'  # Rule 7
    # Perfluoroalkyl chain
    perfluoroalkyl_chain = '[CX4](F)(F)[CX4](F)(F)'  # Simplified pattern for perfluoroalkyl chain
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'High yield: Amino acids with side chains containing additional carboxylic acid groups or indole rings.',
            'patterns': [
                [amino_acid_backbone],  # Amino acid backbone
                [carboxylic_acid, indole_ring],  # Additional carboxylic acid or indole ring
            ],
            'counts': {'[CX3](=O)[O;H1]': 2},  # At least two carboxylic acid groups
            'prediction': 1,
        },
        {
            'number': 2,
            'description': 'High yield: Aromatic carboxylic acids substituted with strong electron-withdrawing groups.',
            'patterns': [
                [aromatic_carboxylic_acid],  # Aromatic carboxylic acid
                [nitro_group, bromomethyl_group, ketone_group],  # Electron-withdrawing groups
            ],
            'prediction': 1,
        },
        {
            'number': 3,
            'description': 'Low yield: Aromatic carboxylic acids with hydroxyl groups.',
            'patterns': [
                [aromatic_carboxylic_acid],  # Aromatic carboxylic acid
                [hydroxyl_on_aromatic],  # Hydroxyl group on aromatic ring
            ],
            'prediction': -1,
        },
        {
            'number': 4,
            'description': 'High or Low yield: Aliphatic carboxylic acids with or without polar groups.',
            'patterns': [
                [unbranched_aliphatic_acid],  # Unbranched aliphatic acid
            ],
            'exclude_patterns': [
                [hydroxyl_group, amino_group, ether_linkage],  # Exclude polar groups
            ],
            'prediction': 1,
        },
        {
            'number': 5,
            'description': 'Low yield: Modifiers containing aldehyde (formyl) functional groups.',
            'patterns': [
                [aldehyde_group],  # Aldehyde group
            ],
            'prediction': -1,
        },
        {'number': 6,
            'description': 'High or Low yield: Nitrogen heterocycles directly or indirectly attached to carboxylic acid.',
            'patterns': [
                [nitrogen_heterocycle_acid],  # Nitrogen heterocycle directly attached to carboxylic acid
            ],
            'prediction': 1,
            'alternative_prediction': -1,  # If attached via aromatic ring
        },
        {
            'number': 7,
            'description': 'Low yield: Modifiers with perfluoroalkyl chains or trifluoromethyl groups.',
            'patterns': [
                [trifluoromethyl_group, perfluoroalkyl_chain],
            ],
            'prediction': -1,
        },
        {
            'number': 8,
            'description': 'High or Low yield: Thiol groups attached to aliphatic chains or aromatic rings.',
            'patterns': [
                [thiol_on_aliphatic],  # Thiol on aliphatic chain
            ],
            'prediction': 1,
            'alternative_patterns': [
                [thiol_on_aromatic],  # Thiol on aromatic ring
            ],
            'alternative_prediction': -1,
        },
        {
            'number': 9,
            'description': 'Low yield: Modifiers containing polyether chains.',
            'patterns': [
                [polyether_chain],  # At least two ether linkages
            ],
            'prediction': -1,
        },
        {
            'number': 10,
            'description': 'High yield: Modifiers containing polyhydroxylated aliphatic chains.',
            'patterns': [
                [polyhydroxyl_aliphatic],  # At least two hydroxyl groups
            ],
            'prediction': 1,
        },
        {
            'number': 11,
            'description': 'Low yield: N-acyl derivatives of amino acids.',
            'patterns': [
                [n_acylated_amino_acid],  # N-acylated amino acid
            ],
            'prediction': -1,
        },
        {
            'number': 12,
            'description': 'High yield: Aromatic carboxylic acids substituted with amino groups at the para position.',
            'patterns': [
                [para_amino_benzoic_acid],  # Para-aminobenzoic acid pattern
            ],
            'prediction': 1,
        },
        {
            'number': 13,
            'description': 'Low yield: Amino acids with hydrophobic side chains.',
            'patterns': [
                [amino_acid_backbone],  # Amino acid backbone
                [aromatic_ring],  # Hydrophobic aromatic side chain
            ],
            'exclude_patterns': [
                [hydroxyl_group, amino_group, carboxylic_acid],  # Exclude polar groups in side chain
            ],
            'prediction': -1,
        },
    ]
    # Compile patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(p) for p in group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for group in rule['exclude_patterns']:
                compiled_group = [Chem.MolFromSmarts(p) for p in group]
                compiled_excludes.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_excludes
        # Compile alternative patterns if any
        if 'alternative_patterns' in rule:
            compiled_alternatives = []
            for group in rule['alternative_patterns']:
                compiled_group = [Chem.MolFromSmarts(p) for p in group]
                compiled_alternatives.append(compiled_group)
            rule['compiled_alternative_patterns'] = compiled_alternatives
        # Compile counts if any
        if 'counts' in rule:
            compiled_counts = {}
            for smarts, count in rule['counts'].items():
                pat = Chem.MolFromSmarts(smarts)
                compiled_counts[pat] = count
            rule['compiled_counts'] = compiled_counts
    # Initialize results list
    results = []
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'compiled_exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        matches = mol.GetSubstructMatches(pat)
                        if matches:
                            # If counts are specified for this pattern
                            if 'compiled_counts' in rule and pat in rule['compiled_counts']:
                                threshold = rule['compiled_counts'][pat]
                                if len(matches) >= threshold:
                                    group_match = True
                                    break
                            else:
                                group_match = True
                                break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    # Check alternative patterns if any
                    if 'compiled_alternative_patterns' in rule:
                        alt_match = True
                        for compiled_group in rule['compiled_alternative_patterns']:
                            group_match = False
                            for pat in compiled_group:
                                if mol.HasSubstructMatch(pat):
                                    group_match = True
                                    break
                            if not group_match:
                                alt_match = False
                                break
                        if alt_match:
                            row.append(rule.get('alternative_prediction', 0))
                        else:
                            row.append(0)
                    else:
                        row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        # Append the row to results
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: Modifiers that are **amino acids with polar or acidic side chains**, such as additional **carboxyl**, **amino**, or **indole** groups, result in **high yield**.
  - *Sub-structures Combined*: Amino acid backbone, side chains with polar functional groups (carboxyl, amino, indole).
  - *High Yield Examples*:  
    - (2S)-2-aminopentanedioic acid (L-glutamic acid)
    - (2S)-2-aminobutanedioic acid (L-aspartic acid)
    - (2R)-2-amino-3-(1H-indol-3-yl)propanoic acid (L-tryptophan)
    - 5-aminopentanoic acid

- **Rule 2**: Modifiers that are **amino acids with hydrophobic side chains** (e.g., **phenyl group**) result in **low yield**.
  - *Sub-structures Combined*: Amino acid backbone, hydrophobic side chain lacking additional polar functional groups.
  - *Low Yield Example*:  
    - (2S)-2-amino-3-phenylpropanoic acid (L-phenylalanine)

- **Rule 3**: Modifiers that are **aromatic carboxylic acids substituted with electron-withdrawing groups** such as **nitro**, **bromomethyl**, or **carbonyl** groups lead to **high yield**; those substituted with electron-donating groups like **hydroxyl** or **methoxy** result in **low yield**.
  - *Sub-structures Combined*: Aromatic ring, carboxylic acid group, substituents that are electron-withdrawing or electron-donating.
  - *High Yield Examples*:  
    - 4-nitrobenzoic acid
    - 4-(bromomethyl)benzoic acid
    - 1,3-dioxo-2-benzofuran-5-carboxylic acid
  - *Low Yield Examples*:  
    - 3-(4-hydroxyphenyl)propanoic acid
    - 2-[(4-hydroxybenzoyl)amino]acetic acid
    - 5-formyl-2-hydroxybenzoic acid

- **Rule 4**: Modifiers that are **aliphatic carboxylic acids with unbranched hydrocarbon chains** and **no additional polar functional groups** lead to **high yield**; introducing **polar groups** such as **hydroxyl**, **amino**, or **ether linkages** lowers the yield.
  - *Sub-structures Combined*: Linear aliphatic chain, carboxylic acid group, absence or presence of polar functional groups.
  - *High Yield Example*:  
    - Octanoic acid
  - *Low Yield Examples*:  
    - 7-hydroxyheptanoic acid
    - 7-aminoheptanoic acid
    - 8-aminooctanoic acid
    - 3-[2-(2-aminoethoxy)ethoxy]propanoic acid

- **Rule 5**: Modifiers containing **aldehyde (formyl)** functional groups on an aromatic ring lead to **low yield**.
  - *Sub-structures Combined*: Aromatic ring, aldehyde group, carboxylic acid group.
  - *Low Yield Examples*:  
    - 4-formylbenzoic acid
    - 5-formyl-2-hydroxybenzoic acid

- **Rule 6**: Modifiers containing **nitrogen heterocycles directly attached to the carboxylic acid group** result in **high yield**; if the **nitrogen heterocycle is attached via another aromatic ring**, the yield is **low**.
  - *Sub-structures Combined*: Nitrogen-containing heterocycle, direct attachment to carboxylic acid group.
  - *High Yield Examples*:  
    - Pyridine-3-carboxylic acid (nicotinic acid)
    - 1H-pyrazole-4-carboxylic acid
    - 2-oxo-1H-pyridine-4-carboxylic acid
  - *Low Yield Example*:  
    - 4-pyridin-4-ylbenzoic acid

- **Rule 7**: Modifiers with **fluorinated alkyl chains**, such as **perfluoroalkyl** or **trifluoromethyl groups**, result in **low yield**.
  - *Sub-structures Combined*: Fluorinated alkyl chain, carboxylic acid group.
  - *Low Yield Examples*:  
    - 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid
    - 4-[(2,2,2-trifluoroacetyl)amino]butanoic acid

- **Rule 8**: Modifiers containing **thiol groups** lead to varying yields depending on their position: **thiol groups on aliphatic chains** result in **high yield**, while **thiol groups on aromatic rings** result in **low yield**.
  - *Sub-structures Combined*: Thiol group location (aliphatic vs. aromatic), carboxylic acid group.
  - *High Yield Example*:  
    - 3-sulfanylpropanoic acid
  - *Low Yield Example*:  
    - 4-sulfanylbenzoic acid

- **Rule 9**: Modifiers containing **polyether chains** or multiple **ether linkages in aliphatic chains** result in **low yield**.
  - *Sub-structures Combined*: Aliphatic chains with multiple ether linkages, carboxylic acid group.
  - *Low Yield Examples*:  
    - 2-[2-(2-methoxyethoxy)ethoxy]acetic acid
    - 3-[2-(2-aminoethoxy)ethoxy]propanoic acid

- **Rule 10**: Modifiers with **polyhydroxylated aliphatic chains** or multiple **hydroxyl groups** result in **high yield**.
  - *Sub-structures Combined*: Aliphatic chain with multiple hydroxyl groups, carboxylic acid group.
  - *High Yield Examples*:  
    - (2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid (gluconic acid)
    - 2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]amino]acetic acid

- **Rule 11**: Modifiers that are **N-acyl derivatives of amino acids**, such as **N-acetylated** amino acids, result in **low yield**.
  - *Sub-structures Combined*: Amino acid backbone, N-acyl group (e.g., acetyl), carboxylic acid group.
  - *Low Yield Examples*:  
    - (2S)-6-acetamido-2-aminohexanoic acid (N-acetyl-L-lysine)
    - 2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid

- **Rule 12**: Modifiers that are **aromatic carboxylic acids substituted with amino groups at the para position** lead to **high yield**.
  - *Sub-structures Combined*: Aromatic ring, carboxylic acid group, amino group at the para position.
  - *High Yield Example*:  
    - 4-aminobenzoic acid

- **Rule 13**: Modifiers that are **aromatic carboxylic acids substituted with electron-donating groups** like **hydroxyl** or **alkyl** groups at the para position result in **low yield**.
  - *Sub-structures Combined*: Aromatic ring, carboxylic acid group, electron-donating substituents at para position.
  - *Low Yield Examples*:  
    - 3-(4-hydroxyphenyl)propanoic acid
    - 4-methylbenzoic acid

- **Rule 14**: Modifiers that are **aliphatic dicarboxylic acids with keto groups** in the chain lead to **low yield**.
  - *Sub-structures Combined*: Linear aliphatic chain, two carboxylic acid groups, ketone group within the chain.
  - *Low Yield Example*:  
    - 4-oxoheptanedioic acid

- **Rule 15**: Modifiers containing **methoxy groups on aromatic rings** without additional electron-withdrawing groups result in **low yield**.
  - *Sub-structures Combined*: Aromatic ring, carboxylic acid group, methoxy substituents.
  - *Low Yield Example*:  
    - 2-[(4-hydroxybenzoyl)amino]acetic acid
  - *Note*: An exception is observed with **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid**, which results in **high yield**, possibly due to the presence of a ketone group conjugated with the aromatic ring enhancing electron withdrawal.

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 3,Rule 4,Rule 6,Rule 8,Rule 10,Rule 12,Rule 2,Rule 3.1,Rule 5,Rule 6.1,Rule 7,Rule 8.1,Rule 9,Rule 11,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1
0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.7428571428571429; Test Accuracy: 1.0
    Train Support: 0.04155844155844156; Test Support: 0.0
    Train Confidence: 0.7212121212121212; Test Confidence: 0.5
    Train Lift: 1.4224598930481285; Test Lift: NONE
    Train Leverage: 0.011502782931354361; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    """
    This function takes a list of SMILES strings and returns a DataFrame where each column corresponds to a rule,
    and each row corresponds to a SMILES string. The values are 1, -1, or 0, depending on whether the rule matches
    the molecule and predicts a high or low target value, or doesn't match.
    """

    # Define SMARTS patterns for the functional groups and substructures used in the rules

    # Carboxylic acid group (including carboxylate anion)
    carboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1]'

    # Amino acid backbone (simplified pattern: N-C-C backbone with amino and carboxylic acid groups)
    amino_acid_backbone = '[NX3H2][CX4][CX3](=O)[OX1H0-,OX2H1]'

    # Side chains with polar functional groups
    # Amino group (excluding amide nitrogen)
    amino_group = '[NX3;!$(N-C(=O))]'

    # Carboxyl group (excluding the one in the amino acid backbone)
    carboxyl_group = '[CX3](=O)[OX1H0-,OX2H1]'

    # Indole group
    indole_group = 'c1c[cH][nH]c2ccc1cc2'  # Indole pattern

    # Hydrophobic side chains (e.g., phenyl group)
    phenyl_group = 'c1ccccc1'

    # Electron-withdrawing groups attached to aromatic ring
    # Nitro group attached to aromatic ring
    nitro_group_on_aromatic = '[c][NX3+](=O)[O-]'

    # Bromomethyl group attached to aromatic ring
    bromomethyl_group_on_aromatic = '[c][CH2Br]'

    # Carbonyl group attached to aromatic ring
    carbonyl_group_on_aromatic = '[c][CX3](=O)[#6]'

    # Electron-donating groups attached to aromatic ring
    # Hydroxyl group attached to aromatic ring
    hydroxyl_group_on_aromatic = '[c][OX2H]'

    # Methoxy group attached to aromatic ring
    methoxy_group_on_aromatic = '[c][OX2][CH3]'

    # Aldehyde group on aromatic ring
    aromatic_aldehyde = '[c][CX3H](=O)'

    # Nitrogen heterocycles directly attached to carboxylic acid group (no intervening atoms)
    nitrogen_heterocycle_carboxylic_acid = '[n][CX3](=O)[OX1H0-,OX2H1]'

    # Nitrogen heterocycle attached via another aromatic ring (intervening atom(s))
    nitrogen_heterocycle_via_aromatic = '[n][c][c][CX3](=O)[OX1H0-,OX2H1]'

    # Fluorinated alkyl chains
    perfluoroalkyl_chain = '[CX4]([F])([F])[F]'

    # Thiol groups
    thiol_group_on_aliphatic = '[CX4][SX2H]'  # Thiol on aliphatic carbon

    thiol_group_on_aromatic = '[c][SX2H]'  # Thiol on aromatic carbon

    # Polyether chains (multiple ether linkages in aliphatic chains)
    polyether_chain = '[#6][OX2][#6][OX2][#6]'

    # Polyhydroxylated aliphatic chains (multiple hydroxyl groups)
    polyhydroxy_chain = '[#6][OX2H][#6][OX2H][#6]'

    # N-acyl derivatives of amino acids (N-acetylated amino acids)
    n_acyl_amino_acid = '[NX3][CX3](=O)[#6]'

    # Amino group at para position on aromatic ring attached to carboxylic acid
    para_amino_aromatic_carboxylic_acid = 'c1ccc(N)cc1C(=O)[OX1H0-,OX2H1]'

    # Electron-donating groups at para position on aromatic ring
    para_hydroxyl_aromatic_carboxylic_acid = 'c1ccc([OX2H])cc1C(=O)[OX1H0-,OX2H1]'
    para_methyl_aromatic_carboxylic_acid = 'c1ccc(C)cc1C(=O)[OX1H0-,OX2H1]'

    # Aliphatic dicarboxylic acids with keto groups in the chain
    dicarboxylic_acid_with_keto = 'O=C([#6])-[#6]-C(=O)[OX1H0-,OX2H1]'

    # Methoxy groups on aromatic rings
    methoxy_substituted_aromatic = '[c][OX2][CH3]'

    # High yield rules (predicted value 1)
    high_yield_rules = [
        {
            'number': 1,
            'description': 'Modifiers that are amino acids with polar or acidic side chains, such as additional carboxyl, amino, or indole groups.',
            'patterns': [
                amino_acid_backbone,
                [amino_group, carboxyl_group, indole_group]  # Side chains with any of these groups
            ],
            'logic': 'and',
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers that are aromatic carboxylic acids substituted with electron-withdrawing groups such as nitro, bromomethyl, or carbonyl groups.',
            'patterns': [
                aromatic_aldehyde,  # Aromatic carboxylic acid
                [nitro_group_on_aromatic, bromomethyl_group_on_aromatic, carbonyl_group_on_aromatic]  # Substituted with EWG
            ],
            'logic': 'and',
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers that are aliphatic carboxylic acids with unbranched hydrocarbon chains and no additional polar functional groups.',
            'patterns': [
                '[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-C(=O)[OX1H0-,OX2H1]',  # Unbranched aliphatic carboxylic acid chain
            ],
            'exclude_patterns': [hydroxyl_group_on_aromatic, amino_group, '[#6][OX2][#6]'],  # Exclude polar groups
            'logic': 'and',
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers containing nitrogen heterocycles directly attached to the carboxylic acid group.',
            'patterns': [
                nitrogen_heterocycle_carboxylic_acid
            ],
            'exclude_patterns': [nitrogen_heterocycle_via_aromatic],
            'logic': 'and',
            'prediction': 1
        },
        {
            'number': 8,
            'description': 'Modifiers containing thiol groups on aliphatic chains.',
            'patterns': [
                thiol_group_on_aliphatic,
            ],
            'exclude_patterns': [thiol_group_on_aromatic],  # Exclude thiol on aromatic ring
            'logic': 'and',
            'prediction': 1
        },
        {
            'number': 10,
            'description': 'Modifiers with polyhydroxylated aliphatic chains or multiple hydroxyl groups.',
            'patterns': [
                polyhydroxy_chain,
            ],
            'logic': 'and',
            'prediction': 1
        },
        {
            'number': 12,
            'description': 'Modifiers that are aromatic carboxylic acids substituted with amino groups at the para position.',
            'patterns': [
                para_amino_aromatic_carboxylic_acid
            ],
            'logic': 'and',
            'prediction': 1
        }
    ]
    # Low yield rules (predicted value -1)
    low_yield_rules = [
        {
            'number': 2,
            'description': 'Modifiers that are amino acids with hydrophobic side chains (e.g., phenyl group).',
            'patterns': [
                amino_acid_backbone,
                phenyl_group  # Hydrophobic side chain
            ],
            'exclude_patterns': [amino_group, carboxyl_group, indole_group],
            'logic': 'and',
            'prediction': -1
        },
        {
            'number': 3.1,  # To avoid conflict with rule 3
            'description': 'Modifiers that are aromatic carboxylic acids substituted with electron-donating groups like hydroxyl or methoxy.',
            'patterns': [
                aromatic_aldehyde,
                [hydroxyl_group_on_aromatic, methoxy_group_on_aromatic]
            ],
            'logic': 'and',
            'prediction': -1
        },
        {
            'number': 5,
            'description': 'Modifiers containing aldehyde (formyl) functional groups on an aromatic ring.',
            'patterns': [
                aromatic_aldehyde,
            ],
            'logic': 'and',
            'prediction': -1
        },
        {
            'number': 6.1,  # To avoid conflict with rule 6
            'description': 'Modifiers where the nitrogen heterocycle is attached via another aromatic ring.',
            'patterns': [
                nitrogen_heterocycle_via_aromatic
            ],
            'logic': 'and',
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Modifiers with fluorinated alkyl chains, such as perfluoroalkyl or trifluoromethyl groups.',
            'patterns': [
                perfluoroalkyl_chain
            ],
            'logic': 'and',
            'prediction': -1
        },
        {
            'number': 8.1,  # To avoid conflict with rule 8
            'description': 'Modifiers containing thiol groups on aromatic rings.',
            'patterns': [
                thiol_group_on_aromatic,
            ],
            'logic': 'and',
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers containing polyether chains or multiple ether linkages in aliphatic chains.',
            'patterns': [
                polyether_chain,
            ],
            'logic': 'and',
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Modifiers that are N-acyl derivatives of amino acids, such as N-acetylated amino acids.',
            'patterns': [
                n_acyl_amino_acid
            ],
            'logic': 'and',
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Modifiers that are aromatic carboxylic acids substituted with electron-donating groups like hydroxyl or alkyl groups at the para position.',
            'patterns': [
                aromatic_aldehyde,
                [para_hydroxyl_aromatic_carboxylic_acid, para_methyl_aromatic_carboxylic_acid]
            ],
            'logic': 'and',
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'Modifiers that are aliphatic dicarboxylic acids with keto groups in the chain.',
            'patterns': [
                dicarboxylic_acid_with_keto
            ],
            'logic': 'and',
            'prediction': -1
        },
        {
            'number': 15,
            'description': 'Modifiers containing methoxy groups on aromatic rings without additional electron-withdrawing groups.',
            'patterns': [
                methoxy_substituted_aromatic
            ],
            'logic': 'and',
            'prediction': -1
        }
    ]

    # Combine all rules
    rules = high_yield_rules + low_yield_rules

    # Helper function to compile SMARTS patterns
    def compile_patterns(patterns):
        compiled_patterns = []
        for pat in patterns:
            if isinstance(pat, list):
                compiled_group = [Chem.MolFromSmarts(p) for p in pat]
                compiled_patterns.append(compiled_group)
            else:
                compiled_patterns.append([Chem.MolFromSmarts(pat)])
        return compiled_patterns

    # Compile SMARTS patterns
    for rule in rules:
        rule['compiled_patterns'] = compile_patterns(rule['patterns'])
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            rule['compiled_exclude_patterns'] = compile_patterns(rule['exclude_patterns'])

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for compiled_group in rule['compiled_exclude_patterns']:
                        for pat in compiled_group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        if mol.HasSubstructMatch(pat):
                            group_match = True
                            break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                # print(f"Error processing rule {rule['number']} for SMILES {smi}: {e}")
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

---

- **Rule 1**: **Amino acids or their derivatives with polar or acidic side chains**—such as additional **carboxyl**, **amino**, **hydroxyl**, or **indole** groups—result in **high yield**. Conversely, amino acids with **hydrophobic side chains** (e.g., **phenyl groups**) or that are **N-acylated derivatives** result in **low yield**.
  - *Sub-structures Combined*: Amino acid backbone, polar side chains (carboxyl, amino, hydroxyl, indole), hydrophobic side chains (phenyl), N-acyl groups.
  - *High Yield Examples*:  
    - **(2S)-2-aminopentanedioic acid** *(L-glutamic acid)*
    - **(2S)-2-aminobutanedioic acid** *(L-aspartic acid)*
    - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** *(L-tryptophan)*
    - **5-aminopentanoic acid**
  - *Low Yield Examples*:  
    - **(2S)-2-amino-3-phenylpropanoic acid** *(L-phenylalanine)*
    - **(2S)-6-acetamido-2-aminohexanoic acid** *(N-acetyl-L-lysine)*
    - **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid**

---

- **Rule 2**: **Aromatic carboxylic acids substituted with electron-withdrawing groups** (e.g., **nitro**, **bromo**, **ketone**, **carboxyl** groups) at the **para position** lead to **high yield**. Substituents with **electron-donating groups** (e.g., **hydroxyl**, **methoxy**, **alkyl**, **aldehyde**) at the **para position** lead to **low yield**.
  - *Sub-structures Combined*: Aromatic ring with carboxylic acid, substituents at para position, nature of substituents (electron-withdrawing vs. electron-donating).
  - *High Yield Examples*:  
    - **4-nitrobenzoic acid**
    - **4-(bromomethyl)benzoic acid**
    - **1,3-dioxo-2-benzofuran-5-carboxylic acid**
  - *Low Yield Examples*:  
    - **4-methylbenzoic acid**
    - **4-formylbenzoic acid**
    - **5-formyl-2-hydroxybenzoic acid**
    - **3-(4-hydroxyphenyl)propanoic acid**
    - **2-[(4-hydroxybenzoyl)amino]acetic acid**

---

- **Rule 3**: **Aliphatic carboxylic acids with unbranched hydrocarbon chains and no additional polar functional groups** result in **high yield**. Introducing **polar groups** such as **hydroxyl**, **amino**, **ether**, or **ketone** groups into the chain leads to a **low yield**.
  - *Sub-structures Combined*: Linear aliphatic chain, carboxylic acid group, absence or presence of polar functional groups.
  - *High Yield Example*:  
    - **Octanoic acid**
  - *Low Yield Examples*:  
    - **7-hydroxyheptanoic acid**
    - **7-aminoheptanoic acid**
    - **8-aminooctanoic acid**
    - **4-oxoheptanedioic acid**

---

- **Rule 4**: **Modifiers containing nitrogen heterocycles attached directly to the carboxylic acid group or via an aliphatic linker** result in **high yield**. If the nitrogen heterocycle is attached via another **aromatic ring**, the yield is **low**.
  - *Sub-structures Combined*: Nitrogen-containing heterocycles, direct attachment or aliphatic linker to carboxylic acid, presence of additional aromatic rings.
  - *High Yield Examples*:  
    - **Pyridine-3-carboxylic acid** *(nicotinic acid)*
    - **1H-pyrazole-4-carboxylic acid**
    - **2-oxo-1H-pyridine-4-carboxylic acid**
    - **4-pyridin-4-ylbutanoic acid**
  - *Low Yield Example*:  
    - **4-pyridin-4-ylbenzoic acid**

---

- **Rule 5**: **Modifiers containing thiol groups on aliphatic chains** lead to **high yield**, whereas **thiol groups on aromatic rings** result in **low yield**.
  - *Sub-structures Combined*: Thiol group location (aliphatic vs. aromatic), carboxylic acid group.
  - *High Yield Example*:  
    - **3-sulfanylpropanoic acid**
  - *Low Yield Example*:  
    - **4-sulfanylbenzoic acid**

---

- **Rule 6**: **Modifiers with fluorinated alkyl chains**, such as **perfluoroalkyl** or **trifluoromethyl groups**, result in **low yield**.
  - *Sub-structures Combined*: Fluorinated alkyl chains, carboxylic acid group.
  - *Low Yield Examples*:  
    - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**
    - **4-[(2,2,2-trifluoroacetyl)amino]butanoic acid**

---

- **Rule 7**: **Modifiers containing multiple ether linkages in aliphatic chains** or **polyether chains** result in **low yield**.
  - *Sub-structures Combined*: Aliphatic chains with multiple ether linkages, carboxylic acid group.
  - *Low Yield Examples*:  
    - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**
    - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**

---

- **Rule 8**: **Modifiers with multiple hydroxyl groups on aliphatic chains** result in **high yield**.
  - *Sub-structures Combined*: Aliphatic chain with multiple hydroxyl groups, carboxylic acid group.
  - *High Yield Examples*:  
    - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** *(gluconic acid)*
    - **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]amino]acetic acid**

---

- **Rule 9**: **Modifiers that are aliphatic dicarboxylic acids with ketone groups in the chain** result in **low yield**.
  - *Sub-structures Combined*: Linear aliphatic chain, two carboxylic acid groups, ketone group within the chain.
  - *Low Yield Example*:  
    - **4-oxoheptanedioic acid**

---

- **Rule 10**: **Modifiers containing N-acylated amino acids or peptides** result in **low yield**.
  - *Sub-structures Combined*: N-acylated amino acid backbone, peptide bond.
  - *Low Yield Examples*:  
    - **(2S)-6-acetamido-2-aminohexanoic acid** *(N-acetyl-L-lysine)*
    - **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid**

---

- **Rule 11**: **Aromatic carboxylic acids with hydroxyl or methoxy groups on the aromatic ring** result in **low yield**, especially when these groups are in the **para position**.
  - *Sub-structures Combined*: Aromatic ring, carboxylic acid group, hydroxyl or methoxy substituents, position on ring.
  - *Low Yield Examples*:  
    - **3-(4-hydroxyphenyl)propanoic acid**
    - **2-[(4-hydroxybenzoyl)amino]acetic acid**
    - **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid**

---

**End of Rules**

---

**Explanation and Considerations**:

- **Balancing Rule Coverage**: The rules have been crafted to maximize coverage of the dataset while combining multiple functional groups to enhance predictive power.

- **Combining Similar Rules**: Rules with overlapping features have been combined for simplicity and better coverage. For example, the behavior of electron-donating groups on aromatic rings has been consolidated in **Rule 2** and **Rule 11**.

- **Adjustments Based on Data**: Rules have been refined to account for exceptions observed in the dataset, such as modifiers with methoxy groups leading to low yield, which is included in **Rule 11**.

- **Physical-Chemical Considerations**: The rules consider properties like electron-donating/withdrawing effects, polarity, steric hindrance, and the ability to coordinate with the catalyst.

- **Coverage of Dataset**: The rules aim to predict the yield for the majority of modifiers in the dataset, providing a clear guideline for future predictions.

------------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.5142857142857142; Test Accuracy: 0.0
    Train Support: 0.02857142857142857; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 1.9444444444444446; Test Lift: NONE
    Train Leverage: 0.013877551020408165; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns and rules
    rules = [
        {
            'number': 1,
            'description': 'Rule 1: Amino acids or their derivatives with polar or acidic side chains such as additional carboxyl, amino, hydroxyl, or indole groups result in high yield.',
            'patterns': [
                # Amino acid backbone
                '[NX3,NX4+][CX4H]([CX3](=O)[OX1-,OX2H1])[#6]',
                # Polar side chains (at least one of these)
                '[OX2H]',       # Hydroxyl group
                '[NX3H2]',      # Primary amine
                '[CX3](=O)[OX1-,OX2H1]',  # Carboxylic acid
                'c1ccc2c(c1)cc[nH]2'  # Indole ring
            ],
            'exclude_patterns': [
                '[CX4][c]',    # Excluding hydrophobic phenyl side chains
                '[NX3][CX3](=O)[#6]'  # Excluding N-acylated derivatives
            ],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Rule 2: Aromatic carboxylic acids substituted with electron-withdrawing groups at the para position lead to high yield.',
            'patterns': [
                # Aromatic carboxylic acid with EWG at para position
                '[cH]1ccc([CX3](=O)[OX1-,OX2H1])cc1[$(c[F,Cl,Br,I]),$(c[N+](=O)[O-]),$(cC(=O)[#6]),$(cC(=O)[OX1-,OX2H1])]',
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Rule 3: Aliphatic carboxylic acids with unbranched hydrocarbon chains and no additional polar functional groups result in high yield.',
            'patterns': [
                # Unbranched alkyl chain with terminal carboxylic acid
                '[CX3](=O)[OX1-,OX2H1][CH2][CH2][CH2][CH2][CH3]',
            ],
            'exclude_patterns': [
                # Exclude polar groups in the chain
                '[OX2H]', '[NX3H2]', '[SX2H]', '[CX3](=O)[#6]'
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Rule 4: Modifiers containing nitrogen heterocycles attached directly to the carboxylic acid group or via an aliphatic linker result in high yield.',
            'patterns': [
                # Nitrogen heterocycle connected to carboxylic acid directly or via aliphatic linker
                '[n][CX3](=O)[OX1-,OX2H1]',  # Direct attachment
                '[n][C][CX3](=O)[OX1-,OX2H1]'  # Via linker
            ],
            'exclude_patterns': [
                # Exclude additional aromatic rings connecting the heterocycle and carboxylic acid
                '[n][c][CX3](=O)[OX1-,OX2H1]'
            ],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Rule 5: Modifiers containing thiol groups on aliphatic chains lead to high yield.',
            'patterns': [
                # Thiol group on aliphatic chain with carboxylic acid
                '[CX3](=O)[OX1-,OX2H1][CX4][CX4][SX2H]'
            ],
            'exclude_patterns': [
                # Exclude thiol groups on aromatic rings
                '[c][SX2H]'
            ],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Rule 6: Modifiers containing fluorinated alkyl chains result in low yield.',
            'patterns': [
                # Perfluoroalkyl or trifluoromethyl groups
                '[CX4](F)(F)F',
                '[CX4][CX4](F)(F)(F)'
            ],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Rule 7: Modifiers containing multiple ether linkages in aliphatic chains result in low yield.',
            'patterns': [
                # Multiple ether linkages
                '[CX4][OX2][CX4][OX2][CX4][OX2][CX4]'
            ],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Rule 8: Modifiers with multiple hydroxyl groups on aliphatic chains result in high yield.',
            'patterns': [
                # Aliphatic chain with multiple hydroxyl groups
                '[CX4][OX2H][CX4][OX2H][CX4][OX2H]',
            ],
            'prediction': 1
        },
        {
            'number': 9,
            'description': 'Rule 9: Modifiers that are aliphatic dicarboxylic acids with ketone groups in the chain result in low yield.',
            'patterns': [
                # Dicarboxylic acid with ketone
                '[CX3](=O)[OX1-,OX2H1][CX4][CX3](=O)[CX4][CX3](=O)[OX1-,OX2H1]'
            ],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Rule 10: Modifiers containing N-acylated amino acids or peptides result in low yield.',
            'patterns': [
                # N-acylated amino acids or peptides
                '[NX3][CX3](=O)[NX3][CX2][CX3](=O)[OX1-,OX2H1]',
            ],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Rule 11: Aromatic carboxylic acids with hydroxyl or methoxy groups on the aromatic ring result in low yield.',
            'patterns': [
                # Aromatic carboxylic acid with hydroxyl or methoxy substituents
                '[cH]1cc([OX2H,OX2CH3])ccc1[CX3](=O)[OX1-,OX2H1]'
            ],
            'prediction': -1
        }
    ]

    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for smarts in rule.get('patterns', []):
            compiled_patterns.append(Chem.MolFromSmarts(smarts))
        rule['compiled_patterns'] = compiled_patterns
        compiled_exclude_patterns = []
        for smarts in rule.get('exclude_patterns', []):
            compiled_exclude_patterns.append(Chem.MolFromSmarts(smarts))
        rule['compiled_exclude_patterns'] = compiled_exclude_patterns

    # Initialize results list
    results = []
    num_rules = len(rules)

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*num_rules)
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns first
                for pat in rule.get('compiled_exclude_patterns', []):
                    if mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Check required patterns
                for pat in rule.get('compiled_patterns', []):
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

---

- **Rule 1**: **Modifiers with short-chain aliphatic amino acids result in **high yield**. As the chain length increases beyond six carbons, the yield tends to decrease.**

  - *Sub-structures Combined*: Short aliphatic chains (≤6 carbons) with amino groups and carboxylic acid groups.

  - *High Yield Examples*:
    - **(2S)-2-aminopentanedioic acid** *(L-glutamic acid)*
    - **(2S)-2-aminobutanedioic acid** *(L-aspartic acid)*
    - **5-aminopentanoic acid**

  - *Low Yield Examples*:
    - **7-aminoheptanoic acid**
    - **8-aminooctanoic acid**

---

- **Rule 2**: **Aromatic carboxylic acids with electron-withdrawing groups at the para position result in **high yield**, while those with electron-donating groups result in **low yield**.**

  - *Sub-structures Combined*: Aromatic ring with a carboxylic acid group and substituents at the para position; nature of substituents (electron-withdrawing vs. electron-donating).

  - *High Yield Examples*:
    - **4-nitrobenzoic acid**
    - **4-(bromomethyl)benzoic acid**
    - **4-aminobenzoic acid**

  - *Low Yield Examples*:
    - **4-methylbenzoic acid**
    - **4-formylbenzoic acid**

  - *Note*: Although amino groups are generally electron-donating, in the context of **4-aminobenzoic acid**, they enhance coordination with the metal center, leading to high yield.

---

- **Rule 3**: **Modifiers containing pyridine carboxylic acids result in **high yield** when the pyridine ring is directly attached to the carboxylic acid group. If connected through an additional ring, the yield is **low**.**

  - *Sub-structures Combined*: Pyridine ring directly connected to a carboxylic acid group vs. connected via another ring.

  - *High Yield Examples*:
    - **Pyridine-3-carboxylic acid** *(nicotinic acid)*
    - **2-oxo-1H-pyridine-4-carboxylic acid**

  - *Low Yield Example*:
    - **4-pyridin-4-ylbenzoic acid**

---

- **Rule 4**: **Aliphatic carboxylic acids without additional polar functional groups result in **high yield**. Introducing polar groups like hydroxyl, amino, or ketone functionalities leads to **low yield**.**

  - *Sub-structures Combined*: Linear aliphatic chains with a carboxylic acid group; presence or absence of additional polar groups.

  - *High Yield Example*:
    - **Octanoic acid**

  - *Low Yield Examples*:
    - **7-hydroxyheptanoic acid**
    - **7-aminoheptanoic acid**
    - **4-oxoheptanedioic acid**

---

- **Rule 5**: **Modifiers with multiple hydroxyl groups on aliphatic chains (polyols) result in **high yield** due to enhanced metal coordination.**

  - *Sub-structures Combined*: Aliphatic chains with multiple hydroxyl groups and a carboxylic acid group.

  - *High Yield Examples*:
    - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** *(gluconic acid)*
    - **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]amino]acetic acid**

---

- **Rule 6**: **Modifiers containing nitrogen heterocycles directly attached to the carboxylic acid group result in **high yield**. When attached via additional aromatic rings, the yield is **low**.**

  - *Sub-structures Combined*: Nitrogen-containing heterocyclic rings (e.g., pyridine, pyrazole) directly attached to a carboxylic acid group.

  - *High Yield Examples*:
    - **1H-pyrazole-4-carboxylic acid**
    - **Pyridine-3-carboxylic acid**

  - *Low Yield Example*:
    - **4-pyridin-4-ylbenzoic acid**

---

- **Rule 7**: **Modifiers with thiol groups on aliphatic chains lead to **high yield**, whereas thiol groups on aromatic rings result in **low yield**.**

  - *Sub-structures Combined*: Position of thiol group (aliphatic vs. aromatic) with a carboxylic acid group.

  - *High Yield Example*:
    - **3-sulfanylpropanoic acid**

  - *Low Yield Example*:
    - **4-sulfanylbenzoic acid**

---

- **Rule 8**: **Modifiers containing fluorinated alkyl chains or fluorinated functional groups result in **low yield** due to decreased metal coordination and increased steric hindrance.**

  - *Sub-structures Combined*: Fluorinated alkyl chains or trifluoromethyl groups with a carboxylic acid group.

  - *Low Yield Examples*:
    - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**
    - **4-[(2,2,2-trifluoroacetyl)amino]butanoic acid**

---

- **Rule 9**: **Modifiers that are N-acetylated amino acids or contain peptide bonds result in **low yield** due to steric hindrance and reduced coordination sites.**

  - *Sub-structures Combined*: N-acetylated amino acids, peptides, and amide bonds.

  - *Low Yield Examples*:
    - **(2S)-6-acetamido-2-aminohexanoic acid**
    - **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid**

---

- **Rule 10**: **Modifiers with ether linkages in aliphatic chains result in **low yield** due to increased flexibility and reduced effective coordination with the metal center.**

  - *Sub-structures Combined*: Aliphatic chains containing ether linkages and a carboxylic acid group.

  - *Low Yield Examples*:
    - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**
    - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**

---

- **Rule 11**: **Modifiers with aromatic rings bearing hydroxyl or methoxy groups result in **low yield** unless accompanied by additional coordinating groups that enhance metal binding.**

  - *Sub-structures Combined*: Aromatic rings with hydroxyl or methoxy substituents and a carboxylic acid group; presence of additional coordinating groups.

  - *Low Yield Examples*:
    - **3-(4-hydroxyphenyl)propanoic acid**
    - **2-[(4-hydroxybenzoyl)amino]acetic acid**

  - *High Yield Example*:
    - **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid**

  - *Note*: In the high-yield example, the ketone group enhances coordination with the metal center.

---

- **Rule 12**: **Modifiers containing aldehyde or ketone groups directly attached to aromatic rings result in **low yield** due to potential competitive coordination or side reactions.**

  - *Sub-structures Combined*: Aromatic rings with aldehyde (formyl) or ketone groups and a carboxylic acid group.

  - *Low Yield Examples*:
    - **4-formylbenzoic acid**
    - **5-formyl-2-hydroxybenzoic acid**
    - **1,3-dioxo-2-benzofuran-5-carboxylic acid**

---

- **Rule 13**: **Modifiers with bulky hydrophobic groups lacking coordinating heteroatoms result in **low yield**; if such groups include heteroatoms that can coordinate with metals, the yield can be **high**.**

  - *Sub-structures Combined*: Bulky hydrophobic groups (e.g., phenyl, indole), presence or absence of coordinating heteroatoms (e.g., nitrogen).

  - *High Yield Example*:
    - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** *(L-tryptophan)*

  - *Low Yield Example*:
    - **(2S)-2-amino-3-phenylpropanoic acid** *(L-phenylalanine)*

  - *Note*: The indole nitrogen in tryptophan facilitates metal coordination, enhancing yield.

---

- **Rule 14**: **Modifiers with ketone groups in aliphatic chains result in **low yield** due to potential side reactions or interference with catalyst activity.**

  - *Sub-structures Combined*: Aliphatic chains with ketone functionalities and a carboxylic acid group.

  - *Low Yield Example*:
    - **4-oxoheptanedioic acid**

---

- **Rule 15**: **Modifiers containing multiple coordinating groups (e.g., hydroxyl, amino) in close proximity enhance metal binding and result in **high yield**.**

  - *Sub-structures Combined*: Multiple coordinating functional groups near each other on the molecule.

  - *High Yield Examples*:
    - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** *(gluconic acid)*
    - **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]amino]acetic acid**

---

**End of Rules**

---

**Explanation and Considerations**:

- **Chemical Insights**: The rules are formulated based on the influence of functional groups on the coordination chemistry with the iron catalyst and the reaction mechanism. Functional groups that enhance coordination with the iron center or stabilize the catalyst intermediate tend to increase the reaction yield.

- **Combining Multiple Sub-structures**: Each rule integrates multiple functional groups and structural motifs to reflect the complex interactions affecting the reaction outcome. For example, Rule 2 considers both the electronic nature of substituents and their position on the aromatic ring.

- **Physical-Chemical Properties**: The rules account for electron-withdrawing and electron-donating effects, steric hindrance, hydrophilicity/hydrophobicity, and the ability of functional groups to act as ligands coordinating to the metal center.

- **Dataset Coverage**: The rules collectively cover the majority of the dataset, explaining both high and low yields observed. Emphasis is placed on rules that apply to multiple modifiers to ensure broader applicability.

- **Balance of Rules**: There is a balance between simple rules with high coverage (e.g., Rule 2) and more complex rules that address specific cases (e.g., Rule 11). This balance ensures both general trends and nuanced exceptions are captured.

- **Predictive Utility**: These rules can predict the likely yield outcome for new modifiers based on their structural features, aiding in the rational design of modifiers to optimize the reaction.

- **Exceptions and Nuances**: Notable exceptions are highlighted within the rules to refine their predictive power. For instance, Rule 11 acknowledges that additional coordinating groups can offset the negative impact of certain functional groups.

---

By applying these rules, researchers can better understand how different molecular modifiers influence the yield of the radical-mediated remote δ-C(sp³)–H bond functionalization reaction. This understanding can guide the design and selection of modifiers to enhance reaction efficiency and achieve desired outcomes.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0
0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0
0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0
0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0

---------------------------------------------------------------


    Train Accuracy: 0.5714285714285714; Test Accuracy: 0.0
    Train Support: 0.05714285714285714; Test Support: 0.0
    Train Confidence: 0.8333333333333333; Test Confidence: 0.25
    Train Lift: 1.6203703703703705; Test Lift: NONE
    Train Leverage: 0.020408163265306124; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    from rdkit import Chem
    import pandas as pd

    # Define the rules with their associated SMARTS patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'High yield for short-chain aliphatic amino acids (≤6 carbons).',
            'must_patterns': ['[NX3;H2,H1][C][C;D2][C;D2][C;D2][C;D2][CX3](=O)[OX1H0-,OX2H1]'],  # Amino group connected to chain of ≤6 carbons ending with carboxylic acid
            'max_chain_length': 6,
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'High yield for aromatic carboxylic acids with electron-withdrawing groups at the para position.',
            'must_patterns': ['[c]1ccc([CX3](=O)[OX1H0-,OX2H1])c([F,Cl,Br,I,NX3](=O)=O)c1'],  # Aromatic ring with COOH and EWG at para position
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'High yield for pyridine carboxylic acids with carboxylic acid directly attached to pyridine ring.',
            'must_patterns': ['[n][c]([CX3](=O)[OX1H0-,OX2H1])[c][c][c]'],  # Pyridine ring with COOH directly attached
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'High yield for aliphatic carboxylic acids without additional polar functional groups.',
            'must_patterns': ['[C][C][C][C][C][CX3](=O)[OX1H0-,OX2H1]'],  # Aliphatic chain with COOH
            'exclude_patterns': ['[N,O,S]'],  # Exclude additional polar groups
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'High yield for modifiers with multiple hydroxyl groups on aliphatic chains (polyols).',
            'must_patterns': ['[CX3](=O)[OX1H0-,OX2H1]', '[OX2H][CX4][CX4][OX2H]'],  # Carboxylic acid and multiple hydroxyls
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'High yield for nitrogen heterocycles directly attached to carboxylic acid group.',
            'must_patterns': ['[n][c][CX3](=O)[OX1H0-,OX2H1]'],  # Nitrogen heterocycle with COOH attached
            'exclude_patterns': ['[c][c][n][c][c]'],  # Exclude if attached via another ring
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'High yield when thiol groups are on aliphatic chains with a carboxylic acid.',
            'must_patterns': ['[SX2H][CX4][CX3](=O)[OX1H0-,OX2H1]'],  # Thiol on aliphatic chain with COOH
            'exclude_patterns': ['[s][c]'],  # Exclude thiol on aromatic ring
            'prediction': 1
        },
        {
            'number': 8,
            'description': 'Low yield for modifiers containing fluorinated alkyl chains or fluorinated functional groups.',
            'must_patterns': ['[C](F)(F)F', '[CX4][C](F)(F)F'],  # Trifluoromethyl groups
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Low yield for N-acetylated amino acids or peptides (amide bonds).',
            'must_patterns': ['[NX3][CX3](=O)[NX3]'],  # Amide bonds
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'Low yield for modifiers with ether linkages in aliphatic chains.',
            'must_patterns': ['[C][OX2][C]'],  # Ether linkage in aliphatic chain
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Low yield for aromatic rings bearing hydroxyl or methoxy groups without additional coordinating groups.',
            'must_patterns': ['[c][c][c]([OX2H,OCH3])[c][c]'],  # Aromatic ring with OH or OCH3
            'exclude_patterns': ['[N,S]'],  # Exclude if other coordinating groups present
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'Low yield for modifiers with aldehyde or ketone groups attached to aromatic rings.',
            'must_patterns': ['[c][c][c](C=O)[c][c]'],  # Aldehyde or ketone on aromatic ring
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'Low yield for bulky hydrophobic groups lacking coordinating heteroatoms.',
            'must_patterns': ['[c]1ccccc1[C][C](=O)[OX1H0-,OX2H1]'],  # Phenyl group attached to aliphatic chain with COOH
            'exclude_patterns': ['[n,o,s]'],  # Exclude if heteroatoms present
            'prediction': -1
        },
        {
            'number': 14,
            'description': 'Low yield for ketone groups in aliphatic chains.',
            'must_patterns': ['[C](=O)[C]'],  # Ketone in aliphatic chain
            'prediction': -1
        },
        {
            'number': 15,
            'description': 'High yield for modifiers containing multiple coordinating groups in close proximity.',
            'must_patterns': ['[OX2H][CX4][OX2H][CX3](=O)[OX1H0-,OX2H1]'],  # Multiple OH groups near COOH
            'prediction': 1
        }
    ]

    # Compile SMARTS patterns for each rule
    for rule in rules:
        rule['compiled_must_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule.get('must_patterns', [])]
        rule['compiled_exclude_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule.get('exclude_patterns', [])]

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if not mol:
            # If molecule cannot be parsed, append row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns
                for pat in rule.get('compiled_exclude_patterns', []):
                    if mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Check must patterns
                for pat in rule.get('compiled_must_patterns', []):
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Additional logic if any
                if 'max_chain_length' in rule:
                    # Find all paths between amino group and carboxylic acid
                    amino_pat = Chem.MolFromSmarts('[NX3;H2,H1;!$(N=*);!$(N-[!#6])]')
                    carboxy_pat = Chem.MolFromSmarts('[CX3](=O)[OX1H0-,OX2H1]')
                    amino_matches = mol.GetSubstructMatches(amino_pat)
                    carboxy_matches = mol.GetSubstructMatches(carboxy_pat)
                    paths = []
                    for a in amino_matches:
                        for c in carboxy_matches:
                            try:
                                path = Chem.rdmolops.GetShortestPath(mol, a[0], c[0])
                                # Count number of carbons along the path
                                num_carbons = sum(1 for atom_idx in path if mol.GetAtomWithIdx(atom_idx).GetAtomicNum() == 6)
                                if num_carbons <= rule['max_chain_length']:
                                    paths.append(path)
                            except:
                                continue
                    if not paths:
                        match = False
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of error, append 0
                row.append(0)
        results.append(row)

    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f"Rule {rule['number']}" for rule in rules])

    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

---

- **Rule 1**: **Modifiers that are amino acids with short aliphatic or unsubstituted aromatic side chains result in **high yield**; those with bulky or polar side chains result in **low yield**.**

  - **Sub-structures Combined**: Amino acids containing amino and carboxylic acid groups with simple aliphatic or aromatic side chains.

  - **High Yield Examples**:
    - **(2S)-2-aminobutanedioic acid** *(Aspartic acid)*
    - **(2S)-2-aminopentanedioic acid** *(Glutamic acid)*
    - **5-aminopentanoic acid**
    - **4-aminobenzoic acid**

  - **Low Yield Examples**:
    - **(2S)-2-amino-3-phenylpropanoic acid** *(Phenylalanine)*
    - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** *(Tryptophan)*
    - **(2S)-6-acetamido-2-aminohexanoic acid** *(N-Acetyl-Lysine)*

  - **Explanation**: Simple side chains allow effective coordination with the metal center, enhancing catalytic activity. Bulky or highly polar side chains may introduce steric hindrance or compete for coordination, reducing yield.

---

- **Rule 2**: **Modifiers that are aromatic carboxylic acids substituted with electron-withdrawing groups (EWGs) result in **high yield**; those with electron-donating groups (EDGs) result in **low yield**.**

  - **Sub-structures Combined**: Aromatic carboxylic acids with substituents; nature of substituents (EWGs vs. EDGs).

  - **High Yield Examples**:
    - **4-nitrobenzoic acid**
    - **4-(bromomethyl)benzoic acid**

  - **Low Yield Examples**:
    - **4-methylbenzoic acid**
    - **3-(4-hydroxyphenyl)propanoic acid**
    - **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid**

  - **Explanation**: EWGs increase the acidity of the carboxylic acid group, enhancing metal coordination. EDGs decrease acidity and may hinder coordination due to increased electron density.

---

- **Rule 3**: **Modifiers containing heterocyclic nitrogen rings directly attached to a carboxylic acid group result in **high yield**; if the nitrogen ring is separated by an additional ring or chain, the yield is **low**.**

  - **Sub-structures Combined**: Nitrogen-containing heterocycles directly connected to a carboxylic acid.

  - **High Yield Examples**:
    - **Pyridine-3-carboxylic acid** *(Nicotinic acid)*
    - **1H-pyrazole-4-carboxylic acid**
    - **2-oxo-1H-pyridine-4-carboxylic acid**

  - **Low Yield Examples**:
    - **4-pyridin-4-ylbenzoic acid**
    - **4-pyridin-4-ylbutanoic acid**

  - **Explanation**: Direct attachment allows the nitrogen atom to effectively coordinate with the metal center. Separation reduces coordination efficiency due to increased distance and steric factors.

---

- **Rule 4**: **Modifiers with carboxylic acid groups and multiple adjacent hydroxyl groups (polyhydroxylated acids) result in **high yield**; those with hydroxyl groups distant from the acid group result in **low yield**.**

  - **Sub-structures Combined**: Carboxylic acids with multiple hydroxyl groups near the functional group.

  - **High Yield Examples**:
    - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** *(Gluconic acid)*
    - **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]amino]acetic acid**

  - **Low Yield Examples**:
    - **7-hydroxyheptanoic acid**

  - **Explanation**: Multiple adjacent hydroxyl groups enhance chelation with the metal center, stabilizing the catalyst. Distant hydroxyl groups are less effective due to reduced interaction.

---

- **Rule 5**: **Modifiers containing aliphatic thiol (–SH) groups adjacent to a carboxylic acid result in **high yield**; aromatic thiol modifiers result in **low yield**.**

  - **Sub-structures Combined**: Presence of thiol groups in aliphatic vs. aromatic contexts.

  - **High Yield Example**:
    - **3-sulfanylpropanoic acid**

  - **Low Yield Example**:
    - **4-sulfanylbenzoic acid**

  - **Explanation**: Aliphatic thiols can effectively coordinate with metal centers. In aromatic thiols, delocalization reduces the availability of the sulfur atom for coordination.

---

- **Rule 6**: **Modifiers that are long-chain aliphatic carboxylic acids without additional functional groups result in **high yield**; functional groups on long chains may reduce yield.**

  - **Sub-structures Combined**: Simple long-chain aliphatic carboxylic acids vs. those with additional substituents.

  - **High Yield Example**:
    - **Octanoic acid**

  - **Low Yield Examples**:
    - **7-aminoheptanoic acid**
    - **8-aminooctanoic acid**

  - **Explanation**: Unsubstituted aliphatic chains interact favorably with the catalyst surface. Additional functional groups may interfere with packing or coordination.

---

- **Rule 7**: **Modifiers with fluorinated alkyl chains result in **low yield** due to decreased electron density and hydrophobic effects.**

  - **Sub-structures Combined**: Fluorinated alkyl chains attached to carboxylic acid groups.

  - **Low Yield Examples**:
    - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**
    - **4-[(2,2,2-trifluoroacetyl)amino]butanoic acid**

  - **Explanation**: Fluorination withdraws electron density, reducing coordination ability, and increases hydrophobicity, potentially affecting catalyst interaction.

---

- **Rule 8**: **Modifiers with carbonyl groups (aldehyde or ketone) conjugated with carboxylic acid groups result in **low yield** due to competitive coordination and potential side reactions.**

  - **Sub-structures Combined**: Conjugated carbonyl groups adjacent to carboxylic acid.

  - **Low Yield Examples**:
    - **4-formylbenzoic acid**
    - **5-formyl-2-hydroxybenzoic acid**
    - **4-oxoheptanedioic acid**

  - **Explanation**: Conjugated carbonyl groups may compete with the carboxylate in coordinating to the metal, disrupting optimal catalyst function.

---

- **Rule 9**: **Modifiers possessing ether linkages within the aliphatic chain result in **low yield** due to increased flexibility and decreased coordination.**

  - **Sub-structures Combined**: Aliphatic chains containing ether bonds (–O–).

  - **Low Yield Examples**:
    - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**
    - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**

  - **Explanation**: Ether linkages increase chain flexibility, which may hinder effective alignment and coordination with the metal center.

---

- **Rule 10**: **Modifiers that are N-acetylated amino acids or contain amide bonds result in **low yield** due to reduced availability of coordination sites.**

  - **Sub-structures Combined**: N-acetyl groups or internal amide bonds within amino acids.

  - **Low Yield Examples**:
    - **(2S)-6-acetamido-2-aminohexanoic acid**
    - **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid**

  - **Explanation**: Acetylation or amide bond formation blocks free amino groups, decreasing coordination points available for metal binding.

---

- **Rule 11**: **Modifiers with electron-donating methoxy groups on aromatic rings result in **low yield**, unless other strong coordinating groups are present.**

  - **Sub-structures Combined**: Methoxy-substituted aromatic carboxylic acids.

  - **Low Yield Examples**:
    - **3-(4-hydroxyphenyl)propanoic acid**
    - **2-[(4-hydroxybenzoyl)amino]acetic acid**

  - **High Yield Exception**:
    - **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid**

  - **Explanation**: Methoxy groups donate electron density, reducing carboxylate acidity and coordination ability. Exceptions occur when additional groups (like ketones) enhance coordination.

---

- **Rule 12**: **Modifiers containing multiple heteroatoms (e.g., nitrogen, oxygen) in a condensed ring system directly attached to a carboxylic acid group result in **high yield**.**

  - **Sub-structures Combined**: Condensed heterocyclic rings with carboxylic acid groups.

  - **High Yield Examples**:
    - **1,3-dioxo-2-benzofuran-5-carboxylic acid**
    - **2-oxo-1H-pyridine-4-carboxylic acid**

  - **Explanation**: Multiple heteroatoms provide additional coordination sites, enhancing metal binding and catalytic efficiency.

---

- **Rule 13**: **Modifiers with aliphatic chains containing distal functional groups (hydroxyl or amino) beyond five carbons from the carboxylic acid result in **low yield** due to reduced coordination.**

  - **Sub-structures Combined**: Long aliphatic chains (>5 carbons) with distal functional groups.

  - **Low Yield Examples**:
    - **7-hydroxyheptanoic acid**
    - **7-aminoheptanoic acid**

  - **Explanation**: Functional groups far from the carboxylate are less effective in chelating the metal center, diminishing their impact on the catalyst.

---

- **Rule 14**: **Modifiers that are aromatic amines (anilines) directly attached to a carboxylic acid group result in **high yield** due to enhanced coordination.**

  - **Sub-structures Combined**: Aromatic rings with amino groups directly attached, along with a carboxylic acid.

  - **High Yield Example**:
    - **4-aminobenzoic acid**

  - **Explanation**: The amino group on the aromatic ring acts as an additional coordination site, strengthening metal binding.

---

- **Rule 15**: **Modifiers with thioether groups (–S–) in the side chain result in **low yield** due to weaker coordination compared to thiols.**

  - **Sub-structures Combined**: Thioether linkages within the modifier molecule.

  - **Low Yield Example**:
    - **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid**

  - **Explanation**: Thioethers are less effective at metal coordination than thiol groups, reducing their ability to enhance catalytic activity.

---

**End of Rules**

---

**Explanation and Considerations**:

- **Chemical Insights**: The rules are based on the functional groups and structural motifs of the modifiers that affect their ability to coordinate with the iron ion in the catalyst. Effective metal coordination is key to enhancing catalytic activity and increasing yield.

- **Combining Sub-structures**: Each rule combines multiple sub-structures or functional groups, such as the presence of amino acids with specific side chains, aromatic rings with substituents, and functional group proximity, to assess their combined effect on the yield.

- **Underlying Physico-Chemical Properties**:
  - **Electronic Effects**: Electron-withdrawing groups increase acidity and enhance metal coordination, while electron-donating groups decrease acidity.
  - **Steric Hindrance**: Bulky side chains or distal functional groups may hinder effective coordination due to spatial constraints.
  - **Chelation Ability**: Multiple adjacent coordinating groups (e.g., hydroxyls, heteroatoms) enhance chelation and stabilize the metal center.
  - **Functional Group Interactions**: Specific functional groups (thiols vs. thioethers, amines vs. amides) have different coordination strengths.

- **Dataset Coverage**: The rules aim to cover a broad range of the provided dataset, explaining the high or low yield outcomes for the modifiers listed. By prioritizing rules that address common structural features, the rules offer predictive value for new modifiers with similar characteristics.

- **Balance of Rules**: The set includes both general rules with wide applicability (e.g., effects of substituents on aromatic rings) and more specific rules that address particular structural motifs (e.g., fluorinated chains, thioethers), maintaining a balance between coverage and specificity.

- **Predictive Utility**: These rules can be used to predict the yield outcome of other modifiers by analyzing their structural features, aiding in the rational design of modifiers that will enhance the catalytic performance.

- **Improvements over Previous Rules**:
  - **Consolidation**: Similar or overlapping rules have been combined to reduce redundancy and improve clarity.
  - **Clarity**: Rules have been rephrased for better understanding, with clear distinctions between high and low yield predictors.
  - **Exceptions Noted**: Where exceptions occur, they are acknowledged, providing a more nuanced understanding.

---

By applying these rules, researchers can better understand how different molecular modifiers influence the yield of the radical-mediated remote δ-C(sp³)–H bond functionalization reaction. This knowledge facilitates the selection and design of modifiers that enhance catalytic performance and optimize reaction outcomes.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6; Test Accuracy: 0.0
    Train Support: 0.22857142857142856; Test Support: 0.0
    Train Confidence: 0.6666666666666666; Test Confidence: 0.5
    Train Lift: 1.3534858387799567; Test Lift: NONE
    Train Leverage: 0.0595918367346939; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and substructures
    
    # Rule 1 patterns: Amino acids with short aliphatic or unsubstituted aromatic side chains
    amino_group = '[NX3;H2,H1;!$([N][!C])]'  # Primary or secondary amine
    carboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1]'  # Carboxylic acid group
    aromatic_ring = '[a]'  # Aromatic atom
    
    # Define bulky or polar side chains (patterns to exclude for high yield)
    bulky_side_chains = ['[CX3](=O)[NX3]', '[#6][SX2][#6]', '[#6][OX2][#6]', '[#6][NX3][#6]']  # Amide, thioether, ether, secondary amine
    polar_groups = ['[OH]', '[NH2]', '[SH]', '[OX2H]']  # Hydroxyl, amino, thiol
    
    # Rule 2 patterns: Aromatic carboxylic acids with EWGs or EDGs
    aromatic_carboxylic_acid = '[c][CX3](=O)[OX1H0-,OX2H1]'  # Aromatic carboxylic acid
    EWGs = ['[c][F,Cl,Br,I]', '[c][CX3](=O)[OX1H0-,OX2H1]', '[c][NX3](=O)[OX1H0-,OX2H1]', '[c][CX4](F)(F)F']  # Halogens, carboxylic acids, nitro, CF3
    EDGs = ['[c][CH3]', '[c][OX2H]', '[c][OX2][CH3]', '[c][NX3;H2,H1]']  # Methyl, hydroxyl, methoxy, amino
    
    # Rule 3 patterns: Heterocyclic nitrogen rings directly attached to carboxylic acid
    heterocyclic_nitrogen_ring = '[n][CX3](=O)[OX1H0-,OX2H1]'  # Nitrogen heterocycle with carboxylic acid
    separated_nitrogen_ring = '[n][a][CX3](=O)[OX1H0-,OX2H1]'  # Nitrogen ring separated by another ring
    
    # Rule 4 patterns: Carboxylic acids with multiple adjacent hydroxyl groups (polyhydroxylated acids)
    polyhydroxylated_chain = '[#6][CX3](=O)[OX1H0-,OX2H1][#6][OX2H][#6][OX2H][#6][OX2H]'  # Simplified pattern
    distant_hydroxyl = '[CX3](=O)[OX1H0-,OX2H1][#6][#6][#6][#6][OX2H]'  # Hydroxyl distant from acid group
    
    # Rule 5 patterns: Aliphatic thiol groups adjacent to carboxylic acid vs. aromatic thiols
    aliphatic_thiol_adjacent = '[CX3](=O)[OX1H0-,OX2H1][CX4][SX2H]'  # Aliphatic thiol adjacent to acid
    aromatic_thiol = '[c][SX2H]'  # Aromatic thiol
    
    # Compile SMARTS patterns
    patterns = {
        'Rule 1 High': [Chem.MolFromSmarts(amino_group), Chem.MolFromSmarts(carboxylic_acid)],
        'Rule 1 Low Bulky': [Chem.MolFromSmarts(amino_group), Chem.MolFromSmarts(carboxylic_acid)] + [Chem.MolFromSmarts(p) for p in bulky_side_chains],
        'Rule 1 Low Polar': [Chem.MolFromSmarts(amino_group), Chem.MolFromSmarts(carboxylic_acid)] + [Chem.MolFromSmarts(p) for p in polar_groups],
        'Rule 2 High': [Chem.MolFromSmarts(aromatic_carboxylic_acid)] + [Chem.MolFromSmarts(p) for p in EWGs],
        'Rule 2 Low': [Chem.MolFromSmarts(aromatic_carboxylic_acid)] + [Chem.MolFromSmarts(p) for p in EDGs],
        'Rule 3 High': [Chem.MolFromSmarts(heterocyclic_nitrogen_ring)],
        'Rule 3 Low': [Chem.MolFromSmarts(separated_nitrogen_ring)],
        'Rule 4 High': [Chem.MolFromSmarts(polyhydroxylated_chain)],
        'Rule 4 Low': [Chem.MolFromSmarts(distant_hydroxyl)],
        'Rule 5 High': [Chem.MolFromSmarts(aliphatic_thiol_adjacent)],
        'Rule 5 Low': [Chem.MolFromSmarts(aromatic_thiol)]
    }
    
    # Initialize list to store results
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If molecule cannot be parsed, append a row of zeros
            results.append([0]*15)
            continue
        row = []
        # Rule 1
        try:
            if mol.HasSubstructMatch(patterns['Rule 1 High'][0]) and mol.HasSubstructMatch(patterns['Rule 1 High'][1]):
                # Check if bulky or polar side chains are absent
                bulky_or_polar = False
                for pat in patterns['Rule 1 Low Bulky'][2:] + patterns['Rule 1 Low Polar'][2:]:
                    if mol.HasSubstructMatch(pat):
                        bulky_or_polar = True
                        break
                if not bulky_or_polar:
                    row.append(1)
                else:
                    row.append(-1)
            else:
                row.append(0)
        except:
            row.append(0)
        # Rule 2
        try:
            if mol.HasSubstructMatch(patterns['Rule 2 High'][0]):
                has_EWG = False
                for pat in patterns['Rule 2 High'][1:]:
                    if mol.HasSubstructMatch(pat):
                        has_EWG = True
                        break
                has_EDG = False
                for pat in patterns['Rule 2 Low'][1:]:
                    if mol.HasSubstructMatch(pat):
                        has_EDG = True
                        break
                if has_EWG and not has_EDG:
                    row.append(1)
                elif has_EDG:
                    row.append(-1)
                else:
                    row.append(0)
            else:
                row.append(0)
        except:
            row.append(0)
        # Rule 3
        try:
            if mol.HasSubstructMatch(patterns['Rule 3 High'][0]):
                row.append(1)
            elif mol.HasSubstructMatch(patterns['Rule 3 Low'][0]):
                row.append(-1)
            else:
                row.append(0)
        except:
            row.append(0)
        # Rule 4
        try:
            if mol.HasSubstructMatch(patterns['Rule 4 High'][0]):
                row.append(1)
            elif mol.HasSubstructMatch(patterns['Rule 4 Low'][0]):
                row.append(-1)
            else:
                row.append(0)
        except:
            row.append(0)
        # Rule 5
        try:
            if mol.HasSubstructMatch(patterns['Rule 5 High'][0]):
                row.append(1)
            elif mol.HasSubstructMatch(patterns['Rule 5 Low'][0]):
                row.append(-1)
            else:
                row.append(0)
        except:
            row.append(0)
        # For remaining rules (6-15), append zeros as placeholders
        row.extend([0]*10)
        results.append(row)
    # Create DataFrame with results
    columns = ['Rule {}'.format(i+1) for i in range(15)]
    df = pd.DataFrame(results, columns=columns)
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

---

- **Rule 1**: **Modifiers containing both a carboxylic acid group and an amino group in close proximity generally result in a **high yield** due to enhanced bidentate coordination with the catalyst's metal centers.**

  - **Sub-structures Combined**: Carboxylic acid group and amino group adjacent or within the same molecule.

  - **High Yield Examples**:
    - **(2S)-2-aminobutanedioic acid** *(Aspartic acid)*
    - **(2S)-2-aminopentanedioic acid** *(Glutamic acid)*
    - **5-aminopentanoic acid** *(γ-Aminovaleric acid)*
    - **4-aminobenzoic acid**
    - **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** *(Tryptophan)*

  - **Low Yield Exceptions**:
    - **(2S)-2-amino-3-phenylpropanoic acid** *(Phenylalanine)* *(Low yield due to bulky hydrophobic side chain causing steric hindrance)*
    - **(2S)-6-acetamido-2-aminohexanoic acid** *(Low yield due to N-acetylation blocking amino group coordination)*

  - **Note**: The effective chelation enhances stability of the catalyst-modifier complex, improving the reaction yield unless hindered by steric factors or functional group modifications.

---

- **Rule 2**: **Modifiers that are aromatic carboxylic acids with electron-withdrawing groups (EWGs) on the aromatic ring result in a **high yield**; those with electron-donating groups (EDGs) without coordinating ability result in a **low yield**.**

  - **Sub-structures Combined**: Aromatic ring with a carboxylic acid group and substituents that are EWGs or EDGs.

  - **High Yield Examples**:
    - **4-nitrobenzoic acid** *(nitro group as a strong EWG)*
    - **4-(bromomethyl)benzoic acid** *(bromomethyl group as an EWG)*

  - **Low Yield Examples**:
    - **4-methylbenzoic acid** *(methyl group as an EDG without coordinating ability)*
    - **3-(4-hydroxyphenyl)propanoic acid** *(hydroxy group insufficient for effective coordination)*

  - **High Yield Exception**:
    - **4-aminobenzoic acid** *(Amino group enhances coordination despite being an EDG)*

  - **Note**: EWGs increase the electrophilicity of the carboxyl group, enhancing metal coordination, while EDGs can reduce this effect unless they provide additional coordination sites.

---

- **Rule 3**: **Modifiers containing heterocyclic nitrogen rings adjacent to carboxylic acid groups generally result in a **high yield** due to the nitrogen's ability to coordinate with metal centers.**

  - **Sub-structures Combined**: Heterocyclic aromatic rings with nitrogen atoms and attached carboxylic acid groups.

  - **High Yield Examples**:
    - **Pyridine-3-carboxylic acid** *(Nicotinic acid)*
    - **1H-pyrazole-4-carboxylic acid**
    - **2-oxo-1H-pyridine-4-carboxylic acid** *(4-Pyridone carboxylic acid)*

  - **Low Yield Exception**:
    - **4-pyridin-4-ylbenzoic acid** *(Low yield possibly due to steric hindrance or reduced nitrogen accessibility for coordination)*

  - **Note**: The position and accessibility of nitrogen atoms are crucial; they must be available to interact with the catalyst for high yield.

---

- **Rule 4**: **Modifiers that are straight-chain aliphatic carboxylic acids without additional functional groups tend to result in a **high yield**; introducing distal functional groups, especially polar ones, leads to a **low yield**.**

  - **Sub-structures Combined**: Unsubstituted aliphatic chains with terminal carboxylic acid groups.

  - **High Yield Example**:
    - **Octanoic acid**

  - **Low Yield Examples**:
    - **7-aminoheptanoic acid** *(Amino group far from the carboxyl group reduces coordination efficiency)*
    - **8-aminooctanoic acid**

  - **Note**: Unsubstituted chains allow optimal packing and interaction with the catalyst surface; distant polar groups may disrupt this interaction.

---

- **Rule 5**: **Modifiers with multiple hydroxyl groups adjacent to the carboxylic acid group result in a **high yield** due to enhanced chelation through multiple coordination sites.**

  - **Sub-structures Combined**: Carboxylic acid groups with vicinal (neighboring) hydroxyl groups.

  - **High Yield Example**:
    - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** *(Gluconic acid)*

  - **Low Yield Example**:
    - **7-hydroxyheptanoic acid** *(Hydroxyl group distant from the carboxyl group, reducing coordination potential)*

  - **Note**: The proximity of hydroxyl groups to the carboxyl enhances multidentate binding to the metal center, increasing yield.

---

- **Rule 6**: **Modifiers containing ether linkages within the aliphatic chain result in a **low yield** due to increased flexibility and decreased coordination efficiency with the catalyst.**

  - **Sub-structures Combined**: Presence of ether bonds (–O–) interrupting the aliphatic chain.

  - **Low Yield Examples**:
    - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**
    - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**

  - **Note**: Ether linkages increase conformational flexibility, potentially hindering effective alignment and coordination with the catalyst.

---

- **Rule 7**: **Modifiers that are aromatic carboxylic acids with electron-donating groups (EDGs) that lack strong coordinating ability result in a **low yield** due to decreased acidity and weakened metal coordination.**

  - **Sub-structures Combined**: Aromatic ring with carboxylic acid and EDGs like methyl or methoxy groups.

  - **Low Yield Examples**:
    - **4-methylbenzoic acid**
    - **3-(4-hydroxyphenyl)propanoic acid**

  - **High Yield Exception**:
    - **4-aminobenzoic acid** *(Despite the amino group being an EDG, it enhances yield through strong coordination with the catalyst)*

  - **Note**: EDGs reduce the electrophilicity of the carboxyl group, hindering coordination unless the substituent itself can coordinate with the metal.

---

- **Rule 8**: **Modifiers containing aldehyde or ketone groups conjugated with carboxylic acids result in a **low yield** due to potential side reactions and competition for coordination sites.**

  - **Sub-structures Combined**: Conjugated carbonyl groups (aldehydes or ketones) adjacent to carboxylic acids.

  - **Low Yield Examples**:
    - **4-formylbenzoic acid**
    - **5-formyl-2-hydroxybenzoic acid**

  - **Note**: Reactive carbonyl groups may form inactive complexes with the catalyst or undergo side reactions, reducing the effective catalyst concentration.

---

- **Rule 9**: **Modifiers that are N-acetylated amino acids or contain internal amide bonds blocking amino groups result in a **low yield** due to diminished coordination sites.**

  - **Sub-structures Combined**: N-acetyl groups or internal amide bonds in amino acids.

  - **Low Yield Examples**:
    - **(2S)-6-acetamido-2-aminohexanoic acid** *(N-Acetylated lysine)*
    - **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid**

  - **Note**: Blocking amino groups through acetylation or amidation prevents them from coordinating with the catalyst, lowering yield.

---

- **Rule 10**: **Modifiers with highly fluorinated alkyl chains result in a **low yield** due to strong electron-withdrawing effects and increased hydrophobicity, reducing effective interaction with the catalyst.**

  - **Sub-structures Combined**: Alkyl chains extensively substituted with fluorine atoms.

  - **Low Yield Examples**:
    - **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**
    - **4-[(2,2,2-trifluoroacetyl)amino]butanoic acid**

  - **Note**: Fluorination decreases electron density on coordinating atoms and can create a hydrophobic environment unfavorable for coordination and catalysis.

---

- **Rule 11**: **Modifiers containing aliphatic thiol groups (–SH) adjacent to the carboxylic acid result in a **high yield** due to strong metal–sulfur coordination; aromatic thiols may result in a **low yield** due to steric hindrance or electronic effects.**

  - **Sub-structures Combined**: Thiol groups in proximity to carboxylic acids, differentiating between aliphatic and aromatic contexts.

  - **High Yield Example**:
    - **3-sulfanylpropanoic acid** *(Mercaptopropionic acid)*

  - **Low Yield Example**:
    - **4-sulfanylbenzoic acid**

  - **Note**: Aliphatic thiols effectively coordinate with metal centers; aromatic thiols may not due to resonance stabilization and steric factors.

---

- **Rule 12**: **Modifiers with bulky, hydrophobic substituents lacking coordinating groups result in a **low yield** due to steric hindrance and poor interaction with the catalyst's active sites.**

  - **Sub-structures Combined**: Bulky hydrophobic groups (e.g., phenyl rings, long alkyl chains) without additional coordinating functionality.

  - **Low Yield Examples**:
    - **(2S)-2-amino-3-phenylpropanoic acid** *(Phenylalanine)*
    - **8-aminooctanoic acid**

  - **Note**: These substituents can impede access to the catalyst and reduce effective coordination.

---

- **Rule 13**: **Modifiers containing multiple coordinating groups (e.g., amino, hydroxyl) in proximity to the carboxylic acid enhance **high yield** through chelation and stronger binding to the catalyst.**

  - **Sub-structures Combined**: Presence of two or more coordinating groups near the carboxyl function.

  - **High Yield Examples**:
    - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** *(Gluconic acid)*
    - **(2S)-2-aminobutanedioic acid** *(Aspartic acid)*

  - **Note**: Multidentate ligands form more stable complexes with metal centers, enhancing catalytic efficiency.

---

- **Rule 14**: **Modifiers with thioether groups (–S–) in the side chain result in a **low yield** due to weaker coordination compared to thiols and possible steric hindrance.**

  - **Sub-structures Combined**: Thioether linkages within the molecule, especially when distant from the carboxyl group.

  - **Low Yield Example**:
    - **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid**

  - **Note**: Thioethers are less nucleophilic than thiols and provide weaker coordination to metal centers.

---

- **Rule 15**: **Modifiers with substituted aromatic rings containing coordinating heteroatoms (e.g., nitrogen, oxygen) result in a **high yield**, especially when these atoms are positioned to effectively interact with the catalyst.**

  - **Sub-structures Combined**: Aromatic rings with heteroatom substituents capable of coordination.

  - **High Yield Examples**:
    - **4-aminobenzoic acid**
    - **2-oxo-1H-pyridine-4-carboxylic acid**

  - **Low Yield Exception**:
    - **5-formyl-2-hydroxybenzoic acid** *(Despite the presence of a hydroxyl group, the formyl group may interfere with coordination)*

  - **Note**: The presence and position of heteroatoms are critical; they must be accessible and not hindered by other groups.

---

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
1,0,0,0,1,0,0,0,0,0,0,0,1,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0
1,0,0,0,1,0,0,0,0,0,0,0,1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,1,0,0,0,0,0,0,0,1,0,0
0,0,1,0,0,0,0,0,0,0,0,0,0,0,1
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0,0,0,1
1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0
1,0,1,0,0,0,0,0,0,0,0,0,1,0,0
0,0,1,0,0,0,0,0,0,0,0,0,0,0,1
0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
0,0,0,0,1,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0,0,0,1
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,-1,0,0,0,1,-1,0
0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,1,0,0,0,-1,0,0,0,1,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,-1,0,0,1,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,1,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,1,0,0
1,0,0,0,0,0,0,0,-1,0,0,0,1,0,0
0,0,0,0,0,0,0,0,0,0,0,0,1,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6; Test Accuracy: 1.0
    Train Support: 0.11428571428571428; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 1.9444444444444446; Test Lift: NONE
    Train Leverage: 0.05551020408163266; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and substructures
    
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1]'
    
    # Amino group (-NH2 or -NH-)
    amino_group = '[NX3;H2,H1]'
    
    # Electron-withdrawing groups (EWGs) on aromatic ring
    ewgs = ['[c][F,Cl,Br,I]', '[c][NX3](=O)=O', '[c][CX4](F)(F)F']
    
    # Electron-donating groups (EDGs) on aromatic ring
    edgs = ['[c][CH3]', '[c][OX2H]', '[c][OX2][CH3]', '[c][NX3;H2,H1][#6]']
    
    # Aromatic ring with carboxylic acid
    aromatic_carboxylic_acid = '[c][CX3](=O)[OX1H0-,OX2H1]'
    
    # Heterocyclic nitrogen rings with carboxylic acid group
    heterocyclic_nitrogen_ring = '[n,o,s][c][c][c][CX3](=O)[OX1H0-,OX2H1]'
    
    # Aliphatic chain carboxylic acids
    aliphatic_carboxylic_acid = '[C][CX3](=O)[OX1H0-,OX2H1]'
    
    # Hydroxyl group (-OH)
    hydroxyl_group = '[OX2H]'
    
    # Ether linkage (-O-)
    ether_linkage = '[C][OX2][C]'
    
    # Thiol group (-SH)
    thiol_group = '[SX2H]'
    
    # Thioether group (-S-)
    thioether_group = '[C][SX2][C]'
    
    # Aldehyde or ketone conjugated with carboxylic acid
    conjugated_carbonyl = '[CX3](=O)[CX3](=O)[OX1H0-,OX2H1]'
    
    # N-acetylated amino group
    n_acetylated_amino = '[NX3][CX3](=O)'
    
    # Fluorinated alkyl chains
    fluorinated_alkyl_chain = '[CX4][F,Cl,Br,I]'
    
    # Bulky hydrophobic groups without coordinating functionality
    bulky_hydrophobic_group = '[C](C)(C)C'
    
    # Substituted aromatic rings with coordinating heteroatoms
    substituted_aromatic_with_heteroatom = '[c][n,o,s]'
    
    # Compile SMARTS patterns
    pattern_dict = {
        'carboxylic_acid': Chem.MolFromSmarts(carboxylic_acid),
        'amino_group': Chem.MolFromSmarts(amino_group),
        'aromatic_carboxylic_acid': Chem.MolFromSmarts(aromatic_carboxylic_acid),
        'aliphatic_carboxylic_acid': Chem.MolFromSmarts(aliphatic_carboxylic_acid),
        'hydroxyl_group': Chem.MolFromSmarts(hydroxyl_group),
        'ether_linkage': Chem.MolFromSmarts(ether_linkage),
        'thiol_group': Chem.MolFromSmarts(thiol_group),
        'thioether_group': Chem.MolFromSmarts(thioether_group),
        'conjugated_carbonyl': Chem.MolFromSmarts(conjugated_carbonyl),
        'n_acetylated_amino': Chem.MolFromSmarts(n_acetylated_amino),
        'bulky_hydrophobic_group': Chem.MolFromSmarts(bulky_hydrophobic_group),
        'substituted_aromatic_with_heteroatom': Chem.MolFromSmarts(substituted_aromatic_with_heteroatom),
    }
    
    # Compile EWG and EDG patterns
    ewg_patterns = [Chem.MolFromSmarts(p) for p in ewgs]
    edg_patterns = [Chem.MolFromSmarts(p) for p in edgs]
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'High yield: Modifiers containing both a carboxylic acid group and an amino group in close proximity.',
            'patterns': [pattern_dict['carboxylic_acid'], pattern_dict['amino_group']],
            'proximity': True,
            'prediction': 1,
        },
        {
            'number': 2,
            'description': 'High yield: Aromatic carboxylic acids with electron-withdrawing groups (EWGs) on the aromatic ring.',
            'patterns': [pattern_dict['aromatic_carboxylic_acid']],
            'sub_patterns': ewg_patterns,
            'prediction': 1,
        },
        {
            'number': 3,
            'description': 'High yield: Heterocyclic nitrogen rings adjacent to carboxylic acid groups.',
            'patterns': [pattern_dict['carboxylic_acid'], pattern_dict['substituted_aromatic_with_heteroatom']],
            'prediction': 1,
        },
        {
            'number': 4,
            'description': 'High yield: Straight-chain aliphatic carboxylic acids without additional functional groups.',
            'patterns': [pattern_dict['aliphatic_carboxylic_acid']],
            'exclude_patterns': [pattern_dict['hydroxyl_group'], pattern_dict['amino_group'], pattern_dict['ether_linkage']],
            'prediction': 1,
        },
        {
            'number': 5,
            'description': 'High yield: Modifiers with multiple hydroxyl groups adjacent to the carboxylic acid group.',
            'patterns': [pattern_dict['carboxylic_acid']],
            'count_pattern': pattern_dict['hydroxyl_group'],
            'min_count': 2,
            'adjacent': True,
            'prediction': 1,
        },
        {
            'number': 6,
            'description': 'Low yield: Modifiers containing ether linkages within the aliphatic chain.',
            'patterns': [pattern_dict['ether_linkage']],
            'prediction': -1,
        },
        {
            'number': 7,
            'description': 'Low yield: Aromatic carboxylic acids with electron-donating groups (EDGs) that lack strong coordinating ability.',
            'patterns': [pattern_dict['aromatic_carboxylic_acid']],
            'sub_patterns': edg_patterns,
            'exclude_patterns': [pattern_dict['amino_group']],
            'prediction': -1,
        },
        {
            'number': 8,
            'description': 'Low yield: Modifiers containing aldehyde or ketone groups conjugated with carboxylic acids.',
            'patterns': [pattern_dict['conjugated_carbonyl']],
            'prediction': -1,
        },
        {
            'number': 9,
            'description': 'Low yield: Modifiers that are N-acetylated amino acids or contain internal amide bonds blocking amino groups.',
            'patterns': [pattern_dict['n_acetylated_amino']],
            'prediction': -1,
        },
        {
            'number': 10,
            'description': 'Low yield: Modifiers with highly fluorinated alkyl chains.',
            'patterns': [Chem.MolFromSmarts('[CX4][F,Cl,Br,I]')],
            'prediction': -1,
        },
        {
            'number': 11,
            'description': 'High yield: Modifiers containing aliphatic thiol groups adjacent to the carboxylic acid.',
            'patterns': [pattern_dict['carboxylic_acid'], pattern_dict['thiol_group']],
            'proximity': True,
            'prediction': 1,
        },
        {
            'number': 12,
            'description': 'Low yield: Modifiers with bulky, hydrophobic substituents lacking coordinating groups.',
            'patterns': [pattern_dict['bulky_hydrophobic_group']],
            'exclude_patterns': [pattern_dict['amino_group'], pattern_dict['hydroxyl_group'], pattern_dict['thiol_group']],
            'prediction': -1,
        },
        {
            'number': 13,
            'description': 'High yield: Modifiers containing multiple coordinating groups near the carboxylic acid.',
            'patterns': [pattern_dict['carboxylic_acid'], pattern_dict['amino_group'], pattern_dict['hydroxyl_group']],
            'prediction': 1,
        },
        {
            'number': 14,
            'description': 'Low yield: Modifiers with thioether groups in the side chain.',
            'patterns': [pattern_dict['thioether_group']],
            'prediction': -1,
        },
        {
            'number': 15,
            'description': 'High yield: Substituted aromatic rings containing coordinating heteroatoms.',
            'patterns': [pattern_dict['aromatic_carboxylic_acid'], pattern_dict['substituted_aromatic_with_heteroatom']],
            'prediction': 1,
        },
    ]
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check patterns
                for pat in rule.get('patterns', []):
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Check sub-patterns (e.g., EWGs or EDGs on aromatic ring)
                if 'sub_patterns' in rule:
                    sub_match = False
                    for sub_pat in rule['sub_patterns']:
                        if mol.HasSubstructMatch(sub_pat):
                            sub_match = True
                            break
                    if not sub_match:
                        match = False
                if not match:
                    row.append(0)
                    continue
                # Check exclude patterns
                if 'exclude_patterns' in rule:
                    for excl_pat in rule['exclude_patterns']:
                        if mol.HasSubstructMatch(excl_pat):
                            match = False
                            break
                if not match:
                    row.append(0)
                    continue
                # Check proximity if required
                if rule.get('proximity', False):
                    # Implement proximity check between groups
                    matches1 = mol.GetSubstructMatches(rule['patterns'][0])
                    matches2 = mol.GetSubstructMatches(rule['patterns'][1])
                    proximity_match = False
                    for m1 in matches1:
                        for m2 in matches2:
                            path_length = Chem.GetShortestPath(mol, m1[0], m2[0])
                            if len(path_length) <= 4:  # Adjust bond distance as needed
                                proximity_match = True
                                break
                        if proximity_match:
                            break
                    if not proximity_match:
                        match = False
                if not match:
                    row.append(0)
                    continue
                # Count pattern occurrences if required
                if 'count_pattern' in rule and 'min_count' in rule:
                    count = len(mol.GetSubstructMatches(rule['count_pattern']))
                    if count < rule['min_count']:
                        match = False
                if not match:
                    row.append(0)
                    continue
                # If all checks passed
                row.append(rule['prediction'])
            except Exception:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

---

**Rule 1**: **Modifiers that are α-amino acids with additional carboxylic acid groups (acidic side chains) result in a **high yield**; α-amino acids with neutral or basic side chains result in a **low yield**.**

- **Substructures Combined**: α-Amino acids with side-chain carboxylic acid groups.

- **High Yield Examples**:
  - **(2S)-2-aminobutanedioic acid** *(Aspartic acid)*
  - **(2S)-2-aminopentanedioic acid** *(Glutamic acid)*

- **Low Yield Examples**:
  - **(2S)-2-amino-3-phenylpropanoic acid** *(Phenylalanine)*
  - **(2S)-6-acetamido-2-aminohexanoic acid** *(Acetylated lysine)*

- **Note**: The extra carboxylic acid group enhances metal coordination through chelation, improving the yield. Neutral or basic side chains lack this feature, resulting in a lower yield.

---

**Rule 2**: **Aromatic carboxylic acids with electron-withdrawing substituents (EWGs) on the ring result in a **high yield**; those with electron-donating substituents (EDGs) result in a **low yield**.**

- **Substructures Combined**: Aromatic rings with carboxylic acid groups and substituents that are EWGs (e.g., nitro, halogens) vs. EDGs (e.g., methyl, methoxy).

- **High Yield Examples**:
  - **4-nitrobenzoic acid** *(Nitro group as a strong EWG)*
  - **4-(bromomethyl)benzoic acid** *(Bromomethyl group as an EWG)*

- **Low Yield Examples**:
  - **4-methylbenzoic acid** *(Methyl group as an EDG)*
  - **3-(4-hydroxyphenyl)propanoic acid** *(Hydroxy group as an EDG)*

- **Exceptions**:
  - **4-aminobenzoic acid** *(Amino group as an EDG but forms additional coordination bond)*

- **Note**: EWGs increase acidity and enhance metal coordination. EDGs decrease acidity, reducing coordination ability. Amino groups, while EDGs, can coordinate via the lone pair on nitrogen.

---

**Rule 3**: **Modifiers that are aromatic carboxylic acids containing nitrogen heterocycles result in a **high yield** due to additional coordination via the nitrogen atom.**

- **Substructures Combined**: Aromatic carboxylic acids with nitrogen-containing heterocycles (e.g., pyridine, pyrazole rings).

- **High Yield Examples**:
  - **Pyridine-3-carboxylic acid** *(Nicotinic acid)*
  - **2-oxo-1H-pyridine-4-carboxylic acid**
  - **1H-pyrazole-4-carboxylic acid**

- **Low Yield Example**:
  - **4-pyridin-4-ylbenzoic acid** *(Steric hindrance from biaryl structure)*

- **Note**: Nitrogen heterocycles provide additional coordination sites. However, steric hindrance from bulky structures can impede coordination.

---

**Rule 4**: **Modifiers with aliphatic thiol groups (–SH) adjacent to the carboxylic acid result in a **high yield**; those with thiol groups on aromatic rings result in a **low yield**.**

- **Substructures Combined**: Thiol groups adjacent to carboxylic acids in aliphatic vs. aromatic settings.

- **High Yield Example**:
  - **3-sulfanylpropanoic acid**

- **Low Yield Example**:
  - **4-sulfanylbenzoic acid**

- **Note**: Aliphatic thiols are more reactive and accessible for metal coordination. Aromatic thiols are less effective due to resonance stabilization and steric factors.

---

**Rule 5**: **Modifiers with aliphatic carboxylic acids having adjacent hydroxyl groups result in a **high yield**; those with hydroxyl groups distant from the carboxylic acid result in a **low yield**.**

- **Substructures Combined**: Carboxylic acids with neighboring hydroxyl groups.

- **High Yield Examples**:
  - **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** *(Gluconic acid)*
  - **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid**

- **Low Yield Example**:
  - **7-hydroxyheptanoic acid**

- **Note**: Adjacent hydroxyl groups enhance chelation with metal centers. Distant hydroxyls are less effective due to decreased chelation ability.

---

**Rule 6**: **Modifiers with aliphatic carboxylic acids having amino groups within three carbons of the carboxylic acid result in a **high yield**; those with amino groups more distant result in a **low yield**.**

- **Substructures Combined**: Proximity of amino groups to the carboxylic acid.

- **High Yield Examples**:
  - **5-aminopentanoic acid** *(Amino group close to the carboxyl)*
  - **(2S)-2-aminobutanedioic acid** *(Aspartic acid)*

- **Low Yield Examples**:
  - **7-aminoheptanoic acid**
  - **8-aminooctanoic acid**

- **Note**: Closer amino groups enhance chelation. Distant amino groups have reduced coordinating ability.

---

**Rule 7**: **Modifiers that are simple aliphatic carboxylic acids without additional functional groups result in a **high yield** due to minimal steric hindrance and effective coordination.**

- **Substructures Combined**: Straight-chain aliphatic carboxylic acids.

- **High Yield Example**:
  - **Octanoic acid**

- **Note**: Simplicity allows unobstructed interaction with the catalyst's metal centers.

---

**Rule 8**: **Modifiers with flexible ether linkages within their backbone result in a **low yield** due to decreased coordination efficiency from increased conformational freedom.**

- **Substructures Combined**: Presence of ether linkages (–O–) in the molecular backbone.

- **Low Yield Examples**:
  - **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**
  - **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**

- **Note**: Ether linkages increase molecular flexibility, hindering optimal alignment for effective metal coordination.

---

**Rule 9**: **Modifiers with highly fluorinated aliphatic chains result in a **low yield** due to decreased electron density on coordinating atoms and increased hydrophobicity.**

- **Substructures Combined**: Aliphatic chains extensively substituted with fluorine atoms.

- **Low Yield Examples**:
  - **2,2,3,3,4,4,5,5,5-Nonafluoropentanoic acid**
  - **4-[(2,2,2-trifluoroacetyl)amino]butanoic acid**

- **Note**: Fluorine's high electronegativity withdraws electron density, weakening coordination bonds. Increased hydrophobicity can also impede interaction with the catalyst.

---

**Rule 10**: **Modifiers containing reactive carbonyl groups (aldehydes or ketones) adjacent to the carboxylic acid result in a **low yield** due to potential side reactions and reduced coordination ability.**

- **Substructures Combined**: Presence of aldehyde or ketone groups near the carboxylic acid.

- **Low Yield Examples**:
  - **4-formylbenzoic acid**
  - **5-formyl-2-hydroxybenzoic acid**
  - **4-oxoheptanedioic acid**

- **Note**: Reactive carbonyl groups can participate in undesired side reactions or interfere with metal coordination.

---

**Rule 11**: **Modifiers with acylated amino groups result in a **low yield** due to blocking of potential coordination sites necessary for effective metal binding.**

- **Substructures Combined**: Amino groups modified by acylation (e.g., acetylation).

- **Low Yield Example**:
  - **(2S)-6-acetamido-2-aminohexanoic acid**

- **Note**: Acylation reduces the availability of lone pair electrons on nitrogen for coordination with metal centers.

---

**Rule 12**: **Modifiers with aromatic carboxylic acids possessing amino groups result in a **high yield** due to additional coordination via the amino group.**

- **Substructures Combined**: Aromatic carboxylic acids with amino substituents.

- **High Yield Example**:
  - **4-aminobenzoic acid**

- **Low Yield Example**:
  - **(2S)-2-amino-3-phenylpropanoic acid** *(Phenylalanine)*

- **Note**: The amino group enhances metal coordination. However, if the amino group is part of a bulky side chain or sterically hindered, the yield may be reduced.

---

**Rule 13**: **Modifiers with aromatic rings directly attached to additional aromatic rings (biaryl structures) result in a **low yield** due to steric hindrance and decreased coordination efficiency.**

- **Substructures Combined**: Biaryl compounds with carboxylic acid groups.

- **Low Yield Example**:
  - **4-pyridin-4-ylbenzoic acid**

- **High Yield Exception**:
  - **4-pyridin-4-ylbutanoic acid** *(Spacer reduces steric hindrance)*

- **Note**: Directly linked aromatic rings increase steric bulk, which can impede effective interaction with the catalyst.

---

**Rule 14**: **Modifiers with fused aromatic rings containing additional oxygen functionalities adjacent to carboxylic acids result in a **high yield** due to enhanced coordination through multiple oxygen atoms.**

- **Substructures Combined**: Fused aromatic rings with carbonyl and hydroxyl groups near the carboxylic acid.

- **High Yield Example**:
  - **1,3-dioxo-2-benzofuran-5-carboxylic acid**

- **Note**: The rigid and planar structure with multiple oxygen donors facilitates effective chelation with metal centers.

---

**Rule 15**: **Modifiers with β-phenylpropanoic acid structures result in a **low yield** due to steric hindrance affecting coordination with the catalyst.**

- **Substructures Combined**: Aromatic ring attached to a propanoic acid side chain.

- **Low Yield Example**:
  - **3-(4-hydroxyphenyl)propanoic acid**

- **Note**: The extra methylene group between the aromatic ring and carboxylic acid increases steric hindrance, reducing coordination efficiency.

---

**End of Rules**

---

These rules illustrate how specific combinations of functional groups and structural features in molecular modifiers influence the yield of the radical-mediated remote δ-C(sp³)–H bond functionalization reaction. By considering electronic effects (such as electron-withdrawing or donating substituents), steric factors (such as steric hindrance from bulky groups), and the ability of functional groups to coordinate with metal centers (through chelation or additional coordination sites), the rules provide insights into designing modifiers that optimize the reaction yield.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,1,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,1,1,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
1,0,1,0,0,0,0,0,0,0,0,0,0,0,0
0,1,1,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,1,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,-1,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6285714285714286; Test Accuracy: 0.0
    Train Support: 0.12857142857142856; Test Support: 0.0
    Train Confidence: 0.9166666666666667; Test Confidence: 0.5
    Train Lift: 1.8300653594771243; Test Lift: NONE
    Train Leverage: 0.05755102040816326; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and substructures
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX2H1]'
    # Amino acid backbone (alpha-amino acid)
    alpha_amino_acid = '[NX3][CX4H]([*])[CX3](=O)[OX1H0-,OX2H1]'
    # Additional carboxylic acid group in side chain
    side_chain_carboxylic_acid = '[CX3](=O)[OX2H1]'
    
    # Electron-withdrawing groups (EWGs) on aromatic ring
    ewg_on_aromatic = '[c][NX3+](=O)[O-]', '[c][F,Cl,Br,I]', '[c][C](=O)[O;H1,-]'
    # Electron-donating groups (EDGs) on aromatic ring
    edg_on_aromatic = '[c][OX2H]', '[c][OX2][#6]', '[c][NX3;H2,H1][#6]'
    
    # Nitrogen heterocycles
    nitrogen_heterocycle = '[n]'
    
    # Aliphatic thiol adjacent to carboxylic acid
    aliphatic_thiol_adjacent_carboxy = '[SX2H][CX4][CX3](=O)[OX2H1]'
    # Aromatic thiol
    aromatic_thiol = '[c][SX2H]'
    
    # Hydroxyl groups adjacent to carboxylic acid
    hydroxyl_adjacent_carboxy = '[OX2H][CX4][CX3](=O)[OX2H1]'
    # Hydroxyl groups distant from carboxylic acid
    hydroxyl_distant_carboxy = '[CX3](=O)[OX2H1]~[*]~[OX2H]'
    
    # Amino groups within three carbons of carboxylic acid
    amino_within_three_carbons = '[NX3;H2,H1][CX4,CH2][CX4,CH2][CX3](=O)[OX2H1]'
    # Amino groups distant from carboxylic acid
    amino_distant = '[NX3;H2,H1]~[*]~[*]~[*]~[CX3](=O)[OX2H1]'
    
    # Ether linkages in backbone
    ether_linkage = '[#6][OX2][#6]'
    
    # Fluorinated aliphatic chains
    fluorinated_chain = '[CX4](F)(F)(F)'
    
    # Reactive carbonyl groups adjacent to carboxylic acid
    reactive_carbonyl_adjacent_carboxy = '[CX3]=[OX1][CX3](=O)[OX2H1]'
    
    # Acylated amino groups
    acylated_amino = '[NX3][CX3](=O)[#6]'
    
    # Biaryl structures
    biaryl = '[c]-[c]-[c](=O)[OX2H1]'
    
    # Fused aromatic rings with additional oxygen functionalities
    fused_aromatic_oxygen = '[c]1[c][c][o][c][c]1[CX3](=O)[OX2H1]'
    
    # Beta-phenylpropanoic acid structures
    beta_phenylpropanoic_acid = '[c][CX4][CX2][CX3](=O)[OX2H1]'
    
    # Aromatic amino groups
    aromatic_amino = '[c][NX3;H2,H1]'
    
    # Define the rules with their associated patterns and predictions
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are α-amino acids with additional carboxylic acid groups (acidic side chains) result in a high yield; α-amino acids with neutral or basic side chains result in a low yield.',
            'high_patterns': [[alpha_amino_acid], [side_chain_carboxylic_acid]],
            'low_patterns': [[alpha_amino_acid]],
            'prediction_high': 1,
            'prediction_low': -1
        },
        {
            'number': 2,
            'description': 'Aromatic carboxylic acids with electron-withdrawing substituents (EWGs) on the ring result in a high yield; those with electron-donating substituents (EDGs) result in a low yield.',
            'high_patterns': [[carboxylic_acid], ewg_on_aromatic],
            'low_patterns': [[carboxylic_acid], edg_on_aromatic],
            'prediction_high': 1,
            'prediction_low': -1
        },
        {
            'number': 3,
            'description': 'Modifiers that are aromatic carboxylic acids containing nitrogen heterocycles result in a high yield due to additional coordination via the nitrogen atom.',
            'high_patterns': [[carboxylic_acid], [nitrogen_heterocycle]],
            'prediction_high': 1
        },
        {
            'number': 4,
            'description': 'Modifiers with aliphatic thiol groups (–SH) adjacent to the carboxylic acid result in a high yield; those with thiol groups on aromatic rings result in a low yield.',
            'high_patterns': [[aliphatic_thiol_adjacent_carboxy]],
            'low_patterns': [[aromatic_thiol]],
            'prediction_high': 1,
            'prediction_low': -1
        },
        {
            'number': 5,
            'description': 'Modifiers with aliphatic carboxylic acids having adjacent hydroxyl groups result in a high yield; those with hydroxyl groups distant from the carboxylic acid result in a low yield.',
            'high_patterns': [[hydroxyl_adjacent_carboxy]],
            'low_patterns': [[hydroxyl_distant_carboxy]],
            'prediction_high': 1,
            'prediction_low': -1
        },
        {
            'number': 6,
            'description': 'Modifiers with aliphatic carboxylic acids having amino groups within three carbons of the carboxylic acid result in a high yield; those with amino groups more distant result in a low yield.',
            'high_patterns': [[amino_within_three_carbons]],
            'low_patterns': [[amino_distant]],
            'prediction_high': 1,
            'prediction_low': -1
        },
        {
            'number': 7,
            'description': 'Modifiers that are simple aliphatic carboxylic acids without additional functional groups result in a high yield due to minimal steric hindrance and effective coordination.',
            'high_patterns': [[carboxylic_acid]],
            'exclude_patterns': [
                [alpha_amino_acid], [nitrogen_heterocycle], [aliphatic_thiol_adjacent_carboxy], [hydroxyl_adjacent_carboxy], [amino_within_three_carbons], [ether_linkage], [fluorinated_chain], [reactive_carbonyl_adjacent_carboxy], [acylated_amino], [aromatic_amino]
            ],
            'prediction_high': 1
        },
        {
            'number': 8,
            'description': 'Modifiers with flexible ether linkages within their backbone result in a low yield due to decreased coordination efficiency from increased conformational freedom.',
            'low_patterns': [[ether_linkage], [carboxylic_acid]],
            'prediction_low': -1
        },
        {
            'number': 9,
            'description': 'Modifiers with highly fluorinated aliphatic chains result in a low yield due to decreased electron density on coordinating atoms and increased hydrophobicity.',
            'low_patterns': [[fluorinated_chain], [carboxylic_acid]],
            'prediction_low': -1
        },
        {
            'number': 10,
            'description': 'Modifiers containing reactive carbonyl groups (aldehydes or ketones) adjacent to the carboxylic acid result in a low yield due to potential side reactions and reduced coordination ability.',
            'low_patterns': [[reactive_carbonyl_adjacent_carboxy]],
            'prediction_low': -1
        },
        {
            'number': 11,
            'description': 'Modifiers with acylated amino groups result in a low yield due to blocking of potential coordination sites necessary for effective metal binding.',
            'low_patterns': [[acylated_amino], [carboxylic_acid]],
            'prediction_low': -1
        },
        {
            'number': 12,
            'description': 'Modifiers with aromatic carboxylic acids possessing amino groups result in a high yield due to additional coordination via the amino group.',
            'high_patterns': [[aromatic_amino], [carboxylic_acid]],
            'prediction_high': 1
        },
        {
            'number': 13,
            'description': 'Modifiers with aromatic rings directly attached to additional aromatic rings (biaryl structures) result in a low yield due to steric hindrance and decreased coordination efficiency.',
            'low_patterns': [[biaryl]],
            'prediction_low': -1
        },
        {
            'number': 14,
            'description': 'Modifiers with fused aromatic rings containing additional oxygen functionalities adjacent to carboxylic acids result in a high yield due to enhanced coordination through multiple oxygen atoms.',
            'high_patterns': [[fused_aromatic_oxygen]],
            'prediction_high': 1
        },
        {
            'number': 15,
            'description': 'Modifiers with β-phenylpropanoic acid structures result in a low yield due to steric hindrance affecting coordination with the catalyst.',
            'low_patterns': [[beta_phenylpropanoic_acid]],
            'prediction_low': -1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        # Compile high yield patterns
        compiled_high_patterns = []
        for group in rule.get('high_patterns', []):
            compiled_group = [Chem.MolFromSmarts(p) for p in group]
            compiled_high_patterns.append(compiled_group)
        rule['compiled_high_patterns'] = compiled_high_patterns
        # Compile low yield patterns
        compiled_low_patterns = []
        for group in rule.get('low_patterns', []):
            compiled_group = [Chem.MolFromSmarts(p) for p in group]
            compiled_low_patterns.append(compiled_group)
        rule['compiled_low_patterns'] = compiled_low_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for group in rule['exclude_patterns']:
                compiled_group = [Chem.MolFromSmarts(p) for p in group]
                compiled_excludes.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_excludes
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = False
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if match == False:
                            break
                    else:
                        match = True
                else:
                    match = True
                if match:
                    # Check high yield patterns
                    high_match = True
                    for compiled_group in rule['compiled_high_patterns']:
                        group_match = False
                        for pat in compiled_group:
                            if mol.HasSubstructMatch(pat):
                                group_match = True
                                break
                        if not group_match:
                            high_match = False
                            break
                    # Check low yield patterns
                    low_match = True
                    for compiled_group in rule['compiled_low_patterns']:
                        group_match = False
                        for pat in compiled_group:
                            if mol.HasSubstructMatch(pat):
                                group_match = True
                                break
                        if not group_match:
                            low_match = False
                            break
                    if high_match and 'prediction_high' in rule:
                        row.append(rule['prediction_high'])
                    elif low_match and 'prediction_low' in rule:
                        row.append(rule['prediction_low'])
                    else:
                        row.append(0)
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df
--------------------------------------------------