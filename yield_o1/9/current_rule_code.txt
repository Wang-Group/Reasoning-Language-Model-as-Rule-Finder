def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and structures according to the rules

    # Patterns for common functional groups
    carboxylic_acid = '[CX3](=O)[OX2H1]'  # Carboxylic acid group (-COOH)
    amino_group = '[NX3;H2,H1;!$([N][C,S]);!$([N]=[C,S,N,O])]'  # Primary or secondary amine
    alpha_amino_acid = '[NX3;H2][CX4H]([#6])[CX3](=O)[OX2H1]'  # Alpha amino acid backbone
    carboxylic_acid_any = '[CX3](=O)[OX1H0-,OX2H1]'  # Carboxylic acid group (includes deprotonated)
    hydroxyl_group = '[OX2H]'  # Hydroxyl group (-OH)
    thiol_group = '[SX2H]'  # Thiol group (-SH)
    ether_linkage = '[#6][OX2][#6]'  # Ether linkage (-O-)
    aldehyde_group = '[CX3H1](=O)[#6]'  # Aldehyde group (-CHO)
    nitro_group = '[NX3](=O)=O'  # Nitro group (-NO2)
    halogen = '[F,Cl,Br,I]'  # Halogen atoms
    aromatic_ring = '[c]'  # Aromatic carbon
    aliphatic_chain_6_8 = '[C;X4][C;X4][C;X4][C;X4][C;X4][C;X4]'  # Aliphatic chain of 6 carbons
    perfluoroalkyl = '[CX4]([F,Cl,Br,I])[F,Cl,Br,I][F,Cl,Br,I]'  # Trifluoromethyl or similar

    # Initialize the list of rules
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are Î±-amino dicarboxylic acids yield high yields.',
            'patterns': [
                alpha_amino_acid,  # Alpha amino acid backbone
            ],
            'counts': [1, 2],  # At least 1 alpha amino acid pattern, at least 2 carboxylic acids
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Para-substituted benzoic acids with electron-withdrawing para-substituents (amino, nitro, halomethyl) yield high yields; with methyl, formyl, thiol substituents yield low yields.',
            'patterns': [
                'c1ccc([CX3](=O)[OX1H0-,OX2H1])cc1*',  # Benzoic acid
            ],
            'high_yield_substituents': [
                '[NX3;H2]',  # Amino group
                '[NX3+](=O)[O-]',  # Nitro group
                '[CH2][F,Cl,Br,I]'  # Halomethyl group
            ],
            'low_yield_substituents': [
                '[CH3]',  # Methyl group
                aldehyde_group,  # Formyl group
                thiol_group  # Thiol group
            ],
            'prediction': None  # Prediction will be set based on substituent
        },
        {
            'number': 3,
            'description': 'Modifiers with multiple adjacent hydroxyl groups (polyols) on aliphatic chains yield high yields; single or distant hydroxyl groups yield low yields.',
            'patterns': [
                hydroxyl_group,
            ],
            'adjacent_hydroxyls': True,
            'prediction': None  # Prediction will be set based on adjacency
        },
        {
            'number': 4,
            'description': 'Unsubstituted aliphatic carboxylic acids with chain lengths of 6 to 8 carbons yield high yields; introduction of polar functional groups lowers the yield.',
            'patterns': [
                carboxylic_acid_any,
                '[CCCCCC,CCCCCCC,CCCCCCCC]'  # Chains of 6-8 carbons
            ],
            'exclude_patterns': [
                amino_group,
                hydroxyl_group,
                thiol_group
            ],
            'prediction': 1
        },
        # Additional rules can be added here following the same structure
    ]

    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = [Chem.MolFromSmarts(pat) for pat in rule.get('patterns', [])]
        rule['compiled_patterns'] = compiled_patterns
        # Compile high/low yield substituents if present
        if 'high_yield_substituents' in rule:
            rule['compiled_high_yield_substituents'] = [Chem.MolFromSmarts(pat) for pat in rule['high_yield_substituents']]
        if 'low_yield_substituents' in rule:
            rule['compiled_low_yield_substituents'] = [Chem.MolFromSmarts(pat) for pat in rule['low_yield_substituents']]
        # Compile exclude patterns if present
        if 'exclude_patterns' in rule:
            rule['compiled_exclude_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule['exclude_patterns']]

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for pat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for idx, pat in enumerate(rule['compiled_patterns']):
                    matches = mol.GetSubstructMatches(pat)
                    if not matches:
                        match = False
                        break
                    if 'counts' in rule:
                        required_count = rule['counts'][idx]
                        if len(matches) < required_count:
                            match = False
                            break
                if not match:
                    row.append(0)
                    continue
                # Additional checks for specific rules
                if rule['number'] == 2:
                    # Para-substituted benzoic acid
                    match_high = False
                    match_low = False
                    for sub_pat in rule['compiled_high_yield_substituents']:
                        if mol.HasSubstructMatch(sub_pat):
                            match_high = True
                            break
                    for sub_pat in rule['compiled_low_yield_substituents']:
                        if mol.HasSubstructMatch(sub_pat):
                            match_low = True
                            break
                    if match_high:
                        row.append(1)
                    elif match_low:
                        row.append(-1)
                    else:
                        row.append(0)
                    continue
                elif rule['number'] == 3:
                    # Multiple adjacent hydroxyl groups
                    hydroxyl_matches = mol.GetSubstructMatches(rule['compiled_patterns'][0])
                    if len(hydroxyl_matches) >= 2:
                        # Check if any hydroxyl groups are adjacent
                        adjacent = False
                        for i in range(len(hydroxyl_matches)):
                            for j in range(i+1, len(hydroxyl_matches)):
                                path = Chem.GetShortestPath(mol, hydroxyl_matches[i][0], hydroxyl_matches[j][0])
                                if len(path) == 2:
                                    adjacent = True
                                    break
                            if adjacent:
                                break
                        if adjacent:
                            row.append(1)
                        else:
                            row.append(-1)
                    else:
                        row.append(-1)
                    continue
                # Default prediction
                row.append(rule['prediction'])
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df
