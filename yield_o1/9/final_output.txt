
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: **Modifiers that are amino acids with acidic side chains (containing both an amino group and two carboxylic acid groups) yield high value**. This includes amino acids like glutamic acid and aspartic acid.
  - *Examples*: (2S)-2-aminopentanedioic acid (Glutamic acid), (2S)-2-aminobutanedioic acid (Aspartic acid).
  - *Rationale*: The additional carboxylic acid groups may enhance metal coordination and catalyst stability, improving yield.

- **Rule 2**: **Modifiers with an amino group directly attached to an aromatic ring yield high value**.
  - *Examples*: 4-aminobenzoic acid (PABA), pyridine-3-carboxylic acid (Niacin).
  - *Rationale*: The amino group can act as an electron-donating group, enhancing interaction with the catalyst's metal center.

- **Rule 3**: **Modifiers containing a pyridine ring directly attached to the carboxyl group yield high value**.
  - *Examples*: Pyridine-3-carboxylic acid.
  - *Rationale*: The nitrogen in the pyridine ring can coordinate with metal centers, enhancing catalytic activity.

- **Rule 4**: **Modifiers that are long-chain aliphatic carboxylic acids (with carbon chain lengths of six or more) yield high value**.
  - *Examples*: Octanoic acid.
  - *Rationale*: Longer aliphatic chains may increase hydrophobic interactions and optimize the catalyst's microenvironment.

- **Rule 5**: **Modifiers with electron-donating groups (e.g., amino or hydroxy groups) on an aromatic ring, especially at the para position, yield high value**.
  - *Examples*: 5-(4-hydroxyphenyl)pentanoic acid.
  - *Rationale*: Electron-donating groups enhance the electron density of the aromatic ring, facilitating better catalyst interaction.

- **Rule 6**: **Modifiers with electron-withdrawing groups (e.g., nitro groups) on an aromatic ring yield high value**.
  - *Examples*: 4-nitrobenzoic acid.
  - *Rationale*: Electron-withdrawing groups can stabilize intermediate species, improving reaction yield.

- **Rule 7**: **Modifiers containing aldehyde (formyl) groups yield low value**.
  - *Examples*: 4-formylbenzoic acid, 5-formyl-2-hydroxybenzoic acid.
  - *Rationale*: Aldehyde groups may react with catalyst components, deactivating the catalyst.

- **Rule 8**: **Modifiers containing multiple fluorine atoms or perfluorinated chains yield low value**.
  - *Examples*: 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid.
  - *Rationale*: Fluorinated groups are highly electronegative, which may disrupt catalyst interactions.

- **Rule 9**: **Modifiers that are amino acids with hydrophobic aromatic side chains yield low value**.
  - *Examples*: (2S)-2-amino-3-phenylpropanoic acid (Phenylalanine).
  - *Rationale*: Hydrophobic aromatic side chains may not interact favorably with the catalyst.

- **Rule 10**: **Modifiers with amino groups located on long aliphatic chains (far from the carboxylic acid group) yield low value**.
  - *Examples*: 7-aminoheptanoic acid, 8-aminooctanoic acid.
  - *Rationale*: Distant amino groups may not effectively coordinate with the catalyst's active sites.

- **Rule 11**: **Modifiers with thiol (sulfhydryl) groups attached to an aliphatic chain yield high value**, whereas those with thiol groups attached directly to an aromatic ring yield low value.
  - *High Yield Example*: 3-sulfanylpropanoic acid.
  - *Low Yield Example*: 4-sulfanylbenzoic acid.
  - *Rationale*: Aliphatic thiols can enhance metal binding, but aromatic thiols may lead to catalyst poisoning.

- **Rule 12**: **Modifiers with ketone (carbonyl) groups on aliphatic chains yield low value**.
  - *Examples*: 4-oxoheptanedioic acid.
  - *Rationale*: Ketone groups may interfere with catalyst activity by forming undesirable complexes.

- **Rule 13**: **Modifiers containing nitrogen heterocycles (e.g., pyrazole, indole) directly attached to carboxyl groups yield high value**.
  - *Examples*: 1H-pyrazole-4-carboxylic acid, (2R)-2-amino-3-(1H-indol-3-yl)propanoic acid (Tryptophan).
  - *Rationale*: Nitrogen heterocycles can coordinate with metal centers, enhancing catalytic efficiency.

- **Rule 14**: **Modifiers with ether linkages in aliphatic chains yield variable results and cannot be reliably predicted by this rule set**.
  - *Examples*: 2-[2-(2-methoxyethoxy)ethoxy]acetic acid (Low Yield), 2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid (High Yield).
  - *Rationale*: Ether linkages may or may not favorably interact with the catalyst depending on the overall structure.

- **Rule 15**: **Modifiers with methoxy groups on aromatic rings yield high value when combined with additional functional groups**.
  - *Examples*: 4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid.
  - *Rationale*: Methoxy groups are electron-donating and can enhance aromatic ring interactions with the catalyst.

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,1
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6571428571428571; Test Accuracy: 0.0
    Train Support: 0.044897959183673466; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 2.0016339869281046; Test Lift: NONE
    Train Leverage: 0.022390670553935864; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Initialize the list to store the results
    results = []
    
    # Define the patterns for each rule, correcting as per suggestions
    
    # Rule 1: Amino acids with acidic side chains (amino group and two carboxylic acid groups)
    amino_group = '[NX3;H2,H1][CX4]'
    carboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1]'
    
    # Rule 2: Amino group directly attached to aromatic ring
    aromatic_amino_group = '[c][NX3;H2,H1]'
    
    # Rule 3: Pyridine ring directly attached to the carboxyl group
    pyridine_carboxylic_acid = '[n]1ccccc1C(=O)[O;H,-]'
    
    # Rule 4: Long-chain aliphatic carboxylic acids (with carbon chain lengths of six or more)
    # Adjust pattern as per Suggestion 1
    long_chain_carboxylic_acid = '[CH3][CH2]{5,}[CX3](=O)[OX2H1]'
    
    # Rule 5: Electron-donating groups (e.g., amino or hydroxy groups) on an aromatic ring
    # Adjust patterns as per Suggestion 2
    edg_on_aromatic = [
        '[c][OX2H]',
        '[c][NX3;H2,H1]',
        '[c][OX2][CH3]',
        '[c][NX3H0]([CH3])[CH3]',
        '[c][c][OX2H]',
        '[c][c][NX3;H2,H1]',
        '[c][c][OX2][CH3]',
        '[c][c][NX3H0]([CH3])[CH3]'
    ]
    
    # Rule 6: Electron-withdrawing groups (e.g., nitro groups) on an aromatic ring
    # Adjust patterns as per Suggestion 3
    ewg_on_aromatic = [
        '[c][CX3](=O)[#6]',
        '[c][CX2]#N',
        '[c][SX4](=O)(=O)[#6]',
        '[c][NX3](=O)=O',
        '[c][F,Cl,Br,I]'
    ]
    
    # Rule 7: Aldehyde groups
    aldehyde = '[#6][CX3H1](=O)'
    
    # Rule 8: Multiple fluorine atoms or perfluorinated chains
    perfluorinated_chain = '[CX4]([F,Cl,Br,I])([F,Cl,Br,I])[F,Cl,Br,I]'
    
    # Rule 9: Amino acids with hydrophobic aromatic side chains
    # Adjust pattern as per Suggestion 4
    aromatic_amino_acid = '[NX3;H2,H1][CX4][CX4][c]'
    
    # Rule 10: Amino groups on long aliphatic chains far from carboxylic acid
    distant_amino_group = '[NX3;H2,H1][CH2]{3,}[CX3](=O)[OX2H1]'
    
    # Rule 11: Aliphatic thiol yields high, aromatic thiol yields low
    aliphatic_thiol = '[!c][SX2H]'
    aromatic_thiol = '[c][SX2H]'
    
    # Rule 12: Ketone groups on aliphatic chains
    aliphatic_ketone = '[CX4][CX3](=O)[CX4]'
    
    # Rule 13: Nitrogen heterocycles attached to carboxyl groups
    nitrogen_heterocycle_carboxylic_acid = '[n][#6]?[CX3](=O)[OX2H1]'
    
    # Rule 14: Cannot be predicted, skip patterns
    
    # Rule 15: Methoxy groups on aromatic rings with additional functional groups
    methoxy_on_aromatic = '[c][OX2][CH3]'
    
    # Now, define the rules as list of dictionaries
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are amino acids with acidic side chains (containing both an amino group and two carboxylic acid groups) yield high value.',
            'patterns': [
                {'pattern': amino_group, 'count': 1},
                {'pattern': carboxylic_acid, 'count': 2}
            ],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers with an amino group directly attached to an aromatic ring yield high value.',
            'patterns': [
                {'pattern': aromatic_amino_group, 'count': 1}
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers containing a pyridine ring directly attached to the carboxyl group yield high value.',
            'patterns': [
                {'pattern': pyridine_carboxylic_acid, 'count':1}
            ],
            'prediction':1
        },
        {
            'number': 4,
            'description': 'Modifiers that are long-chain aliphatic carboxylic acids (with carbon chain lengths of six or more) yield high value.',
            'patterns': [
                {'pattern': long_chain_carboxylic_acid, 'count':1}
            ],
            'prediction':1
        },
        {
            'number':5,
            'description':'Modifiers with electron-donating groups (e.g., amino or hydroxy groups) on an aromatic ring yield high value.',
            'patterns':[ {'pattern':p,'count':1} for p in edg_on_aromatic],
            'prediction':1
        },
        {
            'number':6,
            'description':'Modifiers with electron-withdrawing groups (e.g., nitro groups) on an aromatic ring yield high value.',
            'patterns':[ {'pattern':p,'count':1} for p in ewg_on_aromatic],
            'prediction':1
        },
        {
            'number':7,
            'description':'Modifiers containing aldehyde (formyl) groups yield low value.',
            'patterns':[ {'pattern':aldehyde, 'count':1} ],
            'prediction':-1
        },
        {
            'number':8,
            'description':'Modifiers containing multiple fluorine atoms or perfluorinated chains yield low value.',
            'patterns':[ {'pattern':perfluorinated_chain, 'count':1} ],
            'prediction':-1
        },
        {
            'number':9,
            'description':'Modifiers that are amino acids with hydrophobic aromatic side chains yield low value.',
            'patterns':[ {'pattern':aromatic_amino_acid, 'count':1} ],
            'prediction':-1
        },
        {
            'number':10,
            'description':'Modifiers with amino groups located on long aliphatic chains (far from the carboxylic acid group) yield low value.',
            'patterns':[ {'pattern':distant_amino_group, 'count':1} ],
            'prediction':-1
        },
        {
            'number':11,
            'description':'Modifiers with thiol (sulfhydryl) groups attached to an aliphatic chain yield high value, whereas those with thiol groups attached directly to an aromatic ring yield low value.',
            'patterns':[ {'pattern':aliphatic_thiol, 'count':1} ],
            'prediction':1,
            'alternate_patterns':[ {'pattern':aromatic_thiol, 'count':1} ],
            'alternate_prediction':-1
        },
        {
            'number':12,
            'description':'Modifiers with ketone (carbonyl) groups on aliphatic chains yield low value.',
            'patterns':[ {'pattern':aliphatic_ketone, 'count':1} ],
            'prediction':-1
        },
        {
            'number':13,
            'description':'Modifiers containing nitrogen heterocycles directly attached to carboxyl groups yield high value.',
            'patterns':[ {'pattern':nitrogen_heterocycle_carboxylic_acid, 'count':1} ],
            'prediction':1
        },
        {
            'number':14,
            'description':'Modifiers with ether linkages in aliphatic chains yield variable results and cannot be reliably predicted by this rule set.',
            'patterns':[],
            'prediction':0  # Cannot be predicted
        },
        {
            'number':15,
            'description':'Modifiers with methoxy groups on aromatic rings yield high value when combined with additional functional groups.',
            'patterns':[ {'pattern':methoxy_on_aromatic, 'count':1} ],
            'prediction':1
        }
    ]
    
    # Now, compile the SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for p in rule.get('patterns', []):
            try:
                pat = Chem.MolFromSmarts(p['pattern'])
            except:
                pat = None
            if pat is not None:
                compiled_patterns.append({'pattern': pat, 'count': p['count']})
            else:
                compiled_patterns.append({'pattern': None, 'count': p['count']})
        rule['compiled_patterns'] = compiled_patterns
        
        # Compile alternate patterns if any
        compiled_alternate_patterns = []
        for p in rule.get('alternate_patterns', []):
            try:
                pat = Chem.MolFromSmarts(p['pattern'])
            except:
                pat = None
            if pat is not None:
                compiled_alternate_patterns.append({'pattern': pat, 'count': p['count']})
            else:
                compiled_alternate_patterns.append({'pattern': None, 'count': p['count']})
        rule['compiled_alternate_patterns'] = compiled_alternate_patterns
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # Molecule cannot be parsed; append zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            prediction = 0  # Default is 0
            try:
                # Check main patterns
                match = True
                for p in rule['compiled_patterns']:
                    if p['pattern'] is None:
                        match = False
                        break
                    matches = mol.GetSubstructMatches(p['pattern'])
                    if len(matches) < p['count']:
                        match = False
                        break
                if match:
                    prediction = rule['prediction']
                else:
                    # Check alternate patterns if any
                    alternate_match = False
                    for p in rule.get('compiled_alternate_patterns', []):
                        if p['pattern'] is None:
                            continue
                        matches = mol.GetSubstructMatches(p['pattern'])
                        if len(matches) >= p['count']:
                            prediction = rule['alternate_prediction']
                            alternate_match = True
                            break
                    if not alternate_match:
                        prediction = 0
                row.append(prediction)
            except Exception as e:
                # Error in processing; append 0
                row.append(0)
        results.append(row)
    # Create DataFrame
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df
--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: **Modifiers that are amino acids containing two carboxylic acid groups (dicarboxylic amino acids) yield high value.**
  - *Examples*: (2S)-2-aminopentanedioic acid (Glutamic acid), (2S)-2-aminobutanedioic acid (Aspartic acid).
  - *Rationale*: The presence of both amino and two carboxyl groups provides multiple coordination sites with the metal center, enhancing catalyst stability and reactivity.

- **Rule 2**: **Modifiers that are benzoic acids with strong electron-withdrawing groups at the para position yield high value.**
  - *Examples*: 4-nitrobenzoic acid, 4-(bromomethyl)benzoic acid.
  - *Rationale*: Electron-withdrawing groups stabilize the metal complex by delocalizing electron density, which improves catalytic activity.

- **Rule 3**: **Modifiers that are benzoic acids with an amino group at the para position yield high value if not directly connected to additional aromatic rings.**
  - *High Yield Example*: 4-aminobenzoic acid.
  - *Low Yield Example*: 4-pyridin-4-ylbenzoic acid.
  - *Rationale*: The amino group enhances coordination with the metal center, but additional aromatic rings can introduce steric hindrance or alter electronic properties adversely affecting the yield.

- **Rule 4**: **Modifiers with thiol (sulfhydryl) groups on aliphatic chains yield high value; those with thiol groups directly attached to aromatic rings yield low value.**
  - *High Yield Example*: 3-sulfanylpropanoic acid.
  - *Low Yield Example*: 4-sulfanylbenzoic acid.
  - *Rationale*: Aliphatic thiols effectively coordinate with the metal center, enhancing catalytic efficiency, whereas aromatic thiols may form strong, non-ideal interactions that deactivate the catalyst.

- **Rule 5**: **Modifiers with aldehyde (formyl) groups yield low value.**
  - *Examples*: 4-formylbenzoic acid, 5-formyl-2-hydroxybenzoic acid.
  - *Rationale*: Aldehyde groups are reactive and may form unwanted side reactions with catalyst components, leading to deactivation and lower yields.

- **Rule 6**: **Modifiers containing multiple hydroxyl groups (polyols) yield high value.**
  - *Example*: (2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid (Gluconic acid).
  - *Rationale*: Multiple hydroxyl groups increase solubility and provide numerous coordination sites, enhancing interaction with the metal center.

- **Rule 7**: **Modifiers that are amino acids with amino groups located on shorter aliphatic chains (five carbons or fewer from the carboxyl group) yield high value; those with amino groups on longer chains yield low value.**
  - *High Yield Examples*: 5-aminopentanoic acid.
  - *Low Yield Examples*: 7-aminoheptanoic acid, 8-aminooctanoic acid.
  - *Rationale*: Proximity of the amino group to the carboxyl group facilitates effective coordination with the metal center, while distant amino groups are less effective.

- **Rule 8**: **Modifiers with pyridine rings connected via an aliphatic linker yield high value; those directly attached to another aromatic ring yield low value.**
  - *High Yield Examples*: 4-pyridin-4-ylbutanoic acid, pyridine-3-carboxylic acid (Niacin).
  - *Low Yield Example*: 4-pyridin-4-ylbenzoic acid.
  - *Rationale*: Aliphatic linkers reduce steric hindrance and allow better flexibility for the pyridine nitrogen to coordinate with the metal, whereas direct attachment to an aromatic ring restricts this interaction.

- **Rule 9**: **Modifiers with electron-donating methoxy groups on aromatic rings yield high value when combined with additional coordinating functional groups.**
  - *Example*: 4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid.
  - *Rationale*: Methoxy groups increase electron density on the aromatic ring, enhancing interaction with the metal center if other coordinating groups are present.

- **Rule 10**: **Modifiers containing nitrogen heterocycles directly attached to the carboxyl group yield high value.**
  - *Examples*: 1H-pyrazole-4-carboxylic acid, (2R)-2-amino-3-(1H-indol-3-yl)propanoic acid (Tryptophan).
  - *Rationale*: Nitrogen atoms in heterocycles can coordinate effectively with the metal center, improving catalyst activity and stability.

- **Rule 11**: **Modifiers with keto (carbonyl) groups on aliphatic chains yield low value.**
  - *Example*: 4-oxoheptanedioic acid.
  - *Rationale*: Keto groups can chelate the metal in an unfavorable manner or compete with catalytic sites, leading to decreased activity.

- **Rule 12**: **Modifiers that are perfluorinated aliphatic carboxylic acids yield low value.**
  - *Example*: 2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid.
  - *Rationale*: Highly electronegative fluorine atoms reduce the ability of the carboxylate oxygen to coordinate with the metal center, diminishing catalytic efficiency.

- **Rule 13**: **Modifiers with ether linkages in aliphatic chains yield high value when multiple hydroxyl groups are also present; otherwise, they yield low value.**
  - *High Yield Example*: 2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid.
  - *Low Yield Example*: 2-[2-(2-methoxyethoxy)ethoxy]acetic acid.
  - *Rationale*: Multiple hydroxyl groups enhance metal coordination despite the presence of ether linkages, whereas ethers alone may not provide sufficient interaction.

- **Rule 14**: **Modifiers with hydroxyl groups on aromatic rings attached via short aliphatic chains yield high value; those with shorter chains or directly attached yield low value.**
  - *High Yield Example*: 5-(4-hydroxyphenyl)pentanoic acid.
  - *Low Yield Example*: 3-(4-hydroxyphenyl)propanoic acid.
  - *Rationale*: Longer aliphatic linkers improve flexibility and positioning of hydroxyl groups for effective metal coordination.

- **Rule 15**: **Modifiers with long aliphatic chains (six carbons or more) without interfering functional groups yield high value.**
  - *Example*: Octanoic acid.
  - *Rationale*: Long hydrophobic chains may enhance substrate accessibility to the catalyst and improve overall reaction efficiency.

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 4,Rule 5,Rule 6,Rule 7,Rule 7,Rule 8,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 13,Rule 14,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.5142857142857142; Test Accuracy: 0.0
    Train Support: 0.0; Test Support: 0.0
    Train Confidence: 0.5; Test Confidence: 0.5
    Train Lift: 1.0; Test Lift: NONE
    Train Leverage: 0.0; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Import RDKit functions within the function scope
    from rdkit.Chem import AllChem
    
    # Define SMARTS patterns for functional groups and structural features
    patterns = {
        # Functional groups
        'primary_aliphatic_amine': '[NX3H2;!$(N[C]=O)]',
        'carboxylic_acid': '[CX3](=O)[OX2H1]',
        'thiol_aliphatic': '[SX2H][!#6]',
        'thiol_aromatic': '[SX2H][c]',
        'aldehyde': '[CX3H1](=O)[#6]',
        'hydroxyl': '[OX2H]',
        'amino_acid_side_chain': '[NX3H2;!$(N[C]=O)][C;!$(C=O)]',
        'long_aliphatic_chain': '[CX4H2][CX4H2][CX4H2][CX4H2][CX4H2]',
        'pyridine_ring': '[nX2]1ccccc1',
        'aromatic_ring': 'a1aaaaa1',
        'electron_withdrawing_group': '[F,Cl,Br,I,NX3=O]',
        'electron_donating_group': '[OX2H,OX1-,NX3H2,NX3H1]',
        'ketone_aliphatic': '[CX3](=O)[#6]',
        'perfluorinated_chain': '[CX4]([F])([F])([F])',
        'ether_linkage': '[#6][OX2][#6]',
        'hydroxyl_on_aromatic_chain': '[c][CX4][OX2H]',
        'amide_adjacent_aromatic': '[c][CX3](=O)[NX3]',
        'amino_group_short_chain': '[NX3H2][CX4][CX4][CX4][CX4][C]',
        'amino_group_long_chain': '[NX3H2][CX4][CX4][CX4][CX4][CX4][CX4][C]',
        'nitrogen_heterocycle_carboxylic_acid': '[n][CX3](=O)[OX2H1]',
        'methoxy_group_on_aromatic': '[c][OX2][CH3]',
        'aromatic_thiol': '[SX2H][c]',
        'aliphatic_thiol': '[SX2H][CX4]',
        'benzoic_acid': '[c][c][c][c][c][c][CX3](=O)[OX2H1]',
        'benzoic_acid_with_para_EWG': '[c][c](c)[c]([c][c][CX3](=O)[OX2H1])[F,Cl,Br,I,NX3+](=O)[O-]',
        'benzoic_acid_with_para_amino': '[c][c](c)[c]([c][c][CX3](=O)[OX2H1])[NX3H2]',
        'benzoic_acid_with_para_aromatic_ring': '[c][c](c)[c]([c][c][CX3](=O)[OX2H1])[c]',
        'ketone_on_aliphatic_chain': '[CX3](=O)[CX4]',
        'carboxylic_acid_aliphatic': '[CX3](=O)[OX2H1][CX4]',
        'polyol': '[#6][OX2H]',
        'number_of_hydroxyl_groups': '[OX2H]'
    }
    
    # Compile SMARTS patterns
    compiled_patterns = {name: Chem.MolFromSmarts(sma) for name, sma in patterns.items()}
    
    # Define rules with associated logic
    rules = [
        # Rule 1
        {
            'number': 1,
            'description': 'Modifiers that are amino acids containing two carboxylic acid groups (dicarboxylic amino acids) yield high value.',
            'patterns': ['primary_aliphatic_amine', 'carboxylic_acid'],
            'conditions': {
                'carboxylic_acid': 2
            },
            'exclude': [],
            'prediction': 1
        },
        # Rule 2
        {
            'number': 2,
            'description': 'Modifiers that are benzoic acids with strong electron-withdrawing groups at the para position yield high value.',
            'patterns': ['benzoic_acid_with_para_EWG'],
            'conditions': {},
            'exclude': [],
            'prediction': 1
        },
        # Rule 3
        {
            'number': 3,
            'description': 'Modifiers that are benzoic acids with an amino group at the para position yield high value if not directly connected to additional aromatic rings.',
            'patterns': ['benzoic_acid_with_para_amino'],
            'exclude': ['benzoic_acid_with_para_aromatic_ring'],
            'prediction': 1
        },
        # Rule 4
        {
            'number': 4,
            'description': 'Modifiers with thiol (sulfhydryl) groups on aliphatic chains yield high value; those with thiol groups directly attached to aromatic rings yield low value.',
            'patterns': ['aliphatic_thiol'],
            'exclude': [],
            'prediction': 1
        },
        # Rule 4 (Low Value for aromatic thiols)
        {
            'number': 4,
            'description': 'Modifiers with thiol (sulfhydryl) groups directly attached to aromatic rings yield low value.',
            'patterns': ['aromatic_thiol'],
            'exclude': [],
            'prediction': -1
        },
        # Rule 5
        {
            'number': 5,
            'description': 'Modifiers with aldehyde (formyl) groups yield low value.',
            'patterns': ['aldehyde'],
            'exclude': [],
            'prediction': -1
        },
        # Rule 6
        {
            'number': 6,
            'description': 'Modifiers containing multiple hydroxyl groups (polyols) yield high value.',
            'patterns': ['hydroxyl'],
            'conditions': {
                'number_of_hydroxyl_groups': 3
            },
            'exclude': [],
            'prediction': 1
        },
        # Rule 7
        {
            'number': 7,
            'description': 'Modifiers that are amino acids with amino groups located on shorter aliphatic chains (five carbons or fewer from the carboxyl group) yield high value; those with amino groups on longer chains yield low value.',
            'patterns': ['amino_group_short_chain'],
            'exclude': [],
            'prediction': 1
        },
        # Rule 7 (Low Value for longer chains)
        {
            'number': 7,
            'description': 'Modifiers that are amino acids with amino groups on longer chains yield low value.',
            'patterns': ['amino_group_long_chain'],
            'exclude': [],
            'prediction': -1
        },
        # Rule 8
        {
            'number': 8,
            'description': 'Modifiers with pyridine rings connected via an aliphatic linker yield high value; those directly attached to another aromatic ring yield low value.',
            'patterns': ['pyridine_ring', 'ether_linkage'],
            'exclude': ['aromatic_ring'],
            'prediction': 1
        },
        # Rule 8 (Low Value for direct attachment)
        {
            'number': 8,
            'description': 'Modifiers with pyridine rings directly attached to another aromatic ring yield low value.',
            'patterns': ['pyridine_ring', 'aromatic_ring'],
            'exclude': [],
            'prediction': -1
        },
        # Rule 9
        {
            'number': 9,
            'description': 'Modifiers with electron-donating methoxy groups on aromatic rings yield high value when combined with additional coordinating functional groups.',
            'patterns': ['methoxy_group_on_aromatic', 'electron_donating_group'],
            'exclude': [],
            'prediction': 1
        },
        # Rule 10
        {
            'number': 10,
            'description': 'Modifiers containing nitrogen heterocycles directly attached to the carboxyl group yield high value.',
            'patterns': ['nitrogen_heterocycle_carboxylic_acid'],
            'exclude': [],
            'prediction': 1
        },
        # Rule 11
        {
            'number': 11,
            'description': 'Modifiers with keto (carbonyl) groups on aliphatic chains yield low value.',
            'patterns': ['ketone_on_aliphatic_chain'],
            'exclude': [],
            'prediction': -1
        },
        # Rule 12
        {
            'number': 12,
            'description': 'Modifiers that are perfluorinated aliphatic carboxylic acids yield low value.',
            'patterns': ['perfluorinated_chain', 'carboxylic_acid_aliphatic'],
            'exclude': [],
            'prediction': -1
        },
        # Rule 13
        {
            'number': 13,
            'description': 'Modifiers with ether linkages in aliphatic chains yield high value when multiple hydroxyl groups are also present; otherwise, they yield low value.',
            'patterns': ['ether_linkage', 'hydroxyl'],
            'conditions': {
                'number_of_hydroxyl_groups': 2
            },
            'exclude': [],
            'prediction': 1
        },
        # Rule 13 (Low Value without multiple hydroxyl groups)
        {
            'number': 13,
            'description': 'Modifiers with ether linkages in aliphatic chains without multiple hydroxyl groups yield low value.',
            'patterns': ['ether_linkage'],
            'exclude': ['hydroxyl'],
            'prediction': -1
        },
        # Rule 14
        {
            'number': 14,
            'description': 'Modifiers with hydroxyl groups on aromatic rings attached via short aliphatic chains yield high value; those with shorter chains or directly attached yield low value.',
            'patterns': ['hydroxyl_on_aromatic_chain'],
            'conditions': {
                'chain_length': 5
            },
            'exclude': [],
            'prediction': 1
        },
        # Rule 14 (Low Value for shorter chains or direct attachment)
        {
            'number': 14,
            'description': 'Modifiers with hydroxyl groups on aromatic rings directly attached or via shorter chains yield low value.',
            'patterns': ['hydroxyl_on_aromatic_chain'],
            'conditions': {
                'chain_length': 3
            },
            'exclude': [],
            'prediction': -1
        },
        # Rule 15
        {
            'number': 15,
            'description': 'Modifiers with long aliphatic chains (six carbons or more) without interfering functional groups yield high value.',
            'patterns': ['long_aliphatic_chain'],
            'exclude': ['electron_withdrawing_group', 'electron_donating_group'],
            'prediction': 1
        },
    ]
    
    # Prepare DataFrame to store results
    df_columns = [f'Rule {rule["number"]}' for rule in rules]
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        try:
            mol = Chem.MolFromSmiles(smi)
            if mol is None:
                raise ValueError('Invalid SMILES')
            row = []
            for rule in rules:
                match = True
                # Check exclude patterns
                for exclude_name in rule.get('exclude', []):
                    exclude_pat = compiled_patterns[exclude_name]
                    if mol.HasSubstructMatch(exclude_pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Check patterns
                for pattern_name in rule.get('patterns', []):
                    pat = compiled_patterns[pattern_name]
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue
                # Check conditions (like counts)
                conditions_met = True
                for condition_name, threshold in rule.get('conditions', {}).items():
                    condition_pat = compiled_patterns[condition_name]
                    matches = mol.GetSubstructMatches(condition_pat)
                    if len(matches) < threshold:
                        conditions_met = False
                        break
                if not conditions_met:
                    row.append(0)
                    continue
                # If all patterns and conditions are met
                row.append(rule['prediction'])
            results.append(row)
        except Exception as e:
            # In case of any error, append a row of zeros
            row = [0]*len(rules)
            results.append(row)
    
    # Create DataFrame
    df = pd.DataFrame(results, columns=df_columns)
    return df
--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: **Modifiers that are α-amino acids with two carboxylic acid groups yield high value.**
  - *Examples*: (2S)-2-aminopentanedioic acid (**Glutamic acid**), (2S)-2-aminobutanedioic acid (**Aspartic acid**).
  - *Rationale*: The presence of both an α-amino group and dual carboxyl groups provides multiple coordination sites for metal binding, enhancing catalyst stability and reactivity.

- **Rule 2**: **Modifiers that are benzoic acids with functional groups capable of metal coordination at the para position yield high value.**
  - *Examples*: **4-aminobenzoic acid**, **4-nitrobenzoic acid**, **4-(bromomethyl)benzoic acid**.
  - *Rationale*: Functional groups like amino, nitro, and bromomethyl can coordinate with metal centers, promoting stronger interactions and improving catalytic activity.

- **Rule 3**: **Modifiers that are benzoic acids with non-coordinating groups at the para position yield low value.**
  - *Example*: **4-methylbenzoic acid**.
  - *Rationale*: Non-coordinating substituents like methyl groups do not enhance metal binding, leading to weaker catalyst interactions and lower yields.

- **Rule 4**: **Modifiers with amino groups located within five carbons of the carboxyl group yield high value; those with amino groups farther away yield low value.**
  - *High Yield Example*: **5-aminopentanoic acid**.
  - *Low Yield Examples*: **7-aminoheptanoic acid**, **8-aminooctanoic acid**.
  - *Rationale*: Optimal proximity of the amino group to the carboxyl enhances chelation with the metal center, while distant amino groups are less effective, diminishing catalytic efficiency.

- **Rule 5**: **Modifiers containing aldehyde (formyl) groups yield low value.**
  - *Examples*: **4-formylbenzoic acid**, **5-formyl-2-hydroxybenzoic acid**.
  - *Rationale*: Aldehyde groups are susceptible to side reactions and can form inactive complexes with the metal, deactivating the catalyst and leading to lower yields.

- **Rule 6**: **Modifiers with multiple hydroxyl groups (polyols) yield high value.**
  - *Examples*: (2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid (**Gluconic acid**), **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid**.
  - *Rationale*: Multiple hydroxyl groups provide numerous coordination sites and hydrogen-bonding interactions, enhancing metal complexation and catalyst performance.

- **Rule 7**: **Modifiers that are perfluorinated carboxylic acids yield low value.**
  - *Example*: **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**.
  - *Rationale*: The high electronegativity of fluorine atoms reduces electron density on the carboxylate oxygen, weakening metal coordination and decreasing catalytic activity.

- **Rule 8**: **Modifiers with thiol (sulfhydryl) groups yield high value when the thiol is on an aliphatic chain, but yield low value when the thiol is attached to an aromatic ring.**
  - *High Yield Example*: **3-sulfanylpropanoic acid**.
  - *Low Yield Example*: **4-sulfanylbenzoic acid**.
  - *Rationale*: Aliphatic thiols are more flexible and effectively coordinate with metal centers, enhancing catalytic activity, whereas aromatic thiols are less effective due to delocalization and steric hindrance.

- **Rule 9**: **Modifiers containing nitrogen heterocycles adjacent to the carboxyl group yield high value.**
  - *Examples*: **Pyridine-3-carboxylic acid** (**Niacin**), **1H-pyrazole-4-carboxylic acid**.
  - *Rationale*: Nitrogen atoms adjacent to the carboxyl group act as strong chelating agents, coordinating with the metal center and improving catalyst efficiency.

- **Rule 10**: **Modifiers that are long-chain aliphatic carboxylic acids (seven carbons or more) without additional functional groups yield high value.**
  - *Example*: **Octanoic acid**.
  - *Rationale*: Long hydrophobic chains may enhance substrate accessibility and facilitate better interactions with the catalyst, leading to higher yields.

- **Rule 11**: **Modifiers with keto (carbonyl) groups on aliphatic chains yield low value.**
  - *Example*: **4-oxoheptanedioic acid**.
  - *Rationale*: Keto groups can form non-productive chelates with the metal center or compete with active sites, reducing catalytic efficiency.

- **Rule 12**: **Modifiers containing ether linkages without additional coordinating groups yield low value.**
  - *Example*: **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**.
  - *Rationale*: Ether oxygen atoms are weaker donors and provide limited coordination with metal centers, resulting in lower catalytic performance.

- **Rule 13**: **Modifiers with phenolic hydroxyl groups attached via aliphatic chains of four carbons or more yield high value; those with shorter chains yield low value.**
  - *High Yield Example*: **5-(4-hydroxyphenyl)pentanoic acid**.
  - *Low Yield Example*: **3-(4-hydroxyphenyl)propanoic acid**.
  - *Rationale*: Longer aliphatic linkers provide flexibility, allowing phenolic hydroxyls to effectively coordinate with the metal center, whereas shorter chains limit this interaction due to steric constraints.

- **Rule 14**: **Modifiers with methoxy groups on aromatic rings yield high value only when additional coordinating groups are present.**
  - *Example*: **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid**.
  - *Rationale*: Methoxy groups increase electron density on the aromatic ring, but effective coordination requires additional functional groups (e.g., carbonyl) to enhance metal binding.

- **Rule 15**: **Modifiers with acylated amino groups yield low value.**
  - *Example*: **(2S)-6-acetamido-2-aminohexanoic acid**.
  - *Rationale*: Acylation reduces the availability of the amino group for metal coordination, diminishing its ability to enhance catalyst activity.

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
1,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
1,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,1,0,0,0,0,0
0,0,0,1,0,1,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,1,0,0
0,0,0,-1,0,1,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,1,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,1,0,0,0,0,0,0,0
0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,-1,0,1,1,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1
0,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,-1
0,0,0,-1,0,0,0,0,0,1,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6; Test Accuracy: 1.0
    Train Support: 0.11428571428571428; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 1.9444444444444446; Test Lift: NONE
    Train Leverage: 0.05551020408163266; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and substructures
    patterns = {
        'carboxylic_acid': Chem.MolFromSmarts('[CX3](=O)[OX1H0-,OX2H1]'),
        'amino_group': Chem.MolFromSmarts('[NX3;H2,H1;!$(NC=O)]'),
        'alpha_amino_acid': Chem.MolFromSmarts('[NX3;H2,H1][CX4H1][CX3](=O)[OX1H0-,OX2H1]'),
        'benzene_ring': Chem.MolFromSmarts('c1ccccc1'),
        'benzoic_acid': Chem.MolFromSmarts('c1ccc(-C(=O)[OX1H0-,OX2H1])cc1'),
        'para_substituted_benzoic_acid': Chem.MolFromSmarts('c1cc([*])cc(C(=O)[OX1H0-,OX2H1])c1'),
        'metal_coordination_groups': Chem.MolFromSmarts('[#7,#8,#16,#17]'),
        'aldehyde_group': Chem.MolFromSmarts('[CX3H1](=O)[#6]'),
        'hydroxyl_group': Chem.MolFromSmarts('[OX2H]'),
        'thiol_aliphatic': Chem.MolFromSmarts('[#6][SX2H]'),
        'thiol_aromatic': Chem.MolFromSmarts('[c][SX2H]'),
        'nitrogen_heterocycle_adjacent_carboxyl': Chem.MolFromSmarts('[n][c,C](=O)[OX1H0-,OX2H1]'),
        'long_chain_aliphatic_carboxylic_acid': Chem.MolFromSmarts('[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-C(=O)[OX1H0-,OX2H1]'),  # 7 or more carbons
        'keto_group_aliphatic': Chem.MolFromSmarts('[#6][CX3](=O)[#6]'),
        'ether_linkage': Chem.MolFromSmarts('[#6][OX2][#6]'),
        'phenolic_hydroxyl_long_chain': Chem.MolFromSmarts('[#6]-[#6]-[#6]-[#6]-c1ccc(O)cc1'),
        'phenolic_hydroxyl_short_chain': Chem.MolFromSmarts('[#6]-[#6]-c1ccc(O)cc1'),
        'methoxy_aromatic_with_coordination': Chem.MolFromSmarts('c1cc([OX2][CH3])ccc1[*]'),
        'acylated_amino_group': Chem.MolFromSmarts('[NX3][CX3](=O)[#6]'),
        'polyol': Chem.MolFromSmarts('([#6][OX2H]){3,}'),  # Molecule with 3 or more hydroxyl groups
        'perfluorinated_carboxylic_acid': Chem.MolFromSmarts('[CX4](F)(F)(F)[CX3](=O)[OX1H0-,OX2H1]'),
    }
    
    # Define the rules with their associated logic
    rules = [
        # Rule 1
        {
            'number': 1,
            'description': 'Modifiers that are α-amino acids with two carboxylic acid groups yield high value.',
            'logic': lambda m: m.HasSubstructMatch(patterns['alpha_amino_acid']) and len(m.GetSubstructMatches(patterns['carboxylic_acid'])) >= 2,
            'prediction': 1
        },
        # Rule 2
        {
            'number': 2,
            'description': 'Modifiers that are benzoic acids with functional groups capable of metal coordination at the para position yield high value.',
            'logic': lambda m: m.HasSubstructMatch(patterns['benzoic_acid']) and any(m.HasSubstructMatch(Chem.MolFromSmarts(f'c1cc({fg_smarts})cc(C(=O)[OX1H0-,OX2H1])c1')) for fg_smarts in ['[NX3;H2,H1;!$(NC=O)]', '[CX3](=O)[OX1H0-,OX2H1]', '[Br]', '[Cl]', '[F]', '[I]', '[NX3](=O)[OX1]']),
            'prediction': 1
        },
        # Rule 3
        {
            'number': 3,
            'description': 'Modifiers that are benzoic acids with non-coordinating groups at the para position yield low value.',
            'logic': lambda m: m.HasSubstructMatch(patterns['benzoic_acid']) and m.HasSubstructMatch(Chem.MolFromSmarts('c1cc([CX4H3])cc(C(=O)[OX1H0-,OX2H1])c1')),  # Methyl group at para
            'prediction': -1
        },
        # Rule 4
        {
            'number': 4,
            'description': 'Modifiers with amino groups located within five carbons of the carboxyl group yield high value; those with amino groups farther away yield low value.',
            'logic': lambda m: any(len(Chem.rdmolops.GetShortestPath(m, match1[0], match2[0])) <= 5 for match1 in m.GetSubstructMatches(patterns['amino_group']) for match2 in m.GetSubstructMatches(patterns['carboxylic_acid'])),
            'prediction': lambda m: 1 if any(len(Chem.rdmolops.GetShortestPath(m, match1[0], match2[0])) <= 5 for match1 in m.GetSubstructMatches(patterns['amino_group']) for match2 in m.GetSubstructMatches(patterns['carboxylic_acid'])) else -1
        },
        # Rule 5
        {
            'number': 5,
            'description': 'Modifiers containing aldehyde (formyl) groups yield low value.',
            'logic': lambda m: m.HasSubstructMatch(patterns['aldehyde_group']),
            'prediction': -1
        },
        # Rule 6
        {
            'number': 6,
            'description': 'Modifiers with multiple hydroxyl groups (polyols) yield high value.',
            'logic': lambda m: len(m.GetSubstructMatches(patterns['hydroxyl_group'])) >= 3,
            'prediction': 1
        },
        # Rule 7
        {
            'number': 7,
            'description': 'Modifiers that are perfluorinated carboxylic acids yield low value.',
            'logic': lambda m: m.HasSubstructMatch(patterns['perfluorinated_carboxylic_acid']),
            'prediction': -1
        },
        # Rule 8
        {
            'number': 8,
            'description': 'Modifiers with thiol groups yield high value when the thiol is on an aliphatic chain, but yield low value when the thiol is attached to an aromatic ring.',
            'logic': lambda m: 1 if m.HasSubstructMatch(patterns['thiol_aliphatic']) else (-1 if m.HasSubstructMatch(patterns['thiol_aromatic']) else 0),
            'prediction': lambda m: 1 if m.HasSubstructMatch(patterns['thiol_aliphatic']) else (-1 if m.HasSubstructMatch(patterns['thiol_aromatic']) else 0)
        },
        # Rule 9
        {
            'number': 9,
            'description': 'Modifiers containing nitrogen heterocycles adjacent to the carboxyl group yield high value.',
            'logic': lambda m: m.HasSubstructMatch(patterns['nitrogen_heterocycle_adjacent_carboxyl']),
            'prediction': 1
        },
        # Rule 10
        {
            'number': 10,
            'description': 'Modifiers that are long-chain aliphatic carboxylic acids (seven carbons or more) without additional functional groups yield high value.',
            'logic': lambda m: m.HasSubstructMatch(patterns['long_chain_aliphatic_carboxylic_acid']),
            'prediction': 1
        },
        # Rule 11
        {
            'number': 11,
            'description': 'Modifiers with keto (carbonyl) groups on aliphatic chains yield low value.',
            'logic': lambda m: m.HasSubstructMatch(patterns['keto_group_aliphatic']),
            'prediction': -1
        },
        # Rule 12
        {
            'number': 12,
            'description': 'Modifiers containing ether linkages without additional coordinating groups yield low value.',
            'logic': lambda m: m.HasSubstructMatch(patterns['ether_linkage']) and not m.HasSubstructMatch(patterns['amino_group']) and not m.HasSubstructMatch(patterns['hydroxyl_group']),
            'prediction': -1
        },
        # Rule 13
        {
            'number': 13,
            'description': 'Modifiers with phenolic hydroxyl groups attached via aliphatic chains of four carbons or more yield high value; those with shorter chains yield low value.',
            'logic': lambda m: 1 if m.HasSubstructMatch(patterns['phenolic_hydroxyl_long_chain']) else (-1 if m.HasSubstructMatch(patterns['phenolic_hydroxyl_short_chain']) else 0),
            'prediction': lambda m: 1 if m.HasSubstructMatch(patterns['phenolic_hydroxyl_long_chain']) else (-1 if m.HasSubstructMatch(patterns['phenolic_hydroxyl_short_chain']) else 0)
        },
        # Rule 14
        {
            'number': 14,
            'description': 'Modifiers with methoxy groups on aromatic rings yield high value only when additional coordinating groups are present.',
            'logic': lambda m: 1 if m.HasSubstructMatch(patterns['methoxy_aromatic_with_coordination']) and (m.HasSubstructMatch(patterns['amino_group']) or m.HasSubstructMatch(patterns['hydroxyl_group'])) else 0,
            'prediction': lambda m: 1 if m.HasSubstructMatch(patterns['methoxy_aromatic_with_coordination']) and (m.HasSubstructMatch(patterns['amino_group']) or m.HasSubstructMatch(patterns['hydroxyl_group'])) else 0
        },
        # Rule 15
        {
            'number': 15,
            'description': 'Modifiers with acylated amino groups yield low value.',
            'logic': lambda m: m.HasSubstructMatch(patterns['acylated_amino_group']),
            'prediction': -1
        }
    ]
    
    # Initialize the result matrix
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                if 'prediction' in rule and callable(rule['prediction']):
                    pred = rule['prediction'](mol)
                    row.append(pred)
                elif rule['logic'](mol):
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: **Modifiers that are α-amino acids with two carboxylic acid groups (dicarboxylic acids) yield high value.**
  - *Examples*: (2S)-2-aminopentanedioic acid (**Glutamic acid**), (2S)-2-aminobutanedioic acid (**Aspartic acid**).
  - *Rationale*: The presence of an α-amino group and dual carboxyl groups allows for strong chelation with metal centers, enhancing catalyst stability and reactivity, which increases the yield.

- **Rule 2**: **Modifiers that are benzoic acids with electron-withdrawing or coordinating substituents at the para position yield high value; those with electron-donating or non-coordinating substituents yield low value.**
  - *High Yield Examples*: **4-aminobenzoic acid**, **4-nitrobenzoic acid**, **4-(bromomethyl)benzoic acid**.
  - *Low Yield Examples*: **4-methylbenzoic acid**, **4-formylbenzoic acid**.
  - *Rationale*: Electron-withdrawing or coordinating groups like amino, nitro, and bromomethyl enhance metal binding by increasing the acidity of the carboxyl group and providing additional coordination sites. Electron-donating groups like methyl reduce metal coordination, leading to lower yields.

- **Rule 3**: **Modifiers with amino groups located within five carbons of the carboxyl group yield high value; those with amino groups farther away or acylated yield low value.**
  - *High Yield Example*: **5-aminopentanoic acid**.
  - *Low Yield Examples*: **7-aminoheptanoic acid**, **8-aminooctanoic acid**, **(2S)-6-acetamido-2-aminohexanoic acid**.
  - *Rationale*: Proximity of the amino group to the carboxyl enhances chelation with metal centers. Distant or acylated amino groups are less effective in metal coordination, reducing catalytic efficiency.

- **Rule 4**: **Modifiers with multiple hydroxyl groups (polyols) yield high value.**
  - *Examples*: (2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid (**Gluconic acid**), **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid**.
  - *Rationale*: Multiple hydroxyl groups provide numerous coordination sites for metal ions and facilitate hydrogen bonding, enhancing metal complexation and improving catalyst performance.

- **Rule 5**: **Modifiers containing thiol (sulfhydryl) groups yield high value when the thiol is on an aliphatic chain; those with sulfur attached to aromatic rings or in thioethers yield low value.**
  - *High Yield Example*: **3-sulfanylpropanoic acid**.
  - *Low Yield Examples*: **4-sulfanylbenzoic acid**, **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid**.
  - *Rationale*: Aliphatic thiols are flexible and effectively coordinate with metal centers, enhancing catalytic activity. Sulfur in aromatic systems or thioethers is less accessible for coordination due to steric hindrance or delocalization.

- **Rule 6**: **Modifiers containing aldehyde (formyl) groups yield low value.**
  - *Examples*: **4-formylbenzoic acid**, **5-formyl-2-hydroxybenzoic acid**.
  - *Rationale*: Aldehyde groups can undergo side reactions or form inactive complexes with metal ions, deactivating the catalyst and leading to lower yields.

- **Rule 7**: **Modifiers that are perfluorinated carboxylic acids yield low value.**
  - *Example*: **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**.
  - *Rationale*: The electronegativity of fluorine atoms reduces electron density on the carboxylate oxygen, weakening metal coordination and decreasing catalytic activity.

- **Rule 8**: **Modifiers with nitrogen-containing heterocycles adjacent to the carboxyl group yield high value.**
  - *Examples*: **Pyridine-3-carboxylic acid** (**Niacin**), **1H-pyrazole-4-carboxylic acid**.
  - *Rationale*: Nitrogen atoms in heterocycles act as strong chelating agents with metal centers, enhancing coordination and improving catalyst efficiency.

- **Rule 9**: **Modifiers with ether linkages yield low value unless additional strong coordinating groups are present.**
  - *Low Yield Example*: **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**.
  - *Rationale*: Ether oxygen atoms are weak donors for metal coordination. Without additional coordinating groups, the overall metal-binding ability is insufficient to enhance catalytic performance.

- **Rule 10**: **Modifiers that are long-chain aliphatic carboxylic acids (with eight or more carbons) yield high value unless they contain interfering functional groups.**
  - *High Yield Example*: **Octanoic acid**.
  - *Low Yield Example*: **8-aminooctanoic acid**.
  - *Rationale*: Long hydrophobic chains may improve substrate accessibility and stabilize the catalyst. Interfering groups (like distant amino groups) can disrupt metal coordination, reducing yield.

- **Rule 11**: **Modifiers with keto (carbonyl) groups near the carboxyl group yield low value.**
  - *Example*: **4-oxoheptanedioic acid**.
  - *Rationale*: Keto groups can chelate with metal centers in a way that competes with the active site or alters the catalyst structure, leading to decreased catalytic efficiency.

- **Rule 12**: **Modifiers with methoxy groups on aromatic rings yield high value only when additional coordinating groups are present.**
  - *High Yield Example*: **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid**.
  - *Low Yield Example*: **2-[(4-hydroxybenzoyl)amino]acetic acid**.
  - *Rationale*: Methoxy groups increase electron density and can enhance metal interactions when coupled with other coordinating groups. Without them, the coordination is insufficient to impact the yield positively.

- **Rule 13**: **Modifiers with phenolic hydroxyl groups attached via a five-carbon aliphatic chain yield high value; those with shorter chains yield low value.**
  - *High Yield Example*: **5-(4-hydroxyphenyl)pentanoic acid**.
  - *Low Yield Example*: **3-(4-hydroxyphenyl)propanoic acid**.
  - *Rationale*: Longer aliphatic chains provide flexibility, allowing the phenolic hydroxyl to effectively coordinate with the metal center. Shorter chains limit this interaction due to steric constraints.

- **Rule 14**: **Modifiers with acylated amino groups yield low value.**
  - *Example*: **(2S)-6-acetamido-2-aminohexanoic acid**.
  - *Rationale*: Acylation of the amino group reduces its availability for metal coordination, diminishing its ability to enhance catalyst activity.

- **Rule 15**: **Modifiers containing amino groups directly attached to aromatic rings yield high value; those with amino groups on aliphatic chains yield high value only when the chain is short.**
  - *High Yield Example (Aromatic Amino Group)*: **4-aminobenzoic acid**.
  - *High Yield Example (Short Aliphatic Chain)**: **5-aminopentanoic acid**.
  - *Low Yield Example**: **7-aminoheptanoic acid**.
  - *Rationale**: Aromatic amino groups enhance metal coordination due to conjugation with the ring. Aliphatic amino groups are effective when close to the carboxyl group, enabling strong chelation; distant amino groups are less effective.

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1
1,0,1,1,0,0,0,0,0,0,0,0,-1,0,1
0,1,0,0,0,0,0,0,0,0,0,0,-1,0,-1
1,0,1,1,0,0,0,0,0,0,-1,0,-1,0,1
0,0,1,0,0,0,0,0,0,0,0,0,-1,0,1
0,1,1,0,0,0,0,0,0,0,0,0,-1,0,1
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1
0,0,0,1,0,0,0,0,0,0,0,0,-1,0,-1
0,0,0,1,0,0,0,0,0,0,0,0,-1,0,-1
0,0,0,1,0,0,0,0,0,0,0,0,-1,0,-1
0,-1,0,0,-1,0,0,0,0,0,0,0,-1,0,-1
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1
0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,-1
0,0,1,0,0,0,0,0,0,0,0,0,-1,0,1
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1
0,0,1,0,0,0,0,0,0,0,0,0,-1,0,1
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1
0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,-1
0,0,0,0,1,0,0,0,0,0,0,0,-1,0,-1
0,-1,0,1,0,-1,0,0,0,0,0,0,-1,0,-1
0,-1,0,0,0,-1,0,0,0,0,0,0,-1,0,-1
0,1,0,0,0,0,0,0,0,0,0,0,-1,0,-1
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1
0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,-1
0,0,1,0,-1,0,0,0,0,0,0,0,-1,-1,1
0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1
0,0,0,0,0,0,0,0,0,0,-1,1,-1,0,-1
0,0,0,1,0,0,0,0,0,0,0,0,-1,-1,-1
0,0,0,1,0,0,0,0,0,0,-1,0,-1,0,-1
0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1
0,0,0,1,0,0,0,0,0,0,0,0,-1,0,-1
0,0,0,1,0,0,0,0,0,0,0,0,-1,0,-1
0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,-1
0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,-1
0,0,1,0,0,0,0,0,0,0,0,0,-1,-1,1
0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,-1

---------------------------------------------------------------


    Train Accuracy: 0.8; Test Accuracy: 1.0
    Train Support: 0.19047619047619047; Test Support: 0.0
    Train Confidence: 0.872053872053872; Test Confidence: 0.5
    Train Lift: 1.725699258378997; Test Lift: NONE
    Train Leverage: 0.07591836734693878; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    """
    This function takes a list of SMILES strings and applies a set of structural rules to generate
    a feature matrix. Each rule corresponds to a structural feature, and the matrix contains
    values of 1, -1, or 0 depending on whether the SMILES matches the rule and the predicted value.
    """
    from rdkit import Chem
    from rdkit.Chem import AllChem
    from rdkit.Chem import rdMolDescriptors
    import pandas as pd

    # Define SMARTS patterns for functional groups
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1]'
    
    # Alpha-amino acid backbone: N-C-C(=O)-O
    amino_acid_backbone = '[NX3H2]-[CX4H]-[CX3](=O)[OX1H0-,OX2H1]'
    
    # Benzoic acid core
    benzoic_acid = '[c]1ccc([CX3](=O)[OX1H0-,OX2H1])cc1'
    
    # Electron-withdrawing or coordinating substituents at para position
    ewg_para_substituents = {
        'nitro': '[N+](=O)[O-]',
        'amino': '[NH2]',
        'bromomethyl': '[CH2Br]',
        'halogens': '[F,Cl,Br,I]',
        'cyano': '[C]#N'
    }
    
    # Electron-donating or non-coordinating substituents at para position
    edg_para_substituents = {
        'methyl': 'C',
        'methoxy': 'OC'
    }

    # Primary amine group (-NH2)
    primary_amine = '[NX3H2]'

    # Acylated amino group (amide)
    acylated_amino_group = '[NX3][CX3](=O)'

    # Hydroxyl group (-OH)
    hydroxyl_group = '[OX2H]'

    # Thiol group (-SH)
    aliphatic_thiol = '[CX4][SX2H]'
    
    # Aromatic thiol
    aromatic_thiol = '[c][SX2H]'

    # Thioether (-S- between carbons)
    thioether = '[#6][SX2][#6]'

    # Aldehyde group (-CHO)
    aldehyde_group = '[CX3H1](=O)[#6]'

    # Perfluorinated carboxylic acid
    perfluoro_carboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1][C,F]([F])([F])[F]'

    # Nitrogen-containing heterocycles adjacent to carboxyl group
    heterocycle_carboxylic_acid = '[n]1cccc1[CX3](=O)[OX1H0-,OX2H1]'

    # Ether linkage (-O-)
    ether_linkage = '[#6][OX2][#6]'

    # Long aliphatic chain (8 or more carbons)
    long_aliphatic_chain = '[CX4H2][CX4H2][CX4H2][CX4H2][CX4H2][CX4H2][CX4H2][CX4H2]'

    # Keto group near carboxyl group
    keto_near_carboxyl = '[CX3](=O)[#6][#6][CX3](=O)[OX1H0-,OX2H1]'

    # Methoxy group on aromatic ring
    methoxy_aromatic = '[c][OX2][CH3]'

    # Additional coordinating groups
    coordinating_groups = [
        primary_amine,
        '[NX3H1]',
        hydroxyl_group,
        '[OX2-]'
    ]

    # Phenolic hydroxyl group attached via a five-carbon aliphatic chain
    phenol_five_chain = '[OX2H]-c1ccccc1CCCCC[CX3](=O)[OX1H0-,OX2H1]'

    # Aromatic amino group
    aromatic_amino_group = '[c][NX3H2,NX3H1]'

    # Compile SMARTS patterns
    patterns = {
        'carboxylic_acid': Chem.MolFromSmarts(carboxylic_acid),
        'amino_acid_backbone': Chem.MolFromSmarts(amino_acid_backbone),
        'benzoic_acid': Chem.MolFromSmarts(benzoic_acid),
        'primary_amine': Chem.MolFromSmarts(primary_amine),
        'acylated_amino_group': Chem.MolFromSmarts(acylated_amino_group),
        'hydroxyl_group': Chem.MolFromSmarts(hydroxyl_group),
        'aliphatic_thiol': Chem.MolFromSmarts(aliphatic_thiol),
        'aromatic_thiol': Chem.MolFromSmarts(aromatic_thiol),
        'thioether': Chem.MolFromSmarts(thioether),
        'aldehyde_group': Chem.MolFromSmarts(aldehyde_group),
        'perfluoro_carboxylic_acid': Chem.MolFromSmarts(perfluoro_carboxylic_acid),
        'heterocycle_carboxylic_acid': Chem.MolFromSmarts(heterocycle_carboxylic_acid),
        'ether_linkage': Chem.MolFromSmarts(ether_linkage),
        'long_aliphatic_chain': Chem.MolFromSmarts(long_aliphatic_chain),
        'keto_near_carboxyl': Chem.MolFromSmarts(keto_near_carboxyl),
        'methoxy_aromatic': Chem.MolFromSmarts(methoxy_aromatic),
        'phenol_five_chain': Chem.MolFromSmarts(phenol_five_chain),
        'aromatic_amino_group': Chem.MolFromSmarts(aromatic_amino_group)
    }

    # Define the rules
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are α-amino acids with two carboxylic acid groups (dicarboxylic acids) yield high value.',
            'function': 'rule1',
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Modifiers that are benzoic acids with electron-withdrawing or coordinating substituents at the para position yield high value; those with electron-donating or non-coordinating substituents yield low value.',
            'function': 'rule2',
            'prediction': None  # Prediction determined in function
        },
        {
            'number': 3,
            'description': 'Modifiers with amino groups located within five carbons of the carboxyl group yield high value; those with amino groups farther away or acylated yield low value.',
            'function': 'rule3',
            'prediction': None  # Prediction determined in function
        },
        {
            'number': 4,
            'description': 'Modifiers with multiple hydroxyl groups (polyols) yield high value.',
            'function': 'rule4',
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers containing thiol (sulfhydryl) groups yield high value when the thiol is on an aliphatic chain; those with sulfur attached to aromatic rings or in thioethers yield low value.',
            'function': 'rule5',
            'prediction': None
        },
        {
            'number': 6,
            'description': 'Modifiers containing aldehyde (formyl) groups yield low value.',
            'function': 'rule6',
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Modifiers that are perfluorinated carboxylic acids yield low value.',
            'function': 'rule7',
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Modifiers with nitrogen-containing heterocycles adjacent to the carboxyl group yield high value.',
            'function': 'rule8',
            'prediction': 1
        },
        {
            'number': 9,
            'description': 'Modifiers with ether linkages yield low value unless additional strong coordinating groups are present.',
            'function': 'rule9',
            'prediction': None
        },
        {
            'number': 10,
            'description': 'Modifiers that are long-chain aliphatic carboxylic acids (with eight or more carbons) yield high value unless they contain interfering functional groups.',
            'function': 'rule10',
            'prediction': None
        },
        {
            'number': 11,
            'description': 'Modifiers with keto (carbonyl) groups near the carboxyl group yield low value.',
            'function': 'rule11',
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'Modifiers with methoxy groups on aromatic rings yield high value only when additional coordinating groups are present.',
            'function': 'rule12',
            'prediction': None
        },
        {
            'number': 13,
            'description': 'Modifiers with phenolic hydroxyl groups attached via a five-carbon aliphatic chain yield high value; those with shorter chains yield low value.',
            'function': 'rule13',
            'prediction': None
        },
        {
            'number': 14,
            'description': 'Modifiers with acylated amino groups yield low value.',
            'function': 'rule14',
            'prediction': -1
        },
        {
            'number': 15,
            'description': 'Modifiers containing amino groups directly attached to aromatic rings yield high value; those with amino groups on aliphatic chains yield high value only when the chain is short.',
            'function': 'rule15',
            'prediction': None
        }
    ]

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                if rule['function'] == 'rule1':
                    # Rule 1 implementation
                    if mol.HasSubstructMatch(patterns['amino_acid_backbone']):
                        # Count carboxylic acid groups
                        c_acid_matches = mol.GetSubstructMatches(patterns['carboxylic_acid'])
                        if len(c_acid_matches) >= 2:
                            row.append(1)
                        else:
                            row.append(0)
                    else:
                        row.append(0)
                elif rule['function'] == 'rule2':
                    # Rule 2 implementation
                    # Identify benzoic acid core
                    benzoic_acid_matches = mol.GetSubstructMatches(patterns['benzoic_acid'])
                    if benzoic_acid_matches:
                        # For each match, identify the para position
                        high_value = False
                        low_value = False
                        for match in benzoic_acid_matches:
                            atoms = list(match)
                            # Get the benzene ring carbons
                            ring_info = mol.GetRingInfo()
                            atom_indices = [a for a in atoms if mol.GetAtomWithIdx(a).IsInRing()]   
                            if len(atom_indices) < 6:
                                continue
                            # Find the carboxyl carbon
                            carboxyl_carbons = [a for a in atoms if mol.GetAtomWithIdx(a).GetSymbol() == 'C' and mol.GetAtomWithIdx(a).GetTotalDegree() == 3]
                            if not carboxyl_carbons:
                                continue
                            carboxyl_carbon = carboxyl_carbons[0]
                            # Get the ortho and para positions
                            neighbor_indices = [n.GetIdx() for n in mol.GetAtomWithIdx(carboxyl_carbon).GetNeighbors() if n.GetIdx() in atom_indices]
                            ortho_positions = neighbor_indices
                            para_positions = []
                            for idx in atom_indices:
                                if idx != carboxyl_carbon and idx not in neighbor_indices:
                                    path_length = len(Chem.rdmolops.GetShortestPath(mol, carboxyl_carbon, idx)) - 1
                                    if path_length == 3:
                                        para_positions.append(idx)
                            # Check substituents at para position
                            for idx in para_positions:
                                atom = mol.GetAtomWithIdx(idx)
                                attached_atoms = [n.GetSymbol() for n in atom.GetNeighbors() if n.GetIdx() not in atom_indices]
                                attached_bonds = [mol.GetBondBetweenAtoms(idx, n.GetIdx()).GetBondType() for n in atom.GetNeighbors() if n.GetIdx() not in atom_indices]
                                substituent = False
                                for n in atom.GetNeighbors():
                                    if n.GetIdx() not in atom_indices:
                                        substituent = True
                                        neighbor_idx = n.GetIdx()
                                        neighbor_atom = mol.GetAtomWithIdx(neighbor_idx)
                                        neighbor_symbol = neighbor_atom.GetSymbol()
                                        neighbor_smarts = Chem.MolFragmentToSmiles(mol, atomsToUse=[idx, neighbor_idx], bondsToUse=None, rootedAtAtom=idx)
                                        # Check for EWG
                                        for ewg in ewg_para_substituents.values():
                                            ewg_pattern = Chem.MolFromSmarts(ewg)
                                            if mol.HasSubstructMatch(ewg_pattern):
                                                high_value = True
                                        # Check for EDG
                                        for edg in edg_para_substituents.values():
                                            edg_pattern = Chem.MolFromSmarts(edg)
                                            if mol.HasSubstructMatch(edg_pattern):
                                                low_value = True
                                if substituent:
                                    break
                        if high_value:
                            row.append(1)
                        elif low_value:
                            row.append(-1)
                        else:
                            row.append(0)
                    else:
                        row.append(0)
                elif rule['function'] == 'rule3':
                    # Rule 3 implementation
                    # Find primary amine groups (excluding acylated amines)
                    amine_matches = mol.GetSubstructMatches(patterns['primary_amine'])
                    # Exclude acylated amino groups
                    acylated_amines = mol.GetSubstructMatches(patterns['acylated_amino_group'])
                    acylated_nitrogens = [match[0] for match in acylated_amines]
                    # Filter amine atoms
                    amine_atoms = [match[0] for match in amine_matches if match[0] not in acylated_nitrogens]
                    # Find carboxylic acid groups
                    c_acid_matches = mol.GetSubstructMatches(patterns['carboxylic_acid'])
                    c_acid_atoms = [match[0] for match in c_acid_matches]
                    # Compute shortest paths
                    min_distance = None
                    for n_idx in amine_atoms:
                        for c_idx in c_acid_atoms:
                            path = Chem.rdmolops.GetShortestPath(mol, n_idx, c_idx)
                            distance = len([a for a in path if mol.GetAtomWithIdx(a).GetSymbol() == 'C']) - 1
                            if min_distance is None or distance < min_distance:
                                min_distance = distance
                    if min_distance is not None:
                        if min_distance <= 5:
                            row.append(1)
                        else:
                            row.append(-1)
                    else:
                        row.append(0)
                elif rule['function'] == 'rule4':
                    # Rule 4 implementation
                    hydroxyl_matches = mol.GetSubstructMatches(patterns['hydroxyl_group'])
                    if len(hydroxyl_matches) >= 2:
                        row.append(1)
                    else:
                        row.append(0)
                elif rule['function'] == 'rule5':
                    # Rule 5 implementation
                    aliphatic_thiol_matches = mol.GetSubstructMatches(patterns['aliphatic_thiol'])
                    aromatic_thiol_matches = mol.GetSubstructMatches(patterns['aromatic_thiol'])
                    thioether_matches = mol.GetSubstructMatches(patterns['thioether'])
                    if aliphatic_thiol_matches:
                        row.append(1)
                    elif aromatic_thiol_matches or thioether_matches:
                        row.append(-1)
                    else:
                        row.append(0)
                elif rule['function'] == 'rule6':
                    # Rule 6 implementation
                    if mol.HasSubstructMatch(patterns['aldehyde_group']):
                        row.append(-1)
                    else:
                        row.append(0)
                elif rule['function'] == 'rule7':
                    # Rule 7 implementation
                    if mol.HasSubstructMatch(patterns['perfluoro_carboxylic_acid']):
                        row.append(-1)
                    else:
                        row.append(0)
                elif rule['function'] == 'rule8':
                    # Rule 8 implementation
                    if mol.HasSubstructMatch(patterns['heterocycle_carboxylic_acid']):
                        row.append(1)
                    else:
                        row.append(0)
                elif rule['function'] == 'rule9':
                    # Rule 9 implementation
                    if mol.HasSubstructMatch(patterns['ether_linkage']):
                        # Check for additional strong coordinating groups
                        has_coordinating_group = False
                        for group in coordinating_groups:
                            pattern = Chem.MolFromSmarts(group)
                            if mol.HasSubstructMatch(pattern):
                                has_coordinating_group = True
                                break
                        if not has_coordinating_group:
                            row.append(-1)
                        else:
                            row.append(0)
                    else:
                        row.append(0)
                elif rule['function'] == 'rule10':
                    # Rule 10 implementation
                    # Check for long-chain aliphatic carboxylic acids
                    if mol.HasSubstructMatch(patterns['long_aliphatic_chain']) and mol.HasSubstructMatch(patterns['carboxylic_acid']):
                        # Check for interfering functional groups
                        interfering_groups = False
                        if mol.HasSubstructMatch(patterns['primary_amine']):
                            interfering_groups = True
                        if mol.HasSubstructMatch(patterns['acylated_amino_group']):
                            interfering_groups = True
                        if not interfering_groups:
                            row.append(1)
                        else:
                            row.append(0)
                    else:
                        row.append(0)
                elif rule['function'] == 'rule11':
                    # Rule 11 implementation
                    if mol.HasSubstructMatch(patterns['keto_near_carboxyl']):
                        row.append(-1)
                    else:
                        row.append(0)
                elif rule['function'] == 'rule12':
                    # Rule 12 implementation
                    if mol.HasSubstructMatch(patterns['methoxy_aromatic']):
                        # Check for additional coordinating groups
                        has_coordinating_group = False
                        for group in coordinating_groups:
                            pattern = Chem.MolFromSmarts(group)
                            if mol.HasSubstructMatch(pattern):
                                has_coordinating_group = True
                                break
                        if has_coordinating_group:
                            row.append(1)
                        else:
                            row.append(-1)
                    else:
                        row.append(0)
                elif rule['function'] == 'rule13':
                    # Rule 13 implementation
                    if mol.HasSubstructMatch(patterns['phenol_five_chain']):
                        row.append(1)
                    else:
                        row.append(-1)
                elif rule['function'] == 'rule14':
                    # Rule 14 implementation
                    if mol.HasSubstructMatch(patterns['acylated_amino_group']):
                        row.append(-1)
                    else:
                        row.append(0)
                elif rule['function'] == 'rule15':
                    # Rule 15 implementation
                    # Check for aromatic amino group
                    if mol.HasSubstructMatch(patterns['aromatic_amino_group']):
                        row.append(1)
                    else:
                        # Check for aliphatic amino group with short chain
                        amine_matches = mol.GetSubstructMatches(patterns['primary_amine'])
                        c_acid_matches = mol.GetSubstructMatches(patterns['carboxylic_acid'])
                        min_distance = None
                        for n_match in amine_matches:
                            n_idx = n_match[0]
                            for c_match in c_acid_matches:
                                c_idx = c_match[0]
                                path = Chem.rdmolops.GetShortestPath(mol, n_idx, c_idx)
                                distance = len([a for a in path if mol.GetAtomWithIdx(a).GetSymbol() == 'C']) - 1
                                if min_distance is None or distance < min_distance:
                                    min_distance = distance
                        if min_distance is not None:
                            if min_distance <= 5:
                                row.append(1)
                            else:
                                row.append(-1)
                        else:
                            row.append(-1)
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df
--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: **Modifiers that are α-amino dicarboxylic acids yield high yield.**
  - *Examples*: **(2S)-2-aminopentanedioic acid** (*Glutamic acid*), **(2S)-2-aminobutanedioic acid** (*Aspartic acid*).
  - *Rationale*: The presence of an α-amino group and two carboxylic acid groups allows for effective chelation with metal ions (such as Fe³⁺), enhancing catalyst stability and reactivity. This strong coordination increases the catalyst's efficiency, leading to a higher yield of the reaction.

- **Rule 2**: **Modifiers that are para-substituted benzoic acids with substituents capable of strong metal coordination (e.g., amino, nitro groups) yield high yield; those with non-coordinating or electron-withdrawing substituents (e.g., methyl, formyl, thiol groups) yield low yield.**
  - *High Yield Examples*: **4-aminobenzoic acid**, **4-nitrobenzoic acid**.
  - *Low Yield Examples*: **4-methylbenzoic acid**, **4-formylbenzoic acid**, **4-sulfanylbenzoic acid**.
  - *Rationale*: Substituents like amino and nitro groups can donate electron density or coordinate directly with metal centers, enhancing metal-ligand interactions and improving catalytic activity. In contrast, substituents like methyl or formyl groups are non-coordinating and may withdraw electron density from the ring, reducing the ability of the modifier to stabilize the metal catalyst, resulting in lower yields.

- **Rule 3**: **Modifiers with short aliphatic chains (up to eight carbons) yield high yield if they contain coordinating groups (e.g., amino, hydroxyl, thiol groups) near the carboxyl end; chains longer than eight carbons or with distal functional groups yield low yield.**
  - *High Yield Examples*: **5-aminopentanoic acid**, **octanoic acid**, **3-sulfanylpropanoic acid**.
  - *Low Yield Examples*: **7-aminoheptanoic acid**, **8-aminooctanoic acid**, **7-hydroxyheptanoic acid**.
  - *Rationale*: Short-chain modifiers with coordinating groups near the carboxyl group can effectively interact with metal centers due to proximity, enhancing coordination and catalytic activity. Simple fatty acids like octanoic acid may increase the hydrophobic environment around the catalyst, improving its performance. Longer chains with functional groups far from the carboxyl group have reduced coordination ability due to steric hindrance and decreased interaction with the metal center, leading to lower yields.

- **Rule 4**: **Modifiers with multiple hydroxyl groups, especially polyhydroxylated acids, yield high yield due to enhanced metal coordination.**
  - *Example*: **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (*Gluconic acid*).
  - *Rationale*: Multiple hydroxyl groups provide numerous coordination sites for metal ions, significantly enhancing metal-ligand interactions. This strong chelation stabilizes the metal catalyst, improving its reactivity and leading to higher yields in the reaction.

- **Rule 5**: **Modifiers with thiol (sulfhydryl) groups on short aliphatic chains yield high yield; thiol groups attached to aromatic rings yield low yield.**
  - *High Yield Example*: **3-sulfanylpropanoic acid**.
  - *Low Yield Example*: **4-sulfanylbenzoic acid**.
  - *Rationale*: Aliphatic thiols are flexible and can effectively coordinate with metal centers through the sulfur atom, forming strong metal-thiol bonds that enhance catalyst performance. In contrast, thiol groups attached to aromatic rings are less available for coordination due to the rigidity of the ring and possible resonance delocalization of the sulfur's lone pair, reducing their coordinating ability and resulting in lower yields.

- **Rule 6**: **Modifiers containing aldehyde (formyl) groups yield low yield due to potential deactivation of the catalyst.**
  - *Examples*: **4-formylbenzoic acid**, **5-formyl-2-hydroxybenzoic acid**.
  - *Rationale*: Aldehyde groups can react with metal ions or amino groups in the catalyst system, forming Schiff bases or other inactive complexes. This side reaction depletes the active catalyst species and deactivates the catalyst, leading to lower yields in the target reaction.

- **Rule 7**: **Modifiers with ether linkages yield low yield unless they contain additional strong coordinating groups like multiple hydroxyl or amino groups.**
  - *Low Yield Examples*: **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**, **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**.
  - *High Yield Exception*: **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid**.
  - *Rationale*: Ether oxygen atoms are relatively weak ligands for metal coordination due to their lone pairs being delocalized over adjacent atoms. Modifiers with ether linkages generally do not enhance catalyst performance unless they include additional strong coordinating groups (e.g., multiple hydroxyl groups) that can compensate by providing effective metal-binding sites.

- **Rule 8**: **Modifiers containing highly electronegative or electron-withdrawing substituents (e.g., perfluoroalkyl chains) yield low yield.**
  - *Example*: **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**.
  - *Rationale*: Electron-withdrawing groups like perfluoroalkyl chains reduce the electron density on coordinating atoms, weakening their ability to donate electron density to the metal center. This results in poor metal-ligand interactions, decreasing catalytic activity and leading to lower yields.

- **Rule 9**: **Modifiers that are amino acids with aromatic side chains yield low yield unless the aromatic ring contains an additional heteroatom capable of coordination.**
  - *Low Yield Example*: **(2S)-2-amino-3-phenylpropanoic acid** (*Phenylalanine*).
  - *High Yield Example*: **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (*Tryptophan*).
  - *Rationale*: Aromatic side chains without heteroatoms (like in phenylalanine) do not provide additional coordination sites for metal ions and thus do not enhance the catalyst's performance. In contrast, heteroaromatic rings (like the indole ring in tryptophan) contain nitrogen atoms that can coordinate with metal centers, improving catalyst stability and reactivity, leading to higher yields.

- **Rule 10**: **Modifiers with nitrogen-containing heterocycles directly attached to the carboxyl group yield high yield; if the nitrogen-containing ring is not directly attached, yield is low.**
  - *High Yield Examples*: **Pyridine-3-carboxylic acid** (*Niacin*), **1H-pyrazole-4-carboxylic acid**.
  - *Low Yield Example*: **4-pyridin-4-ylbenzoic acid**.
  - *Rationale*: When nitrogen-containing heterocycles are adjacent to the carboxyl group, they can form chelating bidentate ligands with metal ions, enhancing coordination and catalytic activity. If the heterocycle is separated by additional rings or linkers, this chelation is hindered, reducing the modifier's ability to stabilize the metal catalyst and decreasing yield.

- **Rule 11**: **Modifiers containing acylated amino groups (e.g., amide linkages) yield low yield due to reduced coordination ability.**
  - *Example*: **(2S)-6-acetamido-2-aminohexanoic acid**.
  - *Rationale*: Acylation converts amino groups into amides, which are poor ligands for metal coordination due to resonance delocalization of the lone pair on nitrogen. This decreases the modifier's ability to interact with and stabilize the metal catalyst, leading to lower yields.

- **Rule 12**: **Modifiers with phenolic hydroxyl groups on aliphatic chains of five carbons yield high yield; shorter chains with phenolic groups yield low yield due to steric constraints.**
  - *High Yield Example*: **5-(4-hydroxyphenyl)pentanoic acid**.
  - *Low Yield Example*: **3-(4-hydroxyphenyl)propanoic acid**.
  - *Rationale*: Longer aliphatic chains provide flexibility, allowing the phenolic hydroxyl group to effectively coordinate with metal centers, enhancing catalyst performance. Shorter chains limit the mobility of the phenolic group, hindering effective coordination due to steric constraints and leading to lower yields.

- **Rule 13**: **Modifiers with electron-rich aromatic systems connected to carbonyl-containing side chains yield high yield due to enhanced metal interactions.**
  - *Example*: **1,3-dioxo-2-benzofuran-5-carboxylic acid**.
  - *Rationale*: Electron-rich aromatic systems can engage in π-backbonding and coordinate with metal centers through their delocalized π-electron systems. When connected to carbonyl-containing side chains, these modifiers can stabilize the metal catalyst through multiple coordination modes, improving its reactivity and leading to higher yields.

**End of Rules**

These rules have been formulated to accurately describe the relationship between the structural features of molecular modifiers and the observed reaction yield. They consider combinations of functional groups and structural motifs, such as the presence of coordinating atoms (nitrogen, oxygen, sulfur), the position and type of substituents on aromatic rings, chain length, and electron-donating or -withdrawing effects. By applying these rules, one can predict whether a given molecular modifier is likely to result in a high or low yield in the radical-mediated remote δ-C(sp³)–H bond functionalization reaction based on its structure.

The rules prioritize broader coverage of the dataset while balancing simplicity and complexity. They combine multiple substructures when necessary to reflect the underlying physicochemical properties that influence catalyst performance, such as metal coordination ability, steric factors, and electronic effects. This approach ensures that the rules are comprehensive and can be effectively applied to a wide range of modifiers within the dataset.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 4,Rule 5,Rule 5.1,Rule 6,Rule 8,Rule 9,Rule 11
0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,0
0,1,0,0,0,0,0,0
0,1,0,0,0,0,0,0
0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0
0,1,0,0,-1,0,0,0
0,0,0,0,-1,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,1,0,0,0,0,0,-1
0,1,0,0,0,0,0,0
0,0,0,0,0,0,0,-1
0,1,0,0,0,0,0,0
0,1,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1
0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6857142857142857; Test Accuracy: 1.0
    Train Support: 0.06666666666666667; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 1.9444444444444446; Test Lift: NONE
    Train Leverage: 0.032380952380952385; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and substructures

    patterns = {}

    # General patterns
    patterns['carboxylic_acid'] = '[CX3](=O)[OX2H1]'  # Carboxylic acid group
    patterns['hydroxyl_group'] = '[OX2H]'  # Hydroxyl group
    patterns['aldehyde'] = '[CX3H1](=O)'  # Aldehyde group
    patterns['thiol'] = '[#16X2H]'  # Thiol group
    patterns['aliphatic_thiol'] = '[CX4][SX2H]'  # Aliphatic thiol
    patterns['aromatic_thiol'] = '[c][SX2H]'  # Aromatic thiol
    patterns['primary_amino'] = '[NX3;H2]'  # Primary amine
    patterns['amide'] = '[NX3][CX3](=O)[#6]'  # Amide linkage
    patterns['electron_withdrawing'] = '[F,Cl,Br,I]'  # Halogen atom
    patterns['perfluoroalkyl_chain'] = '[CX4]([F,Cl,Br,I])[F,Cl,Br,I][F,Cl,Br,I][F,Cl,Br,I]'  # At least 3 halogens attached to carbon
    patterns['aromatic_ring'] = 'a'  # Any aromatic atom
    patterns['aromatic_ring_with_nitrogen'] = '[n]1cccc1'  # Pyridine ring
    patterns['alpha_amino_acid'] = '[NX3;H2]-[CX4H]-[CX3](=O)[OX1H1]'  # α-amino acid backbone

    # Define the rules with their associated patterns and predictions

    rules = [
        {
            'number': 1,
            'description': 'High Yield: Modifiers that are α-amino dicarboxylic acids.',
            'patterns': [
                patterns['alpha_amino_acid'],  # α-amino acid backbone
            ],
            'extra_conditions': {
                'num_carboxylic_acid': 2  # At least 2 carboxylic acid groups
            },
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'High Yield: Modifiers with multiple hydroxyl groups (polyhydroxylated acids).',
            'patterns': [
                patterns['carboxylic_acid']
            ],
            'extra_conditions': {
                'num_hydroxyl_groups': 2  # At least 2 hydroxyl groups
            },
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'High Yield or Low Yield based on thiol group position.',
            'patterns': [
                patterns['aliphatic_thiol']  # Aliphatic thiol
            ],
            'prediction': 1
        },
        {
            'number': 5.1,
            'description': 'Low Yield if thiol is attached to aromatic ring.',
            'patterns': [
                patterns['aromatic_thiol']  # Aromatic thiol
            ],
            'prediction': -1
        },
        {
            'number': 6,
            'description': 'Low Yield: Modifiers containing aldehyde (formyl) groups.',
            'patterns': [
                patterns['aldehyde']
            ],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Low Yield: Modifiers containing highly electronegative substituents (e.g., perfluoroalkyl chains).',
            'patterns': [
                patterns['perfluoroalkyl_chain']
            ],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Low Yield for amino acids with aromatic side chains without coordinating heteroatoms.',
            'patterns': [
                patterns['aromatic_ring']
            ],
            'exclude_patterns': [
                patterns['aromatic_ring_with_nitrogen']
            ],
            'conditions': [
                patterns['alpha_amino_acid']
            ],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Low Yield: Modifiers with acylated amino groups (amide linkages).',
            'patterns': [
                patterns['amide']
            ],
            'prediction': -1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for smarts in rule.get('patterns', []):
            compiled_patterns.append(Chem.MolFromSmarts(smarts))
        rule['compiled_patterns'] = compiled_patterns

        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_exclude = []
            for smarts in rule['exclude_patterns']:
                compiled_exclude.append(Chem.MolFromSmarts(smarts))
            rule['compiled_exclude_patterns'] = compiled_exclude

        # Compile condition patterns if any
        if 'conditions' in rule:
            compiled_conditions = []
            for smarts in rule['conditions']:
                compiled_conditions.append(Chem.MolFromSmarts(smarts))
            rule['compiled_conditions'] = compiled_conditions

    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True

                # Check required conditions
                if 'compiled_conditions' in rule:
                    for pat in rule['compiled_conditions']:
                        if not mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue

                # Check exclude patterns if any
                if 'compiled_exclude_patterns' in rule:
                    for pat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue

                # Check required patterns
                for pat in rule['compiled_patterns']:
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if not match:
                    row.append(0)
                    continue

                # Check extra conditions if any
                if 'extra_conditions' in rule:
                    if 'num_carboxylic_acid' in rule['extra_conditions']:
                        num_cooh = len(mol.GetSubstructMatches(Chem.MolFromSmarts(patterns['carboxylic_acid'])))
                        if num_cooh < rule['extra_conditions']['num_carboxylic_acid']:
                            match = False
                    if 'num_hydroxyl_groups' in rule['extra_conditions']:
                        num_oh = len(mol.GetSubstructMatches(Chem.MolFromSmarts(patterns['hydroxyl_group'])))
                        if num_oh < rule['extra_conditions']['num_hydroxyl_groups']:
                            match = False
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df
--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: **Modifiers that are α-amino dicarboxylic acids yield high yield.**
  - *High Yield Examples*: **(2S)-2-aminopentanedioic acid** (*Glutamic acid*), **(2S)-2-aminobutanedioic acid** (*Aspartic acid*).
  - *Rationale*: The presence of an α-amino group and two carboxylic acid groups allows for strong chelation with metal ions like Fe³⁺. This enhances catalyst stability and reactivity by effectively bridging metal centers, leading to higher yields.

- **Rule 2**: **Modifiers that are para-substituted benzoic acids yield high yield if the substituent is an amino or nitro group; substituents like methyl, formyl, or thiol groups yield low yield.**
  - *High Yield Examples*: **4-aminobenzoic acid**, **4-nitrobenzoic acid**.
  - *Low Yield Examples*: **4-methylbenzoic acid**, **4-formylbenzoic acid**, **4-sulfanylbenzoic acid**.
  - *Rationale*: Amino and nitro groups can coordinate with metal centers or influence electron density favorably, enhancing metal-ligand interactions. Methyl and formyl groups are non-coordinating and may reduce electron density, weakening the modifier's ability to stabilize the metal catalyst.

- **Rule 3**: **Modifiers that are aliphatic carboxylic acids with chain lengths of 5 to 8 carbons yield high yield if they contain coordinating groups (e.g., amino, hydroxyl) near the carboxyl end; longer chains without proximal coordinating groups yield low yield.**
  - *High Yield Examples*: **5-aminopentanoic acid**, **octanoic acid**.
  - *Low Yield Examples*: **7-aminoheptanoic acid**, **8-aminooctanoic acid**.
  - *Rationale*: Short to medium-chain fatty acids with coordinating groups near the carboxylate can effectively bind metal centers, enhancing catalytic activity. Longer chains or distal functional groups reduce coordination efficiency due to increased steric hindrance.

- **Rule 4**: **Modifiers with multiple hydroxyl groups on an aliphatic backbone yield high yield due to enhanced metal coordination through multiple binding sites.**
  - *High Yield Example*: **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (*Gluconic acid*).
  - *Rationale*: Multiple hydroxyl groups provide several coordination points, enabling strong chelation with metal ions. This increases catalyst stability and reactivity.

- **Rule 5**: **Modifiers containing aldehyde (formyl) groups yield low yield due to potential catalyst deactivation through side reactions.**
  - *Low Yield Examples*: **4-formylbenzoic acid**, **5-formyl-2-hydroxybenzoic acid**.
  - *Rationale*: Aldehyde groups can react with amino groups or metal ions in the catalyst system, forming inactive complexes. This depletes active catalyst species and reduces reaction yield.

- **Rule 6**: **Modifiers with thiol (sulfhydryl) groups on short aliphatic chains yield high yield; thiol groups attached directly to aromatic rings yield low yield.**
  - *High Yield Example*: **3-sulfanylpropanoic acid**.
  - *Low Yield Example*: **4-sulfanylbenzoic acid**.
  - *Rationale*: Aliphatic thiols are flexible and can form strong bonds with metal centers through the sulfur atom. Aromatic thiols are less effective due to the rigidity of the aromatic system and delocalization of the sulfur's lone pair electrons, reducing their coordinating ability.

- **Rule 7**: **Modifiers with nitrogen-containing heterocycles directly attached to the carboxyl group yield high yield; if the nitrogen-containing ring is separated by additional rings or linkers, yield is low.**
  - *High Yield Examples*: **Pyridine-3-carboxylic acid** (*Niacin*), **1H-pyrazole-4-carboxylic acid**.
  - *Low Yield Example*: **4-pyridin-4-ylbenzoic acid**.
  - *Rationale*: Direct attachment allows for effective chelation through bidentate coordination, enhancing metal-ligand interactions. Separation by additional structures hinders this interaction, reducing catalytic efficiency.

- **Rule 8**: **Modifiers containing electron-withdrawing groups like perfluoroalkyl chains yield low yield.**
  - *Low Yield Example*: **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**.
  - *Rationale*: Electron-withdrawing groups decrease electron density on coordinating atoms, weakening their ability to donate electrons to metal centers and leading to poor coordination.

- **Rule 9**: **Modifiers with ether linkages yield low yield unless they contain additional strong coordinating groups like multiple hydroxyl or amino groups.**
  - *Low Yield Examples*: **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**.
  - *High Yield Exception*: **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid** (due to multiple hydroxyl groups).
  - *Rationale*: Ether oxygen atoms are weakly coordinating. Additional strong coordinating groups are necessary to enhance metal-ligand interactions and improve catalytic activity.

- **Rule 10**: **Modifiers that are amino acids with aromatic side chains yield high yield if the aromatic ring contains an additional heteroatom capable of coordination (e.g., nitrogen in indole); otherwise, yield is low.**
  - *High Yield Example*: **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (*Tryptophan*).
  - *Low Yield Example*: **(2S)-2-amino-3-phenylpropanoic acid** (*Phenylalanine*).
  - *Rationale*: Aromatic side chains with heteroatoms can coordinate with metal centers, enhancing catalyst stability and reactivity. Without heteroatoms, the side chains do not provide additional coordination sites.

- **Rule 11**: **Modifiers containing multiple methoxy groups on aromatic rings yield high yield due to increased electron density and enhanced metal coordination ability.**
  - *High Yield Example*: **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid**.
  - *Rationale*: Methoxy groups are electron-donating, increasing the electron density of the aromatic ring and enhancing its ability to interact with metal centers, improving catalyst performance.

- **Rule 12**: **Modifiers where amino groups are acylated (forming amide linkages) yield low yield due to reduced coordination ability of the nitrogen atom.**
  - *Low Yield Example*: **(2S)-6-acetamido-2-aminohexanoic acid**.
  - *Rationale*: In amide groups, the lone pair on nitrogen is delocalized with the carbonyl group, making it less available for metal coordination. This weakens interaction with the catalyst and decreases yield.

- **Rule 13**: **Modifiers with side chains containing trifluoroacetyl groups yield low yield due to strong electron-withdrawing effects.**
  - *Low Yield Example*: **4-[(2,2,2-trifluoroacetyl)amino]butanoic acid**.
  - *Rationale*: Trifluoroacetyl groups withdraw electron density from coordinating atoms, weakening their ability to bind metal ions and decreasing catalytic efficiency.

- **Rule 14**: **Modifiers with phenolic hydroxyl groups on longer aliphatic chains (five carbons or more) yield high yield; with shorter chains, yield is low due to reduced flexibility.**
  - *High Yield Example*: **5-(4-hydroxyphenyl)pentanoic acid**.
  - *Low Yield Example*: **3-(4-hydroxyphenyl)propanoic acid**.
  - *Rationale*: Longer aliphatic chains provide flexibility, allowing the phenolic hydroxyl group to effectively coordinate with metal centers. Shorter chains limit mobility and hinder coordination.

- **Rule 15**: **Modifiers containing keto groups adjacent to carboxylic acids yield low yield due to potential side reactions or catalyst deactivation.**
  - *Low Yield Examples*: **4-oxoheptanedioic acid**, **5-formyl-2-hydroxybenzoic acid**.
  - *Rationale*: Keto groups can engage in side reactions with catalyst components or reduce the availability of coordinating sites, leading to decreased catalyst effectiveness.

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15,Rule 16,Rule 17,Rule 18,Rule 19,Rule 20
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,-1,0,0,1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,-1,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.7142857142857143; Test Accuracy: 1.0
    Train Support: 0.06428571428571428; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 1.9444444444444446; Test Lift: NONE
    Train Leverage: 0.031224489795918374; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and structural features used in the rules
    
    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX1H0-,OX2H1]'
    
    # Primary amine group (-NH2)
    primary_amine = '[NX3;H2]'
    
    # Alpha-amino acid backbone (Rule 1)
    alpha_amino_acid = '[NX3;H2][CX4H][CX3](=O)[OX1H0-,OX2H1]'
    
    # Counting carboxylic acid groups
    carboxylic_acid_count_pattern = '[CX3](=O)[OX1H0-,OX2H1]'
    
    # Para-substituted benzoic acid template (Rule 2 and Rule 3)
    para_substituted_benzoic_acid_template = 'c1ccc([*:1])cc1C(=O)[O-,OH]'
    
    # Substituents for high yield (amino or nitro groups)
    amino_substituent = 'N'
    nitro_substituent = '[N+](=O)[O-]'
    
    # Substituents for low yield (methyl, formyl, thiol groups)
    methyl_substituent = 'C'
    formyl_substituent = 'C=O'
    thiol_substituent = 'S'
    
    # Aliphatic carboxylic acids with chain lengths of 5 to 8 carbons (Rule 3 and 5)
    aliphatic_chain_5_8 = '[CH2]4,7[CX3](=O)[OX1H0-,OX2H1]'
    
    # Amino or hydroxyl group near carboxyl end
    amino_near_carboxyl = '[NX3][CH2][CX3](=O)[OX1H0-,OX2H1]'
    hydroxyl_near_carboxyl = '[OX2H][CH2][CX3](=O)[OX1H0-,OX2H1]'
    
    # Multiple hydroxyl groups on aliphatic backbone (Rule 4)
    multiple_hydroxyls = '[#6][OX2H][#6][OX2H]'  # At least two hydroxyl groups on aliphatic carbons
    
    # Aldehyde group (Rule 5 and 15)
    aldehyde_group = '[CX3H](=O)'
    
    # Thiol groups on aliphatic and aromatic chains (Rule 6)
    thiol_aliphatic_chain = '[SX2H][CH2][CX3](=O)[OX1H0-,OX2H1]'
    thiol_aromatic_ring = 'c[SX2H]'
    
    # Nitrogen-containing heterocycles directly attached to carboxyl group (Rule 7)
    nitrogen_heterocycle_carboxylic_acid = '[nH0;!$(n[a])][c][CX3](=O)[OX1H0-,OX2H1]'
    
    # Electron-withdrawing perfluoroalkyl chains (Rule 8)
    perfluoroalkyl_chain = '[CX4]([F])([F])[F]'
    
    # Ether linkages (Rule 9)
    ether_linkage = '[#6][OX2][#6]'
    
    # Multiple methoxy groups on aromatic rings (Rule 11)
    methoxy_on_aromatic = 'c[OX2][CH3]'
    
    # Acylated amino groups (amide linkages) (Rule 12)
    acylated_amino_group = '[NX3][CX3](=O)'
    
    # Trifluoroacetyl groups (Rule 13)
    trifluoroacetyl_group = '[CX3](=O)[CX4]([F])([F])[F]'
    
    # Phenolic hydroxyl groups on longer aliphatic chains (five carbons or more) (Rule 14)
    phenolic_hydroxyl_long_chain = 'c[OX2H][CH2][CH2][CH2][CH2][CX3](=O)[OX1H0-,OX2H1]'
    phenolic_hydroxyl_short_chain = 'c[OX2H][CH2][CH2][CX3](=O)[OX1H0-,OX2H1]'
    
    # Keto groups adjacent to carboxylic acids (Rule 15)
    keto_adjacent_carboxylic_acid = '[CX3](=O)[CX3](=O)[OX1H0-,OX2H1]'
    
    # Define the rules
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are α-amino dicarboxylic acids yield high yield.',
            'patterns': [
                [alpha_amino_acid],
                [carboxylic_acid_count_pattern],
            ],
            'count_threshold': {carboxylic_acid_count_pattern: 2},  # At least two carboxylic acid groups
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'High yield if para-substituted benzoic acids have amino or nitro group.',
            'patterns': [
                [para_substituted_benzoic_acid_template.replace('[*:1]', amino_substituent)],
                [para_substituted_benzoic_acid_template.replace('[*:1]', nitro_substituent)]
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Low yield if para-substituted benzoic acids have methyl, formyl, or thiol group.',
            'patterns': [
                [para_substituted_benzoic_acid_template.replace('[*:1]', methyl_substituent)],
                [para_substituted_benzoic_acid_template.replace('[*:1]', formyl_substituent)],
                [para_substituted_benzoic_acid_template.replace('[*:1]', thiol_substituent)]
            ],
            'prediction': -1
        },
        {
            'number': 4,
            'description': 'High yield for aliphatic carboxylic acids (5-8 carbons) with coordinating groups near carboxyl end.',
            'patterns': [
                [aliphatic_chain_5_8],
                [amino_near_carboxyl, hydroxyl_near_carboxyl]
            ],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Low yield for longer chains without proximal coordinating groups.',
            'patterns': [
                '[CH2]9,100[CX3](=O)[OX1H0-,OX2H1]'  # Chains longer than 8 carbons ending with carboxylic acid
            ],
            'exclude_patterns': [
                [amino_near_carboxyl, hydroxyl_near_carboxyl]
            ],
            'prediction': -1
        },
        {
            'number': 6,
            'description': 'High yield for modifiers with multiple hydroxyl groups on an aliphatic backbone.',
            'patterns': [
                [multiple_hydroxyls]
            ],
            'prediction': 1
        },
        {
            'number': 7,
            'description': 'Low yield if modifiers contain aldehyde (formyl) groups.',
            'patterns': [
                [aldehyde_group]
            ],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'High yield if thiol groups on short aliphatic chains.',
            'patterns': [
                [thiol_aliphatic_chain]
            ],
            'prediction': 1
        },
        {
            'number': 9,
            'description': 'Low yield if thiol groups attached directly to aromatic rings.',
            'patterns': [
                [thiol_aromatic_ring]
            ],
            'prediction': -1
        },
        {
            'number': 10,
            'description': 'High yield if nitrogen-containing heterocycles directly attached to carboxyl group.',
            'patterns': [
                [nitrogen_heterocycle_carboxylic_acid]
            ],
            'prediction': 1
        },
        {
            'number': 11,
            'description': 'Low yield if modifiers contain electron-withdrawing perfluoroalkyl chains.',
            'patterns': [
                [perfluoroalkyl_chain]
            ],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'Low yield if modifiers with ether linkages without strong coordinating groups.',
            'patterns': [
                [ether_linkage]
            ],
            'exclude_patterns': [
                [multiple_hydroxyls, primary_amine]
            ],
            'prediction': -1
        },
        {
            'number': 13,
            'description': 'High yield if amino acids with aromatic side chains containing coordinating heteroatoms.',
            'patterns': [
                ['[NX3;H2][CX4][CX3](=O)[OX1H0-,OX2H1][CX4][c][n]']  # Amino acid with aromatic side chain containing nitrogen
            ],
            'prediction': 1
        },
        {
            'number': 14,
            'description': 'Low yield if amino acids with aromatic side chains lacking coordinating heteroatoms.',
            'patterns': [
                ['[NX3;H2][CX4][CX3](=O)[OX1H0-,OX2H1][CX4][c][c]']  # Amino acid with aromatic side chain lacking heteroatoms
            ],
            'prediction': -1
        },
        {
            'number': 15,
            'description': 'High yield if modifiers contain multiple methoxy groups on aromatic rings.',
            'patterns': [
                [methoxy_on_aromatic]
            ],
            'count_threshold': {methoxy_on_aromatic: 2},  # At least two methoxy groups
            'prediction': 1
        },
        {
            'number': 16,
            'description': 'Low yield if amino groups are acylated (amide linkages).',
            'patterns': [
                [acylated_amino_group]
            ],
            'prediction': -1
        },
        {
            'number': 17,
            'description': 'Low yield if modifiers with side chains containing trifluoroacetyl groups.',
            'patterns': [
                [trifluoroacetyl_group]
            ],
            'prediction': -1
        },
        {
            'number': 18,
            'description': 'High yield if phenolic hydroxyl groups on longer aliphatic chains (five carbons or more).',
            'patterns': [
                [phenolic_hydroxyl_long_chain]
            ],
            'prediction': 1
        },
        {
            'number': 19,
            'description': 'Low yield if phenolic hydroxyl groups on shorter aliphatic chains.',
            'patterns': [
                [phenolic_hydroxyl_short_chain]
            ],
            'prediction': -1
        },
        {
            'number': 20,
            'description': 'Low yield if modifiers containing keto groups adjacent to carboxylic acids.',
            'patterns': [
                [keto_adjacent_carboxylic_acid]
            ],
            'prediction': -1
        }
    ]
    
    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(pat) for pat in group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_excludes = []
            for group in rule['exclude_patterns']:
                compiled_group = [Chem.MolFromSmarts(pat) for pat in group]
                compiled_excludes.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_excludes
    
    # Initialize results list
    results = []
    
    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        matches = mol.GetSubstructMatches(pat)
                        if matches:
                            # If a count threshold is specified for this pattern
                            if 'count_threshold' in rule:
                                smarts = Chem.MolToSmarts(pat)
                                if smarts in rule['count_threshold']:
                                    threshold = rule['count_threshold'][smarts]
                                    if len(matches) >= threshold:
                                        group_match = True
                                        break
                                else:
                                    group_match = True
                                    break
                            else:
                                group_match = True
                                break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: **Modifiers that are α-amino dicarboxylic acids yield high yield.**
  - *High Yield Examples*: **(2S)-2-aminopentanedioic acid** (*Glutamic acid*), **(2S)-2-aminobutanedioic acid** (*Aspartic acid*).
  - *Rationale*: The presence of an α-amino group and two carboxylic acid groups allows these molecules to effectively chelate metal ions through multiple coordination sites, enhancing catalyst stability and reactivity.

- **Rule 2**: **Modifiers that are para-substituted benzoic acids yield high yield if the substituent is an amino, nitro, or halomethyl group; substituents like methyl or formyl groups yield low yield.**
  - *High Yield Examples*: **4-aminobenzoic acid**, **4-nitrobenzoic acid**, **4-(bromomethyl)benzoic acid**.
  - *Low Yield Examples*: **4-methylbenzoic acid**, **4-formylbenzoic acid**.
  - *Rationale*: Substituents capable of coordinating with metal centers or influencing electron density favorably (e.g., amino, nitro, halomethyl groups) enhance metal-ligand interactions. Non-coordinating or electron-neutral groups like methyl or electron-withdrawing formyl groups do not contribute to catalyst effectiveness.

- **Rule 3**: **Modifiers containing multiple hydroxyl groups or polyhydroxy structures yield high yield due to enhanced metal coordination through multiple binding sites.**
  - *High Yield Examples*: **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (*Gluconic acid*), **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid**.
  - *Rationale*: Multiple hydroxyl groups provide several coordination points for metal ions, strengthening catalyst stability and reactivity through chelation.

- **Rule 4**: **Modifiers with aliphatic chains (3 to 6 carbons) bearing amino or thiol groups yield high yield; longer chains without additional coordinating groups yield low yield.**
  - *High Yield Examples*: **5-aminopentanoic acid**, **3-sulfanylpropanoic acid**.
  - *Low Yield Examples*: **Octanoic acid**, **7-aminoheptanoic acid**, **8-aminooctanoic acid**.
  - *Rationale*: Optimal chain lengths ensure effective interaction of coordinating groups with metal centers without steric hindrance. Longer chains lacking additional coordinating functionalities have reduced coordination efficiency.

- **Rule 5**: **Modifiers that are nitrogen-containing heterocyclic carboxylic acids yield high yield when the carboxyl group is directly attached to the ring without additional linkers.**
  - *High Yield Examples*: **Pyridine-3-carboxylic acid** (*Niacin*), **1H-pyrazole-4-carboxylic acid**, **1,3-dioxo-2-benzofuran-5-carboxylic acid**.
  - *Low Yield Examples*: **4-pyridin-4-ylbenzoic acid**, **2-[(4-hydroxybenzoyl)amino]acetic acid**.
  - *Rationale*: Direct attachment facilitates strong bidentate coordination with metal ions, enhancing catalyst interaction. Linkers or additional rings can hinder effective coordination, reducing catalytic efficiency.

- **Rule 6**: **Modifiers containing aldehyde (formyl), ketone, or thiol groups adjacent to the carboxylic acid yield low yield due to potential catalyst deactivation through side reactions or strong binding.**
  - *Low Yield Examples*: **4-formylbenzoic acid**, **5-formyl-2-hydroxybenzoic acid**, **4-oxoheptanedioic acid**, **4-sulfanylbenzoic acid**.
  - *Rationale*: Reactive functional groups like aldehydes, ketones, and thiols can form inactive complexes with metal ions or participate in side reactions, decreasing the availability of active catalyst species and lowering the reaction yield.

- **Rule 7**: **Modifiers with electron-withdrawing groups such as perfluoroalkyl, trifluoromethyl chains, or extensive methoxy substitutions yield low yield.**
  - *Low Yield Examples*: **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**, **4-[(2,2,2-trifluoroacetyl)amino]butanoic acid**, **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid**.
  - *Rationale*: Electron-withdrawing groups reduce electron density on coordinating atoms, weakening metal-ligand interactions. Extensive methoxy substitution may introduce steric hindrance or disrupt effective coordination.

- **Rule 8**: **Modifiers that are amino acids with aromatic side chains yield high yield if the side chain contains heteroatoms capable of coordination (e.g., nitrogen in indole); otherwise, yield is low.**
  - *High Yield Example*: **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (*Tryptophan*).
  - *Low Yield Example*: **(2S)-2-amino-3-phenylpropanoic acid** (*Phenylalanine*).
  - *Rationale*: Heteroatoms in aromatic side chains enhance coordination with metal centers, improving catalyst stability and reactivity. Aromatic rings without heteroatoms do not contribute additional coordination sites.

- **Rule 9**: **Modifiers with phenolic hydroxyl groups attached to flexible aliphatic chains yield high yield when the chain length is optimal (4 carbons or more); shorter chains yield low yield.**
  - *High Yield Example*: **5-(4-hydroxyphenyl)pentanoic acid**.
  - *Low Yield Example*: **3-(4-hydroxyphenyl)propanoic acid**.
  - *Rationale*: Sufficient chain length provides flexibility for the phenolic hydroxyl group to coordinate effectively with metal centers. Shorter chains limit mobility, hindering coordination.

- **Rule 10**: **Modifiers with acylated amino groups or extensive ether linkages yield low yield due to reduced coordination ability and steric hindrance.**
  - *Low Yield Examples*: **(2S)-6-acetamido-2-aminohexanoic acid**, **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**.
  - *Rationale*: Acylation decreases the availability of lone pairs on nitrogen for coordination. Extensive ether linkages may introduce flexibility and steric hindrance, reducing effective metal-ligand interactions.

- **Rule 11**: **Modifiers that are simple aliphatic carboxylic acids without additional coordinating groups yield low yield.**
  - *Low Yield Examples*: **Octanoic acid**, **7-hydroxyheptanoic acid**.
  - *Rationale*: Lack of additional coordinating functionalities (e.g., amino, hydroxyl, or thiol groups) results in weak metal-ligand interactions, leading to lower catalyst effectiveness.

- **Rule 12**: **Modifiers containing flexible ether chains terminating with carboxylic acid groups yield low yield due to decreased electron density and coordination ability.**
  - *Low Yield Example*: **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**.
  - *Rationale*: Ether oxygen atoms are less effective in metal coordination compared to nitrogen or sulfur, and the flexibility of ether chains may hinder optimal alignment for coordination, reducing catalyst activity.

- **Rule 13**: **Modifiers with sulfide or methylthio groups in the side chain yield low yield due to potential catalyst poisoning or deactivation.**
  - *Low Yield Example*: **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid**.
  - *Rationale*: Sulfide groups can bind strongly to metal centers, potentially deactivating the catalyst by blocking active sites.

**End of Rules**---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 2,Rule 3,Rule 4,Rule 4,Rule 5,Rule 6
0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0
0,0,0,1,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,1,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.6285714285714286; Test Accuracy: 0.0
    Train Support: 0.05714285714285714; Test Support: 0.0
    Train Confidence: 1.0; Test Confidence: 0.5
    Train Lift: 2.058823529411765; Test Lift: NONE
    Train Leverage: 0.029387755102040815; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and structural features corresponding to each rule.

    # Carboxylic acid group (-COOH)
    carboxylic_acid = '[CX3](=O)[OX2H1]'

    # Amino group (-NH2)
    amino_group = '[NX3;H2]'

    # Alpha amino acid pattern: amino group connected to alpha carbon, which is connected to carboxylic acid
    alpha_amino_acid_pattern = '[NX3;H2][CX4H]([*])[CX3](=O)[OX2H1]'

    # Rule 1: Modifiers that are α-amino dicarboxylic acids yield high yield.
    # Check for α-amino acid with at least two carboxylic acid groups
    rule1 = {
        'number': 1,
        'description': 'Modifiers that are α-amino dicarboxylic acids yield high yield.',
        'patterns': [
            [alpha_amino_acid_pattern],  # Alpha amino acid pattern
        ],
        'count_patterns': [
            (carboxylic_acid, 2)  # At least two carboxylic acid groups
        ],
        'prediction': 1
    }

    # Rule 2: Para-substituted benzoic acids with specific substituents
    # Benzoic acid core
    benzoic_acid_core = 'c1ccc(cc1)C(=O)[OX2H1]'

    # High yield substituents at para position
    para_amino = 'O=C([OX2H1])c1ccc(N)cc1'
    para_nitro = 'O=C([OX2H1])c1ccc([N+](=O)[O-])cc1'
    para_halomethyl = 'O=C([OX2H1])c1ccc(C[Cl,Br,I,F])cc1'

    # Low yield substituents at para position
    para_methyl = 'O=C([OX2H1])c1ccc(C)cc1'
    para_formyl = 'O=C([OX2H1])c1ccc(C=O)cc1'

    rule2_high = {
        'number': 2,
        'description': 'High yield for para-substituted benzoic acids with amino, nitro, or halomethyl group.',
        'patterns': [
            [para_amino],
            [para_nitro],
            [para_halomethyl],
        ],
        'prediction': 1
    }

    rule2_low = {
        'number': 2,
        'description': 'Low yield for para-substituted benzoic acids with methyl or formyl group.',
        'patterns': [
            [para_methyl],
            [para_formyl],
        ],
        'prediction': -1
    }

    # Rule 3: Modifiers containing multiple hydroxyl groups yield high yield
    hydroxyl_group = '[OX2H]'
    rule3 = {
        'number': 3,
        'description': 'Modifiers with multiple hydroxyl groups yield high yield.',
        'count_patterns': [
            (hydroxyl_group, 3)  # At least 3 hydroxyl groups
        ],
        'prediction': 1
    }

    # Rule 4: Aliphatic chains (3 to 6 carbons) with amino or thiol groups yield high yield; longer chains without additional groups yield low yield.
    aliphatic_chain_3_6 = '[C;X4H2][C;X4H2][C;X4H2][C;X4H2]?'  # Chain of 3 or 4 carbons
    amino_or_thiol = '[NX3;H2,H1][CX4H2]', '[SX2H]'
    long_chain = '[C;X4H2][C;X4H2][C;X4H2][C;X4H2][C;X4H2][C;X4H2]'

    rule4_high = {
        'number': 4,
        'description': 'Modifiers with 3-6 carbon aliphatic chains bearing amino or thiol groups yield high yield.',
        'patterns': [
            [aliphatic_chain_3_6 + amino_or_thiol[0]],
            [aliphatic_chain_3_6 + amino_or_thiol[1]],
        ],
        'prediction': 1
    }

    rule4_low = {
        'number': 4,
        'description': 'Modifiers with long chains without additional coordinating groups yield low yield.',
        'patterns': [
            [long_chain],
        ],
        'exclude_patterns': [
            [amino_or_thiol[0]],
            [amino_or_thiol[1]],
        ],
        'prediction': -1
    }

    # Rule 5: Nitrogen-containing heterocyclic carboxylic acids yield high yield when carboxyl group is directly attached to the ring
    heterocyclic_acid = '[n][c](:[c]):[c]C(=O)[OX2H1]'  # Simplified pattern
    rule5 = {
        'number': 5,
        'description': 'Nitrogen-containing heterocyclic carboxylic acids with carboxyl group directly attached to the ring yield high yield.',
        'patterns': [
            [heterocyclic_acid],
        ],
        'prediction': 1
    }

    # Rule 6: Modifiers containing aldehyde, ketone, or thiol groups adjacent to carboxylic acid yield low yield
    adjacent_aldehyde = '[CX3](=O)[CX3H1]C(=O)[OX2H1]'
    adjacent_ketone = '[#6][CX3](=O)[#6]C(=O)[OX2H1]'
    adjacent_thiol = '[SX2H][CX4][CX3](=O)[OX2H1]'
    rule6 = {
        'number': 6,
        'description': 'Modifiers with aldehyde, ketone, or thiol groups adjacent to carboxylic acid yield low yield.',
        'patterns': [
            [adjacent_aldehyde],
            [adjacent_ketone],
            [adjacent_thiol],
        ],
        'prediction': -1
    }

    # Remaining rules would be defined similarly...

    # Collect all rules
    rules = [
        rule1,
        rule2_high,
        rule2_low,
        rule3,
        rule4_high,
        rule4_low,
        rule5,
        rule6,
        # Add remaining rules here
    ]

    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = []
        for group in rule.get('patterns', []):
            compiled_group = [Chem.MolFromSmarts(p) for p in group]
            compiled_patterns.append(compiled_group)
        rule['compiled_patterns'] = compiled_patterns
        # Compile count patterns if any
        if 'count_patterns' in rule:
            compiled_count_patterns = []
            for pat, count in rule['count_patterns']:
                compiled_count_patterns.append((Chem.MolFromSmarts(pat), count))
            rule['compiled_count_patterns'] = compiled_count_patterns
        # Compile exclude patterns if any
        if 'exclude_patterns' in rule:
            compiled_exclude_patterns = []
            for group in rule['exclude_patterns']:
                compiled_group = [Chem.MolFromSmarts(p) for p in group]
                compiled_exclude_patterns.append(compiled_group)
            rule['compiled_exclude_patterns'] = compiled_exclude_patterns

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check count patterns if any
                if 'compiled_count_patterns' in rule:
                    for pat, min_count in rule['compiled_count_patterns']:
                        matches = mol.GetSubstructMatches(pat)
                        if len(matches) < min_count:
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check exclude patterns if any
                if 'compiled_exclude_patterns' in rule:
                    for group in rule['compiled_exclude_patterns']:
                        for pat in group:
                            if mol.HasSubstructMatch(pat):
                                match = False
                                break
                        if not match:
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for compiled_group in rule['compiled_patterns']:
                    group_match = False
                    for pat in compiled_group:
                        if mol.HasSubstructMatch(pat):
                            group_match = True
                            break
                    if not group_match:
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

- **Rule 1**: **Modifiers that are α-amino dicarboxylic acids yield high yield.**
  - *High Yield Examples*: **(2S)-2-aminopentanedioic acid** (*Glutamic acid*), **(2S)-2-aminobutanedioic acid** (*Aspartic acid*).
  - *Rationale*: The presence of an α-amino group and two carboxylic acid groups provides multiple coordination sites for metal ions, enhancing catalyst stability and reactivity through effective chelation.

- **Rule 2**: **Para-substituted benzoic acids yield high yield when the substituent is a coordinating group like amino, nitro, or bromomethyl; substituents like methyl or formyl yield low yield.**
  - *High Yield Examples*: **4-aminobenzoic acid**, **4-nitrobenzoic acid**, **4-(bromomethyl)benzoic acid**.
  - *Low Yield Examples*: **4-methylbenzoic acid**, **4-formylbenzoic acid**.
  - *Rationale*: Substituents capable of coordinating with metal centers enhance metal-ligand interactions, improving catalyst performance. Non-coordinating groups do not contribute effectively, leading to lower yields.

- **Rule 3**: **Modifiers with multiple hydroxyl groups adjacent to the carboxylic acid yield high yield; modifiers with single or distant hydroxyl groups yield low yield.**
  - *High Yield Examples*: **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (*Gluconic acid*), **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]acetic acid**.
  - *Low Yield Example*: **7-hydroxyheptanoic acid**.
  - *Rationale*: Multiple adjacent hydroxyl groups enhance chelation with metal centers due to increased coordination sites, improving catalyst effectiveness. Distant or fewer hydroxyl groups offer limited coordination.

- **Rule 4**: **Modifiers that are aliphatic carboxylic acids with chain lengths of 6 to 8 carbons and lacking additional functional groups yield high yield.**
  - *High Yield Example*: **Octanoic acid**.
  - *Rationale*: Optimal chain length may facilitate favorable interactions with the catalyst surface without steric hindrance from additional functional groups, enhancing catalytic activity.

- **Rule 5**: **Modifiers that are amino acids with aromatic side chains containing coordinating heteroatoms yield high yield; those without such heteroatoms yield low yield.**
  - *High Yield Example*: **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (*Tryptophan*).
  - *Low Yield Example*: **(2S)-2-amino-3-phenylpropanoic acid** (*Phenylalanine*).
  - *Rationale*: Heteroatoms like nitrogen in aromatic side chains provide additional coordination sites for metal ions, enhancing catalyst activity. Aromatic side chains lacking heteroatoms do not offer this advantage.

- **Rule 6**: **Modifiers containing ether linkages and terminating with a carboxylic acid yield low yield due to decreased coordination ability and increased conformational flexibility.**
  - *Low Yield Examples*: **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**, **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**.
  - *Rationale*: Ether oxygen atoms are less effective in coordinating with metal ions compared to nitrogen or sulfur, and the flexibility introduced by ether linkages can hinder optimal alignment of coordinating groups with metal centers.

- **Rule 7**: **Modifiers with electron-withdrawing perfluoroalkyl groups yield low yield due to decreased electron density on coordinating atoms.**
  - *Low Yield Example*: **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**.
  - *Rationale*: Strong electron-withdrawing groups reduce the ability of coordinating atoms (e.g., oxygen in carboxyl groups) to donate electron density to metal ions, weakening the metal-ligand interaction necessary for effective catalysis.

- **Rule 8**: **Modifiers with acylated amino groups yield low yield due to reduced availability of lone pair electrons for metal coordination.**
  - *Low Yield Example*: **(2S)-6-acetamido-2-aminohexanoic acid**.
  - *Rationale*: Acylation of amino groups diminishes their nucleophilicity and ability to coordinate with metal centers, resulting in less effective catalyst modification.

- **Rule 9**: **Modifiers with thiol groups adjacent to the carboxylic acid yield high yield; those with thiol groups directly attached to an aromatic ring yield low yield.**
  - *High Yield Example*: **3-sulfanylpropanoic acid**.
  - *Low Yield Example*: **4-sulfanylbenzoic acid**.
  - *Rationale*: Aliphatic thiol groups can coordinate effectively with metal ions when appropriately positioned, enhancing catalyst activity. Aromatic thiol groups may interact differently, potentially leading to catalyst poisoning or less effective coordination.

- **Rule 10**: **Modifiers containing aldehyde (formyl) groups yield low yield due to potential catalyst deactivation through side reactions.**
  - *Low Yield Examples*: **4-formylbenzoic acid**, **5-formyl-2-hydroxybenzoic acid**.
  - *Rationale*: Reactive aldehyde groups may form irreversible adducts with the catalyst or participate in side reactions, reducing the availability of active catalytic sites.

- **Rule 11**: **Modifiers with long aliphatic chains (greater than 6 carbons) bearing amino or hydroxyl groups yield low yield due to decreased coordination efficiency.**
  - *Low Yield Examples*: **7-aminoheptanoic acid**, **8-aminooctanoic acid**, **7-hydroxyheptanoic acid**.
  - *Rationale*: Extended chain length separates the functional group from the carboxylic acid, reducing the likelihood of simultaneous coordination and diminishing the modifier's ability to enhance catalyst performance.

- **Rule 12**: **Modifiers that are nitrogen-containing heterocyclic carboxylic acids yield high yield when the carboxyl group is directly attached to the heterocyclic ring without additional linkers.**
  - *High Yield Examples*: **Pyridine-3-carboxylic acid** (*Niacin*), **1H-pyrazole-4-carboxylic acid**.
  - *Low Yield Example*: **4-pyridin-4-ylbenzoic acid**.
  - *Rationale*: Direct attachment of the carboxyl group to the heterocycle enables effective bidentate coordination, enhancing catalyst interactions. Additional linkers or aromatic rings can disrupt optimal coordination geometry.

- **Rule 13**: **Modifiers with electron-donating methoxy groups on aromatic rings yield high yield due to increased electron density enhancing metal coordination.**
  - *High Yield Example*: **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid**.
  - *Rationale*: Methoxy groups are strong electron donors, increasing electron density on the aromatic ring and adjacent functional groups, which can improve metal-ligand interactions critical for catalysis.

- **Rule 14**: **Modifiers that are amino acids with sulfur-containing side chains yield low yield due to potential catalyst poisoning or deactivation.**
  - *Low Yield Example*: **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid**.
  - *Rationale*: Sulfur-containing groups such as sulfides or methylthioethers can bind strongly to metal centers, potentially blocking active sites and deactivating the catalyst.

- **Rule 15**: **Modifiers with flexible ether linkages and amino groups yield low yield due to reduced coordination efficiency and increased conformational flexibility.**
  - *Low Yield Example*: **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**.
  - *Rationale*: The combination of ether linkages and amino groups may introduce too much flexibility, preventing effective simultaneous coordination necessary for enhancing catalyst performance.

**End of Rules**

---

These rules have been generated by analyzing the dataset and considering the underlying physicochemical properties of the modifiers. They balance coverage of the dataset with specificity, aiming to predict whether a given modifier will result in a high or low yield based on its structural features.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4,Rule 5,Rule 6,Rule 7,Rule 8,Rule 9,Rule 10,Rule 11,Rule 12,Rule 13,Rule 14,Rule 15
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0
1,0,0,0,1,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,1,0,0
0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0
0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0
1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0

---------------------------------------------------------------


    Train Accuracy: 0.7714285714285715; Test Accuracy: 1.0
    Train Support: 0.05357142857142857; Test Support: 0.0
    Train Confidence: 0.9375; Test Confidence: 0.5
    Train Lift: 1.865808823529412; Test Lift: NONE
    Train Leverage: 0.022653061224489797; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    """
    Converts a list of SMILES strings into a feature matrix based on specified structural rules.
    Each rule is represented by SMARTS patterns, and the function returns a DataFrame where each
    column corresponds to a rule, and each row corresponds to a SMILES string from the input list.

    A value of 0 indicates the rule does not match the molecule.
    A value of 1 indicates the rule matches and predicts a high target value.
    A value of -1 indicates the rule matches and predicts a low target value.
    """
    # Define SMARTS patterns for the rules
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are α-amino dicarboxylic acids yield high yield.',
            'patterns': [
                '[NX3][CX4H]([CX3](=O)[OX1H0-,OX2H1])',  # α-amino group
                '[CX3](=O)[OX1H0-,OX2H1]',  # Carboxylic acid group
                '[#6][CX3](=O)[OX1H0-,OX2H1]'  # Second carboxylic acid
            ],
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Para-substituted benzoic acids yield high yield when the substituent is a coordinating group like amino, nitro, or bromomethyl.',
            'patterns': [
                'c1ccc(cc1)[C;X3](=O)[OX1H0-,OX2H1]',  # Benzoic acid
                # Coordinating substituents at para position
                '[NX3][c]1ccc(cc1)[C;X3](=O)[OX1H0-,OX2H1]',  # Amino group
                '[c]1ccc(cc1[N+](=O)[O-])[C;X3](=O)[OX1H0-,OX2H1]',  # Nitro group
                '[Br][CH2][c]1ccc(cc1)[C;X3](=O)[OX1H0-,OX2H1]'  # Bromomethyl group
            ],
            'exclude_patterns': [
                '[c]1ccc(cc1C)[C;X3](=O)[OX1H0-,OX2H1]',  # Methyl substituent
                '[c]1ccc(cc1C=O)[C;X3](=O)[OX1H0-,OX2H1]'  # Formyl substituent
            ],
            'prediction': 1
        },
        {
            'number': 3,
            'description': 'Modifiers with multiple hydroxyl groups adjacent to the carboxylic acid yield high yield.',
            'patterns': [
                '[CX4H1]([OX2H])[CX4H1]([OX2H])[CX4H1]([OX2H])[CX4H1]([OX2H])[CX3](=O)[OX1H0-,OX2H1]',  # Multiple adjacent hydroxyls
            ],
            'prediction': 1
        },
        {
            'number': 4,
            'description': 'Modifiers that are aliphatic carboxylic acids with chain lengths of 6 to 8 carbons and lacking additional functional groups yield high yield.',
            'patterns': [
                '[CX3](=O)[OX1H0-,OX2H1]',  # Carboxylic acid group
                '[CH2]' * 5,  # Chain length of 6 carbons including carboxylic carbon
                '[CH2]' * 6,
                '[CH2]' * 7
            ],
            'exclude_patterns': [
                '[#6][!#1;!#6]',  # Exclude additional functional groups
            ],
            'prediction': 1
        },
        {
            'number': 5,
            'description': 'Modifiers that are amino acids with aromatic side chains containing coordinating heteroatoms yield high yield.',
            'patterns': [
                '[NX3][CX4H]([CX3](=O)[OX1H0-,OX2H1])',  # Amino acid backbone
                # Aromatic side chain with heteroatom
                '[*][c][n][c][c][c]',  # Indole ring (tryptophan)
            ],
            'prediction': 1
        },
        {
            'number': 6,
            'description': 'Modifiers containing ether linkages and terminating with a carboxylic acid yield low yield.',
            'patterns': [
                '[#6][OX2][#6]',  # Ether linkage
                '[CX3](=O)[OX1H0-,OX2H1]'  # Carboxylic acid group
            ],
            'prediction': -1
        },
        {
            'number': 7,
            'description': 'Modifiers with electron-withdrawing perfluoroalkyl groups yield low yield.',
            'patterns': [
                '[CX4]([F])([F])([F])',  # Trifluoromethyl group
                '[CX3](=O)[OX1H0-,OX2H1]'  # Carboxylic acid group
            ],
            'prediction': -1
        },
        {
            'number': 8,
            'description': 'Modifiers with acylated amino groups yield low yield.',
            'patterns': [
                '[NX3][CX3](=O)[#6]',  # Acylated amino group
            ],
            'prediction': -1
        },
        {
            'number': 9,
            'description': 'Modifiers with thiol groups adjacent to the carboxylic acid yield high yield.',
            'patterns': [
                '[SX2H][CX4][CX3](=O)[OX1H0-,OX2H1]',  # Thiol adjacent to carboxylic acid
            ],
            'exclude_patterns': [
                '[c][SX2H]',  # Thiol attached to aromatic ring
            ],
            'prediction': 1
        },
        {
            'number': 10,
            'description': 'Modifiers containing aldehyde (formyl) groups yield low yield.',
            'patterns': [
                '[CX3H1](=O)[#6]',  # Aldehyde group
            ],
            'prediction': -1
        },
        {
            'number': 11,
            'description': 'Modifiers with long aliphatic chains (>6 carbons) bearing amino or hydroxyl groups yield low yield.',
            'patterns': [
                '[CX3](=O)[OX1H0-,OX2H1]',  # Carboxylic acid group
                '[CH2]' * 6,  # Chain length >6 carbons including carboxylic carbon
                '[NX3H2]',  # Amino group
                '[OX2H]'    # Hydroxyl group
            ],
            'prediction': -1
        },
        {
            'number': 12,
            'description': 'Modifiers that are nitrogen-containing heterocyclic carboxylic acids yield high yield when the carboxyl group is directly attached to the heterocyclic ring.',
            'patterns': [
                '[c][n][c][c][c][CX3](=O)[OX1H0-,OX2H1]',  # Pyridine-3-carboxylic acid
            ],
            'exclude_patterns': [
                '[c][c][n][c][c][c][CX3](=O)[OX1H0-,OX2H1]',  # Heterocycle with linker
            ],
            'prediction': 1
        },
        {
            'number': 13,
            'description': 'Modifiers with electron-donating methoxy groups on aromatic rings yield high yield.',
            'patterns': [
                '[c][OX2][CH3]',  # Methoxy group on aromatic ring
            ],
            'prediction': 1
        },
        {
            'number': 14,
            'description': 'Modifiers that are amino acids with sulfur-containing side chains yield low yield.',
            'patterns': [
                '[NX3][CX4H]([CX3](=O)[OX1H0-,OX2H1])[CX4][SX2][#6]',  # Sulfur-containing side chain
            ],
            'prediction': -1
        },
        {
            'number': 15,
            'description': 'Modifiers with flexible ether linkages and amino groups yield low yield.',
            'patterns': [
                '[#6][OX2][#6][OX2][#6][NX3H2]',  # Ether linkage with amino group
            ],
            'prediction': -1
        }
    ]

    # Compile SMARTS patterns
    for rule in rules:
        rule['compiled_patterns'] = []
        for pattern in rule['patterns']:
            rule['compiled_patterns'].append(Chem.MolFromSmarts(pattern))
        if 'exclude_patterns' in rule:
            rule['compiled_exclude_patterns'] = []
            for pattern in rule['exclude_patterns']:
                rule['compiled_exclude_patterns'].append(Chem.MolFromSmarts(pattern))

    # Initialize the result matrix
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0] * len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'compiled_exclude_patterns' in rule:
                    for pat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for pat in rule['compiled_patterns']:
                    if not mol.HasSubstructMatch(pat):
                        match = False
                        break
                if match:
                    row.append(rule['prediction'])
                else:
                    row.append(0)
            except Exception:
                # In case of any error, append 0
                row.append(0)
        results.append(row)

    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule["number"]}' for rule in rules])
    return df

--------------------------------------------------
    Target Name: yield
    GPT Model: o1-preview-2024-09-12
    ML Model: ETC
    Current_Rules:
    **Start of Rules**

1. **Modifiers that are α-amino dicarboxylic acids yield high yields.**

   - *High Yield Examples*: **(2S)-2-aminobutanedioic acid** (*Aspartic acid*), **(2S)-2-aminopentanedioic acid** (*Glutamic acid*).
   - *Rationale*: The presence of an α-amino group and two carboxylic acid groups provides multiple coordination sites for metal ions, enhancing catalyst stability and reactivity through effective chelation.

2. **Para-substituted benzoic acids yield high yields when the para-substituent is an electron-withdrawing group (e.g., amino, nitro, halomethyl); substituents like methyl, formyl, or thiol yield low yields.**

   - *High Yield Examples*: **4-aminobenzoic acid**, **4-nitrobenzoic acid**, **4-(bromomethyl)benzoic acid**.
   - *Low Yield Examples*: **4-methylbenzoic acid**, **4-formylbenzoic acid**, **4-sulfanylbenzoic acid**.
   - *Rationale*: Electron-withdrawing groups enhance metal-ligand interactions by increasing the electrophilicity of the aromatic ring, improving catalyst binding. Electron-donating groups or those that can interfere with metal coordination reduce effectiveness.

3. **Modifiers with multiple adjacent hydroxyl groups (polyols) on aliphatic chains yield high yields; those with single or distant hydroxyl groups yield low yields.**

   - *High Yield Examples*: **(2R,3S,4R,5R)-2,3,4,5,6-pentahydroxyhexanoic acid** (*Gluconic acid*), **2-[[1,3-dihydroxy-2-(hydroxymethyl)propan-2-yl]oxy]-2-oxoacetic acid**.
   - *Low Yield Example*: **7-hydroxyheptanoic acid**.
   - *Rationale*: Multiple adjacent hydroxyl groups enhance chelation with metal centers due to increased coordination sites, improving catalyst effectiveness. Isolated hydroxyl groups offer limited coordination.

4. **Unsubstituted aliphatic carboxylic acids with chain lengths of 6 to 8 carbons yield high yields; introduction of polar functional groups (e.g., amino, hydroxyl) lowers the yield.**

   - *High Yield Example*: **Octanoic acid**.
   - *Low Yield Examples*: **7-aminoheptanoic acid**, **8-aminooctanoic acid**, **7-hydroxyheptanoic acid**.
   - *Rationale*: Unsubstituted aliphatic chains favor hydrophobic interactions with the catalyst surface, enhancing activity. Polar substituents may interfere with these interactions or lead to undesired coordination, resulting in lower yields.

5. **Modifiers containing flexible ether linkages yield low yields due to decreased coordination efficiency and increased conformational flexibility.**

   - *Low Yield Examples*: **2-[2-(2-methoxyethoxy)ethoxy]acetic acid**, **3-[2-(2-aminoethoxy)ethoxy]propanoic acid**.
   - *Rationale*: The flexibility introduced by ether linkages can hinder optimal alignment of coordinating groups with metal centers, reducing the effectiveness of catalyst modification.

6. **Modifiers with strong electron-withdrawing groups such as perfluoroalkyl or trifluoroacetyl chains yield low yields due to decreased electron density on coordinating atoms.**

   - *Low Yield Examples*: **2,2,3,3,4,4,5,5,5-nonafluoropentanoic acid**, **4-[(2,2,2-trifluoroacetyl)amino]butanoic acid**.
   - *Rationale*: Electron-withdrawing groups reduce the ability of coordinating atoms to donate electron density to metal ions, weakening the metal-ligand interaction necessary for effective catalysis.

7. **Modifiers with thiol groups adjacent to the carboxylic acid yield high yields if aliphatic; if aromatic, they yield low yields due to potential catalyst poisoning.**

   - *High Yield Example*: **3-sulfanylpropanoic acid**.
   - *Low Yield Example*: **4-sulfanylbenzoic acid**.
   - *Rationale*: Aliphatic thiol groups can coordinate effectively with metal ions, enhancing catalyst activity. Aromatic thiol groups may bind too strongly or irreversibly, causing deactivation.

8. **Modifiers containing aldehyde (formyl) groups yield low yields due to potential catalyst deactivation through side reactions.**

   - *Low Yield Examples*: **4-formylbenzoic acid**, **5-formyl-2-hydroxybenzoic acid**.
   - *Rationale*: Reactive aldehyde groups may form adducts with the catalyst or participate in side reactions, reducing the availability of active catalytic sites.

9. **Nitrogen-containing heterocyclic carboxylic acids yield high yields when the carboxyl group is directly attached to the heterocycle; those with additional aromatic rings or linkers yield low yields.**

   - *High Yield Examples*: **Pyridine-3-carboxylic acid** (*Niacin*), **1H-pyrazole-4-carboxylic acid**.
   - *Low Yield Example*: **4-pyridin-4-ylbenzoic acid**.
   - *Rationale*: Direct attachment enables effective bidentate coordination, enhancing metal-ligand interactions. Additional linkers can disrupt optimal geometry.

10. **Amino acids with aromatic side chains containing coordinating heteroatoms yield high yields; those without heteroatoms yield low yields.**

    - *High Yield Example*: **(2R)-2-amino-3-(1H-indol-3-yl)propanoic acid** (*Tryptophan*).
    - *Low Yield Example*: **(2S)-2-amino-3-phenylpropanoic acid** (*Phenylalanine*).
    - *Rationale*: Heteroatoms in aromatic side chains provide additional coordination sites for metal ions, enhancing catalyst activity.

11. **Modifiers where amino groups are acylated yield low yields due to reduced availability of lone pair electrons for metal coordination.**

    - *Low Yield Example*: **(2S)-6-acetamido-2-aminohexanoic acid**.
    - *Rationale*: Acylation diminishes nucleophilicity of amino groups, resulting in less effective catalyst modification.

12. **Modifiers with electron-donating methoxy groups on aromatic rings can yield high yields; however, the position and number of methoxy groups are important.**

    - *High Yield Example*: **4-(3,4-dimethoxyphenyl)-4-oxobutanoic acid**.
    - *Low Yield Examples*: **3-(4-hydroxyphenyl)propanoic acid**.
    - *Rationale*: Methoxy groups increase electron density, enhancing metal-ligand interactions. Optimal positioning is crucial for effective coordination.

13. **Modifiers with rigid aromatic systems containing additional carbonyl groups adjacent to the carboxyl group yield high yields.**

    - *High Yield Example*: **1,3-dioxo-2-benzofuran-5-carboxylic acid**.
    - *Low Yield Example*: **4-oxoheptanedioic acid**.
    - *Rationale*: Rigid structures with multiple coordination sites enhance metal binding due to fixed geometry and proximity of functional groups.

14. **Modifiers with terminal amino groups on flexible aliphatic chains yield low yields due to ineffective coordination and potential interference with catalyst sites.**

    - *Low Yield Examples*: **7-aminoheptanoic acid**, **8-aminooctanoic acid**.
    - *Rationale*: Flexible chains may not position amino groups optimally for coordination, and terminal amino groups may occupy active sites without contributing to catalysis.

15. **Modifiers that are amino acids with sulfur-containing side chains yield low yields due to potential catalyst poisoning or deactivation.**

    - *Low Yield Example*: **2-[[(2S)-2-amino-4-methylsulfanylbutanoyl]amino]acetic acid**.
    - *Rationale*: Sulfur-containing groups can bind strongly to metal centers, potentially blocking active sites and reducing catalyst activity.

**End of Rules**

---

These rules have been formulated by analyzing the provided dataset and considering the underlying physicochemical properties that influence the reaction yield. Each rule combines multiple substructures (functional groups) to predict whether a molecular modifier will result in a high or low yield. By applying these rules, one can anticipate the expected yield outcome for any new SMILES structure fitting the described criteria, aiding in the optimization and control of the reaction.---------------------------------------------------------------


    Current_Matrix:
    Matrix Generator Message:
Rule 1,Rule 2,Rule 3,Rule 4
0,0,-1,0
1,0,-1,0
0,0,-1,0
1,0,-1,0
0,0,-1,0
0,0,-1,0
0,0,-1,0
0,0,-1,0
0,0,-1,0
0,0,-1,0
0,0,-1,0
0,0,-1,0
0,0,-1,0
1,0,-1,0
0,0,-1,0
1,0,-1,0
0,0,-1,0
0,0,-1,0
0,0,-1,0
0,-1,-1,0
0,0,-1,0
0,0,-1,0
0,0,-1,0
0,0,-1,0
0,0,-1,0
0,0,-1,0
0,0,-1,0
0,0,-1,0
0,0,-1,0
0,0,-1,0
0,0,-1,0
0,0,-1,0
0,0,-1,0
0,0,-1,0
1,0,-1,0
0,0,-1,0

---------------------------------------------------------------


    Train Accuracy: 0.5428571428571428; Test Accuracy: 0.0
    Train Support: 0.05714285714285714; Test Support: 0.0
    Train Confidence: 0.8; Test Confidence: 0.5
    Train Lift: 1.5898692810457518; Test Lift: NONE
    Train Leverage: 0.015102040816326531; Test Leverage: NONE
    ----------------------------------------------------------------------------------

    Current Rule Code:
def rule2matrix(smiles_list):
    # Define SMARTS patterns for functional groups and structures according to the rules

    # Patterns for common functional groups
    carboxylic_acid = '[CX3](=O)[OX2H1]'  # Carboxylic acid group (-COOH)
    amino_group = '[NX3;H2,H1;!$([N][C,S]);!$([N]=[C,S,N,O])]'  # Primary or secondary amine
    alpha_amino_acid = '[NX3;H2][CX4H]([#6])[CX3](=O)[OX2H1]'  # Alpha amino acid backbone
    carboxylic_acid_any = '[CX3](=O)[OX1H0-,OX2H1]'  # Carboxylic acid group (includes deprotonated)
    hydroxyl_group = '[OX2H]'  # Hydroxyl group (-OH)
    thiol_group = '[SX2H]'  # Thiol group (-SH)
    ether_linkage = '[#6][OX2][#6]'  # Ether linkage (-O-)
    aldehyde_group = '[CX3H1](=O)[#6]'  # Aldehyde group (-CHO)
    nitro_group = '[NX3](=O)=O'  # Nitro group (-NO2)
    halogen = '[F,Cl,Br,I]'  # Halogen atoms
    aromatic_ring = '[c]'  # Aromatic carbon
    aliphatic_chain_6_8 = '[C;X4][C;X4][C;X4][C;X4][C;X4][C;X4]'  # Aliphatic chain of 6 carbons
    perfluoroalkyl = '[CX4]([F,Cl,Br,I])[F,Cl,Br,I][F,Cl,Br,I]'  # Trifluoromethyl or similar

    # Initialize the list of rules
    rules = [
        {
            'number': 1,
            'description': 'Modifiers that are α-amino dicarboxylic acids yield high yields.',
            'patterns': [
                alpha_amino_acid,  # Alpha amino acid backbone
            ],
            'counts': [1, 2],  # At least 1 alpha amino acid pattern, at least 2 carboxylic acids
            'prediction': 1
        },
        {
            'number': 2,
            'description': 'Para-substituted benzoic acids with electron-withdrawing para-substituents (amino, nitro, halomethyl) yield high yields; with methyl, formyl, thiol substituents yield low yields.',
            'patterns': [
                'c1ccc([CX3](=O)[OX1H0-,OX2H1])cc1*',  # Benzoic acid
            ],
            'high_yield_substituents': [
                '[NX3;H2]',  # Amino group
                '[NX3+](=O)[O-]',  # Nitro group
                '[CH2][F,Cl,Br,I]'  # Halomethyl group
            ],
            'low_yield_substituents': [
                '[CH3]',  # Methyl group
                aldehyde_group,  # Formyl group
                thiol_group  # Thiol group
            ],
            'prediction': None  # Prediction will be set based on substituent
        },
        {
            'number': 3,
            'description': 'Modifiers with multiple adjacent hydroxyl groups (polyols) on aliphatic chains yield high yields; single or distant hydroxyl groups yield low yields.',
            'patterns': [
                hydroxyl_group,
            ],
            'adjacent_hydroxyls': True,
            'prediction': None  # Prediction will be set based on adjacency
        },
        {
            'number': 4,
            'description': 'Unsubstituted aliphatic carboxylic acids with chain lengths of 6 to 8 carbons yield high yields; introduction of polar functional groups lowers the yield.',
            'patterns': [
                carboxylic_acid_any,
                '[CCCCCC,CCCCCCC,CCCCCCCC]'  # Chains of 6-8 carbons
            ],
            'exclude_patterns': [
                amino_group,
                hydroxyl_group,
                thiol_group
            ],
            'prediction': 1
        },
        # Additional rules can be added here following the same structure
    ]

    # Compile SMARTS patterns
    for rule in rules:
        compiled_patterns = [Chem.MolFromSmarts(pat) for pat in rule.get('patterns', [])]
        rule['compiled_patterns'] = compiled_patterns
        # Compile high/low yield substituents if present
        if 'high_yield_substituents' in rule:
            rule['compiled_high_yield_substituents'] = [Chem.MolFromSmarts(pat) for pat in rule['high_yield_substituents']]
        if 'low_yield_substituents' in rule:
            rule['compiled_low_yield_substituents'] = [Chem.MolFromSmarts(pat) for pat in rule['low_yield_substituents']]
        # Compile exclude patterns if present
        if 'exclude_patterns' in rule:
            rule['compiled_exclude_patterns'] = [Chem.MolFromSmarts(pat) for pat in rule['exclude_patterns']]

    # Initialize results list
    results = []

    # Process each SMILES string
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            # If the molecule cannot be parsed, append a row of zeros
            results.append([0]*len(rules))
            continue
        row = []
        for rule in rules:
            try:
                match = True
                # Check exclude patterns if any
                if 'exclude_patterns' in rule:
                    for pat in rule['compiled_exclude_patterns']:
                        if mol.HasSubstructMatch(pat):
                            match = False
                            break
                    if not match:
                        row.append(0)
                        continue
                # Check required patterns
                for idx, pat in enumerate(rule['compiled_patterns']):
                    matches = mol.GetSubstructMatches(pat)
                    if not matches:
                        match = False
                        break
                    if 'counts' in rule:
                        required_count = rule['counts'][idx]
                        if len(matches) < required_count:
                            match = False
                            break
                if not match:
                    row.append(0)
                    continue
                # Additional checks for specific rules
                if rule['number'] == 2:
                    # Para-substituted benzoic acid
                    match_high = False
                    match_low = False
                    for sub_pat in rule['compiled_high_yield_substituents']:
                        if mol.HasSubstructMatch(sub_pat):
                            match_high = True
                            break
                    for sub_pat in rule['compiled_low_yield_substituents']:
                        if mol.HasSubstructMatch(sub_pat):
                            match_low = True
                            break
                    if match_high:
                        row.append(1)
                    elif match_low:
                        row.append(-1)
                    else:
                        row.append(0)
                    continue
                elif rule['number'] == 3:
                    # Multiple adjacent hydroxyl groups
                    hydroxyl_matches = mol.GetSubstructMatches(rule['compiled_patterns'][0])
                    if len(hydroxyl_matches) >= 2:
                        # Check if any hydroxyl groups are adjacent
                        adjacent = False
                        for i in range(len(hydroxyl_matches)):
                            for j in range(i+1, len(hydroxyl_matches)):
                                path = Chem.GetShortestPath(mol, hydroxyl_matches[i][0], hydroxyl_matches[j][0])
                                if len(path) == 2:
                                    adjacent = True
                                    break
                            if adjacent:
                                break
                        if adjacent:
                            row.append(1)
                        else:
                            row.append(-1)
                    else:
                        row.append(-1)
                    continue
                # Default prediction
                row.append(rule['prediction'])
            except Exception as e:
                # In case of any error, append 0
                row.append(0)
        results.append(row)
    # Create DataFrame with results
    df = pd.DataFrame(results, columns=[f'Rule {rule['number']}' for rule in rules])
    return df

--------------------------------------------------